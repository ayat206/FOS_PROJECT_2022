
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 30 19 00 	lgdtl  0x193018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc 2f 19 f0       	mov    $0xf0192fbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 d8 b8 85 f0 01 	movl   $0x1,0xf085b8d8
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 ac b8 85 f0 01 	movl   $0x1,0xf085b8ac
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 18             	sub    $0x18,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba 40 ba 85 f0       	mov    $0xf085ba40,%edx
f010006a:	b8 20 ad 85 f0       	mov    $0xf085ad20,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 20 ad 85 f0       	push   $0xf085ad20
f010007e:	e8 d2 1b 03 00       	call   f0131c55 <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	/*2022*/
	scheduler_status = SCH_UNINITIALIZED;
f0100086:	c7 05 d4 b8 85 f0 ff 	movl   $0xffffffff,0xf085b8d4
f010008d:	ff ff ff 

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100090:	e8 c5 0b 00 00       	call   f0100c5a <console_initialize>

	//print welcome message
	print_welcome_message();
f0100095:	e8 f2 00 00 00       	call   f010018c <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f010009a:	e8 88 61 00 00       	call   f0106227 <detect_memory>
	initialize_kernel_VM();
f010009f:	e8 14 5d 00 00       	call   f0105db8 <initialize_kernel_VM>
	initialize_paging();
f01000a4:	e8 95 64 00 00       	call   f010653e <initialize_paging>
	//	page_check();

	// Lab 3 user environment initialization functions
	env_init();
f01000a9:	e8 04 a0 00 00       	call   f010a0b2 <env_init>
	idt_init();
f01000ae:	e8 bc b5 00 00       	call   f010b66f <idt_init>

	//Project initializations

	setPageReplacmentAlgorithmCLOCK();
f01000b3:	e8 ef e0 00 00       	call   f010e1a7 <setPageReplacmentAlgorithmCLOCK>
	setUHeapPlacementStrategyFIRSTFIT();
f01000b8:	e8 92 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000bd:	e8 7d ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>

#if USE_KHEAP
	//2022:
	{
		int freeFrames_before = sys_calculate_free_frames() ;
f01000c2:	e8 92 cf 00 00       	call   f010d059 <sys_calculate_free_frames>
f01000c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		int freeDiskFrames_before = pf_calculate_free_frames() ;
f01000ca:	e8 14 3d 00 00       	call   f0103de3 <pf_calculate_free_frames>
f01000cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		initialize_dyn_block_system();
f01000d2:	e8 91 77 00 00       	call   f0107868 <initialize_dyn_block_system>
		int freeFrames_after = sys_calculate_free_frames() ;
f01000d7:	e8 7d cf 00 00       	call   f010d059 <sys_calculate_free_frames>
f01000dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
		int freeDiskFrames_after = pf_calculate_free_frames() ;
f01000df:	e8 ff 3c 00 00       	call   f0103de3 <pf_calculate_free_frames>
f01000e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
f01000e7:	ff 75 e8             	pushl  -0x18(%ebp)
f01000ea:	ff 75 ec             	pushl  -0x14(%ebp)
f01000ed:	ff 75 f0             	pushl  -0x10(%ebp)
f01000f0:	ff 75 f4             	pushl  -0xc(%ebp)
f01000f3:	e8 c0 04 03 00       	call   f01305b8 <test_initialize_dyn_block_system>
f01000f8:	83 c4 10             	add    $0x10,%esp
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
f01000fb:	c7 05 a4 b8 85 f0 61 	movl   $0x61,0xf085b8a4
f0100102:	00 00 00 
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
f0100105:	c7 05 30 b8 85 f0 59 	movl   $0x59,0xf085b830
f010010c:	00 00 00 
#endif
	create_shares_array(MAX_SHARES);
f010010f:	a1 a4 b8 85 f0       	mov    0xf085b8a4,%eax
f0100114:	83 ec 0c             	sub    $0xc,%esp
f0100117:	50                   	push   %eax
f0100118:	e8 fb 6f 00 00       	call   f0107118 <create_shares_array>
f010011d:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f0100120:	a1 30 b8 85 f0       	mov    0xf085b830,%eax
f0100125:	83 ec 0c             	sub    $0xc,%esp
f0100128:	50                   	push   %eax
f0100129:	e8 a2 e7 00 00       	call   f010e8d0 <create_semaphores_array>
f010012e:	83 c4 10             	add    $0x10,%esp



	enableBuffering(0);
f0100131:	83 ec 0c             	sub    $0xc,%esp
f0100134:	6a 00                	push   $0x0
f0100136:	e8 79 e1 00 00       	call   f010e2b4 <enableBuffering>
f010013b:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0) ;
f010013e:	83 ec 0c             	sub    $0xc,%esp
f0100141:	6a 00                	push   $0x0
f0100143:	e8 54 e1 00 00       	call   f010e29c <enableModifiedBuffer>
f0100148:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f010014b:	83 ec 0c             	sub    $0xc,%esp
f010014e:	68 e8 03 00 00       	push   $0x3e8
f0100153:	e8 74 e1 00 00       	call   f010e2cc <setModifiedBufferLength>
f0100158:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f010015b:	e8 d2 5a 00 00       	call   f0105c32 <pic_init>
	sched_init() ;
f0100160:	e8 7b 47 00 00       	call   f01048e0 <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100165:	83 ec 0c             	sub    $0xc,%esp
f0100168:	68 c0 36 13 f0       	push   $0xf01336c0
f010016d:	e8 9c 0b 00 00       	call   f0100d0e <cprintf>
f0100172:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100175:	83 ec 0c             	sub    $0xc,%esp
f0100178:	68 ec 36 13 f0       	push   $0xf01336ec
f010017d:	e8 8c 0b 00 00       	call   f0100d0e <cprintf>
f0100182:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100185:	e8 aa 0b 00 00       	call   f0100d34 <run_command_prompt>
	}
f010018a:	eb d9                	jmp    f0100165 <FOS_initialize+0x106>

f010018c <print_welcome_message>:
}


void print_welcome_message()
{
f010018c:	55                   	push   %ebp
f010018d:	89 e5                	mov    %esp,%ebp
f010018f:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100192:	83 ec 0c             	sub    $0xc,%esp
f0100195:	68 11 37 13 f0       	push   $0xf0133711
f010019a:	e8 6f 0b 00 00       	call   f0100d0e <cprintf>
f010019f:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001a2:	83 ec 0c             	sub    $0xc,%esp
f01001a5:	68 18 37 13 f0       	push   $0xf0133718
f01001aa:	e8 5f 0b 00 00       	call   f0100d0e <cprintf>
f01001af:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001b2:	83 ec 0c             	sub    $0xc,%esp
f01001b5:	68 60 37 13 f0       	push   $0xf0133760
f01001ba:	e8 4f 0b 00 00       	call   f0100d0e <cprintf>
f01001bf:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f01001c2:	83 ec 0c             	sub    $0xc,%esp
f01001c5:	68 a8 37 13 f0       	push   $0xf01337a8
f01001ca:	e8 3f 0b 00 00       	call   f0100d0e <cprintf>
f01001cf:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001d2:	83 ec 0c             	sub    $0xc,%esp
f01001d5:	68 60 37 13 f0       	push   $0xf0133760
f01001da:	e8 2f 0b 00 00       	call   f0100d0e <cprintf>
f01001df:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001e2:	83 ec 0c             	sub    $0xc,%esp
f01001e5:	68 18 37 13 f0       	push   $0xf0133718
f01001ea:	e8 1f 0b 00 00       	call   f0100d0e <cprintf>
f01001ef:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f01001f2:	83 ec 0c             	sub    $0xc,%esp
f01001f5:	68 ed 37 13 f0       	push   $0xf01337ed
f01001fa:	e8 0f 0b 00 00       	call   f0100d0e <cprintf>
f01001ff:	83 c4 10             	add    $0x10,%esp
}
f0100202:	90                   	nop
f0100203:	c9                   	leave  
f0100204:	c3                   	ret    

f0100205 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f0100205:	55                   	push   %ebp
f0100206:	89 e5                	mov    %esp,%ebp
f0100208:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010020b:	8b 45 10             	mov    0x10(%ebp),%eax
f010020e:	a3 20 ad 85 f0       	mov    %eax,0xf085ad20

	va_start(ap, fmt);
f0100213:	8d 45 10             	lea    0x10(%ebp),%eax
f0100216:	83 c0 04             	add    $0x4,%eax
f0100219:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010021c:	83 ec 04             	sub    $0x4,%esp
f010021f:	ff 75 0c             	pushl  0xc(%ebp)
f0100222:	ff 75 08             	pushl  0x8(%ebp)
f0100225:	68 f2 37 13 f0       	push   $0xf01337f2
f010022a:	e8 df 0a 00 00       	call   f0100d0e <cprintf>
f010022f:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100232:	8b 45 10             	mov    0x10(%ebp),%eax
f0100235:	83 ec 08             	sub    $0x8,%esp
f0100238:	ff 75 f4             	pushl  -0xc(%ebp)
f010023b:	50                   	push   %eax
f010023c:	e8 a4 0a 00 00       	call   f0100ce5 <vcprintf>
f0100241:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100244:	83 ec 0c             	sub    $0xc,%esp
f0100247:	68 0b 38 13 f0       	push   $0xf013380b
f010024c:	e8 bd 0a 00 00       	call   f0100d0e <cprintf>
f0100251:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f0100254:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f0100259:	85 c0                	test   %eax,%eax
f010025b:	74 12                	je     f010026f <_panic+0x6a>
f010025d:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f0100262:	8b 40 54             	mov    0x54(%eax),%eax
f0100265:	83 f8 02             	cmp    $0x2,%eax
f0100268:	75 05                	jne    f010026f <_panic+0x6a>
	{
		//2015
		env_exit();
f010026a:	e8 38 9d 00 00       	call   f0109fa7 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010026f:	a1 d4 b8 85 f0       	mov    0xf085b8d4,%eax
f0100274:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100277:	74 1b                	je     f0100294 <_panic+0x8f>
	{
		cprintf("scheduler_status=%d\n", scheduler_status);
f0100279:	a1 d4 b8 85 f0       	mov    0xf085b8d4,%eax
f010027e:	83 ec 08             	sub    $0x8,%esp
f0100281:	50                   	push   %eax
f0100282:	68 0d 38 13 f0       	push   $0xf013380d
f0100287:	e8 82 0a 00 00       	call   f0100d0e <cprintf>
f010028c:	83 c4 10             	add    $0x10,%esp
		//2015
		fos_scheduler();
f010028f:	e8 ad 44 00 00       	call   f0104741 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f0100294:	c7 05 74 af 85 f0 00 	movl   $0x0,0xf085af74
f010029b:	00 00 00 
		lcr3(phys_page_directory);
f010029e:	a1 28 b9 85 f0       	mov    0xf085b928,%eax
f01002a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01002a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01002a9:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f01002ac:	83 ec 0c             	sub    $0xc,%esp
f01002af:	6a 00                	push   $0x0
f01002b1:	e8 7e 0a 00 00       	call   f0100d34 <run_command_prompt>
f01002b6:	83 c4 10             	add    $0x10,%esp
f01002b9:	eb f1                	jmp    f01002ac <_panic+0xa7>

f01002bb <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f01002bb:	55                   	push   %ebp
f01002bc:	89 e5                	mov    %esp,%ebp
f01002be:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01002c1:	8b 45 10             	mov    0x10(%ebp),%eax
f01002c4:	a3 20 ad 85 f0       	mov    %eax,0xf085ad20

	va_start(ap, fmt);
f01002c9:	8d 45 10             	lea    0x10(%ebp),%eax
f01002cc:	83 c0 04             	add    $0x4,%eax
f01002cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01002d2:	83 ec 04             	sub    $0x4,%esp
f01002d5:	ff 75 0c             	pushl  0xc(%ebp)
f01002d8:	ff 75 08             	pushl  0x8(%ebp)
f01002db:	68 f2 37 13 f0       	push   $0xf01337f2
f01002e0:	e8 29 0a 00 00       	call   f0100d0e <cprintf>
f01002e5:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01002e8:	8b 45 10             	mov    0x10(%ebp),%eax
f01002eb:	83 ec 08             	sub    $0x8,%esp
f01002ee:	ff 75 f4             	pushl  -0xc(%ebp)
f01002f1:	50                   	push   %eax
f01002f2:	e8 ee 09 00 00       	call   f0100ce5 <vcprintf>
f01002f7:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002fa:	83 ec 0c             	sub    $0xc,%esp
f01002fd:	68 0b 38 13 f0       	push   $0xf013380b
f0100302:	e8 07 0a 00 00       	call   f0100d0e <cprintf>
f0100307:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010030a:	a1 d4 b8 85 f0       	mov    0xf085b8d4,%eax
f010030f:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100312:	74 27                	je     f010033b <_panic_all+0x80>
	{
		//exit all ready env's
		sched_exit_all_ready_envs();
f0100314:	e8 dd 51 00 00       	call   f01054f6 <sched_exit_all_ready_envs>
		if (curenv != NULL)
f0100319:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010031e:	85 c0                	test   %eax,%eax
f0100320:	74 14                	je     f0100336 <_panic_all+0x7b>
		{
			//cprintf("exit curenv...........\n");
			sched_exit_env(curenv->env_id);
f0100322:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f0100327:	8b 40 4c             	mov    0x4c(%eax),%eax
f010032a:	83 ec 0c             	sub    $0xc,%esp
f010032d:	50                   	push   %eax
f010032e:	e8 8a 4f 00 00       	call   f01052bd <sched_exit_env>
f0100333:	83 c4 10             	add    $0x10,%esp
			//env_run_cmd_prmpt() ;
		}

		fos_scheduler();
f0100336:	e8 06 44 00 00       	call   f0104741 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f010033b:	c7 05 74 af 85 f0 00 	movl   $0x0,0xf085af74
f0100342:	00 00 00 
		lcr3(phys_page_directory);
f0100345:	a1 28 b9 85 f0       	mov    0xf085b928,%eax
f010034a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010034d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100350:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f0100353:	83 ec 0c             	sub    $0xc,%esp
f0100356:	6a 00                	push   $0x0
f0100358:	e8 d7 09 00 00       	call   f0100d34 <run_command_prompt>
f010035d:	83 c4 10             	add    $0x10,%esp
f0100360:	eb f1                	jmp    f0100353 <_panic_all+0x98>

f0100362 <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f0100362:	55                   	push   %ebp
f0100363:	89 e5                	mov    %esp,%ebp
f0100365:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100368:	8b 45 10             	mov    0x10(%ebp),%eax
f010036b:	a3 20 ad 85 f0       	mov    %eax,0xf085ad20

	va_start(ap, fmt);
f0100370:	8d 45 10             	lea    0x10(%ebp),%eax
f0100373:	83 c0 04             	add    $0x4,%eax
f0100376:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100379:	83 ec 04             	sub    $0x4,%esp
f010037c:	ff 75 0c             	pushl  0xc(%ebp)
f010037f:	ff 75 08             	pushl  0x8(%ebp)
f0100382:	68 f2 37 13 f0       	push   $0xf01337f2
f0100387:	e8 82 09 00 00       	call   f0100d0e <cprintf>
f010038c:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010038f:	8b 45 10             	mov    0x10(%ebp),%eax
f0100392:	83 ec 08             	sub    $0x8,%esp
f0100395:	ff 75 f4             	pushl  -0xc(%ebp)
f0100398:	50                   	push   %eax
f0100399:	e8 47 09 00 00       	call   f0100ce5 <vcprintf>
f010039e:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003a1:	83 ec 0c             	sub    $0xc,%esp
f01003a4:	68 0b 38 13 f0       	push   $0xf013380b
f01003a9:	e8 60 09 00 00       	call   f0100d0e <cprintf>
f01003ae:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01003b1:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f01003b6:	85 c0                	test   %eax,%eax
f01003b8:	74 28                	je     f01003e2 <_panic_into_prompt+0x80>
f01003ba:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f01003bf:	8b 40 54             	mov    0x54(%eax),%eax
f01003c2:	83 f8 02             	cmp    $0x2,%eax
f01003c5:	75 1b                	jne    f01003e2 <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f01003c7:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f01003cc:	83 ec 0c             	sub    $0xc,%esp
f01003cf:	50                   	push   %eax
f01003d0:	e8 a0 47 00 00       	call   f0104b75 <sched_insert_exit>
f01003d5:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f01003d8:	c7 05 74 af 85 f0 00 	movl   $0x0,0xf085af74
f01003df:	00 00 00 
	}

	lcr3(phys_page_directory);
f01003e2:	a1 28 b9 85 f0       	mov    0xf085b928,%eax
f01003e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01003ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01003ed:	0f 22 d8             	mov    %eax,%cr3

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f01003f0:	a1 d4 b8 85 f0       	mov    0xf085b8d4,%eax
f01003f5:	83 f8 ff             	cmp    $0xffffffff,%eax
f01003f8:	74 0a                	je     f0100404 <_panic_into_prompt+0xa2>
	{
		scheduler_status = SCH_STOPPED;
f01003fa:	c7 05 d4 b8 85 f0 00 	movl   $0x0,0xf085b8d4
f0100401:	00 00 00 
	}
	while (1)
		run_command_prompt(NULL);
f0100404:	83 ec 0c             	sub    $0xc,%esp
f0100407:	6a 00                	push   $0x0
f0100409:	e8 26 09 00 00       	call   f0100d34 <run_command_prompt>
f010040e:	83 c4 10             	add    $0x10,%esp
f0100411:	eb f1                	jmp    f0100404 <_panic_into_prompt+0xa2>

f0100413 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100413:	55                   	push   %ebp
f0100414:	89 e5                	mov    %esp,%ebp
f0100416:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0100419:	8d 45 10             	lea    0x10(%ebp),%eax
f010041c:	83 c0 04             	add    $0x4,%eax
f010041f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100422:	83 ec 04             	sub    $0x4,%esp
f0100425:	ff 75 0c             	pushl  0xc(%ebp)
f0100428:	ff 75 08             	pushl  0x8(%ebp)
f010042b:	68 22 38 13 f0       	push   $0xf0133822
f0100430:	e8 d9 08 00 00       	call   f0100d0e <cprintf>
f0100435:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100438:	8b 45 10             	mov    0x10(%ebp),%eax
f010043b:	83 ec 08             	sub    $0x8,%esp
f010043e:	ff 75 f4             	pushl  -0xc(%ebp)
f0100441:	50                   	push   %eax
f0100442:	e8 9e 08 00 00       	call   f0100ce5 <vcprintf>
f0100447:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010044a:	83 ec 0c             	sub    $0xc,%esp
f010044d:	68 0b 38 13 f0       	push   $0xf013380b
f0100452:	e8 b7 08 00 00       	call   f0100d0e <cprintf>
f0100457:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f010045a:	90                   	nop
f010045b:	c9                   	leave  
f010045c:	c3                   	ret    

f010045d <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f010045d:	55                   	push   %ebp
f010045e:	89 e5                	mov    %esp,%ebp
f0100460:	83 ec 10             	sub    $0x10,%esp
f0100463:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010046a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010046d:	89 c2                	mov    %eax,%edx
f010046f:	ec                   	in     (%dx),%al
f0100470:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100473:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100476:	0f b6 c0             	movzbl %al,%eax
f0100479:	83 e0 01             	and    $0x1,%eax
f010047c:	85 c0                	test   %eax,%eax
f010047e:	75 07                	jne    f0100487 <serial_proc_data+0x2a>
		return -1;
f0100480:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100485:	eb 16                	jmp    f010049d <serial_proc_data+0x40>
f0100487:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010048e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100491:	89 c2                	mov    %eax,%edx
f0100493:	ec                   	in     (%dx),%al
f0100494:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f0100497:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f010049a:	0f b6 c0             	movzbl %al,%eax
}
f010049d:	c9                   	leave  
f010049e:	c3                   	ret    

f010049f <serial_intr>:

void
serial_intr(void)
{
f010049f:	55                   	push   %ebp
f01004a0:	89 e5                	mov    %esp,%ebp
f01004a2:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f01004a5:	a1 40 ad 85 f0       	mov    0xf085ad40,%eax
f01004aa:	85 c0                	test   %eax,%eax
f01004ac:	74 10                	je     f01004be <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f01004ae:	83 ec 0c             	sub    $0xc,%esp
f01004b1:	68 5d 04 10 f0       	push   $0xf010045d
f01004b6:	e8 e4 05 00 00       	call   f0100a9f <cons_intr>
f01004bb:	83 c4 10             	add    $0x10,%esp
}
f01004be:	90                   	nop
f01004bf:	c9                   	leave  
f01004c0:	c3                   	ret    

f01004c1 <serial_init>:

void
serial_init(void)
{
f01004c1:	55                   	push   %ebp
f01004c2:	89 e5                	mov    %esp,%ebp
f01004c4:	83 ec 40             	sub    $0x40,%esp
f01004c7:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f01004ce:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01004d2:	8a 45 ce             	mov    -0x32(%ebp),%al
f01004d5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01004d8:	ee                   	out    %al,(%dx)
f01004d9:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f01004e0:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f01004e4:	8a 45 cf             	mov    -0x31(%ebp),%al
f01004e7:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01004ea:	ee                   	out    %al,(%dx)
f01004eb:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f01004f2:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f01004f6:	8a 45 d0             	mov    -0x30(%ebp),%al
f01004f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01004fc:	ee                   	out    %al,(%dx)
f01004fd:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f0100504:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f0100508:	8a 45 d1             	mov    -0x2f(%ebp),%al
f010050b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010050e:	ee                   	out    %al,(%dx)
f010050f:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f0100516:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f010051a:	8a 45 d2             	mov    -0x2e(%ebp),%al
f010051d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100520:	ee                   	out    %al,(%dx)
f0100521:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f0100528:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f010052c:	8a 45 d3             	mov    -0x2d(%ebp),%al
f010052f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100532:	ee                   	out    %al,(%dx)
f0100533:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f010053a:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f010053e:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0100541:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100544:	ee                   	out    %al,(%dx)
f0100545:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010054c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010054f:	89 c2                	mov    %eax,%edx
f0100551:	ec                   	in     (%dx),%al
f0100552:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100555:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100558:	3c ff                	cmp    $0xff,%al
f010055a:	0f 95 c0             	setne  %al
f010055d:	0f b6 c0             	movzbl %al,%eax
f0100560:	a3 40 ad 85 f0       	mov    %eax,0xf085ad40
f0100565:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010056c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010056f:	89 c2                	mov    %eax,%edx
f0100571:	ec                   	in     (%dx),%al
f0100572:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100575:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f010057c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010057f:	89 c2                	mov    %eax,%edx
f0100581:	ec                   	in     (%dx),%al
f0100582:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f0100585:	90                   	nop
f0100586:	c9                   	leave  
f0100587:	c3                   	ret    

f0100588 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f0100588:	55                   	push   %ebp
f0100589:	89 e5                	mov    %esp,%ebp
f010058b:	83 ec 20             	sub    $0x20,%esp
f010058e:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100595:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100598:	89 c2                	mov    %eax,%edx
f010059a:	ec                   	in     (%dx),%al
f010059b:	88 45 ec             	mov    %al,-0x14(%ebp)
f010059e:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f01005a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01005a8:	89 c2                	mov    %eax,%edx
f01005aa:	ec                   	in     (%dx),%al
f01005ab:	88 45 ed             	mov    %al,-0x13(%ebp)
f01005ae:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f01005b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01005b8:	89 c2                	mov    %eax,%edx
f01005ba:	ec                   	in     (%dx),%al
f01005bb:	88 45 ee             	mov    %al,-0x12(%ebp)
f01005be:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f01005c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01005c8:	89 c2                	mov    %eax,%edx
f01005ca:	ec                   	in     (%dx),%al
f01005cb:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01005ce:	90                   	nop
f01005cf:	c9                   	leave  
f01005d0:	c3                   	ret    

f01005d1 <lpt_putc>:

static void
lpt_putc(int c)
{
f01005d1:	55                   	push   %ebp
f01005d2:	89 e5                	mov    %esp,%ebp
f01005d4:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005d7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01005de:	eb 08                	jmp    f01005e8 <lpt_putc+0x17>
		delay();
f01005e0:	e8 a3 ff ff ff       	call   f0100588 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005e5:	ff 45 fc             	incl   -0x4(%ebp)
f01005e8:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f01005ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01005f2:	89 c2                	mov    %eax,%edx
f01005f4:	ec                   	in     (%dx),%al
f01005f5:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01005f8:	8a 45 eb             	mov    -0x15(%ebp),%al
f01005fb:	84 c0                	test   %al,%al
f01005fd:	78 09                	js     f0100608 <lpt_putc+0x37>
f01005ff:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f0100606:	7e d8                	jle    f01005e0 <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f0100608:	8b 45 08             	mov    0x8(%ebp),%eax
f010060b:	0f b6 c0             	movzbl %al,%eax
f010060e:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100615:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100618:	8a 45 e8             	mov    -0x18(%ebp),%al
f010061b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010061e:	ee                   	out    %al,(%dx)
f010061f:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f0100626:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f010062a:	8a 45 e9             	mov    -0x17(%ebp),%al
f010062d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100630:	ee                   	out    %al,(%dx)
f0100631:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f0100638:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f010063c:	8a 45 ea             	mov    -0x16(%ebp),%al
f010063f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100642:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100643:	90                   	nop
f0100644:	c9                   	leave  
f0100645:	c3                   	ret    

f0100646 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f0100646:	55                   	push   %ebp
f0100647:	89 e5                	mov    %esp,%ebp
f0100649:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f010064c:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100653:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100656:	66 8b 00             	mov    (%eax),%ax
f0100659:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f010065d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100660:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100665:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100668:	66 8b 00             	mov    (%eax),%ax
f010066b:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010066f:	74 13                	je     f0100684 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100671:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100678:	c7 05 44 ad 85 f0 b4 	movl   $0x3b4,0xf085ad44
f010067f:	03 00 00 
f0100682:	eb 14                	jmp    f0100698 <cga_init+0x52>
	} else {
		*cp = was;
f0100684:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100687:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f010068b:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f010068e:	c7 05 44 ad 85 f0 d4 	movl   $0x3d4,0xf085ad44
f0100695:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f0100698:	a1 44 ad 85 f0       	mov    0xf085ad44,%eax
f010069d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01006a0:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f01006a4:	8a 45 e0             	mov    -0x20(%ebp),%al
f01006a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01006aa:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f01006ab:	a1 44 ad 85 f0       	mov    0xf085ad44,%eax
f01006b0:	40                   	inc    %eax
f01006b1:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01006b7:	89 c2                	mov    %eax,%edx
f01006b9:	ec                   	in     (%dx),%al
f01006ba:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f01006bd:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01006c0:	0f b6 c0             	movzbl %al,%eax
f01006c3:	c1 e0 08             	shl    $0x8,%eax
f01006c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f01006c9:	a1 44 ad 85 f0       	mov    0xf085ad44,%eax
f01006ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01006d1:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01006d5:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01006d8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01006db:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01006dc:	a1 44 ad 85 f0       	mov    0xf085ad44,%eax
f01006e1:	40                   	inc    %eax
f01006e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01006e8:	89 c2                	mov    %eax,%edx
f01006ea:	ec                   	in     (%dx),%al
f01006eb:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f01006ee:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01006f1:	0f b6 c0             	movzbl %al,%eax
f01006f4:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01006f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01006fa:	a3 48 ad 85 f0       	mov    %eax,0xf085ad48
	crt_pos = pos;
f01006ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100702:	66 a3 4c ad 85 f0    	mov    %ax,0xf085ad4c
}
f0100708:	90                   	nop
f0100709:	c9                   	leave  
f010070a:	c3                   	ret    

f010070b <cga_putc>:



void
cga_putc(int c)
{
f010070b:	55                   	push   %ebp
f010070c:	89 e5                	mov    %esp,%ebp
f010070e:	53                   	push   %ebx
f010070f:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100712:	8b 45 08             	mov    0x8(%ebp),%eax
f0100715:	b0 00                	mov    $0x0,%al
f0100717:	85 c0                	test   %eax,%eax
f0100719:	75 07                	jne    f0100722 <cga_putc+0x17>
		c |= 0x0700;
f010071b:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100722:	8b 45 08             	mov    0x8(%ebp),%eax
f0100725:	0f b6 c0             	movzbl %al,%eax
f0100728:	83 f8 09             	cmp    $0x9,%eax
f010072b:	0f 84 94 00 00 00    	je     f01007c5 <cga_putc+0xba>
f0100731:	83 f8 09             	cmp    $0x9,%eax
f0100734:	7f 0a                	jg     f0100740 <cga_putc+0x35>
f0100736:	83 f8 08             	cmp    $0x8,%eax
f0100739:	74 14                	je     f010074f <cga_putc+0x44>
f010073b:	e9 c8 00 00 00       	jmp    f0100808 <cga_putc+0xfd>
f0100740:	83 f8 0a             	cmp    $0xa,%eax
f0100743:	74 49                	je     f010078e <cga_putc+0x83>
f0100745:	83 f8 0d             	cmp    $0xd,%eax
f0100748:	74 53                	je     f010079d <cga_putc+0x92>
f010074a:	e9 b9 00 00 00       	jmp    f0100808 <cga_putc+0xfd>
	case '\b':
		if (crt_pos > 0) {
f010074f:	66 a1 4c ad 85 f0    	mov    0xf085ad4c,%ax
f0100755:	66 85 c0             	test   %ax,%ax
f0100758:	0f 84 d0 00 00 00    	je     f010082e <cga_putc+0x123>
			crt_pos--;
f010075e:	66 a1 4c ad 85 f0    	mov    0xf085ad4c,%ax
f0100764:	48                   	dec    %eax
f0100765:	66 a3 4c ad 85 f0    	mov    %ax,0xf085ad4c
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010076b:	8b 15 48 ad 85 f0    	mov    0xf085ad48,%edx
f0100771:	66 a1 4c ad 85 f0    	mov    0xf085ad4c,%ax
f0100777:	0f b7 c0             	movzwl %ax,%eax
f010077a:	01 c0                	add    %eax,%eax
f010077c:	01 c2                	add    %eax,%edx
f010077e:	8b 45 08             	mov    0x8(%ebp),%eax
f0100781:	b0 00                	mov    $0x0,%al
f0100783:	83 c8 20             	or     $0x20,%eax
f0100786:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f0100789:	e9 a0 00 00 00       	jmp    f010082e <cga_putc+0x123>
	case '\n':
		crt_pos += CRT_COLS;
f010078e:	66 a1 4c ad 85 f0    	mov    0xf085ad4c,%ax
f0100794:	83 c0 50             	add    $0x50,%eax
f0100797:	66 a3 4c ad 85 f0    	mov    %ax,0xf085ad4c
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f010079d:	66 8b 0d 4c ad 85 f0 	mov    0xf085ad4c,%cx
f01007a4:	66 a1 4c ad 85 f0    	mov    0xf085ad4c,%ax
f01007aa:	bb 50 00 00 00       	mov    $0x50,%ebx
f01007af:	ba 00 00 00 00       	mov    $0x0,%edx
f01007b4:	66 f7 f3             	div    %bx
f01007b7:	89 d0                	mov    %edx,%eax
f01007b9:	29 c1                	sub    %eax,%ecx
f01007bb:	89 c8                	mov    %ecx,%eax
f01007bd:	66 a3 4c ad 85 f0    	mov    %ax,0xf085ad4c
		break;
f01007c3:	eb 6a                	jmp    f010082f <cga_putc+0x124>
	case '\t':
		cons_putc(' ');
f01007c5:	83 ec 0c             	sub    $0xc,%esp
f01007c8:	6a 20                	push   $0x20
f01007ca:	e8 69 04 00 00       	call   f0100c38 <cons_putc>
f01007cf:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007d2:	83 ec 0c             	sub    $0xc,%esp
f01007d5:	6a 20                	push   $0x20
f01007d7:	e8 5c 04 00 00       	call   f0100c38 <cons_putc>
f01007dc:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007df:	83 ec 0c             	sub    $0xc,%esp
f01007e2:	6a 20                	push   $0x20
f01007e4:	e8 4f 04 00 00       	call   f0100c38 <cons_putc>
f01007e9:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ec:	83 ec 0c             	sub    $0xc,%esp
f01007ef:	6a 20                	push   $0x20
f01007f1:	e8 42 04 00 00       	call   f0100c38 <cons_putc>
f01007f6:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007f9:	83 ec 0c             	sub    $0xc,%esp
f01007fc:	6a 20                	push   $0x20
f01007fe:	e8 35 04 00 00       	call   f0100c38 <cons_putc>
f0100803:	83 c4 10             	add    $0x10,%esp
		break;
f0100806:	eb 27                	jmp    f010082f <cga_putc+0x124>
	default:
		crt_buf[crt_pos++] = c;		/* write the character */
f0100808:	8b 0d 48 ad 85 f0    	mov    0xf085ad48,%ecx
f010080e:	66 a1 4c ad 85 f0    	mov    0xf085ad4c,%ax
f0100814:	8d 50 01             	lea    0x1(%eax),%edx
f0100817:	66 89 15 4c ad 85 f0 	mov    %dx,0xf085ad4c
f010081e:	0f b7 c0             	movzwl %ax,%eax
f0100821:	01 c0                	add    %eax,%eax
f0100823:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100826:	8b 45 08             	mov    0x8(%ebp),%eax
f0100829:	66 89 02             	mov    %ax,(%edx)
		break;
f010082c:	eb 01                	jmp    f010082f <cga_putc+0x124>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010082e:	90                   	nop
		crt_buf[crt_pos++] = c;		/* write the character */
		break;
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f010082f:	66 a1 4c ad 85 f0    	mov    0xf085ad4c,%ax
f0100835:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100839:	76 58                	jbe    f0100893 <cga_putc+0x188>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f010083b:	a1 48 ad 85 f0       	mov    0xf085ad48,%eax
f0100840:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f0100846:	a1 48 ad 85 f0       	mov    0xf085ad48,%eax
f010084b:	83 ec 04             	sub    $0x4,%esp
f010084e:	68 00 0f 00 00       	push   $0xf00
f0100853:	52                   	push   %edx
f0100854:	50                   	push   %eax
f0100855:	e8 2b 14 03 00       	call   f0131c85 <memcpy>
f010085a:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f010085d:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f0100864:	eb 15                	jmp    f010087b <cga_putc+0x170>
			crt_buf[i] = 0x0700 | ' ';
f0100866:	8b 15 48 ad 85 f0    	mov    0xf085ad48,%edx
f010086c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010086f:	01 c0                	add    %eax,%eax
f0100871:	01 d0                	add    %edx,%eax
f0100873:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100878:	ff 45 f4             	incl   -0xc(%ebp)
f010087b:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f0100882:	7e e2                	jle    f0100866 <cga_putc+0x15b>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f0100884:	66 a1 4c ad 85 f0    	mov    0xf085ad4c,%ax
f010088a:	83 e8 50             	sub    $0x50,%eax
f010088d:	66 a3 4c ad 85 f0    	mov    %ax,0xf085ad4c
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f0100893:	a1 44 ad 85 f0       	mov    0xf085ad44,%eax
f0100898:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010089b:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010089f:	8a 45 e0             	mov    -0x20(%ebp),%al
f01008a2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01008a5:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01008a6:	66 a1 4c ad 85 f0    	mov    0xf085ad4c,%ax
f01008ac:	66 c1 e8 08          	shr    $0x8,%ax
f01008b0:	0f b6 c0             	movzbl %al,%eax
f01008b3:	8b 15 44 ad 85 f0    	mov    0xf085ad44,%edx
f01008b9:	42                   	inc    %edx
f01008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
f01008bd:	88 45 e1             	mov    %al,-0x1f(%ebp)
f01008c0:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01008c3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01008c6:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f01008c7:	a1 44 ad 85 f0       	mov    0xf085ad44,%eax
f01008cc:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01008cf:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f01008d3:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01008d6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01008d9:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f01008da:	66 a1 4c ad 85 f0    	mov    0xf085ad4c,%ax
f01008e0:	0f b6 c0             	movzbl %al,%eax
f01008e3:	8b 15 44 ad 85 f0    	mov    0xf085ad44,%edx
f01008e9:	42                   	inc    %edx
f01008ea:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f01008ed:	88 45 e3             	mov    %al,-0x1d(%ebp)
f01008f0:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01008f3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01008f6:	ee                   	out    %al,(%dx)
}
f01008f7:	90                   	nop
f01008f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01008fb:	c9                   	leave  
f01008fc:	c3                   	ret    

f01008fd <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f01008fd:	55                   	push   %ebp
f01008fe:	89 e5                	mov    %esp,%ebp
f0100900:	83 ec 28             	sub    $0x28,%esp
f0100903:	c7 45 e4 64 00 00 00 	movl   $0x64,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010090a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010090d:	89 c2                	mov    %eax,%edx
f010090f:	ec                   	in     (%dx),%al
f0100910:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100913:	8a 45 e3             	mov    -0x1d(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f0100916:	0f b6 c0             	movzbl %al,%eax
f0100919:	83 e0 01             	and    $0x1,%eax
f010091c:	85 c0                	test   %eax,%eax
f010091e:	75 0a                	jne    f010092a <kbd_proc_data+0x2d>
		return -1;
f0100920:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100925:	e9 54 01 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
f010092a:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100931:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100934:	89 c2                	mov    %eax,%edx
f0100936:	ec                   	in     (%dx),%al
f0100937:	88 45 e2             	mov    %al,-0x1e(%ebp)
	return data;
f010093a:	8a 45 e2             	mov    -0x1e(%ebp),%al

	data = inb(KBDATAP);
f010093d:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f0100940:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f0100944:	75 17                	jne    f010095d <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f0100946:	a1 68 af 85 f0       	mov    0xf085af68,%eax
f010094b:	83 c8 40             	or     $0x40,%eax
f010094e:	a3 68 af 85 f0       	mov    %eax,0xf085af68
		return 0;
f0100953:	b8 00 00 00 00       	mov    $0x0,%eax
f0100958:	e9 21 01 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
	} else if (data & 0x80) {
f010095d:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100960:	84 c0                	test   %al,%al
f0100962:	79 44                	jns    f01009a8 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f0100964:	a1 68 af 85 f0       	mov    0xf085af68,%eax
f0100969:	83 e0 40             	and    $0x40,%eax
f010096c:	85 c0                	test   %eax,%eax
f010096e:	75 08                	jne    f0100978 <kbd_proc_data+0x7b>
f0100970:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100973:	83 e0 7f             	and    $0x7f,%eax
f0100976:	eb 03                	jmp    f010097b <kbd_proc_data+0x7e>
f0100978:	8a 45 f3             	mov    -0xd(%ebp),%al
f010097b:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f010097e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100982:	8a 80 20 30 19 f0    	mov    -0xfe6cfe0(%eax),%al
f0100988:	83 c8 40             	or     $0x40,%eax
f010098b:	0f b6 c0             	movzbl %al,%eax
f010098e:	f7 d0                	not    %eax
f0100990:	89 c2                	mov    %eax,%edx
f0100992:	a1 68 af 85 f0       	mov    0xf085af68,%eax
f0100997:	21 d0                	and    %edx,%eax
f0100999:	a3 68 af 85 f0       	mov    %eax,0xf085af68
		return 0;
f010099e:	b8 00 00 00 00       	mov    $0x0,%eax
f01009a3:	e9 d6 00 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
	} else if (shift & E0ESC) {
f01009a8:	a1 68 af 85 f0       	mov    0xf085af68,%eax
f01009ad:	83 e0 40             	and    $0x40,%eax
f01009b0:	85 c0                	test   %eax,%eax
f01009b2:	74 11                	je     f01009c5 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01009b4:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f01009b8:	a1 68 af 85 f0       	mov    0xf085af68,%eax
f01009bd:	83 e0 bf             	and    $0xffffffbf,%eax
f01009c0:	a3 68 af 85 f0       	mov    %eax,0xf085af68
	}

	shift |= shiftcode[data];
f01009c5:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009c9:	8a 80 20 30 19 f0    	mov    -0xfe6cfe0(%eax),%al
f01009cf:	0f b6 d0             	movzbl %al,%edx
f01009d2:	a1 68 af 85 f0       	mov    0xf085af68,%eax
f01009d7:	09 d0                	or     %edx,%eax
f01009d9:	a3 68 af 85 f0       	mov    %eax,0xf085af68
	shift ^= togglecode[data];
f01009de:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009e2:	8a 80 20 31 19 f0    	mov    -0xfe6cee0(%eax),%al
f01009e8:	0f b6 d0             	movzbl %al,%edx
f01009eb:	a1 68 af 85 f0       	mov    0xf085af68,%eax
f01009f0:	31 d0                	xor    %edx,%eax
f01009f2:	a3 68 af 85 f0       	mov    %eax,0xf085af68

	c = charcode[shift & (CTL | SHIFT)][data];
f01009f7:	a1 68 af 85 f0       	mov    0xf085af68,%eax
f01009fc:	83 e0 03             	and    $0x3,%eax
f01009ff:	8b 14 85 20 35 19 f0 	mov    -0xfe6cae0(,%eax,4),%edx
f0100a06:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a0a:	01 d0                	add    %edx,%eax
f0100a0c:	8a 00                	mov    (%eax),%al
f0100a0e:	0f b6 c0             	movzbl %al,%eax
f0100a11:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shift & CAPSLOCK) {
f0100a14:	a1 68 af 85 f0       	mov    0xf085af68,%eax
f0100a19:	83 e0 08             	and    $0x8,%eax
f0100a1c:	85 c0                	test   %eax,%eax
f0100a1e:	74 22                	je     f0100a42 <kbd_proc_data+0x145>
		if ('a' <= c && c <= 'z')
f0100a20:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100a24:	7e 0c                	jle    f0100a32 <kbd_proc_data+0x135>
f0100a26:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100a2a:	7f 06                	jg     f0100a32 <kbd_proc_data+0x135>
			c += 'A' - 'a';
f0100a2c:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100a30:	eb 10                	jmp    f0100a42 <kbd_proc_data+0x145>
		else if ('A' <= c && c <= 'Z')
f0100a32:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100a36:	7e 0a                	jle    f0100a42 <kbd_proc_data+0x145>
f0100a38:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100a3c:	7f 04                	jg     f0100a42 <kbd_proc_data+0x145>
			c += 'a' - 'A';
f0100a3e:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100a42:	a1 68 af 85 f0       	mov    0xf085af68,%eax
f0100a47:	f7 d0                	not    %eax
f0100a49:	83 e0 06             	and    $0x6,%eax
f0100a4c:	85 c0                	test   %eax,%eax
f0100a4e:	75 2b                	jne    f0100a7b <kbd_proc_data+0x17e>
f0100a50:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100a57:	75 22                	jne    f0100a7b <kbd_proc_data+0x17e>
		cprintf("Rebooting!\n");
f0100a59:	83 ec 0c             	sub    $0xc,%esp
f0100a5c:	68 3d 38 13 f0       	push   $0xf013383d
f0100a61:	e8 a8 02 00 00       	call   f0100d0e <cprintf>
f0100a66:	83 c4 10             	add    $0x10,%esp
f0100a69:	c7 45 e8 92 00 00 00 	movl   $0x92,-0x18(%ebp)
f0100a70:	c6 45 e1 03          	movb   $0x3,-0x1f(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100a74:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100a77:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100a7a:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100a7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100a7e:	c9                   	leave  
f0100a7f:	c3                   	ret    

f0100a80 <kbd_intr>:

void
kbd_intr(void)
{
f0100a80:	55                   	push   %ebp
f0100a81:	89 e5                	mov    %esp,%ebp
f0100a83:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100a86:	83 ec 0c             	sub    $0xc,%esp
f0100a89:	68 fd 08 10 f0       	push   $0xf01008fd
f0100a8e:	e8 0c 00 00 00       	call   f0100a9f <cons_intr>
f0100a93:	83 c4 10             	add    $0x10,%esp
}
f0100a96:	90                   	nop
f0100a97:	c9                   	leave  
f0100a98:	c3                   	ret    

f0100a99 <kbd_init>:

void
kbd_init(void)
{
f0100a99:	55                   	push   %ebp
f0100a9a:	89 e5                	mov    %esp,%ebp
}
f0100a9c:	90                   	nop
f0100a9d:	5d                   	pop    %ebp
f0100a9e:	c3                   	ret    

f0100a9f <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100a9f:	55                   	push   %ebp
f0100aa0:	89 e5                	mov    %esp,%ebp
f0100aa2:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100aa5:	eb 35                	jmp    f0100adc <cons_intr+0x3d>
		if (c == 0)
f0100aa7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100aab:	75 02                	jne    f0100aaf <cons_intr+0x10>
			continue;
f0100aad:	eb 2d                	jmp    f0100adc <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100aaf:	a1 64 af 85 f0       	mov    0xf085af64,%eax
f0100ab4:	8d 50 01             	lea    0x1(%eax),%edx
f0100ab7:	89 15 64 af 85 f0    	mov    %edx,0xf085af64
f0100abd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100ac0:	88 90 60 ad 85 f0    	mov    %dl,-0xf7a52a0(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100ac6:	a1 64 af 85 f0       	mov    0xf085af64,%eax
f0100acb:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100ad0:	75 0a                	jne    f0100adc <cons_intr+0x3d>
			cons.wpos = 0;
f0100ad2:	c7 05 64 af 85 f0 00 	movl   $0x0,0xf085af64
f0100ad9:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100adc:	8b 45 08             	mov    0x8(%ebp),%eax
f0100adf:	ff d0                	call   *%eax
f0100ae1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100ae4:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100ae8:	75 bd                	jne    f0100aa7 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100aea:	90                   	nop
f0100aeb:	c9                   	leave  
f0100aec:	c3                   	ret    

f0100aed <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100aed:	55                   	push   %ebp
f0100aee:	89 e5                	mov    %esp,%ebp
f0100af0:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100af3:	e8 a7 f9 ff ff       	call   f010049f <serial_intr>
	kbd_intr();
f0100af8:	e8 83 ff ff ff       	call   f0100a80 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100afd:	8b 15 60 af 85 f0    	mov    0xf085af60,%edx
f0100b03:	a1 64 af 85 f0       	mov    0xf085af64,%eax
f0100b08:	39 c2                	cmp    %eax,%edx
f0100b0a:	74 35                	je     f0100b41 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100b0c:	a1 60 af 85 f0       	mov    0xf085af60,%eax
f0100b11:	8d 50 01             	lea    0x1(%eax),%edx
f0100b14:	89 15 60 af 85 f0    	mov    %edx,0xf085af60
f0100b1a:	8a 80 60 ad 85 f0    	mov    -0xf7a52a0(%eax),%al
f0100b20:	0f b6 c0             	movzbl %al,%eax
f0100b23:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100b26:	a1 60 af 85 f0       	mov    0xf085af60,%eax
f0100b2b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b30:	75 0a                	jne    f0100b3c <cons_getc+0x4f>
			cons.rpos = 0;
f0100b32:	c7 05 60 af 85 f0 00 	movl   $0x0,0xf085af60
f0100b39:	00 00 00 
		return c;
f0100b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100b3f:	eb 05                	jmp    f0100b46 <cons_getc+0x59>
	}
	return 0;
f0100b41:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100b46:	c9                   	leave  
f0100b47:	c3                   	ret    

f0100b48 <cons_getc2>:
// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100b48:	55                   	push   %ebp
f0100b49:	89 e5                	mov    %esp,%ebp
f0100b4b:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100b4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100b55:	a1 40 ad 85 f0       	mov    0xf085ad40,%eax
f0100b5a:	85 c0                	test   %eax,%eax
f0100b5c:	74 41                	je     f0100b9f <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100b5e:	e8 fa f8 ff ff       	call   f010045d <serial_proc_data>
f0100b63:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100b66:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100b6a:	74 33                	je     f0100b9f <cons_getc2+0x57>
				if (c1 == 0)
f0100b6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100b70:	74 2d                	je     f0100b9f <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100b72:	a1 64 af 85 f0       	mov    0xf085af64,%eax
f0100b77:	8d 50 01             	lea    0x1(%eax),%edx
f0100b7a:	89 15 64 af 85 f0    	mov    %edx,0xf085af64
f0100b80:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100b83:	88 90 60 ad 85 f0    	mov    %dl,-0xf7a52a0(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100b89:	a1 64 af 85 f0       	mov    0xf085af64,%eax
f0100b8e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b93:	75 0a                	jne    f0100b9f <cons_getc2+0x57>
						cons.wpos = 0;
f0100b95:	c7 05 64 af 85 f0 00 	movl   $0x0,0xf085af64
f0100b9c:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100b9f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100ba6:	e8 52 fd ff ff       	call   f01008fd <kbd_proc_data>
f0100bab:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100bae:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100bb2:	74 33                	je     f0100be7 <cons_getc2+0x9f>
			if (c2 == 0)
f0100bb4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100bb8:	74 2d                	je     f0100be7 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100bba:	a1 64 af 85 f0       	mov    0xf085af64,%eax
f0100bbf:	8d 50 01             	lea    0x1(%eax),%edx
f0100bc2:	89 15 64 af 85 f0    	mov    %edx,0xf085af64
f0100bc8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100bcb:	88 90 60 ad 85 f0    	mov    %dl,-0xf7a52a0(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100bd1:	a1 64 af 85 f0       	mov    0xf085af64,%eax
f0100bd6:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bdb:	75 0a                	jne    f0100be7 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100bdd:	c7 05 64 af 85 f0 00 	movl   $0x0,0xf085af64
f0100be4:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100be7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100beb:	7e 44                	jle    f0100c31 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100bed:	8b 15 60 af 85 f0    	mov    0xf085af60,%edx
f0100bf3:	a1 64 af 85 f0       	mov    0xf085af64,%eax
f0100bf8:	39 c2                	cmp    %eax,%edx
f0100bfa:	74 35                	je     f0100c31 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100bfc:	a1 60 af 85 f0       	mov    0xf085af60,%eax
f0100c01:	8d 50 01             	lea    0x1(%eax),%edx
f0100c04:	89 15 60 af 85 f0    	mov    %edx,0xf085af60
f0100c0a:	8a 80 60 ad 85 f0    	mov    -0xf7a52a0(%eax),%al
f0100c10:	0f b6 c0             	movzbl %al,%eax
f0100c13:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100c16:	a1 60 af 85 f0       	mov    0xf085af60,%eax
f0100c1b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c20:	75 0a                	jne    f0100c2c <cons_getc2+0xe4>
				cons.rpos = 0;
f0100c22:	c7 05 60 af 85 f0 00 	movl   $0x0,0xf085af60
f0100c29:	00 00 00 
			return c;
f0100c2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100c2f:	eb 05                	jmp    f0100c36 <cons_getc2+0xee>
		}
	}
	return 0;
f0100c31:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100c36:	c9                   	leave  
f0100c37:	c3                   	ret    

f0100c38 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100c38:	55                   	push   %ebp
f0100c39:	89 e5                	mov    %esp,%ebp
f0100c3b:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100c3e:	ff 75 08             	pushl  0x8(%ebp)
f0100c41:	e8 8b f9 ff ff       	call   f01005d1 <lpt_putc>
f0100c46:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100c49:	83 ec 0c             	sub    $0xc,%esp
f0100c4c:	ff 75 08             	pushl  0x8(%ebp)
f0100c4f:	e8 b7 fa ff ff       	call   f010070b <cga_putc>
f0100c54:	83 c4 10             	add    $0x10,%esp
}
f0100c57:	90                   	nop
f0100c58:	c9                   	leave  
f0100c59:	c3                   	ret    

f0100c5a <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100c5a:	55                   	push   %ebp
f0100c5b:	89 e5                	mov    %esp,%ebp
f0100c5d:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100c60:	e8 e1 f9 ff ff       	call   f0100646 <cga_init>
	kbd_init();
f0100c65:	e8 2f fe ff ff       	call   f0100a99 <kbd_init>
	serial_init();
f0100c6a:	e8 52 f8 ff ff       	call   f01004c1 <serial_init>

	if (!serial_exists)
f0100c6f:	a1 40 ad 85 f0       	mov    0xf085ad40,%eax
f0100c74:	85 c0                	test   %eax,%eax
f0100c76:	75 10                	jne    f0100c88 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100c78:	83 ec 0c             	sub    $0xc,%esp
f0100c7b:	68 49 38 13 f0       	push   $0xf0133849
f0100c80:	e8 89 00 00 00       	call   f0100d0e <cprintf>
f0100c85:	83 c4 10             	add    $0x10,%esp
}
f0100c88:	90                   	nop
f0100c89:	c9                   	leave  
f0100c8a:	c3                   	ret    

f0100c8b <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100c8b:	55                   	push   %ebp
f0100c8c:	89 e5                	mov    %esp,%ebp
f0100c8e:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100c91:	83 ec 0c             	sub    $0xc,%esp
f0100c94:	ff 75 08             	pushl  0x8(%ebp)
f0100c97:	e8 9c ff ff ff       	call   f0100c38 <cons_putc>
f0100c9c:	83 c4 10             	add    $0x10,%esp
}
f0100c9f:	90                   	nop
f0100ca0:	c9                   	leave  
f0100ca1:	c3                   	ret    

f0100ca2 <getchar>:

int
getchar(void)
{
f0100ca2:	55                   	push   %ebp
f0100ca3:	89 e5                	mov    %esp,%ebp
f0100ca5:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100ca8:	e8 40 fe ff ff       	call   f0100aed <cons_getc>
f0100cad:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100cb0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100cb4:	74 f2                	je     f0100ca8 <getchar+0x6>
		/* do nothing */;
	return c;
f0100cb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100cb9:	c9                   	leave  
f0100cba:	c3                   	ret    

f0100cbb <iscons>:

int
iscons(int fdnum)
{
f0100cbb:	55                   	push   %ebp
f0100cbc:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100cbe:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100cc3:	5d                   	pop    %ebp
f0100cc4:	c3                   	ret    

f0100cc5 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100cc5:	55                   	push   %ebp
f0100cc6:	89 e5                	mov    %esp,%ebp
f0100cc8:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100ccb:	83 ec 0c             	sub    $0xc,%esp
f0100cce:	ff 75 08             	pushl  0x8(%ebp)
f0100cd1:	e8 b5 ff ff ff       	call   f0100c8b <cputchar>
f0100cd6:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0100cd9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100cdc:	83 c0 04             	add    $0x4,%eax
f0100cdf:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0100ce2:	90                   	nop
f0100ce3:	c9                   	leave  
f0100ce4:	c3                   	ret    

f0100ce5 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100ce5:	55                   	push   %ebp
f0100ce6:	89 e5                	mov    %esp,%ebp
f0100ce8:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100ceb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100cf2:	ff 75 0c             	pushl  0xc(%ebp)
f0100cf5:	ff 75 08             	pushl  0x8(%ebp)
f0100cf8:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100cfb:	50                   	push   %eax
f0100cfc:	68 c5 0c 10 f0       	push   $0xf0100cc5
f0100d01:	e8 b3 06 03 00       	call   f01313b9 <vprintfmt>
f0100d06:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100d09:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100d0c:	c9                   	leave  
f0100d0d:	c3                   	ret    

f0100d0e <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100d0e:	55                   	push   %ebp
f0100d0f:	89 e5                	mov    %esp,%ebp
f0100d11:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100d14:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100d17:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100d1a:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d1d:	83 ec 08             	sub    $0x8,%esp
f0100d20:	ff 75 f4             	pushl  -0xc(%ebp)
f0100d23:	50                   	push   %eax
f0100d24:	e8 bc ff ff ff       	call   f0100ce5 <vcprintf>
f0100d29:	83 c4 10             	add    $0x10,%esp
f0100d2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100d2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100d32:	c9                   	leave  
f0100d33:	c3                   	ret    

f0100d34 <run_command_prompt>:

//TODO: [PROJECT MS1] [COMMAND PROMPT] auto-complete

//invoke the command prompt
void run_command_prompt()
{
f0100d34:	55                   	push   %ebp
f0100d35:	89 e5                	mov    %esp,%ebp
f0100d37:	81 ec 08 04 00 00    	sub    $0x408,%esp
	char command_line[1024];

	while (1==1)
	{
		//get command line
		readline("FOS> ", command_line);
f0100d3d:	83 ec 08             	sub    $0x8,%esp
f0100d40:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100d46:	50                   	push   %eax
f0100d47:	68 66 38 13 f0       	push   $0xf0133866
f0100d4c:	e8 10 0b 03 00       	call   f0131861 <readline>
f0100d51:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0100d54:	83 ec 0c             	sub    $0xc,%esp
f0100d57:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100d5d:	50                   	push   %eax
f0100d5e:	e8 0d 00 00 00       	call   f0100d70 <execute_command>
f0100d63:	83 c4 10             	add    $0x10,%esp
f0100d66:	85 c0                	test   %eax,%eax
f0100d68:	78 02                	js     f0100d6c <run_command_prompt+0x38>
				break;
	}
f0100d6a:	eb d1                	jmp    f0100d3d <run_command_prompt+0x9>
		readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0100d6c:	90                   	nop
	}
}
f0100d6d:	90                   	nop
f0100d6e:	c9                   	leave  
f0100d6f:	c3                   	ret    

f0100d70 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0100d70:	55                   	push   %ebp
f0100d71:	89 e5                	mov    %esp,%ebp
f0100d73:	83 ec 68             	sub    $0x68,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0100d76:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0100d79:	50                   	push   %eax
f0100d7a:	8d 45 98             	lea    -0x68(%ebp),%eax
f0100d7d:	50                   	push   %eax
f0100d7e:	68 6c 38 13 f0       	push   $0xf013386c
f0100d83:	ff 75 08             	pushl  0x8(%ebp)
f0100d86:	e8 10 13 03 00       	call   f013209b <strsplit>
f0100d8b:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0100d8e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0100d91:	85 c0                	test   %eax,%eax
f0100d93:	75 0a                	jne    f0100d9f <execute_command+0x2f>
		return 0;
f0100d95:	b8 00 00 00 00       	mov    $0x0,%eax
f0100d9a:	e9 55 01 00 00       	jmp    f0100ef4 <execute_command+0x184>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0100d9f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100da6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0100dad:	eb 33                	jmp    f0100de2 <execute_command+0x72>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f0100daf:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100db2:	89 d0                	mov    %edx,%eax
f0100db4:	01 c0                	add    %eax,%eax
f0100db6:	01 d0                	add    %edx,%eax
f0100db8:	c1 e0 02             	shl    $0x2,%eax
f0100dbb:	05 40 35 19 f0       	add    $0xf0193540,%eax
f0100dc0:	8b 10                	mov    (%eax),%edx
f0100dc2:	8b 45 98             	mov    -0x68(%ebp),%eax
f0100dc5:	83 ec 08             	sub    $0x8,%esp
f0100dc8:	52                   	push   %edx
f0100dc9:	50                   	push   %eax
f0100dca:	e8 a4 0d 03 00       	call   f0131b73 <strcmp>
f0100dcf:	83 c4 10             	add    $0x10,%esp
f0100dd2:	85 c0                	test   %eax,%eax
f0100dd4:	75 09                	jne    f0100ddf <execute_command+0x6f>
		{
			command_found = 1;
f0100dd6:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f0100ddd:	eb 0f                	jmp    f0100dee <execute_command+0x7e>
		return 0;

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100ddf:	ff 45 f0             	incl   -0x10(%ebp)
f0100de2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100de5:	a1 ac 38 19 f0       	mov    0xf01938ac,%eax
f0100dea:	39 c2                	cmp    %eax,%edx
f0100dec:	72 c1                	jb     f0100daf <execute_command+0x3f>
			command_found = 1;
			break;
		}
	}

	if(command_found)
f0100dee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100df2:	74 2e                	je     f0100e22 <execute_command+0xb2>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f0100df4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100df7:	89 d0                	mov    %edx,%eax
f0100df9:	01 c0                	add    %eax,%eax
f0100dfb:	01 d0                	add    %edx,%eax
f0100dfd:	c1 e0 02             	shl    $0x2,%eax
f0100e00:	05 48 35 19 f0       	add    $0xf0193548,%eax
f0100e05:	8b 00                	mov    (%eax),%eax
f0100e07:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0100e0a:	83 ec 08             	sub    $0x8,%esp
f0100e0d:	8d 4d 98             	lea    -0x68(%ebp),%ecx
f0100e10:	51                   	push   %ecx
f0100e11:	52                   	push   %edx
f0100e12:	ff d0                	call   *%eax
f0100e14:	83 c4 10             	add    $0x10,%esp
f0100e17:	89 45 dc             	mov    %eax,-0x24(%ebp)
		return return_value;
f0100e1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0100e1d:	e9 d2 00 00 00       	jmp    f0100ef4 <execute_command+0x184>
	}
	else
	{
		int counter2 = 0;
f0100e22:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		for (int i = 0; i < NUM_OF_COMMANDS; i++)
f0100e29:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0100e30:	e9 90 00 00 00       	jmp    f0100ec5 <execute_command+0x155>
		{
			int counter=0;
f0100e35:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			for(int j=0;j<strlen(arguments[0]);j++)
f0100e3c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0100e43:	eb 2e                	jmp    f0100e73 <execute_command+0x103>
			{
				if(arguments[0][j] == commands[i].name[j])
f0100e45:	8b 55 98             	mov    -0x68(%ebp),%edx
f0100e48:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0100e4b:	01 d0                	add    %edx,%eax
f0100e4d:	8a 08                	mov    (%eax),%cl
f0100e4f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100e52:	89 d0                	mov    %edx,%eax
f0100e54:	01 c0                	add    %eax,%eax
f0100e56:	01 d0                	add    %edx,%eax
f0100e58:	c1 e0 02             	shl    $0x2,%eax
f0100e5b:	05 40 35 19 f0       	add    $0xf0193540,%eax
f0100e60:	8b 10                	mov    (%eax),%edx
f0100e62:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0100e65:	01 d0                	add    %edx,%eax
f0100e67:	8a 00                	mov    (%eax),%al
f0100e69:	38 c1                	cmp    %al,%cl
f0100e6b:	75 03                	jne    f0100e70 <execute_command+0x100>
				{
					counter++;
f0100e6d:	ff 45 e4             	incl   -0x1c(%ebp)
	{
		int counter2 = 0;
		for (int i = 0; i < NUM_OF_COMMANDS; i++)
		{
			int counter=0;
			for(int j=0;j<strlen(arguments[0]);j++)
f0100e70:	ff 45 e0             	incl   -0x20(%ebp)
f0100e73:	8b 45 98             	mov    -0x68(%ebp),%eax
f0100e76:	83 ec 0c             	sub    $0xc,%esp
f0100e79:	50                   	push   %eax
f0100e7a:	e8 e8 0b 03 00       	call   f0131a67 <strlen>
f0100e7f:	83 c4 10             	add    $0x10,%esp
f0100e82:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0100e85:	7f be                	jg     f0100e45 <execute_command+0xd5>
				if(arguments[0][j] == commands[i].name[j])
				{
					counter++;
				}
			}
			if(counter == strlen(arguments[0]))
f0100e87:	8b 45 98             	mov    -0x68(%ebp),%eax
f0100e8a:	83 ec 0c             	sub    $0xc,%esp
f0100e8d:	50                   	push   %eax
f0100e8e:	e8 d4 0b 03 00       	call   f0131a67 <strlen>
f0100e93:	83 c4 10             	add    $0x10,%esp
f0100e96:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0100e99:	75 27                	jne    f0100ec2 <execute_command+0x152>
			{
				counter2++;
f0100e9b:	ff 45 ec             	incl   -0x14(%ebp)
				cprintf("%s\n", commands[i].name);
f0100e9e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100ea1:	89 d0                	mov    %edx,%eax
f0100ea3:	01 c0                	add    %eax,%eax
f0100ea5:	01 d0                	add    %edx,%eax
f0100ea7:	c1 e0 02             	shl    $0x2,%eax
f0100eaa:	05 40 35 19 f0       	add    $0xf0193540,%eax
f0100eaf:	8b 00                	mov    (%eax),%eax
f0100eb1:	83 ec 08             	sub    $0x8,%esp
f0100eb4:	50                   	push   %eax
f0100eb5:	68 71 38 13 f0       	push   $0xf0133871
f0100eba:	e8 4f fe ff ff       	call   f0100d0e <cprintf>
f0100ebf:	83 c4 10             	add    $0x10,%esp
		return return_value;
	}
	else
	{
		int counter2 = 0;
		for (int i = 0; i < NUM_OF_COMMANDS; i++)
f0100ec2:	ff 45 e8             	incl   -0x18(%ebp)
f0100ec5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100ec8:	a1 ac 38 19 f0       	mov    0xf01938ac,%eax
f0100ecd:	39 c2                	cmp    %eax,%edx
f0100ecf:	0f 82 60 ff ff ff    	jb     f0100e35 <execute_command+0xc5>
			{
				counter2++;
				cprintf("%s\n", commands[i].name);
			}
		}
		if(counter2==0)
f0100ed5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0100ed9:	75 14                	jne    f0100eef <execute_command+0x17f>
		{
			cprintf("Unknown command '%s'\n", arguments[0]);
f0100edb:	8b 45 98             	mov    -0x68(%ebp),%eax
f0100ede:	83 ec 08             	sub    $0x8,%esp
f0100ee1:	50                   	push   %eax
f0100ee2:	68 75 38 13 f0       	push   $0xf0133875
f0100ee7:	e8 22 fe ff ff       	call   f0100d0e <cprintf>
f0100eec:	83 c4 10             	add    $0x10,%esp
		}

	}
	return 0;
f0100eef:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100ef4:	c9                   	leave  
f0100ef5:	c3                   	ret    

f0100ef6 <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0100ef6:	55                   	push   %ebp
f0100ef7:	89 e5                	mov    %esp,%ebp
f0100ef9:	c7 05 d8 b8 85 f0 00 	movl   $0x0,0xf085b8d8
f0100f00:	00 00 00 
f0100f03:	90                   	nop
f0100f04:	5d                   	pop    %ebp
f0100f05:	c3                   	ret    

f0100f06 <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0100f06:	55                   	push   %ebp
f0100f07:	89 e5                	mov    %esp,%ebp
f0100f09:	c7 05 d8 b8 85 f0 01 	movl   $0x1,0xf085b8d8
f0100f10:	00 00 00 
f0100f13:	90                   	nop
f0100f14:	5d                   	pop    %ebp
f0100f15:	c3                   	ret    

f0100f16 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0100f16:	55                   	push   %ebp
f0100f17:	89 e5                	mov    %esp,%ebp
f0100f19:	c7 05 d8 b8 85 f0 02 	movl   $0x2,0xf085b8d8
f0100f20:	00 00 00 
f0100f23:	90                   	nop
f0100f24:	5d                   	pop    %ebp
f0100f25:	c3                   	ret    

f0100f26 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0100f26:	55                   	push   %ebp
f0100f27:	89 e5                	mov    %esp,%ebp
f0100f29:	c7 05 d8 b8 85 f0 03 	movl   $0x3,0xf085b8d8
f0100f30:	00 00 00 
f0100f33:	90                   	nop
f0100f34:	5d                   	pop    %ebp
f0100f35:	c3                   	ret    

f0100f36 <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0100f36:	55                   	push   %ebp
f0100f37:	89 e5                	mov    %esp,%ebp
f0100f39:	c7 05 d8 b8 85 f0 04 	movl   $0x4,0xf085b8d8
f0100f40:	00 00 00 
f0100f43:	90                   	nop
f0100f44:	5d                   	pop    %ebp
f0100f45:	c3                   	ret    

f0100f46 <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0100f46:	55                   	push   %ebp
f0100f47:	89 e5                	mov    %esp,%ebp
f0100f49:	a1 d8 b8 85 f0       	mov    0xf085b8d8,%eax
f0100f4e:	85 c0                	test   %eax,%eax
f0100f50:	75 04                	jne    f0100f56 <isKHeapPlacementStrategyCONTALLOC+0x10>
f0100f52:	b0 01                	mov    $0x1,%al
f0100f54:	eb 02                	jmp    f0100f58 <isKHeapPlacementStrategyCONTALLOC+0x12>
f0100f56:	b0 00                	mov    $0x0,%al
f0100f58:	5d                   	pop    %ebp
f0100f59:	c3                   	ret    

f0100f5a <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100f5a:	55                   	push   %ebp
f0100f5b:	89 e5                	mov    %esp,%ebp
f0100f5d:	a1 d8 b8 85 f0       	mov    0xf085b8d8,%eax
f0100f62:	83 f8 01             	cmp    $0x1,%eax
f0100f65:	75 04                	jne    f0100f6b <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0100f67:	b0 01                	mov    $0x1,%al
f0100f69:	eb 02                	jmp    f0100f6d <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0100f6b:	b0 00                	mov    $0x0,%al
f0100f6d:	5d                   	pop    %ebp
f0100f6e:	c3                   	ret    

f0100f6f <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0100f6f:	55                   	push   %ebp
f0100f70:	89 e5                	mov    %esp,%ebp
f0100f72:	a1 d8 b8 85 f0       	mov    0xf085b8d8,%eax
f0100f77:	83 f8 02             	cmp    $0x2,%eax
f0100f7a:	75 04                	jne    f0100f80 <isKHeapPlacementStrategyBESTFIT+0x11>
f0100f7c:	b0 01                	mov    $0x1,%al
f0100f7e:	eb 02                	jmp    f0100f82 <isKHeapPlacementStrategyBESTFIT+0x13>
f0100f80:	b0 00                	mov    $0x0,%al
f0100f82:	5d                   	pop    %ebp
f0100f83:	c3                   	ret    

f0100f84 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0100f84:	55                   	push   %ebp
f0100f85:	89 e5                	mov    %esp,%ebp
f0100f87:	a1 d8 b8 85 f0       	mov    0xf085b8d8,%eax
f0100f8c:	83 f8 03             	cmp    $0x3,%eax
f0100f8f:	75 04                	jne    f0100f95 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0100f91:	b0 01                	mov    $0x1,%al
f0100f93:	eb 02                	jmp    f0100f97 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0100f95:	b0 00                	mov    $0x0,%al
f0100f97:	5d                   	pop    %ebp
f0100f98:	c3                   	ret    

f0100f99 <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0100f99:	55                   	push   %ebp
f0100f9a:	89 e5                	mov    %esp,%ebp
f0100f9c:	a1 d8 b8 85 f0       	mov    0xf085b8d8,%eax
f0100fa1:	83 f8 04             	cmp    $0x4,%eax
f0100fa4:	75 04                	jne    f0100faa <isKHeapPlacementStrategyWORSTFIT+0x11>
f0100fa6:	b0 01                	mov    $0x1,%al
f0100fa8:	eb 02                	jmp    f0100fac <isKHeapPlacementStrategyWORSTFIT+0x13>
f0100faa:	b0 00                	mov    $0x0,%al
f0100fac:	5d                   	pop    %ebp
f0100fad:	c3                   	ret    

f0100fae <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0100fae:	55                   	push   %ebp
f0100faf:	89 e5                	mov    %esp,%ebp
f0100fb1:	c7 05 ac b8 85 f0 01 	movl   $0x1,0xf085b8ac
f0100fb8:	00 00 00 
f0100fbb:	90                   	nop
f0100fbc:	5d                   	pop    %ebp
f0100fbd:	c3                   	ret    

f0100fbe <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0100fbe:	55                   	push   %ebp
f0100fbf:	89 e5                	mov    %esp,%ebp
f0100fc1:	c7 05 ac b8 85 f0 02 	movl   $0x2,0xf085b8ac
f0100fc8:	00 00 00 
f0100fcb:	90                   	nop
f0100fcc:	5d                   	pop    %ebp
f0100fcd:	c3                   	ret    

f0100fce <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0100fce:	55                   	push   %ebp
f0100fcf:	89 e5                	mov    %esp,%ebp
f0100fd1:	c7 05 ac b8 85 f0 03 	movl   $0x3,0xf085b8ac
f0100fd8:	00 00 00 
f0100fdb:	90                   	nop
f0100fdc:	5d                   	pop    %ebp
f0100fdd:	c3                   	ret    

f0100fde <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0100fde:	55                   	push   %ebp
f0100fdf:	89 e5                	mov    %esp,%ebp
f0100fe1:	c7 05 ac b8 85 f0 04 	movl   $0x4,0xf085b8ac
f0100fe8:	00 00 00 
f0100feb:	90                   	nop
f0100fec:	5d                   	pop    %ebp
f0100fed:	c3                   	ret    

f0100fee <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100fee:	55                   	push   %ebp
f0100fef:	89 e5                	mov    %esp,%ebp
f0100ff1:	a1 ac b8 85 f0       	mov    0xf085b8ac,%eax
f0100ff6:	83 f8 01             	cmp    $0x1,%eax
f0100ff9:	75 04                	jne    f0100fff <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0100ffb:	b0 01                	mov    $0x1,%al
f0100ffd:	eb 02                	jmp    f0101001 <isUHeapPlacementStrategyFIRSTFIT+0x13>
f0100fff:	b0 00                	mov    $0x0,%al
f0101001:	5d                   	pop    %ebp
f0101002:	c3                   	ret    

f0101003 <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0101003:	55                   	push   %ebp
f0101004:	89 e5                	mov    %esp,%ebp
f0101006:	a1 ac b8 85 f0       	mov    0xf085b8ac,%eax
f010100b:	83 f8 02             	cmp    $0x2,%eax
f010100e:	75 04                	jne    f0101014 <isUHeapPlacementStrategyBESTFIT+0x11>
f0101010:	b0 01                	mov    $0x1,%al
f0101012:	eb 02                	jmp    f0101016 <isUHeapPlacementStrategyBESTFIT+0x13>
f0101014:	b0 00                	mov    $0x0,%al
f0101016:	5d                   	pop    %ebp
f0101017:	c3                   	ret    

f0101018 <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0101018:	55                   	push   %ebp
f0101019:	89 e5                	mov    %esp,%ebp
f010101b:	a1 ac b8 85 f0       	mov    0xf085b8ac,%eax
f0101020:	83 f8 03             	cmp    $0x3,%eax
f0101023:	75 04                	jne    f0101029 <isUHeapPlacementStrategyNEXTFIT+0x11>
f0101025:	b0 01                	mov    $0x1,%al
f0101027:	eb 02                	jmp    f010102b <isUHeapPlacementStrategyNEXTFIT+0x13>
f0101029:	b0 00                	mov    $0x0,%al
f010102b:	5d                   	pop    %ebp
f010102c:	c3                   	ret    

f010102d <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f010102d:	55                   	push   %ebp
f010102e:	89 e5                	mov    %esp,%ebp
f0101030:	a1 ac b8 85 f0       	mov    0xf085b8ac,%eax
f0101035:	83 f8 04             	cmp    $0x4,%eax
f0101038:	75 04                	jne    f010103e <isUHeapPlacementStrategyWORSTFIT+0x11>
f010103a:	b0 01                	mov    $0x1,%al
f010103c:	eb 02                	jmp    f0101040 <isUHeapPlacementStrategyWORSTFIT+0x13>
f010103e:	b0 00                	mov    $0x0,%al
f0101040:	5d                   	pop    %ebp
f0101041:	c3                   	ret    

f0101042 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0101042:	55                   	push   %ebp
f0101043:	89 e5                	mov    %esp,%ebp
f0101045:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0101048:	8b 45 08             	mov    0x8(%ebp),%eax
f010104b:	c1 e8 0c             	shr    $0xc,%eax
f010104e:	89 c2                	mov    %eax,%edx
f0101050:	a1 8c b8 85 f0       	mov    0xf085b88c,%eax
f0101055:	39 c2                	cmp    %eax,%edx
f0101057:	72 14                	jb     f010106d <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0101059:	83 ec 04             	sub    $0x4,%esp
f010105c:	68 8c 38 13 f0       	push   $0xf013388c
f0101061:	6a 55                	push   $0x55
f0101063:	68 b4 38 13 f0       	push   $0xf01338b4
f0101068:	e8 98 f1 ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f010106d:	8b 15 d0 b8 85 f0    	mov    0xf085b8d0,%edx
f0101073:	8b 45 08             	mov    0x8(%ebp),%eax
f0101076:	c1 e8 0c             	shr    $0xc,%eax
f0101079:	89 c1                	mov    %eax,%ecx
f010107b:	89 c8                	mov    %ecx,%eax
f010107d:	01 c0                	add    %eax,%eax
f010107f:	01 c8                	add    %ecx,%eax
f0101081:	c1 e0 03             	shl    $0x3,%eax
f0101084:	01 d0                	add    %edx,%eax
}
f0101086:	c9                   	leave  
f0101087:	c3                   	ret    

f0101088 <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f0101088:	55                   	push   %ebp
f0101089:	89 e5                	mov    %esp,%ebp
f010108b:	53                   	push   %ebx
f010108c:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f010108f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0101096:	eb 3b                	jmp    f01010d3 <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f0101098:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010109b:	89 d0                	mov    %edx,%eax
f010109d:	01 c0                	add    %eax,%eax
f010109f:	01 d0                	add    %edx,%eax
f01010a1:	c1 e0 02             	shl    $0x2,%eax
f01010a4:	05 44 35 19 f0       	add    $0xf0193544,%eax
f01010a9:	8b 10                	mov    (%eax),%edx
f01010ab:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01010ae:	89 c8                	mov    %ecx,%eax
f01010b0:	01 c0                	add    %eax,%eax
f01010b2:	01 c8                	add    %ecx,%eax
f01010b4:	c1 e0 02             	shl    $0x2,%eax
f01010b7:	05 40 35 19 f0       	add    $0xf0193540,%eax
f01010bc:	8b 00                	mov    (%eax),%eax
f01010be:	83 ec 04             	sub    $0x4,%esp
f01010c1:	52                   	push   %edx
f01010c2:	50                   	push   %eax
f01010c3:	68 2e 47 13 f0       	push   $0xf013472e
f01010c8:	e8 41 fc ff ff       	call   f0100d0e <cprintf>
f01010cd:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01010d0:	ff 45 f4             	incl   -0xc(%ebp)
f01010d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01010d6:	a1 ac 38 19 f0       	mov    0xf01938ac,%eax
f01010db:	39 c2                	cmp    %eax,%edx
f01010dd:	72 b9                	jb     f0101098 <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f01010df:	83 ec 0c             	sub    $0xc,%esp
f01010e2:	68 37 47 13 f0       	push   $0xf0134737
f01010e7:	e8 22 fc ff ff       	call   f0100d0e <cprintf>
f01010ec:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f01010ef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01010f6:	eb 42                	jmp    f010113a <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f01010f8:	8b 0d 14 3d 19 f0    	mov    0xf0193d14,%ecx
f01010fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101101:	89 d0                	mov    %edx,%eax
f0101103:	01 c0                	add    %eax,%eax
f0101105:	01 d0                	add    %edx,%eax
f0101107:	c1 e0 02             	shl    $0x2,%eax
f010110a:	01 c8                	add    %ecx,%eax
f010110c:	8b 50 04             	mov    0x4(%eax),%edx
f010110f:	8b 1d 14 3d 19 f0    	mov    0xf0193d14,%ebx
f0101115:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101118:	89 c8                	mov    %ecx,%eax
f010111a:	01 c0                	add    %eax,%eax
f010111c:	01 c8                	add    %ecx,%eax
f010111e:	c1 e0 02             	shl    $0x2,%eax
f0101121:	01 d8                	add    %ebx,%eax
f0101123:	8b 00                	mov    (%eax),%eax
f0101125:	83 ec 04             	sub    $0x4,%esp
f0101128:	52                   	push   %edx
f0101129:	50                   	push   %eax
f010112a:	68 4c 47 13 f0       	push   $0xf013474c
f010112f:	e8 da fb ff ff       	call   f0100d0e <cprintf>
f0101134:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f0101137:	ff 45 f4             	incl   -0xc(%ebp)
f010113a:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010113f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0101142:	7c b4                	jl     f01010f8 <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f0101144:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101149:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010114c:	c9                   	leave  
f010114d:	c3                   	ret    

f010114e <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f010114e:	55                   	push   %ebp
f010114f:	89 e5                	mov    %esp,%ebp
f0101151:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f0101154:	83 ec 0c             	sub    $0xc,%esp
f0101157:	68 68 47 13 f0       	push   $0xf0134768
f010115c:	e8 ad fb ff ff       	call   f0100d0e <cprintf>
f0101161:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f0101164:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f0101169:	83 ec 04             	sub    $0x4,%esp
f010116c:	50                   	push   %eax
f010116d:	68 0c 00 10 f0       	push   $0xf010000c
f0101172:	68 84 47 13 f0       	push   $0xf0134784
f0101177:	e8 92 fb ff ff       	call   f0100d0e <cprintf>
f010117c:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f010117f:	b8 b1 36 13 00       	mov    $0x1336b1,%eax
f0101184:	83 ec 04             	sub    $0x4,%esp
f0101187:	50                   	push   %eax
f0101188:	68 b1 36 13 f0       	push   $0xf01336b1
f010118d:	68 c0 47 13 f0       	push   $0xf01347c0
f0101192:	e8 77 fb ff ff       	call   f0100d0e <cprintf>
f0101197:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f010119a:	b8 20 ad 85 00       	mov    $0x85ad20,%eax
f010119f:	83 ec 04             	sub    $0x4,%esp
f01011a2:	50                   	push   %eax
f01011a3:	68 20 ad 85 f0       	push   $0xf085ad20
f01011a8:	68 fc 47 13 f0       	push   $0xf01347fc
f01011ad:	e8 5c fb ff ff       	call   f0100d0e <cprintf>
f01011b2:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f01011b5:	b8 40 ba 85 00       	mov    $0x85ba40,%eax
f01011ba:	83 ec 04             	sub    $0x4,%esp
f01011bd:	50                   	push   %eax
f01011be:	68 40 ba 85 f0       	push   $0xf085ba40
f01011c3:	68 44 48 13 f0       	push   $0xf0134844
f01011c8:	e8 41 fb ff ff       	call   f0100d0e <cprintf>
f01011cd:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f01011d0:	b8 40 ba 85 f0       	mov    $0xf085ba40,%eax
f01011d5:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f01011db:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f01011e0:	29 c2                	sub    %eax,%edx
f01011e2:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f01011e4:	85 c0                	test   %eax,%eax
f01011e6:	79 05                	jns    f01011ed <command_kernel_info+0x9f>
f01011e8:	05 ff 03 00 00       	add    $0x3ff,%eax
f01011ed:	c1 f8 0a             	sar    $0xa,%eax
f01011f0:	83 ec 08             	sub    $0x8,%esp
f01011f3:	50                   	push   %eax
f01011f4:	68 80 48 13 f0       	push   $0xf0134880
f01011f9:	e8 10 fb ff ff       	call   f0100d0e <cprintf>
f01011fe:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f0101201:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101206:	c9                   	leave  
f0101207:	c3                   	ret    

f0101208 <command_kernel_base_info>:

//===========================================================================
//Lab3.Examples
//=============
int command_kernel_base_info(int number_of_arguments, char **arguments)
{
f0101208:	55                   	push   %ebp
f0101209:	89 e5                	mov    %esp,%ebp
f010120b:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "ikb"
	//Comment the following line
	panic("Function is not implemented yet!");
f010120e:	83 ec 04             	sub    $0x4,%esp
f0101211:	68 ac 48 13 f0       	push   $0xf01348ac
f0101216:	68 b0 00 00 00       	push   $0xb0
f010121b:	68 cd 48 13 f0       	push   $0xf01348cd
f0101220:	e8 e0 ef ff ff       	call   f0100205 <_panic>

f0101225 <command_del_kernel_base>:
	return 0;
}


int command_del_kernel_base(int number_of_arguments, char **arguments)
{
f0101225:	55                   	push   %ebp
f0101226:	89 e5                	mov    %esp,%ebp
f0101228:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "dkb"
	//Comment the following line
	panic("Function is not implemented yet!");
f010122b:	83 ec 04             	sub    $0x4,%esp
f010122e:	68 ac 48 13 f0       	push   $0xf01348ac
f0101233:	68 ba 00 00 00       	push   $0xba
f0101238:	68 cd 48 13 f0       	push   $0xf01348cd
f010123d:	e8 c3 ef ff ff       	call   f0100205 <_panic>

f0101242 <command_share_page>:

	return 0;
}

int command_share_page(int number_of_arguments, char **arguments)
{
f0101242:	55                   	push   %ebp
f0101243:	89 e5                	mov    %esp,%ebp
f0101245:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "shr"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101248:	83 ec 04             	sub    $0x4,%esp
f010124b:	68 ac 48 13 f0       	push   $0xf01348ac
f0101250:	68 c3 00 00 00       	push   $0xc3
f0101255:	68 cd 48 13 f0       	push   $0xf01348cd
f010125a:	e8 a6 ef ff ff       	call   f0100205 <_panic>

f010125f <command_show_mapping>:

//===========================================================================
//Lab4.Hands.On
//=============
int command_show_mapping(int number_of_arguments, char **arguments)
{
f010125f:	55                   	push   %ebp
f0101260:	89 e5                	mov    %esp,%ebp
f0101262:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sm"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101265:	83 ec 04             	sub    $0x4,%esp
f0101268:	68 ac 48 13 f0       	push   $0xf01348ac
f010126d:	68 cf 00 00 00       	push   $0xcf
f0101272:	68 cd 48 13 f0       	push   $0xf01348cd
f0101277:	e8 89 ef ff ff       	call   f0100205 <_panic>

f010127c <command_set_permission>:

	return 0 ;
}

int command_set_permission(int number_of_arguments, char **arguments)
{
f010127c:	55                   	push   %ebp
f010127d:	89 e5                	mov    %esp,%ebp
f010127f:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101282:	83 ec 04             	sub    $0x4,%esp
f0101285:	68 ac 48 13 f0       	push   $0xf01348ac
f010128a:	68 d8 00 00 00       	push   $0xd8
f010128f:	68 cd 48 13 f0       	push   $0xf01348cd
f0101294:	e8 6c ef ff ff       	call   f0100205 <_panic>

f0101299 <command_share_range>:

	return 0 ;
}

int command_share_range(int number_of_arguments, char **arguments)
{
f0101299:	55                   	push   %ebp
f010129a:	89 e5                	mov    %esp,%ebp
f010129c:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sr"
	//Comment the following line
	panic("Function is not implemented yet!");
f010129f:	83 ec 04             	sub    $0x4,%esp
f01012a2:	68 ac 48 13 f0       	push   $0xf01348ac
f01012a7:	68 e1 00 00 00       	push   $0xe1
f01012ac:	68 cd 48 13 f0       	push   $0xf01348cd
f01012b1:	e8 4f ef ff ff       	call   f0100205 <_panic>

f01012b6 <command_nr>:
//===========================================================================
//Lab5.Examples
//==============
//[1] Number of references on the given physical address
int command_nr(int number_of_arguments, char **arguments)
{
f01012b6:	55                   	push   %ebp
f01012b7:	89 e5                	mov    %esp,%ebp
f01012b9:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "nr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01012bc:	83 ec 04             	sub    $0x4,%esp
f01012bf:	68 ac 48 13 f0       	push   $0xf01348ac
f01012c4:	68 ee 00 00 00       	push   $0xee
f01012c9:	68 cd 48 13 f0       	push   $0xf01348cd
f01012ce:	e8 32 ef ff ff       	call   f0100205 <_panic>

f01012d3 <command_ap>:
	return 0;
}

//[2] Allocate Page: If the given user virtual address is mapped, do nothing. Else, allocate a single frame and map it to a given virtual address in the user space
int command_ap(int number_of_arguments, char **arguments)
{
f01012d3:	55                   	push   %ebp
f01012d4:	89 e5                	mov    %esp,%ebp
f01012d6:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "ap"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f01012d9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012dc:	83 c0 04             	add    $0x4,%eax
f01012df:	8b 00                	mov    (%eax),%eax
f01012e1:	83 ec 04             	sub    $0x4,%esp
f01012e4:	6a 10                	push   $0x10
f01012e6:	6a 00                	push   $0x0
f01012e8:	50                   	push   %eax
f01012e9:	e8 d9 0a 03 00       	call   f0131dc7 <strtol>
f01012ee:	83 c4 10             	add    $0x10,%esp
f01012f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct FrameInfo* ptr_frame_info;
	int ret = allocate_frame(&ptr_frame_info) ;
f01012f4:	83 ec 0c             	sub    $0xc,%esp
f01012f7:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01012fa:	50                   	push   %eax
f01012fb:	e8 0d 56 00 00       	call   f010690d <allocate_frame>
f0101300:	83 c4 10             	add    $0x10,%esp
f0101303:	89 45 f0             	mov    %eax,-0x10(%ebp)
	map_frame(ptr_page_directory, ptr_frame_info, va, PERM_USER | PERM_WRITEABLE);
f0101306:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0101309:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f010130e:	6a 06                	push   $0x6
f0101310:	ff 75 f4             	pushl  -0xc(%ebp)
f0101313:	52                   	push   %edx
f0101314:	50                   	push   %eax
f0101315:	e8 42 5a 00 00       	call   f0106d5c <map_frame>
f010131a:	83 c4 10             	add    $0x10,%esp

	return 0 ;
f010131d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101322:	c9                   	leave  
f0101323:	c3                   	ret    

f0101324 <command_fp>:

//[3] Free Page: Un-map a single page at the given virtual address in the user space
int command_fp(int number_of_arguments, char **arguments)
{
f0101324:	55                   	push   %ebp
f0101325:	89 e5                	mov    %esp,%ebp
f0101327:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "fp"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f010132a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010132d:	83 c0 04             	add    $0x4,%eax
f0101330:	8b 00                	mov    (%eax),%eax
f0101332:	83 ec 04             	sub    $0x4,%esp
f0101335:	6a 10                	push   $0x10
f0101337:	6a 00                	push   $0x0
f0101339:	50                   	push   %eax
f010133a:	e8 88 0a 03 00       	call   f0131dc7 <strtol>
f010133f:	83 c4 10             	add    $0x10,%esp
f0101342:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// Un-map the page at this address
	unmap_frame(ptr_page_directory, va);
f0101345:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f010134a:	83 ec 08             	sub    $0x8,%esp
f010134d:	ff 75 f4             	pushl  -0xc(%ebp)
f0101350:	50                   	push   %eax
f0101351:	e8 3b 5b 00 00       	call   f0106e91 <unmap_frame>
f0101356:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101359:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010135e:	c9                   	leave  
f010135f:	c3                   	ret    

f0101360 <command_asp>:
//===========================================================================
//Lab5.Hands-on
//==============
//[1] Allocate Shared Pages
int command_asp(int number_of_arguments, char **arguments)
{
f0101360:	55                   	push   %ebp
f0101361:	89 e5                	mov    %esp,%ebp
f0101363:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "asp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101366:	83 ec 04             	sub    $0x4,%esp
f0101369:	68 ac 48 13 f0       	push   $0xf01348ac
f010136e:	68 18 01 00 00       	push   $0x118
f0101373:	68 cd 48 13 f0       	push   $0xf01348cd
f0101378:	e8 88 ee ff ff       	call   f0100205 <_panic>

f010137d <command_cfp>:
}


//[2] Count Free Pages in Range
int command_cfp(int number_of_arguments, char **arguments)
{
f010137d:	55                   	push   %ebp
f010137e:	89 e5                	mov    %esp,%ebp
f0101380:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "cfp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101383:	83 ec 04             	sub    $0x4,%esp
f0101386:	68 ac 48 13 f0       	push   $0xf01348ac
f010138b:	68 23 01 00 00       	push   $0x123
f0101390:	68 cd 48 13 f0       	push   $0xf01348cd
f0101395:	e8 6b ee ff ff       	call   f0100205 <_panic>

f010139a <command_ft>:

//===========================================================================
//Lab6.Examples
//=============
int command_ft(int number_of_arguments, char **arguments)
{
f010139a:	55                   	push   %ebp
f010139b:	89 e5                	mov    %esp,%ebp
	//TODO: LAB6 Example: fill this function. corresponding command name is "ft"
	//Comment the following line

	return 0;
f010139d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01013a2:	5d                   	pop    %ebp
f01013a3:	c3                   	ret    

f01013a4 <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f01013a4:	55                   	push   %ebp
f01013a5:	89 e5                	mov    %esp,%ebp
f01013a7:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f01013aa:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01013ae:	75 37                	jne    f01013e7 <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f01013b0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013b3:	83 c0 04             	add    $0x4,%eax
f01013b6:	8b 00                	mov    (%eax),%eax
f01013b8:	83 ec 04             	sub    $0x4,%esp
f01013bb:	6a 10                	push   $0x10
f01013bd:	6a 00                	push   $0x0
f01013bf:	50                   	push   %eax
f01013c0:	e8 02 0a 03 00       	call   f0131dc7 <strtol>
f01013c5:	83 c4 10             	add    $0x10,%esp
f01013c8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f01013cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01013ce:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f01013d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013d4:	83 c0 08             	add    $0x8,%eax
f01013d7:	8b 00                	mov    (%eax),%eax
f01013d9:	8a 00                	mov    (%eax),%al
f01013db:	88 c2                	mov    %al,%dl
f01013dd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01013e0:	88 10                	mov    %dl,(%eax)
f01013e2:	e9 b9 00 00 00       	jmp    f01014a0 <command_writeusermem+0xfc>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f01013e7:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01013eb:	0f 85 9f 00 00 00    	jne    f0101490 <command_writeusermem+0xec>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01013f1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013f4:	83 c0 04             	add    $0x4,%eax
f01013f7:	8b 00                	mov    (%eax),%eax
f01013f9:	83 ec 04             	sub    $0x4,%esp
f01013fc:	6a 0a                	push   $0xa
f01013fe:	6a 00                	push   $0x0
f0101400:	50                   	push   %eax
f0101401:	e8 c1 09 03 00       	call   f0131dc7 <strtol>
f0101406:	83 c4 10             	add    $0x10,%esp
f0101409:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f010140c:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0101413:	83 ec 04             	sub    $0x4,%esp
f0101416:	6a 00                	push   $0x0
f0101418:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010141b:	50                   	push   %eax
f010141c:	ff 75 f4             	pushl  -0xc(%ebp)
f010141f:	e8 a2 8b 00 00       	call   f0109fc6 <envid2env>
f0101424:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f0101427:	8b 45 0c             	mov    0xc(%ebp),%eax
f010142a:	83 c0 08             	add    $0x8,%eax
f010142d:	8b 00                	mov    (%eax),%eax
f010142f:	83 ec 04             	sub    $0x4,%esp
f0101432:	6a 10                	push   $0x10
f0101434:	6a 00                	push   $0x0
f0101436:	50                   	push   %eax
f0101437:	e8 8b 09 03 00       	call   f0131dc7 <strtol>
f010143c:	83 c4 10             	add    $0x10,%esp
f010143f:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0101442:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101445:	85 c0                	test   %eax,%eax
f0101447:	75 07                	jne    f0101450 <command_writeusermem+0xac>
f0101449:	b8 00 00 00 00       	mov    $0x0,%eax
f010144e:	eb 55                	jmp    f01014a5 <command_writeusermem+0x101>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101450:	0f 20 d8             	mov    %cr3,%eax
f0101453:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0101456:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f0101459:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f010145c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010145f:	8b 40 60             	mov    0x60(%eax),%eax
f0101462:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101465:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101468:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f010146b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010146e:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f0101471:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101474:	83 c0 0c             	add    $0xc,%eax
f0101477:	8b 00                	mov    (%eax),%eax
f0101479:	8a 00                	mov    (%eax),%al
f010147b:	88 c2                	mov    %al,%dl
f010147d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101480:	88 10                	mov    %dl,(%eax)
f0101482:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101485:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0101488:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010148b:	0f 22 d8             	mov    %eax,%cr3
f010148e:	eb 10                	jmp    f01014a0 <command_writeusermem+0xfc>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f0101490:	83 ec 0c             	sub    $0xc,%esp
f0101493:	68 e4 48 13 f0       	push   $0xf01348e4
f0101498:	e8 71 f8 ff ff       	call   f0100d0e <cprintf>
f010149d:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01014a0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01014a5:	c9                   	leave  
f01014a6:	c3                   	ret    

f01014a7 <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f01014a7:	55                   	push   %ebp
f01014a8:	89 e5                	mov    %esp,%ebp
f01014aa:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f01014ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014b0:	83 c0 04             	add    $0x4,%eax
f01014b3:	8b 00                	mov    (%eax),%eax
f01014b5:	83 ec 04             	sub    $0x4,%esp
f01014b8:	6a 10                	push   $0x10
f01014ba:	6a 00                	push   $0x0
f01014bc:	50                   	push   %eax
f01014bd:	e8 05 09 03 00       	call   f0131dc7 <strtol>
f01014c2:	83 c4 10             	add    $0x10,%esp
f01014c5:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01014ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f01014cd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014d0:	83 c0 08             	add    $0x8,%eax
f01014d3:	8b 00                	mov    (%eax),%eax
f01014d5:	83 ec 04             	sub    $0x4,%esp
f01014d8:	6a 0a                	push   $0xa
f01014da:	6a 00                	push   $0x0
f01014dc:	50                   	push   %eax
f01014dd:	e8 e5 08 03 00       	call   f0131dc7 <strtol>
f01014e2:	83 c4 10             	add    $0x10,%esp
f01014e5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f01014e8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f01014ef:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014f2:	83 c0 0c             	add    $0xc,%eax
f01014f5:	8b 00                	mov    (%eax),%eax
f01014f7:	83 ec 0c             	sub    $0xc,%esp
f01014fa:	50                   	push   %eax
f01014fb:	e8 67 05 03 00       	call   f0131a67 <strlen>
f0101500:	83 c4 10             	add    $0x10,%esp
f0101503:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f0101506:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010150d:	eb 30                	jmp    f010153f <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f010150f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101516:	eb 1c                	jmp    f0101534 <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f0101518:	8b 45 0c             	mov    0xc(%ebp),%eax
f010151b:	83 c0 0c             	add    $0xc,%eax
f010151e:	8b 10                	mov    (%eax),%edx
f0101520:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101523:	01 d0                	add    %edx,%eax
f0101525:	8a 00                	mov    (%eax),%al
f0101527:	88 c2                	mov    %al,%dl
f0101529:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010152c:	88 10                	mov    %dl,(%eax)
			address++;
f010152e:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f0101531:	ff 45 ec             	incl   -0x14(%ebp)
f0101534:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101537:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010153a:	7c dc                	jl     f0101518 <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f010153c:	ff 45 f0             	incl   -0x10(%ebp)
f010153f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101542:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101545:	7c c8                	jl     f010150f <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f0101547:	b8 00 00 00 00       	mov    $0x0,%eax


}
f010154c:	c9                   	leave  
f010154d:	c3                   	ret    

f010154e <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f010154e:	55                   	push   %ebp
f010154f:	89 e5                	mov    %esp,%ebp
f0101551:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0101554:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0101558:	75 42                	jne    f010159c <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010155a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010155d:	83 c0 04             	add    $0x4,%eax
f0101560:	8b 00                	mov    (%eax),%eax
f0101562:	83 ec 04             	sub    $0x4,%esp
f0101565:	6a 10                	push   $0x10
f0101567:	6a 00                	push   $0x0
f0101569:	50                   	push   %eax
f010156a:	e8 58 08 03 00       	call   f0131dc7 <strtol>
f010156f:	83 c4 10             	add    $0x10,%esp
f0101572:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f0101575:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101578:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f010157b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010157e:	8a 00                	mov    (%eax),%al
f0101580:	0f b6 c0             	movzbl %al,%eax
f0101583:	83 ec 04             	sub    $0x4,%esp
f0101586:	50                   	push   %eax
f0101587:	ff 75 d8             	pushl  -0x28(%ebp)
f010158a:	68 0e 49 13 f0       	push   $0xf013490e
f010158f:	e8 7a f7 ff ff       	call   f0100d0e <cprintf>
f0101594:	83 c4 10             	add    $0x10,%esp
f0101597:	e9 c4 00 00 00       	jmp    f0101660 <command_readusermem+0x112>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f010159c:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01015a0:	0f 85 aa 00 00 00    	jne    f0101650 <command_readusermem+0x102>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01015a6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015a9:	83 c0 04             	add    $0x4,%eax
f01015ac:	8b 00                	mov    (%eax),%eax
f01015ae:	83 ec 04             	sub    $0x4,%esp
f01015b1:	6a 0a                	push   $0xa
f01015b3:	6a 00                	push   $0x0
f01015b5:	50                   	push   %eax
f01015b6:	e8 0c 08 03 00       	call   f0131dc7 <strtol>
f01015bb:	83 c4 10             	add    $0x10,%esp
f01015be:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01015c1:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01015c8:	83 ec 04             	sub    $0x4,%esp
f01015cb:	6a 00                	push   $0x0
f01015cd:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01015d0:	50                   	push   %eax
f01015d1:	ff 75 f4             	pushl  -0xc(%ebp)
f01015d4:	e8 ed 89 00 00       	call   f0109fc6 <envid2env>
f01015d9:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01015dc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015df:	83 c0 08             	add    $0x8,%eax
f01015e2:	8b 00                	mov    (%eax),%eax
f01015e4:	83 ec 04             	sub    $0x4,%esp
f01015e7:	6a 10                	push   $0x10
f01015e9:	6a 00                	push   $0x0
f01015eb:	50                   	push   %eax
f01015ec:	e8 d6 07 03 00       	call   f0131dc7 <strtol>
f01015f1:	83 c4 10             	add    $0x10,%esp
f01015f4:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01015f7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01015fa:	85 c0                	test   %eax,%eax
f01015fc:	75 07                	jne    f0101605 <command_readusermem+0xb7>
f01015fe:	b8 00 00 00 00       	mov    $0x0,%eax
f0101603:	eb 60                	jmp    f0101665 <command_readusermem+0x117>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101605:	0f 20 d8             	mov    %cr3,%eax
f0101608:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f010160b:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f010160e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f0101611:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101614:	8b 40 60             	mov    0x60(%eax),%eax
f0101617:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010161a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010161d:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101620:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101623:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f0101626:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101629:	8a 00                	mov    (%eax),%al
f010162b:	0f b6 c0             	movzbl %al,%eax
f010162e:	83 ec 04             	sub    $0x4,%esp
f0101631:	50                   	push   %eax
f0101632:	ff 75 f0             	pushl  -0x10(%ebp)
f0101635:	68 0e 49 13 f0       	push   $0xf013490e
f010163a:	e8 cf f6 ff ff       	call   f0100d0e <cprintf>
f010163f:	83 c4 10             	add    $0x10,%esp
f0101642:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101645:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0101648:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010164b:	0f 22 d8             	mov    %eax,%cr3
f010164e:	eb 10                	jmp    f0101660 <command_readusermem+0x112>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0101650:	83 ec 0c             	sub    $0xc,%esp
f0101653:	68 28 49 13 f0       	push   $0xf0134928
f0101658:	e8 b1 f6 ff ff       	call   f0100d0e <cprintf>
f010165d:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101660:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0101665:	c9                   	leave  
f0101666:	c3                   	ret    

f0101667 <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f0101667:	55                   	push   %ebp
f0101668:	89 e5                	mov    %esp,%ebp
f010166a:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f010166d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101670:	83 c0 04             	add    $0x4,%eax
f0101673:	8b 00                	mov    (%eax),%eax
f0101675:	83 ec 04             	sub    $0x4,%esp
f0101678:	6a 10                	push   $0x10
f010167a:	6a 00                	push   $0x0
f010167c:	50                   	push   %eax
f010167d:	e8 45 07 03 00       	call   f0131dc7 <strtol>
f0101682:	83 c4 10             	add    $0x10,%esp
f0101685:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010168a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f010168d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101690:	83 c0 08             	add    $0x8,%eax
f0101693:	8b 00                	mov    (%eax),%eax
f0101695:	83 ec 04             	sub    $0x4,%esp
f0101698:	6a 0a                	push   $0xa
f010169a:	6a 00                	push   $0x0
f010169c:	50                   	push   %eax
f010169d:	e8 25 07 03 00       	call   f0131dc7 <strtol>
f01016a2:	83 c4 10             	add    $0x10,%esp
f01016a5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f01016a8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f01016af:	eb 22                	jmp    f01016d3 <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f01016b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01016b4:	8d 50 01             	lea    0x1(%eax),%edx
f01016b7:	89 55 f4             	mov    %edx,-0xc(%ebp)
f01016ba:	8a 00                	mov    (%eax),%al
f01016bc:	0f b6 c0             	movzbl %al,%eax
f01016bf:	83 ec 08             	sub    $0x8,%esp
f01016c2:	50                   	push   %eax
f01016c3:	68 52 49 13 f0       	push   $0xf0134952
f01016c8:	e8 41 f6 ff ff       	call   f0100d0e <cprintf>
f01016cd:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f01016d0:	ff 45 f0             	incl   -0x10(%ebp)
f01016d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01016d6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01016d9:	7c d6                	jl     f01016b1 <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f01016db:	83 ec 0c             	sub    $0xc,%esp
f01016de:	68 55 49 13 f0       	push   $0xf0134955
f01016e3:	e8 26 f6 ff ff       	call   f0100d0e <cprintf>
f01016e8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01016eb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01016f0:	c9                   	leave  
f01016f1:	c3                   	ret    

f01016f2 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f01016f2:	55                   	push   %ebp
f01016f3:	89 e5                	mov    %esp,%ebp
f01016f5:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01016f8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016fb:	83 c0 04             	add    $0x4,%eax
f01016fe:	8b 00                	mov    (%eax),%eax
f0101700:	83 ec 04             	sub    $0x4,%esp
f0101703:	6a 0a                	push   $0xa
f0101705:	6a 00                	push   $0x0
f0101707:	50                   	push   %eax
f0101708:	e8 ba 06 03 00       	call   f0131dc7 <strtol>
f010170d:	83 c4 10             	add    $0x10,%esp
f0101710:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f0101713:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f010171a:	83 ec 04             	sub    $0x4,%esp
f010171d:	6a 00                	push   $0x0
f010171f:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101722:	50                   	push   %eax
f0101723:	ff 75 ec             	pushl  -0x14(%ebp)
f0101726:	e8 9b 88 00 00       	call   f0109fc6 <envid2env>
f010172b:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f010172e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101731:	83 c0 08             	add    $0x8,%eax
f0101734:	8b 00                	mov    (%eax),%eax
f0101736:	83 ec 04             	sub    $0x4,%esp
f0101739:	6a 10                	push   $0x10
f010173b:	6a 00                	push   $0x0
f010173d:	50                   	push   %eax
f010173e:	e8 84 06 03 00       	call   f0131dc7 <strtol>
f0101743:	83 c4 10             	add    $0x10,%esp
f0101746:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f0101749:	8b 45 0c             	mov    0xc(%ebp),%eax
f010174c:	83 c0 0c             	add    $0xc,%eax
f010174f:	8b 00                	mov    (%eax),%eax
f0101751:	83 ec 04             	sub    $0x4,%esp
f0101754:	6a 0a                	push   $0xa
f0101756:	6a 00                	push   $0x0
f0101758:	50                   	push   %eax
f0101759:	e8 69 06 03 00       	call   f0131dc7 <strtol>
f010175e:	83 c4 10             	add    $0x10,%esp
f0101761:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0101764:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101767:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f010176a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010176d:	85 c0                	test   %eax,%eax
f010176f:	75 07                	jne    f0101778 <command_readuserblock+0x86>
f0101771:	b8 00 00 00 00       	mov    $0x0,%eax
f0101776:	eb 65                	jmp    f01017dd <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101778:	0f 20 d8             	mov    %cr3,%eax
f010177b:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f010177e:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0101781:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101784:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101787:	8b 40 60             	mov    0x60(%eax),%eax
f010178a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010178d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101790:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f0101793:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010179a:	eb 28                	jmp    f01017c4 <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f010179c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010179f:	8a 00                	mov    (%eax),%al
f01017a1:	0f b6 d0             	movzbl %al,%edx
f01017a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01017a7:	8a 00                	mov    (%eax),%al
f01017a9:	0f b6 c0             	movzbl %al,%eax
f01017ac:	52                   	push   %edx
f01017ad:	50                   	push   %eax
f01017ae:	ff 75 f4             	pushl  -0xc(%ebp)
f01017b1:	68 57 49 13 f0       	push   $0xf0134957
f01017b6:	e8 53 f5 ff ff       	call   f0100d0e <cprintf>
f01017bb:	83 c4 10             	add    $0x10,%esp
		ptr++;
f01017be:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f01017c1:	ff 45 f0             	incl   -0x10(%ebp)
f01017c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01017c7:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01017ca:	7c d0                	jl     f010179c <command_readuserblock+0xaa>
f01017cc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01017cf:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01017d2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01017d5:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f01017d8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01017dd:	c9                   	leave  
f01017de:	c3                   	ret    

f01017df <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f01017df:	55                   	push   %ebp
f01017e0:	89 e5                	mov    %esp,%ebp
f01017e2:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01017e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01017e8:	83 c0 04             	add    $0x4,%eax
f01017eb:	8b 00                	mov    (%eax),%eax
f01017ed:	83 ec 04             	sub    $0x4,%esp
f01017f0:	6a 0a                	push   $0xa
f01017f2:	6a 00                	push   $0x0
f01017f4:	50                   	push   %eax
f01017f5:	e8 cd 05 03 00       	call   f0131dc7 <strtol>
f01017fa:	83 c4 10             	add    $0x10,%esp
f01017fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101800:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0101807:	83 ec 04             	sub    $0x4,%esp
f010180a:	6a 00                	push   $0x0
f010180c:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010180f:	50                   	push   %eax
f0101810:	ff 75 f4             	pushl  -0xc(%ebp)
f0101813:	e8 ae 87 00 00       	call   f0109fc6 <envid2env>
f0101818:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f010181b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010181e:	85 c0                	test   %eax,%eax
f0101820:	75 0a                	jne    f010182c <command_remove_table+0x4d>
f0101822:	b8 00 00 00 00       	mov    $0x0,%eax
f0101827:	e9 c7 00 00 00       	jmp    f01018f3 <command_remove_table+0x114>

	uint32 address = strtol(arguments[2], NULL, 16);
f010182c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010182f:	83 c0 08             	add    $0x8,%eax
f0101832:	8b 00                	mov    (%eax),%eax
f0101834:	83 ec 04             	sub    $0x4,%esp
f0101837:	6a 10                	push   $0x10
f0101839:	6a 00                	push   $0x0
f010183b:	50                   	push   %eax
f010183c:	e8 86 05 03 00       	call   f0131dc7 <strtol>
f0101841:	83 c4 10             	add    $0x10,%esp
f0101844:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f0101847:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010184a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f010184d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101850:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101853:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101856:	c1 ea 16             	shr    $0x16,%edx
f0101859:	c1 e2 02             	shl    $0x2,%edx
f010185c:	01 d0                	add    %edx,%eax
f010185e:	8b 00                	mov    (%eax),%eax
f0101860:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0101865:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//remove the table
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(va))
f0101868:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010186b:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0101870:	77 1c                	ja     f010188e <command_remove_table+0xaf>
	{
		kfree((void*)kheap_virtual_address(table_pa));
f0101872:	83 ec 0c             	sub    $0xc,%esp
f0101875:	ff 75 e8             	pushl  -0x18(%ebp)
f0101878:	e8 a2 63 00 00       	call   f0107c1f <kheap_virtual_address>
f010187d:	83 c4 10             	add    $0x10,%esp
f0101880:	83 ec 0c             	sub    $0xc,%esp
f0101883:	50                   	push   %eax
f0101884:	e8 90 62 00 00       	call   f0107b19 <kfree>
f0101889:	83 c4 10             	add    $0x10,%esp
f010188c:	eb 28                	jmp    f01018b6 <command_remove_table+0xd7>
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f010188e:	83 ec 0c             	sub    $0xc,%esp
f0101891:	ff 75 e8             	pushl  -0x18(%ebp)
f0101894:	e8 a9 f7 ff ff       	call   f0101042 <to_frame_info>
f0101899:	83 c4 10             	add    $0x10,%esp
f010189c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f010189f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01018a2:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f01018a8:	83 ec 0c             	sub    $0xc,%esp
f01018ab:	ff 75 e4             	pushl  -0x1c(%ebp)
f01018ae:	e8 6f 51 00 00       	call   f0106a22 <free_frame>
f01018b3:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f01018b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01018b9:	c1 e8 16             	shr    $0x16,%eax
f01018bc:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f01018bf:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01018c2:	8b 40 5c             	mov    0x5c(%eax),%eax
f01018c5:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01018c8:	c1 e2 02             	shl    $0x2,%edx
f01018cb:	01 c2                	add    %eax,%edx
f01018cd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01018d0:	8b 40 5c             	mov    0x5c(%eax),%eax
f01018d3:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f01018d6:	c1 e1 02             	shl    $0x2,%ecx
f01018d9:	01 c8                	add    %ecx,%eax
f01018db:	8b 00                	mov    (%eax),%eax
f01018dd:	83 e0 fe             	and    $0xfffffffe,%eax
f01018e0:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01018e2:	0f 20 d8             	mov    %cr3,%eax
f01018e5:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01018e8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01018eb:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f01018ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01018f3:	c9                   	leave  
f01018f4:	c3                   	ret    

f01018f5 <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f01018f5:	55                   	push   %ebp
f01018f6:	89 e5                	mov    %esp,%ebp
f01018f8:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f01018fb:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01018ff:	7e 06                	jle    f0101907 <command_allocuserpage+0x12>
f0101901:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0101905:	7e 1a                	jle    f0101921 <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f0101907:	83 ec 0c             	sub    $0xc,%esp
f010190a:	68 68 49 13 f0       	push   $0xf0134968
f010190f:	e8 fa f3 ff ff       	call   f0100d0e <cprintf>
f0101914:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101917:	b8 00 00 00 00       	mov    $0x0,%eax
f010191c:	e9 46 01 00 00       	jmp    f0101a67 <command_allocuserpage+0x172>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f0101921:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101924:	83 c0 04             	add    $0x4,%eax
f0101927:	8b 00                	mov    (%eax),%eax
f0101929:	83 ec 04             	sub    $0x4,%esp
f010192c:	6a 0a                	push   $0xa
f010192e:	6a 00                	push   $0x0
f0101930:	50                   	push   %eax
f0101931:	e8 91 04 03 00       	call   f0131dc7 <strtol>
f0101936:	83 c4 10             	add    $0x10,%esp
f0101939:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f010193c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0101943:	83 ec 04             	sub    $0x4,%esp
f0101946:	6a 00                	push   $0x0
f0101948:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f010194b:	50                   	push   %eax
f010194c:	ff 75 f0             	pushl  -0x10(%ebp)
f010194f:	e8 72 86 00 00       	call   f0109fc6 <envid2env>
f0101954:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101957:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010195a:	85 c0                	test   %eax,%eax
f010195c:	75 0a                	jne    f0101968 <command_allocuserpage+0x73>
f010195e:	b8 00 00 00 00       	mov    $0x0,%eax
f0101963:	e9 ff 00 00 00       	jmp    f0101a67 <command_allocuserpage+0x172>

	uint32 va = strtol(arguments[2], NULL, 16);
f0101968:	8b 45 0c             	mov    0xc(%ebp),%eax
f010196b:	83 c0 08             	add    $0x8,%eax
f010196e:	8b 00                	mov    (%eax),%eax
f0101970:	83 ec 04             	sub    $0x4,%esp
f0101973:	6a 10                	push   $0x10
f0101975:	6a 00                	push   $0x0
f0101977:	50                   	push   %eax
f0101978:	e8 4a 04 03 00       	call   f0131dc7 <strtol>
f010197d:	83 c4 10             	add    $0x10,%esp
f0101980:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0101983:	83 ec 0c             	sub    $0xc,%esp
f0101986:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0101989:	50                   	push   %eax
f010198a:	e8 7e 4f 00 00       	call   f010690d <allocate_frame>
f010198f:	83 c4 10             	add    $0x10,%esp
f0101992:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f0101995:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f0101999:	75 1a                	jne    f01019b5 <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f010199b:	83 ec 0c             	sub    $0xc,%esp
f010199e:	68 92 49 13 f0       	push   $0xf0134992
f01019a3:	e8 66 f3 ff ff       	call   f0100d0e <cprintf>
f01019a8:	83 c4 10             	add    $0x10,%esp
		return 0;
f01019ab:	b8 00 00 00 00       	mov    $0x0,%eax
f01019b0:	e9 b2 00 00 00       	jmp    f0101a67 <command_allocuserpage+0x172>
	}

	if (number_of_arguments == 3)
f01019b5:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01019b9:	75 1d                	jne    f01019d8 <command_allocuserpage+0xe3>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f01019bb:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01019be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01019c1:	8b 40 5c             	mov    0x5c(%eax),%eax
f01019c4:	6a 06                	push   $0x6
f01019c6:	ff 75 ec             	pushl  -0x14(%ebp)
f01019c9:	52                   	push   %edx
f01019ca:	50                   	push   %eax
f01019cb:	e8 8c 53 00 00       	call   f0106d5c <map_frame>
f01019d0:	83 c4 10             	add    $0x10,%esp
f01019d3:	e9 8a 00 00 00       	jmp    f0101a62 <command_allocuserpage+0x16d>
	}
	else if (number_of_arguments == 4)
f01019d8:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01019dc:	0f 85 80 00 00 00    	jne    f0101a62 <command_allocuserpage+0x16d>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f01019e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019e5:	83 c0 0c             	add    $0xc,%eax
f01019e8:	8b 00                	mov    (%eax),%eax
f01019ea:	8a 00                	mov    (%eax),%al
f01019ec:	3c 72                	cmp    $0x72,%al
f01019ee:	74 0e                	je     f01019fe <command_allocuserpage+0x109>
f01019f0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019f3:	83 c0 0c             	add    $0xc,%eax
f01019f6:	8b 00                	mov    (%eax),%eax
f01019f8:	8a 00                	mov    (%eax),%al
f01019fa:	3c 52                	cmp    $0x52,%al
f01019fc:	75 09                	jne    f0101a07 <command_allocuserpage+0x112>
			rw = 0 ;
f01019fe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0101a05:	eb 3c                	jmp    f0101a43 <command_allocuserpage+0x14e>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f0101a07:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a0a:	83 c0 0c             	add    $0xc,%eax
f0101a0d:	8b 00                	mov    (%eax),%eax
f0101a0f:	8a 00                	mov    (%eax),%al
f0101a11:	3c 77                	cmp    $0x77,%al
f0101a13:	74 0e                	je     f0101a23 <command_allocuserpage+0x12e>
f0101a15:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a18:	83 c0 0c             	add    $0xc,%eax
f0101a1b:	8b 00                	mov    (%eax),%eax
f0101a1d:	8a 00                	mov    (%eax),%al
f0101a1f:	3c 57                	cmp    $0x57,%al
f0101a21:	75 09                	jne    f0101a2c <command_allocuserpage+0x137>
			rw = PERM_WRITEABLE ;
f0101a23:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101a2a:	eb 17                	jmp    f0101a43 <command_allocuserpage+0x14e>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0101a2c:	83 ec 0c             	sub    $0xc,%esp
f0101a2f:	68 ac 49 13 f0       	push   $0xf01349ac
f0101a34:	e8 d5 f2 ff ff       	call   f0100d0e <cprintf>
f0101a39:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0101a3c:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0101a43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101a46:	83 c8 04             	or     $0x4,%eax
f0101a49:	89 c1                	mov    %eax,%ecx
f0101a4b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101a4e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101a51:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101a54:	51                   	push   %ecx
f0101a55:	ff 75 ec             	pushl  -0x14(%ebp)
f0101a58:	52                   	push   %edx
f0101a59:	50                   	push   %eax
f0101a5a:	e8 fd 52 00 00       	call   f0106d5c <map_frame>
f0101a5f:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101a62:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101a67:	c9                   	leave  
f0101a68:	c3                   	ret    

f0101a69 <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0101a69:	55                   	push   %ebp
f0101a6a:	89 e5                	mov    %esp,%ebp
f0101a6c:	56                   	push   %esi
f0101a6d:	53                   	push   %ebx
f0101a6e:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0101a71:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101a74:	83 ec 0c             	sub    $0xc,%esp
f0101a77:	50                   	push   %eax
f0101a78:	e8 79 55 00 00       	call   f0106ff6 <calculate_available_frames>
f0101a7d:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101a80:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101a83:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101a86:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0101a89:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0101a8c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0101a8f:	01 de                	add    %ebx,%esi
f0101a91:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101a94:	01 f3                	add    %esi,%ebx
f0101a96:	83 ec 0c             	sub    $0xc,%esp
f0101a99:	51                   	push   %ecx
f0101a9a:	52                   	push   %edx
f0101a9b:	50                   	push   %eax
f0101a9c:	53                   	push   %ebx
f0101a9d:	68 f0 49 13 f0       	push   $0xf01349f0
f0101aa2:	e8 67 f2 ff ff       	call   f0100d0e <cprintf>
f0101aa7:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0101aaa:	a1 f0 b8 85 f0       	mov    0xf085b8f0,%eax
f0101aaf:	83 ec 08             	sub    $0x8,%esp
f0101ab2:	50                   	push   %eax
f0101ab3:	68 48 4a 13 f0       	push   $0xf0134a48
f0101ab8:	e8 51 f2 ff ff       	call   f0100d0e <cprintf>
f0101abd:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101ac0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ac5:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101ac8:	5b                   	pop    %ebx
f0101ac9:	5e                   	pop    %esi
f0101aca:	5d                   	pop    %ebp
f0101acb:	c3                   	ret    

f0101acc <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0101acc:	55                   	push   %ebp
f0101acd:	89 e5                	mov    %esp,%ebp
f0101acf:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0101ad2:	c7 45 f4 88 13 00 00 	movl   $0x1388,-0xc(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0101ad9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0101ae0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
#if USE_KHEAP
	{
		switch (number_of_arguments)
f0101ae7:	8b 45 08             	mov    0x8(%ebp),%eax
f0101aea:	83 f8 04             	cmp    $0x4,%eax
f0101aed:	0f 84 94 00 00 00    	je     f0101b87 <CreateEnv+0xbb>
f0101af3:	83 f8 05             	cmp    $0x5,%eax
f0101af6:	74 0e                	je     f0101b06 <CreateEnv+0x3a>
f0101af8:	83 f8 03             	cmp    $0x3,%eax
f0101afb:	0f 84 ec 00 00 00    	je     f0101bed <CreateEnv+0x121>
f0101b01:	e9 2f 01 00 00       	jmp    f0101c35 <CreateEnv+0x169>
		{
		case 5:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101b06:	83 ec 0c             	sub    $0xc,%esp
f0101b09:	6a 02                	push   $0x2
f0101b0b:	e8 ef c6 00 00       	call   f010e1ff <isPageReplacmentAlgorithmLRU>
f0101b10:	83 c4 10             	add    $0x10,%esp
f0101b13:	85 c0                	test   %eax,%eax
f0101b15:	75 1a                	jne    f0101b31 <CreateEnv+0x65>
			{
				cprintf("ERROR: Current Replacement is NOT LRU LISTS, invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101b17:	83 ec 0c             	sub    $0xc,%esp
f0101b1a:	68 84 4a 13 f0       	push   $0xf0134a84
f0101b1f:	e8 ea f1 ff ff       	call   f0100d0e <cprintf>
f0101b24:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101b27:	b8 00 00 00 00       	mov    $0x0,%eax
f0101b2c:	e9 d5 01 00 00       	jmp    f0101d06 <CreateEnv+0x23a>
			}
			percent_WS_pages_to_remove = strtol(arguments[4], NULL, 10);
f0101b31:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b34:	83 c0 10             	add    $0x10,%eax
f0101b37:	8b 00                	mov    (%eax),%eax
f0101b39:	83 ec 04             	sub    $0x4,%esp
f0101b3c:	6a 0a                	push   $0xa
f0101b3e:	6a 00                	push   $0x0
f0101b40:	50                   	push   %eax
f0101b41:	e8 81 02 03 00       	call   f0131dc7 <strtol>
f0101b46:	83 c4 10             	add    $0x10,%esp
f0101b49:	89 45 ec             	mov    %eax,-0x14(%ebp)
			LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101b4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b4f:	83 c0 0c             	add    $0xc,%eax
f0101b52:	8b 00                	mov    (%eax),%eax
f0101b54:	83 ec 04             	sub    $0x4,%esp
f0101b57:	6a 0a                	push   $0xa
f0101b59:	6a 00                	push   $0x0
f0101b5b:	50                   	push   %eax
f0101b5c:	e8 66 02 03 00       	call   f0131dc7 <strtol>
f0101b61:	83 c4 10             	add    $0x10,%esp
f0101b64:	89 45 f0             	mov    %eax,-0x10(%ebp)
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101b67:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b6a:	83 c0 08             	add    $0x8,%eax
f0101b6d:	8b 00                	mov    (%eax),%eax
f0101b6f:	83 ec 04             	sub    $0x4,%esp
f0101b72:	6a 0a                	push   $0xa
f0101b74:	6a 00                	push   $0x0
f0101b76:	50                   	push   %eax
f0101b77:	e8 4b 02 03 00       	call   f0131dc7 <strtol>
f0101b7c:	83 c4 10             	add    $0x10,%esp
f0101b7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101b82:	e9 c8 00 00 00       	jmp    f0101c4f <CreateEnv+0x183>
		case 4:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101b87:	83 ec 0c             	sub    $0xc,%esp
f0101b8a:	6a 02                	push   $0x2
f0101b8c:	e8 6e c6 00 00       	call   f010e1ff <isPageReplacmentAlgorithmLRU>
f0101b91:	83 c4 10             	add    $0x10,%esp
f0101b94:	85 c0                	test   %eax,%eax
f0101b96:	75 1d                	jne    f0101bb5 <CreateEnv+0xe9>
			{
				percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f0101b98:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b9b:	83 c0 0c             	add    $0xc,%eax
f0101b9e:	8b 00                	mov    (%eax),%eax
f0101ba0:	83 ec 04             	sub    $0x4,%esp
f0101ba3:	6a 0a                	push   $0xa
f0101ba5:	6a 00                	push   $0x0
f0101ba7:	50                   	push   %eax
f0101ba8:	e8 1a 02 03 00       	call   f0131dc7 <strtol>
f0101bad:	83 c4 10             	add    $0x10,%esp
f0101bb0:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0101bb3:	eb 1b                	jmp    f0101bd0 <CreateEnv+0x104>
			}
			else
			{
				LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101bb5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101bb8:	83 c0 0c             	add    $0xc,%eax
f0101bbb:	8b 00                	mov    (%eax),%eax
f0101bbd:	83 ec 04             	sub    $0x4,%esp
f0101bc0:	6a 0a                	push   $0xa
f0101bc2:	6a 00                	push   $0x0
f0101bc4:	50                   	push   %eax
f0101bc5:	e8 fd 01 03 00       	call   f0131dc7 <strtol>
f0101bca:	83 c4 10             	add    $0x10,%esp
f0101bcd:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101bd0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101bd3:	83 c0 08             	add    $0x8,%eax
f0101bd6:	8b 00                	mov    (%eax),%eax
f0101bd8:	83 ec 04             	sub    $0x4,%esp
f0101bdb:	6a 0a                	push   $0xa
f0101bdd:	6a 00                	push   $0x0
f0101bdf:	50                   	push   %eax
f0101be0:	e8 e2 01 03 00       	call   f0131dc7 <strtol>
f0101be5:	83 c4 10             	add    $0x10,%esp
f0101be8:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101beb:	eb 62                	jmp    f0101c4f <CreateEnv+0x183>
		case 3:
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101bed:	83 ec 0c             	sub    $0xc,%esp
f0101bf0:	6a 02                	push   $0x2
f0101bf2:	e8 08 c6 00 00       	call   f010e1ff <isPageReplacmentAlgorithmLRU>
f0101bf7:	83 c4 10             	add    $0x10,%esp
f0101bfa:	85 c0                	test   %eax,%eax
f0101bfc:	74 1a                	je     f0101c18 <CreateEnv+0x14c>
			{
				cprintf("ERROR: Current Replacement is LRU LISTS, Please specify a working set size in the 3rd arg and LRU second list size in the 4th arg, aborting.\n");
f0101bfe:	83 ec 0c             	sub    $0xc,%esp
f0101c01:	68 44 4b 13 f0       	push   $0xf0134b44
f0101c06:	e8 03 f1 ff ff       	call   f0100d0e <cprintf>
f0101c0b:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101c0e:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c13:	e9 ee 00 00 00       	jmp    f0101d06 <CreateEnv+0x23a>
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101c18:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c1b:	83 c0 08             	add    $0x8,%eax
f0101c1e:	8b 00                	mov    (%eax),%eax
f0101c20:	83 ec 04             	sub    $0x4,%esp
f0101c23:	6a 0a                	push   $0xa
f0101c25:	6a 00                	push   $0x0
f0101c27:	50                   	push   %eax
f0101c28:	e8 9a 01 03 00       	call   f0131dc7 <strtol>
f0101c2d:	83 c4 10             	add    $0x10,%esp
f0101c30:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101c33:	eb 1a                	jmp    f0101c4f <CreateEnv+0x183>
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101c35:	83 ec 0c             	sub    $0xc,%esp
f0101c38:	68 d4 4b 13 f0       	push   $0xf0134bd4
f0101c3d:	e8 cc f0 ff ff       	call   f0100d0e <cprintf>
f0101c42:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101c45:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c4a:	e9 b7 00 00 00       	jmp    f0101d06 <CreateEnv+0x23a>

			break;
		}
		if(pageWSSize > __PWS_MAX_SIZE)
f0101c4f:	81 7d f4 88 13 00 00 	cmpl   $0x1388,-0xc(%ebp)
f0101c56:	76 1f                	jbe    f0101c77 <CreateEnv+0x1ab>
		{
			cprintf("ERROR: size of WS must be less than or equal to %d... aborting", __PWS_MAX_SIZE);
f0101c58:	83 ec 08             	sub    $0x8,%esp
f0101c5b:	68 88 13 00 00       	push   $0x1388
f0101c60:	68 6c 4c 13 f0       	push   $0xf0134c6c
f0101c65:	e8 a4 f0 ff ff       	call   f0100d0e <cprintf>
f0101c6a:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101c6d:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c72:	e9 8f 00 00 00       	jmp    f0101d06 <CreateEnv+0x23a>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101c77:	83 ec 0c             	sub    $0xc,%esp
f0101c7a:	6a 02                	push   $0x2
f0101c7c:	e8 7e c5 00 00       	call   f010e1ff <isPageReplacmentAlgorithmLRU>
f0101c81:	83 c4 10             	add    $0x10,%esp
f0101c84:	85 c0                	test   %eax,%eax
f0101c86:	74 20                	je     f0101ca8 <CreateEnv+0x1dc>
		{
			if (LRUSecondListSize > pageWSSize - 1)
f0101c88:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101c8b:	48                   	dec    %eax
f0101c8c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101c8f:	73 17                	jae    f0101ca8 <CreateEnv+0x1dc>
			{
				cprintf("ERROR: size of LRU second list can't equal/exceed the size of the page WS... aborting\n");
f0101c91:	83 ec 0c             	sub    $0xc,%esp
f0101c94:	68 ac 4c 13 f0       	push   $0xf0134cac
f0101c99:	e8 70 f0 ff ff       	call   f0100d0e <cprintf>
f0101c9e:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101ca1:	b8 00 00 00 00       	mov    $0x0,%eax
f0101ca6:	eb 5e                	jmp    f0101d06 <CreateEnv+0x23a>
			}
		}
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101ca8:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101cac:	76 19                	jbe    f0101cc7 <CreateEnv+0x1fb>
f0101cae:	68 04 4d 13 f0       	push   $0xf0134d04
f0101cb3:	68 49 4d 13 f0       	push   $0xf0134d49
f0101cb8:	68 5a 02 00 00       	push   $0x25a
f0101cbd:	68 cd 48 13 f0       	push   $0xf01348cd
f0101cc2:	e8 3e e5 ff ff       	call   f0100205 <_panic>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101cc7:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101ccb:	76 19                	jbe    f0101ce6 <CreateEnv+0x21a>
f0101ccd:	68 04 4d 13 f0       	push   $0xf0134d04
f0101cd2:	68 49 4d 13 f0       	push   $0xf0134d49
f0101cd7:	68 71 02 00 00       	push   $0x271
f0101cdc:	68 cd 48 13 f0       	push   $0xf01348cd
f0101ce1:	e8 1f e5 ff ff       	call   f0100205 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0101ce6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ce9:	83 c0 04             	add    $0x4,%eax
f0101cec:	8b 00                	mov    (%eax),%eax
f0101cee:	ff 75 ec             	pushl  -0x14(%ebp)
f0101cf1:	ff 75 f0             	pushl  -0x10(%ebp)
f0101cf4:	ff 75 f4             	pushl  -0xc(%ebp)
f0101cf7:	50                   	push   %eax
f0101cf8:	e8 22 76 00 00       	call   f010931f <env_create>
f0101cfd:	83 c4 10             	add    $0x10,%esp
f0101d00:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0101d03:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0101d06:	c9                   	leave  
f0101d07:	c3                   	ret    

f0101d08 <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0101d08:	55                   	push   %ebp
f0101d09:	89 e5                	mov    %esp,%ebp
f0101d0b:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101d0e:	83 ec 08             	sub    $0x8,%esp
f0101d11:	ff 75 0c             	pushl  0xc(%ebp)
f0101d14:	ff 75 08             	pushl  0x8(%ebp)
f0101d17:	e8 b0 fd ff ff       	call   f0101acc <CreateEnv>
f0101d1c:	83 c4 10             	add    $0x10,%esp
f0101d1f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0101d22:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101d26:	75 07                	jne    f0101d2f <command_run_program+0x27>
f0101d28:	b8 00 00 00 00       	mov    $0x0,%eax
f0101d2d:	eb 46                	jmp    f0101d75 <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101d2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d32:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d35:	83 ec 08             	sub    $0x8,%esp
f0101d38:	50                   	push   %eax
f0101d39:	68 5e 4d 13 f0       	push   $0xf0134d5e
f0101d3e:	e8 cb ef ff ff       	call   f0100d0e <cprintf>
f0101d43:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0101d46:	c7 05 f0 b8 85 f0 00 	movl   $0x0,0xf085b8f0
f0101d4d:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0101d50:	83 ec 0c             	sub    $0xc,%esp
f0101d53:	ff 75 f4             	pushl  -0xc(%ebp)
f0101d56:	e8 c4 34 00 00       	call   f010521f <sched_new_env>
f0101d5b:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0101d5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d61:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d64:	83 ec 0c             	sub    $0xc,%esp
f0101d67:	50                   	push   %eax
f0101d68:	e8 cf 34 00 00       	call   f010523c <sched_run_env>
f0101d6d:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d70:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d75:	c9                   	leave  
f0101d76:	c3                   	ret    

f0101d77 <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0101d77:	55                   	push   %ebp
f0101d78:	89 e5                	mov    %esp,%ebp
f0101d7a:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101d7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d80:	83 c0 04             	add    $0x4,%eax
f0101d83:	8b 00                	mov    (%eax),%eax
f0101d85:	83 ec 04             	sub    $0x4,%esp
f0101d88:	6a 0a                	push   $0xa
f0101d8a:	6a 00                	push   $0x0
f0101d8c:	50                   	push   %eax
f0101d8d:	e8 35 00 03 00       	call   f0131dc7 <strtol>
f0101d92:	83 c4 10             	add    $0x10,%esp
f0101d95:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0101d98:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d9b:	83 ec 0c             	sub    $0xc,%esp
f0101d9e:	50                   	push   %eax
f0101d9f:	e8 b6 38 00 00       	call   f010565a <sched_kill_env>
f0101da4:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101da7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101dac:	c9                   	leave  
f0101dad:	c3                   	ret    

f0101dae <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0101dae:	55                   	push   %ebp
f0101daf:	89 e5                	mov    %esp,%ebp
f0101db1:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101db4:	83 ec 08             	sub    $0x8,%esp
f0101db7:	ff 75 0c             	pushl  0xc(%ebp)
f0101dba:	ff 75 08             	pushl  0x8(%ebp)
f0101dbd:	e8 0a fd ff ff       	call   f0101acc <CreateEnv>
f0101dc2:	83 c4 10             	add    $0x10,%esp
f0101dc5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0101dc8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101dcc:	75 07                	jne    f0101dd5 <commnad_load_env+0x27>
		return 0 ;
f0101dce:	b8 00 00 00 00       	mov    $0x0,%eax
f0101dd3:	eb 2a                	jmp    f0101dff <commnad_load_env+0x51>

	sched_new_env(env) ;
f0101dd5:	83 ec 0c             	sub    $0xc,%esp
f0101dd8:	ff 75 f4             	pushl  -0xc(%ebp)
f0101ddb:	e8 3f 34 00 00       	call   f010521f <sched_new_env>
f0101de0:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101de3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101de6:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101de9:	83 ec 08             	sub    $0x8,%esp
f0101dec:	50                   	push   %eax
f0101ded:	68 5e 4d 13 f0       	push   $0xf0134d5e
f0101df2:	e8 17 ef ff ff       	call   f0100d0e <cprintf>
f0101df7:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101dfa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101dff:	c9                   	leave  
f0101e00:	c3                   	ret    

f0101e01 <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0101e01:	55                   	push   %ebp
f0101e02:	89 e5                	mov    %esp,%ebp
f0101e04:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0101e07:	c7 05 f0 b8 85 f0 00 	movl   $0x0,0xf085b8f0
f0101e0e:	00 00 00 
	sched_run_all();
f0101e11:	e8 51 30 00 00       	call   f0104e67 <sched_run_all>

	return 0 ;
f0101e16:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e1b:	c9                   	leave  
f0101e1c:	c3                   	ret    

f0101e1d <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0101e1d:	55                   	push   %ebp
f0101e1e:	89 e5                	mov    %esp,%ebp
f0101e20:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0101e23:	e8 35 2e 00 00       	call   f0104c5d <sched_print_all>

	return 0 ;
f0101e28:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e2d:	c9                   	leave  
f0101e2e:	c3                   	ret    

f0101e2f <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0101e2f:	55                   	push   %ebp
f0101e30:	89 e5                	mov    %esp,%ebp
f0101e32:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0101e35:	e8 a0 30 00 00       	call   f0104eda <sched_kill_all>

	return 0 ;
f0101e3a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e3f:	c9                   	leave  
f0101e40:	c3                   	ret    

f0101e41 <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0101e41:	55                   	push   %ebp
f0101e42:	89 e5                	mov    %esp,%ebp
f0101e44:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0101e47:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0101e4b:	7f 1a                	jg     f0101e67 <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101e4d:	83 ec 0c             	sub    $0xc,%esp
f0101e50:	68 74 4d 13 f0       	push   $0xf0134d74
f0101e55:	e8 b4 ee ff ff       	call   f0100d0e <cprintf>
f0101e5a:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101e5d:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e62:	e9 83 00 00 00       	jmp    f0101eea <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0101e67:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e6a:	83 c0 04             	add    $0x4,%eax
f0101e6d:	8b 00                	mov    (%eax),%eax
f0101e6f:	83 ec 04             	sub    $0x4,%esp
f0101e72:	6a 0a                	push   $0xa
f0101e74:	6a 00                	push   $0x0
f0101e76:	50                   	push   %eax
f0101e77:	e8 4b ff 02 00       	call   f0131dc7 <strtol>
f0101e7c:	83 c4 10             	add    $0x10,%esp
f0101e7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0101e82:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101e86:	75 20                	jne    f0101ea8 <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101e88:	83 ec 0c             	sub    $0xc,%esp
f0101e8b:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e8e:	e8 e1 c2 00 00       	call   f010e174 <setPageReplacmentAlgorithmLRU>
f0101e93:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0101e96:	83 ec 0c             	sub    $0xc,%esp
f0101e99:	68 d4 4d 13 f0       	push   $0xf0134dd4
f0101e9e:	e8 6b ee ff ff       	call   f0100d0e <cprintf>
f0101ea3:	83 c4 10             	add    $0x10,%esp
f0101ea6:	eb 3d                	jmp    f0101ee5 <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0101ea8:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0101eac:	75 20                	jne    f0101ece <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101eae:	83 ec 0c             	sub    $0xc,%esp
f0101eb1:	ff 75 f4             	pushl  -0xc(%ebp)
f0101eb4:	e8 bb c2 00 00       	call   f010e174 <setPageReplacmentAlgorithmLRU>
f0101eb9:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0101ebc:	83 ec 0c             	sub    $0xc,%esp
f0101ebf:	68 18 4e 13 f0       	push   $0xf0134e18
f0101ec4:	e8 45 ee ff ff       	call   f0100d0e <cprintf>
f0101ec9:	83 c4 10             	add    $0x10,%esp
f0101ecc:	eb 17                	jmp    f0101ee5 <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101ece:	83 ec 0c             	sub    $0xc,%esp
f0101ed1:	68 58 4e 13 f0       	push   $0xf0134e58
f0101ed6:	e8 33 ee ff ff       	call   f0100d0e <cprintf>
f0101edb:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101ede:	b8 00 00 00 00       	mov    $0x0,%eax
f0101ee3:	eb 05                	jmp    f0101eea <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0101ee5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101eea:	c9                   	leave  
f0101eeb:	c3                   	ret    

f0101eec <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0101eec:	55                   	push   %ebp
f0101eed:	89 e5                	mov    %esp,%ebp
f0101eef:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0101ef2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ef5:	83 c0 04             	add    $0x4,%eax
f0101ef8:	8b 00                	mov    (%eax),%eax
f0101efa:	83 ec 04             	sub    $0x4,%esp
f0101efd:	6a 0a                	push   $0xa
f0101eff:	6a 00                	push   $0x0
f0101f01:	50                   	push   %eax
f0101f02:	e8 c0 fe 02 00       	call   f0131dc7 <strtol>
f0101f07:	83 c4 10             	add    $0x10,%esp
f0101f0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0101f0d:	83 ec 0c             	sub    $0xc,%esp
f0101f10:	ff 75 f4             	pushl  -0xc(%ebp)
f0101f13:	e8 cf c2 00 00       	call   f010e1e7 <setPageReplacmentAlgorithmNchanceCLOCK>
f0101f18:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0101f1b:	83 ec 0c             	sub    $0xc,%esp
f0101f1e:	68 ac 4e 13 f0       	push   $0xf0134eac
f0101f23:	e8 e6 ed ff ff       	call   f0100d0e <cprintf>
f0101f28:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f2b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f30:	c9                   	leave  
f0101f31:	c3                   	ret    

f0101f32 <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0101f32:	55                   	push   %ebp
f0101f33:	89 e5                	mov    %esp,%ebp
f0101f35:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0101f38:	e8 6a c2 00 00       	call   f010e1a7 <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0101f3d:	83 ec 0c             	sub    $0xc,%esp
f0101f40:	68 e0 4e 13 f0       	push   $0xf0134ee0
f0101f45:	e8 c4 ed ff ff       	call   f0100d0e <cprintf>
f0101f4a:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f4d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f52:	c9                   	leave  
f0101f53:	c3                   	ret    

f0101f54 <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0101f54:	55                   	push   %ebp
f0101f55:	89 e5                	mov    %esp,%ebp
f0101f57:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0101f5a:	e8 58 c2 00 00       	call   f010e1b7 <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0101f5f:	83 ec 0c             	sub    $0xc,%esp
f0101f62:	68 0c 4f 13 f0       	push   $0xf0134f0c
f0101f67:	e8 a2 ed ff ff       	call   f0100d0e <cprintf>
f0101f6c:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f6f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f74:	c9                   	leave  
f0101f75:	c3                   	ret    

f0101f76 <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0101f76:	55                   	push   %ebp
f0101f77:	89 e5                	mov    %esp,%ebp
f0101f79:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0101f7c:	e8 46 c2 00 00       	call   f010e1c7 <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0101f81:	83 ec 0c             	sub    $0xc,%esp
f0101f84:	68 34 4f 13 f0       	push   $0xf0134f34
f0101f89:	e8 80 ed ff ff       	call   f0100d0e <cprintf>
f0101f8e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f91:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f96:	c9                   	leave  
f0101f97:	c3                   	ret    

f0101f98 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0101f98:	55                   	push   %ebp
f0101f99:	89 e5                	mov    %esp,%ebp
f0101f9b:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0101f9e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101fa1:	83 c0 04             	add    $0x4,%eax
f0101fa4:	8b 00                	mov    (%eax),%eax
f0101fa6:	83 ec 04             	sub    $0x4,%esp
f0101fa9:	6a 0a                	push   $0xa
f0101fab:	6a 00                	push   $0x0
f0101fad:	50                   	push   %eax
f0101fae:	e8 14 fe 02 00       	call   f0131dc7 <strtol>
f0101fb3:	83 c4 10             	add    $0x10,%esp
f0101fb6:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0101fb9:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0101fbd:	83 ec 0c             	sub    $0xc,%esp
f0101fc0:	50                   	push   %eax
f0101fc1:	e8 67 28 00 00       	call   f010482d <sched_init_RR>
f0101fc6:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0101fc9:	a1 a8 b8 85 f0       	mov    0xf085b8a8,%eax
f0101fce:	8a 00                	mov    (%eax),%al
f0101fd0:	0f b6 c0             	movzbl %al,%eax
f0101fd3:	83 ec 08             	sub    $0x8,%esp
f0101fd6:	50                   	push   %eax
f0101fd7:	68 68 4f 13 f0       	push   $0xf0134f68
f0101fdc:	e8 2d ed ff ff       	call   f0100d0e <cprintf>
f0101fe1:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101fe4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101fe9:	c9                   	leave  
f0101fea:	c3                   	ret    

f0101feb <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0101feb:	55                   	push   %ebp
f0101fec:	89 e5                	mov    %esp,%ebp
f0101fee:	53                   	push   %ebx
f0101fef:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0101ff2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ff5:	83 c0 04             	add    $0x4,%eax
f0101ff8:	8b 00                	mov    (%eax),%eax
f0101ffa:	83 ec 04             	sub    $0x4,%esp
f0101ffd:	6a 0a                	push   $0xa
f0101fff:	6a 00                	push   $0x0
f0102001:	50                   	push   %eax
f0102002:	e8 c0 fd 02 00       	call   f0131dc7 <strtol>
f0102007:	83 c4 10             	add    $0x10,%esp
f010200a:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f010200d:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0102014:	eb 2e                	jmp    f0102044 <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0102016:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102019:	8d 58 fe             	lea    -0x2(%eax),%ebx
f010201c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010201f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0102026:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102029:	01 d0                	add    %edx,%eax
f010202b:	8b 00                	mov    (%eax),%eax
f010202d:	83 ec 04             	sub    $0x4,%esp
f0102030:	6a 0a                	push   $0xa
f0102032:	6a 00                	push   $0x0
f0102034:	50                   	push   %eax
f0102035:	e8 8d fd 02 00       	call   f0131dc7 <strtol>
f010203a:	83 c4 10             	add    $0x10,%esp
f010203d:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0102041:	ff 45 f4             	incl   -0xc(%ebp)
f0102044:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102047:	3b 45 08             	cmp    0x8(%ebp),%eax
f010204a:	7c ca                	jl     f0102016 <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f010204c:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0102050:	83 ec 08             	sub    $0x8,%esp
f0102053:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0102056:	52                   	push   %edx
f0102057:	50                   	push   %eax
f0102058:	e8 5b 28 00 00       	call   f01048b8 <sched_init_MLFQ>
f010205d:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0102060:	83 ec 0c             	sub    $0xc,%esp
f0102063:	68 a0 4f 13 f0       	push   $0xf0134fa0
f0102068:	e8 a1 ec ff ff       	call   f0100d0e <cprintf>
f010206d:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0102070:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0102077:	eb 24                	jmp    f010209d <command_sch_MLFQ+0xb2>
	{
		cprintf("%d   ", quantums[i]) ;
f0102079:	8b 15 a8 b8 85 f0    	mov    0xf085b8a8,%edx
f010207f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102082:	01 d0                	add    %edx,%eax
f0102084:	8a 00                	mov    (%eax),%al
f0102086:	0f b6 c0             	movzbl %al,%eax
f0102089:	83 ec 08             	sub    $0x8,%esp
f010208c:	50                   	push   %eax
f010208d:	68 cd 4f 13 f0       	push   $0xf0134fcd
f0102092:	e8 77 ec ff ff       	call   f0100d0e <cprintf>
f0102097:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f010209a:	ff 45 f0             	incl   -0x10(%ebp)
f010209d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01020a2:	0f b6 c0             	movzbl %al,%eax
f01020a5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01020a8:	7f cf                	jg     f0102079 <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f01020aa:	83 ec 0c             	sub    $0xc,%esp
f01020ad:	68 55 49 13 f0       	push   $0xf0134955
f01020b2:	e8 57 ec ff ff       	call   f0100d0e <cprintf>
f01020b7:	83 c4 10             	add    $0x10,%esp
	return 0;
f01020ba:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01020bf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01020c2:	c9                   	leave  
f01020c3:	c3                   	ret    

f01020c4 <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f01020c4:	55                   	push   %ebp
f01020c5:	89 e5                	mov    %esp,%ebp
f01020c7:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f01020ca:	e8 8d 23 00 00       	call   f010445c <isSchedMethodMLFQ>
f01020cf:	85 c0                	test   %eax,%eax
f01020d1:	74 5c                	je     f010212f <command_print_sch_method+0x6b>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f01020d3:	83 ec 0c             	sub    $0xc,%esp
f01020d6:	68 d4 4f 13 f0       	push   $0xf0134fd4
f01020db:	e8 2e ec ff ff       	call   f0100d0e <cprintf>
f01020e0:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f01020e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01020ea:	eb 24                	jmp    f0102110 <command_print_sch_method+0x4c>
		{
			cprintf("%d   ", quantums[i]) ;
f01020ec:	8b 15 a8 b8 85 f0    	mov    0xf085b8a8,%edx
f01020f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01020f5:	01 d0                	add    %edx,%eax
f01020f7:	8a 00                	mov    (%eax),%al
f01020f9:	0f b6 c0             	movzbl %al,%eax
f01020fc:	83 ec 08             	sub    $0x8,%esp
f01020ff:	50                   	push   %eax
f0102100:	68 cd 4f 13 f0       	push   $0xf0134fcd
f0102105:	e8 04 ec ff ff       	call   f0100d0e <cprintf>
f010210a:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f010210d:	ff 45 f4             	incl   -0xc(%ebp)
f0102110:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0102115:	0f b6 c0             	movzbl %al,%eax
f0102118:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010211b:	7f cf                	jg     f01020ec <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f010211d:	83 ec 0c             	sub    $0xc,%esp
f0102120:	68 55 49 13 f0       	push   $0xf0134955
f0102125:	e8 e4 eb ff ff       	call   f0100d0e <cprintf>
f010212a:	83 c4 10             	add    $0x10,%esp
f010212d:	eb 36                	jmp    f0102165 <command_print_sch_method+0xa1>
	}
	else if (isSchedMethodRR())
f010212f:	e8 0e 23 00 00       	call   f0104442 <isSchedMethodRR>
f0102134:	85 c0                	test   %eax,%eax
f0102136:	74 1d                	je     f0102155 <command_print_sch_method+0x91>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f0102138:	a1 a8 b8 85 f0       	mov    0xf085b8a8,%eax
f010213d:	8a 00                	mov    (%eax),%al
f010213f:	0f b6 c0             	movzbl %al,%eax
f0102142:	83 ec 08             	sub    $0x8,%esp
f0102145:	50                   	push   %eax
f0102146:	68 08 50 13 f0       	push   $0xf0135008
f010214b:	e8 be eb ff ff       	call   f0100d0e <cprintf>
f0102150:	83 c4 10             	add    $0x10,%esp
f0102153:	eb 10                	jmp    f0102165 <command_print_sch_method+0xa1>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f0102155:	83 ec 0c             	sub    $0xc,%esp
f0102158:	68 44 50 13 f0       	push   $0xf0135044
f010215d:	e8 ac eb ff ff       	call   f0100d0e <cprintf>
f0102162:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102165:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010216a:	c9                   	leave  
f010216b:	c3                   	ret    

f010216c <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f010216c:	55                   	push   %ebp
f010216d:	89 e5                	mov    %esp,%ebp
f010216f:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0102172:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102175:	83 c0 04             	add    $0x4,%eax
f0102178:	8b 00                	mov    (%eax),%eax
f010217a:	83 ec 04             	sub    $0x4,%esp
f010217d:	6a 0a                	push   $0xa
f010217f:	6a 00                	push   $0x0
f0102181:	50                   	push   %eax
f0102182:	e8 40 fc 02 00       	call   f0131dc7 <strtol>
f0102187:	83 c4 10             	add    $0x10,%esp
f010218a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f010218d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102190:	0f b6 c0             	movzbl %al,%eax
f0102193:	83 ec 0c             	sub    $0xc,%esp
f0102196:	50                   	push   %eax
f0102197:	e8 51 eb 02 00       	call   f0130ced <chksch>
f010219c:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f010219f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01021a3:	75 12                	jne    f01021b7 <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f01021a5:	83 ec 0c             	sub    $0xc,%esp
f01021a8:	68 6c 50 13 f0       	push   $0xf013506c
f01021ad:	e8 5c eb ff ff       	call   f0100d0e <cprintf>
f01021b2:	83 c4 10             	add    $0x10,%esp
f01021b5:	eb 16                	jmp    f01021cd <command_sch_test+0x61>
	else if (status == 1)
f01021b7:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01021bb:	75 10                	jne    f01021cd <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f01021bd:	83 ec 0c             	sub    $0xc,%esp
f01021c0:	68 94 50 13 f0       	push   $0xf0135094
f01021c5:	e8 44 eb ff ff       	call   f0100d0e <cprintf>
f01021ca:	83 c4 10             	add    $0x10,%esp
	return 0;
f01021cd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01021d2:	c9                   	leave  
f01021d3:	c3                   	ret    

f01021d4 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f01021d4:	55                   	push   %ebp
f01021d5:	89 e5                	mov    %esp,%ebp
f01021d7:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f01021da:	e8 36 c0 00 00       	call   f010e215 <isPageReplacmentAlgorithmCLOCK>
f01021df:	85 c0                	test   %eax,%eax
f01021e1:	74 15                	je     f01021f8 <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f01021e3:	83 ec 0c             	sub    $0xc,%esp
f01021e6:	68 b8 50 13 f0       	push   $0xf01350b8
f01021eb:	e8 1e eb ff ff       	call   f0100d0e <cprintf>
f01021f0:	83 c4 10             	add    $0x10,%esp
f01021f3:	e9 8c 00 00 00       	jmp    f0102284 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f01021f8:	83 ec 0c             	sub    $0xc,%esp
f01021fb:	6a 01                	push   $0x1
f01021fd:	e8 fd bf 00 00       	call   f010e1ff <isPageReplacmentAlgorithmLRU>
f0102202:	83 c4 10             	add    $0x10,%esp
f0102205:	85 c0                	test   %eax,%eax
f0102207:	74 12                	je     f010221b <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f0102209:	83 ec 0c             	sub    $0xc,%esp
f010220c:	68 e0 50 13 f0       	push   $0xf01350e0
f0102211:	e8 f8 ea ff ff       	call   f0100d0e <cprintf>
f0102216:	83 c4 10             	add    $0x10,%esp
f0102219:	eb 69                	jmp    f0102284 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010221b:	83 ec 0c             	sub    $0xc,%esp
f010221e:	6a 02                	push   $0x2
f0102220:	e8 da bf 00 00       	call   f010e1ff <isPageReplacmentAlgorithmLRU>
f0102225:	83 c4 10             	add    $0x10,%esp
f0102228:	85 c0                	test   %eax,%eax
f010222a:	74 12                	je     f010223e <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f010222c:	83 ec 0c             	sub    $0xc,%esp
f010222f:	68 20 51 13 f0       	push   $0xf0135120
f0102234:	e8 d5 ea ff ff       	call   f0100d0e <cprintf>
f0102239:	83 c4 10             	add    $0x10,%esp
f010223c:	eb 46                	jmp    f0102284 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f010223e:	e8 ed bf 00 00       	call   f010e230 <isPageReplacmentAlgorithmFIFO>
f0102243:	85 c0                	test   %eax,%eax
f0102245:	74 12                	je     f0102259 <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f0102247:	83 ec 0c             	sub    $0xc,%esp
f010224a:	68 5c 51 13 f0       	push   $0xf013515c
f010224f:	e8 ba ea ff ff       	call   f0100d0e <cprintf>
f0102254:	83 c4 10             	add    $0x10,%esp
f0102257:	eb 2b                	jmp    f0102284 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f0102259:	e8 ed bf 00 00       	call   f010e24b <isPageReplacmentAlgorithmModifiedCLOCK>
f010225e:	85 c0                	test   %eax,%eax
f0102260:	74 12                	je     f0102274 <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f0102262:	83 ec 0c             	sub    $0xc,%esp
f0102265:	68 80 51 13 f0       	push   $0xf0135180
f010226a:	e8 9f ea ff ff       	call   f0100d0e <cprintf>
f010226f:	83 c4 10             	add    $0x10,%esp
f0102272:	eb 10                	jmp    f0102284 <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0102274:	83 ec 0c             	sub    $0xc,%esp
f0102277:	68 b0 51 13 f0       	push   $0xf01351b0
f010227c:	e8 8d ea ff ff       	call   f0100d0e <cprintf>
f0102281:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102284:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102289:	c9                   	leave  
f010228a:	c3                   	ret    

f010228b <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f010228b:	55                   	push   %ebp
f010228c:	89 e5                	mov    %esp,%ebp
f010228e:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f0102291:	e8 18 ed ff ff       	call   f0100fae <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f0102296:	83 ec 0c             	sub    $0xc,%esp
f0102299:	68 dc 51 13 f0       	push   $0xf01351dc
f010229e:	e8 6b ea ff ff       	call   f0100d0e <cprintf>
f01022a3:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022ab:	c9                   	leave  
f01022ac:	c3                   	ret    

f01022ad <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f01022ad:	55                   	push   %ebp
f01022ae:	89 e5                	mov    %esp,%ebp
f01022b0:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f01022b3:	e8 06 ed ff ff       	call   f0100fbe <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f01022b8:	83 ec 0c             	sub    $0xc,%esp
f01022bb:	68 0c 52 13 f0       	push   $0xf013520c
f01022c0:	e8 49 ea ff ff       	call   f0100d0e <cprintf>
f01022c5:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022cd:	c9                   	leave  
f01022ce:	c3                   	ret    

f01022cf <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01022cf:	55                   	push   %ebp
f01022d0:	89 e5                	mov    %esp,%ebp
f01022d2:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f01022d5:	e8 f4 ec ff ff       	call   f0100fce <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f01022da:	83 ec 0c             	sub    $0xc,%esp
f01022dd:	68 3c 52 13 f0       	push   $0xf013523c
f01022e2:	e8 27 ea ff ff       	call   f0100d0e <cprintf>
f01022e7:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022ea:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022ef:	c9                   	leave  
f01022f0:	c3                   	ret    

f01022f1 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01022f1:	55                   	push   %ebp
f01022f2:	89 e5                	mov    %esp,%ebp
f01022f4:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f01022f7:	e8 e2 ec ff ff       	call   f0100fde <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f01022fc:	83 ec 0c             	sub    $0xc,%esp
f01022ff:	68 6c 52 13 f0       	push   $0xf013526c
f0102304:	e8 05 ea ff ff       	call   f0100d0e <cprintf>
f0102309:	83 c4 10             	add    $0x10,%esp
	return 0;
f010230c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102311:	c9                   	leave  
f0102312:	c3                   	ret    

f0102313 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f0102313:	55                   	push   %ebp
f0102314:	89 e5                	mov    %esp,%ebp
f0102316:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f0102319:	e8 d0 ec ff ff       	call   f0100fee <isUHeapPlacementStrategyFIRSTFIT>
f010231e:	84 c0                	test   %al,%al
f0102320:	74 12                	je     f0102334 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0102322:	83 ec 0c             	sub    $0xc,%esp
f0102325:	68 9c 52 13 f0       	push   $0xf013529c
f010232a:	e8 df e9 ff ff       	call   f0100d0e <cprintf>
f010232f:	83 c4 10             	add    $0x10,%esp
f0102332:	eb 61                	jmp    f0102395 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f0102334:	e8 ca ec ff ff       	call   f0101003 <isUHeapPlacementStrategyBESTFIT>
f0102339:	84 c0                	test   %al,%al
f010233b:	74 12                	je     f010234f <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f010233d:	83 ec 0c             	sub    $0xc,%esp
f0102340:	68 c8 52 13 f0       	push   $0xf01352c8
f0102345:	e8 c4 e9 ff ff       	call   f0100d0e <cprintf>
f010234a:	83 c4 10             	add    $0x10,%esp
f010234d:	eb 46                	jmp    f0102395 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f010234f:	e8 c4 ec ff ff       	call   f0101018 <isUHeapPlacementStrategyNEXTFIT>
f0102354:	84 c0                	test   %al,%al
f0102356:	74 12                	je     f010236a <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f0102358:	83 ec 0c             	sub    $0xc,%esp
f010235b:	68 f4 52 13 f0       	push   $0xf01352f4
f0102360:	e8 a9 e9 ff ff       	call   f0100d0e <cprintf>
f0102365:	83 c4 10             	add    $0x10,%esp
f0102368:	eb 2b                	jmp    f0102395 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f010236a:	e8 be ec ff ff       	call   f010102d <isUHeapPlacementStrategyWORSTFIT>
f010236f:	84 c0                	test   %al,%al
f0102371:	74 12                	je     f0102385 <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f0102373:	83 ec 0c             	sub    $0xc,%esp
f0102376:	68 20 53 13 f0       	push   $0xf0135320
f010237b:	e8 8e e9 ff ff       	call   f0100d0e <cprintf>
f0102380:	83 c4 10             	add    $0x10,%esp
f0102383:	eb 10                	jmp    f0102395 <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f0102385:	83 ec 0c             	sub    $0xc,%esp
f0102388:	68 4c 53 13 f0       	push   $0xf013534c
f010238d:	e8 7c e9 ff ff       	call   f0100d0e <cprintf>
f0102392:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102395:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010239a:	c9                   	leave  
f010239b:	c3                   	ret    

f010239c <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f010239c:	55                   	push   %ebp
f010239d:	89 e5                	mov    %esp,%ebp
f010239f:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f01023a2:	e8 4f eb ff ff       	call   f0100ef6 <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01023a7:	83 ec 0c             	sub    $0xc,%esp
f01023aa:	68 78 53 13 f0       	push   $0xf0135378
f01023af:	e8 5a e9 ff ff       	call   f0100d0e <cprintf>
f01023b4:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023b7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023bc:	c9                   	leave  
f01023bd:	c3                   	ret    

f01023be <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01023be:	55                   	push   %ebp
f01023bf:	89 e5                	mov    %esp,%ebp
f01023c1:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f01023c4:	e8 3d eb ff ff       	call   f0100f06 <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01023c9:	83 ec 0c             	sub    $0xc,%esp
f01023cc:	68 78 53 13 f0       	push   $0xf0135378
f01023d1:	e8 38 e9 ff ff       	call   f0100d0e <cprintf>
f01023d6:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023d9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023de:	c9                   	leave  
f01023df:	c3                   	ret    

f01023e0 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f01023e0:	55                   	push   %ebp
f01023e1:	89 e5                	mov    %esp,%ebp
f01023e3:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f01023e6:	e8 2b eb ff ff       	call   f0100f16 <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f01023eb:	83 ec 0c             	sub    $0xc,%esp
f01023ee:	68 ac 53 13 f0       	push   $0xf01353ac
f01023f3:	e8 16 e9 ff ff       	call   f0100d0e <cprintf>
f01023f8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102400:	c9                   	leave  
f0102401:	c3                   	ret    

f0102402 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0102402:	55                   	push   %ebp
f0102403:	89 e5                	mov    %esp,%ebp
f0102405:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f0102408:	e8 19 eb ff ff       	call   f0100f26 <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f010240d:	83 ec 0c             	sub    $0xc,%esp
f0102410:	68 dc 53 13 f0       	push   $0xf01353dc
f0102415:	e8 f4 e8 ff ff       	call   f0100d0e <cprintf>
f010241a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010241d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102422:	c9                   	leave  
f0102423:	c3                   	ret    

f0102424 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102424:	55                   	push   %ebp
f0102425:	89 e5                	mov    %esp,%ebp
f0102427:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f010242a:	e8 07 eb ff ff       	call   f0100f36 <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f010242f:	83 ec 0c             	sub    $0xc,%esp
f0102432:	68 0c 54 13 f0       	push   $0xf013540c
f0102437:	e8 d2 e8 ff ff       	call   f0100d0e <cprintf>
f010243c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010243f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102444:	c9                   	leave  
f0102445:	c3                   	ret    

f0102446 <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f0102446:	55                   	push   %ebp
f0102447:	89 e5                	mov    %esp,%ebp
f0102449:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f010244c:	e8 f5 ea ff ff       	call   f0100f46 <isKHeapPlacementStrategyCONTALLOC>
f0102451:	84 c0                	test   %al,%al
f0102453:	74 12                	je     f0102467 <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f0102455:	83 ec 0c             	sub    $0xc,%esp
f0102458:	68 40 54 13 f0       	push   $0xf0135440
f010245d:	e8 ac e8 ff ff       	call   f0100d0e <cprintf>
f0102462:	83 c4 10             	add    $0x10,%esp
f0102465:	eb 7c                	jmp    f01024e3 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f0102467:	e8 ee ea ff ff       	call   f0100f5a <isKHeapPlacementStrategyFIRSTFIT>
f010246c:	84 c0                	test   %al,%al
f010246e:	74 12                	je     f0102482 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102470:	83 ec 0c             	sub    $0xc,%esp
f0102473:	68 7c 54 13 f0       	push   $0xf013547c
f0102478:	e8 91 e8 ff ff       	call   f0100d0e <cprintf>
f010247d:	83 c4 10             	add    $0x10,%esp
f0102480:	eb 61                	jmp    f01024e3 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f0102482:	e8 e8 ea ff ff       	call   f0100f6f <isKHeapPlacementStrategyBESTFIT>
f0102487:	84 c0                	test   %al,%al
f0102489:	74 12                	je     f010249d <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f010248b:	83 ec 0c             	sub    $0xc,%esp
f010248e:	68 ac 54 13 f0       	push   $0xf01354ac
f0102493:	e8 76 e8 ff ff       	call   f0100d0e <cprintf>
f0102498:	83 c4 10             	add    $0x10,%esp
f010249b:	eb 46                	jmp    f01024e3 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f010249d:	e8 e2 ea ff ff       	call   f0100f84 <isKHeapPlacementStrategyNEXTFIT>
f01024a2:	84 c0                	test   %al,%al
f01024a4:	74 12                	je     f01024b8 <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f01024a6:	83 ec 0c             	sub    $0xc,%esp
f01024a9:	68 d8 54 13 f0       	push   $0xf01354d8
f01024ae:	e8 5b e8 ff ff       	call   f0100d0e <cprintf>
f01024b3:	83 c4 10             	add    $0x10,%esp
f01024b6:	eb 2b                	jmp    f01024e3 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f01024b8:	e8 dc ea ff ff       	call   f0100f99 <isKHeapPlacementStrategyWORSTFIT>
f01024bd:	84 c0                	test   %al,%al
f01024bf:	74 12                	je     f01024d3 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f01024c1:	83 ec 0c             	sub    $0xc,%esp
f01024c4:	68 04 55 13 f0       	push   $0xf0135504
f01024c9:	e8 40 e8 ff ff       	call   f0100d0e <cprintf>
f01024ce:	83 c4 10             	add    $0x10,%esp
f01024d1:	eb 10                	jmp    f01024e3 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f01024d3:	83 ec 0c             	sub    $0xc,%esp
f01024d6:	68 34 55 13 f0       	push   $0xf0135534
f01024db:	e8 2e e8 ff ff       	call   f0100d0e <cprintf>
f01024e0:	83 c4 10             	add    $0x10,%esp

	return 0;
f01024e3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024e8:	c9                   	leave  
f01024e9:	c3                   	ret    

f01024ea <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f01024ea:	55                   	push   %ebp
f01024eb:	89 e5                	mov    %esp,%ebp
f01024ed:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01024f0:	e8 cd bd 00 00       	call   f010e2c2 <isBufferingEnabled>
f01024f5:	84 c0                	test   %al,%al
f01024f7:	75 12                	jne    f010250b <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01024f9:	83 ec 0c             	sub    $0xc,%esp
f01024fc:	68 64 55 13 f0       	push   $0xf0135564
f0102501:	e8 08 e8 ff ff       	call   f0100d0e <cprintf>
f0102506:	83 c4 10             	add    $0x10,%esp
f0102509:	eb 1d                	jmp    f0102528 <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f010250b:	83 ec 0c             	sub    $0xc,%esp
f010250e:	6a 00                	push   $0x0
f0102510:	e8 87 bd 00 00       	call   f010e29c <enableModifiedBuffer>
f0102515:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f0102518:	83 ec 0c             	sub    $0xc,%esp
f010251b:	68 a0 55 13 f0       	push   $0xf01355a0
f0102520:	e8 e9 e7 ff ff       	call   f0100d0e <cprintf>
f0102525:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102528:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010252d:	c9                   	leave  
f010252e:	c3                   	ret    

f010252f <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f010252f:	55                   	push   %ebp
f0102530:	89 e5                	mov    %esp,%ebp
f0102532:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102535:	e8 88 bd 00 00       	call   f010e2c2 <isBufferingEnabled>
f010253a:	84 c0                	test   %al,%al
f010253c:	75 12                	jne    f0102550 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f010253e:	83 ec 0c             	sub    $0xc,%esp
f0102541:	68 64 55 13 f0       	push   $0xf0135564
f0102546:	e8 c3 e7 ff ff       	call   f0100d0e <cprintf>
f010254b:	83 c4 10             	add    $0x10,%esp
f010254e:	eb 1d                	jmp    f010256d <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f0102550:	83 ec 0c             	sub    $0xc,%esp
f0102553:	6a 01                	push   $0x1
f0102555:	e8 42 bd 00 00       	call   f010e29c <enableModifiedBuffer>
f010255a:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f010255d:	83 ec 0c             	sub    $0xc,%esp
f0102560:	68 c4 55 13 f0       	push   $0xf01355c4
f0102565:	e8 a4 e7 ff ff       	call   f0100d0e <cprintf>
f010256a:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010256d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102572:	c9                   	leave  
f0102573:	c3                   	ret    

f0102574 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f0102574:	55                   	push   %ebp
f0102575:	89 e5                	mov    %esp,%ebp
f0102577:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f010257a:	83 ec 0c             	sub    $0xc,%esp
f010257d:	6a 00                	push   $0x0
f010257f:	e8 30 bd 00 00       	call   f010e2b4 <enableBuffering>
f0102584:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f0102587:	83 ec 0c             	sub    $0xc,%esp
f010258a:	6a 00                	push   $0x0
f010258c:	e8 0b bd 00 00       	call   f010e29c <enableModifiedBuffer>
f0102591:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f0102594:	83 ec 0c             	sub    $0xc,%esp
f0102597:	68 e4 55 13 f0       	push   $0xf01355e4
f010259c:	e8 6d e7 ff ff       	call   f0100d0e <cprintf>
f01025a1:	83 c4 10             	add    $0x10,%esp
	return 0;
f01025a4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025a9:	c9                   	leave  
f01025aa:	c3                   	ret    

f01025ab <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f01025ab:	55                   	push   %ebp
f01025ac:	89 e5                	mov    %esp,%ebp
f01025ae:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f01025b1:	83 ec 0c             	sub    $0xc,%esp
f01025b4:	6a 01                	push   $0x1
f01025b6:	e8 f9 bc 00 00       	call   f010e2b4 <enableBuffering>
f01025bb:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f01025be:	83 ec 0c             	sub    $0xc,%esp
f01025c1:	6a 01                	push   $0x1
f01025c3:	e8 d4 bc 00 00       	call   f010e29c <enableModifiedBuffer>
f01025c8:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f01025cb:	e8 0a bd 00 00       	call   f010e2da <getModifiedBufferLength>
f01025d0:	85 c0                	test   %eax,%eax
f01025d2:	75 59                	jne    f010262d <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f01025d4:	83 ec 0c             	sub    $0xc,%esp
f01025d7:	68 00 56 13 f0       	push   $0xf0135600
f01025dc:	e8 2d e7 ff ff       	call   f0100d0e <cprintf>
f01025e1:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f01025e4:	83 ec 08             	sub    $0x8,%esp
f01025e7:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01025ea:	50                   	push   %eax
f01025eb:	68 30 56 13 f0       	push   $0xf0135630
f01025f0:	e8 6c f2 02 00       	call   f0131861 <readline>
f01025f5:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f01025f8:	83 ec 04             	sub    $0x4,%esp
f01025fb:	6a 0a                	push   $0xa
f01025fd:	6a 00                	push   $0x0
f01025ff:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0102602:	50                   	push   %eax
f0102603:	e8 bf f7 02 00       	call   f0131dc7 <strtol>
f0102608:	83 c4 10             	add    $0x10,%esp
f010260b:	83 ec 0c             	sub    $0xc,%esp
f010260e:	50                   	push   %eax
f010260f:	e8 b8 bc 00 00       	call   f010e2cc <setModifiedBufferLength>
f0102614:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102617:	e8 be bc 00 00       	call   f010e2da <getModifiedBufferLength>
f010261c:	83 ec 08             	sub    $0x8,%esp
f010261f:	50                   	push   %eax
f0102620:	68 5c 56 13 f0       	push   $0xf013565c
f0102625:	e8 e4 e6 ff ff       	call   f0100d0e <cprintf>
f010262a:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f010262d:	83 ec 0c             	sub    $0xc,%esp
f0102630:	68 81 56 13 f0       	push   $0xf0135681
f0102635:	e8 d4 e6 ff ff       	call   f0100d0e <cprintf>
f010263a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010263d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102642:	c9                   	leave  
f0102643:	c3                   	ret    

f0102644 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102644:	55                   	push   %ebp
f0102645:	89 e5                	mov    %esp,%ebp
f0102647:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010264a:	e8 73 bc 00 00       	call   f010e2c2 <isBufferingEnabled>
f010264f:	84 c0                	test   %al,%al
f0102651:	75 12                	jne    f0102665 <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0102653:	83 ec 0c             	sub    $0xc,%esp
f0102656:	68 9c 56 13 f0       	push   $0xf013569c
f010265b:	e8 ae e6 ff ff       	call   f0100d0e <cprintf>
f0102660:	83 c4 10             	add    $0x10,%esp
f0102663:	eb 19                	jmp    f010267e <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0102665:	e8 40 bc 00 00       	call   f010e2aa <isModifiedBufferEnabled>
f010266a:	84 c0                	test   %al,%al
f010266c:	75 10                	jne    f010267e <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f010266e:	83 ec 0c             	sub    $0xc,%esp
f0102671:	68 ec 56 13 f0       	push   $0xf01356ec
f0102676:	e8 93 e6 ff ff       	call   f0100d0e <cprintf>
f010267b:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f010267e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102681:	83 c0 04             	add    $0x4,%eax
f0102684:	8b 00                	mov    (%eax),%eax
f0102686:	83 ec 04             	sub    $0x4,%esp
f0102689:	6a 0a                	push   $0xa
f010268b:	6a 00                	push   $0x0
f010268d:	50                   	push   %eax
f010268e:	e8 34 f7 02 00       	call   f0131dc7 <strtol>
f0102693:	83 c4 10             	add    $0x10,%esp
f0102696:	83 ec 0c             	sub    $0xc,%esp
f0102699:	50                   	push   %eax
f010269a:	e8 2d bc 00 00       	call   f010e2cc <setModifiedBufferLength>
f010269f:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01026a2:	e8 33 bc 00 00       	call   f010e2da <getModifiedBufferLength>
f01026a7:	83 ec 08             	sub    $0x8,%esp
f01026aa:	50                   	push   %eax
f01026ab:	68 5c 56 13 f0       	push   $0xf013565c
f01026b0:	e8 59 e6 ff ff       	call   f0100d0e <cprintf>
f01026b5:	83 c4 10             	add    $0x10,%esp
	return 0;
f01026b8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026bd:	c9                   	leave  
f01026be:	c3                   	ret    

f01026bf <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f01026bf:	55                   	push   %ebp
f01026c0:	89 e5                	mov    %esp,%ebp
f01026c2:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01026c5:	e8 f8 bb 00 00       	call   f010e2c2 <isBufferingEnabled>
f01026ca:	84 c0                	test   %al,%al
f01026cc:	75 12                	jne    f01026e0 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01026ce:	83 ec 0c             	sub    $0xc,%esp
f01026d1:	68 9c 56 13 f0       	push   $0xf013569c
f01026d6:	e8 33 e6 ff ff       	call   f0100d0e <cprintf>
f01026db:	83 c4 10             	add    $0x10,%esp
f01026de:	eb 19                	jmp    f01026f9 <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01026e0:	e8 c5 bb 00 00       	call   f010e2aa <isModifiedBufferEnabled>
f01026e5:	84 c0                	test   %al,%al
f01026e7:	75 10                	jne    f01026f9 <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01026e9:	83 ec 0c             	sub    $0xc,%esp
f01026ec:	68 ec 56 13 f0       	push   $0xf01356ec
f01026f1:	e8 18 e6 ff ff       	call   f0100d0e <cprintf>
f01026f6:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f01026f9:	e8 dc bb 00 00       	call   f010e2da <getModifiedBufferLength>
f01026fe:	83 ec 08             	sub    $0x8,%esp
f0102701:	50                   	push   %eax
f0102702:	68 32 57 13 f0       	push   $0xf0135732
f0102707:	e8 02 e6 ff ff       	call   f0100d0e <cprintf>
f010270c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010270f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102714:	c9                   	leave  
f0102715:	c3                   	ret    

f0102716 <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f0102716:	55                   	push   %ebp
f0102717:	89 e5                	mov    %esp,%ebp
f0102719:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f010271c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f0102723:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102727:	75 1b                	jne    f0102744 <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f0102729:	8b 45 0c             	mov    0xc(%ebp),%eax
f010272c:	83 c0 04             	add    $0x4,%eax
f010272f:	8b 00                	mov    (%eax),%eax
f0102731:	83 ec 04             	sub    $0x4,%esp
f0102734:	6a 0a                	push   $0xa
f0102736:	6a 00                	push   $0x0
f0102738:	50                   	push   %eax
f0102739:	e8 89 f6 02 00       	call   f0131dc7 <strtol>
f010273e:	83 c4 10             	add    $0x10,%esp
f0102741:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (isKHeapPlacementStrategyCONTALLOC())
f0102744:	e8 fd e7 ff ff       	call   f0100f46 <isKHeapPlacementStrategyCONTALLOC>
f0102749:	84 c0                	test   %al,%al
f010274b:	74 0a                	je     f0102757 <command_test_kmalloc+0x41>
		test_kmalloc();
f010274d:	e8 04 58 01 00       	call   f0117f56 <test_kmalloc>
f0102752:	e9 e8 00 00 00       	jmp    f010283f <command_test_kmalloc+0x129>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f0102757:	e8 fe e7 ff ff       	call   f0100f5a <isKHeapPlacementStrategyFIRSTFIT>
f010275c:	84 c0                	test   %al,%al
f010275e:	74 44                	je     f01027a4 <command_test_kmalloc+0x8e>
	{
		if (testNum == 0)
f0102760:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102764:	75 1a                	jne    f0102780 <command_test_kmalloc+0x6a>
		{
			cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102766:	83 ec 0c             	sub    $0xc,%esp
f0102769:	68 50 57 13 f0       	push   $0xf0135750
f010276e:	e8 9b e5 ff ff       	call   f0100d0e <cprintf>
f0102773:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102776:	b8 00 00 00 00       	mov    $0x0,%eax
f010277b:	e9 c4 00 00 00       	jmp    f0102844 <command_test_kmalloc+0x12e>
		}
		//Test FIRST FIT allocation
		if (testNum == 1)
f0102780:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102784:	75 0a                	jne    f0102790 <command_test_kmalloc+0x7a>
			test_kmalloc_firstfit1();
f0102786:	e8 54 a6 01 00       	call   f011cddf <test_kmalloc_firstfit1>
f010278b:	e9 af 00 00 00       	jmp    f010283f <command_test_kmalloc+0x129>
		else if (testNum == 2)
f0102790:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102794:	0f 85 a5 00 00 00    	jne    f010283f <command_test_kmalloc+0x129>
			test_kmalloc_firstfit2();
f010279a:	e8 e2 b9 01 00       	call   f011e181 <test_kmalloc_firstfit2>
f010279f:	e9 9b 00 00 00       	jmp    f010283f <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f01027a4:	e8 c6 e7 ff ff       	call   f0100f6f <isKHeapPlacementStrategyBESTFIT>
f01027a9:	84 c0                	test   %al,%al
f01027ab:	74 44                	je     f01027f1 <command_test_kmalloc+0xdb>
	{
		if (testNum == 0)
f01027ad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01027b1:	75 17                	jne    f01027ca <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f01027b3:	83 ec 0c             	sub    $0xc,%esp
f01027b6:	68 a0 57 13 f0       	push   $0xf01357a0
f01027bb:	e8 4e e5 ff ff       	call   f0100d0e <cprintf>
f01027c0:	83 c4 10             	add    $0x10,%esp
			return 0;
f01027c3:	b8 00 00 00 00       	mov    $0x0,%eax
f01027c8:	eb 7a                	jmp    f0102844 <command_test_kmalloc+0x12e>
		}
		if (testNum == 1)
f01027ca:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01027ce:	75 07                	jne    f01027d7 <command_test_kmalloc+0xc1>
			test_kmalloc();
f01027d0:	e8 81 57 01 00       	call   f0117f56 <test_kmalloc>
f01027d5:	eb 68                	jmp    f010283f <command_test_kmalloc+0x129>
		else if (testNum == 2)
f01027d7:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01027db:	75 07                	jne    f01027e4 <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f01027dd:	e8 c7 80 01 00       	call   f011a8a9 <test_kmalloc_bestfit1>
f01027e2:	eb 5b                	jmp    f010283f <command_test_kmalloc+0x129>
		else if (testNum == 3)
f01027e4:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f01027e8:	75 55                	jne    f010283f <command_test_kmalloc+0x129>
			test_kmalloc_bestfit2();
f01027ea:	e8 10 93 01 00       	call   f011baff <test_kmalloc_bestfit2>
f01027ef:	eb 4e                	jmp    f010283f <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyNEXTFIT())
f01027f1:	e8 8e e7 ff ff       	call   f0100f84 <isKHeapPlacementStrategyNEXTFIT>
f01027f6:	84 c0                	test   %al,%al
f01027f8:	74 37                	je     f0102831 <command_test_kmalloc+0x11b>
	{
		if (testNum == 0)
f01027fa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01027fe:	75 17                	jne    f0102817 <command_test_kmalloc+0x101>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0102800:	83 ec 0c             	sub    $0xc,%esp
f0102803:	68 f0 57 13 f0       	push   $0xf01357f0
f0102808:	e8 01 e5 ff ff       	call   f0100d0e <cprintf>
f010280d:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102810:	b8 00 00 00 00       	mov    $0x0,%eax
f0102815:	eb 2d                	jmp    f0102844 <command_test_kmalloc+0x12e>
		}
		//Test cont. allocation
		if (testNum == 1)
f0102817:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010281b:	75 07                	jne    f0102824 <command_test_kmalloc+0x10e>
			test_kmalloc();
f010281d:	e8 34 57 01 00       	call   f0117f56 <test_kmalloc>
f0102822:	eb 1b                	jmp    f010283f <command_test_kmalloc+0x129>
		//Test nextfit strategy
		else if (testNum == 2)
f0102824:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102828:	75 15                	jne    f010283f <command_test_kmalloc+0x129>
			test_kmalloc_nextfit();
f010282a:	e8 85 69 01 00       	call   f01191b4 <test_kmalloc_nextfit>
f010282f:	eb 0e                	jmp    f010283f <command_test_kmalloc+0x129>

	}
	else if (isKHeapPlacementStrategyWORSTFIT())
f0102831:	e8 63 e7 ff ff       	call   f0100f99 <isKHeapPlacementStrategyWORSTFIT>
f0102836:	84 c0                	test   %al,%al
f0102838:	74 05                	je     f010283f <command_test_kmalloc+0x129>
		test_kmalloc_worstfit();
f010283a:	e8 d7 c7 01 00       	call   f011f016 <test_kmalloc_worstfit>
	return 0;
f010283f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102844:	c9                   	leave  
f0102845:	c3                   	ret    

f0102846 <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f0102846:	55                   	push   %ebp
f0102847:	89 e5                	mov    %esp,%ebp
f0102849:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f010284c:	e8 1e e7 ff ff       	call   f0100f6f <isKHeapPlacementStrategyBESTFIT>
f0102851:	84 c0                	test   %al,%al
f0102853:	75 09                	jne    f010285e <command_test_kfree+0x18>
f0102855:	e8 00 e7 ff ff       	call   f0100f5a <isKHeapPlacementStrategyFIRSTFIT>
f010285a:	84 c0                	test   %al,%al
f010285c:	74 07                	je     f0102865 <command_test_kfree+0x1f>
	{
		test_kfree_bestfirstfit();
f010285e:	e8 55 ff 01 00       	call   f01227b8 <test_kfree_bestfirstfit>
f0102863:	eb 05                	jmp    f010286a <command_test_kfree+0x24>
	}
	else //NEXT & CONT
	{
		test_kfree();
f0102865:	e8 fc dd 01 00       	call   f0120666 <test_kfree>
	}
	return 0;
f010286a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010286f:	c9                   	leave  
f0102870:	c3                   	ret    

f0102871 <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f0102871:	55                   	push   %ebp
f0102872:	89 e5                	mov    %esp,%ebp
f0102874:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f0102877:	e8 38 19 02 00       	call   f01241b4 <test_kheap_phys_addr>
	return 0;
f010287c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102881:	c9                   	leave  
f0102882:	c3                   	ret    

f0102883 <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f0102883:	55                   	push   %ebp
f0102884:	89 e5                	mov    %esp,%ebp
f0102886:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f0102889:	e8 f6 2d 02 00       	call   f0125684 <test_kheap_virt_addr>
	return 0;
f010288e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102893:	c9                   	leave  
f0102894:	c3                   	ret    

f0102895 <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f0102895:	55                   	push   %ebp
f0102896:	89 e5                	mov    %esp,%ebp
f0102898:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f010289b:	e8 c1 42 02 00       	call   f0126b61 <test_three_creation_functions>
	return 0;
f01028a0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028a5:	c9                   	leave  
f01028a6:	c3                   	ret    

f01028a7 <command_test_krealloc>:

int command_test_krealloc(int number_of_arguments, char **arguments) {
f01028a7:	55                   	push   %ebp
f01028a8:	89 e5                	mov    %esp,%ebp
f01028aa:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyNEXTFIT())
f01028ad:	e8 d2 e6 ff ff       	call   f0100f84 <isKHeapPlacementStrategyNEXTFIT>
f01028b2:	84 c0                	test   %al,%al
f01028b4:	74 07                	je     f01028bd <command_test_krealloc+0x16>
		test_krealloc();
f01028b6:	e8 bd 9c 02 00       	call   f012c578 <test_krealloc>
f01028bb:	eb 0e                	jmp    f01028cb <command_test_krealloc+0x24>
	else if (isKHeapPlacementStrategyBESTFIT())
f01028bd:	e8 ad e6 ff ff       	call   f0100f6f <isKHeapPlacementStrategyBESTFIT>
f01028c2:	84 c0                	test   %al,%al
f01028c4:	74 05                	je     f01028cb <command_test_krealloc+0x24>
		test_krealloc_BF();
f01028c6:	e8 5d bc 02 00       	call   f012e528 <test_krealloc_BF>
	return 0;
f01028cb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028d0:	c9                   	leave  
f01028d1:	c3                   	ret    

f01028d2 <command_test_priority1>:

int command_test_priority1(int number_of_arguments, char **arguments)
{
f01028d2:	55                   	push   %ebp
f01028d3:	89 e5                	mov    %esp,%ebp
f01028d5:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f01028d8:	e8 8e 42 01 00       	call   f0116b6b <test_priority_normal_and_higher>
	return 0;
f01028dd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028e2:	c9                   	leave  
f01028e3:	c3                   	ret    

f01028e4 <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f01028e4:	55                   	push   %ebp
f01028e5:	89 e5                	mov    %esp,%ebp
f01028e7:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f01028ea:	e8 62 4c 01 00       	call   f0117551 <test_priority_normal_and_lower>
	return 0;
f01028ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028f4:	c9                   	leave  
f01028f5:	c3                   	ret    

f01028f6 <command_test_kfreeall>:

int command_test_kfreeall(int number_of_arguments, char **arguments)
{
f01028f6:	55                   	push   %ebp
f01028f7:	89 e5                	mov    %esp,%ebp
f01028f9:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f01028fc:	e8 9a 44 02 00       	call   f0126d9b <test_kfreeall>
	return 0;
f0102901:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102906:	c9                   	leave  
f0102907:	c3                   	ret    

f0102908 <command_test_kexpand>:

int command_test_kexpand(int number_of_arguments, char **arguments)
{
f0102908:	55                   	push   %ebp
f0102909:	89 e5                	mov    %esp,%ebp
f010290b:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f010290e:	e8 74 5b 02 00       	call   f0128487 <test_kexpand>
	return 0;
f0102913:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102918:	c9                   	leave  
f0102919:	c3                   	ret    

f010291a <command_test_kshrink>:

int command_test_kshrink(int number_of_arguments, char **arguments)
{
f010291a:	55                   	push   %ebp
f010291b:	89 e5                	mov    %esp,%ebp
f010291d:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f0102920:	e8 e3 68 02 00       	call   f0129208 <test_kshrink>
	return 0;
f0102925:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010292a:	c9                   	leave  
f010292b:	c3                   	ret    

f010292c <command_test_kfreelast>:

int command_test_kfreelast(int number_of_arguments, char **arguments)
{
f010292c:	55                   	push   %ebp
f010292d:	89 e5                	mov    %esp,%ebp
f010292f:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f0102932:	e8 be 77 02 00       	call   f012a0f5 <test_kfreelast>
	return 0;
f0102937:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010293c:	c9                   	leave  
f010293d:	c3                   	ret    

f010293e <command_test_sc_MLFQ>:

int command_test_sc_MLFQ(int number_of_arguments, char **arguments)
{
f010293e:	55                   	push   %ebp
f010293f:	89 e5                	mov    %esp,%ebp
f0102941:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f0102944:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102947:	83 c0 04             	add    $0x4,%eax
f010294a:	8b 00                	mov    (%eax),%eax
f010294c:	83 ec 04             	sub    $0x4,%esp
f010294f:	6a 0a                	push   $0xa
f0102951:	6a 00                	push   $0x0
f0102953:	50                   	push   %eax
f0102954:	e8 6e f4 02 00       	call   f0131dc7 <strtol>
f0102959:	83 c4 10             	add    $0x10,%esp
f010295c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f010295f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f0102966:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f010296d:	a1 70 b8 85 f0       	mov    0xf085b870,%eax
f0102972:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102975:	eb 3d                	jmp    f01029b4 <command_test_sc_MLFQ+0x76>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f0102977:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010297a:	05 5c 05 00 00       	add    $0x55c,%eax
f010297f:	83 ec 08             	sub    $0x8,%esp
f0102982:	68 3e 58 13 f0       	push   $0xf013583e
f0102987:	50                   	push   %eax
f0102988:	e8 e6 f1 02 00       	call   f0131b73 <strcmp>
f010298d:	83 c4 10             	add    $0x10,%esp
f0102990:	85 c0                	test   %eax,%eax
f0102992:	75 12                	jne    f01029a6 <command_test_sc_MLFQ+0x68>
		{
			if (firstTime)
f0102994:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102998:	74 07                	je     f01029a1 <command_test_sc_MLFQ+0x63>
				firstTime = 0;
f010299a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f01029a1:	ff 45 f4             	incl   -0xc(%ebp)
f01029a4:	eb 06                	jmp    f01029ac <command_test_sc_MLFQ+0x6e>
		}
		else if (!firstTime)
f01029a6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01029aa:	74 31                	je     f01029dd <command_test_sc_MLFQ+0x9f>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f01029ac:	a1 78 b8 85 f0       	mov    0xf085b878,%eax
f01029b1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01029b4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01029b8:	74 08                	je     f01029c2 <command_test_sc_MLFQ+0x84>
f01029ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01029bd:	8b 40 44             	mov    0x44(%eax),%eax
f01029c0:	eb 05                	jmp    f01029c7 <command_test_sc_MLFQ+0x89>
f01029c2:	b8 00 00 00 00       	mov    $0x0,%eax
f01029c7:	a3 78 b8 85 f0       	mov    %eax,0xf085b878
f01029cc:	a1 78 b8 85 f0       	mov    0xf085b878,%eax
f01029d1:	85 c0                	test   %eax,%eax
f01029d3:	75 a2                	jne    f0102977 <command_test_sc_MLFQ+0x39>
f01029d5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01029d9:	75 9c                	jne    f0102977 <command_test_sc_MLFQ+0x39>
f01029db:	eb 01                	jmp    f01029de <command_test_sc_MLFQ+0xa0>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f01029dd:	90                   	nop
	}
	if(cnt == numOfSlave2)
f01029de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01029e1:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01029e4:	75 12                	jne    f01029f8 <command_test_sc_MLFQ+0xba>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f01029e6:	83 ec 0c             	sub    $0xc,%esp
f01029e9:	68 48 58 13 f0       	push   $0xf0135848
f01029ee:	e8 1b e3 ff ff       	call   f0100d0e <cprintf>
f01029f3:	83 c4 10             	add    $0x10,%esp
f01029f6:	eb 17                	jmp    f0102a0f <command_test_sc_MLFQ+0xd1>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f01029f8:	83 ec 04             	sub    $0x4,%esp
f01029fb:	68 81 58 13 f0       	push   $0xf0135881
f0102a00:	68 8b 04 00 00       	push   $0x48b
f0102a05:	68 cd 48 13 f0       	push   $0xf01348cd
f0102a0a:	e8 f6 d7 ff ff       	call   f0100205 <_panic>
	}
	return 0;
f0102a0f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a14:	c9                   	leave  
f0102a15:	c3                   	ret    

f0102a16 <command_test_autocomplete>:


/*2022*/
int command_test_autocomplete(int number_of_arguments, char **arguments)
{
f0102a16:	55                   	push   %ebp
f0102a17:	89 e5                	mov    %esp,%ebp
f0102a19:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f0102a1c:	e8 46 ee 00 00       	call   f0111867 <TestAutoCompleteCommand>
f0102a21:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f0102a24:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a29:	c9                   	leave  
f0102a2a:	c3                   	ret    

f0102a2b <command_test_lists>:
int command_test_lists(int number_of_arguments, char **arguments)
{
f0102a2b:	55                   	push   %ebp
f0102a2c:	89 e5                	mov    %esp,%ebp
f0102a2e:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102a31:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a35:	74 1a                	je     f0102a51 <command_test_lists+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstlsts <testname>\n") ;
f0102a37:	83 ec 0c             	sub    $0xc,%esp
f0102a3a:	68 98 58 13 f0       	push   $0xf0135898
f0102a3f:	e8 ca e2 ff ff       	call   f0100d0e <cprintf>
f0102a44:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102a47:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a4c:	e9 82 01 00 00       	jmp    f0102bd3 <command_test_lists+0x1a8>
	}
	// Test 1 Example for initialize_MemBlocksList: tstlsts init 5
	if(strcmp(arguments[1], "init") == 0)
f0102a51:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a54:	83 c0 04             	add    $0x4,%eax
f0102a57:	8b 00                	mov    (%eax),%eax
f0102a59:	83 ec 08             	sub    $0x8,%esp
f0102a5c:	68 d0 58 13 f0       	push   $0xf01358d0
f0102a61:	50                   	push   %eax
f0102a62:	e8 0c f1 02 00       	call   f0131b73 <strcmp>
f0102a67:	83 c4 10             	add    $0x10,%esp
f0102a6a:	85 c0                	test   %eax,%eax
f0102a6c:	75 0a                	jne    f0102a78 <command_test_lists+0x4d>
	{
		test_initialize_MemBlocksList();
f0102a6e:	e8 9e c3 00 00       	call   f010ee11 <test_initialize_MemBlocksList>
f0102a73:	e9 56 01 00 00       	jmp    f0102bce <command_test_lists+0x1a3>
	}
	// Test 2 Example for insert_sorted: tstlsts insrt
	else if(strcmp(arguments[1], "insrt") == 0)
f0102a78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a7b:	83 c0 04             	add    $0x4,%eax
f0102a7e:	8b 00                	mov    (%eax),%eax
f0102a80:	83 ec 08             	sub    $0x8,%esp
f0102a83:	68 d5 58 13 f0       	push   $0xf01358d5
f0102a88:	50                   	push   %eax
f0102a89:	e8 e5 f0 02 00       	call   f0131b73 <strcmp>
f0102a8e:	83 c4 10             	add    $0x10,%esp
f0102a91:	85 c0                	test   %eax,%eax
f0102a93:	75 0a                	jne    f0102a9f <command_test_lists+0x74>
	{
		test_insert_sorted_allocList();
f0102a95:	e8 8b c4 00 00       	call   f010ef25 <test_insert_sorted_allocList>
f0102a9a:	e9 2f 01 00 00       	jmp    f0102bce <command_test_lists+0x1a3>
	}
	// Test 3 Example for find_block: tstlsts find
	else if(strcmp(arguments[1], "find") == 0)
f0102a9f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aa2:	83 c0 04             	add    $0x4,%eax
f0102aa5:	8b 00                	mov    (%eax),%eax
f0102aa7:	83 ec 08             	sub    $0x8,%esp
f0102aaa:	68 db 58 13 f0       	push   $0xf01358db
f0102aaf:	50                   	push   %eax
f0102ab0:	e8 be f0 02 00       	call   f0131b73 <strcmp>
f0102ab5:	83 c4 10             	add    $0x10,%esp
f0102ab8:	85 c0                	test   %eax,%eax
f0102aba:	75 0a                	jne    f0102ac6 <command_test_lists+0x9b>
	{
		test_find_block();
f0102abc:	e8 22 c9 00 00       	call   f010f3e3 <test_find_block>
f0102ac1:	e9 08 01 00 00       	jmp    f0102bce <command_test_lists+0x1a3>
	}
	// Test 4 Example for alloc_block_FF: tstlsts FF
	else if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102ac6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ac9:	83 c0 04             	add    $0x4,%eax
f0102acc:	8b 00                	mov    (%eax),%eax
f0102ace:	83 ec 08             	sub    $0x8,%esp
f0102ad1:	68 e0 58 13 f0       	push   $0xf01358e0
f0102ad6:	50                   	push   %eax
f0102ad7:	e8 97 f0 02 00       	call   f0131b73 <strcmp>
f0102adc:	83 c4 10             	add    $0x10,%esp
f0102adf:	85 c0                	test   %eax,%eax
f0102ae1:	74 1d                	je     f0102b00 <command_test_lists+0xd5>
f0102ae3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ae6:	83 c0 04             	add    $0x4,%eax
f0102ae9:	8b 00                	mov    (%eax),%eax
f0102aeb:	83 ec 08             	sub    $0x8,%esp
f0102aee:	68 e3 58 13 f0       	push   $0xf01358e3
f0102af3:	50                   	push   %eax
f0102af4:	e8 7a f0 02 00       	call   f0131b73 <strcmp>
f0102af9:	83 c4 10             	add    $0x10,%esp
f0102afc:	85 c0                	test   %eax,%eax
f0102afe:	75 0a                	jne    f0102b0a <command_test_lists+0xdf>
	{
		test_alloc_block_FF();
f0102b00:	e8 39 cc 00 00       	call   f010f73e <test_alloc_block_FF>
f0102b05:	e9 c4 00 00 00       	jmp    f0102bce <command_test_lists+0x1a3>
	}
	// Test 5 Example for alloc_block_BF: tstlsts BF
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102b0a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b0d:	83 c0 04             	add    $0x4,%eax
f0102b10:	8b 00                	mov    (%eax),%eax
f0102b12:	83 ec 08             	sub    $0x8,%esp
f0102b15:	68 e6 58 13 f0       	push   $0xf01358e6
f0102b1a:	50                   	push   %eax
f0102b1b:	e8 53 f0 02 00       	call   f0131b73 <strcmp>
f0102b20:	83 c4 10             	add    $0x10,%esp
f0102b23:	85 c0                	test   %eax,%eax
f0102b25:	74 1d                	je     f0102b44 <command_test_lists+0x119>
f0102b27:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b2a:	83 c0 04             	add    $0x4,%eax
f0102b2d:	8b 00                	mov    (%eax),%eax
f0102b2f:	83 ec 08             	sub    $0x8,%esp
f0102b32:	68 e9 58 13 f0       	push   $0xf01358e9
f0102b37:	50                   	push   %eax
f0102b38:	e8 36 f0 02 00       	call   f0131b73 <strcmp>
f0102b3d:	83 c4 10             	add    $0x10,%esp
f0102b40:	85 c0                	test   %eax,%eax
f0102b42:	75 0a                	jne    f0102b4e <command_test_lists+0x123>
	{
		test_alloc_block_BF();
f0102b44:	e8 73 d0 00 00       	call   f010fbbc <test_alloc_block_BF>
f0102b49:	e9 80 00 00 00       	jmp    f0102bce <command_test_lists+0x1a3>
	}
	// Test 6 Example for alloc_block_NF: tstlsts NF
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102b4e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b51:	83 c0 04             	add    $0x4,%eax
f0102b54:	8b 00                	mov    (%eax),%eax
f0102b56:	83 ec 08             	sub    $0x8,%esp
f0102b59:	68 ec 58 13 f0       	push   $0xf01358ec
f0102b5e:	50                   	push   %eax
f0102b5f:	e8 0f f0 02 00       	call   f0131b73 <strcmp>
f0102b64:	83 c4 10             	add    $0x10,%esp
f0102b67:	85 c0                	test   %eax,%eax
f0102b69:	74 1d                	je     f0102b88 <command_test_lists+0x15d>
f0102b6b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b6e:	83 c0 04             	add    $0x4,%eax
f0102b71:	8b 00                	mov    (%eax),%eax
f0102b73:	83 ec 08             	sub    $0x8,%esp
f0102b76:	68 ef 58 13 f0       	push   $0xf01358ef
f0102b7b:	50                   	push   %eax
f0102b7c:	e8 f2 ef 02 00       	call   f0131b73 <strcmp>
f0102b81:	83 c4 10             	add    $0x10,%esp
f0102b84:	85 c0                	test   %eax,%eax
f0102b86:	75 07                	jne    f0102b8f <command_test_lists+0x164>
	{
		test_alloc_block_NF();
f0102b88:	e8 b6 d6 00 00       	call   f0110243 <test_alloc_block_NF>
f0102b8d:	eb 3f                	jmp    f0102bce <command_test_lists+0x1a3>
	}
	// Test 7 Example for alloc_block_NF: tstlsts merge
	else if(strcmp(arguments[1], "MERGE") == 0 || strcmp(arguments[1], "merge") == 0)
f0102b8f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b92:	83 c0 04             	add    $0x4,%eax
f0102b95:	8b 00                	mov    (%eax),%eax
f0102b97:	83 ec 08             	sub    $0x8,%esp
f0102b9a:	68 f2 58 13 f0       	push   $0xf01358f2
f0102b9f:	50                   	push   %eax
f0102ba0:	e8 ce ef 02 00       	call   f0131b73 <strcmp>
f0102ba5:	83 c4 10             	add    $0x10,%esp
f0102ba8:	85 c0                	test   %eax,%eax
f0102baa:	74 1d                	je     f0102bc9 <command_test_lists+0x19e>
f0102bac:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102baf:	83 c0 04             	add    $0x4,%eax
f0102bb2:	8b 00                	mov    (%eax),%eax
f0102bb4:	83 ec 08             	sub    $0x8,%esp
f0102bb7:	68 f8 58 13 f0       	push   $0xf01358f8
f0102bbc:	50                   	push   %eax
f0102bbd:	e8 b1 ef 02 00       	call   f0131b73 <strcmp>
f0102bc2:	83 c4 10             	add    $0x10,%esp
f0102bc5:	85 c0                	test   %eax,%eax
f0102bc7:	75 05                	jne    f0102bce <command_test_lists+0x1a3>
	{
		test_insert_sorted_with_merge_freeList();
f0102bc9:	e8 03 df 00 00       	call   f0110ad1 <test_insert_sorted_with_merge_freeList>
	}
	return 0;
f0102bce:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102bd3:	c9                   	leave  
f0102bd4:	c3                   	ret    

f0102bd5 <command_test_chunks>:

int command_test_chunks(int number_of_arguments, char **arguments)
{
f0102bd5:	55                   	push   %ebp
f0102bd6:	89 e5                	mov    %esp,%ebp
f0102bd8:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102bdb:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102bdf:	74 1a                	je     f0102bfb <command_test_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f0102be1:	83 ec 0c             	sub    $0xc,%esp
f0102be4:	68 00 59 13 f0       	push   $0xf0135900
f0102be9:	e8 20 e1 ff ff       	call   f0100d0e <cprintf>
f0102bee:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102bf1:	b8 00 00 00 00       	mov    $0x0,%eax
f0102bf6:	e9 e1 00 00 00       	jmp    f0102cdc <command_test_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f0102bfb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bfe:	83 c0 04             	add    $0x4,%eax
f0102c01:	8b 00                	mov    (%eax),%eax
f0102c03:	83 ec 08             	sub    $0x8,%esp
f0102c06:	68 39 59 13 f0       	push   $0xf0135939
f0102c0b:	50                   	push   %eax
f0102c0c:	e8 62 ef 02 00       	call   f0131b73 <strcmp>
f0102c11:	83 c4 10             	add    $0x10,%esp
f0102c14:	85 c0                	test   %eax,%eax
f0102c16:	75 0a                	jne    f0102c22 <command_test_chunks+0x4d>
	{
		test_cut_paste_pages();
f0102c18:	e8 de f6 00 00       	call   f01122fb <test_cut_paste_pages>
f0102c1d:	e9 b5 00 00 00       	jmp    f0102cd7 <command_test_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f0102c22:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c25:	83 c0 04             	add    $0x4,%eax
f0102c28:	8b 00                	mov    (%eax),%eax
f0102c2a:	83 ec 08             	sub    $0x8,%esp
f0102c2d:	68 42 59 13 f0       	push   $0xf0135942
f0102c32:	50                   	push   %eax
f0102c33:	e8 3b ef 02 00       	call   f0131b73 <strcmp>
f0102c38:	83 c4 10             	add    $0x10,%esp
f0102c3b:	85 c0                	test   %eax,%eax
f0102c3d:	75 0a                	jne    f0102c49 <command_test_chunks+0x74>
	{
		test_copy_paste_chunk();
f0102c3f:	e8 02 01 01 00       	call   f0112d46 <test_copy_paste_chunk>
f0102c44:	e9 8e 00 00 00       	jmp    f0102cd7 <command_test_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f0102c49:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c4c:	83 c0 04             	add    $0x4,%eax
f0102c4f:	8b 00                	mov    (%eax),%eax
f0102c51:	83 ec 08             	sub    $0x8,%esp
f0102c54:	68 4c 59 13 f0       	push   $0xf013594c
f0102c59:	50                   	push   %eax
f0102c5a:	e8 14 ef 02 00       	call   f0131b73 <strcmp>
f0102c5f:	83 c4 10             	add    $0x10,%esp
f0102c62:	85 c0                	test   %eax,%eax
f0102c64:	75 07                	jne    f0102c6d <command_test_chunks+0x98>
	{
		test_share_chunk();
f0102c66:	e8 d9 11 01 00       	call   f0113e44 <test_share_chunk>
f0102c6b:	eb 6a                	jmp    f0102cd7 <command_test_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f0102c6d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c70:	83 c0 04             	add    $0x4,%eax
f0102c73:	8b 00                	mov    (%eax),%eax
f0102c75:	83 ec 08             	sub    $0x8,%esp
f0102c78:	68 52 59 13 f0       	push   $0xf0135952
f0102c7d:	50                   	push   %eax
f0102c7e:	e8 f0 ee 02 00       	call   f0131b73 <strcmp>
f0102c83:	83 c4 10             	add    $0x10,%esp
f0102c86:	85 c0                	test   %eax,%eax
f0102c88:	75 07                	jne    f0102c91 <command_test_chunks+0xbc>
	{
		test_allocate_chunk();
f0102c8a:	e8 dd 1b 01 00       	call   f011486c <test_allocate_chunk>
f0102c8f:	eb 46                	jmp    f0102cd7 <command_test_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f0102c91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c94:	83 c0 04             	add    $0x4,%eax
f0102c97:	8b 00                	mov    (%eax),%eax
f0102c99:	83 ec 08             	sub    $0x8,%esp
f0102c9c:	68 5b 59 13 f0       	push   $0xf013595b
f0102ca1:	50                   	push   %eax
f0102ca2:	e8 cc ee 02 00       	call   f0131b73 <strcmp>
f0102ca7:	83 c4 10             	add    $0x10,%esp
f0102caa:	85 c0                	test   %eax,%eax
f0102cac:	75 07                	jne    f0102cb5 <command_test_chunks+0xe0>
	{
		test_calculate_required_frames();
f0102cae:	e8 68 24 01 00       	call   f011511b <test_calculate_required_frames>
f0102cb3:	eb 22                	jmp    f0102cd7 <command_test_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f0102cb5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cb8:	83 c0 04             	add    $0x4,%eax
f0102cbb:	8b 00                	mov    (%eax),%eax
f0102cbd:	83 ec 08             	sub    $0x8,%esp
f0102cc0:	68 6a 59 13 f0       	push   $0xf013596a
f0102cc5:	50                   	push   %eax
f0102cc6:	e8 a8 ee 02 00       	call   f0131b73 <strcmp>
f0102ccb:	83 c4 10             	add    $0x10,%esp
f0102cce:	85 c0                	test   %eax,%eax
f0102cd0:	75 05                	jne    f0102cd7 <command_test_chunks+0x102>
	{
		test_calculate_allocated_space();
f0102cd2:	e8 b8 2c 01 00       	call   f011598f <test_calculate_allocated_space>
	}
	return 0;
f0102cd7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102cdc:	c9                   	leave  
f0102cdd:	c3                   	ret    

f0102cde <command_test_paging_manipulation>:

int command_test_paging_manipulation(int number_of_arguments, char **arguments)
{
f0102cde:	55                   	push   %ebp
f0102cdf:	89 e5                	mov    %esp,%ebp
f0102ce1:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102ce4:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102ce8:	74 1a                	je     f0102d04 <command_test_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f0102cea:	83 ec 0c             	sub    $0xc,%esp
f0102ced:	68 7c 59 13 f0       	push   $0xf013597c
f0102cf2:	e8 17 e0 ff ff       	call   f0100d0e <cprintf>
f0102cf7:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102cfa:	b8 00 00 00 00       	mov    $0x0,%eax
f0102cff:	e9 e1 00 00 00       	jmp    f0102de5 <command_test_paging_manipulation+0x107>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f0102d04:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d07:	83 c0 04             	add    $0x4,%eax
f0102d0a:	8b 00                	mov    (%eax),%eax
f0102d0c:	83 ec 08             	sub    $0x8,%esp
f0102d0f:	68 b2 59 13 f0       	push   $0xf01359b2
f0102d14:	50                   	push   %eax
f0102d15:	e8 59 ee 02 00       	call   f0131b73 <strcmp>
f0102d1a:	83 c4 10             	add    $0x10,%esp
f0102d1d:	85 c0                	test   %eax,%eax
f0102d1f:	75 0a                	jne    f0102d2b <command_test_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f0102d21:	e8 c6 ec 00 00       	call   f01119ec <test_pt_set_page_permissions>
f0102d26:	e9 b5 00 00 00       	jmp    f0102de0 <command_test_paging_manipulation+0x102>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f0102d2b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d2e:	83 c0 04             	add    $0x4,%eax
f0102d31:	8b 00                	mov    (%eax),%eax
f0102d33:	83 ec 08             	sub    $0x8,%esp
f0102d36:	68 ba 59 13 f0       	push   $0xf01359ba
f0102d3b:	50                   	push   %eax
f0102d3c:	e8 32 ee 02 00       	call   f0131b73 <strcmp>
f0102d41:	83 c4 10             	add    $0x10,%esp
f0102d44:	85 c0                	test   %eax,%eax
f0102d46:	75 0a                	jne    f0102d52 <command_test_paging_manipulation+0x74>
	{
		test_pt_set_page_permissions_invalid_va();
f0102d48:	e8 02 ef 00 00       	call   f0111c4f <test_pt_set_page_permissions_invalid_va>
f0102d4d:	e9 8e 00 00 00       	jmp    f0102de0 <command_test_paging_manipulation+0x102>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f0102d52:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d55:	83 c0 04             	add    $0x4,%eax
f0102d58:	8b 00                	mov    (%eax),%eax
f0102d5a:	83 ec 08             	sub    $0x8,%esp
f0102d5d:	68 c2 59 13 f0       	push   $0xf01359c2
f0102d62:	50                   	push   %eax
f0102d63:	e8 0b ee 02 00       	call   f0131b73 <strcmp>
f0102d68:	83 c4 10             	add    $0x10,%esp
f0102d6b:	85 c0                	test   %eax,%eax
f0102d6d:	75 07                	jne    f0102d76 <command_test_paging_manipulation+0x98>
	{
		test_pt_get_page_permissions();
f0102d6f:	e8 24 ef 00 00       	call   f0111c98 <test_pt_get_page_permissions>
f0102d74:	eb 6a                	jmp    f0102de0 <command_test_paging_manipulation+0x102>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f0102d76:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d79:	83 c0 04             	add    $0x4,%eax
f0102d7c:	8b 00                	mov    (%eax),%eax
f0102d7e:	83 ec 08             	sub    $0x8,%esp
f0102d81:	68 ca 59 13 f0       	push   $0xf01359ca
f0102d86:	50                   	push   %eax
f0102d87:	e8 e7 ed 02 00       	call   f0131b73 <strcmp>
f0102d8c:	83 c4 10             	add    $0x10,%esp
f0102d8f:	85 c0                	test   %eax,%eax
f0102d91:	75 07                	jne    f0102d9a <command_test_paging_manipulation+0xbc>
	{
		test_pt_clear_page_table_entry();
f0102d93:	e8 44 f0 00 00       	call   f0111ddc <test_pt_clear_page_table_entry>
f0102d98:	eb 46                	jmp    f0102de0 <command_test_paging_manipulation+0x102>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f0102d9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d9d:	83 c0 04             	add    $0x4,%eax
f0102da0:	8b 00                	mov    (%eax),%eax
f0102da2:	83 ec 08             	sub    $0x8,%esp
f0102da5:	68 d1 59 13 f0       	push   $0xf01359d1
f0102daa:	50                   	push   %eax
f0102dab:	e8 c3 ed 02 00       	call   f0131b73 <strcmp>
f0102db0:	83 c4 10             	add    $0x10,%esp
f0102db3:	85 c0                	test   %eax,%eax
f0102db5:	75 07                	jne    f0102dbe <command_test_paging_manipulation+0xe0>
	{
		test_pt_clear_page_table_entry_invalid_va();
f0102db7:	e8 79 f1 00 00       	call   f0111f35 <test_pt_clear_page_table_entry_invalid_va>
f0102dbc:	eb 22                	jmp    f0102de0 <command_test_paging_manipulation+0x102>
	}
	// Test 4-Convert virtual to physical: tstpg v2p
	else if(strcmp(arguments[1], "v2p") == 0)
f0102dbe:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102dc1:	83 c0 04             	add    $0x4,%eax
f0102dc4:	8b 00                	mov    (%eax),%eax
f0102dc6:	83 ec 08             	sub    $0x8,%esp
f0102dc9:	68 d8 59 13 f0       	push   $0xf01359d8
f0102dce:	50                   	push   %eax
f0102dcf:	e8 9f ed 02 00       	call   f0131b73 <strcmp>
f0102dd4:	83 c4 10             	add    $0x10,%esp
f0102dd7:	85 c0                	test   %eax,%eax
f0102dd9:	75 05                	jne    f0102de0 <command_test_paging_manipulation+0x102>
	{
		test_virtual_to_physical();
f0102ddb:	e8 8d f1 00 00       	call   f0111f6d <test_virtual_to_physical>
	}
	return 0;
f0102de0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102de5:	c9                   	leave  
f0102de6:	c3                   	ret    

f0102de7 <command_test_kheap>:

int command_test_kheap(int number_of_arguments, char **arguments)
{
f0102de7:	55                   	push   %ebp
f0102de8:	89 e5                	mov    %esp,%ebp
f0102dea:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f0102ded:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102df0:	83 c0 08             	add    $0x8,%eax
f0102df3:	8b 00                	mov    (%eax),%eax
f0102df5:	83 ec 08             	sub    $0x8,%esp
f0102df8:	68 dc 59 13 f0       	push   $0xf01359dc
f0102dfd:	50                   	push   %eax
f0102dfe:	e8 70 ed 02 00       	call   f0131b73 <strcmp>
f0102e03:	83 c4 10             	add    $0x10,%esp
f0102e06:	85 c0                	test   %eax,%eax
f0102e08:	75 20                	jne    f0102e2a <command_test_kheap+0x43>
f0102e0a:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102e0e:	74 1a                	je     f0102e2a <command_test_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f0102e10:	83 ec 0c             	sub    $0xc,%esp
f0102e13:	68 e4 59 13 f0       	push   $0xf01359e4
f0102e18:	e8 f1 de ff ff       	call   f0100d0e <cprintf>
f0102e1d:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e20:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e25:	e9 33 03 00 00       	jmp    f010315d <command_test_kheap+0x376>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f0102e2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e2d:	83 c0 08             	add    $0x8,%eax
f0102e30:	8b 00                	mov    (%eax),%eax
f0102e32:	83 ec 08             	sub    $0x8,%esp
f0102e35:	68 dc 59 13 f0       	push   $0xf01359dc
f0102e3a:	50                   	push   %eax
f0102e3b:	e8 33 ed 02 00       	call   f0131b73 <strcmp>
f0102e40:	83 c4 10             	add    $0x10,%esp
f0102e43:	85 c0                	test   %eax,%eax
f0102e45:	74 20                	je     f0102e67 <command_test_kheap+0x80>
f0102e47:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102e4b:	74 1a                	je     f0102e67 <command_test_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> <testname>\n") ;
f0102e4d:	83 ec 0c             	sub    $0xc,%esp
f0102e50:	68 34 5a 13 f0       	push   $0xf0135a34
f0102e55:	e8 b4 de ff ff       	call   f0100d0e <cprintf>
f0102e5a:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e5d:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e62:	e9 f6 02 00 00       	jmp    f010315d <command_test_kheap+0x376>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102e67:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e6a:	83 c0 04             	add    $0x4,%eax
f0102e6d:	8b 00                	mov    (%eax),%eax
f0102e6f:	83 ec 08             	sub    $0x8,%esp
f0102e72:	68 e0 58 13 f0       	push   $0xf01358e0
f0102e77:	50                   	push   %eax
f0102e78:	e8 f6 ec 02 00       	call   f0131b73 <strcmp>
f0102e7d:	83 c4 10             	add    $0x10,%esp
f0102e80:	85 c0                	test   %eax,%eax
f0102e82:	74 1d                	je     f0102ea1 <command_test_kheap+0xba>
f0102e84:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e87:	83 c0 04             	add    $0x4,%eax
f0102e8a:	8b 00                	mov    (%eax),%eax
f0102e8c:	83 ec 08             	sub    $0x8,%esp
f0102e8f:	68 e3 58 13 f0       	push   $0xf01358e3
f0102e94:	50                   	push   %eax
f0102e95:	e8 d9 ec 02 00       	call   f0131b73 <strcmp>
f0102e9a:	83 c4 10             	add    $0x10,%esp
f0102e9d:	85 c0                	test   %eax,%eax
f0102e9f:	75 1a                	jne    f0102ebb <command_test_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f0102ea1:	e8 60 e0 ff ff       	call   f0100f06 <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102ea6:	83 ec 0c             	sub    $0xc,%esp
f0102ea9:	68 7c 54 13 f0       	push   $0xf013547c
f0102eae:	e8 5b de ff ff       	call   f0100d0e <cprintf>
f0102eb3:	83 c4 10             	add    $0x10,%esp
f0102eb6:	e9 a0 00 00 00       	jmp    f0102f5b <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102ebb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ebe:	83 c0 04             	add    $0x4,%eax
f0102ec1:	8b 00                	mov    (%eax),%eax
f0102ec3:	83 ec 08             	sub    $0x8,%esp
f0102ec6:	68 e6 58 13 f0       	push   $0xf01358e6
f0102ecb:	50                   	push   %eax
f0102ecc:	e8 a2 ec 02 00       	call   f0131b73 <strcmp>
f0102ed1:	83 c4 10             	add    $0x10,%esp
f0102ed4:	85 c0                	test   %eax,%eax
f0102ed6:	74 1d                	je     f0102ef5 <command_test_kheap+0x10e>
f0102ed8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102edb:	83 c0 04             	add    $0x4,%eax
f0102ede:	8b 00                	mov    (%eax),%eax
f0102ee0:	83 ec 08             	sub    $0x8,%esp
f0102ee3:	68 e9 58 13 f0       	push   $0xf01358e9
f0102ee8:	50                   	push   %eax
f0102ee9:	e8 85 ec 02 00       	call   f0131b73 <strcmp>
f0102eee:	83 c4 10             	add    $0x10,%esp
f0102ef1:	85 c0                	test   %eax,%eax
f0102ef3:	75 17                	jne    f0102f0c <command_test_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f0102ef5:	e8 1c e0 ff ff       	call   f0100f16 <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102efa:	83 ec 0c             	sub    $0xc,%esp
f0102efd:	68 ac 54 13 f0       	push   $0xf01354ac
f0102f02:	e8 07 de ff ff       	call   f0100d0e <cprintf>
f0102f07:	83 c4 10             	add    $0x10,%esp
f0102f0a:	eb 4f                	jmp    f0102f5b <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102f0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f0f:	83 c0 04             	add    $0x4,%eax
f0102f12:	8b 00                	mov    (%eax),%eax
f0102f14:	83 ec 08             	sub    $0x8,%esp
f0102f17:	68 ec 58 13 f0       	push   $0xf01358ec
f0102f1c:	50                   	push   %eax
f0102f1d:	e8 51 ec 02 00       	call   f0131b73 <strcmp>
f0102f22:	83 c4 10             	add    $0x10,%esp
f0102f25:	85 c0                	test   %eax,%eax
f0102f27:	74 1d                	je     f0102f46 <command_test_kheap+0x15f>
f0102f29:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f2c:	83 c0 04             	add    $0x4,%eax
f0102f2f:	8b 00                	mov    (%eax),%eax
f0102f31:	83 ec 08             	sub    $0x8,%esp
f0102f34:	68 ef 58 13 f0       	push   $0xf01358ef
f0102f39:	50                   	push   %eax
f0102f3a:	e8 34 ec 02 00       	call   f0131b73 <strcmp>
f0102f3f:	83 c4 10             	add    $0x10,%esp
f0102f42:	85 c0                	test   %eax,%eax
f0102f44:	75 15                	jne    f0102f5b <command_test_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f0102f46:	e8 db df ff ff       	call   f0100f26 <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0102f4b:	83 ec 0c             	sub    $0xc,%esp
f0102f4e:	68 d8 54 13 f0       	push   $0xf01354d8
f0102f53:	e8 b6 dd ff ff       	call   f0100d0e <cprintf>
f0102f58:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f0102f5b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f5e:	83 c0 08             	add    $0x8,%eax
f0102f61:	8b 00                	mov    (%eax),%eax
f0102f63:	83 ec 08             	sub    $0x8,%esp
f0102f66:	68 dc 59 13 f0       	push   $0xf01359dc
f0102f6b:	50                   	push   %eax
f0102f6c:	e8 02 ec 02 00       	call   f0131b73 <strcmp>
f0102f71:	83 c4 10             	add    $0x10,%esp
f0102f74:	85 c0                	test   %eax,%eax
f0102f76:	0f 85 13 01 00 00    	jne    f010308f <command_test_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f0102f7c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f7f:	83 c0 0c             	add    $0xc,%eax
f0102f82:	8b 00                	mov    (%eax),%eax
f0102f84:	83 ec 04             	sub    $0x4,%esp
f0102f87:	6a 0a                	push   $0xa
f0102f89:	6a 00                	push   $0x0
f0102f8b:	50                   	push   %eax
f0102f8c:	e8 36 ee 02 00       	call   f0131dc7 <strtol>
f0102f91:	83 c4 10             	add    $0x10,%esp
f0102f94:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f0102f97:	e8 be df ff ff       	call   f0100f5a <isKHeapPlacementStrategyFIRSTFIT>
f0102f9c:	84 c0                	test   %al,%al
f0102f9e:	74 54                	je     f0102ff4 <command_test_kheap+0x20d>
		{
			if (testNum == 0)
f0102fa0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102fa4:	75 1a                	jne    f0102fc0 <command_test_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102fa6:	83 ec 0c             	sub    $0xc,%esp
f0102fa9:	68 50 57 13 f0       	push   $0xf0135750
f0102fae:	e8 5b dd ff ff       	call   f0100d0e <cprintf>
f0102fb3:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102fb6:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fbb:	e9 9d 01 00 00       	jmp    f010315d <command_test_kheap+0x376>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f0102fc0:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102fc4:	75 0a                	jne    f0102fd0 <command_test_kheap+0x1e9>
				test_kmalloc();
f0102fc6:	e8 8b 4f 01 00       	call   f0117f56 <test_kmalloc>
f0102fcb:	e9 b5 00 00 00       	jmp    f0103085 <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102fd0:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102fd4:	75 0a                	jne    f0102fe0 <command_test_kheap+0x1f9>
				test_kmalloc_firstfit1();
f0102fd6:	e8 04 9e 01 00       	call   f011cddf <test_kmalloc_firstfit1>
f0102fdb:	e9 a5 00 00 00       	jmp    f0103085 <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102fe0:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102fe4:	0f 85 9b 00 00 00    	jne    f0103085 <command_test_kheap+0x29e>
				test_kmalloc_firstfit2();
f0102fea:	e8 92 b1 01 00       	call   f011e181 <test_kmalloc_firstfit2>
f0102fef:	e9 91 00 00 00       	jmp    f0103085 <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f0102ff4:	e8 76 df ff ff       	call   f0100f6f <isKHeapPlacementStrategyBESTFIT>
f0102ff9:	84 c0                	test   %al,%al
f0102ffb:	74 47                	je     f0103044 <command_test_kheap+0x25d>
		{
			if (testNum == 0)
f0102ffd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103001:	75 1a                	jne    f010301d <command_test_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0103003:	83 ec 0c             	sub    $0xc,%esp
f0103006:	68 a0 57 13 f0       	push   $0xf01357a0
f010300b:	e8 fe dc ff ff       	call   f0100d0e <cprintf>
f0103010:	83 c4 10             	add    $0x10,%esp
				return 0;
f0103013:	b8 00 00 00 00       	mov    $0x0,%eax
f0103018:	e9 40 01 00 00       	jmp    f010315d <command_test_kheap+0x376>
			}
			if (testNum == 1)
f010301d:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103021:	75 07                	jne    f010302a <command_test_kheap+0x243>
				test_kmalloc();
f0103023:	e8 2e 4f 01 00       	call   f0117f56 <test_kmalloc>
f0103028:	eb 5b                	jmp    f0103085 <command_test_kheap+0x29e>
			else if (testNum == 2)
f010302a:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010302e:	75 07                	jne    f0103037 <command_test_kheap+0x250>
				test_kmalloc_bestfit1();
f0103030:	e8 74 78 01 00       	call   f011a8a9 <test_kmalloc_bestfit1>
f0103035:	eb 4e                	jmp    f0103085 <command_test_kheap+0x29e>
			else if (testNum == 3)
f0103037:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010303b:	75 48                	jne    f0103085 <command_test_kheap+0x29e>
				test_kmalloc_bestfit2();
f010303d:	e8 bd 8a 01 00       	call   f011baff <test_kmalloc_bestfit2>
f0103042:	eb 41                	jmp    f0103085 <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f0103044:	e8 3b df ff ff       	call   f0100f84 <isKHeapPlacementStrategyNEXTFIT>
f0103049:	84 c0                	test   %al,%al
f010304b:	74 38                	je     f0103085 <command_test_kheap+0x29e>
		{
			if (testNum == 0)
f010304d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103051:	75 1a                	jne    f010306d <command_test_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0103053:	83 ec 0c             	sub    $0xc,%esp
f0103056:	68 f0 57 13 f0       	push   $0xf01357f0
f010305b:	e8 ae dc ff ff       	call   f0100d0e <cprintf>
f0103060:	83 c4 10             	add    $0x10,%esp
				return 0;
f0103063:	b8 00 00 00 00       	mov    $0x0,%eax
f0103068:	e9 f0 00 00 00       	jmp    f010315d <command_test_kheap+0x376>
			}
			//Test cont. allocation
			if (testNum == 1)
f010306d:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103071:	75 07                	jne    f010307a <command_test_kheap+0x293>
				test_kmalloc();
f0103073:	e8 de 4e 01 00       	call   f0117f56 <test_kmalloc>
f0103078:	eb 0b                	jmp    f0103085 <command_test_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f010307a:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010307e:	75 05                	jne    f0103085 <command_test_kheap+0x29e>
				test_kmalloc_nextfit();
f0103080:	e8 2f 61 01 00       	call   f01191b4 <test_kmalloc_nextfit>
		}
		return 0;
f0103085:	b8 00 00 00 00       	mov    $0x0,%eax
f010308a:	e9 ce 00 00 00       	jmp    f010315d <command_test_kheap+0x376>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f010308f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103092:	83 c0 08             	add    $0x8,%eax
f0103095:	8b 00                	mov    (%eax),%eax
f0103097:	83 ec 08             	sub    $0x8,%esp
f010309a:	68 78 5a 13 f0       	push   $0xf0135a78
f010309f:	50                   	push   %eax
f01030a0:	e8 ce ea 02 00       	call   f0131b73 <strcmp>
f01030a5:	83 c4 10             	add    $0x10,%esp
f01030a8:	85 c0                	test   %eax,%eax
f01030aa:	75 28                	jne    f01030d4 <command_test_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f01030ac:	e8 be de ff ff       	call   f0100f6f <isKHeapPlacementStrategyBESTFIT>
f01030b1:	84 c0                	test   %al,%al
f01030b3:	75 09                	jne    f01030be <command_test_kheap+0x2d7>
f01030b5:	e8 a0 de ff ff       	call   f0100f5a <isKHeapPlacementStrategyFIRSTFIT>
f01030ba:	84 c0                	test   %al,%al
f01030bc:	74 07                	je     f01030c5 <command_test_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f01030be:	e8 f5 f6 01 00       	call   f01227b8 <test_kfree_bestfirstfit>
f01030c3:	eb 05                	jmp    f01030ca <command_test_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f01030c5:	e8 9c d5 01 00       	call   f0120666 <test_kfree>
		}
		return 0;
f01030ca:	b8 00 00 00 00       	mov    $0x0,%eax
f01030cf:	e9 89 00 00 00       	jmp    f010315d <command_test_kheap+0x376>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f01030d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030d7:	83 c0 08             	add    $0x8,%eax
f01030da:	8b 00                	mov    (%eax),%eax
f01030dc:	83 ec 08             	sub    $0x8,%esp
f01030df:	68 7e 5a 13 f0       	push   $0xf0135a7e
f01030e4:	50                   	push   %eax
f01030e5:	e8 89 ea 02 00       	call   f0131b73 <strcmp>
f01030ea:	83 c4 10             	add    $0x10,%esp
f01030ed:	85 c0                	test   %eax,%eax
f01030ef:	75 0c                	jne    f01030fd <command_test_kheap+0x316>
	{
		test_kheap_phys_addr();
f01030f1:	e8 be 10 02 00       	call   f01241b4 <test_kheap_phys_addr>
		return 0;
f01030f6:	b8 00 00 00 00       	mov    $0x0,%eax
f01030fb:	eb 60                	jmp    f010315d <command_test_kheap+0x376>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f01030fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103100:	83 c0 08             	add    $0x8,%eax
f0103103:	8b 00                	mov    (%eax),%eax
f0103105:	83 ec 08             	sub    $0x8,%esp
f0103108:	68 88 5a 13 f0       	push   $0xf0135a88
f010310d:	50                   	push   %eax
f010310e:	e8 60 ea 02 00       	call   f0131b73 <strcmp>
f0103113:	83 c4 10             	add    $0x10,%esp
f0103116:	85 c0                	test   %eax,%eax
f0103118:	75 0c                	jne    f0103126 <command_test_kheap+0x33f>
	{
		test_kheap_virt_addr();
f010311a:	e8 65 25 02 00       	call   f0125684 <test_kheap_virt_addr>
		return 0;
f010311f:	b8 00 00 00 00       	mov    $0x0,%eax
f0103124:	eb 37                	jmp    f010315d <command_test_kheap+0x376>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f0103126:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103129:	83 c0 08             	add    $0x8,%eax
f010312c:	8b 00                	mov    (%eax),%eax
f010312e:	83 ec 08             	sub    $0x8,%esp
f0103131:	68 92 5a 13 f0       	push   $0xf0135a92
f0103136:	50                   	push   %eax
f0103137:	e8 37 ea 02 00       	call   f0131b73 <strcmp>
f010313c:	83 c4 10             	add    $0x10,%esp
f010313f:	85 c0                	test   %eax,%eax
f0103141:	75 15                	jne    f0103158 <command_test_kheap+0x371>
	{
		if (isKHeapPlacementStrategyBESTFIT())
f0103143:	e8 27 de ff ff       	call   f0100f6f <isKHeapPlacementStrategyBESTFIT>
f0103148:	84 c0                	test   %al,%al
f010314a:	74 05                	je     f0103151 <command_test_kheap+0x36a>
		{
			test_krealloc_BF();
f010314c:	e8 d7 b3 02 00       	call   f012e528 <test_krealloc_BF>
		}
		return 0;
f0103151:	b8 00 00 00 00       	mov    $0x0,%eax
f0103156:	eb 05                	jmp    f010315d <command_test_kheap+0x376>
	}
	return 0;
f0103158:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010315d:	c9                   	leave  
f010315e:	c3                   	ret    

f010315f <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f010315f:	55                   	push   %ebp
f0103160:	89 e5                	mov    %esp,%ebp
f0103162:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103165:	8b 45 08             	mov    0x8(%ebp),%eax
f0103168:	05 00 14 00 00       	add    $0x1400,%eax
f010316d:	c1 e0 03             	shl    $0x3,%eax
f0103170:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103173:	83 ec 04             	sub    $0x4,%esp
f0103176:	6a 08                	push   $0x8
f0103178:	ff 75 0c             	pushl  0xc(%ebp)
f010317b:	ff 75 f4             	pushl  -0xc(%ebp)
f010317e:	e8 37 f0 02 00       	call   f01321ba <ide_read>
f0103183:	83 c4 10             	add    $0x10,%esp
f0103186:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f0103189:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010318c:	c9                   	leave  
f010318d:	c3                   	ret    

f010318e <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f010318e:	55                   	push   %ebp
f010318f:	89 e5                	mov    %esp,%ebp
f0103191:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103194:	8b 45 08             	mov    0x8(%ebp),%eax
f0103197:	05 00 14 00 00       	add    $0x1400,%eax
f010319c:	c1 e0 03             	shl    $0x3,%eax
f010319f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f01031a2:	83 ec 04             	sub    $0x4,%esp
f01031a5:	6a 08                	push   $0x8
f01031a7:	ff 75 0c             	pushl  0xc(%ebp)
f01031aa:	ff 75 f4             	pushl  -0xc(%ebp)
f01031ad:	e8 48 f1 02 00       	call   f01322fa <ide_write>
f01031b2:	83 c4 10             	add    $0x10,%esp
f01031b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f01031b8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01031bc:	74 14                	je     f01031d2 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f01031be:	83 ec 04             	sub    $0x4,%esp
f01031c1:	68 9c 5a 13 f0       	push   $0xf0135a9c
f01031c6:	6a 2e                	push   $0x2e
f01031c8:	68 b3 5a 13 f0       	push   $0xf0135ab3
f01031cd:	e8 33 d0 ff ff       	call   f0100205 <_panic>
	return success;
f01031d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01031d5:	c9                   	leave  
f01031d6:	c3                   	ret    

f01031d7 <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f01031d7:	55                   	push   %ebp
f01031d8:	89 e5                	mov    %esp,%ebp
f01031da:	53                   	push   %ebx
f01031db:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f01031de:	c7 05 34 b9 85 f0 00 	movl   $0x0,0xf085b934
f01031e5:	00 00 00 
f01031e8:	c7 05 38 b9 85 f0 00 	movl   $0x0,0xf085b938
f01031ef:	00 00 00 
f01031f2:	c7 05 40 b9 85 f0 00 	movl   $0x0,0xf085b940
f01031f9:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01031fc:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f0103203:	e9 e8 00 00 00       	jmp    f01032f0 <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f0103208:	8b 0d 58 b8 85 f0    	mov    0xf085b858,%ecx
f010320e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103211:	89 d0                	mov    %edx,%eax
f0103213:	01 c0                	add    %eax,%eax
f0103215:	01 d0                	add    %edx,%eax
f0103217:	c1 e0 03             	shl    $0x3,%eax
f010321a:	01 c8                	add    %ecx,%eax
f010321c:	83 ec 0c             	sub    $0xc,%esp
f010321f:	50                   	push   %eax
f0103220:	e8 cd 36 00 00       	call   f01068f2 <initialize_frame_info>
f0103225:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f0103228:	8b 0d 58 b8 85 f0    	mov    0xf085b858,%ecx
f010322e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103231:	89 d0                	mov    %edx,%eax
f0103233:	01 c0                	add    %eax,%eax
f0103235:	01 d0                	add    %edx,%eax
f0103237:	c1 e0 03             	shl    $0x3,%eax
f010323a:	01 c8                	add    %ecx,%eax
f010323c:	85 c0                	test   %eax,%eax
f010323e:	75 14                	jne    f0103254 <initialize_disk_page_file+0x7d>
f0103240:	83 ec 04             	sub    $0x4,%esp
f0103243:	68 d0 5a 13 f0       	push   $0xf0135ad0
f0103248:	6a 59                	push   $0x59
f010324a:	68 b3 5a 13 f0       	push   $0xf0135ab3
f010324f:	e8 b1 cf ff ff       	call   f0100205 <_panic>
f0103254:	8b 0d 58 b8 85 f0    	mov    0xf085b858,%ecx
f010325a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010325d:	89 d0                	mov    %edx,%eax
f010325f:	01 c0                	add    %eax,%eax
f0103261:	01 d0                	add    %edx,%eax
f0103263:	c1 e0 03             	shl    $0x3,%eax
f0103266:	01 c8                	add    %ecx,%eax
f0103268:	8b 15 34 b9 85 f0    	mov    0xf085b934,%edx
f010326e:	89 10                	mov    %edx,(%eax)
f0103270:	8b 00                	mov    (%eax),%eax
f0103272:	85 c0                	test   %eax,%eax
f0103274:	74 1f                	je     f0103295 <initialize_disk_page_file+0xbe>
f0103276:	8b 15 34 b9 85 f0    	mov    0xf085b934,%edx
f010327c:	8b 1d 58 b8 85 f0    	mov    0xf085b858,%ebx
f0103282:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0103285:	89 c8                	mov    %ecx,%eax
f0103287:	01 c0                	add    %eax,%eax
f0103289:	01 c8                	add    %ecx,%eax
f010328b:	c1 e0 03             	shl    $0x3,%eax
f010328e:	01 d8                	add    %ebx,%eax
f0103290:	89 42 04             	mov    %eax,0x4(%edx)
f0103293:	eb 19                	jmp    f01032ae <initialize_disk_page_file+0xd7>
f0103295:	8b 0d 58 b8 85 f0    	mov    0xf085b858,%ecx
f010329b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010329e:	89 d0                	mov    %edx,%eax
f01032a0:	01 c0                	add    %eax,%eax
f01032a2:	01 d0                	add    %edx,%eax
f01032a4:	c1 e0 03             	shl    $0x3,%eax
f01032a7:	01 c8                	add    %ecx,%eax
f01032a9:	a3 38 b9 85 f0       	mov    %eax,0xf085b938
f01032ae:	8b 0d 58 b8 85 f0    	mov    0xf085b858,%ecx
f01032b4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01032b7:	89 d0                	mov    %edx,%eax
f01032b9:	01 c0                	add    %eax,%eax
f01032bb:	01 d0                	add    %edx,%eax
f01032bd:	c1 e0 03             	shl    $0x3,%eax
f01032c0:	01 c8                	add    %ecx,%eax
f01032c2:	a3 34 b9 85 f0       	mov    %eax,0xf085b934
f01032c7:	8b 0d 58 b8 85 f0    	mov    0xf085b858,%ecx
f01032cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01032d0:	89 d0                	mov    %edx,%eax
f01032d2:	01 c0                	add    %eax,%eax
f01032d4:	01 d0                	add    %edx,%eax
f01032d6:	c1 e0 03             	shl    $0x3,%eax
f01032d9:	01 c8                	add    %ecx,%eax
f01032db:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01032e2:	a1 40 b9 85 f0       	mov    0xf085b940,%eax
f01032e7:	40                   	inc    %eax
f01032e8:	a3 40 b9 85 f0       	mov    %eax,0xf085b940
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01032ed:	ff 45 f4             	incl   -0xc(%ebp)
f01032f0:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f01032f7:	0f 8e 0b ff ff ff    	jle    f0103208 <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f01032fd:	90                   	nop
f01032fe:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0103301:	c9                   	leave  
f0103302:	c3                   	ret    

f0103303 <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f0103303:	55                   	push   %ebp
f0103304:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f0103306:	8b 45 08             	mov    0x8(%ebp),%eax
f0103309:	8b 15 58 b8 85 f0    	mov    0xf085b858,%edx
f010330f:	29 d0                	sub    %edx,%eax
f0103311:	c1 f8 03             	sar    $0x3,%eax
f0103314:	89 c2                	mov    %eax,%edx
f0103316:	89 d0                	mov    %edx,%eax
f0103318:	c1 e0 02             	shl    $0x2,%eax
f010331b:	01 d0                	add    %edx,%eax
f010331d:	c1 e0 02             	shl    $0x2,%eax
f0103320:	01 d0                	add    %edx,%eax
f0103322:	c1 e0 02             	shl    $0x2,%eax
f0103325:	01 d0                	add    %edx,%eax
f0103327:	89 c1                	mov    %eax,%ecx
f0103329:	c1 e1 08             	shl    $0x8,%ecx
f010332c:	01 c8                	add    %ecx,%eax
f010332e:	89 c1                	mov    %eax,%ecx
f0103330:	c1 e1 10             	shl    $0x10,%ecx
f0103333:	01 c8                	add    %ecx,%eax
f0103335:	01 c0                	add    %eax,%eax
f0103337:	01 d0                	add    %edx,%eax
}
f0103339:	5d                   	pop    %ebp
f010333a:	c3                   	ret    

f010333b <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f010333b:	55                   	push   %ebp
f010333c:	89 e5                	mov    %esp,%ebp
f010333e:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f0103341:	a1 34 b9 85 f0       	mov    0xf085b934,%eax
f0103346:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f0103349:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010334d:	75 0a                	jne    f0103359 <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f010334f:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103354:	e9 a7 00 00 00       	jmp    f0103400 <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f0103359:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010335d:	75 14                	jne    f0103373 <allocate_disk_frame+0x38>
f010335f:	83 ec 04             	sub    $0x4,%esp
f0103362:	68 f3 5a 13 f0       	push   $0xf0135af3
f0103367:	6a 78                	push   $0x78
f0103369:	68 b3 5a 13 f0       	push   $0xf0135ab3
f010336e:	e8 92 ce ff ff       	call   f0100205 <_panic>
f0103373:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103376:	8b 00                	mov    (%eax),%eax
f0103378:	85 c0                	test   %eax,%eax
f010337a:	74 10                	je     f010338c <allocate_disk_frame+0x51>
f010337c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010337f:	8b 00                	mov    (%eax),%eax
f0103381:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103384:	8b 52 04             	mov    0x4(%edx),%edx
f0103387:	89 50 04             	mov    %edx,0x4(%eax)
f010338a:	eb 0b                	jmp    f0103397 <allocate_disk_frame+0x5c>
f010338c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010338f:	8b 40 04             	mov    0x4(%eax),%eax
f0103392:	a3 38 b9 85 f0       	mov    %eax,0xf085b938
f0103397:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010339a:	8b 40 04             	mov    0x4(%eax),%eax
f010339d:	85 c0                	test   %eax,%eax
f010339f:	74 0f                	je     f01033b0 <allocate_disk_frame+0x75>
f01033a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033a4:	8b 40 04             	mov    0x4(%eax),%eax
f01033a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01033aa:	8b 12                	mov    (%edx),%edx
f01033ac:	89 10                	mov    %edx,(%eax)
f01033ae:	eb 0a                	jmp    f01033ba <allocate_disk_frame+0x7f>
f01033b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033b3:	8b 00                	mov    (%eax),%eax
f01033b5:	a3 34 b9 85 f0       	mov    %eax,0xf085b934
f01033ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033bd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01033c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033c6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01033cd:	a1 40 b9 85 f0       	mov    0xf085b940,%eax
f01033d2:	48                   	dec    %eax
f01033d3:	a3 40 b9 85 f0       	mov    %eax,0xf085b940
	initialize_frame_info(ptr_frame_info);
f01033d8:	83 ec 0c             	sub    $0xc,%esp
f01033db:	ff 75 f4             	pushl  -0xc(%ebp)
f01033de:	e8 0f 35 00 00       	call   f01068f2 <initialize_frame_info>
f01033e3:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f01033e6:	83 ec 0c             	sub    $0xc,%esp
f01033e9:	ff 75 f4             	pushl  -0xc(%ebp)
f01033ec:	e8 12 ff ff ff       	call   f0103303 <to_disk_frame_number>
f01033f1:	83 c4 10             	add    $0x10,%esp
f01033f4:	89 c2                	mov    %eax,%edx
f01033f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01033f9:	89 10                	mov    %edx,(%eax)
	return 0;
f01033fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103400:	c9                   	leave  
f0103401:	c3                   	ret    

f0103402 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f0103402:	55                   	push   %ebp
f0103403:	89 e5                	mov    %esp,%ebp
f0103405:	53                   	push   %ebx
f0103406:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f0103409:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010340d:	0f 84 ca 00 00 00    	je     f01034dd <free_disk_frame+0xdb>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f0103413:	8b 0d 58 b8 85 f0    	mov    0xf085b858,%ecx
f0103419:	8b 55 08             	mov    0x8(%ebp),%edx
f010341c:	89 d0                	mov    %edx,%eax
f010341e:	01 c0                	add    %eax,%eax
f0103420:	01 d0                	add    %edx,%eax
f0103422:	c1 e0 03             	shl    $0x3,%eax
f0103425:	01 c8                	add    %ecx,%eax
f0103427:	85 c0                	test   %eax,%eax
f0103429:	75 17                	jne    f0103442 <free_disk_frame+0x40>
f010342b:	83 ec 04             	sub    $0x4,%esp
f010342e:	68 d0 5a 13 f0       	push   $0xf0135ad0
f0103433:	68 85 00 00 00       	push   $0x85
f0103438:	68 b3 5a 13 f0       	push   $0xf0135ab3
f010343d:	e8 c3 cd ff ff       	call   f0100205 <_panic>
f0103442:	8b 0d 58 b8 85 f0    	mov    0xf085b858,%ecx
f0103448:	8b 55 08             	mov    0x8(%ebp),%edx
f010344b:	89 d0                	mov    %edx,%eax
f010344d:	01 c0                	add    %eax,%eax
f010344f:	01 d0                	add    %edx,%eax
f0103451:	c1 e0 03             	shl    $0x3,%eax
f0103454:	01 c8                	add    %ecx,%eax
f0103456:	8b 15 34 b9 85 f0    	mov    0xf085b934,%edx
f010345c:	89 10                	mov    %edx,(%eax)
f010345e:	8b 00                	mov    (%eax),%eax
f0103460:	85 c0                	test   %eax,%eax
f0103462:	74 1f                	je     f0103483 <free_disk_frame+0x81>
f0103464:	8b 15 34 b9 85 f0    	mov    0xf085b934,%edx
f010346a:	8b 1d 58 b8 85 f0    	mov    0xf085b858,%ebx
f0103470:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0103473:	89 c8                	mov    %ecx,%eax
f0103475:	01 c0                	add    %eax,%eax
f0103477:	01 c8                	add    %ecx,%eax
f0103479:	c1 e0 03             	shl    $0x3,%eax
f010347c:	01 d8                	add    %ebx,%eax
f010347e:	89 42 04             	mov    %eax,0x4(%edx)
f0103481:	eb 19                	jmp    f010349c <free_disk_frame+0x9a>
f0103483:	8b 0d 58 b8 85 f0    	mov    0xf085b858,%ecx
f0103489:	8b 55 08             	mov    0x8(%ebp),%edx
f010348c:	89 d0                	mov    %edx,%eax
f010348e:	01 c0                	add    %eax,%eax
f0103490:	01 d0                	add    %edx,%eax
f0103492:	c1 e0 03             	shl    $0x3,%eax
f0103495:	01 c8                	add    %ecx,%eax
f0103497:	a3 38 b9 85 f0       	mov    %eax,0xf085b938
f010349c:	8b 0d 58 b8 85 f0    	mov    0xf085b858,%ecx
f01034a2:	8b 55 08             	mov    0x8(%ebp),%edx
f01034a5:	89 d0                	mov    %edx,%eax
f01034a7:	01 c0                	add    %eax,%eax
f01034a9:	01 d0                	add    %edx,%eax
f01034ab:	c1 e0 03             	shl    $0x3,%eax
f01034ae:	01 c8                	add    %ecx,%eax
f01034b0:	a3 34 b9 85 f0       	mov    %eax,0xf085b934
f01034b5:	8b 0d 58 b8 85 f0    	mov    0xf085b858,%ecx
f01034bb:	8b 55 08             	mov    0x8(%ebp),%edx
f01034be:	89 d0                	mov    %edx,%eax
f01034c0:	01 c0                	add    %eax,%eax
f01034c2:	01 d0                	add    %edx,%eax
f01034c4:	c1 e0 03             	shl    $0x3,%eax
f01034c7:	01 c8                	add    %ecx,%eax
f01034c9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01034d0:	a1 40 b9 85 f0       	mov    0xf085b940,%eax
f01034d5:	40                   	inc    %eax
f01034d6:	a3 40 b9 85 f0       	mov    %eax,0xf085b940
f01034db:	eb 01                	jmp    f01034de <free_disk_frame+0xdc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f01034dd:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f01034de:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01034e1:	c9                   	leave  
f01034e2:	c3                   	ret    

f01034e3 <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f01034e3:	55                   	push   %ebp
f01034e4:	89 e5                	mov    %esp,%ebp
f01034e6:	53                   	push   %ebx
f01034e7:	83 ec 14             	sub    $0x14,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f01034ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034ed:	c1 e8 16             	shr    $0x16,%eax
f01034f0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01034f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01034fa:	01 d0                	add    %edx,%eax
f01034fc:	8b 00                	mov    (%eax),%eax
f01034fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0103501:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0103508:	77 1d                	ja     f0103527 <get_disk_page_table+0x44>
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
f010350a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010350d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103512:	83 ec 0c             	sub    $0xc,%esp
f0103515:	50                   	push   %eax
f0103516:	e8 04 47 00 00       	call   f0107c1f <kheap_virtual_address>
f010351b:	83 c4 10             	add    $0x10,%esp
f010351e:	89 c2                	mov    %eax,%edx
f0103520:	8b 45 14             	mov    0x14(%ebp),%eax
f0103523:	89 10                	mov    %edx,(%eax)
f0103525:	eb 44                	jmp    f010356b <get_disk_page_table+0x88>
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f0103527:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010352a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010352f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103532:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103535:	c1 e8 0c             	shr    $0xc,%eax
f0103538:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010353b:	a1 8c b8 85 f0       	mov    0xf085b88c,%eax
f0103540:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103543:	72 17                	jb     f010355c <get_disk_page_table+0x79>
f0103545:	ff 75 f0             	pushl  -0x10(%ebp)
f0103548:	68 14 5b 13 f0       	push   $0xf0135b14
f010354d:	68 92 00 00 00       	push   $0x92
f0103552:	68 b3 5a 13 f0       	push   $0xf0135ab3
f0103557:	e8 a9 cc ff ff       	call   f0100205 <_panic>
f010355c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010355f:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103564:	89 c2                	mov    %eax,%edx
f0103566:	8b 45 14             	mov    0x14(%ebp),%eax
f0103569:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f010356b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010356f:	0f 85 80 00 00 00    	jne    f01035f5 <get_disk_page_table+0x112>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f0103575:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0103579:	74 6a                	je     f01035e5 <get_disk_page_table+0x102>
		{

#if USE_KHEAP
			{
				*ptr_disk_page_table = (uint32*)kmalloc(PAGE_SIZE);
f010357b:	83 ec 0c             	sub    $0xc,%esp
f010357e:	68 00 10 00 00       	push   $0x1000
f0103583:	e8 a8 44 00 00       	call   f0107a30 <kmalloc>
f0103588:	83 c4 10             	add    $0x10,%esp
f010358b:	89 c2                	mov    %eax,%edx
f010358d:	8b 45 14             	mov    0x14(%ebp),%eax
f0103590:	89 10                	mov    %edx,(%eax)
				if(*ptr_disk_page_table == NULL)
f0103592:	8b 45 14             	mov    0x14(%ebp),%eax
f0103595:	8b 00                	mov    (%eax),%eax
f0103597:	85 c0                	test   %eax,%eax
f0103599:	75 07                	jne    f01035a2 <get_disk_page_table+0xbf>
				{
					return E_NO_VM;
f010359b:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f01035a0:	eb 58                	jmp    f01035fa <get_disk_page_table+0x117>
				}
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f01035a2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01035a5:	c1 e8 16             	shr    $0x16,%eax
f01035a8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01035af:	8b 45 08             	mov    0x8(%ebp),%eax
f01035b2:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f01035b5:	8b 45 14             	mov    0x14(%ebp),%eax
f01035b8:	8b 00                	mov    (%eax),%eax
f01035ba:	83 ec 0c             	sub    $0xc,%esp
f01035bd:	50                   	push   %eax
f01035be:	e8 88 46 00 00       	call   f0107c4b <kheap_physical_address>
f01035c3:	83 c4 10             	add    $0x10,%esp
f01035c6:	83 c8 01             	or     $0x1,%eax
f01035c9:	89 03                	mov    %eax,(%ebx)
				ptr_frame_info->references = 1;
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f01035cb:	8b 45 14             	mov    0x14(%ebp),%eax
f01035ce:	8b 00                	mov    (%eax),%eax
f01035d0:	83 ec 04             	sub    $0x4,%esp
f01035d3:	68 00 10 00 00       	push   $0x1000
f01035d8:	6a 00                	push   $0x0
f01035da:	50                   	push   %eax
f01035db:	e8 75 e6 02 00       	call   f0131c55 <memset>
f01035e0:	83 c4 10             	add    $0x10,%esp
f01035e3:	eb 10                	jmp    f01035f5 <get_disk_page_table+0x112>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f01035e5:	8b 45 14             	mov    0x14(%ebp),%eax
f01035e8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f01035ee:	b8 00 00 00 00       	mov    $0x0,%eax
f01035f3:	eb 05                	jmp    f01035fa <get_disk_page_table+0x117>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f01035f5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01035fa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01035fd:	c9                   	leave  
f01035fe:	c3                   	ret    

f01035ff <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f01035ff:	55                   	push   %ebp
f0103600:	89 e5                	mov    %esp,%ebp
f0103602:	83 ec 28             	sub    $0x28,%esp
f0103605:	8b 45 10             	mov    0x10(%ebp),%eax
f0103608:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f010360b:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f010360f:	74 75                	je     f0103686 <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f0103611:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0103618:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010361b:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103620:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103623:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103626:	ba 00 00 00 00       	mov    $0x0,%edx
f010362b:	f7 75 f4             	divl   -0xc(%ebp)
f010362e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103631:	29 d0                	sub    %edx,%eax
f0103633:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103636:	73 32                	jae    f010366a <pf_add_empty_env_page+0x6b>
f0103638:	8b 45 08             	mov    0x8(%ebp),%eax
f010363b:	8b 90 58 05 00 00    	mov    0x558(%eax),%edx
f0103641:	b8 00 00 00 00       	mov    $0x0,%eax
f0103646:	29 d0                	sub    %edx,%eax
f0103648:	c1 e0 0c             	shl    $0xc,%eax
f010364b:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0103650:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103653:	76 15                	jbe    f010366a <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f0103655:	8b 45 08             	mov    0x8(%ebp),%eax
f0103658:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f010365e:	8d 50 01             	lea    0x1(%eax),%edx
f0103661:	8b 45 08             	mov    0x8(%ebp),%eax
f0103664:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f010366a:	a1 dc b8 85 f0       	mov    0xf085b8dc,%eax
f010366f:	83 ec 04             	sub    $0x4,%esp
f0103672:	50                   	push   %eax
f0103673:	ff 75 0c             	pushl  0xc(%ebp)
f0103676:	ff 75 08             	pushl  0x8(%ebp)
f0103679:	e8 b2 00 00 00       	call   f0103730 <pf_add_env_page>
f010367e:	83 c4 10             	add    $0x10,%esp
f0103681:	e9 a8 00 00 00       	jmp    f010372e <pf_add_empty_env_page+0x12f>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103686:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f010368d:	76 19                	jbe    f01036a8 <pf_add_empty_env_page+0xa9>
f010368f:	68 44 5b 13 f0       	push   $0xf0135b44
f0103694:	68 6a 5b 13 f0       	push   $0xf0135b6a
f0103699:	68 d1 00 00 00       	push   $0xd1
f010369e:	68 b3 5a 13 f0       	push   $0xf0135ab3
f01036a3:	e8 5d cb ff ff       	call   f0100205 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f01036a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01036ab:	83 c0 64             	add    $0x64,%eax
f01036ae:	83 ec 08             	sub    $0x8,%esp
f01036b1:	50                   	push   %eax
f01036b2:	ff 75 08             	pushl  0x8(%ebp)
f01036b5:	e8 10 06 00 00       	call   f0103cca <get_disk_page_directory>
f01036ba:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f01036bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01036c0:	8b 40 64             	mov    0x64(%eax),%eax
f01036c3:	8d 55 ec             	lea    -0x14(%ebp),%edx
f01036c6:	52                   	push   %edx
f01036c7:	6a 01                	push   $0x1
f01036c9:	ff 75 0c             	pushl  0xc(%ebp)
f01036cc:	50                   	push   %eax
f01036cd:	e8 11 fe ff ff       	call   f01034e3 <get_disk_page_table>
f01036d2:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01036d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036d8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01036db:	c1 ea 0c             	shr    $0xc,%edx
f01036de:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01036e4:	c1 e2 02             	shl    $0x2,%edx
f01036e7:	01 d0                	add    %edx,%eax
f01036e9:	8b 00                	mov    (%eax),%eax
f01036eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f01036ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01036f1:	85 c0                	test   %eax,%eax
f01036f3:	75 34                	jne    f0103729 <pf_add_empty_env_page+0x12a>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01036f5:	83 ec 0c             	sub    $0xc,%esp
f01036f8:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01036fb:	50                   	push   %eax
f01036fc:	e8 3a fc ff ff       	call   f010333b <allocate_disk_frame>
f0103701:	83 c4 10             	add    $0x10,%esp
f0103704:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103707:	75 07                	jne    f0103710 <pf_add_empty_env_page+0x111>
f0103709:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010370e:	eb 1e                	jmp    f010372e <pf_add_empty_env_page+0x12f>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103710:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103713:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103716:	c1 ea 0c             	shr    $0xc,%edx
f0103719:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010371f:	c1 e2 02             	shl    $0x2,%edx
f0103722:	01 c2                	add    %eax,%edx
f0103724:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103727:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f0103729:	b8 00 00 00 00       	mov    $0x0,%eax

}
f010372e:	c9                   	leave  
f010372f:	c3                   	ret    

f0103730 <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0103730:	55                   	push   %ebp
f0103731:	89 e5                	mov    %esp,%ebp
f0103733:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103736:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f010373d:	76 19                	jbe    f0103758 <pf_add_env_page+0x28>
f010373f:	68 44 5b 13 f0       	push   $0xf0135b44
f0103744:	68 6a 5b 13 f0       	push   $0xf0135b6a
f0103749:	68 e6 00 00 00       	push   $0xe6
f010374e:	68 b3 5a 13 f0       	push   $0xf0135ab3
f0103753:	e8 ad ca ff ff       	call   f0100205 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103758:	8b 45 08             	mov    0x8(%ebp),%eax
f010375b:	83 c0 64             	add    $0x64,%eax
f010375e:	83 ec 08             	sub    $0x8,%esp
f0103761:	50                   	push   %eax
f0103762:	ff 75 08             	pushl  0x8(%ebp)
f0103765:	e8 60 05 00 00       	call   f0103cca <get_disk_page_directory>
f010376a:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f010376d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103770:	8b 40 64             	mov    0x64(%eax),%eax
f0103773:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103776:	52                   	push   %edx
f0103777:	6a 01                	push   $0x1
f0103779:	ff 75 0c             	pushl  0xc(%ebp)
f010377c:	50                   	push   %eax
f010377d:	e8 61 fd ff ff       	call   f01034e3 <get_disk_page_table>
f0103782:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103785:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103788:	8b 55 0c             	mov    0xc(%ebp),%edx
f010378b:	c1 ea 0c             	shr    $0xc,%edx
f010378e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103794:	c1 e2 02             	shl    $0x2,%edx
f0103797:	01 d0                	add    %edx,%eax
f0103799:	8b 00                	mov    (%eax),%eax
f010379b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f010379e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037a1:	85 c0                	test   %eax,%eax
f01037a3:	75 34                	jne    f01037d9 <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01037a5:	83 ec 0c             	sub    $0xc,%esp
f01037a8:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01037ab:	50                   	push   %eax
f01037ac:	e8 8a fb ff ff       	call   f010333b <allocate_disk_frame>
f01037b1:	83 c4 10             	add    $0x10,%esp
f01037b4:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01037b7:	75 07                	jne    f01037c0 <pf_add_env_page+0x90>
f01037b9:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01037be:	eb 31                	jmp    f01037f1 <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01037c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01037c3:	8b 55 0c             	mov    0xc(%ebp),%edx
f01037c6:	c1 ea 0c             	shr    $0xc,%edx
f01037c9:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01037cf:	c1 e2 02             	shl    $0x2,%edx
f01037d2:	01 c2                	add    %eax,%edx
f01037d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037d7:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f01037d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037dc:	83 ec 08             	sub    $0x8,%esp
f01037df:	ff 75 10             	pushl  0x10(%ebp)
f01037e2:	50                   	push   %eax
f01037e3:	e8 a6 f9 ff ff       	call   f010318e <write_disk_page>
f01037e8:	83 c4 10             	add    $0x10,%esp
f01037eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f01037ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01037f1:	c9                   	leave  
f01037f2:	c3                   	ret    

f01037f3 <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f01037f3:	55                   	push   %ebp
f01037f4:	89 e5                	mov    %esp,%ebp
f01037f6:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f01037f9:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103800:	76 19                	jbe    f010381b <pf_update_env_page+0x28>
f0103802:	68 44 5b 13 f0       	push   $0xf0135b44
f0103807:	68 6a 5b 13 f0       	push   $0xf0135b6a
f010380c:	68 08 01 00 00       	push   $0x108
f0103811:	68 b3 5a 13 f0       	push   $0xf0135ab3
f0103816:	e8 ea c9 ff ff       	call   f0100205 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010381b:	8b 45 08             	mov    0x8(%ebp),%eax
f010381e:	83 c0 64             	add    $0x64,%eax
f0103821:	83 ec 08             	sub    $0x8,%esp
f0103824:	50                   	push   %eax
f0103825:	ff 75 08             	pushl  0x8(%ebp)
f0103828:	e8 9d 04 00 00       	call   f0103cca <get_disk_page_directory>
f010382d:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103830:	8b 45 08             	mov    0x8(%ebp),%eax
f0103833:	8b 40 64             	mov    0x64(%eax),%eax
f0103836:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0103839:	52                   	push   %edx
f010383a:	6a 00                	push   $0x0
f010383c:	ff 75 0c             	pushl  0xc(%ebp)
f010383f:	50                   	push   %eax
f0103840:	e8 9e fc ff ff       	call   f01034e3 <get_disk_page_table>
f0103845:	83 c4 10             	add    $0x10,%esp

	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f0103848:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010384b:	85 c0                	test   %eax,%eax
f010384d:	74 29                	je     f0103878 <pf_update_env_page+0x85>
f010384f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103852:	85 c0                	test   %eax,%eax
f0103854:	0f 84 43 01 00 00    	je     f010399d <pf_update_env_page+0x1aa>
f010385a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010385d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103860:	c1 ea 0c             	shr    $0xc,%edx
f0103863:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103869:	c1 e2 02             	shl    $0x2,%edx
f010386c:	01 d0                	add    %edx,%eax
f010386e:	8b 00                	mov    (%eax),%eax
f0103870:	85 c0                	test   %eax,%eax
f0103872:	0f 85 25 01 00 00    	jne    f010399d <pf_update_env_page+0x1aa>
	{
		uint32 VA = (uint32)virtual_address ;
f0103878:	8b 45 0c             	mov    0xc(%ebp),%eax
f010387b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f010387e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103881:	85 c0                	test   %eax,%eax
f0103883:	79 09                	jns    f010388e <pf_update_env_page+0x9b>
f0103885:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f010388c:	76 38                	jbe    f01038c6 <pf_update_env_page+0xd3>
f010388e:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0103895:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103898:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010389d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01038a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01038a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01038a8:	f7 75 f0             	divl   -0x10(%ebp)
f01038ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01038ae:	29 d0                	sub    %edx,%eax
f01038b0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01038b3:	0f 87 cd 00 00 00    	ja     f0103986 <pf_update_env_page+0x193>
f01038b9:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f01038c0:	0f 87 c0 00 00 00    	ja     f0103986 <pf_update_env_page+0x193>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f01038c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01038c9:	8b 40 5c             	mov    0x5c(%eax),%eax
f01038cc:	83 ec 04             	sub    $0x4,%esp
f01038cf:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f01038d2:	52                   	push   %edx
f01038d3:	ff 75 0c             	pushl  0xc(%ebp)
f01038d6:	50                   	push   %eax
f01038d7:	e8 45 35 00 00       	call   f0106e21 <get_frame_info>
f01038dc:	83 c4 10             	add    $0x10,%esp
f01038df:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f01038e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01038e5:	3b 45 10             	cmp    0x10(%ebp),%eax
f01038e8:	75 52                	jne    f010393c <pf_update_env_page+0x149>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f01038ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f01038ed:	83 ec 04             	sub    $0x4,%esp
f01038f0:	50                   	push   %eax
f01038f1:	ff 75 f4             	pushl  -0xc(%ebp)
f01038f4:	ff 75 08             	pushl  0x8(%ebp)
f01038f7:	e8 34 fe ff ff       	call   f0103730 <pf_add_env_page>
f01038fc:	83 c4 10             	add    $0x10,%esp
f01038ff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f0103902:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f0103906:	75 17                	jne    f010391f <pf_update_env_page+0x12c>
				{
					panic("pf_update_env_page: page file out of space!") ;
f0103908:	83 ec 04             	sub    $0x4,%esp
f010390b:	68 80 5b 13 f0       	push   $0xf0135b80
f0103910:	68 1d 01 00 00       	push   $0x11d
f0103915:	68 b3 5a 13 f0       	push   $0xf0135ab3
f010391a:	e8 e6 c8 ff ff       	call   f0100205 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f010391f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103922:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f0103928:	8d 50 01             	lea    0x1(%eax),%edx
f010392b:	8b 45 08             	mov    0x8(%ebp),%eax
f010392e:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
				return ret ;
f0103934:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103937:	e9 17 01 00 00       	jmp    f0103a53 <pf_update_env_page+0x260>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f010393c:	83 ec 04             	sub    $0x4,%esp
f010393f:	6a 00                	push   $0x0
f0103941:	ff 75 f4             	pushl  -0xc(%ebp)
f0103944:	ff 75 08             	pushl  0x8(%ebp)
f0103947:	e8 b3 fc ff ff       	call   f01035ff <pf_add_empty_env_page>
f010394c:	83 c4 10             	add    $0x10,%esp
f010394f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f0103952:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f0103956:	75 17                	jne    f010396f <pf_update_env_page+0x17c>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f0103958:	83 ec 04             	sub    $0x4,%esp
f010395b:	68 ac 5b 13 f0       	push   $0xf0135bac
f0103960:	68 28 01 00 00       	push   $0x128
f0103965:	68 b3 5a 13 f0       	push   $0xf0135ab3
f010396a:	e8 96 c8 ff ff       	call   f0100205 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f010396f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103972:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f0103978:	8d 50 01             	lea    0x1(%eax),%edx
f010397b:	8b 45 08             	mov    0x8(%ebp),%eax
f010397e:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f0103984:	eb 17                	jmp    f010399d <pf_update_env_page+0x1aa>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f0103986:	83 ec 04             	sub    $0x4,%esp
f0103989:	68 f8 5b 13 f0       	push   $0xf0135bf8
f010398e:	68 2f 01 00 00       	push   $0x12f
f0103993:	68 b3 5a 13 f0       	push   $0xf0135ab3
f0103998:	e8 68 c8 ff ff       	call   f0100205 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f010399d:	8b 45 08             	mov    0x8(%ebp),%eax
f01039a0:	8b 40 64             	mov    0x64(%eax),%eax
f01039a3:	8d 55 d8             	lea    -0x28(%ebp),%edx
f01039a6:	52                   	push   %edx
f01039a7:	6a 00                	push   $0x0
f01039a9:	ff 75 0c             	pushl  0xc(%ebp)
f01039ac:	50                   	push   %eax
f01039ad:	e8 31 fb ff ff       	call   f01034e3 <get_disk_page_table>
f01039b2:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01039b5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01039b8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01039bb:	c1 ea 0c             	shr    $0xc,%edx
f01039be:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01039c4:	c1 e2 02             	shl    $0x2,%edx
f01039c7:	01 d0                	add    %edx,%eax
f01039c9:	8b 00                	mov    (%eax),%eax
f01039cb:	89 45 e0             	mov    %eax,-0x20(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unused VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(ptr_env->env_page_directory, modified_page_frame_info, USER_LIMIT, 0);
f01039ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01039d1:	8b 40 5c             	mov    0x5c(%eax),%eax
f01039d4:	6a 00                	push   $0x0
f01039d6:	68 00 00 80 ef       	push   $0xef800000
f01039db:	ff 75 10             	pushl  0x10(%ebp)
f01039de:	50                   	push   %eax
f01039df:	e8 78 33 00 00       	call   f0106d5c <map_frame>
f01039e4:	83 c4 10             	add    $0x10,%esp
		ret = write_disk_page(dfn, (void*)ROUNDDOWN(USER_LIMIT, PAGE_SIZE));
f01039e7:	c7 45 dc 00 00 80 ef 	movl   $0xef800000,-0x24(%ebp)
f01039ee:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01039f1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01039f6:	83 ec 08             	sub    $0x8,%esp
f01039f9:	50                   	push   %eax
f01039fa:	ff 75 e0             	pushl  -0x20(%ebp)
f01039fd:	e8 8c f7 ff ff       	call   f010318e <write_disk_page>
f0103a02:	83 c4 10             	add    $0x10,%esp
f0103a05:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// TEMPORARILY increase the references to prevent unmap_frame from removing the frame
		modified_page_frame_info->references += 1;
f0103a08:	8b 45 10             	mov    0x10(%ebp),%eax
f0103a0b:	8b 40 08             	mov    0x8(%eax),%eax
f0103a0e:	40                   	inc    %eax
f0103a0f:	8b 55 10             	mov    0x10(%ebp),%edx
f0103a12:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(ptr_env->env_page_directory, USER_LIMIT);
f0103a16:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a19:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103a1c:	83 ec 08             	sub    $0x8,%esp
f0103a1f:	68 00 00 80 ef       	push   $0xef800000
f0103a24:	50                   	push   %eax
f0103a25:	e8 67 34 00 00       	call   f0106e91 <unmap_frame>
f0103a2a:	83 c4 10             	add    $0x10,%esp
		// Return it to its original status
		modified_page_frame_info->references -= 1;
f0103a2d:	8b 45 10             	mov    0x10(%ebp),%eax
f0103a30:	8b 40 08             	mov    0x8(%eax),%eax
f0103a33:	48                   	dec    %eax
f0103a34:	8b 55 10             	mov    0x10(%ebp),%edx
f0103a37:	66 89 42 08          	mov    %ax,0x8(%edx)
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f0103a3b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a3e:	8b 80 50 05 00 00    	mov    0x550(%eax),%eax
f0103a44:	8d 50 01             	lea    0x1(%eax),%edx
f0103a47:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a4a:	89 90 50 05 00 00    	mov    %edx,0x550(%eax)
	//======================

	return ret;
f0103a50:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f0103a53:	c9                   	leave  
f0103a54:	c3                   	ret    

f0103a55 <pf_read_env_page>:

int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f0103a55:	55                   	push   %ebp
f0103a56:	89 e5                	mov    %esp,%ebp
f0103a58:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f0103a5b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103a5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103a61:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103a64:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103a69:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a6f:	8b 40 64             	mov    0x64(%eax),%eax
f0103a72:	85 c0                	test   %eax,%eax
f0103a74:	75 0a                	jne    f0103a80 <pf_read_env_page+0x2b>
f0103a76:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a7b:	e9 90 00 00 00       	jmp    f0103b10 <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0103a80:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a83:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a86:	8b 40 64             	mov    0x64(%eax),%eax
f0103a89:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f0103a8c:	51                   	push   %ecx
f0103a8d:	6a 00                	push   $0x0
f0103a8f:	52                   	push   %edx
f0103a90:	50                   	push   %eax
f0103a91:	e8 4d fa ff ff       	call   f01034e3 <get_disk_page_table>
f0103a96:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a99:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103a9c:	85 c0                	test   %eax,%eax
f0103a9e:	75 07                	jne    f0103aa7 <pf_read_env_page+0x52>
f0103aa0:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103aa5:	eb 69                	jmp    f0103b10 <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103aa7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103aaa:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103aad:	c1 ea 0c             	shr    $0xc,%edx
f0103ab0:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103ab6:	c1 e2 02             	shl    $0x2,%edx
f0103ab9:	01 d0                	add    %edx,%eax
f0103abb:	8b 00                	mov    (%eax),%eax
f0103abd:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103ac0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103ac4:	75 07                	jne    f0103acd <pf_read_env_page+0x78>
f0103ac6:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103acb:	eb 43                	jmp    f0103b10 <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f0103acd:	83 ec 08             	sub    $0x8,%esp
f0103ad0:	ff 75 0c             	pushl  0xc(%ebp)
f0103ad3:	ff 75 f0             	pushl  -0x10(%ebp)
f0103ad6:	e8 84 f6 ff ff       	call   f010315f <read_disk_page>
f0103adb:	83 c4 10             	add    $0x10,%esp
f0103ade:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f0103ae1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ae4:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ae7:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103aea:	6a 40                	push   $0x40
f0103aec:	6a 00                	push   $0x0
f0103aee:	52                   	push   %edx
f0103aef:	50                   	push   %eax
f0103af0:	e8 ec 41 00 00       	call   f0107ce1 <pt_set_page_permissions>
f0103af5:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f0103af8:	8b 45 08             	mov    0x8(%ebp),%eax
f0103afb:	8b 80 4c 05 00 00    	mov    0x54c(%eax),%eax
f0103b01:	8d 50 01             	lea    0x1(%eax),%edx
f0103b04:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b07:	89 90 4c 05 00 00    	mov    %edx,0x54c(%eax)
	//======================

	return disk_read_error;
f0103b0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0103b10:	c9                   	leave  
f0103b11:	c3                   	ret    

f0103b12 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f0103b12:	55                   	push   %ebp
f0103b13:	89 e5                	mov    %esp,%ebp
f0103b15:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103b18:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b1b:	8b 40 64             	mov    0x64(%eax),%eax
f0103b1e:	85 c0                	test   %eax,%eax
f0103b20:	74 62                	je     f0103b84 <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103b22:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b25:	8b 40 64             	mov    0x64(%eax),%eax
f0103b28:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103b2b:	52                   	push   %edx
f0103b2c:	6a 00                	push   $0x0
f0103b2e:	ff 75 0c             	pushl  0xc(%ebp)
f0103b31:	50                   	push   %eax
f0103b32:	e8 ac f9 ff ff       	call   f01034e3 <get_disk_page_table>
f0103b37:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f0103b3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b3d:	85 c0                	test   %eax,%eax
f0103b3f:	74 46                	je     f0103b87 <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103b41:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b44:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b47:	c1 ea 0c             	shr    $0xc,%edx
f0103b4a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103b50:	c1 e2 02             	shl    $0x2,%edx
f0103b53:	01 d0                	add    %edx,%eax
f0103b55:	8b 00                	mov    (%eax),%eax
f0103b57:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f0103b5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b5d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b60:	c1 ea 0c             	shr    $0xc,%edx
f0103b63:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103b69:	c1 e2 02             	shl    $0x2,%edx
f0103b6c:	01 d0                	add    %edx,%eax
f0103b6e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103b74:	83 ec 0c             	sub    $0xc,%esp
f0103b77:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b7a:	e8 83 f8 ff ff       	call   f0103402 <free_disk_frame>
f0103b7f:	83 c4 10             	add    $0x10,%esp
f0103b82:	eb 04                	jmp    f0103b88 <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103b84:	90                   	nop
f0103b85:	eb 01                	jmp    f0103b88 <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0103b87:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103b88:	c9                   	leave  
f0103b89:	c3                   	ret    

f0103b8a <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f0103b8a:	55                   	push   %ebp
f0103b8b:	89 e5                	mov    %esp,%ebp
f0103b8d:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103b90:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103b97:	e9 b8 00 00 00       	jmp    f0103c54 <pf_free_env+0xca>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f0103b9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b9f:	8b 40 64             	mov    0x64(%eax),%eax
f0103ba2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103ba5:	c1 e2 02             	shl    $0x2,%edx
f0103ba8:	01 d0                	add    %edx,%eax
f0103baa:	8b 00                	mov    (%eax),%eax
f0103bac:	83 e0 01             	and    $0x1,%eax
f0103baf:	85 c0                	test   %eax,%eax
f0103bb1:	0f 84 99 00 00 00    	je     f0103c50 <pf_free_env+0xc6>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f0103bb7:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bba:	8b 40 64             	mov    0x64(%eax),%eax
f0103bbd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103bc0:	c1 e2 02             	shl    $0x2,%edx
f0103bc3:	01 d0                	add    %edx,%eax
f0103bc5:	8b 00                	mov    (%eax),%eax
f0103bc7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103bcc:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32 *pt;
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103bcf:	83 ec 0c             	sub    $0xc,%esp
f0103bd2:	ff 75 ec             	pushl  -0x14(%ebp)
f0103bd5:	e8 45 40 00 00       	call   f0107c1f <kheap_virtual_address>
f0103bda:	83 c4 10             	add    $0x10,%esp
f0103bdd:	89 45 e8             	mov    %eax,-0x18(%ebp)
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103be0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0103be7:	eb 3a                	jmp    f0103c23 <pf_free_env+0x99>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f0103be9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103bec:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103bf3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103bf6:	01 d0                	add    %edx,%eax
f0103bf8:	8b 00                	mov    (%eax),%eax
f0103bfa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			pt[pteno] = 0;
f0103bfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103c00:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103c07:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103c0a:	01 d0                	add    %edx,%eax
f0103c0c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0103c12:	83 ec 0c             	sub    $0xc,%esp
f0103c15:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103c18:	e8 e5 f7 ff ff       	call   f0103402 <free_disk_frame>
f0103c1d:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103c20:	ff 45 f0             	incl   -0x10(%ebp)
f0103c23:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f0103c2a:	76 bd                	jbe    f0103be9 <pf_free_env+0x5f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f0103c2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c2f:	8b 40 64             	mov    0x64(%eax),%eax
f0103c32:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c35:	c1 e2 02             	shl    $0x2,%edx
f0103c38:	01 d0                	add    %edx,%eax
f0103c3a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#if USE_KHEAP
		{
			kfree(pt);
f0103c40:	83 ec 0c             	sub    $0xc,%esp
f0103c43:	ff 75 e8             	pushl  -0x18(%ebp)
f0103c46:	e8 ce 3e 00 00       	call   f0107b19 <kfree>
f0103c4b:	83 c4 10             	add    $0x10,%esp
f0103c4e:	eb 01                	jmp    f0103c51 <pf_free_env+0xc7>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0103c50:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103c51:	ff 45 f4             	incl   -0xc(%ebp)
f0103c54:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103c5b:	0f 86 3b ff ff ff    	jbe    f0103b9c <pf_free_env+0x12>
	}

	// free the disk page directory of the environment
#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_pgdir);
f0103c61:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c64:	8b 40 64             	mov    0x64(%eax),%eax
f0103c67:	83 ec 0c             	sub    $0xc,%esp
f0103c6a:	50                   	push   %eax
f0103c6b:	e8 a9 3e 00 00       	call   f0107b19 <kfree>
f0103c70:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0103c73:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c76:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f0103c7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c80:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f0103c87:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c8a:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103c8d:	85 c0                	test   %eax,%eax
f0103c8f:	74 36                	je     f0103cc7 <pf_free_env+0x13d>
		return;
	__pf_remove_env_all_tables(ptr_env);
f0103c91:	83 ec 0c             	sub    $0xc,%esp
f0103c94:	ff 75 08             	pushl  0x8(%ebp)
f0103c97:	e8 05 03 00 00       	call   f0103fa1 <__pf_remove_env_all_tables>
f0103c9c:	83 c4 10             	add    $0x10,%esp


#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_tabledir);
f0103c9f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ca2:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ca5:	83 ec 0c             	sub    $0xc,%esp
f0103ca8:	50                   	push   %eax
f0103ca9:	e8 6b 3e 00 00       	call   f0107b19 <kfree>
f0103cae:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0103cb1:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cb4:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f0103cbb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cbe:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f0103cc5:	eb 01                	jmp    f0103cc8 <pf_free_env+0x13e>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0103cc7:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f0103cc8:	c9                   	leave  
f0103cc9:	c3                   	ret    

f0103cca <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f0103cca:	55                   	push   %ebp
f0103ccb:	89 e5                	mov    %esp,%ebp
f0103ccd:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f0103cd0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cd3:	8b 50 64             	mov    0x64(%eax),%edx
f0103cd6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cd9:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f0103cdb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cde:	8b 00                	mov    (%eax),%eax
f0103ce0:	85 c0                	test   %eax,%eax
f0103ce2:	75 58                	jne    f0103d3c <get_disk_page_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_page_directory = kmalloc(PAGE_SIZE);
f0103ce4:	83 ec 0c             	sub    $0xc,%esp
f0103ce7:	68 00 10 00 00       	push   $0x1000
f0103cec:	e8 3f 3d 00 00       	call   f0107a30 <kmalloc>
f0103cf1:	83 c4 10             	add    $0x10,%esp
f0103cf4:	89 c2                	mov    %eax,%edx
f0103cf6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cf9:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_page_directory == NULL)
f0103cfb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cfe:	8b 00                	mov    (%eax),%eax
f0103d00:	85 c0                	test   %eax,%eax
f0103d02:	75 07                	jne    f0103d0b <get_disk_page_directory+0x41>
			{
				return E_NO_VM;
f0103d04:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103d09:	eb 36                	jmp    f0103d41 <get_disk_page_directory+0x77>
			}
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
f0103d0b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d0e:	8b 00                	mov    (%eax),%eax
f0103d10:	83 ec 0c             	sub    $0xc,%esp
f0103d13:	50                   	push   %eax
f0103d14:	e8 32 3f 00 00       	call   f0107c4b <kheap_physical_address>
f0103d19:	83 c4 10             	add    $0x10,%esp
f0103d1c:	89 c2                	mov    %eax,%edx
f0103d1e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d21:	89 50 68             	mov    %edx,0x68(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0103d24:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d27:	8b 00                	mov    (%eax),%eax
f0103d29:	83 ec 04             	sub    $0x4,%esp
f0103d2c:	68 00 10 00 00       	push   $0x1000
f0103d31:	6a 00                	push   $0x0
f0103d33:	50                   	push   %eax
f0103d34:	e8 1c df 02 00       	call   f0131c55 <memset>
f0103d39:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103d3c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103d41:	c9                   	leave  
f0103d42:	c3                   	ret    

f0103d43 <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f0103d43:	55                   	push   %ebp
f0103d44:	89 e5                	mov    %esp,%ebp
f0103d46:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0103d49:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103d50:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103d57:	eb 78                	jmp    f0103dd1 <pf_calculate_allocated_pages+0x8e>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0103d59:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d5c:	8b 40 64             	mov    0x64(%eax),%eax
f0103d5f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103d62:	c1 e2 02             	shl    $0x2,%edx
f0103d65:	01 d0                	add    %edx,%eax
f0103d67:	8b 00                	mov    (%eax),%eax
f0103d69:	83 e0 01             	and    $0x1,%eax
f0103d6c:	85 c0                	test   %eax,%eax
f0103d6e:	74 5d                	je     f0103dcd <pf_calculate_allocated_pages+0x8a>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f0103d70:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d73:	8b 40 64             	mov    0x64(%eax),%eax
f0103d76:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103d79:	c1 e2 02             	shl    $0x2,%edx
f0103d7c:	01 d0                	add    %edx,%eax
f0103d7e:	8b 00                	mov    (%eax),%eax
f0103d80:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103d85:	89 45 e8             	mov    %eax,-0x18(%ebp)
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103d88:	83 ec 0c             	sub    $0xc,%esp
f0103d8b:	ff 75 e8             	pushl  -0x18(%ebp)
f0103d8e:	e8 8c 3e 00 00       	call   f0107c1f <kheap_virtual_address>
f0103d93:	83 c4 10             	add    $0x10,%esp
f0103d96:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103d99:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0103da0:	eb 20                	jmp    f0103dc2 <pf_calculate_allocated_pages+0x7f>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0103da2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103da5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103dac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103daf:	01 d0                	add    %edx,%eax
f0103db1:	8b 00                	mov    (%eax),%eax
f0103db3:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if(dfn != 0)
f0103db6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0103dba:	74 03                	je     f0103dbf <pf_calculate_allocated_pages+0x7c>
				counter ++;
f0103dbc:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103dbf:	ff 45 ec             	incl   -0x14(%ebp)
f0103dc2:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f0103dc9:	76 d7                	jbe    f0103da2 <pf_calculate_allocated_pages+0x5f>
f0103dcb:	eb 01                	jmp    f0103dce <pf_calculate_allocated_pages+0x8b>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f0103dcd:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103dce:	ff 45 f4             	incl   -0xc(%ebp)
f0103dd1:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103dd8:	0f 86 7b ff ff ff    	jbe    f0103d59 <pf_calculate_allocated_pages+0x16>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f0103dde:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103de1:	c9                   	leave  
f0103de2:	c3                   	ret    

f0103de3 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0103de3:	55                   	push   %ebp
f0103de4:	89 e5                	mov    %esp,%ebp
f0103de6:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f0103de9:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103df0:	a1 34 b9 85 f0       	mov    0xf085b934,%eax
f0103df5:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103df8:	eb 0b                	jmp    f0103e05 <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f0103dfa:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103dfd:	a1 3c b9 85 f0       	mov    0xf085b93c,%eax
f0103e02:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103e05:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103e09:	74 07                	je     f0103e12 <pf_calculate_free_frames+0x2f>
f0103e0b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103e0e:	8b 00                	mov    (%eax),%eax
f0103e10:	eb 05                	jmp    f0103e17 <pf_calculate_free_frames+0x34>
f0103e12:	b8 00 00 00 00       	mov    $0x0,%eax
f0103e17:	a3 3c b9 85 f0       	mov    %eax,0xf085b93c
f0103e1c:	a1 3c b9 85 f0       	mov    0xf085b93c,%eax
f0103e21:	85 c0                	test   %eax,%eax
f0103e23:	75 d5                	jne    f0103dfa <pf_calculate_free_frames+0x17>
f0103e25:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103e29:	75 cf                	jne    f0103dfa <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f0103e2b:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0103e2e:	c9                   	leave  
f0103e2f:	c3                   	ret    

f0103e30 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0103e30:	55                   	push   %ebp
f0103e31:	89 e5                	mov    %esp,%ebp
f0103e33:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0103e36:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e39:	8b 50 6c             	mov    0x6c(%eax),%edx
f0103e3c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e3f:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0103e41:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e44:	8b 00                	mov    (%eax),%eax
f0103e46:	85 c0                	test   %eax,%eax
f0103e48:	75 58                	jne    f0103ea2 <get_disk_table_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_table_directory = kmalloc(PAGE_SIZE);
f0103e4a:	83 ec 0c             	sub    $0xc,%esp
f0103e4d:	68 00 10 00 00       	push   $0x1000
f0103e52:	e8 d9 3b 00 00       	call   f0107a30 <kmalloc>
f0103e57:	83 c4 10             	add    $0x10,%esp
f0103e5a:	89 c2                	mov    %eax,%edx
f0103e5c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e5f:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_table_directory == NULL)
f0103e61:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e64:	8b 00                	mov    (%eax),%eax
f0103e66:	85 c0                	test   %eax,%eax
f0103e68:	75 07                	jne    f0103e71 <get_disk_table_directory+0x41>
			{
				return E_NO_VM;
f0103e6a:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103e6f:	eb 36                	jmp    f0103ea7 <get_disk_table_directory+0x77>
			}
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
f0103e71:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e74:	8b 00                	mov    (%eax),%eax
f0103e76:	83 ec 0c             	sub    $0xc,%esp
f0103e79:	50                   	push   %eax
f0103e7a:	e8 cc 3d 00 00       	call   f0107c4b <kheap_physical_address>
f0103e7f:	83 c4 10             	add    $0x10,%esp
f0103e82:	89 c2                	mov    %eax,%edx
f0103e84:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e87:	89 50 70             	mov    %edx,0x70(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0103e8a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e8d:	8b 00                	mov    (%eax),%eax
f0103e8f:	83 ec 04             	sub    $0x4,%esp
f0103e92:	68 00 10 00 00       	push   $0x1000
f0103e97:	6a 00                	push   $0x0
f0103e99:	50                   	push   %eax
f0103e9a:	e8 b6 dd 02 00       	call   f0131c55 <memset>
f0103e9f:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103ea2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103ea7:	c9                   	leave  
f0103ea8:	c3                   	ret    

f0103ea9 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103ea9:	55                   	push   %ebp
f0103eaa:	89 e5                	mov    %esp,%ebp
f0103eac:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f0103eaf:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103eb6:	76 19                	jbe    f0103ed1 <__pf_write_env_table+0x28>
f0103eb8:	68 44 5b 13 f0       	push   $0xf0135b44
f0103ebd:	68 6a 5b 13 f0       	push   $0xf0135b6a
f0103ec2:	68 5a 02 00 00       	push   $0x25a
f0103ec7:	68 b3 5a 13 f0       	push   $0xf0135ab3
f0103ecc:	e8 34 c3 ff ff       	call   f0100205 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f0103ed1:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ed4:	83 c0 6c             	add    $0x6c,%eax
f0103ed7:	83 ec 08             	sub    $0x8,%esp
f0103eda:	50                   	push   %eax
f0103edb:	ff 75 08             	pushl  0x8(%ebp)
f0103ede:	e8 4d ff ff ff       	call   f0103e30 <get_disk_table_directory>
f0103ee3:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103ee6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ee9:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103eec:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103eef:	c1 ea 16             	shr    $0x16,%edx
f0103ef2:	c1 e2 02             	shl    $0x2,%edx
f0103ef5:	01 d0                	add    %edx,%eax
f0103ef7:	8b 00                	mov    (%eax),%eax
f0103ef9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0103efc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103eff:	85 c0                	test   %eax,%eax
f0103f01:	75 31                	jne    f0103f34 <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103f03:	83 ec 0c             	sub    $0xc,%esp
f0103f06:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103f09:	50                   	push   %eax
f0103f0a:	e8 2c f4 ff ff       	call   f010333b <allocate_disk_frame>
f0103f0f:	83 c4 10             	add    $0x10,%esp
f0103f12:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103f15:	75 07                	jne    f0103f1e <__pf_write_env_table+0x75>
f0103f17:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103f1c:	eb 2e                	jmp    f0103f4c <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0103f1e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f21:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f24:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f27:	c1 ea 16             	shr    $0x16,%edx
f0103f2a:	c1 e2 02             	shl    $0x2,%edx
f0103f2d:	01 c2                	add    %eax,%edx
f0103f2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f32:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0103f34:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f37:	83 ec 08             	sub    $0x8,%esp
f0103f3a:	ff 75 10             	pushl  0x10(%ebp)
f0103f3d:	50                   	push   %eax
f0103f3e:	e8 4b f2 ff ff       	call   f010318e <write_disk_page>
f0103f43:	83 c4 10             	add    $0x10,%esp
f0103f46:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f0103f49:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103f4c:	c9                   	leave  
f0103f4d:	c3                   	ret    

f0103f4e <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103f4e:	55                   	push   %ebp
f0103f4f:	89 e5                	mov    %esp,%ebp
f0103f51:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103f54:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f57:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f5a:	85 c0                	test   %eax,%eax
f0103f5c:	75 07                	jne    f0103f65 <__pf_read_env_table+0x17>
f0103f5e:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103f63:	eb 3a                	jmp    f0103f9f <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103f65:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f68:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f6b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f6e:	c1 ea 16             	shr    $0x16,%edx
f0103f71:	c1 e2 02             	shl    $0x2,%edx
f0103f74:	01 d0                	add    %edx,%eax
f0103f76:	8b 00                	mov    (%eax),%eax
f0103f78:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103f7b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103f7f:	75 07                	jne    f0103f88 <__pf_read_env_table+0x3a>
f0103f81:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103f86:	eb 17                	jmp    f0103f9f <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0103f88:	83 ec 08             	sub    $0x8,%esp
f0103f8b:	ff 75 10             	pushl  0x10(%ebp)
f0103f8e:	ff 75 f4             	pushl  -0xc(%ebp)
f0103f91:	e8 c9 f1 ff ff       	call   f010315f <read_disk_page>
f0103f96:	83 c4 10             	add    $0x10,%esp
f0103f99:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0103f9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103f9f:	c9                   	leave  
f0103fa0:	c3                   	ret    

f0103fa1 <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f0103fa1:	55                   	push   %ebp
f0103fa2:	89 e5                	mov    %esp,%ebp
f0103fa4:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103fa7:	8b 45 08             	mov    0x8(%ebp),%eax
f0103faa:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103fad:	85 c0                	test   %eax,%eax
f0103faf:	74 4c                	je     f0103ffd <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103fb1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103fb8:	eb 38                	jmp    f0103ff2 <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0103fba:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fbd:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103fc0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103fc3:	c1 e2 02             	shl    $0x2,%edx
f0103fc6:	01 d0                	add    %edx,%eax
f0103fc8:	8b 00                	mov    (%eax),%eax
f0103fca:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0103fcd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fd0:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103fd3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103fd6:	c1 e2 02             	shl    $0x2,%edx
f0103fd9:	01 d0                	add    %edx,%eax
f0103fdb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0103fe1:	83 ec 0c             	sub    $0xc,%esp
f0103fe4:	ff 75 f0             	pushl  -0x10(%ebp)
f0103fe7:	e8 16 f4 ff ff       	call   f0103402 <free_disk_frame>
f0103fec:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103fef:	ff 45 f4             	incl   -0xc(%ebp)
f0103ff2:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103ff9:	76 bf                	jbe    f0103fba <__pf_remove_env_all_tables+0x19>
f0103ffb:	eb 01                	jmp    f0103ffe <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103ffd:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103ffe:	c9                   	leave  
f0103fff:	c3                   	ret    

f0104000 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0104000:	55                   	push   %ebp
f0104001:	89 e5                	mov    %esp,%ebp
f0104003:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0104006:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010400a:	75 10                	jne    f010401c <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f010400c:	83 ec 0c             	sub    $0xc,%esp
f010400f:	68 74 5c 13 f0       	push   $0xf0135c74
f0104014:	e8 f5 cc ff ff       	call   f0100d0e <cprintf>
f0104019:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f010401c:	8b 45 08             	mov    0x8(%ebp),%eax
f010401f:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104022:	85 c0                	test   %eax,%eax
f0104024:	74 3d                	je     f0104063 <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0104026:	8b 45 08             	mov    0x8(%ebp),%eax
f0104029:	8b 40 6c             	mov    0x6c(%eax),%eax
f010402c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010402f:	c1 ea 16             	shr    $0x16,%edx
f0104032:	c1 e2 02             	shl    $0x2,%edx
f0104035:	01 d0                	add    %edx,%eax
f0104037:	8b 00                	mov    (%eax),%eax
f0104039:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f010403c:	8b 45 08             	mov    0x8(%ebp),%eax
f010403f:	8b 40 6c             	mov    0x6c(%eax),%eax
f0104042:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104045:	c1 ea 16             	shr    $0x16,%edx
f0104048:	c1 e2 02             	shl    $0x2,%edx
f010404b:	01 d0                	add    %edx,%eax
f010404d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0104053:	83 ec 0c             	sub    $0xc,%esp
f0104056:	ff 75 f4             	pushl  -0xc(%ebp)
f0104059:	e8 a4 f3 ff ff       	call   f0103402 <free_disk_frame>
f010405e:	83 c4 10             	add    $0x10,%esp
f0104061:	eb 01                	jmp    f0104064 <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0104063:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0104064:	c9                   	leave  
f0104065:	c3                   	ret    

f0104066 <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f0104066:	55                   	push   %ebp
f0104067:	89 e5                	mov    %esp,%ebp
f0104069:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f010406c:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0104073:	eb 1f                	jmp    f0104094 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f0104075:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104078:	83 ec 04             	sub    $0x4,%esp
f010407b:	6a 08                	push   $0x8
f010407d:	ff 75 08             	pushl  0x8(%ebp)
f0104080:	50                   	push   %eax
f0104081:	e8 74 e2 02 00       	call   f01322fa <ide_write>
f0104086:	83 c4 10             	add    $0x10,%esp
f0104089:	85 c0                	test   %eax,%eax
f010408b:	75 12                	jne    f010409f <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f010408d:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0104094:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f010409b:	7e d8                	jle    f0104075 <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f010409d:	eb 01                	jmp    f01040a0 <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f010409f:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f01040a0:	90                   	nop
f01040a1:	c9                   	leave  
f01040a2:	c3                   	ret    

f01040a3 <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f01040a3:	55                   	push   %ebp
f01040a4:	89 e5                	mov    %esp,%ebp
f01040a6:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01040a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01040ac:	0f b6 c0             	movzbl %al,%eax
f01040af:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f01040b6:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01040b9:	8a 45 f6             	mov    -0xa(%ebp),%al
f01040bc:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01040bf:	ee                   	out    %al,(%dx)
f01040c0:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01040c7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01040ca:	89 c2                	mov    %eax,%edx
f01040cc:	ec                   	in     (%dx),%al
f01040cd:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f01040d0:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f01040d3:	0f b6 c0             	movzbl %al,%eax
}
f01040d6:	c9                   	leave  
f01040d7:	c3                   	ret    

f01040d8 <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f01040d8:	55                   	push   %ebp
f01040d9:	89 e5                	mov    %esp,%ebp
f01040db:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01040de:	8b 45 08             	mov    0x8(%ebp),%eax
f01040e1:	0f b6 c0             	movzbl %al,%eax
f01040e4:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f01040eb:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01040ee:	8a 45 f6             	mov    -0xa(%ebp),%al
f01040f1:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01040f4:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f01040f5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01040f8:	0f b6 c0             	movzbl %al,%eax
f01040fb:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f0104102:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104105:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104108:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010410b:	ee                   	out    %al,(%dx)
}
f010410c:	90                   	nop
f010410d:	c9                   	leave  
f010410e:	c3                   	ret    

f010410f <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f010410f:	55                   	push   %ebp
f0104110:	89 e5                	mov    %esp,%ebp
f0104112:	53                   	push   %ebx
f0104113:	83 ec 24             	sub    $0x24,%esp
f0104116:	8b 45 08             	mov    0x8(%ebp),%eax
f0104119:	88 45 e4             	mov    %al,-0x1c(%ebp)
f010411c:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104123:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104127:	8a 45 ef             	mov    -0x11(%ebp),%al
f010412a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010412d:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f010412e:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104132:	77 48                	ja     f010417c <kclock_start+0x6d>
f0104134:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f010413b:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f010413f:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104142:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104145:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f0104146:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f010414a:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f010414f:	99                   	cltd   
f0104150:	f7 fb                	idiv   %ebx
f0104152:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104158:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f010415c:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104161:	99                   	cltd   
f0104162:	f7 fb                	idiv   %ebx
f0104164:	89 c3                	mov    %eax,%ebx
f0104166:	89 c8                	mov    %ecx,%eax
f0104168:	99                   	cltd   
f0104169:	f7 fb                	idiv   %ebx
f010416b:	0f b7 c0             	movzwl %ax,%eax
f010416e:	83 ec 0c             	sub    $0xc,%esp
f0104171:	50                   	push   %eax
f0104172:	e8 b8 01 00 00       	call   f010432f <kclock_write_cnt0_LSB_first>
f0104177:	83 c4 10             	add    $0x10,%esp
f010417a:	eb 13                	jmp    f010418f <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f010417c:	6a 35                	push   $0x35
f010417e:	68 98 5c 13 f0       	push   $0xf0135c98
f0104183:	6a 33                	push   $0x33
f0104185:	68 f4 5c 13 f0       	push   $0xf0135cf4
f010418a:	e8 76 c0 ff ff       	call   f0100205 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010418f:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0104195:	0f b7 c0             	movzwl %ax,%eax
f0104198:	25 fe ff 00 00       	and    $0xfffe,%eax
f010419d:	83 ec 0c             	sub    $0xc,%esp
f01041a0:	50                   	push   %eax
f01041a1:	e8 bc 1b 00 00       	call   f0105d62 <irq_setmask_8259A>
f01041a6:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f01041a9:	90                   	nop
f01041aa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01041ad:	c9                   	leave  
f01041ae:	c3                   	ret    

f01041af <kclock_stop>:

void
kclock_stop(void)
{
f01041af:	55                   	push   %ebp
f01041b0:	89 e5                	mov    %esp,%ebp
f01041b2:	83 ec 18             	sub    $0x18,%esp
f01041b5:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01041bc:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01041c0:	8a 45 f3             	mov    -0xd(%ebp),%al
f01041c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01041c6:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f01041c7:	83 ec 0c             	sub    $0xc,%esp
f01041ca:	68 ff ff 00 00       	push   $0xffff
f01041cf:	e8 8e 1b 00 00       	call   f0105d62 <irq_setmask_8259A>
f01041d4:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f01041d7:	90                   	nop
f01041d8:	c9                   	leave  
f01041d9:	c3                   	ret    

f01041da <kclock_resume>:

void
kclock_resume(void)
{
f01041da:	55                   	push   %ebp
f01041db:	89 e5                	mov    %esp,%ebp
f01041dd:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f01041e0:	e8 8c 01 00 00       	call   f0104371 <kclock_read_cnt0>
f01041e5:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f01041e9:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f01041ee:	77 06                	ja     f01041f6 <kclock_resume+0x1c>
	{
		cnt0 = 20;
f01041f0:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f01041f6:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f01041fa:	83 e0 01             	and    $0x1,%eax
f01041fd:	66 85 c0             	test   %ax,%ax
f0104200:	74 09                	je     f010420b <kclock_resume+0x31>
		cnt0++;
f0104202:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104206:	40                   	inc    %eax
f0104207:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f010420b:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104212:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104216:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104219:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010421c:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f010421d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104221:	83 ec 0c             	sub    $0xc,%esp
f0104224:	50                   	push   %eax
f0104225:	e8 05 01 00 00       	call   f010432f <kclock_write_cnt0_LSB_first>
f010422a:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010422d:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0104233:	0f b7 c0             	movzwl %ax,%eax
f0104236:	25 fe ff 00 00       	and    $0xfffe,%eax
f010423b:	83 ec 0c             	sub    $0xc,%esp
f010423e:	50                   	push   %eax
f010423f:	e8 1e 1b 00 00       	call   f0105d62 <irq_setmask_8259A>
f0104244:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f0104247:	90                   	nop
f0104248:	c9                   	leave  
f0104249:	c3                   	ret    

f010424a <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f010424a:	55                   	push   %ebp
f010424b:	89 e5                	mov    %esp,%ebp
f010424d:	83 ec 28             	sub    $0x28,%esp
f0104250:	8b 45 08             	mov    0x8(%ebp),%eax
f0104253:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104256:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f010425d:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104261:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104264:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104267:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104268:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f010426c:	83 ec 0c             	sub    $0xc,%esp
f010426f:	50                   	push   %eax
f0104270:	e8 ba 00 00 00       	call   f010432f <kclock_write_cnt0_LSB_first>
f0104275:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104278:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f010427e:	0f b7 c0             	movzwl %ax,%eax
f0104281:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104286:	83 ec 0c             	sub    $0xc,%esp
f0104289:	50                   	push   %eax
f010428a:	e8 d3 1a 00 00       	call   f0105d62 <irq_setmask_8259A>
f010428f:	83 c4 10             	add    $0x10,%esp

}
f0104292:	90                   	nop
f0104293:	c9                   	leave  
f0104294:	c3                   	ret    

f0104295 <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f0104295:	55                   	push   %ebp
f0104296:	89 e5                	mov    %esp,%ebp
f0104298:	53                   	push   %ebx
f0104299:	83 ec 24             	sub    $0x24,%esp
f010429c:	8b 45 08             	mov    0x8(%ebp),%eax
f010429f:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f01042a2:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f01042a6:	77 6c                	ja     f0104314 <kclock_set_quantum+0x7f>
	{
		int cnt = TIMER_DIV((1000/quantum_in_ms));
f01042a8:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01042ac:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f01042b1:	99                   	cltd   
f01042b2:	f7 fb                	idiv   %ebx
f01042b4:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f01042ba:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01042be:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01042c3:	99                   	cltd   
f01042c4:	f7 fb                	idiv   %ebx
f01042c6:	89 c3                	mov    %eax,%ebx
f01042c8:	89 c8                	mov    %ecx,%eax
f01042ca:	99                   	cltd   
f01042cb:	f7 fb                	idiv   %ebx
f01042cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cnt%2 == 1)
f01042d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01042d3:	25 01 00 00 80       	and    $0x80000001,%eax
f01042d8:	85 c0                	test   %eax,%eax
f01042da:	79 05                	jns    f01042e1 <kclock_set_quantum+0x4c>
f01042dc:	48                   	dec    %eax
f01042dd:	83 c8 fe             	or     $0xfffffffe,%eax
f01042e0:	40                   	inc    %eax
f01042e1:	83 f8 01             	cmp    $0x1,%eax
f01042e4:	75 03                	jne    f01042e9 <kclock_set_quantum+0x54>
			cnt++;
f01042e6:	ff 45 f4             	incl   -0xc(%ebp)
f01042e9:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01042f0:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01042f4:	8a 45 ef             	mov    -0x11(%ebp),%al
f01042f7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01042fa:	ee                   	out    %al,(%dx)

		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f01042fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01042fe:	0f b7 c0             	movzwl %ax,%eax
f0104301:	83 ec 0c             	sub    $0xc,%esp
f0104304:	50                   	push   %eax
f0104305:	e8 25 00 00 00       	call   f010432f <kclock_write_cnt0_LSB_first>
f010430a:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f010430d:	e8 9d fe ff ff       	call   f01041af <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0104312:	eb 16                	jmp    f010432a <kclock_set_quantum+0x95>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104314:	6a 35                	push   $0x35
f0104316:	68 98 5c 13 f0       	push   $0xf0135c98
f010431b:	68 c9 00 00 00       	push   $0xc9
f0104320:	68 f4 5c 13 f0       	push   $0xf0135cf4
f0104325:	e8 db be ff ff       	call   f0100205 <_panic>
	}
}
f010432a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010432d:	c9                   	leave  
f010432e:	c3                   	ret    

f010432f <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f010432f:	55                   	push   %ebp
f0104330:	89 e5                	mov    %esp,%ebp
f0104332:	83 ec 14             	sub    $0x14,%esp
f0104335:	8b 45 08             	mov    0x8(%ebp),%eax
f0104338:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f010433c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010433f:	0f b6 c0             	movzbl %al,%eax
f0104342:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f0104349:	88 45 f6             	mov    %al,-0xa(%ebp)
f010434c:	8a 45 f6             	mov    -0xa(%ebp),%al
f010434f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104352:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104353:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104356:	66 c1 e8 08          	shr    $0x8,%ax
f010435a:	0f b6 c0             	movzbl %al,%eax
f010435d:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0104364:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104367:	8a 45 f7             	mov    -0x9(%ebp),%al
f010436a:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010436d:	ee                   	out    %al,(%dx)
}
f010436e:	90                   	nop
f010436f:	c9                   	leave  
f0104370:	c3                   	ret    

f0104371 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104371:	55                   	push   %ebp
f0104372:	89 e5                	mov    %esp,%ebp
f0104374:	83 ec 20             	sub    $0x20,%esp
f0104377:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010437e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104381:	89 c2                	mov    %eax,%edx
f0104383:	ec                   	in     (%dx),%al
f0104384:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0104387:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f010438a:	88 45 ff             	mov    %al,-0x1(%ebp)
f010438d:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104394:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104397:	89 c2                	mov    %eax,%edx
f0104399:	ec                   	in     (%dx),%al
f010439a:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f010439d:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f01043a0:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f01043a3:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f01043a7:	c1 e0 08             	shl    $0x8,%eax
f01043aa:	89 c2                	mov    %eax,%edx
f01043ac:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f01043b0:	09 d0                	or     %edx,%eax
f01043b2:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f01043b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01043b9:	c9                   	leave  
f01043ba:	c3                   	ret    

f01043bb <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f01043bb:	55                   	push   %ebp
f01043bc:	89 e5                	mov    %esp,%ebp
f01043be:	83 ec 30             	sub    $0x30,%esp
f01043c1:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043c8:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01043cb:	89 c2                	mov    %eax,%edx
f01043cd:	ec                   	in     (%dx),%al
f01043ce:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f01043d1:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f01043d4:	88 45 ff             	mov    %al,-0x1(%ebp)
f01043d7:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01043de:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01043e2:	8a 45 dc             	mov    -0x24(%ebp),%al
f01043e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01043e8:	ee                   	out    %al,(%dx)
f01043e9:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01043f3:	89 c2                	mov    %eax,%edx
f01043f5:	ec                   	in     (%dx),%al
f01043f6:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f01043f9:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f01043fc:	88 45 f3             	mov    %al,-0xd(%ebp)
f01043ff:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104406:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104409:	89 c2                	mov    %eax,%edx
f010440b:	ec                   	in     (%dx),%al
f010440c:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f010440f:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104412:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104415:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f0104419:	c1 e0 08             	shl    $0x8,%eax
f010441c:	89 c2                	mov    %eax,%edx
f010441e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104422:	09 d0                	or     %edx,%eax
f0104424:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f0104428:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f010442c:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104433:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104436:	8a 45 df             	mov    -0x21(%ebp),%al
f0104439:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010443c:	ee                   	out    %al,(%dx)

	return cnt0 ;
f010443d:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104440:	c9                   	leave  
f0104441:	c3                   	ret    

f0104442 <isSchedMethodRR>:
//void on_clock_update_WS_time_stamps();
extern void cleanup_buffers(struct Env* e);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f0104442:	55                   	push   %ebp
f0104443:	89 e5                	mov    %esp,%ebp
f0104445:	a1 c8 b8 85 f0       	mov    0xf085b8c8,%eax
f010444a:	85 c0                	test   %eax,%eax
f010444c:	75 07                	jne    f0104455 <isSchedMethodRR+0x13>
f010444e:	b8 01 00 00 00       	mov    $0x1,%eax
f0104453:	eb 05                	jmp    f010445a <isSchedMethodRR+0x18>
f0104455:	b8 00 00 00 00       	mov    $0x0,%eax
f010445a:	5d                   	pop    %ebp
f010445b:	c3                   	ret    

f010445c <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f010445c:	55                   	push   %ebp
f010445d:	89 e5                	mov    %esp,%ebp
f010445f:	a1 c8 b8 85 f0       	mov    0xf085b8c8,%eax
f0104464:	83 f8 01             	cmp    $0x1,%eax
f0104467:	75 07                	jne    f0104470 <isSchedMethodMLFQ+0x14>
f0104469:	b8 01 00 00 00       	mov    $0x1,%eax
f010446e:	eb 05                	jmp    f0104475 <isSchedMethodMLFQ+0x19>
f0104470:	b8 00 00 00 00       	mov    $0x0,%eax
f0104475:	5d                   	pop    %ebp
f0104476:	c3                   	ret    

f0104477 <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f0104477:	55                   	push   %ebp
f0104478:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f010447a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010447e:	74 1d                	je     f010449d <init_queue+0x26>
	{
		LIST_INIT(queue);
f0104480:	8b 45 08             	mov    0x8(%ebp),%eax
f0104483:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104489:	8b 45 08             	mov    0x8(%ebp),%eax
f010448c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104493:	8b 45 08             	mov    0x8(%ebp),%eax
f0104496:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f010449d:	90                   	nop
f010449e:	5d                   	pop    %ebp
f010449f:	c3                   	ret    

f01044a0 <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f01044a0:	55                   	push   %ebp
f01044a1:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f01044a3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01044a7:	74 08                	je     f01044b1 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f01044a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01044ac:	8b 40 0c             	mov    0xc(%eax),%eax
f01044af:	eb 05                	jmp    f01044b6 <queue_size+0x16>
	}
	else
	{
		return 0;
f01044b1:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f01044b6:	5d                   	pop    %ebp
f01044b7:	c3                   	ret    

f01044b8 <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f01044b8:	55                   	push   %ebp
f01044b9:	89 e5                	mov    %esp,%ebp
f01044bb:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f01044be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01044c2:	75 16                	jne    f01044da <enqueue+0x22>
f01044c4:	68 08 5d 13 f0       	push   $0xf0135d08
f01044c9:	68 16 5d 13 f0       	push   $0xf0135d16
f01044ce:	6a 2d                	push   $0x2d
f01044d0:	68 2b 5d 13 f0       	push   $0xf0135d2b
f01044d5:	e8 2b bd ff ff       	call   f0100205 <_panic>
	if(env != NULL)
f01044da:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044de:	74 66                	je     f0104546 <enqueue+0x8e>
	{
		LIST_INSERT_HEAD(queue, env);
f01044e0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044e4:	75 14                	jne    f01044fa <enqueue+0x42>
f01044e6:	83 ec 04             	sub    $0x4,%esp
f01044e9:	68 3c 5d 13 f0       	push   $0xf0135d3c
f01044ee:	6a 30                	push   $0x30
f01044f0:	68 2b 5d 13 f0       	push   $0xf0135d2b
f01044f5:	e8 0b bd ff ff       	call   f0100205 <_panic>
f01044fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01044fd:	8b 10                	mov    (%eax),%edx
f01044ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104502:	89 50 44             	mov    %edx,0x44(%eax)
f0104505:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104508:	8b 40 44             	mov    0x44(%eax),%eax
f010450b:	85 c0                	test   %eax,%eax
f010450d:	74 0d                	je     f010451c <enqueue+0x64>
f010450f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104512:	8b 00                	mov    (%eax),%eax
f0104514:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104517:	89 50 48             	mov    %edx,0x48(%eax)
f010451a:	eb 09                	jmp    f0104525 <enqueue+0x6d>
f010451c:	8b 45 08             	mov    0x8(%ebp),%eax
f010451f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104522:	89 50 04             	mov    %edx,0x4(%eax)
f0104525:	8b 45 08             	mov    0x8(%ebp),%eax
f0104528:	8b 55 0c             	mov    0xc(%ebp),%edx
f010452b:	89 10                	mov    %edx,(%eax)
f010452d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104530:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104537:	8b 45 08             	mov    0x8(%ebp),%eax
f010453a:	8b 40 0c             	mov    0xc(%eax),%eax
f010453d:	8d 50 01             	lea    0x1(%eax),%edx
f0104540:	8b 45 08             	mov    0x8(%ebp),%eax
f0104543:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104546:	90                   	nop
f0104547:	c9                   	leave  
f0104548:	c3                   	ret    

f0104549 <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f0104549:	55                   	push   %ebp
f010454a:	89 e5                	mov    %esp,%ebp
f010454c:	83 ec 18             	sub    $0x18,%esp
	if (queue == NULL) return NULL;
f010454f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104553:	75 0a                	jne    f010455f <dequeue+0x16>
f0104555:	b8 00 00 00 00       	mov    $0x0,%eax
f010455a:	e9 a0 00 00 00       	jmp    f01045ff <dequeue+0xb6>
	struct Env* envItem = LIST_LAST(queue);
f010455f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104562:	8b 40 04             	mov    0x4(%eax),%eax
f0104565:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f0104568:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010456c:	0f 84 8a 00 00 00    	je     f01045fc <dequeue+0xb3>
	{
		LIST_REMOVE(queue, envItem);
f0104572:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104576:	75 14                	jne    f010458c <dequeue+0x43>
f0104578:	83 ec 04             	sub    $0x4,%esp
f010457b:	68 5f 5d 13 f0       	push   $0xf0135d5f
f0104580:	6a 3a                	push   $0x3a
f0104582:	68 2b 5d 13 f0       	push   $0xf0135d2b
f0104587:	e8 79 bc ff ff       	call   f0100205 <_panic>
f010458c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010458f:	8b 40 44             	mov    0x44(%eax),%eax
f0104592:	85 c0                	test   %eax,%eax
f0104594:	74 11                	je     f01045a7 <dequeue+0x5e>
f0104596:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104599:	8b 40 44             	mov    0x44(%eax),%eax
f010459c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010459f:	8b 52 48             	mov    0x48(%edx),%edx
f01045a2:	89 50 48             	mov    %edx,0x48(%eax)
f01045a5:	eb 0c                	jmp    f01045b3 <dequeue+0x6a>
f01045a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045aa:	8b 50 48             	mov    0x48(%eax),%edx
f01045ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01045b0:	89 50 04             	mov    %edx,0x4(%eax)
f01045b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045b6:	8b 40 48             	mov    0x48(%eax),%eax
f01045b9:	85 c0                	test   %eax,%eax
f01045bb:	74 11                	je     f01045ce <dequeue+0x85>
f01045bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045c0:	8b 40 48             	mov    0x48(%eax),%eax
f01045c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045c6:	8b 52 44             	mov    0x44(%edx),%edx
f01045c9:	89 50 44             	mov    %edx,0x44(%eax)
f01045cc:	eb 0b                	jmp    f01045d9 <dequeue+0x90>
f01045ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045d1:	8b 50 44             	mov    0x44(%eax),%edx
f01045d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01045d7:	89 10                	mov    %edx,(%eax)
f01045d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045dc:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01045e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045e6:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01045ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01045f0:	8b 40 0c             	mov    0xc(%eax),%eax
f01045f3:	8d 50 ff             	lea    -0x1(%eax),%edx
f01045f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01045f9:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f01045fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01045ff:	c9                   	leave  
f0104600:	c3                   	ret    

f0104601 <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f0104601:	55                   	push   %ebp
f0104602:	89 e5                	mov    %esp,%ebp
f0104604:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f0104607:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010460b:	75 16                	jne    f0104623 <remove_from_queue+0x22>
f010460d:	68 08 5d 13 f0       	push   $0xf0135d08
f0104612:	68 16 5d 13 f0       	push   $0xf0135d16
f0104617:	6a 41                	push   $0x41
f0104619:	68 2b 5d 13 f0       	push   $0xf0135d2b
f010461e:	e8 e2 bb ff ff       	call   f0100205 <_panic>

	if (e != NULL)
f0104623:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104627:	0f 84 8a 00 00 00    	je     f01046b7 <remove_from_queue+0xb6>
	{
		LIST_REMOVE(queue, e);
f010462d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104631:	75 14                	jne    f0104647 <remove_from_queue+0x46>
f0104633:	83 ec 04             	sub    $0x4,%esp
f0104636:	68 5f 5d 13 f0       	push   $0xf0135d5f
f010463b:	6a 45                	push   $0x45
f010463d:	68 2b 5d 13 f0       	push   $0xf0135d2b
f0104642:	e8 be bb ff ff       	call   f0100205 <_panic>
f0104647:	8b 45 0c             	mov    0xc(%ebp),%eax
f010464a:	8b 40 44             	mov    0x44(%eax),%eax
f010464d:	85 c0                	test   %eax,%eax
f010464f:	74 11                	je     f0104662 <remove_from_queue+0x61>
f0104651:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104654:	8b 40 44             	mov    0x44(%eax),%eax
f0104657:	8b 55 0c             	mov    0xc(%ebp),%edx
f010465a:	8b 52 48             	mov    0x48(%edx),%edx
f010465d:	89 50 48             	mov    %edx,0x48(%eax)
f0104660:	eb 0c                	jmp    f010466e <remove_from_queue+0x6d>
f0104662:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104665:	8b 50 48             	mov    0x48(%eax),%edx
f0104668:	8b 45 08             	mov    0x8(%ebp),%eax
f010466b:	89 50 04             	mov    %edx,0x4(%eax)
f010466e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104671:	8b 40 48             	mov    0x48(%eax),%eax
f0104674:	85 c0                	test   %eax,%eax
f0104676:	74 11                	je     f0104689 <remove_from_queue+0x88>
f0104678:	8b 45 0c             	mov    0xc(%ebp),%eax
f010467b:	8b 40 48             	mov    0x48(%eax),%eax
f010467e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104681:	8b 52 44             	mov    0x44(%edx),%edx
f0104684:	89 50 44             	mov    %edx,0x44(%eax)
f0104687:	eb 0b                	jmp    f0104694 <remove_from_queue+0x93>
f0104689:	8b 45 0c             	mov    0xc(%ebp),%eax
f010468c:	8b 50 44             	mov    0x44(%eax),%edx
f010468f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104692:	89 10                	mov    %edx,(%eax)
f0104694:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104697:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010469e:	8b 45 0c             	mov    0xc(%ebp),%eax
f01046a1:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01046a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01046ab:	8b 40 0c             	mov    0xc(%eax),%eax
f01046ae:	8d 50 ff             	lea    -0x1(%eax),%edx
f01046b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01046b4:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f01046b7:	90                   	nop
f01046b8:	c9                   	leave  
f01046b9:	c3                   	ret    

f01046ba <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f01046ba:	55                   	push   %ebp
f01046bb:	89 e5                	mov    %esp,%ebp
f01046bd:	83 ec 10             	sub    $0x10,%esp
	if (queue == NULL) return NULL;
f01046c0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01046c4:	75 07                	jne    f01046cd <find_env_in_queue+0x13>
f01046c6:	b8 00 00 00 00       	mov    $0x0,%eax
f01046cb:	eb 58                	jmp    f0104725 <find_env_in_queue+0x6b>

	struct Env * ptr_env=NULL;
f01046cd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f01046d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01046d7:	8b 00                	mov    (%eax),%eax
f01046d9:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046dc:	eb 19                	jmp    f01046f7 <find_env_in_queue+0x3d>
	{
		if(ptr_env->env_id == envID)
f01046de:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046e1:	8b 40 4c             	mov    0x4c(%eax),%eax
f01046e4:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01046e7:	75 05                	jne    f01046ee <find_env_in_queue+0x34>
		{
			return ptr_env;
f01046e9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046ec:	eb 37                	jmp    f0104725 <find_env_in_queue+0x6b>
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	if (queue == NULL) return NULL;

	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f01046ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01046f1:	8b 40 08             	mov    0x8(%eax),%eax
f01046f4:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046f7:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01046fb:	74 08                	je     f0104705 <find_env_in_queue+0x4b>
f01046fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104700:	8b 40 44             	mov    0x44(%eax),%eax
f0104703:	eb 05                	jmp    f010470a <find_env_in_queue+0x50>
f0104705:	b8 00 00 00 00       	mov    $0x0,%eax
f010470a:	8b 55 08             	mov    0x8(%ebp),%edx
f010470d:	89 42 08             	mov    %eax,0x8(%edx)
f0104710:	8b 45 08             	mov    0x8(%ebp),%eax
f0104713:	8b 40 08             	mov    0x8(%eax),%eax
f0104716:	85 c0                	test   %eax,%eax
f0104718:	75 c4                	jne    f01046de <find_env_in_queue+0x24>
f010471a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010471e:	75 be                	jne    f01046de <find_env_in_queue+0x24>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f0104720:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0104725:	c9                   	leave  
f0104726:	c3                   	ret    

f0104727 <fos_scheduler_MLFQ>:
//==================================================================================//

struct Env* fos_scheduler_MLFQ()
{
f0104727:	55                   	push   %ebp
f0104728:	89 e5                	mov    %esp,%ebp
f010472a:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	// your code is here, remove the panic and write your code
	panic("fos_scheduler_MLFQ() is not implemented yet...!!");
f010472d:	83 ec 04             	sub    $0x4,%esp
f0104730:	68 80 5d 13 f0       	push   $0xf0135d80
f0104735:	6a 5e                	push   $0x5e
f0104737:	68 2b 5d 13 f0       	push   $0xf0135d2b
f010473c:	e8 c4 ba ff ff       	call   f0100205 <_panic>

f0104741 <fos_scheduler>:

}

void
fos_scheduler(void)
{
f0104741:	55                   	push   %ebp
f0104742:	89 e5                	mov    %esp,%ebp
f0104744:	83 ec 18             	sub    $0x18,%esp
	chk1();
f0104747:	e8 da c5 02 00       	call   f0130d26 <chk1>
	scheduler_status = SCH_STARTED;
f010474c:	c7 05 d4 b8 85 f0 01 	movl   $0x1,0xf085b8d4
f0104753:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f0104756:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f010475d:	a1 c8 b8 85 f0       	mov    0xf085b8c8,%eax
f0104762:	85 c0                	test   %eax,%eax
f0104764:	75 4d                	jne    f01047b3 <fos_scheduler+0x72>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f0104766:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010476b:	85 c0                	test   %eax,%eax
f010476d:	74 18                	je     f0104787 <fos_scheduler+0x46>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f010476f:	8b 15 74 af 85 f0    	mov    0xf085af74,%edx
f0104775:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f010477a:	83 ec 08             	sub    $0x8,%esp
f010477d:	52                   	push   %edx
f010477e:	50                   	push   %eax
f010477f:	e8 34 fd ff ff       	call   f01044b8 <enqueue>
f0104784:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f0104787:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f010478c:	83 ec 0c             	sub    $0xc,%esp
f010478f:	50                   	push   %eax
f0104790:	e8 b4 fd ff ff       	call   f0104549 <dequeue>
f0104795:	83 c4 10             	add    $0x10,%esp
f0104798:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f010479b:	a1 a8 b8 85 f0       	mov    0xf085b8a8,%eax
f01047a0:	8a 00                	mov    (%eax),%al
f01047a2:	0f b6 c0             	movzbl %al,%eax
f01047a5:	83 ec 0c             	sub    $0xc,%esp
f01047a8:	50                   	push   %eax
f01047a9:	e8 e7 fa ff ff       	call   f0104295 <kclock_set_quantum>
f01047ae:	83 c4 10             	add    $0x10,%esp
f01047b1:	eb 12                	jmp    f01047c5 <fos_scheduler+0x84>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f01047b3:	a1 c8 b8 85 f0       	mov    0xf085b8c8,%eax
f01047b8:	83 f8 01             	cmp    $0x1,%eax
f01047bb:	75 08                	jne    f01047c5 <fos_scheduler+0x84>
	{
		next_env = fos_scheduler_MLFQ();
f01047bd:	e8 65 ff ff ff       	call   f0104727 <fos_scheduler_MLFQ>
f01047c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f01047c5:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f01047ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f01047cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01047d0:	a3 74 af 85 f0       	mov    %eax,0xf085af74
	chk2(next_env) ;
f01047d5:	83 ec 0c             	sub    $0xc,%esp
f01047d8:	ff 75 f4             	pushl  -0xc(%ebp)
f01047db:	e8 83 c5 02 00       	call   f0130d63 <chk2>
f01047e0:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f01047e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01047e6:	a3 74 af 85 f0       	mov    %eax,0xf085af74

	//sched_print_all();

	if(next_env != NULL)
f01047eb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01047ef:	74 0b                	je     f01047fc <fos_scheduler+0xbb>
	{
//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f01047f1:	83 ec 0c             	sub    $0xc,%esp
f01047f4:	ff 75 f4             	pushl  -0xc(%ebp)
f01047f7:	e8 2c 57 00 00       	call   f0109f28 <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f01047fc:	c7 05 74 af 85 f0 00 	movl   $0x0,0xf085af74
f0104803:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f0104806:	a1 28 b9 85 f0       	mov    0xf085b928,%eax
f010480b:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010480e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104811:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f0104814:	c7 05 d4 b8 85 f0 00 	movl   $0x0,0xf085b8d4
f010481b:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f010481e:	83 ec 0c             	sub    $0xc,%esp
f0104821:	6a 00                	push   $0x0
f0104823:	e8 0c c5 ff ff       	call   f0100d34 <run_command_prompt>
f0104828:	83 c4 10             	add    $0x10,%esp
f010482b:	eb f1                	jmp    f010481e <fos_scheduler+0xdd>

f010482d <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f010482d:	55                   	push   %ebp
f010482e:	89 e5                	mov    %esp,%ebp
f0104830:	83 ec 18             	sub    $0x18,%esp
f0104833:	8b 45 08             	mov    0x8(%ebp),%eax
f0104836:	88 45 f4             	mov    %al,-0xc(%ebp)


	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f0104839:	c6 05 fc b8 85 f0 01 	movb   $0x1,0xf085b8fc
#if USE_KHEAP
	sched_delete_ready_queues();
f0104840:	e8 e5 00 00 00       	call   f010492a <sched_delete_ready_queues>
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
f0104845:	83 ec 0c             	sub    $0xc,%esp
f0104848:	6a 10                	push   $0x10
f010484a:	e8 e1 31 00 00       	call   f0107a30 <kmalloc>
f010484f:	83 c4 10             	add    $0x10,%esp
f0104852:	a3 64 b8 85 f0       	mov    %eax,0xf085b864
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
f0104857:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f010485c:	0f b6 c0             	movzbl %al,%eax
f010485f:	83 ec 0c             	sub    $0xc,%esp
f0104862:	50                   	push   %eax
f0104863:	e8 c8 31 00 00       	call   f0107a30 <kmalloc>
f0104868:	83 c4 10             	add    $0x10,%esp
f010486b:	a3 a8 b8 85 f0       	mov    %eax,0xf085b8a8
#endif
	quantums[0] = quantum;
f0104870:	a1 a8 b8 85 f0       	mov    0xf085b8a8,%eax
f0104875:	8a 55 f4             	mov    -0xc(%ebp),%dl
f0104878:	88 10                	mov    %dl,(%eax)
	kclock_set_quantum(quantums[0]);
f010487a:	a1 a8 b8 85 f0       	mov    0xf085b8a8,%eax
f010487f:	8a 00                	mov    (%eax),%al
f0104881:	0f b6 c0             	movzbl %al,%eax
f0104884:	83 ec 0c             	sub    $0xc,%esp
f0104887:	50                   	push   %eax
f0104888:	e8 08 fa ff ff       	call   f0104295 <kclock_set_quantum>
f010488d:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f0104890:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0104895:	83 ec 0c             	sub    $0xc,%esp
f0104898:	50                   	push   %eax
f0104899:	e8 d9 fb ff ff       	call   f0104477 <init_queue>
f010489e:	83 c4 10             	add    $0x10,%esp

	//=========================================
	//DON'T CHANGE THESE LINES=================
	scheduler_status = SCH_STOPPED;
f01048a1:	c7 05 d4 b8 85 f0 00 	movl   $0x0,0xf085b8d4
f01048a8:	00 00 00 
	scheduler_method = SCH_RR;
f01048ab:	c7 05 c8 b8 85 f0 00 	movl   $0x0,0xf085b8c8
f01048b2:	00 00 00 
	//=========================================
	//=========================================
}
f01048b5:	90                   	nop
f01048b6:	c9                   	leave  
f01048b7:	c3                   	ret    

f01048b8 <sched_init_MLFQ>:

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f01048b8:	55                   	push   %ebp
f01048b9:	89 e5                	mov    %esp,%ebp
f01048bb:	83 ec 18             	sub    $0x18,%esp
f01048be:	8b 45 08             	mov    0x8(%ebp),%eax
f01048c1:	88 45 f4             	mov    %al,-0xc(%ebp)
#if USE_KHEAP
	//=========================================
	//DON'T CHANGE THESE LINES=================
	sched_delete_ready_queues();
f01048c4:	e8 61 00 00 00       	call   f010492a <sched_delete_ready_queues>

	//=========================================
	//=========================================
	// your code is here, remove the panic and write your code
	panic("sched_init_MLFQ() is not implemented yet...!!");
f01048c9:	83 ec 04             	sub    $0x4,%esp
f01048cc:	68 b4 5d 13 f0       	push   $0xf0135db4
f01048d1:	68 d1 00 00 00       	push   $0xd1
f01048d6:	68 2b 5d 13 f0       	push   $0xf0135d2b
f01048db:	e8 25 b9 ff ff       	call   f0100205 <_panic>

f01048e0 <sched_init>:

}


void sched_init()
{
f01048e0:	55                   	push   %ebp
f01048e1:	89 e5                	mov    %esp,%ebp
f01048e3:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f01048e6:	c7 05 84 b8 85 f0 00 	movl   $0x0,0xf085b884
f01048ed:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f01048f0:	83 ec 0c             	sub    $0xc,%esp
f01048f3:	6a 0a                	push   $0xa
f01048f5:	e8 33 ff ff ff       	call   f010482d <sched_init_RR>
f01048fa:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f01048fd:	83 ec 0c             	sub    $0xc,%esp
f0104900:	68 b8 b8 85 f0       	push   $0xf085b8b8
f0104905:	e8 6d fb ff ff       	call   f0104477 <init_queue>
f010490a:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f010490d:	83 ec 0c             	sub    $0xc,%esp
f0104910:	68 70 b8 85 f0       	push   $0xf085b870
f0104915:	e8 5d fb ff ff       	call   f0104477 <init_queue>
f010491a:	83 c4 10             	add    $0x10,%esp
	scheduler_status = SCH_STOPPED;
f010491d:	c7 05 d4 b8 85 f0 00 	movl   $0x0,0xf085b8d4
f0104924:	00 00 00 
}
f0104927:	90                   	nop
f0104928:	c9                   	leave  
f0104929:	c3                   	ret    

f010492a <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f010492a:	55                   	push   %ebp
f010492b:	89 e5                	mov    %esp,%ebp
f010492d:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	if (env_ready_queues != NULL)
f0104930:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0104935:	85 c0                	test   %eax,%eax
f0104937:	74 11                	je     f010494a <sched_delete_ready_queues+0x20>
		kfree(env_ready_queues);
f0104939:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f010493e:	83 ec 0c             	sub    $0xc,%esp
f0104941:	50                   	push   %eax
f0104942:	e8 d2 31 00 00       	call   f0107b19 <kfree>
f0104947:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
f010494a:	a1 a8 b8 85 f0       	mov    0xf085b8a8,%eax
f010494f:	85 c0                	test   %eax,%eax
f0104951:	74 11                	je     f0104964 <sched_delete_ready_queues+0x3a>
		kfree(quantums);
f0104953:	a1 a8 b8 85 f0       	mov    0xf085b8a8,%eax
f0104958:	83 ec 0c             	sub    $0xc,%esp
f010495b:	50                   	push   %eax
f010495c:	e8 b8 31 00 00       	call   f0107b19 <kfree>
f0104961:	83 c4 10             	add    $0x10,%esp
#endif
}
f0104964:	90                   	nop
f0104965:	c9                   	leave  
f0104966:	c3                   	ret    

f0104967 <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f0104967:	55                   	push   %ebp
f0104968:	89 e5                	mov    %esp,%ebp
f010496a:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f010496d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104971:	74 1e                	je     f0104991 <sched_insert_ready+0x2a>
	{
		env->env_status = ENV_READY ;
f0104973:	8b 45 08             	mov    0x8(%ebp),%eax
f0104976:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f010497d:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0104982:	83 ec 08             	sub    $0x8,%esp
f0104985:	ff 75 08             	pushl  0x8(%ebp)
f0104988:	50                   	push   %eax
f0104989:	e8 2a fb ff ff       	call   f01044b8 <enqueue>
f010498e:	83 c4 10             	add    $0x10,%esp
	}
}
f0104991:	90                   	nop
f0104992:	c9                   	leave  
f0104993:	c3                   	ret    

f0104994 <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f0104994:	55                   	push   %ebp
f0104995:	89 e5                	mov    %esp,%ebp
f0104997:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f010499a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010499e:	0f 84 fe 00 00 00    	je     f0104aa2 <sched_remove_ready+0x10e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01049a4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01049ab:	e9 e1 00 00 00       	jmp    f0104a91 <sched_remove_ready+0xfd>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f01049b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01049b3:	8b 40 4c             	mov    0x4c(%eax),%eax
f01049b6:	89 c2                	mov    %eax,%edx
f01049b8:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f01049bd:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01049c0:	c1 e1 04             	shl    $0x4,%ecx
f01049c3:	01 c8                	add    %ecx,%eax
f01049c5:	52                   	push   %edx
f01049c6:	50                   	push   %eax
f01049c7:	e8 ee fc ff ff       	call   f01046ba <find_env_in_queue>
f01049cc:	83 c4 08             	add    $0x8,%esp
f01049cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f01049d2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01049d6:	0f 84 b2 00 00 00    	je     f0104a8e <sched_remove_ready+0xfa>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f01049dc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049e0:	75 17                	jne    f01049f9 <sched_remove_ready+0x65>
f01049e2:	83 ec 04             	sub    $0x4,%esp
f01049e5:	68 5f 5d 13 f0       	push   $0xf0135d5f
f01049ea:	68 0b 01 00 00       	push   $0x10b
f01049ef:	68 2b 5d 13 f0       	push   $0xf0135d2b
f01049f4:	e8 0c b8 ff ff       	call   f0100205 <_panic>
f01049f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01049fc:	8b 40 44             	mov    0x44(%eax),%eax
f01049ff:	85 c0                	test   %eax,%eax
f0104a01:	74 11                	je     f0104a14 <sched_remove_ready+0x80>
f0104a03:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a06:	8b 40 44             	mov    0x44(%eax),%eax
f0104a09:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a0c:	8b 52 48             	mov    0x48(%edx),%edx
f0104a0f:	89 50 48             	mov    %edx,0x48(%eax)
f0104a12:	eb 16                	jmp    f0104a2a <sched_remove_ready+0x96>
f0104a14:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0104a19:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a1c:	c1 e2 04             	shl    $0x4,%edx
f0104a1f:	01 c2                	add    %eax,%edx
f0104a21:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a24:	8b 40 48             	mov    0x48(%eax),%eax
f0104a27:	89 42 04             	mov    %eax,0x4(%edx)
f0104a2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a2d:	8b 40 48             	mov    0x48(%eax),%eax
f0104a30:	85 c0                	test   %eax,%eax
f0104a32:	74 11                	je     f0104a45 <sched_remove_ready+0xb1>
f0104a34:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a37:	8b 40 48             	mov    0x48(%eax),%eax
f0104a3a:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a3d:	8b 52 44             	mov    0x44(%edx),%edx
f0104a40:	89 50 44             	mov    %edx,0x44(%eax)
f0104a43:	eb 15                	jmp    f0104a5a <sched_remove_ready+0xc6>
f0104a45:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0104a4a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a4d:	c1 e2 04             	shl    $0x4,%edx
f0104a50:	01 c2                	add    %eax,%edx
f0104a52:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a55:	8b 40 44             	mov    0x44(%eax),%eax
f0104a58:	89 02                	mov    %eax,(%edx)
f0104a5a:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a5d:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104a64:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a67:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104a6e:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0104a73:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a76:	c1 e2 04             	shl    $0x4,%edx
f0104a79:	01 d0                	add    %edx,%eax
f0104a7b:	8b 50 0c             	mov    0xc(%eax),%edx
f0104a7e:	4a                   	dec    %edx
f0104a7f:	89 50 0c             	mov    %edx,0xc(%eax)
				env->env_status = ENV_UNKNOWN;
f0104a82:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a85:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f0104a8c:	eb 14                	jmp    f0104aa2 <sched_remove_ready+0x10e>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104a8e:	ff 45 f4             	incl   -0xc(%ebp)
f0104a91:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0104a96:	0f b6 c0             	movzbl %al,%eax
f0104a99:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104a9c:	0f 8f 0e ff ff ff    	jg     f01049b0 <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f0104aa2:	c9                   	leave  
f0104aa3:	c3                   	ret    

f0104aa4 <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f0104aa4:	55                   	push   %ebp
f0104aa5:	89 e5                	mov    %esp,%ebp
f0104aa7:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104aaa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104aae:	74 1d                	je     f0104acd <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0104ab0:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ab3:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f0104aba:	83 ec 08             	sub    $0x8,%esp
f0104abd:	ff 75 08             	pushl  0x8(%ebp)
f0104ac0:	68 b8 b8 85 f0       	push   $0xf085b8b8
f0104ac5:	e8 ee f9 ff ff       	call   f01044b8 <enqueue>
f0104aca:	83 c4 10             	add    $0x10,%esp
	}
}
f0104acd:	90                   	nop
f0104ace:	c9                   	leave  
f0104acf:	c3                   	ret    

f0104ad0 <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f0104ad0:	55                   	push   %ebp
f0104ad1:	89 e5                	mov    %esp,%ebp
f0104ad3:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104ad6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ada:	0f 84 92 00 00 00    	je     f0104b72 <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0104ae0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ae4:	75 17                	jne    f0104afd <sched_remove_new+0x2d>
f0104ae6:	83 ec 04             	sub    $0x4,%esp
f0104ae9:	68 5f 5d 13 f0       	push   $0xf0135d5f
f0104aee:	68 1f 01 00 00       	push   $0x11f
f0104af3:	68 2b 5d 13 f0       	push   $0xf0135d2b
f0104af8:	e8 08 b7 ff ff       	call   f0100205 <_panic>
f0104afd:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b00:	8b 40 44             	mov    0x44(%eax),%eax
f0104b03:	85 c0                	test   %eax,%eax
f0104b05:	74 11                	je     f0104b18 <sched_remove_new+0x48>
f0104b07:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b0a:	8b 40 44             	mov    0x44(%eax),%eax
f0104b0d:	8b 55 08             	mov    0x8(%ebp),%edx
f0104b10:	8b 52 48             	mov    0x48(%edx),%edx
f0104b13:	89 50 48             	mov    %edx,0x48(%eax)
f0104b16:	eb 0b                	jmp    f0104b23 <sched_remove_new+0x53>
f0104b18:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b1b:	8b 40 48             	mov    0x48(%eax),%eax
f0104b1e:	a3 bc b8 85 f0       	mov    %eax,0xf085b8bc
f0104b23:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b26:	8b 40 48             	mov    0x48(%eax),%eax
f0104b29:	85 c0                	test   %eax,%eax
f0104b2b:	74 11                	je     f0104b3e <sched_remove_new+0x6e>
f0104b2d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b30:	8b 40 48             	mov    0x48(%eax),%eax
f0104b33:	8b 55 08             	mov    0x8(%ebp),%edx
f0104b36:	8b 52 44             	mov    0x44(%edx),%edx
f0104b39:	89 50 44             	mov    %edx,0x44(%eax)
f0104b3c:	eb 0b                	jmp    f0104b49 <sched_remove_new+0x79>
f0104b3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b41:	8b 40 44             	mov    0x44(%eax),%eax
f0104b44:	a3 b8 b8 85 f0       	mov    %eax,0xf085b8b8
f0104b49:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b4c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104b53:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b56:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104b5d:	a1 c4 b8 85 f0       	mov    0xf085b8c4,%eax
f0104b62:	48                   	dec    %eax
f0104b63:	a3 c4 b8 85 f0       	mov    %eax,0xf085b8c4
		env->env_status = ENV_UNKNOWN;
f0104b68:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b6b:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104b72:	90                   	nop
f0104b73:	c9                   	leave  
f0104b74:	c3                   	ret    

f0104b75 <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f0104b75:	55                   	push   %ebp
f0104b76:	89 e5                	mov    %esp,%ebp
f0104b78:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104b7b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104b7f:	74 34                	je     f0104bb5 <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0104b81:	e8 3c 97 00 00       	call   f010e2c2 <isBufferingEnabled>
f0104b86:	84 c0                	test   %al,%al
f0104b88:	74 0e                	je     f0104b98 <sched_insert_exit+0x23>
f0104b8a:	83 ec 0c             	sub    $0xc,%esp
f0104b8d:	ff 75 08             	pushl  0x8(%ebp)
f0104b90:	e8 01 68 00 00       	call   f010b396 <cleanup_buffers>
f0104b95:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0104b98:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b9b:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f0104ba2:	83 ec 08             	sub    $0x8,%esp
f0104ba5:	ff 75 08             	pushl  0x8(%ebp)
f0104ba8:	68 70 b8 85 f0       	push   $0xf085b870
f0104bad:	e8 06 f9 ff ff       	call   f01044b8 <enqueue>
f0104bb2:	83 c4 10             	add    $0x10,%esp
	}
}
f0104bb5:	90                   	nop
f0104bb6:	c9                   	leave  
f0104bb7:	c3                   	ret    

f0104bb8 <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f0104bb8:	55                   	push   %ebp
f0104bb9:	89 e5                	mov    %esp,%ebp
f0104bbb:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104bbe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104bc2:	0f 84 92 00 00 00    	je     f0104c5a <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0104bc8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104bcc:	75 17                	jne    f0104be5 <sched_remove_exit+0x2d>
f0104bce:	83 ec 04             	sub    $0x4,%esp
f0104bd1:	68 5f 5d 13 f0       	push   $0xf0135d5f
f0104bd6:	68 31 01 00 00       	push   $0x131
f0104bdb:	68 2b 5d 13 f0       	push   $0xf0135d2b
f0104be0:	e8 20 b6 ff ff       	call   f0100205 <_panic>
f0104be5:	8b 45 08             	mov    0x8(%ebp),%eax
f0104be8:	8b 40 44             	mov    0x44(%eax),%eax
f0104beb:	85 c0                	test   %eax,%eax
f0104bed:	74 11                	je     f0104c00 <sched_remove_exit+0x48>
f0104bef:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bf2:	8b 40 44             	mov    0x44(%eax),%eax
f0104bf5:	8b 55 08             	mov    0x8(%ebp),%edx
f0104bf8:	8b 52 48             	mov    0x48(%edx),%edx
f0104bfb:	89 50 48             	mov    %edx,0x48(%eax)
f0104bfe:	eb 0b                	jmp    f0104c0b <sched_remove_exit+0x53>
f0104c00:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c03:	8b 40 48             	mov    0x48(%eax),%eax
f0104c06:	a3 74 b8 85 f0       	mov    %eax,0xf085b874
f0104c0b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c0e:	8b 40 48             	mov    0x48(%eax),%eax
f0104c11:	85 c0                	test   %eax,%eax
f0104c13:	74 11                	je     f0104c26 <sched_remove_exit+0x6e>
f0104c15:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c18:	8b 40 48             	mov    0x48(%eax),%eax
f0104c1b:	8b 55 08             	mov    0x8(%ebp),%edx
f0104c1e:	8b 52 44             	mov    0x44(%edx),%edx
f0104c21:	89 50 44             	mov    %edx,0x44(%eax)
f0104c24:	eb 0b                	jmp    f0104c31 <sched_remove_exit+0x79>
f0104c26:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c29:	8b 40 44             	mov    0x44(%eax),%eax
f0104c2c:	a3 70 b8 85 f0       	mov    %eax,0xf085b870
f0104c31:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c34:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104c3b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c3e:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104c45:	a1 7c b8 85 f0       	mov    0xf085b87c,%eax
f0104c4a:	48                   	dec    %eax
f0104c4b:	a3 7c b8 85 f0       	mov    %eax,0xf085b87c
		env->env_status = ENV_UNKNOWN;
f0104c50:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c53:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104c5a:	90                   	nop
f0104c5b:	c9                   	leave  
f0104c5c:	c3                   	ret    

f0104c5d <sched_print_all>:

void sched_print_all()
{
f0104c5d:	55                   	push   %ebp
f0104c5e:	89 e5                	mov    %esp,%ebp
f0104c60:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104c63:	a1 b8 b8 85 f0       	mov    0xf085b8b8,%eax
f0104c68:	85 c0                	test   %eax,%eax
f0104c6a:	74 6c                	je     f0104cd8 <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0104c6c:	83 ec 0c             	sub    $0xc,%esp
f0104c6f:	68 e4 5d 13 f0       	push   $0xf0135de4
f0104c74:	e8 95 c0 ff ff       	call   f0100d0e <cprintf>
f0104c79:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104c7c:	a1 b8 b8 85 f0       	mov    0xf085b8b8,%eax
f0104c81:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c84:	eb 29                	jmp    f0104caf <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104c86:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c89:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104c8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c92:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104c95:	83 ec 04             	sub    $0x4,%esp
f0104c98:	52                   	push   %edx
f0104c99:	50                   	push   %eax
f0104c9a:	68 06 5e 13 f0       	push   $0xf0135e06
f0104c9f:	e8 6a c0 ff ff       	call   f0100d0e <cprintf>
f0104ca4:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104ca7:	a1 c0 b8 85 f0       	mov    0xf085b8c0,%eax
f0104cac:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104caf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104cb3:	74 08                	je     f0104cbd <sched_print_all+0x60>
f0104cb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104cb8:	8b 40 44             	mov    0x44(%eax),%eax
f0104cbb:	eb 05                	jmp    f0104cc2 <sched_print_all+0x65>
f0104cbd:	b8 00 00 00 00       	mov    $0x0,%eax
f0104cc2:	a3 c0 b8 85 f0       	mov    %eax,0xf085b8c0
f0104cc7:	a1 c0 b8 85 f0       	mov    0xf085b8c0,%eax
f0104ccc:	85 c0                	test   %eax,%eax
f0104cce:	75 b6                	jne    f0104c86 <sched_print_all+0x29>
f0104cd0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104cd4:	75 b0                	jne    f0104c86 <sched_print_all+0x29>
f0104cd6:	eb 10                	jmp    f0104ce8 <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0104cd8:	83 ec 0c             	sub    $0xc,%esp
f0104cdb:	68 10 5e 13 f0       	push   $0xf0135e10
f0104ce0:	e8 29 c0 ff ff       	call   f0100d0e <cprintf>
f0104ce5:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104ce8:	83 ec 0c             	sub    $0xc,%esp
f0104ceb:	68 2c 5e 13 f0       	push   $0xf0135e2c
f0104cf0:	e8 19 c0 ff ff       	call   f0100d0e <cprintf>
f0104cf5:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104cf8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104cff:	e9 ca 00 00 00       	jmp    f0104dce <sched_print_all+0x171>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104d04:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0104d09:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d0c:	c1 e2 04             	shl    $0x4,%edx
f0104d0f:	01 d0                	add    %edx,%eax
f0104d11:	8b 00                	mov    (%eax),%eax
f0104d13:	85 c0                	test   %eax,%eax
f0104d15:	0f 84 8d 00 00 00    	je     f0104da8 <sched_print_all+0x14b>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0104d1b:	83 ec 08             	sub    $0x8,%esp
f0104d1e:	ff 75 f0             	pushl  -0x10(%ebp)
f0104d21:	68 60 5e 13 f0       	push   $0xf0135e60
f0104d26:	e8 e3 bf ff ff       	call   f0100d0e <cprintf>
f0104d2b:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104d2e:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0104d33:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d36:	c1 e2 04             	shl    $0x4,%edx
f0104d39:	01 d0                	add    %edx,%eax
f0104d3b:	8b 00                	mov    (%eax),%eax
f0104d3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d40:	eb 34                	jmp    f0104d76 <sched_print_all+0x119>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104d42:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d45:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104d4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d4e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104d51:	83 ec 04             	sub    $0x4,%esp
f0104d54:	52                   	push   %edx
f0104d55:	50                   	push   %eax
f0104d56:	68 06 5e 13 f0       	push   $0xf0135e06
f0104d5b:	e8 ae bf ff ff       	call   f0100d0e <cprintf>
f0104d60:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104d63:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0104d68:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d6b:	c1 e2 04             	shl    $0x4,%edx
f0104d6e:	01 d0                	add    %edx,%eax
f0104d70:	8b 40 08             	mov    0x8(%eax),%eax
f0104d73:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d76:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0104d7b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d7e:	c1 e2 04             	shl    $0x4,%edx
f0104d81:	01 d0                	add    %edx,%eax
f0104d83:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d87:	74 08                	je     f0104d91 <sched_print_all+0x134>
f0104d89:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d8c:	8b 52 44             	mov    0x44(%edx),%edx
f0104d8f:	eb 05                	jmp    f0104d96 <sched_print_all+0x139>
f0104d91:	ba 00 00 00 00       	mov    $0x0,%edx
f0104d96:	89 50 08             	mov    %edx,0x8(%eax)
f0104d99:	8b 40 08             	mov    0x8(%eax),%eax
f0104d9c:	85 c0                	test   %eax,%eax
f0104d9e:	75 a2                	jne    f0104d42 <sched_print_all+0xe5>
f0104da0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104da4:	75 9c                	jne    f0104d42 <sched_print_all+0xe5>
f0104da6:	eb 13                	jmp    f0104dbb <sched_print_all+0x15e>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0104da8:	83 ec 08             	sub    $0x8,%esp
f0104dab:	ff 75 f0             	pushl  -0x10(%ebp)
f0104dae:	68 88 5e 13 f0       	push   $0xf0135e88
f0104db3:	e8 56 bf ff ff       	call   f0100d0e <cprintf>
f0104db8:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104dbb:	83 ec 0c             	sub    $0xc,%esp
f0104dbe:	68 2c 5e 13 f0       	push   $0xf0135e2c
f0104dc3:	e8 46 bf ff ff       	call   f0100d0e <cprintf>
f0104dc8:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104dcb:	ff 45 f0             	incl   -0x10(%ebp)
f0104dce:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0104dd3:	0f b6 c0             	movzbl %al,%eax
f0104dd6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104dd9:	0f 8f 25 ff ff ff    	jg     f0104d04 <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0104ddf:	a1 70 b8 85 f0       	mov    0xf085b870,%eax
f0104de4:	85 c0                	test   %eax,%eax
f0104de6:	74 6c                	je     f0104e54 <sched_print_all+0x1f7>
	{
		cprintf("The processes in EXIT queue are:\n");
f0104de8:	83 ec 0c             	sub    $0xc,%esp
f0104deb:	68 ac 5e 13 f0       	push   $0xf0135eac
f0104df0:	e8 19 bf ff ff       	call   f0100d0e <cprintf>
f0104df5:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104df8:	a1 70 b8 85 f0       	mov    0xf085b870,%eax
f0104dfd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e00:	eb 29                	jmp    f0104e2b <sched_print_all+0x1ce>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104e02:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e05:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104e0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e0e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104e11:	83 ec 04             	sub    $0x4,%esp
f0104e14:	52                   	push   %edx
f0104e15:	50                   	push   %eax
f0104e16:	68 06 5e 13 f0       	push   $0xf0135e06
f0104e1b:	e8 ee be ff ff       	call   f0100d0e <cprintf>
f0104e20:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104e23:	a1 78 b8 85 f0       	mov    0xf085b878,%eax
f0104e28:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e2b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e2f:	74 08                	je     f0104e39 <sched_print_all+0x1dc>
f0104e31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e34:	8b 40 44             	mov    0x44(%eax),%eax
f0104e37:	eb 05                	jmp    f0104e3e <sched_print_all+0x1e1>
f0104e39:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e3e:	a3 78 b8 85 f0       	mov    %eax,0xf085b878
f0104e43:	a1 78 b8 85 f0       	mov    0xf085b878,%eax
f0104e48:	85 c0                	test   %eax,%eax
f0104e4a:	75 b6                	jne    f0104e02 <sched_print_all+0x1a5>
f0104e4c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e50:	75 b0                	jne    f0104e02 <sched_print_all+0x1a5>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0104e52:	eb 10                	jmp    f0104e64 <sched_print_all+0x207>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0104e54:	83 ec 0c             	sub    $0xc,%esp
f0104e57:	68 ce 5e 13 f0       	push   $0xf0135ece
f0104e5c:	e8 ad be ff ff       	call   f0100d0e <cprintf>
f0104e61:	83 c4 10             	add    $0x10,%esp
	}
}
f0104e64:	90                   	nop
f0104e65:	c9                   	leave  
f0104e66:	c3                   	ret    

f0104e67 <sched_run_all>:

void sched_run_all()
{
f0104e67:	55                   	push   %ebp
f0104e68:	89 e5                	mov    %esp,%ebp
f0104e6a:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104e6d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104e74:	a1 b8 b8 85 f0       	mov    0xf085b8b8,%eax
f0104e79:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e7c:	eb 24                	jmp    f0104ea2 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0104e7e:	83 ec 0c             	sub    $0xc,%esp
f0104e81:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e84:	e8 47 fc ff ff       	call   f0104ad0 <sched_remove_new>
f0104e89:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready(ptr_env);
f0104e8c:	83 ec 0c             	sub    $0xc,%esp
f0104e8f:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e92:	e8 d0 fa ff ff       	call   f0104967 <sched_insert_ready>
f0104e97:	83 c4 10             	add    $0x10,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104e9a:	a1 c0 b8 85 f0       	mov    0xf085b8c0,%eax
f0104e9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104ea2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ea6:	74 08                	je     f0104eb0 <sched_run_all+0x49>
f0104ea8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eab:	8b 40 44             	mov    0x44(%eax),%eax
f0104eae:	eb 05                	jmp    f0104eb5 <sched_run_all+0x4e>
f0104eb0:	b8 00 00 00 00       	mov    $0x0,%eax
f0104eb5:	a3 c0 b8 85 f0       	mov    %eax,0xf085b8c0
f0104eba:	a1 c0 b8 85 f0       	mov    0xf085b8c0,%eax
f0104ebf:	85 c0                	test   %eax,%eax
f0104ec1:	75 bb                	jne    f0104e7e <sched_run_all+0x17>
f0104ec3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ec7:	75 b5                	jne    f0104e7e <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0104ec9:	a1 d4 b8 85 f0       	mov    0xf085b8d4,%eax
f0104ece:	85 c0                	test   %eax,%eax
f0104ed0:	75 05                	jne    f0104ed7 <sched_run_all+0x70>
		fos_scheduler();
f0104ed2:	e8 6a f8 ff ff       	call   f0104741 <fos_scheduler>
}
f0104ed7:	90                   	nop
f0104ed8:	c9                   	leave  
f0104ed9:	c3                   	ret    

f0104eda <sched_kill_all>:

void sched_kill_all()
{
f0104eda:	55                   	push   %ebp
f0104edb:	89 e5                	mov    %esp,%ebp
f0104edd:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104ee0:	a1 b8 b8 85 f0       	mov    0xf085b8b8,%eax
f0104ee5:	85 c0                	test   %eax,%eax
f0104ee7:	0f 84 98 00 00 00    	je     f0104f85 <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0104eed:	83 ec 0c             	sub    $0xc,%esp
f0104ef0:	68 ec 5e 13 f0       	push   $0xf0135eec
f0104ef5:	e8 14 be ff ff       	call   f0100d0e <cprintf>
f0104efa:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104efd:	a1 b8 b8 85 f0       	mov    0xf085b8b8,%eax
f0104f02:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f05:	eb 55                	jmp    f0104f5c <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104f07:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f0a:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104f10:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f13:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104f16:	83 ec 04             	sub    $0x4,%esp
f0104f19:	52                   	push   %edx
f0104f1a:	50                   	push   %eax
f0104f1b:	68 18 5f 13 f0       	push   $0xf0135f18
f0104f20:	e8 e9 bd ff ff       	call   f0100d0e <cprintf>
f0104f25:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0104f28:	83 ec 0c             	sub    $0xc,%esp
f0104f2b:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f2e:	e8 9d fb ff ff       	call   f0104ad0 <sched_remove_new>
f0104f33:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0104f36:	83 ec 0c             	sub    $0xc,%esp
f0104f39:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f3c:	e8 3b 50 00 00       	call   f0109f7c <env_free>
f0104f41:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0104f44:	83 ec 0c             	sub    $0xc,%esp
f0104f47:	68 2b 5f 13 f0       	push   $0xf0135f2b
f0104f4c:	e8 bd bd ff ff       	call   f0100d0e <cprintf>
f0104f51:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104f54:	a1 c0 b8 85 f0       	mov    0xf085b8c0,%eax
f0104f59:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f5c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f60:	74 08                	je     f0104f6a <sched_kill_all+0x90>
f0104f62:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f65:	8b 40 44             	mov    0x44(%eax),%eax
f0104f68:	eb 05                	jmp    f0104f6f <sched_kill_all+0x95>
f0104f6a:	b8 00 00 00 00       	mov    $0x0,%eax
f0104f6f:	a3 c0 b8 85 f0       	mov    %eax,0xf085b8c0
f0104f74:	a1 c0 b8 85 f0       	mov    0xf085b8c0,%eax
f0104f79:	85 c0                	test   %eax,%eax
f0104f7b:	75 8a                	jne    f0104f07 <sched_kill_all+0x2d>
f0104f7d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f81:	75 84                	jne    f0104f07 <sched_kill_all+0x2d>
f0104f83:	eb 10                	jmp    f0104f95 <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0104f85:	83 ec 0c             	sub    $0xc,%esp
f0104f88:	68 31 5f 13 f0       	push   $0xf0135f31
f0104f8d:	e8 7c bd ff ff       	call   f0100d0e <cprintf>
f0104f92:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104f95:	83 ec 0c             	sub    $0xc,%esp
f0104f98:	68 2c 5e 13 f0       	push   $0xf0135e2c
f0104f9d:	e8 6c bd ff ff       	call   f0100d0e <cprintf>
f0104fa2:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104fa5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104fac:	e9 99 01 00 00       	jmp    f010514a <sched_kill_all+0x270>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104fb1:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0104fb6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104fb9:	c1 e2 04             	shl    $0x4,%edx
f0104fbc:	01 d0                	add    %edx,%eax
f0104fbe:	8b 00                	mov    (%eax),%eax
f0104fc0:	85 c0                	test   %eax,%eax
f0104fc2:	0f 84 5c 01 00 00    	je     f0105124 <sched_kill_all+0x24a>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0104fc8:	83 ec 08             	sub    $0x8,%esp
f0104fcb:	ff 75 f0             	pushl  -0x10(%ebp)
f0104fce:	68 4c 5f 13 f0       	push   $0xf0135f4c
f0104fd3:	e8 36 bd ff ff       	call   f0100d0e <cprintf>
f0104fd8:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104fdb:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0104fe0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104fe3:	c1 e2 04             	shl    $0x4,%edx
f0104fe6:	01 d0                	add    %edx,%eax
f0104fe8:	8b 00                	mov    (%eax),%eax
f0104fea:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104fed:	e9 f8 00 00 00       	jmp    f01050ea <sched_kill_all+0x210>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104ff2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ff5:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104ffb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ffe:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105001:	83 ec 04             	sub    $0x4,%esp
f0105004:	52                   	push   %edx
f0105005:	50                   	push   %eax
f0105006:	68 18 5f 13 f0       	push   $0xf0135f18
f010500b:	e8 fe bc ff ff       	call   f0100d0e <cprintf>
f0105010:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105013:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105017:	75 17                	jne    f0105030 <sched_kill_all+0x156>
f0105019:	83 ec 04             	sub    $0x4,%esp
f010501c:	68 5f 5d 13 f0       	push   $0xf0135d5f
f0105021:	68 8c 01 00 00       	push   $0x18c
f0105026:	68 2b 5d 13 f0       	push   $0xf0135d2b
f010502b:	e8 d5 b1 ff ff       	call   f0100205 <_panic>
f0105030:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105033:	8b 40 44             	mov    0x44(%eax),%eax
f0105036:	85 c0                	test   %eax,%eax
f0105038:	74 11                	je     f010504b <sched_kill_all+0x171>
f010503a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010503d:	8b 40 44             	mov    0x44(%eax),%eax
f0105040:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105043:	8b 52 48             	mov    0x48(%edx),%edx
f0105046:	89 50 48             	mov    %edx,0x48(%eax)
f0105049:	eb 16                	jmp    f0105061 <sched_kill_all+0x187>
f010504b:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0105050:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105053:	c1 e2 04             	shl    $0x4,%edx
f0105056:	01 c2                	add    %eax,%edx
f0105058:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010505b:	8b 40 48             	mov    0x48(%eax),%eax
f010505e:	89 42 04             	mov    %eax,0x4(%edx)
f0105061:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105064:	8b 40 48             	mov    0x48(%eax),%eax
f0105067:	85 c0                	test   %eax,%eax
f0105069:	74 11                	je     f010507c <sched_kill_all+0x1a2>
f010506b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010506e:	8b 40 48             	mov    0x48(%eax),%eax
f0105071:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105074:	8b 52 44             	mov    0x44(%edx),%edx
f0105077:	89 50 44             	mov    %edx,0x44(%eax)
f010507a:	eb 15                	jmp    f0105091 <sched_kill_all+0x1b7>
f010507c:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0105081:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105084:	c1 e2 04             	shl    $0x4,%edx
f0105087:	01 c2                	add    %eax,%edx
f0105089:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010508c:	8b 40 44             	mov    0x44(%eax),%eax
f010508f:	89 02                	mov    %eax,(%edx)
f0105091:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105094:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010509b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010509e:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01050a5:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f01050aa:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050ad:	c1 e2 04             	shl    $0x4,%edx
f01050b0:	01 d0                	add    %edx,%eax
f01050b2:	8b 50 0c             	mov    0xc(%eax),%edx
f01050b5:	4a                   	dec    %edx
f01050b6:	89 50 0c             	mov    %edx,0xc(%eax)
				env_free(ptr_env);
f01050b9:	83 ec 0c             	sub    $0xc,%esp
f01050bc:	ff 75 f4             	pushl  -0xc(%ebp)
f01050bf:	e8 b8 4e 00 00       	call   f0109f7c <env_free>
f01050c4:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01050c7:	83 ec 0c             	sub    $0xc,%esp
f01050ca:	68 2b 5f 13 f0       	push   $0xf0135f2b
f01050cf:	e8 3a bc ff ff       	call   f0100d0e <cprintf>
f01050d4:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01050d7:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f01050dc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050df:	c1 e2 04             	shl    $0x4,%edx
f01050e2:	01 d0                	add    %edx,%eax
f01050e4:	8b 40 08             	mov    0x8(%eax),%eax
f01050e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050ea:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f01050ef:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050f2:	c1 e2 04             	shl    $0x4,%edx
f01050f5:	01 d0                	add    %edx,%eax
f01050f7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01050fb:	74 08                	je     f0105105 <sched_kill_all+0x22b>
f01050fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105100:	8b 52 44             	mov    0x44(%edx),%edx
f0105103:	eb 05                	jmp    f010510a <sched_kill_all+0x230>
f0105105:	ba 00 00 00 00       	mov    $0x0,%edx
f010510a:	89 50 08             	mov    %edx,0x8(%eax)
f010510d:	8b 40 08             	mov    0x8(%eax),%eax
f0105110:	85 c0                	test   %eax,%eax
f0105112:	0f 85 da fe ff ff    	jne    f0104ff2 <sched_kill_all+0x118>
f0105118:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010511c:	0f 85 d0 fe ff ff    	jne    f0104ff2 <sched_kill_all+0x118>
f0105122:	eb 13                	jmp    f0105137 <sched_kill_all+0x25d>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0105124:	83 ec 08             	sub    $0x8,%esp
f0105127:	ff 75 f0             	pushl  -0x10(%ebp)
f010512a:	68 88 5e 13 f0       	push   $0xf0135e88
f010512f:	e8 da bb ff ff       	call   f0100d0e <cprintf>
f0105134:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105137:	83 ec 0c             	sub    $0xc,%esp
f010513a:	68 2c 5e 13 f0       	push   $0xf0135e2c
f010513f:	e8 ca bb ff ff       	call   f0100d0e <cprintf>
f0105144:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105147:	ff 45 f0             	incl   -0x10(%ebp)
f010514a:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f010514f:	0f b6 c0             	movzbl %al,%eax
f0105152:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105155:	0f 8f 56 fe ff ff    	jg     f0104fb1 <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f010515b:	a1 70 b8 85 f0       	mov    0xf085b870,%eax
f0105160:	85 c0                	test   %eax,%eax
f0105162:	0f 84 98 00 00 00    	je     f0105200 <sched_kill_all+0x326>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f0105168:	83 ec 0c             	sub    $0xc,%esp
f010516b:	68 80 5f 13 f0       	push   $0xf0135f80
f0105170:	e8 99 bb ff ff       	call   f0100d0e <cprintf>
f0105175:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105178:	a1 70 b8 85 f0       	mov    0xf085b870,%eax
f010517d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105180:	eb 55                	jmp    f01051d7 <sched_kill_all+0x2fd>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105182:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105185:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f010518b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010518e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105191:	83 ec 04             	sub    $0x4,%esp
f0105194:	52                   	push   %edx
f0105195:	50                   	push   %eax
f0105196:	68 18 5f 13 f0       	push   $0xf0135f18
f010519b:	e8 6e bb ff ff       	call   f0100d0e <cprintf>
f01051a0:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f01051a3:	83 ec 0c             	sub    $0xc,%esp
f01051a6:	ff 75 f4             	pushl  -0xc(%ebp)
f01051a9:	e8 0a fa ff ff       	call   f0104bb8 <sched_remove_exit>
f01051ae:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01051b1:	83 ec 0c             	sub    $0xc,%esp
f01051b4:	ff 75 f4             	pushl  -0xc(%ebp)
f01051b7:	e8 c0 4d 00 00       	call   f0109f7c <env_free>
f01051bc:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01051bf:	83 ec 0c             	sub    $0xc,%esp
f01051c2:	68 2b 5f 13 f0       	push   $0xf0135f2b
f01051c7:	e8 42 bb ff ff       	call   f0100d0e <cprintf>
f01051cc:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01051cf:	a1 78 b8 85 f0       	mov    0xf085b878,%eax
f01051d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01051d7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051db:	74 08                	je     f01051e5 <sched_kill_all+0x30b>
f01051dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051e0:	8b 40 44             	mov    0x44(%eax),%eax
f01051e3:	eb 05                	jmp    f01051ea <sched_kill_all+0x310>
f01051e5:	b8 00 00 00 00       	mov    $0x0,%eax
f01051ea:	a3 78 b8 85 f0       	mov    %eax,0xf085b878
f01051ef:	a1 78 b8 85 f0       	mov    0xf085b878,%eax
f01051f4:	85 c0                	test   %eax,%eax
f01051f6:	75 8a                	jne    f0105182 <sched_kill_all+0x2a8>
f01051f8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051fc:	75 84                	jne    f0105182 <sched_kill_all+0x2a8>
f01051fe:	eb 10                	jmp    f0105210 <sched_kill_all+0x336>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0105200:	83 ec 0c             	sub    $0xc,%esp
f0105203:	68 ce 5e 13 f0       	push   $0xf0135ece
f0105208:	e8 01 bb ff ff       	call   f0100d0e <cprintf>
f010520d:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f0105210:	c7 05 74 af 85 f0 00 	movl   $0x0,0xf085af74
f0105217:	00 00 00 
	fos_scheduler();
f010521a:	e8 22 f5 ff ff       	call   f0104741 <fos_scheduler>

f010521f <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f010521f:	55                   	push   %ebp
f0105220:	89 e5                	mov    %esp,%ebp
f0105222:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f0105225:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105229:	74 0e                	je     f0105239 <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f010522b:	83 ec 0c             	sub    $0xc,%esp
f010522e:	ff 75 08             	pushl  0x8(%ebp)
f0105231:	e8 6e f8 ff ff       	call   f0104aa4 <sched_insert_new>
f0105236:	83 c4 10             	add    $0x10,%esp
	}
}
f0105239:	90                   	nop
f010523a:	c9                   	leave  
f010523b:	c3                   	ret    

f010523c <sched_run_env>:
	sched_insert_new(e);
}
 */

void sched_run_env(uint32 envId)
{
f010523c:	55                   	push   %ebp
f010523d:	89 e5                	mov    %esp,%ebp
f010523f:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105242:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105249:	a1 b8 b8 85 f0       	mov    0xf085b8b8,%eax
f010524e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105251:	eb 3d                	jmp    f0105290 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f0105253:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105256:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105259:	3b 45 08             	cmp    0x8(%ebp),%eax
f010525c:	75 2a                	jne    f0105288 <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f010525e:	83 ec 0c             	sub    $0xc,%esp
f0105261:	ff 75 f4             	pushl  -0xc(%ebp)
f0105264:	e8 67 f8 ff ff       	call   f0104ad0 <sched_remove_new>
f0105269:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready(ptr_env);
f010526c:	83 ec 0c             	sub    $0xc,%esp
f010526f:	ff 75 f4             	pushl  -0xc(%ebp)
f0105272:	e8 f0 f6 ff ff       	call   f0104967 <sched_insert_ready>
f0105277:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f010527a:	a1 d4 b8 85 f0       	mov    0xf085b8d4,%eax
f010527f:	85 c0                	test   %eax,%eax
f0105281:	75 36                	jne    f01052b9 <sched_run_env+0x7d>
			{
				fos_scheduler();
f0105283:	e8 b9 f4 ff ff       	call   f0104741 <fos_scheduler>
 */

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105288:	a1 c0 b8 85 f0       	mov    0xf085b8c0,%eax
f010528d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105290:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105294:	74 08                	je     f010529e <sched_run_env+0x62>
f0105296:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105299:	8b 40 44             	mov    0x44(%eax),%eax
f010529c:	eb 05                	jmp    f01052a3 <sched_run_env+0x67>
f010529e:	b8 00 00 00 00       	mov    $0x0,%eax
f01052a3:	a3 c0 b8 85 f0       	mov    %eax,0xf085b8c0
f01052a8:	a1 c0 b8 85 f0       	mov    0xf085b8c0,%eax
f01052ad:	85 c0                	test   %eax,%eax
f01052af:	75 a2                	jne    f0105253 <sched_run_env+0x17>
f01052b1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052b5:	75 9c                	jne    f0105253 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f01052b7:	eb 01                	jmp    f01052ba <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f01052b9:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f01052ba:	90                   	nop
f01052bb:	c9                   	leave  
f01052bc:	c3                   	ret    

f01052bd <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f01052bd:	55                   	push   %ebp
f01052be:	89 e5                	mov    %esp,%ebp
f01052c0:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01052c3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01052ca:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01052d1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01052d5:	75 59                	jne    f0105330 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01052d7:	a1 b8 b8 85 f0       	mov    0xf085b8b8,%eax
f01052dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052df:	eb 28                	jmp    f0105309 <sched_exit_env+0x4c>
				{
			if(ptr_env->env_id == envId)
f01052e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052e4:	8b 40 4c             	mov    0x4c(%eax),%eax
f01052e7:	3b 45 08             	cmp    0x8(%ebp),%eax
f01052ea:	75 15                	jne    f0105301 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f01052ec:	83 ec 0c             	sub    $0xc,%esp
f01052ef:	ff 75 f4             	pushl  -0xc(%ebp)
f01052f2:	e8 d9 f7 ff ff       	call   f0104ad0 <sched_remove_new>
f01052f7:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01052fa:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105301:	a1 c0 b8 85 f0       	mov    0xf085b8c0,%eax
f0105306:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105309:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010530d:	74 08                	je     f0105317 <sched_exit_env+0x5a>
f010530f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105312:	8b 40 44             	mov    0x44(%eax),%eax
f0105315:	eb 05                	jmp    f010531c <sched_exit_env+0x5f>
f0105317:	b8 00 00 00 00       	mov    $0x0,%eax
f010531c:	a3 c0 b8 85 f0       	mov    %eax,0xf085b8c0
f0105321:	a1 c0 b8 85 f0       	mov    0xf085b8c0,%eax
f0105326:	85 c0                	test   %eax,%eax
f0105328:	75 b7                	jne    f01052e1 <sched_exit_env+0x24>
f010532a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010532e:	75 b1                	jne    f01052e1 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f0105330:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105334:	0f 85 67 01 00 00    	jne    f01054a1 <sched_exit_env+0x1e4>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010533a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105341:	e9 47 01 00 00       	jmp    f010548d <sched_exit_env+0x1d0>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105346:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f010534b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010534e:	c1 e2 04             	shl    $0x4,%edx
f0105351:	01 d0                	add    %edx,%eax
f0105353:	8b 00                	mov    (%eax),%eax
f0105355:	85 c0                	test   %eax,%eax
f0105357:	0f 84 27 01 00 00    	je     f0105484 <sched_exit_env+0x1c7>
			{
				ptr_env=NULL;
f010535d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105364:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0105369:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010536c:	c1 e2 04             	shl    $0x4,%edx
f010536f:	01 d0                	add    %edx,%eax
f0105371:	8b 00                	mov    (%eax),%eax
f0105373:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105376:	e9 d1 00 00 00       	jmp    f010544c <sched_exit_env+0x18f>
				{
					if(ptr_env->env_id == envId)
f010537b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010537e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105381:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105384:	0f 85 af 00 00 00    	jne    f0105439 <sched_exit_env+0x17c>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010538a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010538e:	75 17                	jne    f01053a7 <sched_exit_env+0xea>
f0105390:	83 ec 04             	sub    $0x4,%esp
f0105393:	68 5f 5d 13 f0       	push   $0xf0135d5f
f0105398:	68 f7 01 00 00       	push   $0x1f7
f010539d:	68 2b 5d 13 f0       	push   $0xf0135d2b
f01053a2:	e8 5e ae ff ff       	call   f0100205 <_panic>
f01053a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053aa:	8b 40 44             	mov    0x44(%eax),%eax
f01053ad:	85 c0                	test   %eax,%eax
f01053af:	74 11                	je     f01053c2 <sched_exit_env+0x105>
f01053b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053b4:	8b 40 44             	mov    0x44(%eax),%eax
f01053b7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053ba:	8b 52 48             	mov    0x48(%edx),%edx
f01053bd:	89 50 48             	mov    %edx,0x48(%eax)
f01053c0:	eb 16                	jmp    f01053d8 <sched_exit_env+0x11b>
f01053c2:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f01053c7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053ca:	c1 e2 04             	shl    $0x4,%edx
f01053cd:	01 c2                	add    %eax,%edx
f01053cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053d2:	8b 40 48             	mov    0x48(%eax),%eax
f01053d5:	89 42 04             	mov    %eax,0x4(%edx)
f01053d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053db:	8b 40 48             	mov    0x48(%eax),%eax
f01053de:	85 c0                	test   %eax,%eax
f01053e0:	74 11                	je     f01053f3 <sched_exit_env+0x136>
f01053e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053e5:	8b 40 48             	mov    0x48(%eax),%eax
f01053e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053eb:	8b 52 44             	mov    0x44(%edx),%edx
f01053ee:	89 50 44             	mov    %edx,0x44(%eax)
f01053f1:	eb 15                	jmp    f0105408 <sched_exit_env+0x14b>
f01053f3:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f01053f8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053fb:	c1 e2 04             	shl    $0x4,%edx
f01053fe:	01 c2                	add    %eax,%edx
f0105400:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105403:	8b 40 44             	mov    0x44(%eax),%eax
f0105406:	89 02                	mov    %eax,(%edx)
f0105408:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010540b:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105412:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105415:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010541c:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0105421:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105424:	c1 e2 04             	shl    $0x4,%edx
f0105427:	01 d0                	add    %edx,%eax
f0105429:	8b 50 0c             	mov    0xc(%eax),%edx
f010542c:	4a                   	dec    %edx
f010542d:	89 50 0c             	mov    %edx,0xc(%eax)
						found = 1;
f0105430:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105437:	eb 4b                	jmp    f0105484 <sched_exit_env+0x1c7>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105439:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f010543e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105441:	c1 e2 04             	shl    $0x4,%edx
f0105444:	01 d0                	add    %edx,%eax
f0105446:	8b 40 08             	mov    0x8(%eax),%eax
f0105449:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010544c:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0105451:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105454:	c1 e2 04             	shl    $0x4,%edx
f0105457:	01 d0                	add    %edx,%eax
f0105459:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010545d:	74 08                	je     f0105467 <sched_exit_env+0x1aa>
f010545f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105462:	8b 52 44             	mov    0x44(%edx),%edx
f0105465:	eb 05                	jmp    f010546c <sched_exit_env+0x1af>
f0105467:	ba 00 00 00 00       	mov    $0x0,%edx
f010546c:	89 50 08             	mov    %edx,0x8(%eax)
f010546f:	8b 40 08             	mov    0x8(%eax),%eax
f0105472:	85 c0                	test   %eax,%eax
f0105474:	0f 85 01 ff ff ff    	jne    f010537b <sched_exit_env+0xbe>
f010547a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010547e:	0f 85 f7 fe ff ff    	jne    f010537b <sched_exit_env+0xbe>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0105484:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105488:	75 16                	jne    f01054a0 <sched_exit_env+0x1e3>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010548a:	ff 45 ec             	incl   -0x14(%ebp)
f010548d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0105492:	0f b6 c0             	movzbl %al,%eax
f0105495:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0105498:	0f 8f a8 fe ff ff    	jg     f0105346 <sched_exit_env+0x89>
f010549e:	eb 01                	jmp    f01054a1 <sched_exit_env+0x1e4>
						break;
					}
				}
			}
			if (found)
				break;
f01054a0:	90                   	nop
		}
	}
	if (!found)
f01054a1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01054a5:	75 1c                	jne    f01054c3 <sched_exit_env+0x206>
	{
		if (curenv->env_id == envId)
f01054a7:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f01054ac:	8b 40 4c             	mov    0x4c(%eax),%eax
f01054af:	3b 45 08             	cmp    0x8(%ebp),%eax
f01054b2:	75 0f                	jne    f01054c3 <sched_exit_env+0x206>
		{
			ptr_env = curenv;
f01054b4:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f01054b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f01054bc:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f01054c3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01054c7:	74 2a                	je     f01054f3 <sched_exit_env+0x236>
	{
		sched_insert_exit(ptr_env);
f01054c9:	83 ec 0c             	sub    $0xc,%esp
f01054cc:	ff 75 f4             	pushl  -0xc(%ebp)
f01054cf:	e8 a1 f6 ff ff       	call   f0104b75 <sched_insert_exit>
f01054d4:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f01054d7:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f01054dc:	8b 40 4c             	mov    0x4c(%eax),%eax
f01054df:	3b 45 08             	cmp    0x8(%ebp),%eax
f01054e2:	75 0f                	jne    f01054f3 <sched_exit_env+0x236>
		{
			curenv = NULL;
f01054e4:	c7 05 74 af 85 f0 00 	movl   $0x0,0xf085af74
f01054eb:	00 00 00 
			fos_scheduler();
f01054ee:	e8 4e f2 ff ff       	call   f0104741 <fos_scheduler>
		}
	}
}
f01054f3:	90                   	nop
f01054f4:	c9                   	leave  
f01054f5:	c3                   	ret    

f01054f6 <sched_exit_all_ready_envs>:

/*2018*/
void sched_exit_all_ready_envs()
{
f01054f6:	55                   	push   %ebp
f01054f7:	89 e5                	mov    %esp,%ebp
f01054f9:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01054fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105503:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010550a:	e9 37 01 00 00       	jmp    f0105646 <sched_exit_all_ready_envs+0x150>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f010550f:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0105514:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105517:	c1 e2 04             	shl    $0x4,%edx
f010551a:	01 d0                	add    %edx,%eax
f010551c:	8b 00                	mov    (%eax),%eax
f010551e:	85 c0                	test   %eax,%eax
f0105520:	0f 84 1d 01 00 00    	je     f0105643 <sched_exit_all_ready_envs+0x14d>
		{
			ptr_env=NULL;
f0105526:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010552d:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0105532:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105535:	c1 e2 04             	shl    $0x4,%edx
f0105538:	01 d0                	add    %edx,%eax
f010553a:	8b 00                	mov    (%eax),%eax
f010553c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010553f:	e9 c7 00 00 00       	jmp    f010560b <sched_exit_all_ready_envs+0x115>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105544:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105548:	75 17                	jne    f0105561 <sched_exit_all_ready_envs+0x6b>
f010554a:	83 ec 04             	sub    $0x4,%esp
f010554d:	68 5f 5d 13 f0       	push   $0xf0135d5f
f0105552:	68 22 02 00 00       	push   $0x222
f0105557:	68 2b 5d 13 f0       	push   $0xf0135d2b
f010555c:	e8 a4 ac ff ff       	call   f0100205 <_panic>
f0105561:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105564:	8b 40 44             	mov    0x44(%eax),%eax
f0105567:	85 c0                	test   %eax,%eax
f0105569:	74 11                	je     f010557c <sched_exit_all_ready_envs+0x86>
f010556b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010556e:	8b 40 44             	mov    0x44(%eax),%eax
f0105571:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105574:	8b 52 48             	mov    0x48(%edx),%edx
f0105577:	89 50 48             	mov    %edx,0x48(%eax)
f010557a:	eb 16                	jmp    f0105592 <sched_exit_all_ready_envs+0x9c>
f010557c:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0105581:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105584:	c1 e2 04             	shl    $0x4,%edx
f0105587:	01 c2                	add    %eax,%edx
f0105589:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010558c:	8b 40 48             	mov    0x48(%eax),%eax
f010558f:	89 42 04             	mov    %eax,0x4(%edx)
f0105592:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105595:	8b 40 48             	mov    0x48(%eax),%eax
f0105598:	85 c0                	test   %eax,%eax
f010559a:	74 11                	je     f01055ad <sched_exit_all_ready_envs+0xb7>
f010559c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010559f:	8b 40 48             	mov    0x48(%eax),%eax
f01055a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01055a5:	8b 52 44             	mov    0x44(%edx),%edx
f01055a8:	89 50 44             	mov    %edx,0x44(%eax)
f01055ab:	eb 15                	jmp    f01055c2 <sched_exit_all_ready_envs+0xcc>
f01055ad:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f01055b2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055b5:	c1 e2 04             	shl    $0x4,%edx
f01055b8:	01 c2                	add    %eax,%edx
f01055ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055bd:	8b 40 44             	mov    0x44(%eax),%eax
f01055c0:	89 02                	mov    %eax,(%edx)
f01055c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055c5:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01055cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055cf:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01055d6:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f01055db:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055de:	c1 e2 04             	shl    $0x4,%edx
f01055e1:	01 d0                	add    %edx,%eax
f01055e3:	8b 50 0c             	mov    0xc(%eax),%edx
f01055e6:	4a                   	dec    %edx
f01055e7:	89 50 0c             	mov    %edx,0xc(%eax)
				sched_insert_exit(ptr_env);
f01055ea:	83 ec 0c             	sub    $0xc,%esp
f01055ed:	ff 75 f4             	pushl  -0xc(%ebp)
f01055f0:	e8 80 f5 ff ff       	call   f0104b75 <sched_insert_exit>
f01055f5:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01055f8:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f01055fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105600:	c1 e2 04             	shl    $0x4,%edx
f0105603:	01 d0                	add    %edx,%eax
f0105605:	8b 40 08             	mov    0x8(%eax),%eax
f0105608:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010560b:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0105610:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105613:	c1 e2 04             	shl    $0x4,%edx
f0105616:	01 d0                	add    %edx,%eax
f0105618:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010561c:	74 08                	je     f0105626 <sched_exit_all_ready_envs+0x130>
f010561e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105621:	8b 52 44             	mov    0x44(%edx),%edx
f0105624:	eb 05                	jmp    f010562b <sched_exit_all_ready_envs+0x135>
f0105626:	ba 00 00 00 00       	mov    $0x0,%edx
f010562b:	89 50 08             	mov    %edx,0x8(%eax)
f010562e:	8b 40 08             	mov    0x8(%eax),%eax
f0105631:	85 c0                	test   %eax,%eax
f0105633:	0f 85 0b ff ff ff    	jne    f0105544 <sched_exit_all_ready_envs+0x4e>
f0105639:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010563d:	0f 85 01 ff ff ff    	jne    f0105544 <sched_exit_all_ready_envs+0x4e>

/*2018*/
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105643:	ff 45 f0             	incl   -0x10(%ebp)
f0105646:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f010564b:	0f b6 c0             	movzbl %al,%eax
f010564e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105651:	0f 8f b8 fe ff ff    	jg     f010550f <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f0105657:	90                   	nop
f0105658:	c9                   	leave  
f0105659:	c3                   	ret    

f010565a <sched_kill_env>:

/*2015*/
void sched_kill_env(uint32 envId)
{
f010565a:	55                   	push   %ebp
f010565b:	89 e5                	mov    %esp,%ebp
f010565d:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105660:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0105667:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f010566e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105672:	0f 85 a0 00 00 00    	jne    f0105718 <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105678:	a1 b8 b8 85 f0       	mov    0xf085b8b8,%eax
f010567d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105680:	eb 67                	jmp    f01056e9 <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f0105682:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105685:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105688:	3b 45 08             	cmp    0x8(%ebp),%eax
f010568b:	75 54                	jne    f01056e1 <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f010568d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105690:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105696:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105699:	8b 40 4c             	mov    0x4c(%eax),%eax
f010569c:	83 ec 04             	sub    $0x4,%esp
f010569f:	52                   	push   %edx
f01056a0:	50                   	push   %eax
f01056a1:	68 ac 5f 13 f0       	push   $0xf0135fac
f01056a6:	e8 63 b6 ff ff       	call   f0100d0e <cprintf>
f01056ab:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f01056ae:	83 ec 0c             	sub    $0xc,%esp
f01056b1:	ff 75 f4             	pushl  -0xc(%ebp)
f01056b4:	e8 17 f4 ff ff       	call   f0104ad0 <sched_remove_new>
f01056b9:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f01056bc:	83 ec 0c             	sub    $0xc,%esp
f01056bf:	ff 75 f4             	pushl  -0xc(%ebp)
f01056c2:	e8 b5 48 00 00       	call   f0109f7c <env_free>
f01056c7:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01056ca:	83 ec 0c             	sub    $0xc,%esp
f01056cd:	68 2b 5f 13 f0       	push   $0xf0135f2b
f01056d2:	e8 37 b6 ff ff       	call   f0100d0e <cprintf>
f01056d7:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01056da:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01056e1:	a1 c0 b8 85 f0       	mov    0xf085b8c0,%eax
f01056e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01056e9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056ed:	74 08                	je     f01056f7 <sched_kill_env+0x9d>
f01056ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056f2:	8b 40 44             	mov    0x44(%eax),%eax
f01056f5:	eb 05                	jmp    f01056fc <sched_kill_env+0xa2>
f01056f7:	b8 00 00 00 00       	mov    $0x0,%eax
f01056fc:	a3 c0 b8 85 f0       	mov    %eax,0xf085b8c0
f0105701:	a1 c0 b8 85 f0       	mov    0xf085b8c0,%eax
f0105706:	85 c0                	test   %eax,%eax
f0105708:	0f 85 74 ff ff ff    	jne    f0105682 <sched_kill_env+0x28>
f010570e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105712:	0f 85 6a ff ff ff    	jne    f0105682 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f0105718:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010571c:	0f 85 a6 01 00 00    	jne    f01058c8 <sched_kill_env+0x26e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105722:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105729:	e9 86 01 00 00       	jmp    f01058b4 <sched_kill_env+0x25a>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010572e:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0105733:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105736:	c1 e2 04             	shl    $0x4,%edx
f0105739:	01 d0                	add    %edx,%eax
f010573b:	8b 00                	mov    (%eax),%eax
f010573d:	85 c0                	test   %eax,%eax
f010573f:	0f 84 66 01 00 00    	je     f01058ab <sched_kill_env+0x251>
			{
				ptr_env=NULL;
f0105745:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010574c:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0105751:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105754:	c1 e2 04             	shl    $0x4,%edx
f0105757:	01 d0                	add    %edx,%eax
f0105759:	8b 00                	mov    (%eax),%eax
f010575b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010575e:	e9 10 01 00 00       	jmp    f0105873 <sched_kill_env+0x219>
				{
					if(ptr_env->env_id == envId)
f0105763:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105766:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105769:	3b 45 08             	cmp    0x8(%ebp),%eax
f010576c:	0f 85 ee 00 00 00    	jne    f0105860 <sched_kill_env+0x206>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0105772:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105775:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f010577b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010577e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105781:	ff 75 ec             	pushl  -0x14(%ebp)
f0105784:	52                   	push   %edx
f0105785:	50                   	push   %eax
f0105786:	68 d4 5f 13 f0       	push   $0xf0135fd4
f010578b:	e8 7e b5 ff ff       	call   f0100d0e <cprintf>
f0105790:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105793:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105797:	75 17                	jne    f01057b0 <sched_kill_env+0x156>
f0105799:	83 ec 04             	sub    $0x4,%esp
f010579c:	68 5f 5d 13 f0       	push   $0xf0135d5f
f01057a1:	68 49 02 00 00       	push   $0x249
f01057a6:	68 2b 5d 13 f0       	push   $0xf0135d2b
f01057ab:	e8 55 aa ff ff       	call   f0100205 <_panic>
f01057b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057b3:	8b 40 44             	mov    0x44(%eax),%eax
f01057b6:	85 c0                	test   %eax,%eax
f01057b8:	74 11                	je     f01057cb <sched_kill_env+0x171>
f01057ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057bd:	8b 40 44             	mov    0x44(%eax),%eax
f01057c0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01057c3:	8b 52 48             	mov    0x48(%edx),%edx
f01057c6:	89 50 48             	mov    %edx,0x48(%eax)
f01057c9:	eb 16                	jmp    f01057e1 <sched_kill_env+0x187>
f01057cb:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f01057d0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057d3:	c1 e2 04             	shl    $0x4,%edx
f01057d6:	01 c2                	add    %eax,%edx
f01057d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057db:	8b 40 48             	mov    0x48(%eax),%eax
f01057de:	89 42 04             	mov    %eax,0x4(%edx)
f01057e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057e4:	8b 40 48             	mov    0x48(%eax),%eax
f01057e7:	85 c0                	test   %eax,%eax
f01057e9:	74 11                	je     f01057fc <sched_kill_env+0x1a2>
f01057eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057ee:	8b 40 48             	mov    0x48(%eax),%eax
f01057f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01057f4:	8b 52 44             	mov    0x44(%edx),%edx
f01057f7:	89 50 44             	mov    %edx,0x44(%eax)
f01057fa:	eb 15                	jmp    f0105811 <sched_kill_env+0x1b7>
f01057fc:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0105801:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105804:	c1 e2 04             	shl    $0x4,%edx
f0105807:	01 c2                	add    %eax,%edx
f0105809:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010580c:	8b 40 44             	mov    0x44(%eax),%eax
f010580f:	89 02                	mov    %eax,(%edx)
f0105811:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105814:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010581b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010581e:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105825:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f010582a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010582d:	c1 e2 04             	shl    $0x4,%edx
f0105830:	01 d0                	add    %edx,%eax
f0105832:	8b 50 0c             	mov    0xc(%eax),%edx
f0105835:	4a                   	dec    %edx
f0105836:	89 50 0c             	mov    %edx,0xc(%eax)
						env_free(ptr_env);
f0105839:	83 ec 0c             	sub    $0xc,%esp
f010583c:	ff 75 f4             	pushl  -0xc(%ebp)
f010583f:	e8 38 47 00 00       	call   f0109f7c <env_free>
f0105844:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f0105847:	83 ec 0c             	sub    $0xc,%esp
f010584a:	68 2b 5f 13 f0       	push   $0xf0135f2b
f010584f:	e8 ba b4 ff ff       	call   f0100d0e <cprintf>
f0105854:	83 c4 10             	add    $0x10,%esp
						found = 1;
f0105857:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f010585e:	eb 4b                	jmp    f01058ab <sched_kill_env+0x251>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105860:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0105865:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105868:	c1 e2 04             	shl    $0x4,%edx
f010586b:	01 d0                	add    %edx,%eax
f010586d:	8b 40 08             	mov    0x8(%eax),%eax
f0105870:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105873:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0105878:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010587b:	c1 e2 04             	shl    $0x4,%edx
f010587e:	01 d0                	add    %edx,%eax
f0105880:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105884:	74 08                	je     f010588e <sched_kill_env+0x234>
f0105886:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105889:	8b 52 44             	mov    0x44(%edx),%edx
f010588c:	eb 05                	jmp    f0105893 <sched_kill_env+0x239>
f010588e:	ba 00 00 00 00       	mov    $0x0,%edx
f0105893:	89 50 08             	mov    %edx,0x8(%eax)
f0105896:	8b 40 08             	mov    0x8(%eax),%eax
f0105899:	85 c0                	test   %eax,%eax
f010589b:	0f 85 c2 fe ff ff    	jne    f0105763 <sched_kill_env+0x109>
f01058a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01058a5:	0f 85 b8 fe ff ff    	jne    f0105763 <sched_kill_env+0x109>
						break;
						//return;
					}
				}
			}
			if (found)
f01058ab:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01058af:	75 16                	jne    f01058c7 <sched_kill_env+0x26d>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01058b1:	ff 45 ec             	incl   -0x14(%ebp)
f01058b4:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01058b9:	0f b6 c0             	movzbl %al,%eax
f01058bc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01058bf:	0f 8f 69 fe ff ff    	jg     f010572e <sched_kill_env+0xd4>
f01058c5:	eb 01                	jmp    f01058c8 <sched_kill_env+0x26e>
						//return;
					}
				}
			}
			if (found)
				break;
f01058c7:	90                   	nop
		}
	}
	if (!found)
f01058c8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01058cc:	0f 85 a7 00 00 00    	jne    f0105979 <sched_kill_env+0x31f>
	{
		ptr_env=NULL;
f01058d2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01058d9:	a1 70 b8 85 f0       	mov    0xf085b870,%eax
f01058de:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01058e1:	eb 67                	jmp    f010594a <sched_kill_env+0x2f0>
		{
			if(ptr_env->env_id == envId)
f01058e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058e6:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058e9:	3b 45 08             	cmp    0x8(%ebp),%eax
f01058ec:	75 54                	jne    f0105942 <sched_kill_env+0x2e8>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f01058ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058f1:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01058f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058fa:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058fd:	83 ec 04             	sub    $0x4,%esp
f0105900:	52                   	push   %edx
f0105901:	50                   	push   %eax
f0105902:	68 00 60 13 f0       	push   $0xf0136000
f0105907:	e8 02 b4 ff ff       	call   f0100d0e <cprintf>
f010590c:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f010590f:	83 ec 0c             	sub    $0xc,%esp
f0105912:	ff 75 f4             	pushl  -0xc(%ebp)
f0105915:	e8 9e f2 ff ff       	call   f0104bb8 <sched_remove_exit>
f010591a:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f010591d:	83 ec 0c             	sub    $0xc,%esp
f0105920:	ff 75 f4             	pushl  -0xc(%ebp)
f0105923:	e8 54 46 00 00       	call   f0109f7c <env_free>
f0105928:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f010592b:	83 ec 0c             	sub    $0xc,%esp
f010592e:	68 2b 5f 13 f0       	push   $0xf0135f2b
f0105933:	e8 d6 b3 ff ff       	call   f0100d0e <cprintf>
f0105938:	83 c4 10             	add    $0x10,%esp
				found = 1;
f010593b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105942:	a1 78 b8 85 f0       	mov    0xf085b878,%eax
f0105947:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010594a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010594e:	74 08                	je     f0105958 <sched_kill_env+0x2fe>
f0105950:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105953:	8b 40 44             	mov    0x44(%eax),%eax
f0105956:	eb 05                	jmp    f010595d <sched_kill_env+0x303>
f0105958:	b8 00 00 00 00       	mov    $0x0,%eax
f010595d:	a3 78 b8 85 f0       	mov    %eax,0xf085b878
f0105962:	a1 78 b8 85 f0       	mov    0xf085b878,%eax
f0105967:	85 c0                	test   %eax,%eax
f0105969:	0f 85 74 ff ff ff    	jne    f01058e3 <sched_kill_env+0x289>
f010596f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105973:	0f 85 6a ff ff ff    	jne    f01058e3 <sched_kill_env+0x289>
				//return;
			}
		}
	}

	if (!found)
f0105979:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010597d:	0f 85 a0 00 00 00    	jne    f0105a23 <sched_kill_env+0x3c9>
	{
		if (curenv->env_id == envId)
f0105983:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f0105988:	8b 40 4c             	mov    0x4c(%eax),%eax
f010598b:	3b 45 08             	cmp    0x8(%ebp),%eax
f010598e:	0f 85 8f 00 00 00    	jne    f0105a23 <sched_kill_env+0x3c9>
		{
			ptr_env = curenv;
f0105994:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f0105999:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f010599c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010599f:	8b 40 4c             	mov    0x4c(%eax),%eax
f01059a2:	83 f8 02             	cmp    $0x2,%eax
f01059a5:	74 19                	je     f01059c0 <sched_kill_env+0x366>
f01059a7:	68 28 60 13 f0       	push   $0xf0136028
f01059ac:	68 16 5d 13 f0       	push   $0xf0135d16
f01059b1:	68 6c 02 00 00       	push   $0x26c
f01059b6:	68 2b 5d 13 f0       	push   $0xf0135d2b
f01059bb:	e8 45 a8 ff ff       	call   f0100205 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f01059c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059c3:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01059c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059cc:	8b 40 4c             	mov    0x4c(%eax),%eax
f01059cf:	83 ec 04             	sub    $0x4,%esp
f01059d2:	52                   	push   %edx
f01059d3:	50                   	push   %eax
f01059d4:	68 48 60 13 f0       	push   $0xf0136048
f01059d9:	e8 30 b3 ff ff       	call   f0100d0e <cprintf>
f01059de:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01059e1:	83 ec 0c             	sub    $0xc,%esp
f01059e4:	ff 75 f4             	pushl  -0xc(%ebp)
f01059e7:	e8 90 45 00 00       	call   f0109f7c <env_free>
f01059ec:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01059ef:	83 ec 0c             	sub    $0xc,%esp
f01059f2:	68 2b 5f 13 f0       	push   $0xf0135f2b
f01059f7:	e8 12 b3 ff ff       	call   f0100d0e <cprintf>
f01059fc:	83 c4 10             	add    $0x10,%esp
			found = 1;
f01059ff:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f0105a06:	a1 28 b9 85 f0       	mov    0xf085b928,%eax
f0105a0b:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105a0e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105a11:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f0105a14:	c7 05 74 af 85 f0 00 	movl   $0x0,0xf085af74
f0105a1b:	00 00 00 
			fos_scheduler();
f0105a1e:	e8 1e ed ff ff       	call   f0104741 <fos_scheduler>
		}
	}
}
f0105a23:	90                   	nop
f0105a24:	c9                   	leave  
f0105a25:	c3                   	ret    

f0105a26 <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f0105a26:	55                   	push   %ebp
f0105a27:	89 e5                	mov    %esp,%ebp
f0105a29:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0105a2c:	83 ec 0c             	sub    $0xc,%esp
f0105a2f:	6a 01                	push   $0x1
f0105a31:	e8 c9 87 00 00       	call   f010e1ff <isPageReplacmentAlgorithmLRU>
f0105a36:	83 c4 10             	add    $0x10,%esp
f0105a39:	85 c0                	test   %eax,%eax
f0105a3b:	74 05                	je     f0105a42 <clock_interrupt_handler+0x1c>
	{
		update_WS_time_stamps();
f0105a3d:	e8 05 00 00 00       	call   f0105a47 <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f0105a42:	e8 fa ec ff ff       	call   f0104741 <fos_scheduler>

f0105a47 <update_WS_time_stamps>:
}

void update_WS_time_stamps()
{
f0105a47:	55                   	push   %ebp
f0105a48:	89 e5                	mov    %esp,%ebp
f0105a4a:	53                   	push   %ebx
f0105a4b:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f0105a4e:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f0105a53:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0105a56:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0105a5a:	0f 84 cc 01 00 00    	je     f0105c2c <update_WS_time_stamps+0x1e5>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105a60:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105a67:	e9 cf 00 00 00       	jmp    f0105b3b <update_WS_time_stamps+0xf4>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f0105a6c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a6f:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a72:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a75:	89 d0                	mov    %edx,%eax
f0105a77:	01 c0                	add    %eax,%eax
f0105a79:	01 d0                	add    %edx,%eax
f0105a7b:	c1 e0 03             	shl    $0x3,%eax
f0105a7e:	01 c8                	add    %ecx,%eax
f0105a80:	8a 40 04             	mov    0x4(%eax),%al
f0105a83:	3c 01                	cmp    $0x1,%al
f0105a85:	0f 84 ad 00 00 00    	je     f0105b38 <update_WS_time_stamps+0xf1>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f0105a8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a8e:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a91:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a94:	89 d0                	mov    %edx,%eax
f0105a96:	01 c0                	add    %eax,%eax
f0105a98:	01 d0                	add    %edx,%eax
f0105a9a:	c1 e0 03             	shl    $0x3,%eax
f0105a9d:	01 c8                	add    %ecx,%eax
f0105a9f:	8b 00                	mov    (%eax),%eax
f0105aa1:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0105aa4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105aa7:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105aaa:	83 ec 08             	sub    $0x8,%esp
f0105aad:	ff 75 e8             	pushl  -0x18(%ebp)
f0105ab0:	50                   	push   %eax
f0105ab1:	e8 49 23 00 00       	call   f0107dff <pt_get_page_permissions>
f0105ab6:	83 c4 10             	add    $0x10,%esp
f0105ab9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f0105abc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105abf:	8b 48 78             	mov    0x78(%eax),%ecx
f0105ac2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105ac5:	89 d0                	mov    %edx,%eax
f0105ac7:	01 c0                	add    %eax,%eax
f0105ac9:	01 d0                	add    %edx,%eax
f0105acb:	c1 e0 03             	shl    $0x3,%eax
f0105ace:	01 c8                	add    %ecx,%eax
f0105ad0:	8b 40 08             	mov    0x8(%eax),%eax
f0105ad3:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f0105ad6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105ad9:	83 e0 20             	and    $0x20,%eax
f0105adc:	85 c0                	test   %eax,%eax
f0105ade:	74 3b                	je     f0105b1b <update_WS_time_stamps+0xd4>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105ae0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105ae3:	8b 48 78             	mov    0x78(%eax),%ecx
f0105ae6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105ae9:	89 d0                	mov    %edx,%eax
f0105aeb:	01 c0                	add    %eax,%eax
f0105aed:	01 d0                	add    %edx,%eax
f0105aef:	c1 e0 03             	shl    $0x3,%eax
f0105af2:	01 c8                	add    %ecx,%eax
f0105af4:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105af7:	c1 ea 02             	shr    $0x2,%edx
f0105afa:	81 ca 00 00 00 80    	or     $0x80000000,%edx
f0105b00:	89 50 08             	mov    %edx,0x8(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f0105b03:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b06:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105b09:	6a 20                	push   $0x20
f0105b0b:	6a 00                	push   $0x0
f0105b0d:	ff 75 e8             	pushl  -0x18(%ebp)
f0105b10:	50                   	push   %eax
f0105b11:	e8 cb 21 00 00       	call   f0107ce1 <pt_set_page_permissions>
f0105b16:	83 c4 10             	add    $0x10,%esp
f0105b19:	eb 1d                	jmp    f0105b38 <update_WS_time_stamps+0xf1>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f0105b1b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b1e:	8b 48 78             	mov    0x78(%eax),%ecx
f0105b21:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105b24:	89 d0                	mov    %edx,%eax
f0105b26:	01 c0                	add    %eax,%eax
f0105b28:	01 d0                	add    %edx,%eax
f0105b2a:	c1 e0 03             	shl    $0x3,%eax
f0105b2d:	01 c8                	add    %ecx,%eax
f0105b2f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105b32:	c1 ea 02             	shr    $0x2,%edx
f0105b35:	89 50 08             	mov    %edx,0x8(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105b38:	ff 45 f4             	incl   -0xc(%ebp)
f0105b3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b3e:	8b 50 74             	mov    0x74(%eax),%edx
f0105b41:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b44:	39 c2                	cmp    %eax,%edx
f0105b46:	0f 87 20 ff ff ff    	ja     f0105a6c <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105b4c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105b53:	e9 ca 00 00 00       	jmp    f0105c22 <update_WS_time_stamps+0x1db>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f0105b58:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b5b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b5e:	89 d0                	mov    %edx,%eax
f0105b60:	01 c0                	add    %eax,%eax
f0105b62:	01 d0                	add    %edx,%eax
f0105b64:	c1 e0 03             	shl    $0x3,%eax
f0105b67:	01 c8                	add    %ecx,%eax
f0105b69:	83 e8 80             	sub    $0xffffff80,%eax
f0105b6c:	8a 00                	mov    (%eax),%al
f0105b6e:	3c 01                	cmp    $0x1,%al
f0105b70:	0f 84 a9 00 00 00    	je     f0105c1f <update_WS_time_stamps+0x1d8>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0105b76:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b79:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b7c:	89 d0                	mov    %edx,%eax
f0105b7e:	01 c0                	add    %eax,%eax
f0105b80:	01 d0                	add    %edx,%eax
f0105b82:	c1 e0 03             	shl    $0x3,%eax
f0105b85:	01 c8                	add    %ecx,%eax
f0105b87:	83 c0 7c             	add    $0x7c,%eax
f0105b8a:	8b 00                	mov    (%eax),%eax
f0105b8c:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0105b8f:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b92:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b95:	89 d0                	mov    %edx,%eax
f0105b97:	01 c0                	add    %eax,%eax
f0105b99:	01 d0                	add    %edx,%eax
f0105b9b:	c1 e0 03             	shl    $0x3,%eax
f0105b9e:	01 c8                	add    %ecx,%eax
f0105ba0:	05 84 00 00 00       	add    $0x84,%eax
f0105ba5:	8b 00                	mov    (%eax),%eax
f0105ba7:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0105baa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105bad:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105bb0:	83 ec 08             	sub    $0x8,%esp
f0105bb3:	ff 75 dc             	pushl  -0x24(%ebp)
f0105bb6:	50                   	push   %eax
f0105bb7:	e8 72 23 00 00       	call   f0107f2e <pd_is_table_used>
f0105bbc:	83 c4 10             	add    $0x10,%esp
f0105bbf:	85 c0                	test   %eax,%eax
f0105bc1:	74 3c                	je     f0105bff <update_WS_time_stamps+0x1b8>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105bc3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105bc6:	c1 e8 02             	shr    $0x2,%eax
f0105bc9:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105bce:	89 c1                	mov    %eax,%ecx
f0105bd0:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105bd3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105bd6:	89 d0                	mov    %edx,%eax
f0105bd8:	01 c0                	add    %eax,%eax
f0105bda:	01 d0                	add    %edx,%eax
f0105bdc:	c1 e0 03             	shl    $0x3,%eax
f0105bdf:	01 d8                	add    %ebx,%eax
f0105be1:	05 84 00 00 00       	add    $0x84,%eax
f0105be6:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0105be8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105beb:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105bee:	83 ec 08             	sub    $0x8,%esp
f0105bf1:	ff 75 dc             	pushl  -0x24(%ebp)
f0105bf4:	50                   	push   %eax
f0105bf5:	e8 58 23 00 00       	call   f0107f52 <pd_set_table_unused>
f0105bfa:	83 c4 10             	add    $0x10,%esp
f0105bfd:	eb 20                	jmp    f0105c1f <update_WS_time_stamps+0x1d8>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0105bff:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105c02:	c1 e8 02             	shr    $0x2,%eax
f0105c05:	89 c1                	mov    %eax,%ecx
f0105c07:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105c0a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105c0d:	89 d0                	mov    %edx,%eax
f0105c0f:	01 c0                	add    %eax,%eax
f0105c11:	01 d0                	add    %edx,%eax
f0105c13:	c1 e0 03             	shl    $0x3,%eax
f0105c16:	01 d8                	add    %ebx,%eax
f0105c18:	05 84 00 00 00       	add    $0x84,%eax
f0105c1d:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105c1f:	ff 45 f0             	incl   -0x10(%ebp)
f0105c22:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0105c26:	0f 8e 2c ff ff ff    	jle    f0105b58 <update_WS_time_stamps+0x111>
					}
				}
			}
		}
	}
}
f0105c2c:	90                   	nop
f0105c2d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105c30:	c9                   	leave  
f0105c31:	c3                   	ret    

f0105c32 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0105c32:	55                   	push   %ebp
f0105c33:	89 e5                	mov    %esp,%ebp
f0105c35:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0105c38:	c7 05 6c af 85 f0 01 	movl   $0x1,0xf085af6c
f0105c3f:	00 00 00 
f0105c42:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0105c49:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0105c4d:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0105c50:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105c53:	ee                   	out    %al,(%dx)
f0105c54:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0105c5b:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0105c5f:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0105c62:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105c65:	ee                   	out    %al,(%dx)
f0105c66:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0105c6d:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0105c71:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0105c74:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105c77:	ee                   	out    %al,(%dx)
f0105c78:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0105c7f:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0105c83:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0105c86:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0105c89:	ee                   	out    %al,(%dx)
f0105c8a:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0105c91:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0105c95:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0105c98:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0105c9b:	ee                   	out    %al,(%dx)
f0105c9c:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0105ca3:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0105ca7:	8a 45 b7             	mov    -0x49(%ebp),%al
f0105caa:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105cad:	ee                   	out    %al,(%dx)
f0105cae:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0105cb5:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0105cb9:	8a 45 b8             	mov    -0x48(%ebp),%al
f0105cbc:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0105cbf:	ee                   	out    %al,(%dx)
f0105cc0:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0105cc7:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0105ccb:	8a 45 b9             	mov    -0x47(%ebp),%al
f0105cce:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105cd1:	ee                   	out    %al,(%dx)
f0105cd2:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0105cd9:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0105cdd:	8a 45 ba             	mov    -0x46(%ebp),%al
f0105ce0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0105ce3:	ee                   	out    %al,(%dx)
f0105ce4:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0105ceb:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0105cef:	8a 45 bb             	mov    -0x45(%ebp),%al
f0105cf2:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0105cf5:	ee                   	out    %al,(%dx)
f0105cf6:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0105cfd:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0105d01:	8a 45 bc             	mov    -0x44(%ebp),%al
f0105d04:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105d07:	ee                   	out    %al,(%dx)
f0105d08:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0105d0f:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0105d13:	8a 45 bd             	mov    -0x43(%ebp),%al
f0105d16:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0105d19:	ee                   	out    %al,(%dx)
f0105d1a:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0105d21:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0105d25:	8a 45 be             	mov    -0x42(%ebp),%al
f0105d28:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105d2b:	ee                   	out    %al,(%dx)
f0105d2c:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0105d33:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0105d37:	8a 45 bf             	mov    -0x41(%ebp),%al
f0105d3a:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0105d3d:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0105d3e:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0105d44:	66 83 f8 ff          	cmp    $0xffff,%ax
f0105d48:	74 15                	je     f0105d5f <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0105d4a:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0105d50:	0f b7 c0             	movzwl %ax,%eax
f0105d53:	83 ec 0c             	sub    $0xc,%esp
f0105d56:	50                   	push   %eax
f0105d57:	e8 06 00 00 00       	call   f0105d62 <irq_setmask_8259A>
f0105d5c:	83 c4 10             	add    $0x10,%esp
}
f0105d5f:	90                   	nop
f0105d60:	c9                   	leave  
f0105d61:	c3                   	ret    

f0105d62 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0105d62:	55                   	push   %ebp
f0105d63:	89 e5                	mov    %esp,%ebp
f0105d65:	83 ec 14             	sub    $0x14,%esp
f0105d68:	8b 45 08             	mov    0x8(%ebp),%eax
f0105d6b:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0105d6f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d72:	66 a3 b0 38 19 f0    	mov    %ax,0xf01938b0
	if (!didinit)
f0105d78:	a1 6c af 85 f0       	mov    0xf085af6c,%eax
f0105d7d:	85 c0                	test   %eax,%eax
f0105d7f:	74 34                	je     f0105db5 <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0105d81:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d84:	0f b6 c0             	movzbl %al,%eax
f0105d87:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0105d8e:	88 45 f6             	mov    %al,-0xa(%ebp)
f0105d91:	8a 45 f6             	mov    -0xa(%ebp),%al
f0105d94:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0105d97:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0105d98:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d9b:	66 c1 e8 08          	shr    $0x8,%ax
f0105d9f:	0f b6 c0             	movzbl %al,%eax
f0105da2:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0105da9:	88 45 f7             	mov    %al,-0x9(%ebp)
f0105dac:	8a 45 f7             	mov    -0x9(%ebp),%al
f0105daf:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0105db2:	ee                   	out    %al,(%dx)
f0105db3:	eb 01                	jmp    f0105db6 <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0105db5:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0105db6:	c9                   	leave  
f0105db7:	c3                   	ret    

f0105db8 <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0105db8:	55                   	push   %ebp
f0105db9:	89 e5                	mov    %esp,%ebp
f0105dbb:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0105dbe:	83 ec 08             	sub    $0x8,%esp
f0105dc1:	68 00 10 00 00       	push   $0x1000
f0105dc6:	68 00 10 00 00       	push   $0x1000
f0105dcb:	e8 6a 02 00 00       	call   f010603a <boot_allocate_space>
f0105dd0:	83 c4 10             	add    $0x10,%esp
f0105dd3:	a3 f8 b8 85 f0       	mov    %eax,0xf085b8f8
	memset(ptr_page_directory, 0, PAGE_SIZE);
f0105dd8:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0105ddd:	83 ec 04             	sub    $0x4,%esp
f0105de0:	68 00 10 00 00       	push   $0x1000
f0105de5:	6a 00                	push   $0x0
f0105de7:	50                   	push   %eax
f0105de8:	e8 68 be 02 00       	call   f0131c55 <memset>
f0105ded:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0105df0:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0105df5:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105df8:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0105dff:	77 14                	ja     f0105e15 <initialize_kernel_VM+0x5d>
f0105e01:	ff 75 e8             	pushl  -0x18(%ebp)
f0105e04:	68 74 60 13 f0       	push   $0xf0136074
f0105e09:	6a 45                	push   $0x45
f0105e0b:	68 a8 60 13 f0       	push   $0xf01360a8
f0105e10:	e8 f0 a3 ff ff       	call   f0100205 <_panic>
f0105e15:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105e18:	05 00 00 00 10       	add    $0x10000000,%eax
f0105e1d:	a3 28 b9 85 f0       	mov    %eax,0xf085b928
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0105e22:	c7 45 e4 00 b0 18 f0 	movl   $0xf018b000,-0x1c(%ebp)
f0105e29:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0105e30:	77 14                	ja     f0105e46 <initialize_kernel_VM+0x8e>
f0105e32:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105e35:	68 74 60 13 f0       	push   $0xf0136074
f0105e3a:	6a 4d                	push   $0x4d
f0105e3c:	68 a8 60 13 f0       	push   $0xf01360a8
f0105e41:	e8 bf a3 ff ff       	call   f0100205 <_panic>
f0105e46:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105e49:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105e4f:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0105e54:	83 ec 0c             	sub    $0xc,%esp
f0105e57:	6a 02                	push   $0x2
f0105e59:	52                   	push   %edx
f0105e5a:	68 00 80 00 00       	push   $0x8000
f0105e5f:	68 00 80 bf ef       	push   $0xefbf8000
f0105e64:	50                   	push   %eax
f0105e65:	e8 31 02 00 00       	call   f010609b <boot_map_range>
f0105e6a:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0105e6d:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f0105e74:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0105e7b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105e82:	eb 25                	jmp    f0105ea9 <initialize_kernel_VM+0xf1>
	{
		++nTables;
f0105e84:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0105e87:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105e8a:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0105e8f:	83 ec 04             	sub    $0x4,%esp
f0105e92:	6a 01                	push   $0x1
f0105e94:	52                   	push   %edx
f0105e95:	50                   	push   %eax
f0105e96:	e8 74 02 00 00       	call   f010610f <boot_get_page_table>
f0105e9b:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105e9e:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0105ea5:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0105ea9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ead:	72 d5                	jb     f0105e84 <initialize_kernel_VM+0xcc>
f0105eaf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105eb3:	77 06                	ja     f0105ebb <initialize_kernel_VM+0x103>
f0105eb5:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0105eb9:	76 c9                	jbe    f0105e84 <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0105ebb:	8b 15 8c b8 85 f0    	mov    0xf085b88c,%edx
f0105ec1:	89 d0                	mov    %edx,%eax
f0105ec3:	01 c0                	add    %eax,%eax
f0105ec5:	01 d0                	add    %edx,%eax
f0105ec7:	c1 e0 03             	shl    $0x3,%eax
f0105eca:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0105ecd:	83 ec 08             	sub    $0x8,%esp
f0105ed0:	68 00 10 00 00       	push   $0x1000
f0105ed5:	ff 75 e0             	pushl  -0x20(%ebp)
f0105ed8:	e8 5d 01 00 00       	call   f010603a <boot_allocate_space>
f0105edd:	83 c4 10             	add    $0x10,%esp
f0105ee0:	a3 d0 b8 85 f0       	mov    %eax,0xf085b8d0
	memset(frames_info, 0, array_size);
f0105ee5:	a1 d0 b8 85 f0       	mov    0xf085b8d0,%eax
f0105eea:	83 ec 04             	sub    $0x4,%esp
f0105eed:	ff 75 e0             	pushl  -0x20(%ebp)
f0105ef0:	6a 00                	push   $0x0
f0105ef2:	50                   	push   %eax
f0105ef3:	e8 5d bd 02 00       	call   f0131c55 <memset>
f0105ef8:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0105efb:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0105f02:	83 ec 08             	sub    $0x8,%esp
f0105f05:	68 00 10 00 00       	push   $0x1000
f0105f0a:	ff 75 dc             	pushl  -0x24(%ebp)
f0105f0d:	e8 28 01 00 00       	call   f010603a <boot_allocate_space>
f0105f12:	83 c4 10             	add    $0x10,%esp
f0105f15:	a3 58 b8 85 f0       	mov    %eax,0xf085b858
	memset(disk_frames_info , 0, disk_array_size);
f0105f1a:	a1 58 b8 85 f0       	mov    0xf085b858,%eax
f0105f1f:	83 ec 04             	sub    $0x4,%esp
f0105f22:	ff 75 dc             	pushl  -0x24(%ebp)
f0105f25:	6a 00                	push   $0x0
f0105f27:	50                   	push   %eax
f0105f28:	e8 28 bd 02 00       	call   f0131c55 <memset>
f0105f2d:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0105f30:	e8 d5 04 00 00       	call   f010640a <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0105f35:	83 ec 0c             	sub    $0xc,%esp
f0105f38:	68 b1 02 00 00       	push   $0x2b1
f0105f3d:	e8 97 a8 02 00       	call   f01307d9 <nearest_pow2_ceil>
f0105f42:	83 c4 10             	add    $0x10,%esp
f0105f45:	83 ec 04             	sub    $0x4,%esp
f0105f48:	50                   	push   %eax
f0105f49:	68 b1 02 00 00       	push   $0x2b1
f0105f4e:	68 c8 60 13 f0       	push   $0xf01360c8
f0105f53:	e8 b6 ad ff ff       	call   f0100d0e <cprintf>
f0105f58:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f0105f5b:	c7 45 d8 f0 fa 0f 00 	movl   $0xffaf0,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f0105f62:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105f65:	83 ec 08             	sub    $0x8,%esp
f0105f68:	68 00 10 00 00       	push   $0x1000
f0105f6d:	50                   	push   %eax
f0105f6e:	e8 c7 00 00 00       	call   f010603a <boot_allocate_space>
f0105f73:	83 c4 10             	add    $0x10,%esp
f0105f76:	a3 70 af 85 f0       	mov    %eax,0xf085af70
	memset(envs , 0, envs_size);
f0105f7b:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105f7e:	a1 70 af 85 f0       	mov    0xf085af70,%eax
f0105f83:	83 ec 04             	sub    $0x4,%esp
f0105f86:	52                   	push   %edx
f0105f87:	6a 00                	push   $0x0
f0105f89:	50                   	push   %eax
f0105f8a:	e8 c6 bc 02 00       	call   f0131c55 <memset>
f0105f8f:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0105f92:	a1 70 af 85 f0       	mov    0xf085af70,%eax
f0105f97:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0105f9a:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0105fa1:	77 17                	ja     f0105fba <initialize_kernel_VM+0x202>
f0105fa3:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105fa6:	68 74 60 13 f0       	push   $0xf0136074
f0105fab:	68 96 00 00 00       	push   $0x96
f0105fb0:	68 a8 60 13 f0       	push   $0xf01360a8
f0105fb5:	e8 4b a2 ff ff       	call   f0100205 <_panic>
f0105fba:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105fbd:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0105fc3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105fc6:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0105fcb:	83 ec 0c             	sub    $0xc,%esp
f0105fce:	6a 04                	push   $0x4
f0105fd0:	51                   	push   %ecx
f0105fd1:	52                   	push   %edx
f0105fd2:	68 00 00 c0 ee       	push   $0xeec00000
f0105fd7:	50                   	push   %eax
f0105fd8:	e8 be 00 00 00       	call   f010609b <boot_map_range>
f0105fdd:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0105fe0:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0105fe5:	05 ec 0e 00 00       	add    $0xeec,%eax
f0105fea:	8b 15 f8 b8 85 f0    	mov    0xf085b8f8,%edx
f0105ff0:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0105ff6:	8b 12                	mov    (%edx),%edx
f0105ff8:	83 ca 05             	or     $0x5,%edx
f0105ffb:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	{
		// MAKE SURE THAT THIS MAPPING HAPPENS AFTER ALL BOOT ALLOCATIONS (boot_allocate_space)
		// calls are fininshed, and no remaining data to be allocated for the kernel
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0105ffd:	a1 f4 b8 85 f0       	mov    0xf085b8f4,%eax
f0106002:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0106008:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f010600d:	83 ec 0c             	sub    $0xc,%esp
f0106010:	6a 02                	push   $0x2
f0106012:	6a 00                	push   $0x0
f0106014:	52                   	push   %edx
f0106015:	68 00 00 00 f0       	push   $0xf0000000
f010601a:	50                   	push   %eax
f010601b:	e8 7b 00 00 00       	call   f010609b <boot_map_range>
f0106020:	83 c4 20             	add    $0x20,%esp
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0106023:	e8 98 af 02 00       	call   f0130fc0 <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0106028:	c7 05 6c b8 85 f0 19 	movl   $0x19,0xf085b86c
f010602f:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f0106032:	e8 d3 02 00 00       	call   f010630a <turn_on_paging>
}
f0106037:	90                   	nop
f0106038:	c9                   	leave  
f0106039:	c3                   	ret    

f010603a <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f010603a:	55                   	push   %ebp
f010603b:	89 e5                	mov    %esp,%ebp
f010603d:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f0106040:	a1 f4 b8 85 f0       	mov    0xf085b8f4,%eax
f0106045:	85 c0                	test   %eax,%eax
f0106047:	75 0a                	jne    f0106053 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f0106049:	c7 05 f4 b8 85 f0 40 	movl   $0xf085ba40,0xf085b8f4
f0106050:	ba 85 f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0106053:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106056:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0106059:	a1 f4 b8 85 f0       	mov    0xf085b8f4,%eax
f010605e:	89 c2                	mov    %eax,%edx
f0106060:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106063:	01 d0                	add    %edx,%eax
f0106065:	48                   	dec    %eax
f0106066:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0106069:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010606c:	ba 00 00 00 00       	mov    $0x0,%edx
f0106071:	f7 75 fc             	divl   -0x4(%ebp)
f0106074:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0106077:	29 d0                	sub    %edx,%eax
f0106079:	a3 f4 b8 85 f0       	mov    %eax,0xf085b8f4

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f010607e:	a1 f4 b8 85 f0       	mov    0xf085b8f4,%eax
f0106083:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f0106086:	8b 15 f4 b8 85 f0    	mov    0xf085b8f4,%edx
f010608c:	8b 45 08             	mov    0x8(%ebp),%eax
f010608f:	01 d0                	add    %edx,%eax
f0106091:	a3 f4 b8 85 f0       	mov    %eax,0xf085b8f4

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f0106096:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f0106099:	c9                   	leave  
f010609a:	c3                   	ret    

f010609b <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f010609b:	55                   	push   %ebp
f010609c:	89 e5                	mov    %esp,%ebp
f010609e:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f01060a1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f01060a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01060af:	eb 53                	jmp    f0106104 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f01060b1:	83 ec 04             	sub    $0x4,%esp
f01060b4:	6a 01                	push   $0x1
f01060b6:	ff 75 0c             	pushl  0xc(%ebp)
f01060b9:	ff 75 08             	pushl  0x8(%ebp)
f01060bc:	e8 4e 00 00 00       	call   f010610f <boot_get_page_table>
f01060c1:	83 c4 10             	add    $0x10,%esp
f01060c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f01060c7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01060ca:	c1 e8 0c             	shr    $0xc,%eax
f01060cd:	25 ff 03 00 00       	and    $0x3ff,%eax
f01060d2:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f01060d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01060d8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01060df:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01060e2:	01 c2                	add    %eax,%edx
f01060e4:	8b 45 18             	mov    0x18(%ebp),%eax
f01060e7:	0b 45 14             	or     0x14(%ebp),%eax
f01060ea:	83 c8 01             	or     $0x1,%eax
f01060ed:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f01060ef:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f01060f6:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f01060fd:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0106104:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106107:	3b 45 10             	cmp    0x10(%ebp),%eax
f010610a:	72 a5                	jb     f01060b1 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f010610c:	90                   	nop
f010610d:	c9                   	leave  
f010610e:	c3                   	ret    

f010610f <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f010610f:	55                   	push   %ebp
f0106110:	89 e5                	mov    %esp,%ebp
f0106112:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0106115:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106118:	c1 e8 16             	shr    $0x16,%eax
f010611b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f010611e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106121:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106128:	8b 45 08             	mov    0x8(%ebp),%eax
f010612b:	01 d0                	add    %edx,%eax
f010612d:	8b 00                	mov    (%eax),%eax
f010612f:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0106132:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106135:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010613a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f010613d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106140:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106143:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106146:	c1 e8 0c             	shr    $0xc,%eax
f0106149:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010614c:	a1 8c b8 85 f0       	mov    0xf085b88c,%eax
f0106151:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106154:	72 17                	jb     f010616d <boot_get_page_table+0x5e>
f0106156:	ff 75 e8             	pushl  -0x18(%ebp)
f0106159:	68 f0 60 13 f0       	push   $0xf01360f0
f010615e:	68 15 01 00 00       	push   $0x115
f0106163:	68 a8 60 13 f0       	push   $0xf01360a8
f0106168:	e8 98 a0 ff ff       	call   f0100205 <_panic>
f010616d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106170:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106175:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f0106178:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010617c:	75 72                	jne    f01061f0 <boot_get_page_table+0xe1>
	{
		if (create)
f010617e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0106182:	74 65                	je     f01061e9 <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0106184:	83 ec 08             	sub    $0x8,%esp
f0106187:	68 00 10 00 00       	push   $0x1000
f010618c:	68 00 10 00 00       	push   $0x1000
f0106191:	e8 a4 fe ff ff       	call   f010603a <boot_allocate_space>
f0106196:	83 c4 10             	add    $0x10,%esp
f0106199:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f010619c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010619f:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01061a2:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f01061a9:	77 17                	ja     f01061c2 <boot_get_page_table+0xb3>
f01061ab:	ff 75 dc             	pushl  -0x24(%ebp)
f01061ae:	68 74 60 13 f0       	push   $0xf0136074
f01061b3:	68 1b 01 00 00       	push   $0x11b
f01061b8:	68 a8 60 13 f0       	push   $0xf01360a8
f01061bd:	e8 43 a0 ff ff       	call   f0100205 <_panic>
f01061c2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01061c5:	05 00 00 00 10       	add    $0x10000000,%eax
f01061ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f01061cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01061d0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01061d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01061da:	01 d0                	add    %edx,%eax
f01061dc:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01061df:	83 ca 03             	or     $0x3,%edx
f01061e2:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f01061e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01061e7:	eb 0a                	jmp    f01061f3 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f01061e9:	b8 00 00 00 00       	mov    $0x0,%eax
f01061ee:	eb 03                	jmp    f01061f3 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f01061f0:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f01061f3:	c9                   	leave  
f01061f4:	c3                   	ret    

f01061f5 <nvram_read>:


int nvram_read(int r)
{
f01061f5:	55                   	push   %ebp
f01061f6:	89 e5                	mov    %esp,%ebp
f01061f8:	53                   	push   %ebx
f01061f9:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f01061fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01061ff:	83 ec 0c             	sub    $0xc,%esp
f0106202:	50                   	push   %eax
f0106203:	e8 9b de ff ff       	call   f01040a3 <mc146818_read>
f0106208:	83 c4 10             	add    $0x10,%esp
f010620b:	89 c3                	mov    %eax,%ebx
f010620d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106210:	40                   	inc    %eax
f0106211:	83 ec 0c             	sub    $0xc,%esp
f0106214:	50                   	push   %eax
f0106215:	e8 89 de ff ff       	call   f01040a3 <mc146818_read>
f010621a:	83 c4 10             	add    $0x10,%esp
f010621d:	c1 e0 08             	shl    $0x8,%eax
f0106220:	09 d8                	or     %ebx,%eax
}
f0106222:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106225:	c9                   	leave  
f0106226:	c3                   	ret    

f0106227 <detect_memory>:

void detect_memory()
{
f0106227:	55                   	push   %ebp
f0106228:	89 e5                	mov    %esp,%ebp
f010622a:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f010622d:	83 ec 0c             	sub    $0xc,%esp
f0106230:	6a 15                	push   $0x15
f0106232:	e8 be ff ff ff       	call   f01061f5 <nvram_read>
f0106237:	83 c4 10             	add    $0x10,%esp
f010623a:	c1 e0 0a             	shl    $0xa,%eax
f010623d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106240:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106243:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106248:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f010624b:	83 ec 0c             	sub    $0xc,%esp
f010624e:	6a 17                	push   $0x17
f0106250:	e8 a0 ff ff ff       	call   f01061f5 <nvram_read>
f0106255:	83 c4 10             	add    $0x10,%esp
f0106258:	c1 e0 0a             	shl    $0xa,%eax
f010625b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010625e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106261:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106266:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f0106269:	83 ec 0c             	sub    $0xc,%esp
f010626c:	6a 34                	push   $0x34
f010626e:	e8 82 ff ff ff       	call   f01061f5 <nvram_read>
f0106273:	83 c4 10             	add    $0x10,%esp
f0106276:	c1 e0 10             	shl    $0x10,%eax
f0106279:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010627c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010627f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106284:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f0106287:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010628b:	74 18                	je     f01062a5 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f010628d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106290:	05 00 00 00 01       	add    $0x1000000,%eax
f0106295:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f0106298:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010629b:	2d 00 00 10 00       	sub    $0x100000,%eax
f01062a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01062a3:	eb 19                	jmp    f01062be <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f01062a5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01062a9:	74 0d                	je     f01062b8 <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f01062ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062ae:	05 00 00 10 00       	add    $0x100000,%eax
f01062b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01062b6:	eb 06                	jmp    f01062be <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f01062b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f01062be:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
		while(1);
	}
	number_of_frames = maxpa / PAGE_SIZE;
f01062c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062c8:	c1 e8 0c             	shr    $0xc,%eax
f01062cb:	a3 8c b8 85 f0       	mov    %eax,0xf085b88c

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f01062d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062d3:	c1 e8 0a             	shr    $0xa,%eax
f01062d6:	83 ec 08             	sub    $0x8,%esp
f01062d9:	50                   	push   %eax
f01062da:	68 20 61 13 f0       	push   $0xf0136120
f01062df:	e8 2a aa ff ff       	call   f0100d0e <cprintf>
f01062e4:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f01062e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062ea:	c1 e8 0a             	shr    $0xa,%eax
f01062ed:	89 c2                	mov    %eax,%edx
f01062ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01062f2:	c1 e8 0a             	shr    $0xa,%eax
f01062f5:	83 ec 04             	sub    $0x4,%esp
f01062f8:	52                   	push   %edx
f01062f9:	50                   	push   %eax
f01062fa:	68 41 61 13 f0       	push   $0xf0136141
f01062ff:	e8 0a aa ff ff       	call   f0100d0e <cprintf>
f0106304:	83 c4 10             	add    $0x10,%esp
}
f0106307:	90                   	nop
f0106308:	c9                   	leave  
f0106309:	c3                   	ret    

f010630a <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f010630a:	55                   	push   %ebp
f010630b:	89 e5                	mov    %esp,%ebp
f010630d:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f0106310:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f0106317:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010631e:	eb 24                	jmp    f0106344 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f0106320:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0106325:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106328:	c1 e2 02             	shl    $0x2,%edx
f010632b:	01 c2                	add    %eax,%edx
f010632d:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0106332:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0106335:	c1 e1 02             	shl    $0x2,%ecx
f0106338:	01 c8                	add    %ecx,%eax
f010633a:	8b 00                	mov    (%eax),%eax
f010633c:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010633e:	ff 45 fc             	incl   -0x4(%ebp)
f0106341:	ff 45 f8             	incl   -0x8(%ebp)
f0106344:	a1 f4 b8 85 f0       	mov    0xf085b8f4,%eax
f0106349:	c1 e8 16             	shr    $0x16,%eax
f010634c:	89 c2                	mov    %eax,%edx
f010634e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106351:	39 c2                	cmp    %eax,%edx
f0106353:	77 cb                	ja     f0106320 <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f0106355:	a1 28 b9 85 f0       	mov    0xf085b928,%eax
f010635a:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010635d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106360:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106363:	0f 20 c0             	mov    %cr0,%eax
f0106366:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f0106369:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f010636c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f010636f:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0106376:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f010637a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010637d:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0106380:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106383:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f0106386:	0f 01 15 f0 38 19 f0 	lgdtl  0xf01938f0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f010638d:	b8 23 00 00 00       	mov    $0x23,%eax
f0106392:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0106394:	b8 23 00 00 00       	mov    $0x23,%eax
f0106399:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f010639b:	b8 10 00 00 00       	mov    $0x10,%eax
f01063a0:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f01063a2:	b8 10 00 00 00       	mov    $0x10,%eax
f01063a7:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f01063a9:	b8 10 00 00 00       	mov    $0x10,%eax
f01063ae:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f01063b0:	ea b7 63 10 f0 08 00 	ljmp   $0x8,$0xf01063b7
	asm volatile("lldt %%ax" :: "a" (0));
f01063b7:	b8 00 00 00 00       	mov    $0x0,%eax
f01063bc:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f01063bf:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f01063c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01063cd:	eb 19                	jmp    f01063e8 <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f01063cf:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f01063d4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01063d7:	c1 e2 02             	shl    $0x2,%edx
f01063da:	01 d0                	add    %edx,%eax
f01063dc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01063e2:	ff 45 f4             	incl   -0xc(%ebp)
f01063e5:	ff 45 f0             	incl   -0x10(%ebp)
f01063e8:	a1 f4 b8 85 f0       	mov    0xf085b8f4,%eax
f01063ed:	c1 e8 16             	shr    $0x16,%eax
f01063f0:	89 c2                	mov    %eax,%edx
f01063f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01063f5:	39 c2                	cmp    %eax,%edx
f01063f7:	77 d6                	ja     f01063cf <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f01063f9:	a1 28 b9 85 f0       	mov    0xf085b928,%eax
f01063fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106401:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106404:	0f 22 d8             	mov    %eax,%cr3
}
f0106407:	90                   	nop
f0106408:	c9                   	leave  
f0106409:	c3                   	ret    

f010640a <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f010640a:	55                   	push   %ebp
f010640b:	89 e5                	mov    %esp,%ebp
f010640d:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0106410:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0106415:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106418:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f010641f:	77 17                	ja     f0106438 <setup_listing_to_all_page_tables_entries+0x2e>
f0106421:	ff 75 f4             	pushl  -0xc(%ebp)
f0106424:	68 74 60 13 f0       	push   $0xf0136074
f0106429:	68 ab 01 00 00       	push   $0x1ab
f010642e:	68 a8 60 13 f0       	push   $0xf01360a8
f0106433:	e8 cd 9d ff ff       	call   f0100205 <_panic>
f0106438:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010643b:	05 00 00 00 10       	add    $0x10000000,%eax
f0106440:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0106443:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0106448:	05 fc 0e 00 00       	add    $0xefc,%eax
f010644d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106450:	83 ca 03             	or     $0x3,%edx
f0106453:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f0106455:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f010645a:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0106460:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0106465:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106468:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f010646f:	77 17                	ja     f0106488 <setup_listing_to_all_page_tables_entries+0x7e>
f0106471:	ff 75 ec             	pushl  -0x14(%ebp)
f0106474:	68 74 60 13 f0       	push   $0xf0136074
f0106479:	68 b0 01 00 00       	push   $0x1b0
f010647e:	68 a8 60 13 f0       	push   $0xf01360a8
f0106483:	e8 7d 9d ff ff       	call   f0100205 <_panic>
f0106488:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010648b:	05 00 00 00 10       	add    $0x10000000,%eax
f0106490:	83 c8 05             	or     $0x5,%eax
f0106493:	89 02                	mov    %eax,(%edx)

}
f0106495:	90                   	nop
f0106496:	c9                   	leave  
f0106497:	c3                   	ret    

f0106498 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0106498:	55                   	push   %ebp
f0106499:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010649b:	8b 45 08             	mov    0x8(%ebp),%eax
f010649e:	8b 15 d0 b8 85 f0    	mov    0xf085b8d0,%edx
f01064a4:	29 d0                	sub    %edx,%eax
f01064a6:	c1 f8 03             	sar    $0x3,%eax
f01064a9:	89 c2                	mov    %eax,%edx
f01064ab:	89 d0                	mov    %edx,%eax
f01064ad:	c1 e0 02             	shl    $0x2,%eax
f01064b0:	01 d0                	add    %edx,%eax
f01064b2:	c1 e0 02             	shl    $0x2,%eax
f01064b5:	01 d0                	add    %edx,%eax
f01064b7:	c1 e0 02             	shl    $0x2,%eax
f01064ba:	01 d0                	add    %edx,%eax
f01064bc:	89 c1                	mov    %eax,%ecx
f01064be:	c1 e1 08             	shl    $0x8,%ecx
f01064c1:	01 c8                	add    %ecx,%eax
f01064c3:	89 c1                	mov    %eax,%ecx
f01064c5:	c1 e1 10             	shl    $0x10,%ecx
f01064c8:	01 c8                	add    %ecx,%eax
f01064ca:	01 c0                	add    %eax,%eax
f01064cc:	01 d0                	add    %edx,%eax
}
f01064ce:	5d                   	pop    %ebp
f01064cf:	c3                   	ret    

f01064d0 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01064d0:	55                   	push   %ebp
f01064d1:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01064d3:	ff 75 08             	pushl  0x8(%ebp)
f01064d6:	e8 bd ff ff ff       	call   f0106498 <to_frame_number>
f01064db:	83 c4 04             	add    $0x4,%esp
f01064de:	c1 e0 0c             	shl    $0xc,%eax
}
f01064e1:	c9                   	leave  
f01064e2:	c3                   	ret    

f01064e3 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f01064e3:	55                   	push   %ebp
f01064e4:	89 e5                	mov    %esp,%ebp
f01064e6:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f01064e9:	8b 45 08             	mov    0x8(%ebp),%eax
f01064ec:	c1 e8 0c             	shr    $0xc,%eax
f01064ef:	89 c2                	mov    %eax,%edx
f01064f1:	a1 8c b8 85 f0       	mov    0xf085b88c,%eax
f01064f6:	39 c2                	cmp    %eax,%edx
f01064f8:	72 14                	jb     f010650e <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f01064fa:	83 ec 04             	sub    $0x4,%esp
f01064fd:	68 60 61 13 f0       	push   $0xf0136160
f0106502:	6a 55                	push   $0x55
f0106504:	68 85 61 13 f0       	push   $0xf0136185
f0106509:	e8 f7 9c ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f010650e:	8b 15 d0 b8 85 f0    	mov    0xf085b8d0,%edx
f0106514:	8b 45 08             	mov    0x8(%ebp),%eax
f0106517:	c1 e8 0c             	shr    $0xc,%eax
f010651a:	89 c1                	mov    %eax,%ecx
f010651c:	89 c8                	mov    %ecx,%eax
f010651e:	01 c0                	add    %eax,%eax
f0106520:	01 c8                	add    %ecx,%eax
f0106522:	c1 e0 03             	shl    $0x3,%eax
f0106525:	01 d0                	add    %edx,%eax
}
f0106527:	c9                   	leave  
f0106528:	c3                   	ret    

f0106529 <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f0106529:	55                   	push   %ebp
f010652a:	89 e5                	mov    %esp,%ebp
f010652c:	83 ec 10             	sub    $0x10,%esp
f010652f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106532:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f0106535:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106538:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f010653b:	90                   	nop
f010653c:	c9                   	leave  
f010653d:	c3                   	ret    

f010653e <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f010653e:	55                   	push   %ebp
f010653f:	89 e5                	mov    %esp,%ebp
f0106541:	53                   	push   %ebx
f0106542:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f0106545:	c7 05 94 b8 85 f0 00 	movl   $0x0,0xf085b894
f010654c:	00 00 00 
f010654f:	c7 05 98 b8 85 f0 00 	movl   $0x0,0xf085b898
f0106556:	00 00 00 
f0106559:	c7 05 a0 b8 85 f0 00 	movl   $0x0,0xf085b8a0
f0106560:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106563:	c7 05 34 b8 85 f0 00 	movl   $0x0,0xf085b834
f010656a:	00 00 00 
f010656d:	c7 05 38 b8 85 f0 00 	movl   $0x0,0xf085b838
f0106574:	00 00 00 
f0106577:	c7 05 40 b8 85 f0 00 	movl   $0x0,0xf085b840
f010657e:	00 00 00 

	frames_info[0].references = 1;
f0106581:	a1 d0 b8 85 f0       	mov    0xf085b8d0,%eax
f0106586:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f010658c:	a1 d0 b8 85 f0       	mov    0xf085b8d0,%eax
f0106591:	83 c0 18             	add    $0x18,%eax
f0106594:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f010659a:	a1 d0 b8 85 f0       	mov    0xf085b8d0,%eax
f010659f:	83 c0 30             	add    $0x30,%eax
f01065a2:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f01065a8:	c7 05 dc b8 85 f0 00 	movl   $0xf0001000,0xf085b8dc
f01065af:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f01065b2:	c7 05 00 b9 85 f0 00 	movl   $0xf0002000,0xf085b900
f01065b9:	20 00 f0 
	i =0;
f01065bc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f01065c3:	eb 1f                	jmp    f01065e4 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f01065c5:	8b 15 dc b8 85 f0    	mov    0xf085b8dc,%edx
f01065cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065ce:	01 d0                	add    %edx,%eax
f01065d0:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f01065d3:	8b 15 00 b9 85 f0    	mov    0xf085b900,%edx
f01065d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065dc:	01 d0                	add    %edx,%eax
f01065de:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f01065e1:	ff 45 f4             	incl   -0xc(%ebp)
f01065e4:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f01065eb:	7e d8                	jle    f01065c5 <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f01065ed:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01065f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065f7:	05 ff ff 09 00       	add    $0x9ffff,%eax
f01065fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01065ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106602:	ba 00 00 00 00       	mov    $0x0,%edx
f0106607:	f7 75 f0             	divl   -0x10(%ebp)
f010660a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010660d:	29 d0                	sub    %edx,%eax
f010660f:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0106612:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f0106619:	e9 e8 00 00 00       	jmp    f0106706 <initialize_paging+0x1c8>
	{

		initialize_frame_info(&(frames_info[i]));
f010661e:	8b 0d d0 b8 85 f0    	mov    0xf085b8d0,%ecx
f0106624:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106627:	89 d0                	mov    %edx,%eax
f0106629:	01 c0                	add    %eax,%eax
f010662b:	01 d0                	add    %edx,%eax
f010662d:	c1 e0 03             	shl    $0x3,%eax
f0106630:	01 c8                	add    %ecx,%eax
f0106632:	83 ec 0c             	sub    $0xc,%esp
f0106635:	50                   	push   %eax
f0106636:	e8 b7 02 00 00       	call   f01068f2 <initialize_frame_info>
f010663b:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f010663e:	8b 0d d0 b8 85 f0    	mov    0xf085b8d0,%ecx
f0106644:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106647:	89 d0                	mov    %edx,%eax
f0106649:	01 c0                	add    %eax,%eax
f010664b:	01 d0                	add    %edx,%eax
f010664d:	c1 e0 03             	shl    $0x3,%eax
f0106650:	01 c8                	add    %ecx,%eax
f0106652:	85 c0                	test   %eax,%eax
f0106654:	75 14                	jne    f010666a <initialize_paging+0x12c>
f0106656:	83 ec 04             	sub    $0x4,%esp
f0106659:	68 a0 61 13 f0       	push   $0xf01361a0
f010665e:	6a 5c                	push   $0x5c
f0106660:	68 c3 61 13 f0       	push   $0xf01361c3
f0106665:	e8 9b 9b ff ff       	call   f0100205 <_panic>
f010666a:	8b 0d d0 b8 85 f0    	mov    0xf085b8d0,%ecx
f0106670:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106673:	89 d0                	mov    %edx,%eax
f0106675:	01 c0                	add    %eax,%eax
f0106677:	01 d0                	add    %edx,%eax
f0106679:	c1 e0 03             	shl    $0x3,%eax
f010667c:	01 c8                	add    %ecx,%eax
f010667e:	8b 15 94 b8 85 f0    	mov    0xf085b894,%edx
f0106684:	89 10                	mov    %edx,(%eax)
f0106686:	8b 00                	mov    (%eax),%eax
f0106688:	85 c0                	test   %eax,%eax
f010668a:	74 1f                	je     f01066ab <initialize_paging+0x16d>
f010668c:	8b 15 94 b8 85 f0    	mov    0xf085b894,%edx
f0106692:	8b 1d d0 b8 85 f0    	mov    0xf085b8d0,%ebx
f0106698:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010669b:	89 c8                	mov    %ecx,%eax
f010669d:	01 c0                	add    %eax,%eax
f010669f:	01 c8                	add    %ecx,%eax
f01066a1:	c1 e0 03             	shl    $0x3,%eax
f01066a4:	01 d8                	add    %ebx,%eax
f01066a6:	89 42 04             	mov    %eax,0x4(%edx)
f01066a9:	eb 19                	jmp    f01066c4 <initialize_paging+0x186>
f01066ab:	8b 0d d0 b8 85 f0    	mov    0xf085b8d0,%ecx
f01066b1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066b4:	89 d0                	mov    %edx,%eax
f01066b6:	01 c0                	add    %eax,%eax
f01066b8:	01 d0                	add    %edx,%eax
f01066ba:	c1 e0 03             	shl    $0x3,%eax
f01066bd:	01 c8                	add    %ecx,%eax
f01066bf:	a3 98 b8 85 f0       	mov    %eax,0xf085b898
f01066c4:	8b 0d d0 b8 85 f0    	mov    0xf085b8d0,%ecx
f01066ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066cd:	89 d0                	mov    %edx,%eax
f01066cf:	01 c0                	add    %eax,%eax
f01066d1:	01 d0                	add    %edx,%eax
f01066d3:	c1 e0 03             	shl    $0x3,%eax
f01066d6:	01 c8                	add    %ecx,%eax
f01066d8:	a3 94 b8 85 f0       	mov    %eax,0xf085b894
f01066dd:	8b 0d d0 b8 85 f0    	mov    0xf085b8d0,%ecx
f01066e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066e6:	89 d0                	mov    %edx,%eax
f01066e8:	01 c0                	add    %eax,%eax
f01066ea:	01 d0                	add    %edx,%eax
f01066ec:	c1 e0 03             	shl    $0x3,%eax
f01066ef:	01 c8                	add    %ecx,%eax
f01066f1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01066f8:	a1 a0 b8 85 f0       	mov    0xf085b8a0,%eax
f01066fd:	40                   	inc    %eax
f01066fe:	a3 a0 b8 85 f0       	mov    %eax,0xf085b8a0
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0106703:	ff 45 f4             	incl   -0xc(%ebp)
f0106706:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106709:	85 c0                	test   %eax,%eax
f010670b:	79 05                	jns    f0106712 <initialize_paging+0x1d4>
f010670d:	05 ff 0f 00 00       	add    $0xfff,%eax
f0106712:	c1 f8 0c             	sar    $0xc,%eax
f0106715:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106718:	0f 8f 00 ff ff ff    	jg     f010661e <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f010671e:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f0106725:	eb 1d                	jmp    f0106744 <initialize_paging+0x206>
	{
		frames_info[i].references = 1;
f0106727:	8b 0d d0 b8 85 f0    	mov    0xf085b8d0,%ecx
f010672d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106730:	89 d0                	mov    %edx,%eax
f0106732:	01 c0                	add    %eax,%eax
f0106734:	01 d0                	add    %edx,%eax
f0106736:	c1 e0 03             	shl    $0x3,%eax
f0106739:	01 c8                	add    %ecx,%eax
f010673b:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0106741:	ff 45 f4             	incl   -0xc(%ebp)
f0106744:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f010674b:	7e da                	jle    f0106727 <initialize_paging+0x1e9>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f010674d:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0106754:	a1 f4 b8 85 f0       	mov    0xf085b8f4,%eax
f0106759:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010675c:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0106763:	77 14                	ja     f0106779 <initialize_paging+0x23b>
f0106765:	ff 75 e0             	pushl  -0x20(%ebp)
f0106768:	68 e0 61 13 f0       	push   $0xf01361e0
f010676d:	6a 64                	push   $0x64
f010676f:	68 c3 61 13 f0       	push   $0xf01361c3
f0106774:	e8 8c 9a ff ff       	call   f0100205 <_panic>
f0106779:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010677c:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0106782:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106785:	01 d0                	add    %edx,%eax
f0106787:	48                   	dec    %eax
f0106788:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010678b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010678e:	ba 00 00 00 00       	mov    $0x0,%edx
f0106793:	f7 75 e4             	divl   -0x1c(%ebp)
f0106796:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106799:	29 d0                	sub    %edx,%eax
f010679b:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f010679e:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f01067a5:	eb 1d                	jmp    f01067c4 <initialize_paging+0x286>
	{
		frames_info[i].references = 1;
f01067a7:	8b 0d d0 b8 85 f0    	mov    0xf085b8d0,%ecx
f01067ad:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067b0:	89 d0                	mov    %edx,%eax
f01067b2:	01 c0                	add    %eax,%eax
f01067b4:	01 d0                	add    %edx,%eax
f01067b6:	c1 e0 03             	shl    $0x3,%eax
f01067b9:	01 c8                	add    %ecx,%eax
f01067bb:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f01067c1:	ff 45 f4             	incl   -0xc(%ebp)
f01067c4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01067c7:	85 c0                	test   %eax,%eax
f01067c9:	79 05                	jns    f01067d0 <initialize_paging+0x292>
f01067cb:	05 ff 0f 00 00       	add    $0xfff,%eax
f01067d0:	c1 f8 0c             	sar    $0xc,%eax
f01067d3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01067d6:	7f cf                	jg     f01067a7 <initialize_paging+0x269>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01067d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01067db:	85 c0                	test   %eax,%eax
f01067dd:	79 05                	jns    f01067e4 <initialize_paging+0x2a6>
f01067df:	05 ff 0f 00 00       	add    $0xfff,%eax
f01067e4:	c1 f8 0c             	sar    $0xc,%eax
f01067e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01067ea:	e9 e8 00 00 00       	jmp    f01068d7 <initialize_paging+0x399>
	{
		initialize_frame_info(&(frames_info[i]));
f01067ef:	8b 0d d0 b8 85 f0    	mov    0xf085b8d0,%ecx
f01067f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067f8:	89 d0                	mov    %edx,%eax
f01067fa:	01 c0                	add    %eax,%eax
f01067fc:	01 d0                	add    %edx,%eax
f01067fe:	c1 e0 03             	shl    $0x3,%eax
f0106801:	01 c8                	add    %ecx,%eax
f0106803:	83 ec 0c             	sub    $0xc,%esp
f0106806:	50                   	push   %eax
f0106807:	e8 e6 00 00 00       	call   f01068f2 <initialize_frame_info>
f010680c:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f010680f:	8b 0d d0 b8 85 f0    	mov    0xf085b8d0,%ecx
f0106815:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106818:	89 d0                	mov    %edx,%eax
f010681a:	01 c0                	add    %eax,%eax
f010681c:	01 d0                	add    %edx,%eax
f010681e:	c1 e0 03             	shl    $0x3,%eax
f0106821:	01 c8                	add    %ecx,%eax
f0106823:	85 c0                	test   %eax,%eax
f0106825:	75 14                	jne    f010683b <initialize_paging+0x2fd>
f0106827:	83 ec 04             	sub    $0x4,%esp
f010682a:	68 a0 61 13 f0       	push   $0xf01361a0
f010682f:	6a 70                	push   $0x70
f0106831:	68 c3 61 13 f0       	push   $0xf01361c3
f0106836:	e8 ca 99 ff ff       	call   f0100205 <_panic>
f010683b:	8b 0d d0 b8 85 f0    	mov    0xf085b8d0,%ecx
f0106841:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106844:	89 d0                	mov    %edx,%eax
f0106846:	01 c0                	add    %eax,%eax
f0106848:	01 d0                	add    %edx,%eax
f010684a:	c1 e0 03             	shl    $0x3,%eax
f010684d:	01 c8                	add    %ecx,%eax
f010684f:	8b 15 94 b8 85 f0    	mov    0xf085b894,%edx
f0106855:	89 10                	mov    %edx,(%eax)
f0106857:	8b 00                	mov    (%eax),%eax
f0106859:	85 c0                	test   %eax,%eax
f010685b:	74 1f                	je     f010687c <initialize_paging+0x33e>
f010685d:	8b 15 94 b8 85 f0    	mov    0xf085b894,%edx
f0106863:	8b 1d d0 b8 85 f0    	mov    0xf085b8d0,%ebx
f0106869:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010686c:	89 c8                	mov    %ecx,%eax
f010686e:	01 c0                	add    %eax,%eax
f0106870:	01 c8                	add    %ecx,%eax
f0106872:	c1 e0 03             	shl    $0x3,%eax
f0106875:	01 d8                	add    %ebx,%eax
f0106877:	89 42 04             	mov    %eax,0x4(%edx)
f010687a:	eb 19                	jmp    f0106895 <initialize_paging+0x357>
f010687c:	8b 0d d0 b8 85 f0    	mov    0xf085b8d0,%ecx
f0106882:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106885:	89 d0                	mov    %edx,%eax
f0106887:	01 c0                	add    %eax,%eax
f0106889:	01 d0                	add    %edx,%eax
f010688b:	c1 e0 03             	shl    $0x3,%eax
f010688e:	01 c8                	add    %ecx,%eax
f0106890:	a3 98 b8 85 f0       	mov    %eax,0xf085b898
f0106895:	8b 0d d0 b8 85 f0    	mov    0xf085b8d0,%ecx
f010689b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010689e:	89 d0                	mov    %edx,%eax
f01068a0:	01 c0                	add    %eax,%eax
f01068a2:	01 d0                	add    %edx,%eax
f01068a4:	c1 e0 03             	shl    $0x3,%eax
f01068a7:	01 c8                	add    %ecx,%eax
f01068a9:	a3 94 b8 85 f0       	mov    %eax,0xf085b894
f01068ae:	8b 0d d0 b8 85 f0    	mov    0xf085b8d0,%ecx
f01068b4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01068b7:	89 d0                	mov    %edx,%eax
f01068b9:	01 c0                	add    %eax,%eax
f01068bb:	01 d0                	add    %edx,%eax
f01068bd:	c1 e0 03             	shl    $0x3,%eax
f01068c0:	01 c8                	add    %ecx,%eax
f01068c2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01068c9:	a1 a0 b8 85 f0       	mov    0xf085b8a0,%eax
f01068ce:	40                   	inc    %eax
f01068cf:	a3 a0 b8 85 f0       	mov    %eax,0xf085b8a0
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01068d4:	ff 45 f4             	incl   -0xc(%ebp)
f01068d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01068da:	a1 8c b8 85 f0       	mov    0xf085b88c,%eax
f01068df:	39 c2                	cmp    %eax,%edx
f01068e1:	0f 82 08 ff ff ff    	jb     f01067ef <initialize_paging+0x2b1>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f01068e7:	e8 eb c8 ff ff       	call   f01031d7 <initialize_disk_page_file>
}
f01068ec:	90                   	nop
f01068ed:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01068f0:	c9                   	leave  
f01068f1:	c3                   	ret    

f01068f2 <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f01068f2:	55                   	push   %ebp
f01068f3:	89 e5                	mov    %esp,%ebp
f01068f5:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f01068f8:	83 ec 04             	sub    $0x4,%esp
f01068fb:	6a 18                	push   $0x18
f01068fd:	6a 00                	push   $0x0
f01068ff:	ff 75 08             	pushl  0x8(%ebp)
f0106902:	e8 4e b3 02 00       	call   f0131c55 <memset>
f0106907:	83 c4 10             	add    $0x10,%esp
}
f010690a:	90                   	nop
f010690b:	c9                   	leave  
f010690c:	c3                   	ret    

f010690d <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f010690d:	55                   	push   %ebp
f010690e:	89 e5                	mov    %esp,%ebp
f0106910:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f0106913:	8b 15 94 b8 85 f0    	mov    0xf085b894,%edx
f0106919:	8b 45 08             	mov    0x8(%ebp),%eax
f010691c:	89 10                	mov    %edx,(%eax)
	int c = 0;
f010691e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f0106925:	8b 45 08             	mov    0x8(%ebp),%eax
f0106928:	8b 00                	mov    (%eax),%eax
f010692a:	85 c0                	test   %eax,%eax
f010692c:	75 17                	jne    f0106945 <allocate_frame+0x38>
	{
		//[KERNEL MEM] Free RAM when it's FULL
		// Write your code here, remove the panic and write your code
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f010692e:	83 ec 04             	sub    $0x4,%esp
f0106931:	68 14 62 13 f0       	push   $0xf0136214
f0106936:	68 99 00 00 00       	push   $0x99
f010693b:	68 c3 61 13 f0       	push   $0xf01361c3
f0106940:	e8 c0 98 ff ff       	call   f0100205 <_panic>
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f0106945:	8b 45 08             	mov    0x8(%ebp),%eax
f0106948:	8b 00                	mov    (%eax),%eax
f010694a:	85 c0                	test   %eax,%eax
f010694c:	75 17                	jne    f0106965 <allocate_frame+0x58>
f010694e:	83 ec 04             	sub    $0x4,%esp
f0106951:	68 61 62 13 f0       	push   $0xf0136261
f0106956:	68 9c 00 00 00       	push   $0x9c
f010695b:	68 c3 61 13 f0       	push   $0xf01361c3
f0106960:	e8 a0 98 ff ff       	call   f0100205 <_panic>
f0106965:	8b 45 08             	mov    0x8(%ebp),%eax
f0106968:	8b 00                	mov    (%eax),%eax
f010696a:	8b 00                	mov    (%eax),%eax
f010696c:	85 c0                	test   %eax,%eax
f010696e:	74 14                	je     f0106984 <allocate_frame+0x77>
f0106970:	8b 45 08             	mov    0x8(%ebp),%eax
f0106973:	8b 00                	mov    (%eax),%eax
f0106975:	8b 00                	mov    (%eax),%eax
f0106977:	8b 55 08             	mov    0x8(%ebp),%edx
f010697a:	8b 12                	mov    (%edx),%edx
f010697c:	8b 52 04             	mov    0x4(%edx),%edx
f010697f:	89 50 04             	mov    %edx,0x4(%eax)
f0106982:	eb 0d                	jmp    f0106991 <allocate_frame+0x84>
f0106984:	8b 45 08             	mov    0x8(%ebp),%eax
f0106987:	8b 00                	mov    (%eax),%eax
f0106989:	8b 40 04             	mov    0x4(%eax),%eax
f010698c:	a3 98 b8 85 f0       	mov    %eax,0xf085b898
f0106991:	8b 45 08             	mov    0x8(%ebp),%eax
f0106994:	8b 00                	mov    (%eax),%eax
f0106996:	8b 40 04             	mov    0x4(%eax),%eax
f0106999:	85 c0                	test   %eax,%eax
f010699b:	74 13                	je     f01069b0 <allocate_frame+0xa3>
f010699d:	8b 45 08             	mov    0x8(%ebp),%eax
f01069a0:	8b 00                	mov    (%eax),%eax
f01069a2:	8b 40 04             	mov    0x4(%eax),%eax
f01069a5:	8b 55 08             	mov    0x8(%ebp),%edx
f01069a8:	8b 12                	mov    (%edx),%edx
f01069aa:	8b 12                	mov    (%edx),%edx
f01069ac:	89 10                	mov    %edx,(%eax)
f01069ae:	eb 0c                	jmp    f01069bc <allocate_frame+0xaf>
f01069b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01069b3:	8b 00                	mov    (%eax),%eax
f01069b5:	8b 00                	mov    (%eax),%eax
f01069b7:	a3 94 b8 85 f0       	mov    %eax,0xf085b894
f01069bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01069bf:	8b 00                	mov    (%eax),%eax
f01069c1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01069c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01069ca:	8b 00                	mov    (%eax),%eax
f01069cc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01069d3:	a1 a0 b8 85 f0       	mov    0xf085b8a0,%eax
f01069d8:	48                   	dec    %eax
f01069d9:	a3 a0 b8 85 f0       	mov    %eax,0xf085b8a0

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f01069de:	8b 45 08             	mov    0x8(%ebp),%eax
f01069e1:	8b 00                	mov    (%eax),%eax
f01069e3:	8a 40 14             	mov    0x14(%eax),%al
f01069e6:	84 c0                	test   %al,%al
f01069e8:	74 20                	je     f0106a0a <allocate_frame+0xfd>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f01069ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01069ed:	8b 00                	mov    (%eax),%eax
f01069ef:	8b 50 0c             	mov    0xc(%eax),%edx
f01069f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01069f5:	8b 00                	mov    (%eax),%eax
f01069f7:	8b 40 10             	mov    0x10(%eax),%eax
f01069fa:	8b 40 5c             	mov    0x5c(%eax),%eax
f01069fd:	83 ec 08             	sub    $0x8,%esp
f0106a00:	52                   	push   %edx
f0106a01:	50                   	push   %eax
f0106a02:	e8 4d 14 00 00       	call   f0107e54 <pt_clear_page_table_entry>
f0106a07:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f0106a0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a0d:	8b 00                	mov    (%eax),%eax
f0106a0f:	83 ec 0c             	sub    $0xc,%esp
f0106a12:	50                   	push   %eax
f0106a13:	e8 da fe ff ff       	call   f01068f2 <initialize_frame_info>
f0106a18:	83 c4 10             	add    $0x10,%esp
	return 0;
f0106a1b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106a20:	c9                   	leave  
f0106a21:	c3                   	ret    

f0106a22 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f0106a22:	55                   	push   %ebp
f0106a23:	89 e5                	mov    %esp,%ebp
f0106a25:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0106a28:	83 ec 0c             	sub    $0xc,%esp
f0106a2b:	ff 75 08             	pushl  0x8(%ebp)
f0106a2e:	e8 bf fe ff ff       	call   f01068f2 <initialize_frame_info>
f0106a33:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0106a36:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0106a3a:	75 17                	jne    f0106a53 <free_frame+0x31>
f0106a3c:	83 ec 04             	sub    $0x4,%esp
f0106a3f:	68 a0 61 13 f0       	push   $0xf01361a0
f0106a44:	68 b9 00 00 00       	push   $0xb9
f0106a49:	68 c3 61 13 f0       	push   $0xf01361c3
f0106a4e:	e8 b2 97 ff ff       	call   f0100205 <_panic>
f0106a53:	8b 15 94 b8 85 f0    	mov    0xf085b894,%edx
f0106a59:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a5c:	89 10                	mov    %edx,(%eax)
f0106a5e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a61:	8b 00                	mov    (%eax),%eax
f0106a63:	85 c0                	test   %eax,%eax
f0106a65:	74 0d                	je     f0106a74 <free_frame+0x52>
f0106a67:	a1 94 b8 85 f0       	mov    0xf085b894,%eax
f0106a6c:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a6f:	89 50 04             	mov    %edx,0x4(%eax)
f0106a72:	eb 08                	jmp    f0106a7c <free_frame+0x5a>
f0106a74:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a77:	a3 98 b8 85 f0       	mov    %eax,0xf085b898
f0106a7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a7f:	a3 94 b8 85 f0       	mov    %eax,0xf085b894
f0106a84:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a87:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106a8e:	a1 a0 b8 85 f0       	mov    0xf085b8a0,%eax
f0106a93:	40                   	inc    %eax
f0106a94:	a3 a0 b8 85 f0       	mov    %eax,0xf085b8a0
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


}
f0106a99:	90                   	nop
f0106a9a:	c9                   	leave  
f0106a9b:	c3                   	ret    

f0106a9c <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f0106a9c:	55                   	push   %ebp
f0106a9d:	89 e5                	mov    %esp,%ebp
f0106a9f:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f0106aa2:	8b 45 08             	mov    0x8(%ebp),%eax
f0106aa5:	8b 40 08             	mov    0x8(%eax),%eax
f0106aa8:	48                   	dec    %eax
f0106aa9:	8b 55 08             	mov    0x8(%ebp),%edx
f0106aac:	66 89 42 08          	mov    %ax,0x8(%edx)
f0106ab0:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ab3:	8b 40 08             	mov    0x8(%eax),%eax
f0106ab6:	66 85 c0             	test   %ax,%ax
f0106ab9:	75 0e                	jne    f0106ac9 <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f0106abb:	83 ec 0c             	sub    $0xc,%esp
f0106abe:	ff 75 08             	pushl  0x8(%ebp)
f0106ac1:	e8 5c ff ff ff       	call   f0106a22 <free_frame>
f0106ac6:	83 c4 10             	add    $0x10,%esp
}
f0106ac9:	90                   	nop
f0106aca:	c9                   	leave  
f0106acb:	c3                   	ret    

f0106acc <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106acc:	55                   	push   %ebp
f0106acd:	89 e5                	mov    %esp,%ebp
f0106acf:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106ad2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106ad5:	c1 e8 16             	shr    $0x16,%eax
f0106ad8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106adf:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ae2:	01 d0                	add    %edx,%eax
f0106ae4:	8b 00                	mov    (%eax),%eax
f0106ae6:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0106ae9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106aec:	83 e0 01             	and    $0x1,%eax
f0106aef:	85 c0                	test   %eax,%eax
f0106af1:	74 74                	je     f0106b67 <get_page_table+0x9b>
	{
		//	cprintf("gpt .07, page_directory_entry= %x \n",page_directory_entry);
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106af3:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106afa:	77 1d                	ja     f0106b19 <get_page_table+0x4d>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106afc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106aff:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b04:	83 ec 0c             	sub    $0xc,%esp
f0106b07:	50                   	push   %eax
f0106b08:	e8 12 11 00 00       	call   f0107c1f <kheap_virtual_address>
f0106b0d:	83 c4 10             	add    $0x10,%esp
f0106b10:	89 c2                	mov    %eax,%edx
f0106b12:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b15:	89 10                	mov    %edx,(%eax)
f0106b17:	eb 44                	jmp    f0106b5d <get_page_table+0x91>
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106b19:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b1c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b21:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106b24:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b27:	c1 e8 0c             	shr    $0xc,%eax
f0106b2a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106b2d:	a1 8c b8 85 f0       	mov    0xf085b88c,%eax
f0106b32:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0106b35:	72 17                	jb     f0106b4e <get_page_table+0x82>
f0106b37:	ff 75 f0             	pushl  -0x10(%ebp)
f0106b3a:	68 80 62 13 f0       	push   $0xf0136280
f0106b3f:	68 e2 00 00 00       	push   $0xe2
f0106b44:	68 c3 61 13 f0       	push   $0xf01361c3
f0106b49:	e8 b7 96 ff ff       	call   f0100205 <_panic>
f0106b4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b51:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106b56:	89 c2                	mov    %eax,%edx
f0106b58:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b5b:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0106b5d:	b8 00 00 00 00       	mov    $0x0,%eax
f0106b62:	e9 b9 00 00 00       	jmp    f0106c20 <get_page_table+0x154>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0106b67:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106b6b:	0f 84 a1 00 00 00    	je     f0106c12 <get_page_table+0x146>
f0106b71:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b74:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0106b77:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106b7a:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0106b7d:	83 ec 0c             	sub    $0xc,%esp
f0106b80:	6a 00                	push   $0x0
f0106b82:	e8 e4 5f 00 00       	call   f010cb6b <fault_handler>
f0106b87:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106b8a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b8d:	c1 e8 16             	shr    $0x16,%eax
f0106b90:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b97:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b9a:	01 d0                	add    %edx,%eax
f0106b9c:	8b 00                	mov    (%eax),%eax
f0106b9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106ba1:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106ba8:	77 1d                	ja     f0106bc7 <get_page_table+0xfb>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106baa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106bad:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bb2:	83 ec 0c             	sub    $0xc,%esp
f0106bb5:	50                   	push   %eax
f0106bb6:	e8 64 10 00 00       	call   f0107c1f <kheap_virtual_address>
f0106bbb:	83 c4 10             	add    $0x10,%esp
f0106bbe:	89 c2                	mov    %eax,%edx
f0106bc0:	8b 45 10             	mov    0x10(%ebp),%eax
f0106bc3:	89 10                	mov    %edx,(%eax)
f0106bc5:	eb 44                	jmp    f0106c0b <get_page_table+0x13f>
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106bc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106bca:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bcf:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106bd2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106bd5:	c1 e8 0c             	shr    $0xc,%eax
f0106bd8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106bdb:	a1 8c b8 85 f0       	mov    0xf085b88c,%eax
f0106be0:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106be3:	72 17                	jb     f0106bfc <get_page_table+0x130>
f0106be5:	ff 75 e8             	pushl  -0x18(%ebp)
f0106be8:	68 80 62 13 f0       	push   $0xf0136280
f0106bed:	68 fa 00 00 00       	push   $0xfa
f0106bf2:	68 c3 61 13 f0       	push   $0xf01361c3
f0106bf7:	e8 09 96 ff ff       	call   f0100205 <_panic>
f0106bfc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106bff:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106c04:	89 c2                	mov    %eax,%edx
f0106c06:	8b 45 10             	mov    0x10(%ebp),%eax
f0106c09:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0106c0b:	b8 00 00 00 00       	mov    $0x0,%eax
f0106c10:	eb 0e                	jmp    f0106c20 <get_page_table+0x154>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0106c12:	8b 45 10             	mov    0x10(%ebp),%eax
f0106c15:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0106c1b:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0106c20:	c9                   	leave  
f0106c21:	c3                   	ret    

f0106c22 <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0106c22:	55                   	push   %ebp
f0106c23:	89 e5                	mov    %esp,%ebp
f0106c25:	53                   	push   %ebx
f0106c26:	83 ec 14             	sub    $0x14,%esp
	//	b.	clear the TLB cache (using "tlbflush()")

	//change this "return" according to your answer

#if USE_KHEAP
	uint32 * ptr_page_table = kmalloc(PAGE_SIZE);
f0106c29:	83 ec 0c             	sub    $0xc,%esp
f0106c2c:	68 00 10 00 00       	push   $0x1000
f0106c31:	e8 fa 0d 00 00       	call   f0107a30 <kmalloc>
f0106c36:	83 c4 10             	add    $0x10,%esp
f0106c39:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_page_table == NULL)
f0106c3c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106c40:	75 17                	jne    f0106c59 <create_page_table+0x37>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0106c42:	83 ec 04             	sub    $0x4,%esp
f0106c45:	68 af 62 13 f0       	push   $0xf01362af
f0106c4a:	68 18 01 00 00       	push   $0x118
f0106c4f:	68 c3 61 13 f0       	push   $0xf01361c3
f0106c54:	e8 ac 95 ff ff       	call   f0100205 <_panic>
	}
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0106c59:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106c5c:	c1 e8 16             	shr    $0x16,%eax
f0106c5f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106c66:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c69:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f0106c6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c6f:	83 ec 0c             	sub    $0xc,%esp
f0106c72:	50                   	push   %eax
f0106c73:	e8 d3 0f 00 00       	call   f0107c4b <kheap_physical_address>
f0106c78:	83 c4 10             	add    $0x10,%esp
f0106c7b:	83 c8 07             	or     $0x7,%eax
f0106c7e:	89 03                	mov    %eax,(%ebx)
			kheap_physical_address((unsigned int)ptr_page_table)
			, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);

	//================
	memset(ptr_page_table , 0, PAGE_SIZE);
f0106c80:	83 ec 04             	sub    $0x4,%esp
f0106c83:	68 00 10 00 00       	push   $0x1000
f0106c88:	6a 00                	push   $0x0
f0106c8a:	ff 75 f4             	pushl  -0xc(%ebp)
f0106c8d:	e8 c3 af 02 00       	call   f0131c55 <memset>
f0106c92:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106c95:	0f 20 d8             	mov    %cr3,%eax
f0106c98:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106c9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106c9e:	0f 22 d8             	mov    %eax,%cr3
#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
#endif

	return ptr_page_table;
f0106ca1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106ca4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106ca7:	c9                   	leave  
f0106ca8:	c3                   	ret    

f0106ca9 <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106ca9:	55                   	push   %ebp
f0106caa:	89 e5                	mov    %esp,%ebp
f0106cac:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0106caf:	83 ec 0c             	sub    $0xc,%esp
f0106cb2:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0106cb5:	50                   	push   %eax
f0106cb6:	e8 52 fc ff ff       	call   f010690d <allocate_frame>
f0106cbb:	83 c4 10             	add    $0x10,%esp
f0106cbe:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0106cc1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106cc4:	83 ec 0c             	sub    $0xc,%esp
f0106cc7:	50                   	push   %eax
f0106cc8:	e8 03 f8 ff ff       	call   f01064d0 <to_physical_address>
f0106ccd:	83 c4 10             	add    $0x10,%esp
f0106cd0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0106cd3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106cd6:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106cd9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106cdc:	c1 e8 0c             	shr    $0xc,%eax
f0106cdf:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106ce2:	a1 8c b8 85 f0       	mov    0xf085b88c,%eax
f0106ce7:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106cea:	72 17                	jb     f0106d03 <__static_cpt+0x5a>
f0106cec:	ff 75 ec             	pushl  -0x14(%ebp)
f0106cef:	68 80 62 13 f0       	push   $0xf0136280
f0106cf4:	68 30 01 00 00       	push   $0x130
f0106cf9:	68 c3 61 13 f0       	push   $0xf01361c3
f0106cfe:	e8 02 95 ff ff       	call   f0100205 <_panic>
f0106d03:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d06:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106d0b:	89 c2                	mov    %eax,%edx
f0106d0d:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d10:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0106d12:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106d15:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0106d1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d1e:	c1 e8 16             	shr    $0x16,%eax
f0106d21:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106d28:	8b 45 08             	mov    0x8(%ebp),%eax
f0106d2b:	01 d0                	add    %edx,%eax
f0106d2d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d30:	83 ca 07             	or     $0x7,%edx
f0106d33:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0106d35:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d38:	8b 00                	mov    (%eax),%eax
f0106d3a:	83 ec 04             	sub    $0x4,%esp
f0106d3d:	68 00 10 00 00       	push   $0x1000
f0106d42:	6a 00                	push   $0x0
f0106d44:	50                   	push   %eax
f0106d45:	e8 0b af 02 00       	call   f0131c55 <memset>
f0106d4a:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106d4d:	0f 20 d8             	mov    %cr3,%eax
f0106d50:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106d53:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106d56:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0106d59:	90                   	nop
f0106d5a:	c9                   	leave  
f0106d5b:	c3                   	ret    

f0106d5c <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106d5c:	55                   	push   %ebp
f0106d5d:	89 e5                	mov    %esp,%ebp
f0106d5f:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106d62:	ff 75 0c             	pushl  0xc(%ebp)
f0106d65:	e8 66 f7 ff ff       	call   f01064d0 <to_physical_address>
f0106d6a:	83 c4 04             	add    $0x4,%esp
f0106d6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0106d70:	83 ec 04             	sub    $0x4,%esp
f0106d73:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0106d76:	50                   	push   %eax
f0106d77:	ff 75 10             	pushl  0x10(%ebp)
f0106d7a:	ff 75 08             	pushl  0x8(%ebp)
f0106d7d:	e8 4a fd ff ff       	call   f0106acc <get_page_table>
f0106d82:	83 c4 10             	add    $0x10,%esp
f0106d85:	83 f8 01             	cmp    $0x1,%eax
f0106d88:	75 1b                	jne    f0106da5 <map_frame+0x49>
		//page_directory_entry = ptr_page_directory[PDX(virtual_address)];
		//ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
		=============================================================================================*/
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
f0106d8a:	83 ec 08             	sub    $0x8,%esp
f0106d8d:	ff 75 10             	pushl  0x10(%ebp)
f0106d90:	ff 75 08             	pushl  0x8(%ebp)
f0106d93:	e8 8a fe ff ff       	call   f0106c22 <create_page_table>
f0106d98:	83 c4 10             	add    $0x10,%esp
f0106d9b:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//cprintf("======>page table created using kheap for VA %x at dir = %x PT = %x\n", virtual_address, ptr_page_directory[PDX(virtual_address)], ptr_page_table);
			uint32* ptr_page_table2 =NULL;
f0106d9e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0106da5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106da8:	8b 55 10             	mov    0x10(%ebp),%edx
f0106dab:	c1 ea 0c             	shr    $0xc,%edx
f0106dae:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106db4:	c1 e2 02             	shl    $0x2,%edx
f0106db7:	01 d0                	add    %edx,%eax
f0106db9:	8b 00                	mov    (%eax),%eax
f0106dbb:	89 45 ec             	mov    %eax,-0x14(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0106dbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106dc1:	83 e0 01             	and    $0x1,%eax
f0106dc4:	85 c0                	test   %eax,%eax
f0106dc6:	74 25                	je     f0106ded <map_frame+0x91>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0106dc8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106dcb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106dd0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106dd3:	75 07                	jne    f0106ddc <map_frame+0x80>
			return 0;
f0106dd5:	b8 00 00 00 00       	mov    $0x0,%eax
f0106dda:	eb 43                	jmp    f0106e1f <map_frame+0xc3>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0106ddc:	83 ec 08             	sub    $0x8,%esp
f0106ddf:	ff 75 10             	pushl  0x10(%ebp)
f0106de2:	ff 75 08             	pushl  0x8(%ebp)
f0106de5:	e8 a7 00 00 00       	call   f0106e91 <unmap_frame>
f0106dea:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0106ded:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106df0:	8b 40 08             	mov    0x8(%eax),%eax
f0106df3:	40                   	inc    %eax
f0106df4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106df7:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106dfb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106dfe:	8b 55 10             	mov    0x10(%ebp),%edx
f0106e01:	c1 ea 0c             	shr    $0xc,%edx
f0106e04:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106e0a:	c1 e2 02             	shl    $0x2,%edx
f0106e0d:	01 c2                	add    %eax,%edx
f0106e0f:	8b 45 14             	mov    0x14(%ebp),%eax
f0106e12:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106e15:	83 c8 01             	or     $0x1,%eax
f0106e18:	89 02                	mov    %eax,(%edx)

	return 0;
f0106e1a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106e1f:	c9                   	leave  
f0106e20:	c3                   	ret    

f0106e21 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f0106e21:	55                   	push   %ebp
f0106e22:	89 e5                	mov    %esp,%ebp
f0106e24:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0106e27:	83 ec 04             	sub    $0x4,%esp
f0106e2a:	ff 75 10             	pushl  0x10(%ebp)
f0106e2d:	ff 75 0c             	pushl  0xc(%ebp)
f0106e30:	ff 75 08             	pushl  0x8(%ebp)
f0106e33:	e8 94 fc ff ff       	call   f0106acc <get_page_table>
f0106e38:	83 c4 10             	add    $0x10,%esp
f0106e3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f0106e3e:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e41:	8b 00                	mov    (%eax),%eax
f0106e43:	85 c0                	test   %eax,%eax
f0106e45:	74 43                	je     f0106e8a <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0106e47:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106e4a:	c1 e8 0c             	shr    $0xc,%eax
f0106e4d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106e52:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0106e55:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e58:	8b 00                	mov    (%eax),%eax
f0106e5a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106e5d:	c1 e2 02             	shl    $0x2,%edx
f0106e60:	01 d0                	add    %edx,%eax
f0106e62:	8b 00                	mov    (%eax),%eax
f0106e64:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0106e67:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106e6b:	74 16                	je     f0106e83 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0106e6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e70:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106e75:	83 ec 0c             	sub    $0xc,%esp
f0106e78:	50                   	push   %eax
f0106e79:	e8 65 f6 ff ff       	call   f01064e3 <to_frame_info>
f0106e7e:	83 c4 10             	add    $0x10,%esp
f0106e81:	eb 0c                	jmp    f0106e8f <get_frame_info+0x6e>
		}
		return 0;
f0106e83:	b8 00 00 00 00       	mov    $0x0,%eax
f0106e88:	eb 05                	jmp    f0106e8f <get_frame_info+0x6e>
	}
	return 0;
f0106e8a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106e8f:	c9                   	leave  
f0106e90:	c3                   	ret    

f0106e91 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0106e91:	55                   	push   %ebp
f0106e92:	89 e5                	mov    %esp,%ebp
f0106e94:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0106e97:	83 ec 04             	sub    $0x4,%esp
f0106e9a:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0106e9d:	50                   	push   %eax
f0106e9e:	ff 75 0c             	pushl  0xc(%ebp)
f0106ea1:	ff 75 08             	pushl  0x8(%ebp)
f0106ea4:	e8 78 ff ff ff       	call   f0106e21 <get_frame_info>
f0106ea9:	83 c4 10             	add    $0x10,%esp
f0106eac:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0106eaf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106eb3:	74 60                	je     f0106f15 <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0106eb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106eb8:	8a 40 14             	mov    0x14(%eax),%al
f0106ebb:	84 c0                	test   %al,%al
f0106ebd:	74 1c                	je     f0106edb <unmap_frame+0x4a>
f0106ebf:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106ec6:	77 13                	ja     f0106edb <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0106ec8:	83 ec 08             	sub    $0x8,%esp
f0106ecb:	ff 75 0c             	pushl  0xc(%ebp)
f0106ece:	68 cc 62 13 f0       	push   $0xf01362cc
f0106ed3:	e8 36 9e ff ff       	call   f0100d0e <cprintf>
f0106ed8:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0106edb:	83 ec 0c             	sub    $0xc,%esp
f0106ede:	ff 75 f4             	pushl  -0xc(%ebp)
f0106ee1:	e8 b6 fb ff ff       	call   f0106a9c <decrement_references>
f0106ee6:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0106ee9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106eec:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106eef:	c1 ea 0c             	shr    $0xc,%edx
f0106ef2:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106ef8:	c1 e2 02             	shl    $0x2,%edx
f0106efb:	01 d0                	add    %edx,%eax
f0106efd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0106f03:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106f06:	83 ec 08             	sub    $0x8,%esp
f0106f09:	50                   	push   %eax
f0106f0a:	ff 75 08             	pushl  0x8(%ebp)
f0106f0d:	e8 17 f6 ff ff       	call   f0106529 <tlb_invalidate>
f0106f12:	83 c4 10             	add    $0x10,%esp
	}
}
f0106f15:	90                   	nop
f0106f16:	c9                   	leave  
f0106f17:	c3                   	ret    

f0106f18 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106f18:	55                   	push   %ebp
f0106f19:	89 e5                	mov    %esp,%ebp
f0106f1b:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106f1e:	ff 75 0c             	pushl  0xc(%ebp)
f0106f21:	e8 aa f5 ff ff       	call   f01064d0 <to_physical_address>
f0106f26:	83 c4 04             	add    $0x4,%esp
f0106f29:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106f2c:	8b 45 10             	mov    0x10(%ebp),%eax
f0106f2f:	c1 e8 16             	shr    $0x16,%eax
f0106f32:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106f39:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f3c:	01 d0                	add    %edx,%eax
f0106f3e:	8b 00                	mov    (%eax),%eax
f0106f40:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106f43:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0106f4a:	77 19                	ja     f0106f65 <loadtime_map_frame+0x4d>
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106f4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f4f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106f54:	83 ec 0c             	sub    $0xc,%esp
f0106f57:	50                   	push   %eax
f0106f58:	e8 c2 0c 00 00       	call   f0107c1f <kheap_virtual_address>
f0106f5d:	83 c4 10             	add    $0x10,%esp
f0106f60:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106f63:	eb 40                	jmp    f0106fa5 <loadtime_map_frame+0x8d>
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106f65:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f68:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106f6d:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106f70:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106f73:	c1 e8 0c             	shr    $0xc,%eax
f0106f76:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106f79:	a1 8c b8 85 f0       	mov    0xf085b88c,%eax
f0106f7e:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106f81:	72 17                	jb     f0106f9a <loadtime_map_frame+0x82>
f0106f83:	ff 75 e8             	pushl  -0x18(%ebp)
f0106f86:	68 80 62 13 f0       	push   $0xf0136280
f0106f8b:	68 e6 01 00 00       	push   $0x1e6
f0106f90:	68 c3 61 13 f0       	push   $0xf01361c3
f0106f95:	e8 6b 92 ff ff       	call   f0100205 <_panic>
f0106f9a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106f9d:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106fa2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0106fa5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106fa9:	75 14                	jne    f0106fbf <loadtime_map_frame+0xa7>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
f0106fab:	83 ec 08             	sub    $0x8,%esp
f0106fae:	ff 75 10             	pushl  0x10(%ebp)
f0106fb1:	ff 75 08             	pushl  0x8(%ebp)
f0106fb4:	e8 69 fc ff ff       	call   f0106c22 <create_page_table>
f0106fb9:	83 c4 10             	add    $0x10,%esp
f0106fbc:	89 45 f4             	mov    %eax,-0xc(%ebp)
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
		}
#endif
	}

	ptr_frame_info->references++;
f0106fbf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106fc2:	8b 40 08             	mov    0x8(%eax),%eax
f0106fc5:	40                   	inc    %eax
f0106fc6:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106fc9:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106fcd:	8b 45 10             	mov    0x10(%ebp),%eax
f0106fd0:	c1 e8 0c             	shr    $0xc,%eax
f0106fd3:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106fd8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106fdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106fe2:	01 c2                	add    %eax,%edx
f0106fe4:	8b 45 14             	mov    0x14(%ebp),%eax
f0106fe7:	0b 45 f0             	or     -0x10(%ebp),%eax
f0106fea:	83 c8 01             	or     $0x1,%eax
f0106fed:	89 02                	mov    %eax,(%edx)

	return 0;
f0106fef:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106ff4:	c9                   	leave  
f0106ff5:	c3                   	ret    

f0106ff6 <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0106ff6:	55                   	push   %ebp
f0106ff7:	89 e5                	mov    %esp,%ebp
f0106ff9:	57                   	push   %edi
f0106ffa:	56                   	push   %esi
f0106ffb:	53                   	push   %ebx
f0106ffc:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0106fff:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0107006:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f010700d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f0107014:	a1 94 b8 85 f0       	mov    0xf085b894,%eax
f0107019:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010701c:	eb 1a                	jmp    f0107038 <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f010701e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107021:	8a 40 14             	mov    0x14(%eax),%al
f0107024:	84 c0                	test   %al,%al
f0107026:	74 05                	je     f010702d <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f0107028:	ff 45 e8             	incl   -0x18(%ebp)
f010702b:	eb 03                	jmp    f0107030 <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f010702d:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f0107030:	a1 9c b8 85 f0       	mov    0xf085b89c,%eax
f0107035:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107038:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010703c:	74 07                	je     f0107045 <calculate_available_frames+0x4f>
f010703e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107041:	8b 00                	mov    (%eax),%eax
f0107043:	eb 05                	jmp    f010704a <calculate_available_frames+0x54>
f0107045:	b8 00 00 00 00       	mov    $0x0,%eax
f010704a:	a3 9c b8 85 f0       	mov    %eax,0xf085b89c
f010704f:	a1 9c b8 85 f0       	mov    0xf085b89c,%eax
f0107054:	85 c0                	test   %eax,%eax
f0107056:	75 c6                	jne    f010701e <calculate_available_frames+0x28>
f0107058:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010705c:	75 c0                	jne    f010701e <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f010705e:	a1 34 b8 85 f0       	mov    0xf085b834,%eax
f0107063:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107066:	eb 0b                	jmp    f0107073 <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f0107068:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f010706b:	a1 3c b8 85 f0       	mov    0xf085b83c,%eax
f0107070:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107073:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107077:	74 07                	je     f0107080 <calculate_available_frames+0x8a>
f0107079:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010707c:	8b 00                	mov    (%eax),%eax
f010707e:	eb 05                	jmp    f0107085 <calculate_available_frames+0x8f>
f0107080:	b8 00 00 00 00       	mov    $0x0,%eax
f0107085:	a3 3c b8 85 f0       	mov    %eax,0xf085b83c
f010708a:	a1 3c b8 85 f0       	mov    0xf085b83c,%eax
f010708f:	85 c0                	test   %eax,%eax
f0107091:	75 d5                	jne    f0107068 <calculate_available_frames+0x72>
f0107093:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107097:	75 cf                	jne    f0107068 <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f0107099:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010709c:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f010709f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01070a2:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f01070a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01070a8:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f01070ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01070ae:	89 c3                	mov    %eax,%ebx
f01070b0:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01070b3:	ba 03 00 00 00       	mov    $0x3,%edx
f01070b8:	89 df                	mov    %ebx,%edi
f01070ba:	89 c6                	mov    %eax,%esi
f01070bc:	89 d1                	mov    %edx,%ecx
f01070be:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f01070c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01070c3:	83 c4 20             	add    $0x20,%esp
f01070c6:	5b                   	pop    %ebx
f01070c7:	5e                   	pop    %esi
f01070c8:	5f                   	pop    %edi
f01070c9:	5d                   	pop    %ebp
f01070ca:	c2 04 00             	ret    $0x4

f01070cd <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01070cd:	55                   	push   %ebp
f01070ce:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01070d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01070d3:	8b 15 d0 b8 85 f0    	mov    0xf085b8d0,%edx
f01070d9:	29 d0                	sub    %edx,%eax
f01070db:	c1 f8 03             	sar    $0x3,%eax
f01070de:	89 c2                	mov    %eax,%edx
f01070e0:	89 d0                	mov    %edx,%eax
f01070e2:	c1 e0 02             	shl    $0x2,%eax
f01070e5:	01 d0                	add    %edx,%eax
f01070e7:	c1 e0 02             	shl    $0x2,%eax
f01070ea:	01 d0                	add    %edx,%eax
f01070ec:	c1 e0 02             	shl    $0x2,%eax
f01070ef:	01 d0                	add    %edx,%eax
f01070f1:	89 c1                	mov    %eax,%ecx
f01070f3:	c1 e1 08             	shl    $0x8,%ecx
f01070f6:	01 c8                	add    %ecx,%eax
f01070f8:	89 c1                	mov    %eax,%ecx
f01070fa:	c1 e1 10             	shl    $0x10,%ecx
f01070fd:	01 c8                	add    %ecx,%eax
f01070ff:	01 c0                	add    %eax,%eax
f0107101:	01 d0                	add    %edx,%eax
}
f0107103:	5d                   	pop    %ebp
f0107104:	c3                   	ret    

f0107105 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107105:	55                   	push   %ebp
f0107106:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107108:	ff 75 08             	pushl  0x8(%ebp)
f010710b:	e8 bd ff ff ff       	call   f01070cd <to_frame_number>
f0107110:	83 c4 04             	add    $0x4,%esp
f0107113:	c1 e0 0c             	shl    $0xc,%eax
}
f0107116:	c9                   	leave  
f0107117:	c3                   	ret    

f0107118 <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f0107118:	55                   	push   %ebp
f0107119:	89 e5                	mov    %esp,%ebp
f010711b:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SHARES  = numOfElements ;
f010711e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107121:	a3 a4 b8 85 f0       	mov    %eax,0xf085b8a4
	shares = kmalloc(numOfElements*sizeof(struct Share));
f0107126:	8b 55 08             	mov    0x8(%ebp),%edx
f0107129:	89 d0                	mov    %edx,%eax
f010712b:	c1 e0 02             	shl    $0x2,%eax
f010712e:	01 d0                	add    %edx,%eax
f0107130:	c1 e0 02             	shl    $0x2,%eax
f0107133:	01 d0                	add    %edx,%eax
f0107135:	c1 e0 02             	shl    $0x2,%eax
f0107138:	83 ec 0c             	sub    $0xc,%esp
f010713b:	50                   	push   %eax
f010713c:	e8 ef 08 00 00       	call   f0107a30 <kmalloc>
f0107141:	83 c4 10             	add    $0x10,%esp
f0107144:	a3 68 b8 85 f0       	mov    %eax,0xf085b868
	if (shares == NULL)
f0107149:	a1 68 b8 85 f0       	mov    0xf085b868,%eax
f010714e:	85 c0                	test   %eax,%eax
f0107150:	75 14                	jne    f0107166 <create_shares_array+0x4e>
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
f0107152:	83 ec 04             	sub    $0x4,%esp
f0107155:	68 f0 62 13 f0       	push   $0xf01362f0
f010715a:	6a 21                	push   $0x21
f010715c:	68 34 63 13 f0       	push   $0xf0136334
f0107161:	e8 9f 90 ff ff       	call   f0100205 <_panic>
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0107166:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010716d:	eb 4b                	jmp    f01071ba <create_shares_array+0xa2>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f010716f:	8b 0d 68 b8 85 f0    	mov    0xf085b868,%ecx
f0107175:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107178:	89 d0                	mov    %edx,%eax
f010717a:	c1 e0 02             	shl    $0x2,%eax
f010717d:	01 d0                	add    %edx,%eax
f010717f:	c1 e0 02             	shl    $0x2,%eax
f0107182:	01 d0                	add    %edx,%eax
f0107184:	c1 e0 02             	shl    $0x2,%eax
f0107187:	01 c8                	add    %ecx,%eax
f0107189:	83 ec 04             	sub    $0x4,%esp
f010718c:	6a 54                	push   $0x54
f010718e:	6a 00                	push   $0x0
f0107190:	50                   	push   %eax
f0107191:	e8 bf aa 02 00       	call   f0131c55 <memset>
f0107196:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f0107199:	8b 0d 68 b8 85 f0    	mov    0xf085b868,%ecx
f010719f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071a2:	89 d0                	mov    %edx,%eax
f01071a4:	c1 e0 02             	shl    $0x2,%eax
f01071a7:	01 d0                	add    %edx,%eax
f01071a9:	c1 e0 02             	shl    $0x2,%eax
f01071ac:	01 d0                	add    %edx,%eax
f01071ae:	c1 e0 02             	shl    $0x2,%eax
f01071b1:	01 c8                	add    %ecx,%eax
f01071b3:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f01071b7:	ff 45 f4             	incl   -0xc(%ebp)
f01071ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071bd:	a1 a4 b8 85 f0       	mov    0xf085b8a4,%eax
f01071c2:	39 c2                	cmp    %eax,%edx
f01071c4:	72 a9                	jb     f010716f <create_shares_array+0x57>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f01071c6:	90                   	nop
f01071c7:	c9                   	leave  
f01071c8:	c3                   	ret    

f01071c9 <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f01071c9:	55                   	push   %ebp
f01071ca:	89 e5                	mov    %esp,%ebp
f01071cc:	53                   	push   %ebx
f01071cd:	83 ec 14             	sub    $0x14,%esp
	int32 sharedObjectID = -1 ;
f01071d0:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f01071d7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01071de:	eb 2c                	jmp    f010720c <allocate_share_object+0x43>
	{
		if (shares[i].empty)
f01071e0:	8b 0d 68 b8 85 f0    	mov    0xf085b868,%ecx
f01071e6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01071e9:	89 d0                	mov    %edx,%eax
f01071eb:	c1 e0 02             	shl    $0x2,%eax
f01071ee:	01 d0                	add    %edx,%eax
f01071f0:	c1 e0 02             	shl    $0x2,%eax
f01071f3:	01 d0                	add    %edx,%eax
f01071f5:	c1 e0 02             	shl    $0x2,%eax
f01071f8:	01 c8                	add    %ecx,%eax
f01071fa:	8a 40 4d             	mov    0x4d(%eax),%al
f01071fd:	84 c0                	test   %al,%al
f01071ff:	74 08                	je     f0107209 <allocate_share_object+0x40>
		{
			sharedObjectID = i;
f0107201:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107204:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0107207:	eb 0f                	jmp    f0107218 <allocate_share_object+0x4f>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f0107209:	ff 45 f0             	incl   -0x10(%ebp)
f010720c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010720f:	a1 a4 b8 85 f0       	mov    0xf085b8a4,%eax
f0107214:	39 c2                	cmp    %eax,%edx
f0107216:	72 c8                	jb     f01071e0 <allocate_share_object+0x17>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f0107218:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010721c:	75 0a                	jne    f0107228 <allocate_share_object+0x5f>
	{
		return E_NO_SHARE ;
f010721e:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f0107223:	e9 94 00 00 00       	jmp    f01072bc <allocate_share_object+0xf3>
		}
#endif
*/
	}

	*allocatedObject = &(shares[sharedObjectID]);
f0107228:	8b 0d 68 b8 85 f0    	mov    0xf085b868,%ecx
f010722e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107231:	89 d0                	mov    %edx,%eax
f0107233:	c1 e0 02             	shl    $0x2,%eax
f0107236:	01 d0                	add    %edx,%eax
f0107238:	c1 e0 02             	shl    $0x2,%eax
f010723b:	01 d0                	add    %edx,%eax
f010723d:	c1 e0 02             	shl    $0x2,%eax
f0107240:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107243:	8b 45 08             	mov    0x8(%ebp),%eax
f0107246:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f0107248:	8b 0d 68 b8 85 f0    	mov    0xf085b868,%ecx
f010724e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107251:	89 d0                	mov    %edx,%eax
f0107253:	c1 e0 02             	shl    $0x2,%eax
f0107256:	01 d0                	add    %edx,%eax
f0107258:	c1 e0 02             	shl    $0x2,%eax
f010725b:	01 d0                	add    %edx,%eax
f010725d:	c1 e0 02             	shl    $0x2,%eax
f0107260:	01 c8                	add    %ecx,%eax
f0107262:	c6 40 4d 00          	movb   $0x0,0x4d(%eax)

#if USE_KHEAP
	{
		shares[sharedObjectID].framesStorage = create_frames_storage();
f0107266:	8b 0d 68 b8 85 f0    	mov    0xf085b868,%ecx
f010726c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010726f:	89 d0                	mov    %edx,%eax
f0107271:	c1 e0 02             	shl    $0x2,%eax
f0107274:	01 d0                	add    %edx,%eax
f0107276:	c1 e0 02             	shl    $0x2,%eax
f0107279:	01 d0                	add    %edx,%eax
f010727b:	c1 e0 02             	shl    $0x2,%eax
f010727e:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
f0107281:	e8 97 01 00 00       	call   f010741d <create_frames_storage>
f0107286:	89 43 50             	mov    %eax,0x50(%ebx)
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f0107289:	8b 0d 68 b8 85 f0    	mov    0xf085b868,%ecx
f010728f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107292:	89 d0                	mov    %edx,%eax
f0107294:	c1 e0 02             	shl    $0x2,%eax
f0107297:	01 d0                	add    %edx,%eax
f0107299:	c1 e0 02             	shl    $0x2,%eax
f010729c:	01 d0                	add    %edx,%eax
f010729e:	c1 e0 02             	shl    $0x2,%eax
f01072a1:	01 c8                	add    %ecx,%eax
f01072a3:	8b 40 50             	mov    0x50(%eax),%eax
f01072a6:	83 ec 04             	sub    $0x4,%esp
f01072a9:	68 00 10 00 00       	push   $0x1000
f01072ae:	6a 00                	push   $0x0
f01072b0:	50                   	push   %eax
f01072b1:	e8 9f a9 02 00       	call   f0131c55 <memset>
f01072b6:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f01072b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01072bc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01072bf:	c9                   	leave  
f01072c0:	c3                   	ret    

f01072c1 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f01072c1:	55                   	push   %ebp
f01072c2:	89 e5                	mov    %esp,%ebp
f01072c4:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01072c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f01072ce:	eb 7b                	jmp    f010734b <get_share_object_ID+0x8a>
	{
		if (shares[i].empty)
f01072d0:	8b 0d 68 b8 85 f0    	mov    0xf085b868,%ecx
f01072d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072d9:	89 d0                	mov    %edx,%eax
f01072db:	c1 e0 02             	shl    $0x2,%eax
f01072de:	01 d0                	add    %edx,%eax
f01072e0:	c1 e0 02             	shl    $0x2,%eax
f01072e3:	01 d0                	add    %edx,%eax
f01072e5:	c1 e0 02             	shl    $0x2,%eax
f01072e8:	01 c8                	add    %ecx,%eax
f01072ea:	8a 40 4d             	mov    0x4d(%eax),%al
f01072ed:	84 c0                	test   %al,%al
f01072ef:	75 56                	jne    f0107347 <get_share_object_ID+0x86>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f01072f1:	8b 0d 68 b8 85 f0    	mov    0xf085b868,%ecx
f01072f7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072fa:	89 d0                	mov    %edx,%eax
f01072fc:	c1 e0 02             	shl    $0x2,%eax
f01072ff:	01 d0                	add    %edx,%eax
f0107301:	c1 e0 02             	shl    $0x2,%eax
f0107304:	01 d0                	add    %edx,%eax
f0107306:	c1 e0 02             	shl    $0x2,%eax
f0107309:	01 c8                	add    %ecx,%eax
f010730b:	8b 00                	mov    (%eax),%eax
f010730d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0107310:	75 36                	jne    f0107348 <get_share_object_ID+0x87>
f0107312:	8b 0d 68 b8 85 f0    	mov    0xf085b868,%ecx
f0107318:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010731b:	89 d0                	mov    %edx,%eax
f010731d:	c1 e0 02             	shl    $0x2,%eax
f0107320:	01 d0                	add    %edx,%eax
f0107322:	c1 e0 02             	shl    $0x2,%eax
f0107325:	01 d0                	add    %edx,%eax
f0107327:	c1 e0 02             	shl    $0x2,%eax
f010732a:	01 c8                	add    %ecx,%eax
f010732c:	83 c0 04             	add    $0x4,%eax
f010732f:	83 ec 08             	sub    $0x8,%esp
f0107332:	50                   	push   %eax
f0107333:	ff 75 0c             	pushl  0xc(%ebp)
f0107336:	e8 38 a8 02 00       	call   f0131b73 <strcmp>
f010733b:	83 c4 10             	add    $0x10,%esp
f010733e:	85 c0                	test   %eax,%eax
f0107340:	75 06                	jne    f0107348 <get_share_object_ID+0x87>
		{
			//cprintf("%s found\n", name);
			return i;
f0107342:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107345:	eb 19                	jmp    f0107360 <get_share_object_ID+0x9f>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f0107347:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f0107348:	ff 45 f4             	incl   -0xc(%ebp)
f010734b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010734e:	a1 a4 b8 85 f0       	mov    0xf085b8a4,%eax
f0107353:	39 c2                	cmp    %eax,%edx
f0107355:	0f 82 75 ff ff ff    	jb     f01072d0 <get_share_object_ID+0xf>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f010735b:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f0107360:	c9                   	leave  
f0107361:	c3                   	ret    

f0107362 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f0107362:	55                   	push   %ebp
f0107363:	89 e5                	mov    %esp,%ebp
f0107365:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f0107368:	a1 a4 b8 85 f0       	mov    0xf085b8a4,%eax
f010736d:	39 45 08             	cmp    %eax,0x8(%ebp)
f0107370:	72 0a                	jb     f010737c <free_share_object+0x1a>
		return E_SHARED_MEM_NOT_EXISTS;
f0107372:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f0107377:	e9 9f 00 00 00       	jmp    f010741b <free_share_object+0xb9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f010737c:	8b 0d 68 b8 85 f0    	mov    0xf085b868,%ecx
f0107382:	8b 55 08             	mov    0x8(%ebp),%edx
f0107385:	89 d0                	mov    %edx,%eax
f0107387:	c1 e0 02             	shl    $0x2,%eax
f010738a:	01 d0                	add    %edx,%eax
f010738c:	c1 e0 02             	shl    $0x2,%eax
f010738f:	01 d0                	add    %edx,%eax
f0107391:	c1 e0 02             	shl    $0x2,%eax
f0107394:	01 c8                	add    %ecx,%eax
f0107396:	8b 40 50             	mov    0x50(%eax),%eax
f0107399:	83 ec 0c             	sub    $0xc,%esp
f010739c:	50                   	push   %eax
f010739d:	e8 52 01 00 00       	call   f01074f4 <clear_frames_storage>
f01073a2:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
f01073a5:	8b 0d 68 b8 85 f0    	mov    0xf085b868,%ecx
f01073ab:	8b 55 08             	mov    0x8(%ebp),%edx
f01073ae:	89 d0                	mov    %edx,%eax
f01073b0:	c1 e0 02             	shl    $0x2,%eax
f01073b3:	01 d0                	add    %edx,%eax
f01073b5:	c1 e0 02             	shl    $0x2,%eax
f01073b8:	01 d0                	add    %edx,%eax
f01073ba:	c1 e0 02             	shl    $0x2,%eax
f01073bd:	01 c8                	add    %ecx,%eax
f01073bf:	8b 40 50             	mov    0x50(%eax),%eax
f01073c2:	83 ec 0c             	sub    $0xc,%esp
f01073c5:	50                   	push   %eax
f01073c6:	e8 4e 07 00 00       	call   f0107b19 <kfree>
f01073cb:	83 c4 10             	add    $0x10,%esp
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f01073ce:	8b 0d 68 b8 85 f0    	mov    0xf085b868,%ecx
f01073d4:	8b 55 08             	mov    0x8(%ebp),%edx
f01073d7:	89 d0                	mov    %edx,%eax
f01073d9:	c1 e0 02             	shl    $0x2,%eax
f01073dc:	01 d0                	add    %edx,%eax
f01073de:	c1 e0 02             	shl    $0x2,%eax
f01073e1:	01 d0                	add    %edx,%eax
f01073e3:	c1 e0 02             	shl    $0x2,%eax
f01073e6:	01 c8                	add    %ecx,%eax
f01073e8:	83 ec 04             	sub    $0x4,%esp
f01073eb:	6a 54                	push   $0x54
f01073ed:	6a 00                	push   $0x0
f01073ef:	50                   	push   %eax
f01073f0:	e8 60 a8 02 00       	call   f0131c55 <memset>
f01073f5:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f01073f8:	8b 0d 68 b8 85 f0    	mov    0xf085b868,%ecx
f01073fe:	8b 55 08             	mov    0x8(%ebp),%edx
f0107401:	89 d0                	mov    %edx,%eax
f0107403:	c1 e0 02             	shl    $0x2,%eax
f0107406:	01 d0                	add    %edx,%eax
f0107408:	c1 e0 02             	shl    $0x2,%eax
f010740b:	01 d0                	add    %edx,%eax
f010740d:	c1 e0 02             	shl    $0x2,%eax
f0107410:	01 c8                	add    %ecx,%eax
f0107412:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)

	return 0;
f0107416:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010741b:	c9                   	leave  
f010741c:	c3                   	ret    

f010741d <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f010741d:	55                   	push   %ebp
f010741e:	89 e5                	mov    %esp,%ebp
f0107420:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f0107423:	83 ec 0c             	sub    $0xc,%esp
f0107426:	68 00 10 00 00       	push   $0x1000
f010742b:	e8 00 06 00 00       	call   f0107a30 <kmalloc>
f0107430:	83 c4 10             	add    $0x10,%esp
f0107433:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f0107436:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010743a:	75 17                	jne    f0107453 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010743c:	83 ec 04             	sub    $0x4,%esp
f010743f:	68 55 63 13 f0       	push   $0xf0136355
f0107444:	68 a5 00 00 00       	push   $0xa5
f0107449:	68 34 63 13 f0       	push   $0xf0136334
f010744e:	e8 b2 8d ff ff       	call   f0100205 <_panic>
	}
	return frames_storage;
f0107453:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107456:	c9                   	leave  
f0107457:	c3                   	ret    

f0107458 <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f0107458:	55                   	push   %ebp
f0107459:	89 e5                	mov    %esp,%ebp
f010745b:	53                   	push   %ebx
f010745c:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f010745f:	8b 45 10             	mov    0x10(%ebp),%eax
f0107462:	c1 e0 0c             	shl    $0xc,%eax
f0107465:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f0107468:	83 ec 04             	sub    $0x4,%esp
f010746b:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010746e:	50                   	push   %eax
f010746f:	ff 75 f4             	pushl  -0xc(%ebp)
f0107472:	ff 75 08             	pushl  0x8(%ebp)
f0107475:	e8 52 f6 ff ff       	call   f0106acc <get_page_table>
f010747a:	83 c4 10             	add    $0x10,%esp
f010747d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0107480:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107484:	75 14                	jne    f010749a <add_frame_to_storage+0x42>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
f0107486:	83 ec 08             	sub    $0x8,%esp
f0107489:	ff 75 f4             	pushl  -0xc(%ebp)
f010748c:	ff 75 08             	pushl  0x8(%ebp)
f010748f:	e8 8e f7 ff ff       	call   f0106c22 <create_page_table>
f0107494:	83 c4 10             	add    $0x10,%esp
f0107497:	89 45 ec             	mov    %eax,-0x14(%ebp)
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f010749a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010749d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01074a0:	c1 ea 0c             	shr    $0xc,%edx
f01074a3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01074a9:	c1 e2 02             	shl    $0x2,%edx
f01074ac:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f01074af:	83 ec 0c             	sub    $0xc,%esp
f01074b2:	ff 75 0c             	pushl  0xc(%ebp)
f01074b5:	e8 4b fc ff ff       	call   f0107105 <to_physical_address>
f01074ba:	83 c4 10             	add    $0x10,%esp
f01074bd:	83 c8 01             	or     $0x1,%eax
f01074c0:	89 03                	mov    %eax,(%ebx)
}
f01074c2:	90                   	nop
f01074c3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01074c6:	c9                   	leave  
f01074c7:	c3                   	ret    

f01074c8 <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f01074c8:	55                   	push   %ebp
f01074c9:	89 e5                	mov    %esp,%ebp
f01074cb:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f01074ce:	8b 45 0c             	mov    0xc(%ebp),%eax
f01074d1:	c1 e0 0c             	shl    $0xc,%eax
f01074d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f01074d7:	83 ec 04             	sub    $0x4,%esp
f01074da:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01074dd:	50                   	push   %eax
f01074de:	ff 75 f4             	pushl  -0xc(%ebp)
f01074e1:	ff 75 08             	pushl  0x8(%ebp)
f01074e4:	e8 38 f9 ff ff       	call   f0106e21 <get_frame_info>
f01074e9:	83 c4 10             	add    $0x10,%esp
f01074ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f01074ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01074f2:	c9                   	leave  
f01074f3:	c3                   	ret    

f01074f4 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f01074f4:	55                   	push   %ebp
f01074f5:	89 e5                	mov    %esp,%ebp
f01074f7:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f01074fa:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107501:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107508:	eb 5b                	jmp    f0107565 <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f010750a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010750d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107514:	8b 45 08             	mov    0x8(%ebp),%eax
f0107517:	01 d0                	add    %edx,%eax
f0107519:	8b 00                	mov    (%eax),%eax
f010751b:	85 c0                	test   %eax,%eax
f010751d:	74 43                	je     f0107562 <clear_frames_storage+0x6e>
		{
#if USE_KHEAP
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
f010751f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107522:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107529:	8b 45 08             	mov    0x8(%ebp),%eax
f010752c:	01 d0                	add    %edx,%eax
f010752e:	8b 00                	mov    (%eax),%eax
f0107530:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107535:	83 ec 0c             	sub    $0xc,%esp
f0107538:	50                   	push   %eax
f0107539:	e8 e1 06 00 00       	call   f0107c1f <kheap_virtual_address>
f010753e:	83 c4 10             	add    $0x10,%esp
f0107541:	83 ec 0c             	sub    $0xc,%esp
f0107544:	50                   	push   %eax
f0107545:	e8 cf 05 00 00       	call   f0107b19 <kfree>
f010754a:	83 c4 10             	add    $0x10,%esp
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
			}
#endif
			frames_storage[i] = 0;
f010754d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107550:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107557:	8b 45 08             	mov    0x8(%ebp),%eax
f010755a:	01 d0                	add    %edx,%eax
f010755c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107562:	ff 45 f4             	incl   -0xc(%ebp)
f0107565:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010756c:	7e 9c                	jle    f010750a <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f010756e:	90                   	nop
f010756f:	c9                   	leave  
f0107570:	c3                   	ret    

f0107571 <getSizeOfSharedObject>:

//==============================
// [9] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107571:	55                   	push   %ebp
f0107572:	89 e5                	mov    %esp,%ebp
f0107574:	83 ec 18             	sub    $0x18,%esp
	// RETURN:
	//	a) If found, return size of shared object
	//	b) Else, return E_SHARED_MEM_NOT_EXISTS
	//

	int shareObjectID = get_share_object_ID(ownerID, shareName);
f0107577:	83 ec 08             	sub    $0x8,%esp
f010757a:	ff 75 0c             	pushl  0xc(%ebp)
f010757d:	ff 75 08             	pushl  0x8(%ebp)
f0107580:	e8 3c fd ff ff       	call   f01072c1 <get_share_object_ID>
f0107585:	83 c4 10             	add    $0x10,%esp
f0107588:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shareObjectID == E_SHARED_MEM_NOT_EXISTS)
f010758b:	83 7d f4 f0          	cmpl   $0xfffffff0,-0xc(%ebp)
f010758f:	75 07                	jne    f0107598 <getSizeOfSharedObject+0x27>
		return E_SHARED_MEM_NOT_EXISTS;
f0107591:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f0107596:	eb 1d                	jmp    f01075b5 <getSizeOfSharedObject+0x44>
	else
		return shares[shareObjectID].size;
f0107598:	8b 0d 68 b8 85 f0    	mov    0xf085b868,%ecx
f010759e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01075a1:	89 d0                	mov    %edx,%eax
f01075a3:	c1 e0 02             	shl    $0x2,%eax
f01075a6:	01 d0                	add    %edx,%eax
f01075a8:	c1 e0 02             	shl    $0x2,%eax
f01075ab:	01 d0                	add    %edx,%eax
f01075ad:	c1 e0 02             	shl    $0x2,%eax
f01075b0:	01 c8                	add    %ecx,%eax
f01075b2:	8b 40 44             	mov    0x44(%eax),%eax

	return 0;
}
f01075b5:	c9                   	leave  
f01075b6:	c3                   	ret    

f01075b7 <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f01075b7:	55                   	push   %ebp
f01075b8:	89 e5                	mov    %esp,%ebp
f01075ba:	83 ec 48             	sub    $0x48,%esp
f01075bd:	8b 45 14             	mov    0x14(%ebp),%eax
f01075c0:	88 45 c4             	mov    %al,-0x3c(%ebp)
	//TODO: [PROJECT MS3] [SHARING - KERNEL SIDE] createSharedObject()
	// your code is here, remove the panic and write your code
	//panic("createSharedObject() is not implemented yet...!!");
	 struct Env* myenv = curenv; //The calling environment
f01075c3:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f01075c8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int ret1= get_share_object_ID( ownerID, shareName);
f01075cb:	83 ec 08             	sub    $0x8,%esp
f01075ce:	ff 75 0c             	pushl  0xc(%ebp)
f01075d1:	ff 75 08             	pushl  0x8(%ebp)
f01075d4:	e8 e8 fc ff ff       	call   f01072c1 <get_share_object_ID>
f01075d9:	83 c4 10             	add    $0x10,%esp
f01075dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(ret1!=E_SHARED_MEM_NOT_EXISTS){
f01075df:	83 7d e8 f0          	cmpl   $0xfffffff0,-0x18(%ebp)
f01075e3:	74 0a                	je     f01075ef <createSharedObject+0x38>
		return E_SHARED_MEM_EXISTS;
f01075e5:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
f01075ea:	e9 e4 00 00 00       	jmp    f01076d3 <createSharedObject+0x11c>
	}
		struct Share* myshare=NULL;
f01075ef:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int ret=allocate_share_object(&myshare);
f01075f6:	83 ec 0c             	sub    $0xc,%esp
f01075f9:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01075fc:	50                   	push   %eax
f01075fd:	e8 c7 fb ff ff       	call   f01071c9 <allocate_share_object>
f0107602:	83 c4 10             	add    $0x10,%esp
f0107605:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if(ret!=E_NO_SHARE){
f0107608:	83 7d e4 f2          	cmpl   $0xfffffff2,-0x1c(%ebp)
f010760c:	0f 84 bc 00 00 00    	je     f01076ce <createSharedObject+0x117>
		//uint32 sva=ROUNDDOWN((uint32)virtual_address,PAGE_SIZE);
		//uint32 eva=(uint32)virtual_address+size;
		//eva=ROUNDUP(eva,PAGE_SIZE);
		struct FrameInfo* ptr=NULL;
f0107612:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		int counter=0;
f0107619:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		uint32 *ptr_page_table = NULL;
f0107620:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		for(uint32 i=(uint32)virtual_address;i<(uint32)virtual_address+size;i+=PAGE_SIZE){
f0107627:	8b 45 18             	mov    0x18(%ebp),%eax
f010762a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010762d:	eb 54                	jmp    f0107683 <createSharedObject+0xcc>
			int return_value= allocate_frame(&ptr);
f010762f:	83 ec 0c             	sub    $0xc,%esp
f0107632:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0107635:	50                   	push   %eax
f0107636:	e8 d2 f2 ff ff       	call   f010690d <allocate_frame>
f010763b:	83 c4 10             	add    $0x10,%esp
f010763e:	89 45 dc             	mov    %eax,-0x24(%ebp)
			if(return_value==0){
f0107641:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0107645:	75 32                	jne    f0107679 <createSharedObject+0xc2>
			 map_frame(myenv->env_page_directory,ptr,i,PERM_USER|PERM_PRESENT|PERM_WRITEABLE);
f0107647:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010764a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010764d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0107650:	6a 07                	push   $0x7
f0107652:	ff 75 f0             	pushl  -0x10(%ebp)
f0107655:	52                   	push   %edx
f0107656:	50                   	push   %eax
f0107657:	e8 00 f7 ff ff       	call   f0106d5c <map_frame>
f010765c:	83 c4 10             	add    $0x10,%esp
			 add_frame_to_storage(myshare->framesStorage,ptr,counter);
f010765f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0107662:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0107665:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0107668:	8b 40 50             	mov    0x50(%eax),%eax
f010766b:	83 ec 04             	sub    $0x4,%esp
f010766e:	51                   	push   %ecx
f010766f:	52                   	push   %edx
f0107670:	50                   	push   %eax
f0107671:	e8 e2 fd ff ff       	call   f0107458 <add_frame_to_storage>
f0107676:	83 c4 10             	add    $0x10,%esp
			}
			counter++;
f0107679:	ff 45 f4             	incl   -0xc(%ebp)
		//uint32 eva=(uint32)virtual_address+size;
		//eva=ROUNDUP(eva,PAGE_SIZE);
		struct FrameInfo* ptr=NULL;
		int counter=0;
		uint32 *ptr_page_table = NULL;
		for(uint32 i=(uint32)virtual_address;i<(uint32)virtual_address+size;i+=PAGE_SIZE){
f010767c:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0107683:	8b 55 18             	mov    0x18(%ebp),%edx
f0107686:	8b 45 10             	mov    0x10(%ebp),%eax
f0107689:	01 d0                	add    %edx,%eax
f010768b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010768e:	77 9f                	ja     f010762f <createSharedObject+0x78>
			 add_frame_to_storage(myshare->framesStorage,ptr,counter);
			}
			counter++;
		}
		//allocate_chunk(myenv->env_page_directory,(uint32)virtual_address,size,PERM_WRITEABLE);
		myshare->ownerID=ownerID;
f0107690:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0107693:	8b 55 08             	mov    0x8(%ebp),%edx
f0107696:	89 10                	mov    %edx,(%eax)
		myshare->size=size;
f0107698:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010769b:	8b 55 10             	mov    0x10(%ebp),%edx
f010769e:	89 50 44             	mov    %edx,0x44(%eax)
		myshare->isWritable=isWritable;
f01076a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01076a4:	8a 55 c4             	mov    -0x3c(%ebp),%dl
f01076a7:	88 50 4c             	mov    %dl,0x4c(%eax)
		myshare->references=1;
f01076aa:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01076ad:	c7 40 48 01 00 00 00 	movl   $0x1,0x48(%eax)
		strcpy(myshare->name,shareName);
f01076b4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01076b7:	83 c0 04             	add    $0x4,%eax
f01076ba:	83 ec 08             	sub    $0x8,%esp
f01076bd:	ff 75 0c             	pushl  0xc(%ebp)
f01076c0:	50                   	push   %eax
f01076c1:	e8 f0 a3 02 00       	call   f0131ab6 <strcpy>
f01076c6:	83 c4 10             	add    $0x10,%esp
		return ret;
f01076c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01076cc:	eb 05                	jmp    f01076d3 <createSharedObject+0x11c>
		}
		else{
			return E_NO_SHARE;
f01076ce:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
		}

}
f01076d3:	c9                   	leave  
f01076d4:	c3                   	ret    

f01076d5 <getSharedObject>:
//======================
// [2] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f01076d5:	55                   	push   %ebp
f01076d6:	89 e5                	mov    %esp,%ebp
f01076d8:	83 ec 38             	sub    $0x38,%esp
	//TODO:[PROJECT MS3] [SHARING - KERNEL SIDE] getSharedObject()
	// your code is here, remove the panic and write your code
	//panic("getSharedObject() is not implemented yet...!!");
    int counter=0;
f01076db:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    uint32 permission=0;
f01076e2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct Env* myenv = curenv; //The calling environment
f01076e9:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f01076ee:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int ret= get_share_object_ID( ownerID, shareName);
f01076f1:	83 ec 08             	sub    $0x8,%esp
f01076f4:	ff 75 0c             	pushl  0xc(%ebp)
f01076f7:	ff 75 08             	pushl  0x8(%ebp)
f01076fa:	e8 c2 fb ff ff       	call   f01072c1 <get_share_object_ID>
f01076ff:	83 c4 10             	add    $0x10,%esp
f0107702:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	struct Share* myshare=&shares[ret];
f0107705:	8b 0d 68 b8 85 f0    	mov    0xf085b868,%ecx
f010770b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010770e:	89 d0                	mov    %edx,%eax
f0107710:	c1 e0 02             	shl    $0x2,%eax
f0107713:	01 d0                	add    %edx,%eax
f0107715:	c1 e0 02             	shl    $0x2,%eax
f0107718:	01 d0                	add    %edx,%eax
f010771a:	c1 e0 02             	shl    $0x2,%eax
f010771d:	01 c8                	add    %ecx,%eax
f010771f:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint32 end_va=ROUNDUP(myshare->size,PAGE_SIZE)+(uint32)virtual_address;
f0107722:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0107729:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010772c:	8b 40 44             	mov    0x44(%eax),%eax
f010772f:	89 c2                	mov    %eax,%edx
f0107731:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107734:	01 d0                	add    %edx,%eax
f0107736:	48                   	dec    %eax
f0107737:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010773a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010773d:	ba 00 00 00 00       	mov    $0x0,%edx
f0107742:	f7 75 dc             	divl   -0x24(%ebp)
f0107745:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0107748:	29 d0                	sub    %edx,%eax
f010774a:	89 c2                	mov    %eax,%edx
f010774c:	8b 45 10             	mov    0x10(%ebp),%eax
f010774f:	01 d0                	add    %edx,%eax
f0107751:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(ret!=E_SHARED_MEM_NOT_EXISTS){
f0107754:	83 7d e4 f0          	cmpl   $0xfffffff0,-0x1c(%ebp)
f0107758:	74 7a                	je     f01077d4 <getSharedObject+0xff>
	for(uint32 i=(uint32)virtual_address;i<end_va;i+=PAGE_SIZE){
f010775a:	8b 45 10             	mov    0x10(%ebp),%eax
f010775d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107760:	eb 56                	jmp    f01077b8 <getSharedObject+0xe3>
	struct FrameInfo* f=get_frame_from_storage (myshare->framesStorage,counter);
f0107762:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107765:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107768:	8b 40 50             	mov    0x50(%eax),%eax
f010776b:	83 ec 08             	sub    $0x8,%esp
f010776e:	52                   	push   %edx
f010776f:	50                   	push   %eax
f0107770:	e8 53 fd ff ff       	call   f01074c8 <get_frame_from_storage>
f0107775:	83 c4 10             	add    $0x10,%esp
f0107778:	89 45 d0             	mov    %eax,-0x30(%ebp)
	if(myshare->isWritable==1){
f010777b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010777e:	8a 40 4c             	mov    0x4c(%eax),%al
f0107781:	3c 01                	cmp    $0x1,%al
f0107783:	75 09                	jne    f010778e <getSharedObject+0xb9>
		permission=PERM_PRESENT|PERM_USER|PERM_WRITEABLE;
f0107785:	c7 45 f0 07 00 00 00 	movl   $0x7,-0x10(%ebp)
f010778c:	eb 07                	jmp    f0107795 <getSharedObject+0xc0>
			}
	else{
		permission=PERM_PRESENT|PERM_USER;
f010778e:	c7 45 f0 05 00 00 00 	movl   $0x5,-0x10(%ebp)
	}
		map_frame(myenv->env_page_directory,f,i,permission);
f0107795:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107798:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010779b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010779e:	52                   	push   %edx
f010779f:	ff 75 ec             	pushl  -0x14(%ebp)
f01077a2:	ff 75 d0             	pushl  -0x30(%ebp)
f01077a5:	50                   	push   %eax
f01077a6:	e8 b1 f5 ff ff       	call   f0106d5c <map_frame>
f01077ab:	83 c4 10             	add    $0x10,%esp
		counter++;
f01077ae:	ff 45 f4             	incl   -0xc(%ebp)
	struct Env* myenv = curenv; //The calling environment
	int ret= get_share_object_ID( ownerID, shareName);
	struct Share* myshare=&shares[ret];
	uint32 end_va=ROUNDUP(myshare->size,PAGE_SIZE)+(uint32)virtual_address;
	if(ret!=E_SHARED_MEM_NOT_EXISTS){
	for(uint32 i=(uint32)virtual_address;i<end_va;i+=PAGE_SIZE){
f01077b1:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f01077b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01077bb:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f01077be:	72 a2                	jb     f0107762 <getSharedObject+0x8d>
		permission=PERM_PRESENT|PERM_USER;
	}
		map_frame(myenv->env_page_directory,f,i,permission);
		counter++;
	}
	myshare->references++;
f01077c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01077c3:	8b 40 48             	mov    0x48(%eax),%eax
f01077c6:	8d 50 01             	lea    0x1(%eax),%edx
f01077c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01077cc:	89 50 48             	mov    %edx,0x48(%eax)
	return ret;
f01077cf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01077d2:	eb 05                	jmp    f01077d9 <getSharedObject+0x104>
	}
	else{
		return E_SHARED_MEM_NOT_EXISTS;
f01077d4:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
	//	starting from the given virtual_address with the specified permissions of the object: read_only/writable
	// 	and return the ShareObjectID
	// RETURN:
	//	a) sharedObjectID (its index in the array) if success
	//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
}
f01077d9:	c9                   	leave  
f01077da:	c3                   	ret    

f01077db <freeSharedObject>:
//===================
// Free Share Object:
//===================

int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f01077db:	55                   	push   %ebp
f01077dc:	89 e5                	mov    %esp,%ebp
f01077de:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [SHARING - KERNEL SIDE] freeSharedObject()
	// your code is here, remove the panic and write your code
	panic("freeSharedObject() is not implemented yet...!!");
f01077e1:	83 ec 04             	sub    $0x4,%esp
f01077e4:	68 74 63 13 f0       	push   $0xf0136374
f01077e9:	68 6b 01 00 00       	push   $0x16b
f01077ee:	68 34 63 13 f0       	push   $0xf0136334
f01077f3:	e8 0d 8a ff ff       	call   f0100205 <_panic>

f01077f8 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f01077f8:	55                   	push   %ebp
f01077f9:	89 e5                	mov    %esp,%ebp
f01077fb:	a1 d8 b8 85 f0       	mov    0xf085b8d8,%eax
f0107800:	83 f8 01             	cmp    $0x1,%eax
f0107803:	75 04                	jne    f0107809 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0107805:	b0 01                	mov    $0x1,%al
f0107807:	eb 02                	jmp    f010780b <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0107809:	b0 00                	mov    $0x0,%al
f010780b:	5d                   	pop    %ebp
f010780c:	c3                   	ret    

f010780d <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010780d:	55                   	push   %ebp
f010780e:	89 e5                	mov    %esp,%ebp
f0107810:	a1 d8 b8 85 f0       	mov    0xf085b8d8,%eax
f0107815:	83 f8 02             	cmp    $0x2,%eax
f0107818:	75 04                	jne    f010781e <isKHeapPlacementStrategyBESTFIT+0x11>
f010781a:	b0 01                	mov    $0x1,%al
f010781c:	eb 02                	jmp    f0107820 <isKHeapPlacementStrategyBESTFIT+0x13>
f010781e:	b0 00                	mov    $0x0,%al
f0107820:	5d                   	pop    %ebp
f0107821:	c3                   	ret    

f0107822 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0107822:	55                   	push   %ebp
f0107823:	89 e5                	mov    %esp,%ebp
f0107825:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0107828:	8b 45 08             	mov    0x8(%ebp),%eax
f010782b:	c1 e8 0c             	shr    $0xc,%eax
f010782e:	89 c2                	mov    %eax,%edx
f0107830:	a1 8c b8 85 f0       	mov    0xf085b88c,%eax
f0107835:	39 c2                	cmp    %eax,%edx
f0107837:	72 14                	jb     f010784d <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0107839:	83 ec 04             	sub    $0x4,%esp
f010783c:	68 a4 63 13 f0       	push   $0xf01363a4
f0107841:	6a 55                	push   $0x55
f0107843:	68 c9 63 13 f0       	push   $0xf01363c9
f0107848:	e8 b8 89 ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f010784d:	8b 15 d0 b8 85 f0    	mov    0xf085b8d0,%edx
f0107853:	8b 45 08             	mov    0x8(%ebp),%eax
f0107856:	c1 e8 0c             	shr    $0xc,%eax
f0107859:	89 c1                	mov    %eax,%ecx
f010785b:	89 c8                	mov    %ecx,%eax
f010785d:	01 c0                	add    %eax,%eax
f010785f:	01 c8                	add    %ecx,%eax
f0107861:	c1 e0 03             	shl    $0x3,%eax
f0107864:	01 d0                	add    %edx,%eax
}
f0107866:	c9                   	leave  
f0107867:	c3                   	ret    

f0107868 <initialize_dyn_block_system>:
//==================================================================//
//==================================================================//


void initialize_dyn_block_system()
{
f0107868:	55                   	push   %ebp
f0107869:	89 e5                	mov    %esp,%ebp
f010786b:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] initialize_dyn_block_system
	// your code is here, remove the panic and write your code
//	kpanic_into_prompt("initialize_dyn_block_system() is not implemented yet...!!");

	//[1] Initialize two lists (AllocMemBlocksList & FreeMemBlocksList) [Hint: use LIST_INIT()]
	LIST_INIT(&AllocMemBlocksList);
f010786e:	c7 05 44 b8 85 f0 00 	movl   $0x0,0xf085b844
f0107875:	00 00 00 
f0107878:	c7 05 48 b8 85 f0 00 	movl   $0x0,0xf085b848
f010787f:	00 00 00 
f0107882:	c7 05 50 b8 85 f0 00 	movl   $0x0,0xf085b850
f0107889:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010788c:	c7 05 e0 b8 85 f0 00 	movl   $0x0,0xf085b8e0
f0107893:	00 00 00 
f0107896:	c7 05 e4 b8 85 f0 00 	movl   $0x0,0xf085b8e4
f010789d:	00 00 00 
f01078a0:	c7 05 ec b8 85 f0 00 	movl   $0x0,0xf085b8ec
f01078a7:	00 00 00 
#if STATIC_MEMBLOCK_ALLOC
//DO NOTHING

#else

	MAX_MEM_BLOCK_CNT = NUM_OF_KHEAP_PAGES;
f01078aa:	c7 05 80 b8 85 f0 ff 	movl   $0x9fff,0xf085b880
f01078b1:	9f 00 00 
	MemBlockNodes = (void*)KERNEL_HEAP_START;
f01078b4:	c7 05 54 b8 85 f0 00 	movl   $0xf6000000,0xf085b854
f01078bb:	00 00 f6 
	int size_of_block = sizeof(struct MemBlock);
f01078be:	c7 45 f4 10 00 00 00 	movl   $0x10,-0xc(%ebp)
	int size_all_struct = size_of_block*MAX_MEM_BLOCK_CNT;
f01078c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01078c8:	a1 80 b8 85 f0       	mov    0xf085b880,%eax
f01078cd:	0f af c2             	imul   %edx,%eax
f01078d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	size_all_struct = ROUNDUP(size_all_struct, PAGE_SIZE);
f01078d3:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f01078da:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01078dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01078e0:	01 d0                	add    %edx,%eax
f01078e2:	48                   	dec    %eax
f01078e3:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01078e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01078e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01078ee:	f7 75 ec             	divl   -0x14(%ebp)
f01078f1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01078f4:	29 d0                	sub    %edx,%eax
f01078f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	allocate_chunk(ptr_page_directory, KERNEL_HEAP_START, size_all_struct, PERM_WRITEABLE);
f01078f9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01078fc:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0107901:	6a 02                	push   $0x2
f0107903:	52                   	push   %edx
f0107904:	68 00 00 00 f6       	push   $0xf6000000
f0107909:	50                   	push   %eax
f010790a:	e8 14 15 00 00       	call   f0108e23 <allocate_chunk>
f010790f:	83 c4 10             	add    $0x10,%esp

#endif
//[3] Initialize AvailableMemBlocksList by filling it with the MemBlockNodes
//[4] Insert a new MemBlock with the remaining heap size into the FreeMemBlocksList

	initialize_MemBlocksList(MAX_MEM_BLOCK_CNT);
f0107912:	a1 80 b8 85 f0       	mov    0xf085b880,%eax
f0107917:	83 ec 0c             	sub    $0xc,%esp
f010791a:	50                   	push   %eax
f010791b:	e8 b1 ac 02 00       	call   f01325d1 <initialize_MemBlocksList>
f0107920:	83 c4 10             	add    $0x10,%esp
	struct MemBlock* ourBlock = LIST_LAST(&AvailableMemBlocksList);
f0107923:	a1 18 b9 85 f0       	mov    0xf085b918,%eax
f0107928:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	LIST_REMOVE(&AvailableMemBlocksList,ourBlock);
f010792b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010792f:	75 14                	jne    f0107945 <initialize_dyn_block_system+0xdd>
f0107931:	83 ec 04             	sub    $0x4,%esp
f0107934:	68 e3 63 13 f0       	push   $0xf01363e3
f0107939:	6a 29                	push   $0x29
f010793b:	68 01 64 13 f0       	push   $0xf0136401
f0107940:	e8 c0 88 ff ff       	call   f0100205 <_panic>
f0107945:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107948:	8b 00                	mov    (%eax),%eax
f010794a:	85 c0                	test   %eax,%eax
f010794c:	74 10                	je     f010795e <initialize_dyn_block_system+0xf6>
f010794e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107951:	8b 00                	mov    (%eax),%eax
f0107953:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0107956:	8b 52 04             	mov    0x4(%edx),%edx
f0107959:	89 50 04             	mov    %edx,0x4(%eax)
f010795c:	eb 0b                	jmp    f0107969 <initialize_dyn_block_system+0x101>
f010795e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107961:	8b 40 04             	mov    0x4(%eax),%eax
f0107964:	a3 18 b9 85 f0       	mov    %eax,0xf085b918
f0107969:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010796c:	8b 40 04             	mov    0x4(%eax),%eax
f010796f:	85 c0                	test   %eax,%eax
f0107971:	74 0f                	je     f0107982 <initialize_dyn_block_system+0x11a>
f0107973:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107976:	8b 40 04             	mov    0x4(%eax),%eax
f0107979:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010797c:	8b 12                	mov    (%edx),%edx
f010797e:	89 10                	mov    %edx,(%eax)
f0107980:	eb 0a                	jmp    f010798c <initialize_dyn_block_system+0x124>
f0107982:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107985:	8b 00                	mov    (%eax),%eax
f0107987:	a3 14 b9 85 f0       	mov    %eax,0xf085b914
f010798c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010798f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107995:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107998:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010799f:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f01079a4:	48                   	dec    %eax
f01079a5:	a3 20 b9 85 f0       	mov    %eax,0xf085b920
	ourBlock->size = (KERNEL_HEAP_MAX-KERNEL_HEAP_START) - size_all_struct;
f01079aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079ad:	ba 00 f0 ff 09       	mov    $0x9fff000,%edx
f01079b2:	29 c2                	sub    %eax,%edx
f01079b4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01079b7:	89 50 0c             	mov    %edx,0xc(%eax)
	ourBlock->sva = KERNEL_HEAP_MAX - ourBlock->size;
f01079ba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01079bd:	8b 40 0c             	mov    0xc(%eax),%eax
f01079c0:	ba 00 f0 ff ff       	mov    $0xfffff000,%edx
f01079c5:	29 c2                	sub    %eax,%edx
f01079c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01079ca:	89 50 08             	mov    %edx,0x8(%eax)
	LIST_INSERT_TAIL(&FreeMemBlocksList, ourBlock);
f01079cd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01079d1:	75 14                	jne    f01079e7 <initialize_dyn_block_system+0x17f>
f01079d3:	83 ec 04             	sub    $0x4,%esp
f01079d6:	68 14 64 13 f0       	push   $0xf0136414
f01079db:	6a 2c                	push   $0x2c
f01079dd:	68 01 64 13 f0       	push   $0xf0136401
f01079e2:	e8 1e 88 ff ff       	call   f0100205 <_panic>
f01079e7:	8b 15 e4 b8 85 f0    	mov    0xf085b8e4,%edx
f01079ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01079f0:	89 50 04             	mov    %edx,0x4(%eax)
f01079f3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01079f6:	8b 40 04             	mov    0x4(%eax),%eax
f01079f9:	85 c0                	test   %eax,%eax
f01079fb:	74 0c                	je     f0107a09 <initialize_dyn_block_system+0x1a1>
f01079fd:	a1 e4 b8 85 f0       	mov    0xf085b8e4,%eax
f0107a02:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0107a05:	89 10                	mov    %edx,(%eax)
f0107a07:	eb 08                	jmp    f0107a11 <initialize_dyn_block_system+0x1a9>
f0107a09:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107a0c:	a3 e0 b8 85 f0       	mov    %eax,0xf085b8e0
f0107a11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107a14:	a3 e4 b8 85 f0       	mov    %eax,0xf085b8e4
f0107a19:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107a1c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107a22:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f0107a27:	40                   	inc    %eax
f0107a28:	a3 ec b8 85 f0       	mov    %eax,0xf085b8ec
}
f0107a2d:	90                   	nop
f0107a2e:	c9                   	leave  
f0107a2f:	c3                   	ret    

f0107a30 <kmalloc>:

void* kmalloc(unsigned int size)
{
f0107a30:	55                   	push   %ebp
f0107a31:	89 e5                	mov    %esp,%ebp
f0107a33:	83 ec 28             	sub    $0x28,%esp

	//NOTE: All kernel heap allocations are multiples of PAGE_SIZE (4KB)WS
	//refer to the project presentation and documentation for details
	// use "isKHeapPlacementStrategyFIRSTFIT() ..." functions to check the current strategy

	size = ROUNDUP(size, PAGE_SIZE);
f0107a36:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0107a3d:	8b 55 08             	mov    0x8(%ebp),%edx
f0107a40:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a43:	01 d0                	add    %edx,%eax
f0107a45:	48                   	dec    %eax
f0107a46:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107a49:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a4c:	ba 00 00 00 00       	mov    $0x0,%edx
f0107a51:	f7 75 f4             	divl   -0xc(%ebp)
f0107a54:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a57:	29 d0                	sub    %edx,%eax
f0107a59:	89 45 08             	mov    %eax,0x8(%ebp)

	if(isKHeapPlacementStrategyFIRSTFIT())
f0107a5c:	e8 97 fd ff ff       	call   f01077f8 <isKHeapPlacementStrategyFIRSTFIT>
f0107a61:	84 c0                	test   %al,%al
f0107a63:	74 52                	je     f0107ab7 <kmalloc+0x87>
	{
		struct MemBlock * v1 = alloc_block_FF(size);
f0107a65:	83 ec 0c             	sub    $0xc,%esp
f0107a68:	ff 75 08             	pushl  0x8(%ebp)
f0107a6b:	e8 aa ae 02 00       	call   f013291a <alloc_block_FF>
f0107a70:	83 c4 10             	add    $0x10,%esp
f0107a73:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if(v1 != NULL )
f0107a76:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0107a7a:	74 3b                	je     f0107ab7 <kmalloc+0x87>
		{
			insert_sorted_allocList(v1);
f0107a7c:	83 ec 0c             	sub    $0xc,%esp
f0107a7f:	ff 75 ec             	pushl  -0x14(%ebp)
f0107a82:	e8 a5 ac 02 00       	call   f013272c <insert_sorted_allocList>
f0107a87:	83 c4 10             	add    $0x10,%esp
			uint32 ali = v1->sva;
f0107a8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107a8d:	8b 40 08             	mov    0x8(%eax),%eax
f0107a90:	89 45 e8             	mov    %eax,-0x18(%ebp)
			int amira = allocate_chunk(ptr_page_directory, ali, size, PERM_WRITEABLE);
f0107a93:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0107a98:	6a 02                	push   $0x2
f0107a9a:	ff 75 08             	pushl  0x8(%ebp)
f0107a9d:	ff 75 e8             	pushl  -0x18(%ebp)
f0107aa0:	50                   	push   %eax
f0107aa1:	e8 7d 13 00 00       	call   f0108e23 <allocate_chunk>
f0107aa6:	83 c4 10             	add    $0x10,%esp
f0107aa9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			if(amira == 0)
f0107aac:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0107ab0:	75 05                	jne    f0107ab7 <kmalloc+0x87>
			{
				return (void *)ali;
f0107ab2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107ab5:	eb 60                	jmp    f0107b17 <kmalloc+0xe7>
			}
		}
	}

	if(isKHeapPlacementStrategyBESTFIT())
f0107ab7:	e8 51 fd ff ff       	call   f010780d <isKHeapPlacementStrategyBESTFIT>
f0107abc:	84 c0                	test   %al,%al
f0107abe:	74 52                	je     f0107b12 <kmalloc+0xe2>
	{
		struct MemBlock *v2 = alloc_block_BF(size);
f0107ac0:	83 ec 0c             	sub    $0xc,%esp
f0107ac3:	ff 75 08             	pushl  0x8(%ebp)
f0107ac6:	e8 1c b0 02 00       	call   f0132ae7 <alloc_block_BF>
f0107acb:	83 c4 10             	add    $0x10,%esp
f0107ace:	89 45 e0             	mov    %eax,-0x20(%ebp)
		if(v2 != NULL )
f0107ad1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0107ad5:	74 3b                	je     f0107b12 <kmalloc+0xe2>
		{
			insert_sorted_allocList(v2);
f0107ad7:	83 ec 0c             	sub    $0xc,%esp
f0107ada:	ff 75 e0             	pushl  -0x20(%ebp)
f0107add:	e8 4a ac 02 00       	call   f013272c <insert_sorted_allocList>
f0107ae2:	83 c4 10             	add    $0x10,%esp
			uint32 ali2 = v2->sva;
f0107ae5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107ae8:	8b 40 08             	mov    0x8(%eax),%eax
f0107aeb:	89 45 dc             	mov    %eax,-0x24(%ebp)
			int amira = allocate_chunk(ptr_page_directory, ali2, size, PERM_WRITEABLE);
f0107aee:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0107af3:	6a 02                	push   $0x2
f0107af5:	ff 75 08             	pushl  0x8(%ebp)
f0107af8:	ff 75 dc             	pushl  -0x24(%ebp)
f0107afb:	50                   	push   %eax
f0107afc:	e8 22 13 00 00       	call   f0108e23 <allocate_chunk>
f0107b01:	83 c4 10             	add    $0x10,%esp
f0107b04:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if(amira == 0)
f0107b07:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0107b0b:	75 05                	jne    f0107b12 <kmalloc+0xe2>
			{
				return (void *)ali2;
f0107b0d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107b10:	eb 05                	jmp    f0107b17 <kmalloc+0xe7>
			}
		}
	}
	return NULL;
f0107b12:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107b17:	c9                   	leave  
f0107b18:	c3                   	ret    

f0107b19 <kfree>:

void kfree(void* virtual_address)
{
f0107b19:	55                   	push   %ebp
f0107b1a:	89 e5                	mov    %esp,%ebp
f0107b1c:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kfree
	// Write your code here, remove the panic and write your code
//	panic("kfree() is not implemented yet...!!");

	uint32 virtualAddress = (uint32 )(virtual_address);
f0107b1f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107b22:	89 45 f0             	mov    %eax,-0x10(%ebp)
	virtualAddress = ROUNDDOWN(virtualAddress, 4096);
f0107b25:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b28:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107b2b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107b2e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107b33:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock * v1 = find_block(&AllocMemBlocksList, virtualAddress);
f0107b36:	83 ec 08             	sub    $0x8,%esp
f0107b39:	ff 75 f0             	pushl  -0x10(%ebp)
f0107b3c:	68 44 b8 85 f0       	push   $0xf085b844
f0107b41:	e8 6e ab 02 00       	call   f01326b4 <find_block>
f0107b46:	83 c4 10             	add    $0x10,%esp
f0107b49:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(v1 != NULL)
f0107b4c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0107b50:	0f 84 c6 00 00 00    	je     f0107c1c <kfree+0x103>
	{
		LIST_REMOVE(&AllocMemBlocksList, v1);
f0107b56:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0107b5a:	75 14                	jne    f0107b70 <kfree+0x57>
f0107b5c:	83 ec 04             	sub    $0x4,%esp
f0107b5f:	68 e3 63 13 f0       	push   $0xf01363e3
f0107b64:	6a 66                	push   $0x66
f0107b66:	68 01 64 13 f0       	push   $0xf0136401
f0107b6b:	e8 95 86 ff ff       	call   f0100205 <_panic>
f0107b70:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b73:	8b 00                	mov    (%eax),%eax
f0107b75:	85 c0                	test   %eax,%eax
f0107b77:	74 10                	je     f0107b89 <kfree+0x70>
f0107b79:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b7c:	8b 00                	mov    (%eax),%eax
f0107b7e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107b81:	8b 52 04             	mov    0x4(%edx),%edx
f0107b84:	89 50 04             	mov    %edx,0x4(%eax)
f0107b87:	eb 0b                	jmp    f0107b94 <kfree+0x7b>
f0107b89:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b8c:	8b 40 04             	mov    0x4(%eax),%eax
f0107b8f:	a3 48 b8 85 f0       	mov    %eax,0xf085b848
f0107b94:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b97:	8b 40 04             	mov    0x4(%eax),%eax
f0107b9a:	85 c0                	test   %eax,%eax
f0107b9c:	74 0f                	je     f0107bad <kfree+0x94>
f0107b9e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107ba1:	8b 40 04             	mov    0x4(%eax),%eax
f0107ba4:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107ba7:	8b 12                	mov    (%edx),%edx
f0107ba9:	89 10                	mov    %edx,(%eax)
f0107bab:	eb 0a                	jmp    f0107bb7 <kfree+0x9e>
f0107bad:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107bb0:	8b 00                	mov    (%eax),%eax
f0107bb2:	a3 44 b8 85 f0       	mov    %eax,0xf085b844
f0107bb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107bba:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107bc0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107bc3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107bca:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f0107bcf:	48                   	dec    %eax
f0107bd0:	a3 50 b8 85 f0       	mov    %eax,0xf085b850
		uint32 eva = (virtualAddress + v1->size);
f0107bd5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107bd8:	8b 50 0c             	mov    0xc(%eax),%edx
f0107bdb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107bde:	01 d0                	add    %edx,%eax
f0107be0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		for(uint32 i = virtualAddress; i < eva; i+=PAGE_SIZE)
f0107be3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107be6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107be9:	eb 1b                	jmp    f0107c06 <kfree+0xed>
		{
			unmap_frame(ptr_page_directory, i);
f0107beb:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0107bf0:	83 ec 08             	sub    $0x8,%esp
f0107bf3:	ff 75 f4             	pushl  -0xc(%ebp)
f0107bf6:	50                   	push   %eax
f0107bf7:	e8 95 f2 ff ff       	call   f0106e91 <unmap_frame>
f0107bfc:	83 c4 10             	add    $0x10,%esp
	struct MemBlock * v1 = find_block(&AllocMemBlocksList, virtualAddress);
	if(v1 != NULL)
	{
		LIST_REMOVE(&AllocMemBlocksList, v1);
		uint32 eva = (virtualAddress + v1->size);
		for(uint32 i = virtualAddress; i < eva; i+=PAGE_SIZE)
f0107bff:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0107c06:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c09:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0107c0c:	72 dd                	jb     f0107beb <kfree+0xd2>
		{
			unmap_frame(ptr_page_directory, i);
		}
		insert_sorted_with_merge_freeList(v1);
f0107c0e:	83 ec 0c             	sub    $0xc,%esp
f0107c11:	ff 75 e8             	pushl  -0x18(%ebp)
f0107c14:	e8 f0 b3 02 00       	call   f0133009 <insert_sorted_with_merge_freeList>
f0107c19:	83 c4 10             	add    $0x10,%esp
	}
}
f0107c1c:	90                   	nop
f0107c1d:	c9                   	leave  
f0107c1e:	c3                   	ret    

f0107c1f <kheap_virtual_address>:

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0107c1f:	55                   	push   %ebp
f0107c20:	89 e5                	mov    %esp,%ebp
f0107c22:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_virtual_address
	// Write your code here, remove the panic and write your code
//	panic("kheap_virtual_address() is not implemented yet...!!");

	struct FrameInfo *elPointerDaBta3i = NULL;
f0107c25:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	elPointerDaBta3i = to_frame_info(physical_address);
f0107c2c:	83 ec 0c             	sub    $0xc,%esp
f0107c2f:	ff 75 08             	pushl  0x8(%ebp)
f0107c32:	e8 eb fb ff ff       	call   f0107822 <to_frame_info>
f0107c37:	83 c4 10             	add    $0x10,%esp
f0107c3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 theVirtualAddressOfThePhysicalAddress = elPointerDaBta3i->va;
f0107c3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107c40:	8b 40 0c             	mov    0xc(%eax),%eax
f0107c43:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return theVirtualAddressOfThePhysicalAddress;
f0107c46:	8b 45 f0             	mov    -0x10(%ebp),%eax

	//return the virtual address corresponding to given physical_address
	//refer to the project presentation and documentation for details
	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}
f0107c49:	c9                   	leave  
f0107c4a:	c3                   	ret    

f0107c4b <kheap_physical_address>:

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107c4b:	55                   	push   %ebp
f0107c4c:	89 e5                	mov    %esp,%ebp
f0107c4e:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code
//	panic("kheap_physical_address() is not implemented yet...!!");

	unsigned int mashy = virtual_to_physical(ptr_page_directory, virtual_address);
f0107c51:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0107c56:	83 ec 08             	sub    $0x8,%esp
f0107c59:	ff 75 08             	pushl  0x8(%ebp)
f0107c5c:	50                   	push   %eax
f0107c5d:	e8 65 02 00 00       	call   f0107ec7 <virtual_to_physical>
f0107c62:	83 c4 10             	add    $0x10,%esp
f0107c65:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return mashy;
f0107c68:	8b 45 f4             	mov    -0xc(%ebp),%eax

	//return the physical address corresponding to given virtual_address
	//refer to the project presentation and documentation for details
}
f0107c6b:	c9                   	leave  
f0107c6c:	c3                   	ret    

f0107c6d <kfreeall>:


void kfreeall()
{
f0107c6d:	55                   	push   %ebp
f0107c6e:	89 e5                	mov    %esp,%ebp
f0107c70:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107c73:	83 ec 04             	sub    $0x4,%esp
f0107c76:	68 37 64 13 f0       	push   $0xf0136437
f0107c7b:	68 90 00 00 00       	push   $0x90
f0107c80:	68 01 64 13 f0       	push   $0xf0136401
f0107c85:	e8 7b 85 ff ff       	call   f0100205 <_panic>

f0107c8a <kshrink>:

}

void kshrink(uint32 newSize)
{
f0107c8a:	55                   	push   %ebp
f0107c8b:	89 e5                	mov    %esp,%ebp
f0107c8d:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107c90:	83 ec 04             	sub    $0x4,%esp
f0107c93:	68 37 64 13 f0       	push   $0xf0136437
f0107c98:	68 96 00 00 00       	push   $0x96
f0107c9d:	68 01 64 13 f0       	push   $0xf0136401
f0107ca2:	e8 5e 85 ff ff       	call   f0100205 <_panic>

f0107ca7 <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107ca7:	55                   	push   %ebp
f0107ca8:	89 e5                	mov    %esp,%ebp
f0107caa:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107cad:	83 ec 04             	sub    $0x4,%esp
f0107cb0:	68 37 64 13 f0       	push   $0xf0136437
f0107cb5:	68 9b 00 00 00       	push   $0x9b
f0107cba:	68 01 64 13 f0       	push   $0xf0136401
f0107cbf:	e8 41 85 ff ff       	call   f0100205 <_panic>

f0107cc4 <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0107cc4:	55                   	push   %ebp
f0107cc5:	89 e5                	mov    %esp,%ebp
f0107cc7:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [KERNEL HEAP] krealloc
	// Write your code here, remove the panic and write your code
	panic("krealloc() is not implemented yet...!!");
f0107cca:	83 ec 04             	sub    $0x4,%esp
f0107ccd:	68 48 64 13 f0       	push   $0xf0136448
f0107cd2:	68 b2 00 00 00       	push   $0xb2
f0107cd7:	68 01 64 13 f0       	push   $0xf0136401
f0107cdc:	e8 24 85 ff ff       	call   f0100205 <_panic>

f0107ce1 <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0107ce1:	55                   	push   %ebp
f0107ce2:	89 e5                	mov    %esp,%ebp
f0107ce4:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_set_page_permissions
	// Write your code here, remove the panic and write your code
	//panic("pt_set_page_permissions() is not implemented yet...!!");
	uint32 va = virtual_address;
f0107ce7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107cea:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 set = permissions_to_set;
f0107ced:	8b 45 10             	mov    0x10(%ebp),%eax
f0107cf0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 clear = permissions_to_clear;
f0107cf3:	8b 45 14             	mov    0x14(%ebp),%eax
f0107cf6:	89 45 ec             	mov    %eax,-0x14(%ebp)

	uint32 *ptr_page_table = NULL;
f0107cf9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	get_page_table(page_directory, va, &ptr_page_table);
f0107d00:	83 ec 04             	sub    $0x4,%esp
f0107d03:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0107d06:	50                   	push   %eax
f0107d07:	ff 75 f4             	pushl  -0xc(%ebp)
f0107d0a:	ff 75 08             	pushl  0x8(%ebp)
f0107d0d:	e8 ba ed ff ff       	call   f0106acc <get_page_table>
f0107d12:	83 c4 10             	add    $0x10,%esp
	if(ptr_page_table != NULL)
f0107d15:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107d18:	85 c0                	test   %eax,%eax
f0107d1a:	0f 84 b7 00 00 00    	je     f0107dd7 <pt_set_page_permissions+0xf6>
	{
		int page_table_index = PTX(va);
f0107d20:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107d23:	c1 e8 0c             	shr    $0xc,%eax
f0107d26:	25 ff 03 00 00       	and    $0x3ff,%eax
f0107d2b:	89 45 e8             	mov    %eax,-0x18(%ebp)
		if(set != 0 && clear == 0)
f0107d2e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107d32:	74 28                	je     f0107d5c <pt_set_page_permissions+0x7b>
f0107d34:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0107d38:	75 22                	jne    f0107d5c <pt_set_page_permissions+0x7b>
		{
			ptr_page_table[page_table_index] |= (set);
f0107d3a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107d3d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107d40:	c1 e2 02             	shl    $0x2,%edx
f0107d43:	01 c2                	add    %eax,%edx
f0107d45:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107d48:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f0107d4b:	c1 e1 02             	shl    $0x2,%ecx
f0107d4e:	01 c8                	add    %ecx,%eax
f0107d50:	8b 00                	mov    (%eax),%eax
f0107d52:	0b 45 f0             	or     -0x10(%ebp),%eax
f0107d55:	89 02                	mov    %eax,(%edx)
f0107d57:	e9 8f 00 00 00       	jmp    f0107deb <pt_set_page_permissions+0x10a>
		}
		else if(clear != 0 && set == 0)
f0107d5c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0107d60:	74 29                	je     f0107d8b <pt_set_page_permissions+0xaa>
f0107d62:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107d66:	75 23                	jne    f0107d8b <pt_set_page_permissions+0xaa>
		{
			ptr_page_table[page_table_index] &= (~clear);
f0107d68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107d6b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107d6e:	c1 e2 02             	shl    $0x2,%edx
f0107d71:	01 d0                	add    %edx,%eax
f0107d73:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0107d76:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f0107d79:	c1 e1 02             	shl    $0x2,%ecx
f0107d7c:	01 ca                	add    %ecx,%edx
f0107d7e:	8b 12                	mov    (%edx),%edx
f0107d80:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0107d83:	f7 d1                	not    %ecx
f0107d85:	21 ca                	and    %ecx,%edx
f0107d87:	89 10                	mov    %edx,(%eax)
f0107d89:	eb 60                	jmp    f0107deb <pt_set_page_permissions+0x10a>
		}
		else if (clear != 0 && set != 0)
f0107d8b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0107d8f:	74 5a                	je     f0107deb <pt_set_page_permissions+0x10a>
f0107d91:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107d95:	74 54                	je     f0107deb <pt_set_page_permissions+0x10a>
		{
			ptr_page_table[page_table_index] |= (set);
f0107d97:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107d9a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107d9d:	c1 e2 02             	shl    $0x2,%edx
f0107da0:	01 c2                	add    %eax,%edx
f0107da2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107da5:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f0107da8:	c1 e1 02             	shl    $0x2,%ecx
f0107dab:	01 c8                	add    %ecx,%eax
f0107dad:	8b 00                	mov    (%eax),%eax
f0107daf:	0b 45 f0             	or     -0x10(%ebp),%eax
f0107db2:	89 02                	mov    %eax,(%edx)
			ptr_page_table[page_table_index] &= (~clear);
f0107db4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107db7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107dba:	c1 e2 02             	shl    $0x2,%edx
f0107dbd:	01 d0                	add    %edx,%eax
f0107dbf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0107dc2:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f0107dc5:	c1 e1 02             	shl    $0x2,%ecx
f0107dc8:	01 ca                	add    %ecx,%edx
f0107dca:	8b 12                	mov    (%edx),%edx
f0107dcc:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0107dcf:	f7 d1                	not    %ecx
f0107dd1:	21 ca                	and    %ecx,%edx
f0107dd3:	89 10                	mov    %edx,(%eax)
f0107dd5:	eb 14                	jmp    f0107deb <pt_set_page_permissions+0x10a>
		}
	}
	else
	{
		panic("Invalid va");
f0107dd7:	83 ec 04             	sub    $0x4,%esp
f0107dda:	68 6f 64 13 f0       	push   $0xf013646f
f0107ddf:	6a 28                	push   $0x28
f0107de1:	68 7a 64 13 f0       	push   $0xf013647a
f0107de6:	e8 1a 84 ff ff       	call   f0100205 <_panic>
	}
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107deb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107dee:	83 ec 08             	sub    $0x8,%esp
f0107df1:	50                   	push   %eax
f0107df2:	6a 00                	push   $0x0
f0107df4:	e8 30 e7 ff ff       	call   f0106529 <tlb_invalidate>
f0107df9:	83 c4 10             	add    $0x10,%esp
}
f0107dfc:	90                   	nop
f0107dfd:	c9                   	leave  
f0107dfe:	c3                   	ret    

f0107dff <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0107dff:	55                   	push   %ebp
f0107e00:	89 e5                	mov    %esp,%ebp
f0107e02:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_get_page_permissions
	// Write your code here, remove the panic and write your code
	//panic("pt_get_page_permissions() is not implemented yet...!!");
	uint32 *ptr_page_table = NULL;
f0107e05:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int get = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0107e0c:	83 ec 04             	sub    $0x4,%esp
f0107e0f:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107e12:	50                   	push   %eax
f0107e13:	ff 75 0c             	pushl  0xc(%ebp)
f0107e16:	ff 75 08             	pushl  0x8(%ebp)
f0107e19:	e8 ae ec ff ff       	call   f0106acc <get_page_table>
f0107e1e:	83 c4 10             	add    $0x10,%esp
f0107e21:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(get == TABLE_IN_MEMORY)
f0107e24:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107e28:	75 23                	jne    f0107e4d <pt_get_page_permissions+0x4e>
	{
		uint32 permissions = ptr_page_table[PTX(virtual_address)] & 0XFFF;
f0107e2a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107e2d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107e30:	c1 ea 0c             	shr    $0xc,%edx
f0107e33:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107e39:	c1 e2 02             	shl    $0x2,%edx
f0107e3c:	01 d0                	add    %edx,%eax
f0107e3e:	8b 00                	mov    (%eax),%eax
f0107e40:	25 ff 0f 00 00       	and    $0xfff,%eax
f0107e45:	89 45 f0             	mov    %eax,-0x10(%ebp)
		return permissions;
f0107e48:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107e4b:	eb 05                	jmp    f0107e52 <pt_get_page_permissions+0x53>
	}
	else
	{
		return -1;
f0107e4d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f0107e52:	c9                   	leave  
f0107e53:	c3                   	ret    

f0107e54 <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f0107e54:	55                   	push   %ebp
f0107e55:	89 e5                	mov    %esp,%ebp
f0107e57:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_clear_page_table_entry
	// Write your code here, remove the panic and write your code
//	panic("pt_clear_page_table_entry() is not implemented yet...!!");

	uint32 *ptr_page_table = NULL;
f0107e5a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int Return_Table = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0107e61:	83 ec 04             	sub    $0x4,%esp
f0107e64:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107e67:	50                   	push   %eax
f0107e68:	ff 75 0c             	pushl  0xc(%ebp)
f0107e6b:	ff 75 08             	pushl  0x8(%ebp)
f0107e6e:	e8 59 ec ff ff       	call   f0106acc <get_page_table>
f0107e73:	83 c4 10             	add    $0x10,%esp
f0107e76:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(Return_Table==TABLE_IN_MEMORY)
f0107e79:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107e7d:	75 32                	jne    f0107eb1 <pt_clear_page_table_entry+0x5d>
	{
		uint32 page_index = PTX(virtual_address);
f0107e7f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107e82:	c1 e8 0c             	shr    $0xc,%eax
f0107e85:	25 ff 03 00 00       	and    $0x3ff,%eax
f0107e8a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_page_table[page_index]=0;
f0107e8d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107e90:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107e93:	c1 e2 02             	shl    $0x2,%edx
f0107e96:	01 d0                	add    %edx,%eax
f0107e98:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate((void*)NULL,(void*)virtual_address);
f0107e9e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107ea1:	83 ec 08             	sub    $0x8,%esp
f0107ea4:	50                   	push   %eax
f0107ea5:	6a 00                	push   $0x0
f0107ea7:	e8 7d e6 ff ff       	call   f0106529 <tlb_invalidate>
f0107eac:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		panic("Invalid va");
	}
}
f0107eaf:	eb 14                	jmp    f0107ec5 <pt_clear_page_table_entry+0x71>
		ptr_page_table[page_index]=0;
		tlb_invalidate((void*)NULL,(void*)virtual_address);
	}
	else
	{
		panic("Invalid va");
f0107eb1:	83 ec 04             	sub    $0x4,%esp
f0107eb4:	68 6f 64 13 f0       	push   $0xf013646f
f0107eb9:	6a 4f                	push   $0x4f
f0107ebb:	68 7a 64 13 f0       	push   $0xf013647a
f0107ec0:	e8 40 83 ff ff       	call   f0100205 <_panic>
	}
}
f0107ec5:	c9                   	leave  
f0107ec6:	c3                   	ret    

f0107ec7 <virtual_to_physical>:

/***********************************************************************************************/

/*[2.2] ADDRESS CONVERTION*/
inline int virtual_to_physical(uint32* page_directory, uint32 virtual_address)
{
f0107ec7:	55                   	push   %ebp
f0107ec8:	89 e5                	mov    %esp,%ebp
f0107eca:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] virtual_to_physical
	// Write your code here, remove the panic and write your code
//	panic("virtual_to_physical() is not implemented yet...!!");

		uint32 *ptr_page_table = NULL;
f0107ecd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int Return_Table = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0107ed4:	83 ec 04             	sub    $0x4,%esp
f0107ed7:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0107eda:	50                   	push   %eax
f0107edb:	ff 75 0c             	pushl  0xc(%ebp)
f0107ede:	ff 75 08             	pushl  0x8(%ebp)
f0107ee1:	e8 e6 eb ff ff       	call   f0106acc <get_page_table>
f0107ee6:	83 c4 10             	add    $0x10,%esp
f0107ee9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(Return_Table == TABLE_IN_MEMORY)
f0107eec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107ef0:	75 35                	jne    f0107f27 <virtual_to_physical+0x60>
		{
			uint32 page_index = PTX(virtual_address);
f0107ef2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107ef5:	c1 e8 0c             	shr    $0xc,%eax
f0107ef8:	25 ff 03 00 00       	and    $0x3ff,%eax
f0107efd:	89 45 f0             	mov    %eax,-0x10(%ebp)
			uint32 entry = ptr_page_table[page_index];
f0107f00:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107f03:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107f06:	c1 e2 02             	shl    $0x2,%edx
f0107f09:	01 d0                	add    %edx,%eax
f0107f0b:	8b 00                	mov    (%eax),%eax
f0107f0d:	89 45 ec             	mov    %eax,-0x14(%ebp)
			uint32 frame_number = entry >> 12;
f0107f10:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107f13:	c1 e8 0c             	shr    $0xc,%eax
f0107f16:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 physical_address = frame_number*PAGE_SIZE;
f0107f19:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107f1c:	c1 e0 0c             	shl    $0xc,%eax
f0107f1f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			return physical_address;
f0107f22:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107f25:	eb 05                	jmp    f0107f2c <virtual_to_physical+0x65>
		}
		return -1;
f0107f27:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f0107f2c:	c9                   	leave  
f0107f2d:	c3                   	ret    

f0107f2e <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0107f2e:	55                   	push   %ebp
f0107f2f:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0107f31:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107f34:	c1 e8 16             	shr    $0x16,%eax
f0107f37:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107f3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f41:	01 d0                	add    %edx,%eax
f0107f43:	8b 00                	mov    (%eax),%eax
f0107f45:	83 e0 20             	and    $0x20,%eax
f0107f48:	85 c0                	test   %eax,%eax
f0107f4a:	0f 95 c0             	setne  %al
f0107f4d:	0f b6 c0             	movzbl %al,%eax
}
f0107f50:	5d                   	pop    %ebp
f0107f51:	c3                   	ret    

f0107f52 <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f0107f52:	55                   	push   %ebp
f0107f53:	89 e5                	mov    %esp,%ebp
f0107f55:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0107f58:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107f5b:	c1 e8 16             	shr    $0x16,%eax
f0107f5e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107f65:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f68:	01 d0                	add    %edx,%eax
f0107f6a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f6d:	c1 ea 16             	shr    $0x16,%edx
f0107f70:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0107f77:	8b 55 08             	mov    0x8(%ebp),%edx
f0107f7a:	01 ca                	add    %ecx,%edx
f0107f7c:	8b 12                	mov    (%edx),%edx
f0107f7e:	83 e2 df             	and    $0xffffffdf,%edx
f0107f81:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107f83:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107f86:	83 ec 08             	sub    $0x8,%esp
f0107f89:	50                   	push   %eax
f0107f8a:	6a 00                	push   $0x0
f0107f8c:	e8 98 e5 ff ff       	call   f0106529 <tlb_invalidate>
f0107f91:	83 c4 10             	add    $0x10,%esp
}
f0107f94:	90                   	nop
f0107f95:	c9                   	leave  
f0107f96:	c3                   	ret    

f0107f97 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f0107f97:	55                   	push   %ebp
f0107f98:	89 e5                	mov    %esp,%ebp
f0107f9a:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f0107f9d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107fa0:	c1 e8 16             	shr    $0x16,%eax
f0107fa3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107faa:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fad:	01 d0                	add    %edx,%eax
f0107faf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0107fb5:	0f 20 d8             	mov    %cr3,%eax
f0107fb8:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0107fbb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107fbe:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0107fc1:	90                   	nop
f0107fc2:	c9                   	leave  
f0107fc3:	c3                   	ret    

f0107fc4 <env_page_ws_get_size>:

///============================================================================================
/// Dealing with environment working set

inline uint32 env_page_ws_get_size(struct Env *e)
{
f0107fc4:	55                   	push   %ebp
f0107fc5:	89 e5                	mov    %esp,%ebp
f0107fc7:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0107fca:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0107fd1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0107fd8:	eb 21                	jmp    f0107ffb <env_page_ws_get_size+0x37>
f0107fda:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fdd:	8b 48 78             	mov    0x78(%eax),%ecx
f0107fe0:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0107fe3:	89 d0                	mov    %edx,%eax
f0107fe5:	01 c0                	add    %eax,%eax
f0107fe7:	01 d0                	add    %edx,%eax
f0107fe9:	c1 e0 03             	shl    $0x3,%eax
f0107fec:	01 c8                	add    %ecx,%eax
f0107fee:	8a 40 04             	mov    0x4(%eax),%al
f0107ff1:	84 c0                	test   %al,%al
f0107ff3:	75 03                	jne    f0107ff8 <env_page_ws_get_size+0x34>
f0107ff5:	ff 45 f8             	incl   -0x8(%ebp)
f0107ff8:	ff 45 fc             	incl   -0x4(%ebp)
f0107ffb:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ffe:	8b 50 74             	mov    0x74(%eax),%edx
f0108001:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108004:	39 c2                	cmp    %eax,%edx
f0108006:	77 d2                	ja     f0107fda <env_page_ws_get_size+0x16>
	return counter;
f0108008:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f010800b:	c9                   	leave  
f010800c:	c3                   	ret    

f010800d <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f010800d:	55                   	push   %ebp
f010800e:	89 e5                	mov    %esp,%ebp
f0108010:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0108013:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f010801a:	eb 4c                	jmp    f0108068 <env_page_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f010801c:	8b 45 08             	mov    0x8(%ebp),%eax
f010801f:	8b 48 78             	mov    0x78(%eax),%ecx
f0108022:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108025:	89 d0                	mov    %edx,%eax
f0108027:	01 c0                	add    %eax,%eax
f0108029:	01 d0                	add    %edx,%eax
f010802b:	c1 e0 03             	shl    $0x3,%eax
f010802e:	01 c8                	add    %ecx,%eax
f0108030:	8b 00                	mov    (%eax),%eax
f0108032:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108035:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108038:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010803d:	89 c2                	mov    %eax,%edx
f010803f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108042:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108045:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108048:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010804d:	39 c2                	cmp    %eax,%edx
f010804f:	75 14                	jne    f0108065 <env_page_ws_invalidate+0x58>
		{
			env_page_ws_clear_entry(e, i);
f0108051:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108054:	83 ec 08             	sub    $0x8,%esp
f0108057:	50                   	push   %eax
f0108058:	ff 75 08             	pushl  0x8(%ebp)
f010805b:	e8 b9 00 00 00       	call   f0108119 <env_page_ws_clear_entry>
f0108060:	83 c4 10             	add    $0x10,%esp
			break;
f0108063:	eb 10                	jmp    f0108075 <env_page_ws_invalidate+0x68>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f0108065:	ff 45 f4             	incl   -0xc(%ebp)
f0108068:	8b 45 08             	mov    0x8(%ebp),%eax
f010806b:	8b 50 74             	mov    0x74(%eax),%edx
f010806e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108071:	39 c2                	cmp    %eax,%edx
f0108073:	77 a7                	ja     f010801c <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f0108075:	90                   	nop
f0108076:	c9                   	leave  
f0108077:	c3                   	ret    

f0108078 <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0108078:	55                   	push   %ebp
f0108079:	89 e5                	mov    %esp,%ebp
f010807b:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f010807e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108081:	8b 40 74             	mov    0x74(%eax),%eax
f0108084:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108087:	77 16                	ja     f010809f <env_page_ws_set_entry+0x27>
f0108089:	68 94 64 13 f0       	push   $0xf0136494
f010808e:	68 ca 64 13 f0       	push   $0xf01364ca
f0108093:	6a 26                	push   $0x26
f0108095:	68 e0 64 13 f0       	push   $0xf01364e0
f010809a:	e8 66 81 ff ff       	call   f0100205 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f010809f:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01080a6:	76 16                	jbe    f01080be <env_page_ws_set_entry+0x46>
f01080a8:	68 00 65 13 f0       	push   $0xf0136500
f01080ad:	68 ca 64 13 f0       	push   $0xf01364ca
f01080b2:	6a 27                	push   $0x27
f01080b4:	68 e0 64 13 f0       	push   $0xf01364e0
f01080b9:	e8 47 81 ff ff       	call   f0100205 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f01080be:	8b 45 08             	mov    0x8(%ebp),%eax
f01080c1:	8b 48 78             	mov    0x78(%eax),%ecx
f01080c4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01080c7:	89 d0                	mov    %edx,%eax
f01080c9:	01 c0                	add    %eax,%eax
f01080cb:	01 d0                	add    %edx,%eax
f01080cd:	c1 e0 03             	shl    $0x3,%eax
f01080d0:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01080d3:	8b 45 10             	mov    0x10(%ebp),%eax
f01080d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01080d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01080dc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01080e1:	89 02                	mov    %eax,(%edx)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f01080e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01080e6:	8b 48 78             	mov    0x78(%eax),%ecx
f01080e9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01080ec:	89 d0                	mov    %edx,%eax
f01080ee:	01 c0                	add    %eax,%eax
f01080f0:	01 d0                	add    %edx,%eax
f01080f2:	c1 e0 03             	shl    $0x3,%eax
f01080f5:	01 c8                	add    %ecx,%eax
f01080f7:	c6 40 04 00          	movb   $0x0,0x4(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f01080fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01080fe:	8b 48 78             	mov    0x78(%eax),%ecx
f0108101:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108104:	89 d0                	mov    %edx,%eax
f0108106:	01 c0                	add    %eax,%eax
f0108108:	01 d0                	add    %edx,%eax
f010810a:	c1 e0 03             	shl    $0x3,%eax
f010810d:	01 c8                	add    %ecx,%eax
f010810f:	c7 40 08 00 00 00 80 	movl   $0x80000000,0x8(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f0108116:	90                   	nop
}
f0108117:	c9                   	leave  
f0108118:	c3                   	ret    

f0108119 <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0108119:	55                   	push   %ebp
f010811a:	89 e5                	mov    %esp,%ebp
f010811c:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f010811f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108122:	8b 40 74             	mov    0x74(%eax),%eax
f0108125:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108128:	77 16                	ja     f0108140 <env_page_ws_clear_entry+0x27>
f010812a:	68 34 65 13 f0       	push   $0xf0136534
f010812f:	68 ca 64 13 f0       	push   $0xf01364ca
f0108134:	6a 32                	push   $0x32
f0108136:	68 e0 64 13 f0       	push   $0xf01364e0
f010813b:	e8 c5 80 ff ff       	call   f0100205 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0108140:	8b 45 08             	mov    0x8(%ebp),%eax
f0108143:	8b 48 78             	mov    0x78(%eax),%ecx
f0108146:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108149:	89 d0                	mov    %edx,%eax
f010814b:	01 c0                	add    %eax,%eax
f010814d:	01 d0                	add    %edx,%eax
f010814f:	c1 e0 03             	shl    $0x3,%eax
f0108152:	01 c8                	add    %ecx,%eax
f0108154:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f010815a:	8b 45 08             	mov    0x8(%ebp),%eax
f010815d:	8b 48 78             	mov    0x78(%eax),%ecx
f0108160:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108163:	89 d0                	mov    %edx,%eax
f0108165:	01 c0                	add    %eax,%eax
f0108167:	01 d0                	add    %edx,%eax
f0108169:	c1 e0 03             	shl    $0x3,%eax
f010816c:	01 c8                	add    %ecx,%eax
f010816e:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f0108172:	8b 45 08             	mov    0x8(%ebp),%eax
f0108175:	8b 48 78             	mov    0x78(%eax),%ecx
f0108178:	8b 55 0c             	mov    0xc(%ebp),%edx
f010817b:	89 d0                	mov    %edx,%eax
f010817d:	01 c0                	add    %eax,%eax
f010817f:	01 d0                	add    %edx,%eax
f0108181:	c1 e0 03             	shl    $0x3,%eax
f0108184:	01 c8                	add    %ecx,%eax
f0108186:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
f010818d:	90                   	nop
f010818e:	c9                   	leave  
f010818f:	c3                   	ret    

f0108190 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108190:	55                   	push   %ebp
f0108191:	89 e5                	mov    %esp,%ebp
f0108193:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108196:	8b 45 08             	mov    0x8(%ebp),%eax
f0108199:	8b 40 74             	mov    0x74(%eax),%eax
f010819c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010819f:	77 16                	ja     f01081b7 <env_page_ws_get_virtual_address+0x27>
f01081a1:	68 34 65 13 f0       	push   $0xf0136534
f01081a6:	68 ca 64 13 f0       	push   $0xf01364ca
f01081ab:	6a 3a                	push   $0x3a
f01081ad:	68 e0 64 13 f0       	push   $0xf01364e0
f01081b2:	e8 4e 80 ff ff       	call   f0100205 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f01081b7:	8b 45 08             	mov    0x8(%ebp),%eax
f01081ba:	8b 48 78             	mov    0x78(%eax),%ecx
f01081bd:	8b 55 0c             	mov    0xc(%ebp),%edx
f01081c0:	89 d0                	mov    %edx,%eax
f01081c2:	01 c0                	add    %eax,%eax
f01081c4:	01 d0                	add    %edx,%eax
f01081c6:	c1 e0 03             	shl    $0x3,%eax
f01081c9:	01 c8                	add    %ecx,%eax
f01081cb:	8b 00                	mov    (%eax),%eax
f01081cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01081d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01081d3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f01081d8:	c9                   	leave  
f01081d9:	c3                   	ret    

f01081da <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f01081da:	55                   	push   %ebp
f01081db:	89 e5                	mov    %esp,%ebp
f01081dd:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01081e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01081e3:	8b 40 74             	mov    0x74(%eax),%eax
f01081e6:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01081e9:	77 16                	ja     f0108201 <env_page_ws_get_time_stamp+0x27>
f01081eb:	68 34 65 13 f0       	push   $0xf0136534
f01081f0:	68 ca 64 13 f0       	push   $0xf01364ca
f01081f5:	6a 40                	push   $0x40
f01081f7:	68 e0 64 13 f0       	push   $0xf01364e0
f01081fc:	e8 04 80 ff ff       	call   f0100205 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f0108201:	8b 45 08             	mov    0x8(%ebp),%eax
f0108204:	8b 48 78             	mov    0x78(%eax),%ecx
f0108207:	8b 55 0c             	mov    0xc(%ebp),%edx
f010820a:	89 d0                	mov    %edx,%eax
f010820c:	01 c0                	add    %eax,%eax
f010820e:	01 d0                	add    %edx,%eax
f0108210:	c1 e0 03             	shl    $0x3,%eax
f0108213:	01 c8                	add    %ecx,%eax
f0108215:	8b 40 08             	mov    0x8(%eax),%eax
}
f0108218:	c9                   	leave  
f0108219:	c3                   	ret    

f010821a <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f010821a:	55                   	push   %ebp
f010821b:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f010821d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108220:	8b 48 78             	mov    0x78(%eax),%ecx
f0108223:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108226:	89 d0                	mov    %edx,%eax
f0108228:	01 c0                	add    %eax,%eax
f010822a:	01 d0                	add    %edx,%eax
f010822c:	c1 e0 03             	shl    $0x3,%eax
f010822f:	01 c8                	add    %ecx,%eax
f0108231:	8a 40 04             	mov    0x4(%eax),%al
f0108234:	0f b6 c0             	movzbl %al,%eax
}
f0108237:	5d                   	pop    %ebp
f0108238:	c3                   	ret    

f0108239 <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f0108239:	55                   	push   %ebp
f010823a:	89 e5                	mov    %esp,%ebp
f010823c:	53                   	push   %ebx
f010823d:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108240:	83 ec 0c             	sub    $0xc,%esp
f0108243:	6a 02                	push   $0x2
f0108245:	e8 b5 5f 00 00       	call   f010e1ff <isPageReplacmentAlgorithmLRU>
f010824a:	83 c4 10             	add    $0x10,%esp
f010824d:	85 c0                	test   %eax,%eax
f010824f:	0f 84 fe 00 00 00    	je     f0108353 <env_page_ws_print+0x11a>
	{
		int i = 0;
f0108255:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f010825c:	83 ec 0c             	sub    $0xc,%esp
f010825f:	68 6c 65 13 f0       	push   $0xf013656c
f0108264:	e8 a5 8a ff ff       	call   f0100d0e <cprintf>
f0108269:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f010826c:	8b 45 08             	mov    0x8(%ebp),%eax
f010826f:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f0108275:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108278:	eb 2c                	jmp    f01082a6 <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f010827a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010827d:	8b 10                	mov    (%eax),%edx
f010827f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108282:	8d 48 01             	lea    0x1(%eax),%ecx
f0108285:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0108288:	83 ec 04             	sub    $0x4,%esp
f010828b:	52                   	push   %edx
f010828c:	50                   	push   %eax
f010828d:	68 86 65 13 f0       	push   $0xf0136586
f0108292:	e8 77 8a ff ff       	call   f0100d0e <cprintf>
f0108297:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f010829a:	8b 45 08             	mov    0x8(%ebp),%eax
f010829d:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f01082a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01082a6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01082aa:	74 08                	je     f01082b4 <env_page_ws_print+0x7b>
f01082ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01082af:	8b 40 10             	mov    0x10(%eax),%eax
f01082b2:	eb 05                	jmp    f01082b9 <env_page_ws_print+0x80>
f01082b4:	b8 00 00 00 00       	mov    $0x0,%eax
f01082b9:	8b 55 08             	mov    0x8(%ebp),%edx
f01082bc:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f01082c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01082c5:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f01082cb:	85 c0                	test   %eax,%eax
f01082cd:	75 ab                	jne    f010827a <env_page_ws_print+0x41>
f01082cf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01082d3:	75 a5                	jne    f010827a <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f01082d5:	83 ec 0c             	sub    $0xc,%esp
f01082d8:	68 8e 65 13 f0       	push   $0xf013658e
f01082dd:	e8 2c 8a ff ff       	call   f0100d0e <cprintf>
f01082e2:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01082e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01082e8:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f01082ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01082f1:	eb 2c                	jmp    f010831f <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01082f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01082f6:	8b 10                	mov    (%eax),%edx
f01082f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01082fb:	8d 48 01             	lea    0x1(%eax),%ecx
f01082fe:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0108301:	83 ec 04             	sub    $0x4,%esp
f0108304:	52                   	push   %edx
f0108305:	50                   	push   %eax
f0108306:	68 86 65 13 f0       	push   $0xf0136586
f010830b:	e8 fe 89 ff ff       	call   f0100d0e <cprintf>
f0108310:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0108313:	8b 45 08             	mov    0x8(%ebp),%eax
f0108316:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010831c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010831f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108323:	74 08                	je     f010832d <env_page_ws_print+0xf4>
f0108325:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108328:	8b 40 10             	mov    0x10(%eax),%eax
f010832b:	eb 05                	jmp    f0108332 <env_page_ws_print+0xf9>
f010832d:	b8 00 00 00 00       	mov    $0x0,%eax
f0108332:	8b 55 08             	mov    0x8(%ebp),%edx
f0108335:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010833b:	8b 45 08             	mov    0x8(%ebp),%eax
f010833e:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0108344:	85 c0                	test   %eax,%eax
f0108346:	75 ab                	jne    f01082f3 <env_page_ws_print+0xba>
f0108348:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010834c:	75 a5                	jne    f01082f3 <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f010834e:	e9 95 01 00 00       	jmp    f01084e8 <env_page_ws_print+0x2af>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f0108353:	83 ec 0c             	sub    $0xc,%esp
f0108356:	68 a9 65 13 f0       	push   $0xf01365a9
f010835b:	e8 ae 89 ff ff       	call   f0100d0e <cprintf>
f0108360:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f0108363:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010836a:	e9 6a 01 00 00       	jmp    f01084d9 <env_page_ws_print+0x2a0>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f010836f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108372:	8b 48 78             	mov    0x78(%eax),%ecx
f0108375:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108378:	89 d0                	mov    %edx,%eax
f010837a:	01 c0                	add    %eax,%eax
f010837c:	01 d0                	add    %edx,%eax
f010837e:	c1 e0 03             	shl    $0x3,%eax
f0108381:	01 c8                	add    %ecx,%eax
f0108383:	8a 40 04             	mov    0x4(%eax),%al
f0108386:	84 c0                	test   %al,%al
f0108388:	74 43                	je     f01083cd <env_page_ws_print+0x194>
			{
				cprintf("EMPTY LOCATION");
f010838a:	83 ec 0c             	sub    $0xc,%esp
f010838d:	68 b3 65 13 f0       	push   $0xf01365b3
f0108392:	e8 77 89 ff ff       	call   f0100d0e <cprintf>
f0108397:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f010839a:	8b 45 08             	mov    0x8(%ebp),%eax
f010839d:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f01083a3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01083a6:	75 10                	jne    f01083b8 <env_page_ws_print+0x17f>
				{
					cprintf("		<--");
f01083a8:	83 ec 0c             	sub    $0xc,%esp
f01083ab:	68 c2 65 13 f0       	push   $0xf01365c2
f01083b0:	e8 59 89 ff ff       	call   f0100d0e <cprintf>
f01083b5:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f01083b8:	83 ec 0c             	sub    $0xc,%esp
f01083bb:	68 c8 65 13 f0       	push   $0xf01365c8
f01083c0:	e8 49 89 ff ff       	call   f0100d0e <cprintf>
f01083c5:	83 c4 10             	add    $0x10,%esp
				continue;
f01083c8:	e9 09 01 00 00       	jmp    f01084d6 <env_page_ws_print+0x29d>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f01083cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01083d0:	8b 48 78             	mov    0x78(%eax),%ecx
f01083d3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01083d6:	89 d0                	mov    %edx,%eax
f01083d8:	01 c0                	add    %eax,%eax
f01083da:	01 d0                	add    %edx,%eax
f01083dc:	c1 e0 03             	shl    $0x3,%eax
f01083df:	01 c8                	add    %ecx,%eax
f01083e1:	8b 00                	mov    (%eax),%eax
f01083e3:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f01083e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01083e9:	8b 48 78             	mov    0x78(%eax),%ecx
f01083ec:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01083ef:	89 d0                	mov    %edx,%eax
f01083f1:	01 c0                	add    %eax,%eax
f01083f3:	01 d0                	add    %edx,%eax
f01083f5:	c1 e0 03             	shl    $0x3,%eax
f01083f8:	01 c8                	add    %ecx,%eax
f01083fa:	8b 40 08             	mov    0x8(%eax),%eax
f01083fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f0108400:	8b 45 08             	mov    0x8(%ebp),%eax
f0108403:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108406:	83 ec 08             	sub    $0x8,%esp
f0108409:	ff 75 e8             	pushl  -0x18(%ebp)
f010840c:	50                   	push   %eax
f010840d:	e8 ed f9 ff ff       	call   f0107dff <pt_get_page_permissions>
f0108412:	83 c4 10             	add    $0x10,%esp
f0108415:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f0108418:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010841b:	83 e0 40             	and    $0x40,%eax
f010841e:	85 c0                	test   %eax,%eax
f0108420:	0f 95 c0             	setne  %al
f0108423:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f0108426:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108429:	83 e0 20             	and    $0x20,%eax
f010842c:	85 c0                	test   %eax,%eax
f010842e:	0f 95 c0             	setne  %al
f0108431:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f0108434:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108437:	25 00 02 00 00       	and    $0x200,%eax
f010843c:	85 c0                	test   %eax,%eax
f010843e:	0f 95 c0             	setne  %al
f0108441:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f0108444:	8b 45 08             	mov    0x8(%ebp),%eax
f0108447:	8b 48 78             	mov    0x78(%eax),%ecx
f010844a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010844d:	89 d0                	mov    %edx,%eax
f010844f:	01 c0                	add    %eax,%eax
f0108451:	01 d0                	add    %edx,%eax
f0108453:	c1 e0 03             	shl    $0x3,%eax
f0108456:	01 c8                	add    %ecx,%eax
f0108458:	8b 00                	mov    (%eax),%eax
f010845a:	83 ec 04             	sub    $0x4,%esp
f010845d:	50                   	push   %eax
f010845e:	ff 75 ec             	pushl  -0x14(%ebp)
f0108461:	68 ca 65 13 f0       	push   $0xf01365ca
f0108466:	e8 a3 88 ff ff       	call   f0100d0e <cprintf>
f010846b:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f010846e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108471:	8b 48 78             	mov    0x78(%eax),%ecx
f0108474:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108477:	89 d0                	mov    %edx,%eax
f0108479:	01 c0                	add    %eax,%eax
f010847b:	01 d0                	add    %edx,%eax
f010847d:	c1 e0 03             	shl    $0x3,%eax
f0108480:	01 c8                	add    %ecx,%eax
f0108482:	8b 58 0c             	mov    0xc(%eax),%ebx
f0108485:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f0108489:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f010848d:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f0108491:	83 ec 08             	sub    $0x8,%esp
f0108494:	53                   	push   %ebx
f0108495:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108498:	51                   	push   %ecx
f0108499:	52                   	push   %edx
f010849a:	50                   	push   %eax
f010849b:	68 dc 65 13 f0       	push   $0xf01365dc
f01084a0:	e8 69 88 ff ff       	call   f0100d0e <cprintf>
f01084a5:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f01084a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01084ab:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f01084b1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01084b4:	75 10                	jne    f01084c6 <env_page_ws_print+0x28d>
			{
				cprintf(" <--");
f01084b6:	83 ec 0c             	sub    $0xc,%esp
f01084b9:	68 23 66 13 f0       	push   $0xf0136623
f01084be:	e8 4b 88 ff ff       	call   f0100d0e <cprintf>
f01084c3:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f01084c6:	83 ec 0c             	sub    $0xc,%esp
f01084c9:	68 c8 65 13 f0       	push   $0xf01365c8
f01084ce:	e8 3b 88 ff ff       	call   f0100d0e <cprintf>
f01084d3:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f01084d6:	ff 45 ec             	incl   -0x14(%ebp)
f01084d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01084dc:	8b 40 74             	mov    0x74(%eax),%eax
f01084df:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01084e2:	0f 87 87 fe ff ff    	ja     f010836f <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01084e8:	90                   	nop
f01084e9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01084ec:	c9                   	leave  
f01084ed:	c3                   	ret    

f01084ee <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f01084ee:	55                   	push   %ebp
f01084ef:	89 e5                	mov    %esp,%ebp
f01084f1:	53                   	push   %ebx
f01084f2:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f01084f5:	83 ec 0c             	sub    $0xc,%esp
f01084f8:	68 28 66 13 f0       	push   $0xf0136628
f01084fd:	e8 0c 88 ff ff       	call   f0100d0e <cprintf>
f0108502:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f0108505:	83 ec 0c             	sub    $0xc,%esp
f0108508:	68 5d 66 13 f0       	push   $0xf013665d
f010850d:	e8 fc 87 ff ff       	call   f0100d0e <cprintf>
f0108512:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0108515:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010851c:	e9 10 01 00 00       	jmp    f0108631 <env_table_ws_print+0x143>
	{
		if (e->__ptr_tws[i].empty)
f0108521:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108524:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108527:	89 d0                	mov    %edx,%eax
f0108529:	01 c0                	add    %eax,%eax
f010852b:	01 d0                	add    %edx,%eax
f010852d:	c1 e0 03             	shl    $0x3,%eax
f0108530:	01 c8                	add    %ecx,%eax
f0108532:	83 e8 80             	sub    $0xffffff80,%eax
f0108535:	8a 00                	mov    (%eax),%al
f0108537:	84 c0                	test   %al,%al
f0108539:	74 43                	je     f010857e <env_table_ws_print+0x90>
		{
			cprintf("EMPTY LOCATION");
f010853b:	83 ec 0c             	sub    $0xc,%esp
f010853e:	68 b3 65 13 f0       	push   $0xf01365b3
f0108543:	e8 c6 87 ff ff       	call   f0100d0e <cprintf>
f0108548:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f010854b:	8b 45 08             	mov    0x8(%ebp),%eax
f010854e:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f0108554:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108557:	75 10                	jne    f0108569 <env_table_ws_print+0x7b>
			{
				cprintf("		<--");
f0108559:	83 ec 0c             	sub    $0xc,%esp
f010855c:	68 c2 65 13 f0       	push   $0xf01365c2
f0108561:	e8 a8 87 ff ff       	call   f0100d0e <cprintf>
f0108566:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0108569:	83 ec 0c             	sub    $0xc,%esp
f010856c:	68 c8 65 13 f0       	push   $0xf01365c8
f0108571:	e8 98 87 ff ff       	call   f0100d0e <cprintf>
f0108576:	83 c4 10             	add    $0x10,%esp
			continue;
f0108579:	e9 b0 00 00 00       	jmp    f010862e <env_table_ws_print+0x140>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f010857e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108581:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108584:	89 d0                	mov    %edx,%eax
f0108586:	01 c0                	add    %eax,%eax
f0108588:	01 d0                	add    %edx,%eax
f010858a:	c1 e0 03             	shl    $0x3,%eax
f010858d:	01 c8                	add    %ecx,%eax
f010858f:	83 c0 7c             	add    $0x7c,%eax
f0108592:	8b 00                	mov    (%eax),%eax
f0108594:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f0108597:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010859a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010859d:	89 d0                	mov    %edx,%eax
f010859f:	01 c0                	add    %eax,%eax
f01085a1:	01 d0                	add    %edx,%eax
f01085a3:	c1 e0 03             	shl    $0x3,%eax
f01085a6:	01 c8                	add    %ecx,%eax
f01085a8:	83 c0 7c             	add    $0x7c,%eax
f01085ab:	8b 00                	mov    (%eax),%eax
f01085ad:	83 ec 04             	sub    $0x4,%esp
f01085b0:	50                   	push   %eax
f01085b1:	ff 75 f4             	pushl  -0xc(%ebp)
f01085b4:	68 68 66 13 f0       	push   $0xf0136668
f01085b9:	e8 50 87 ff ff       	call   f0100d0e <cprintf>
f01085be:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f01085c1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01085c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01085c7:	89 d0                	mov    %edx,%eax
f01085c9:	01 c0                	add    %eax,%eax
f01085cb:	01 d0                	add    %edx,%eax
f01085cd:	c1 e0 03             	shl    $0x3,%eax
f01085d0:	01 c8                	add    %ecx,%eax
f01085d2:	05 84 00 00 00       	add    $0x84,%eax
f01085d7:	8b 18                	mov    (%eax),%ebx
f01085d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01085dc:	8b 40 5c             	mov    0x5c(%eax),%eax
f01085df:	83 ec 08             	sub    $0x8,%esp
f01085e2:	ff 75 f0             	pushl  -0x10(%ebp)
f01085e5:	50                   	push   %eax
f01085e6:	e8 43 f9 ff ff       	call   f0107f2e <pd_is_table_used>
f01085eb:	83 c4 10             	add    $0x10,%esp
f01085ee:	83 ec 04             	sub    $0x4,%esp
f01085f1:	53                   	push   %ebx
f01085f2:	50                   	push   %eax
f01085f3:	68 80 66 13 f0       	push   $0xf0136680
f01085f8:	e8 11 87 ff ff       	call   f0100d0e <cprintf>
f01085fd:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f0108600:	8b 45 08             	mov    0x8(%ebp),%eax
f0108603:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f0108609:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010860c:	75 10                	jne    f010861e <env_table_ws_print+0x130>
		{
			cprintf(" <--");
f010860e:	83 ec 0c             	sub    $0xc,%esp
f0108611:	68 23 66 13 f0       	push   $0xf0136623
f0108616:	e8 f3 86 ff ff       	call   f0100d0e <cprintf>
f010861b:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f010861e:	83 ec 0c             	sub    $0xc,%esp
f0108621:	68 c8 65 13 f0       	push   $0xf01365c8
f0108626:	e8 e3 86 ff ff       	call   f0100d0e <cprintf>
f010862b:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f010862e:	ff 45 f4             	incl   -0xc(%ebp)
f0108631:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0108635:	0f 86 e6 fe ff ff    	jbe    f0108521 <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f010863b:	90                   	nop
f010863c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010863f:	c9                   	leave  
f0108640:	c3                   	ret    

f0108641 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0108641:	55                   	push   %ebp
f0108642:	89 e5                	mov    %esp,%ebp
f0108644:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0108647:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f010864e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f0108655:	eb 20                	jmp    f0108677 <env_table_ws_get_size+0x36>
f0108657:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010865a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010865d:	89 d0                	mov    %edx,%eax
f010865f:	01 c0                	add    %eax,%eax
f0108661:	01 d0                	add    %edx,%eax
f0108663:	c1 e0 03             	shl    $0x3,%eax
f0108666:	01 c8                	add    %ecx,%eax
f0108668:	83 e8 80             	sub    $0xffffff80,%eax
f010866b:	8a 00                	mov    (%eax),%al
f010866d:	84 c0                	test   %al,%al
f010866f:	75 03                	jne    f0108674 <env_table_ws_get_size+0x33>
f0108671:	ff 45 f8             	incl   -0x8(%ebp)
f0108674:	ff 45 fc             	incl   -0x4(%ebp)
f0108677:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f010867b:	7e da                	jle    f0108657 <env_table_ws_get_size+0x16>
	return counter;
f010867d:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0108680:	c9                   	leave  
f0108681:	c3                   	ret    

f0108682 <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0108682:	55                   	push   %ebp
f0108683:	89 e5                	mov    %esp,%ebp
f0108685:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0108688:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f010868f:	eb 4c                	jmp    f01086dd <env_table_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f0108691:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108694:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108697:	89 d0                	mov    %edx,%eax
f0108699:	01 c0                	add    %eax,%eax
f010869b:	01 d0                	add    %edx,%eax
f010869d:	c1 e0 03             	shl    $0x3,%eax
f01086a0:	01 c8                	add    %ecx,%eax
f01086a2:	83 c0 7c             	add    $0x7c,%eax
f01086a5:	8b 00                	mov    (%eax),%eax
f01086a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01086aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01086ad:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01086b2:	89 c2                	mov    %eax,%edx
f01086b4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01086b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01086ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01086bd:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01086c2:	39 c2                	cmp    %eax,%edx
f01086c4:	75 14                	jne    f01086da <env_table_ws_invalidate+0x58>
		{
			env_table_ws_clear_entry(e, i);
f01086c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01086c9:	83 ec 08             	sub    $0x8,%esp
f01086cc:	50                   	push   %eax
f01086cd:	ff 75 08             	pushl  0x8(%ebp)
f01086d0:	e8 b8 00 00 00       	call   f010878d <env_table_ws_clear_entry>
f01086d5:	83 c4 10             	add    $0x10,%esp
			break;
f01086d8:	eb 09                	jmp    f01086e3 <env_table_ws_invalidate+0x61>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f01086da:	ff 45 f4             	incl   -0xc(%ebp)
f01086dd:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01086e1:	7e ae                	jle    f0108691 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f01086e3:	90                   	nop
f01086e4:	c9                   	leave  
f01086e5:	c3                   	ret    

f01086e6 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01086e6:	55                   	push   %ebp
f01086e7:	89 e5                	mov    %esp,%ebp
f01086e9:	53                   	push   %ebx
f01086ea:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01086ed:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01086f1:	76 19                	jbe    f010870c <env_table_ws_set_entry+0x26>
f01086f3:	68 a4 66 13 f0       	push   $0xf01366a4
f01086f8:	68 ca 64 13 f0       	push   $0xf01364ca
f01086fd:	68 b6 00 00 00       	push   $0xb6
f0108702:	68 e0 64 13 f0       	push   $0xf01364e0
f0108707:	e8 f9 7a ff ff       	call   f0100205 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f010870c:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0108713:	76 19                	jbe    f010872e <env_table_ws_set_entry+0x48>
f0108715:	68 00 65 13 f0       	push   $0xf0136500
f010871a:	68 ca 64 13 f0       	push   $0xf01364ca
f010871f:	68 b7 00 00 00       	push   $0xb7
f0108724:	68 e0 64 13 f0       	push   $0xf01364e0
f0108729:	e8 d7 7a ff ff       	call   f0100205 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f010872e:	8b 45 10             	mov    0x10(%ebp),%eax
f0108731:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108734:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108737:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010873c:	89 c1                	mov    %eax,%ecx
f010873e:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108741:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108744:	89 d0                	mov    %edx,%eax
f0108746:	01 c0                	add    %eax,%eax
f0108748:	01 d0                	add    %edx,%eax
f010874a:	c1 e0 03             	shl    $0x3,%eax
f010874d:	01 d8                	add    %ebx,%eax
f010874f:	83 c0 7c             	add    $0x7c,%eax
f0108752:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f0108754:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108757:	8b 55 0c             	mov    0xc(%ebp),%edx
f010875a:	89 d0                	mov    %edx,%eax
f010875c:	01 c0                	add    %eax,%eax
f010875e:	01 d0                	add    %edx,%eax
f0108760:	c1 e0 03             	shl    $0x3,%eax
f0108763:	01 c8                	add    %ecx,%eax
f0108765:	83 e8 80             	sub    $0xffffff80,%eax
f0108768:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f010876b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010876e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108771:	89 d0                	mov    %edx,%eax
f0108773:	01 c0                	add    %eax,%eax
f0108775:	01 d0                	add    %edx,%eax
f0108777:	c1 e0 03             	shl    $0x3,%eax
f010877a:	01 c8                	add    %ecx,%eax
f010877c:	05 84 00 00 00       	add    $0x84,%eax
f0108781:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f0108787:	90                   	nop
}
f0108788:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010878b:	c9                   	leave  
f010878c:	c3                   	ret    

f010878d <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f010878d:	55                   	push   %ebp
f010878e:	89 e5                	mov    %esp,%ebp
f0108790:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108793:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108797:	76 19                	jbe    f01087b2 <env_table_ws_clear_entry+0x25>
f0108799:	68 a4 66 13 f0       	push   $0xf01366a4
f010879e:	68 ca 64 13 f0       	push   $0xf01364ca
f01087a3:	68 c2 00 00 00       	push   $0xc2
f01087a8:	68 e0 64 13 f0       	push   $0xf01364e0
f01087ad:	e8 53 7a ff ff       	call   f0100205 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f01087b2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01087b5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01087b8:	89 d0                	mov    %edx,%eax
f01087ba:	01 c0                	add    %eax,%eax
f01087bc:	01 d0                	add    %edx,%eax
f01087be:	c1 e0 03             	shl    $0x3,%eax
f01087c1:	01 c8                	add    %ecx,%eax
f01087c3:	83 c0 7c             	add    $0x7c,%eax
f01087c6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f01087cc:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01087cf:	8b 55 0c             	mov    0xc(%ebp),%edx
f01087d2:	89 d0                	mov    %edx,%eax
f01087d4:	01 c0                	add    %eax,%eax
f01087d6:	01 d0                	add    %edx,%eax
f01087d8:	c1 e0 03             	shl    $0x3,%eax
f01087db:	01 c8                	add    %ecx,%eax
f01087dd:	83 e8 80             	sub    $0xffffff80,%eax
f01087e0:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f01087e3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01087e6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01087e9:	89 d0                	mov    %edx,%eax
f01087eb:	01 c0                	add    %eax,%eax
f01087ed:	01 d0                	add    %edx,%eax
f01087ef:	c1 e0 03             	shl    $0x3,%eax
f01087f2:	01 c8                	add    %ecx,%eax
f01087f4:	05 84 00 00 00       	add    $0x84,%eax
f01087f9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f01087ff:	90                   	nop
f0108800:	c9                   	leave  
f0108801:	c3                   	ret    

f0108802 <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108802:	55                   	push   %ebp
f0108803:	89 e5                	mov    %esp,%ebp
f0108805:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108808:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f010880c:	76 19                	jbe    f0108827 <env_table_ws_get_virtual_address+0x25>
f010880e:	68 a4 66 13 f0       	push   $0xf01366a4
f0108813:	68 ca 64 13 f0       	push   $0xf01364ca
f0108818:	68 ca 00 00 00       	push   $0xca
f010881d:	68 e0 64 13 f0       	push   $0xf01364e0
f0108822:	e8 de 79 ff ff       	call   f0100205 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0108827:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010882a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010882d:	89 d0                	mov    %edx,%eax
f010882f:	01 c0                	add    %eax,%eax
f0108831:	01 d0                	add    %edx,%eax
f0108833:	c1 e0 03             	shl    $0x3,%eax
f0108836:	01 c8                	add    %ecx,%eax
f0108838:	83 c0 7c             	add    $0x7c,%eax
f010883b:	8b 00                	mov    (%eax),%eax
f010883d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108840:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108843:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f0108848:	c9                   	leave  
f0108849:	c3                   	ret    

f010884a <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f010884a:	55                   	push   %ebp
f010884b:	89 e5                	mov    %esp,%ebp
f010884d:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108850:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108854:	76 19                	jbe    f010886f <env_table_ws_get_time_stamp+0x25>
f0108856:	68 a4 66 13 f0       	push   $0xf01366a4
f010885b:	68 ca 64 13 f0       	push   $0xf01364ca
f0108860:	68 d1 00 00 00       	push   $0xd1
f0108865:	68 e0 64 13 f0       	push   $0xf01364e0
f010886a:	e8 96 79 ff ff       	call   f0100205 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f010886f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108872:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108875:	89 d0                	mov    %edx,%eax
f0108877:	01 c0                	add    %eax,%eax
f0108879:	01 d0                	add    %edx,%eax
f010887b:	c1 e0 03             	shl    $0x3,%eax
f010887e:	01 c8                	add    %ecx,%eax
f0108880:	05 84 00 00 00       	add    $0x84,%eax
f0108885:	8b 00                	mov    (%eax),%eax
}
f0108887:	c9                   	leave  
f0108888:	c3                   	ret    

f0108889 <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0108889:	55                   	push   %ebp
f010888a:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f010888c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010888f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108892:	89 d0                	mov    %edx,%eax
f0108894:	01 c0                	add    %eax,%eax
f0108896:	01 d0                	add    %edx,%eax
f0108898:	c1 e0 03             	shl    $0x3,%eax
f010889b:	01 c8                	add    %ecx,%eax
f010889d:	83 e8 80             	sub    $0xffffff80,%eax
f01088a0:	8a 00                	mov    (%eax),%al
f01088a2:	0f b6 c0             	movzbl %al,%eax
}
f01088a5:	5d                   	pop    %ebp
f01088a6:	c3                   	ret    

f01088a7 <cut_paste_WS>:
///=================================================================================================

// Change WS Sizes For PRIORITY  =========================================================

void cut_paste_WS(struct WorkingSetElement* newWS, int newSize, struct Env* e)
{
f01088a7:	55                   	push   %ebp
f01088a8:	89 e5                	mov    %esp,%ebp
f01088aa:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] cut_paste_WS
	//your code is here, remove the panic and write your code
	panic("cut_paste_WS() is not implemented yet...!!");
f01088ad:	83 ec 04             	sub    $0x4,%esp
f01088b0:	68 d8 66 13 f0       	push   $0xf01366d8
f01088b5:	68 e5 00 00 00       	push   $0xe5
f01088ba:	68 e0 64 13 f0       	push   $0xf01364e0
f01088bf:	e8 41 79 ff ff       	call   f0100205 <_panic>

f01088c4 <double_WS_Size>:
}

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f01088c4:	55                   	push   %ebp
f01088c5:	89 e5                	mov    %esp,%ebp
f01088c7:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] double_WS_Size
	//your code is here, remove the panic and write your code
	panic("double_WS_Size() is not implemented yet...!!");
f01088ca:	83 ec 04             	sub    $0x4,%esp
f01088cd:	68 04 67 13 f0       	push   $0xf0136704
f01088d2:	68 ec 00 00 00       	push   $0xec
f01088d7:	68 e0 64 13 f0       	push   $0xf01364e0
f01088dc:	e8 24 79 ff ff       	call   f0100205 <_panic>

f01088e1 <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f01088e1:	55                   	push   %ebp
f01088e2:	89 e5                	mov    %esp,%ebp
f01088e4:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] half_WS_Size
	//your code is here, remove the panic and write your code
	panic("half_WS_Size() is not implemented yet...!!");
f01088e7:	83 ec 04             	sub    $0x4,%esp
f01088ea:	68 34 67 13 f0       	push   $0xf0136734
f01088ef:	68 f3 00 00 00       	push   $0xf3
f01088f4:	68 e0 64 13 f0       	push   $0xf01364e0
f01088f9:	e8 07 79 ff ff       	call   f0100205 <_panic>

f01088fe <cut_paste_pages>:
//===============================
//This function should cut-paste the given number of pages from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f01088fe:	55                   	push   %ebp
f01088ff:	89 e5                	mov    %esp,%ebp
f0108901:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] cut_paste_pages
	// Write your code here, remove the panic and write your code
	//panic("cut_paste_pages() is not implemented yet...!!");

	//int debug = source_va == 0x2800000 && dest_va == 0x2900000 && num_of_pages == 3;
	source_va = ROUNDDOWN(source_va, PAGE_SIZE);
f0108904:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108907:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010890a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010890d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108912:	89 45 0c             	mov    %eax,0xc(%ebp)
	dest_va = ROUNDDOWN(dest_va, PAGE_SIZE);
f0108915:	8b 45 10             	mov    0x10(%ebp),%eax
f0108918:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010891b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010891e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108923:	89 45 10             	mov    %eax,0x10(%ebp)
	uint32 destVa279 = dest_va;
f0108926:	8b 45 10             	mov    0x10(%ebp),%eax
f0108929:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table_34an_elsource = NULL;
f010892c:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
	uint32 *ptr_page_table_34an_eldestination = NULL;
f0108933:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	uint32 *ptr_page_table3 = NULL;
f010893a:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	uint32 *aa7= NULL;
f0108941:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	struct FrameInfo* Return_From_Destination = NULL;
f0108948:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	struct FrameInfo *ptr_frame_info = NULL;
f010894f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)

	for(int counter = 0; counter < num_of_pages; counter++)
f0108956:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010895d:	eb 32                	jmp    f0108991 <cut_paste_pages+0x93>
	{
		Return_From_Destination = get_frame_info(page_directory, destVa279, &aa7);
f010895f:	83 ec 04             	sub    $0x4,%esp
f0108962:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0108965:	50                   	push   %eax
f0108966:	ff 75 f4             	pushl  -0xc(%ebp)
f0108969:	ff 75 08             	pushl  0x8(%ebp)
f010896c:	e8 b0 e4 ff ff       	call   f0106e21 <get_frame_info>
f0108971:	83 c4 10             	add    $0x10,%esp
f0108974:	89 45 e0             	mov    %eax,-0x20(%ebp)
		if(Return_From_Destination != NULL)
f0108977:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010897b:	74 0a                	je     f0108987 <cut_paste_pages+0x89>
			return -1;
f010897d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108982:	e9 e0 00 00 00       	jmp    f0108a67 <cut_paste_pages+0x169>
		destVa279+=PAGE_SIZE;
f0108987:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
	uint32 *ptr_page_table3 = NULL;
	uint32 *aa7= NULL;
	struct FrameInfo* Return_From_Destination = NULL;
	struct FrameInfo *ptr_frame_info = NULL;

	for(int counter = 0; counter < num_of_pages; counter++)
f010898e:	ff 45 f0             	incl   -0x10(%ebp)
f0108991:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108994:	3b 45 14             	cmp    0x14(%ebp),%eax
f0108997:	72 c6                	jb     f010895f <cut_paste_pages+0x61>
		if(Return_From_Destination != NULL)
			return -1;
		destVa279+=PAGE_SIZE;
	}

	for(int counter = 0; counter < num_of_pages; counter++)
f0108999:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01089a0:	e9 b1 00 00 00       	jmp    f0108a56 <cut_paste_pages+0x158>
	{
		get_page_table(page_directory, dest_va, &ptr_page_table_34an_eldestination);
f01089a5:	83 ec 04             	sub    $0x4,%esp
f01089a8:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01089ab:	50                   	push   %eax
f01089ac:	ff 75 10             	pushl  0x10(%ebp)
f01089af:	ff 75 08             	pushl  0x8(%ebp)
f01089b2:	e8 15 e1 ff ff       	call   f0106acc <get_page_table>
f01089b7:	83 c4 10             	add    $0x10,%esp

		if (ptr_page_table_34an_eldestination == NULL)
f01089ba:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01089bd:	85 c0                	test   %eax,%eax
f01089bf:	75 14                	jne    f01089d5 <cut_paste_pages+0xd7>
			ptr_page_table_34an_eldestination = create_page_table(page_directory, dest_va);
f01089c1:	83 ec 08             	sub    $0x8,%esp
f01089c4:	ff 75 10             	pushl  0x10(%ebp)
f01089c7:	ff 75 08             	pushl  0x8(%ebp)
f01089ca:	e8 53 e2 ff ff       	call   f0106c22 <create_page_table>
f01089cf:	83 c4 10             	add    $0x10,%esp
f01089d2:	89 45 d0             	mov    %eax,-0x30(%ebp)

		get_page_table(page_directory, source_va, &ptr_page_table_34an_elsource);
f01089d5:	83 ec 04             	sub    $0x4,%esp
f01089d8:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f01089db:	50                   	push   %eax
f01089dc:	ff 75 0c             	pushl  0xc(%ebp)
f01089df:	ff 75 08             	pushl  0x8(%ebp)
f01089e2:	e8 e5 e0 ff ff       	call   f0106acc <get_page_table>
f01089e7:	83 c4 10             	add    $0x10,%esp

		int El_permissions_bta3t_elsource = ptr_page_table_34an_elsource[PTX(source_va)] & 0XFFF;
f01089ea:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01089ed:	8b 55 0c             	mov    0xc(%ebp),%edx
f01089f0:	c1 ea 0c             	shr    $0xc,%edx
f01089f3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01089f9:	c1 e2 02             	shl    $0x2,%edx
f01089fc:	01 d0                	add    %edx,%eax
f01089fe:	8b 00                	mov    (%eax),%eax
f0108a00:	25 ff 0f 00 00       	and    $0xfff,%eax
f0108a05:	89 45 d8             	mov    %eax,-0x28(%ebp)

		ptr_frame_info = get_frame_info(page_directory, source_va, &ptr_page_table3);
f0108a08:	83 ec 04             	sub    $0x4,%esp
f0108a0b:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0108a0e:	50                   	push   %eax
f0108a0f:	ff 75 0c             	pushl  0xc(%ebp)
f0108a12:	ff 75 08             	pushl  0x8(%ebp)
f0108a15:	e8 07 e4 ff ff       	call   f0106e21 <get_frame_info>
f0108a1a:	83 c4 10             	add    $0x10,%esp
f0108a1d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		map_frame(page_directory, ptr_frame_info, dest_va, El_permissions_bta3t_elsource);
f0108a20:	ff 75 d8             	pushl  -0x28(%ebp)
f0108a23:	ff 75 10             	pushl  0x10(%ebp)
f0108a26:	ff 75 dc             	pushl  -0x24(%ebp)
f0108a29:	ff 75 08             	pushl  0x8(%ebp)
f0108a2c:	e8 2b e3 ff ff       	call   f0106d5c <map_frame>
f0108a31:	83 c4 10             	add    $0x10,%esp

		unmap_frame(page_directory, source_va);
f0108a34:	83 ec 08             	sub    $0x8,%esp
f0108a37:	ff 75 0c             	pushl  0xc(%ebp)
f0108a3a:	ff 75 08             	pushl  0x8(%ebp)
f0108a3d:	e8 4f e4 ff ff       	call   f0106e91 <unmap_frame>
f0108a42:	83 c4 10             	add    $0x10,%esp

		source_va+=PAGE_SIZE;
f0108a45:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
		dest_va+=PAGE_SIZE;
f0108a4c:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
		if(Return_From_Destination != NULL)
			return -1;
		destVa279+=PAGE_SIZE;
	}

	for(int counter = 0; counter < num_of_pages; counter++)
f0108a53:	ff 45 ec             	incl   -0x14(%ebp)
f0108a56:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108a59:	3b 45 14             	cmp    0x14(%ebp),%eax
f0108a5c:	0f 82 43 ff ff ff    	jb     f01089a5 <cut_paste_pages+0xa7>
		unmap_frame(page_directory, source_va);

		source_va+=PAGE_SIZE;
		dest_va+=PAGE_SIZE;
	}
	return 0;
f0108a62:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108a67:	c9                   	leave  
f0108a68:	c3                   	ret    

f0108a69 <copy_paste_chunk>:
//===============================
//This function should copy-paste the given size from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f0108a69:	55                   	push   %ebp
f0108a6a:	89 e5                	mov    %esp,%ebp
f0108a6c:	83 ec 48             	sub    $0x48,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] copy_paste_chunk
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");

	uint32* ptr_page_table_source = NULL;
f0108a6f:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
    uint32* ptr_page_table_dest = NULL;
f0108a76:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
    struct FrameInfo* ptr_frame_info_dest = NULL;
f0108a7d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

    for(uint32 i = dest_va; i < dest_va+size; i+=PAGE_SIZE)
f0108a84:	8b 45 10             	mov    0x10(%ebp),%eax
f0108a87:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108a8a:	eb 51                	jmp    f0108add <copy_paste_chunk+0x74>
    {
    	ptr_frame_info_dest= get_frame_info(page_directory,i,&ptr_page_table_dest);
f0108a8c:	83 ec 04             	sub    $0x4,%esp
f0108a8f:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0108a92:	50                   	push   %eax
f0108a93:	ff 75 f4             	pushl  -0xc(%ebp)
f0108a96:	ff 75 08             	pushl  0x8(%ebp)
f0108a99:	e8 83 e3 ff ff       	call   f0106e21 <get_frame_info>
f0108a9e:	83 c4 10             	add    $0x10,%esp
f0108aa1:	89 45 e0             	mov    %eax,-0x20(%ebp)
    	if(ptr_frame_info_dest != NULL)
f0108aa4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0108aa8:	74 2c                	je     f0108ad6 <copy_paste_chunk+0x6d>
    	{
    		uint32 dest_perm = ptr_page_table_dest[PTX(i)] & PERM_WRITEABLE;
f0108aaa:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0108aad:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108ab0:	c1 ea 0c             	shr    $0xc,%edx
f0108ab3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108ab9:	c1 e2 02             	shl    $0x2,%edx
f0108abc:	01 d0                	add    %edx,%eax
f0108abe:	8b 00                	mov    (%eax),%eax
f0108ac0:	83 e0 02             	and    $0x2,%eax
f0108ac3:	89 45 dc             	mov    %eax,-0x24(%ebp)
    		if(dest_perm != PERM_WRITEABLE)
f0108ac6:	83 7d dc 02          	cmpl   $0x2,-0x24(%ebp)
f0108aca:	74 0a                	je     f0108ad6 <copy_paste_chunk+0x6d>
    			return -1;
f0108acc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108ad1:	e9 79 01 00 00       	jmp    f0108c4f <copy_paste_chunk+0x1e6>

	uint32* ptr_page_table_source = NULL;
    uint32* ptr_page_table_dest = NULL;
    struct FrameInfo* ptr_frame_info_dest = NULL;

    for(uint32 i = dest_va; i < dest_va+size; i+=PAGE_SIZE)
f0108ad6:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108add:	8b 55 10             	mov    0x10(%ebp),%edx
f0108ae0:	8b 45 14             	mov    0x14(%ebp),%eax
f0108ae3:	01 d0                	add    %edx,%eax
f0108ae5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108ae8:	77 a2                	ja     f0108a8c <copy_paste_chunk+0x23>
    		if(dest_perm != PERM_WRITEABLE)
    			return -1;
    	}
    }

    uint32 source_ptr = source_va;
f0108aea:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108aed:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for(uint32 i = dest_va; i < dest_va+size; i+=PAGE_SIZE)
f0108af0:	8b 45 10             	mov    0x10(%ebp),%eax
f0108af3:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108af6:	e9 07 01 00 00       	jmp    f0108c02 <copy_paste_chunk+0x199>
    {
    	uint32 ptr_page_table_dest_ret = get_page_table(page_directory,i,&ptr_page_table_dest);
f0108afb:	83 ec 04             	sub    $0x4,%esp
f0108afe:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0108b01:	50                   	push   %eax
f0108b02:	ff 75 ec             	pushl  -0x14(%ebp)
f0108b05:	ff 75 08             	pushl  0x8(%ebp)
f0108b08:	e8 bf df ff ff       	call   f0106acc <get_page_table>
f0108b0d:	83 c4 10             	add    $0x10,%esp
f0108b10:	89 45 d8             	mov    %eax,-0x28(%ebp)
    	if(ptr_page_table_dest_ret != TABLE_IN_MEMORY)
f0108b13:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0108b17:	74 14                	je     f0108b2d <copy_paste_chunk+0xc4>
    	{
    		ptr_page_table_dest = create_page_table(page_directory,i);
f0108b19:	83 ec 08             	sub    $0x8,%esp
f0108b1c:	ff 75 ec             	pushl  -0x14(%ebp)
f0108b1f:	ff 75 08             	pushl  0x8(%ebp)
f0108b22:	e8 fb e0 ff ff       	call   f0106c22 <create_page_table>
f0108b27:	83 c4 10             	add    $0x10,%esp
f0108b2a:	89 45 c0             	mov    %eax,-0x40(%ebp)
    	}
    	ptr_frame_info_dest = get_frame_info(page_directory,i,&ptr_page_table_dest);
f0108b2d:	83 ec 04             	sub    $0x4,%esp
f0108b30:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0108b33:	50                   	push   %eax
f0108b34:	ff 75 ec             	pushl  -0x14(%ebp)
f0108b37:	ff 75 08             	pushl  0x8(%ebp)
f0108b3a:	e8 e2 e2 ff ff       	call   f0106e21 <get_frame_info>
f0108b3f:	83 c4 10             	add    $0x10,%esp
f0108b42:	89 45 e0             	mov    %eax,-0x20(%ebp)
    	get_page_table(page_directory,source_ptr,&ptr_page_table_source);
f0108b45:	83 ec 04             	sub    $0x4,%esp
f0108b48:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f0108b4b:	50                   	push   %eax
f0108b4c:	ff 75 f0             	pushl  -0x10(%ebp)
f0108b4f:	ff 75 08             	pushl  0x8(%ebp)
f0108b52:	e8 75 df ff ff       	call   f0106acc <get_page_table>
f0108b57:	83 c4 10             	add    $0x10,%esp
    	int source_perm=source_perm=(ptr_page_table_source[PTX(source_ptr)] & PERM_USER);
f0108b5a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0108b5d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0108b60:	c1 ea 0c             	shr    $0xc,%edx
f0108b63:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108b69:	c1 e2 02             	shl    $0x2,%edx
f0108b6c:	01 d0                	add    %edx,%eax
f0108b6e:	8b 00                	mov    (%eax),%eax
f0108b70:	83 e0 04             	and    $0x4,%eax
f0108b73:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    	if(ptr_frame_info_dest == NULL)
f0108b76:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0108b7a:	75 64                	jne    f0108be0 <copy_paste_chunk+0x177>
    	{
    		struct FrameInfo* new_frames = NULL;
f0108b7c:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
    		allocate_frame(&new_frames);
f0108b83:	83 ec 0c             	sub    $0xc,%esp
f0108b86:	8d 45 bc             	lea    -0x44(%ebp),%eax
f0108b89:	50                   	push   %eax
f0108b8a:	e8 7e dd ff ff       	call   f010690d <allocate_frame>
f0108b8f:	83 c4 10             	add    $0x10,%esp
    		get_page_table(page_directory,source_ptr,&ptr_page_table_source);
f0108b92:	83 ec 04             	sub    $0x4,%esp
f0108b95:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f0108b98:	50                   	push   %eax
f0108b99:	ff 75 f0             	pushl  -0x10(%ebp)
f0108b9c:	ff 75 08             	pushl  0x8(%ebp)
f0108b9f:	e8 28 df ff ff       	call   f0106acc <get_page_table>
f0108ba4:	83 c4 10             	add    $0x10,%esp
    		int source_perm=source_perm=(ptr_page_table_source[PTX(source_ptr)] & PERM_USER);
f0108ba7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0108baa:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0108bad:	c1 ea 0c             	shr    $0xc,%edx
f0108bb0:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108bb6:	c1 e2 02             	shl    $0x2,%edx
f0108bb9:	01 d0                	add    %edx,%eax
f0108bbb:	8b 00                	mov    (%eax),%eax
f0108bbd:	83 e0 04             	and    $0x4,%eax
f0108bc0:	89 45 d0             	mov    %eax,-0x30(%ebp)
    		map_frame(page_directory,new_frames,i,source_perm|PERM_WRITEABLE);
f0108bc3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108bc6:	83 c8 02             	or     $0x2,%eax
f0108bc9:	89 c2                	mov    %eax,%edx
f0108bcb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0108bce:	52                   	push   %edx
f0108bcf:	ff 75 ec             	pushl  -0x14(%ebp)
f0108bd2:	50                   	push   %eax
f0108bd3:	ff 75 08             	pushl  0x8(%ebp)
f0108bd6:	e8 81 e1 ff ff       	call   f0106d5c <map_frame>
f0108bdb:	83 c4 10             	add    $0x10,%esp
f0108bde:	eb 14                	jmp    f0108bf4 <copy_paste_chunk+0x18b>
    	}
    	else
    	{
    		pt_set_page_permissions(page_directory,i,source_perm,0);
f0108be0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108be3:	6a 00                	push   $0x0
f0108be5:	50                   	push   %eax
f0108be6:	ff 75 ec             	pushl  -0x14(%ebp)
f0108be9:	ff 75 08             	pushl  0x8(%ebp)
f0108bec:	e8 f0 f0 ff ff       	call   f0107ce1 <pt_set_page_permissions>
f0108bf1:	83 c4 10             	add    $0x10,%esp
    	}
    	source_ptr+=PAGE_SIZE;
f0108bf4:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
    			return -1;
    	}
    }

    uint32 source_ptr = source_va;
    for(uint32 i = dest_va; i < dest_va+size; i+=PAGE_SIZE)
f0108bfb:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f0108c02:	8b 55 10             	mov    0x10(%ebp),%edx
f0108c05:	8b 45 14             	mov    0x14(%ebp),%eax
f0108c08:	01 d0                	add    %edx,%eax
f0108c0a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108c0d:	0f 87 e8 fe ff ff    	ja     f0108afb <copy_paste_chunk+0x92>
    		pt_set_page_permissions(page_directory,i,source_perm,0);
    	}
    	source_ptr+=PAGE_SIZE;
    }

    uint32 source = source_va;
f0108c13:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108c16:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for(uint32 i = dest_va; i < dest_va+size; i++)
f0108c19:	8b 45 10             	mov    0x10(%ebp),%eax
f0108c1c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108c1f:	eb 1c                	jmp    f0108c3d <copy_paste_chunk+0x1d4>
    {
    	uint8 *pointer_source = (uint8*)source;
f0108c21:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108c24:	89 45 cc             	mov    %eax,-0x34(%ebp)
	    uint8 *pointer_dest = (uint8*)i;
f0108c27:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108c2a:	89 45 c8             	mov    %eax,-0x38(%ebp)
	    *pointer_dest = *pointer_source;
f0108c2d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108c30:	8a 10                	mov    (%eax),%dl
f0108c32:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0108c35:	88 10                	mov    %dl,(%eax)
	    source++;
f0108c37:	ff 45 e8             	incl   -0x18(%ebp)
    	}
    	source_ptr+=PAGE_SIZE;
    }

    uint32 source = source_va;
    for(uint32 i = dest_va; i < dest_va+size; i++)
f0108c3a:	ff 45 e4             	incl   -0x1c(%ebp)
f0108c3d:	8b 55 10             	mov    0x10(%ebp),%edx
f0108c40:	8b 45 14             	mov    0x14(%ebp),%eax
f0108c43:	01 d0                	add    %edx,%eax
f0108c45:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0108c48:	77 d7                	ja     f0108c21 <copy_paste_chunk+0x1b8>
	    uint8 *pointer_dest = (uint8*)i;
	    *pointer_dest = *pointer_source;
	    source++;
    }

   return 0;
f0108c4a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108c4f:	c9                   	leave  
f0108c50:	c3                   	ret    

f0108c51 <share_chunk>:
// 3) SHARE RANGE IN RAM:
//===============================
//This function should share the given size from dest_va with the source_va
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0108c51:	55                   	push   %ebp
f0108c52:	89 e5                	mov    %esp,%ebp
f0108c54:	83 ec 58             	sub    $0x58,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] share_chunk
	// Write your code here, remove the panic and write your code
	//panic("share_chunk() is not implemented yet...!!");

	uint32 source_en_va = source_va + size;
f0108c57:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108c5a:	8b 45 14             	mov    0x14(%ebp),%eax
f0108c5d:	01 d0                	add    %edx,%eax
f0108c5f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32 dest_en_va = dest_va + size;
f0108c62:	8b 55 10             	mov    0x10(%ebp),%edx
f0108c65:	8b 45 14             	mov    0x14(%ebp),%eax
f0108c68:	01 d0                	add    %edx,%eax
f0108c6a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	source_va = ROUNDDOWN(source_va, PAGE_SIZE);
f0108c6d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108c70:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108c73:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108c76:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108c7b:	89 45 0c             	mov    %eax,0xc(%ebp)
	dest_va = ROUNDDOWN(dest_va, PAGE_SIZE);
f0108c7e:	8b 45 10             	mov    0x10(%ebp),%eax
f0108c81:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0108c84:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108c87:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108c8c:	89 45 10             	mov    %eax,0x10(%ebp)
	source_en_va = ROUNDUP(source_en_va, PAGE_SIZE);
f0108c8f:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0108c96:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0108c99:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108c9c:	01 d0                	add    %edx,%eax
f0108c9e:	48                   	dec    %eax
f0108c9f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0108ca2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108ca5:	ba 00 00 00 00       	mov    $0x0,%edx
f0108caa:	f7 75 d8             	divl   -0x28(%ebp)
f0108cad:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108cb0:	29 d0                	sub    %edx,%eax
f0108cb2:	89 45 e8             	mov    %eax,-0x18(%ebp)
	dest_en_va = ROUNDUP(dest_en_va, PAGE_SIZE);
f0108cb5:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f0108cbc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0108cbf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108cc2:	01 d0                	add    %edx,%eax
f0108cc4:	48                   	dec    %eax
f0108cc5:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108cc8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108ccb:	ba 00 00 00 00       	mov    $0x0,%edx
f0108cd0:	f7 75 d0             	divl   -0x30(%ebp)
f0108cd3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108cd6:	29 d0                	sub    %edx,%eax
f0108cd8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 destva555555555 = dest_va;
f0108cdb:	8b 45 10             	mov    0x10(%ebp),%eax
f0108cde:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table_34an_elsource = NULL;
f0108ce1:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	uint32 *ptr_page_table_34an_eldestination = NULL;
f0108ce8:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
	uint32 *ptr_page_table3 = NULL;
f0108cef:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
	uint32 *ptra7a= NULL;
f0108cf6:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
	struct FrameInfo* Return_From_Destination = NULL;
f0108cfd:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	struct FrameInfo *ptr_frame_info = NULL;
f0108d04:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	uint32 newSize = dest_en_va - dest_va ;
f0108d0b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108d0e:	2b 45 10             	sub    0x10(%ebp),%eax
f0108d11:	89 45 c0             	mov    %eax,-0x40(%ebp)
	uint32 num_of_pages = newSize / PAGE_SIZE;
f0108d14:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0108d17:	c1 e8 0c             	shr    $0xc,%eax
f0108d1a:	89 45 bc             	mov    %eax,-0x44(%ebp)

	for(int counter = dest_va; counter < dest_en_va; counter+=PAGE_SIZE)
f0108d1d:	8b 45 10             	mov    0x10(%ebp),%eax
f0108d20:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108d23:	eb 36                	jmp    f0108d5b <share_chunk+0x10a>
	{
		Return_From_Destination = get_frame_info(page_directory, destva555555555, &ptra7a);
f0108d25:	83 ec 04             	sub    $0x4,%esp
f0108d28:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0108d2b:	50                   	push   %eax
f0108d2c:	ff 75 f4             	pushl  -0xc(%ebp)
f0108d2f:	ff 75 08             	pushl  0x8(%ebp)
f0108d32:	e8 ea e0 ff ff       	call   f0106e21 <get_frame_info>
f0108d37:	83 c4 10             	add    $0x10,%esp
f0108d3a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if(Return_From_Destination != NULL)
f0108d3d:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0108d41:	74 0a                	je     f0108d4d <share_chunk+0xfc>
			return -1;
f0108d43:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108d48:	e9 d4 00 00 00       	jmp    f0108e21 <share_chunk+0x1d0>
		destva555555555+=PAGE_SIZE;
f0108d4d:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
	struct FrameInfo* Return_From_Destination = NULL;
	struct FrameInfo *ptr_frame_info = NULL;
	uint32 newSize = dest_en_va - dest_va ;
	uint32 num_of_pages = newSize / PAGE_SIZE;

	for(int counter = dest_va; counter < dest_en_va; counter+=PAGE_SIZE)
f0108d54:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0108d5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108d5e:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0108d61:	72 c2                	jb     f0108d25 <share_chunk+0xd4>
		if(Return_From_Destination != NULL)
			return -1;
		destva555555555+=PAGE_SIZE;
	}

	for(int counter = 0; counter < num_of_pages; counter++)
f0108d63:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0108d6a:	e9 a1 00 00 00       	jmp    f0108e10 <share_chunk+0x1bf>
	{
		get_page_table(page_directory, dest_va, &ptr_page_table_34an_eldestination);
f0108d6f:	83 ec 04             	sub    $0x4,%esp
f0108d72:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0108d75:	50                   	push   %eax
f0108d76:	ff 75 10             	pushl  0x10(%ebp)
f0108d79:	ff 75 08             	pushl  0x8(%ebp)
f0108d7c:	e8 4b dd ff ff       	call   f0106acc <get_page_table>
f0108d81:	83 c4 10             	add    $0x10,%esp

		if (ptr_page_table_34an_eldestination == NULL)
f0108d84:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108d87:	85 c0                	test   %eax,%eax
f0108d89:	75 14                	jne    f0108d9f <share_chunk+0x14e>
			ptr_page_table_34an_eldestination = create_page_table(page_directory, dest_va);
f0108d8b:	83 ec 08             	sub    $0x8,%esp
f0108d8e:	ff 75 10             	pushl  0x10(%ebp)
f0108d91:	ff 75 08             	pushl  0x8(%ebp)
f0108d94:	e8 89 de ff ff       	call   f0106c22 <create_page_table>
f0108d99:	83 c4 10             	add    $0x10,%esp
f0108d9c:	89 45 b0             	mov    %eax,-0x50(%ebp)

		get_page_table(page_directory, source_va, &ptr_page_table_34an_elsource);
f0108d9f:	83 ec 04             	sub    $0x4,%esp
f0108da2:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0108da5:	50                   	push   %eax
f0108da6:	ff 75 0c             	pushl  0xc(%ebp)
f0108da9:	ff 75 08             	pushl  0x8(%ebp)
f0108dac:	e8 1b dd ff ff       	call   f0106acc <get_page_table>
f0108db1:	83 c4 10             	add    $0x10,%esp

		int El_permissions_bta3t_elsource = ptr_page_table_34an_elsource[PTX(source_va)] & 0XFFF;
f0108db4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108db7:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108dba:	c1 ea 0c             	shr    $0xc,%edx
f0108dbd:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108dc3:	c1 e2 02             	shl    $0x2,%edx
f0108dc6:	01 d0                	add    %edx,%eax
f0108dc8:	8b 00                	mov    (%eax),%eax
f0108dca:	25 ff 0f 00 00       	and    $0xfff,%eax
f0108dcf:	89 45 b8             	mov    %eax,-0x48(%ebp)

		ptr_frame_info = get_frame_info(page_directory, source_va, &ptr_page_table3);
f0108dd2:	83 ec 04             	sub    $0x4,%esp
f0108dd5:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0108dd8:	50                   	push   %eax
f0108dd9:	ff 75 0c             	pushl  0xc(%ebp)
f0108ddc:	ff 75 08             	pushl  0x8(%ebp)
f0108ddf:	e8 3d e0 ff ff       	call   f0106e21 <get_frame_info>
f0108de4:	83 c4 10             	add    $0x10,%esp
f0108de7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		map_frame(page_directory, ptr_frame_info, dest_va, perms);
f0108dea:	8b 45 18             	mov    0x18(%ebp),%eax
f0108ded:	50                   	push   %eax
f0108dee:	ff 75 10             	pushl  0x10(%ebp)
f0108df1:	ff 75 c4             	pushl  -0x3c(%ebp)
f0108df4:	ff 75 08             	pushl  0x8(%ebp)
f0108df7:	e8 60 df ff ff       	call   f0106d5c <map_frame>
f0108dfc:	83 c4 10             	add    $0x10,%esp

		source_va+=PAGE_SIZE;
f0108dff:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
		dest_va+=PAGE_SIZE;
f0108e06:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
		if(Return_From_Destination != NULL)
			return -1;
		destva555555555+=PAGE_SIZE;
	}

	for(int counter = 0; counter < num_of_pages; counter++)
f0108e0d:	ff 45 ec             	incl   -0x14(%ebp)
f0108e10:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108e13:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0108e16:	0f 82 53 ff ff ff    	jb     f0108d6f <share_chunk+0x11e>

		source_va+=PAGE_SIZE;
		dest_va+=PAGE_SIZE;
	}

	return 0;
f0108e1c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108e21:	c9                   	leave  
f0108e22:	c3                   	ret    

f0108e23 <allocate_chunk>:
// 4) ALLOCATE CHUNK IN RAM:
//===============================
//This function should allocate in RAM the given range [va, va+size)
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0108e23:	55                   	push   %ebp
f0108e24:	89 e5                	mov    %esp,%ebp
f0108e26:	83 ec 38             	sub    $0x38,%esp
	//[PROJECT MS2] [CHUNK OPERATIONS] allocate_chunk
	// Write your code here, remove the panic and write your code
	//panic("allocate_chunk() is not implemented yet...!!");
	uint32 sva = ROUNDDOWN(va,PAGE_SIZE);
f0108e29:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108e2c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108e2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108e32:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108e37:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32 eva = va + size;
f0108e3a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108e3d:	8b 45 10             	mov    0x10(%ebp),%eax
f0108e40:	01 d0                	add    %edx,%eax
f0108e42:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	eva = ROUNDUP(eva,PAGE_SIZE);
f0108e45:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0108e4c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0108e4f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108e52:	01 d0                	add    %edx,%eax
f0108e54:	48                   	dec    %eax
f0108e55:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0108e58:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108e5b:	ba 00 00 00 00       	mov    $0x0,%edx
f0108e60:	f7 75 e0             	divl   -0x20(%ebp)
f0108e63:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108e66:	29 d0                	sub    %edx,%eax
f0108e68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	struct FrameInfo* ptr = NULL;
f0108e6b:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
	uint32 *ptr_page_table = NULL;
f0108e72:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)

	for(uint32 i = sva; i < eva; i+=PAGE_SIZE)
f0108e79:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108e7c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108e7f:	eb 30                	jmp    f0108eb1 <allocate_chunk+0x8e>
	{
		ptr = get_frame_info(page_directory,i,&ptr_page_table);
f0108e81:	83 ec 04             	sub    $0x4,%esp
f0108e84:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108e87:	50                   	push   %eax
f0108e88:	ff 75 f4             	pushl  -0xc(%ebp)
f0108e8b:	ff 75 08             	pushl  0x8(%ebp)
f0108e8e:	e8 8e df ff ff       	call   f0106e21 <get_frame_info>
f0108e93:	83 c4 10             	add    $0x10,%esp
f0108e96:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if (ptr!= NULL)
f0108e99:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108e9c:	85 c0                	test   %eax,%eax
f0108e9e:	74 0a                	je     f0108eaa <allocate_chunk+0x87>
		{
			return -1;
f0108ea0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108ea5:	e9 88 00 00 00       	jmp    f0108f32 <allocate_chunk+0x10f>
	uint32 eva = va + size;
	eva = ROUNDUP(eva,PAGE_SIZE);
	struct FrameInfo* ptr = NULL;
	uint32 *ptr_page_table = NULL;

	for(uint32 i = sva; i < eva; i+=PAGE_SIZE)
f0108eaa:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108eb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108eb4:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0108eb7:	72 c8                	jb     f0108e81 <allocate_chunk+0x5e>
		{
			return -1;
		}
	}

	for(uint32 i = sva; i<eva; i+=PAGE_SIZE)
f0108eb9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108ebc:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108ebf:	eb 64                	jmp    f0108f25 <allocate_chunk+0x102>
	{
		int ret = get_page_table(page_directory, i, &ptr_page_table);
f0108ec1:	83 ec 04             	sub    $0x4,%esp
f0108ec4:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0108ec7:	50                   	push   %eax
f0108ec8:	ff 75 f0             	pushl  -0x10(%ebp)
f0108ecb:	ff 75 08             	pushl  0x8(%ebp)
f0108ece:	e8 f9 db ff ff       	call   f0106acc <get_page_table>
f0108ed3:	83 c4 10             	add    $0x10,%esp
f0108ed6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		if (ret ==TABLE_NOT_EXIST)
f0108ed9:	83 7d d8 01          	cmpl   $0x1,-0x28(%ebp)
f0108edd:	75 11                	jne    f0108ef0 <allocate_chunk+0xcd>
		{
			create_page_table(page_directory, i);
f0108edf:	83 ec 08             	sub    $0x8,%esp
f0108ee2:	ff 75 f0             	pushl  -0x10(%ebp)
f0108ee5:	ff 75 08             	pushl  0x8(%ebp)
f0108ee8:	e8 35 dd ff ff       	call   f0106c22 <create_page_table>
f0108eed:	83 c4 10             	add    $0x10,%esp
		}
		allocate_frame(&ptr);
f0108ef0:	83 ec 0c             	sub    $0xc,%esp
f0108ef3:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0108ef6:	50                   	push   %eax
f0108ef7:	e8 11 da ff ff       	call   f010690d <allocate_frame>
f0108efc:	83 c4 10             	add    $0x10,%esp
		map_frame(page_directory,ptr,i,perms);
f0108eff:	8b 55 14             	mov    0x14(%ebp),%edx
f0108f02:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108f05:	52                   	push   %edx
f0108f06:	ff 75 f0             	pushl  -0x10(%ebp)
f0108f09:	50                   	push   %eax
f0108f0a:	ff 75 08             	pushl  0x8(%ebp)
f0108f0d:	e8 4a de ff ff       	call   f0106d5c <map_frame>
f0108f12:	83 c4 10             	add    $0x10,%esp
		ptr->va = i;
f0108f15:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108f18:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0108f1b:	89 50 0c             	mov    %edx,0xc(%eax)
		{
			return -1;
		}
	}

	for(uint32 i = sva; i<eva; i+=PAGE_SIZE)
f0108f1e:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0108f25:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108f28:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0108f2b:	72 94                	jb     f0108ec1 <allocate_chunk+0x9e>
		allocate_frame(&ptr);
		map_frame(page_directory,ptr,i,perms);
		ptr->va = i;
	}

	return 0;
f0108f2d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108f32:	c9                   	leave  
f0108f33:	c3                   	ret    

f0108f34 <calculate_allocated_space>:
/*BONUS*/
//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0108f34:	55                   	push   %ebp
f0108f35:	89 e5                	mov    %esp,%ebp
f0108f37:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_allocated_space
	// Write your code here, remove the panic and write your code
	//panic("calculate_allocated_space() is not implemented yet...!!");
	sva=ROUNDDOWN(sva,PAGE_SIZE);
f0108f3a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108f3d:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108f40:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108f43:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108f48:	89 45 0c             	mov    %eax,0xc(%ebp)
	eva=ROUNDUP(eva,PAGE_SIZE);
f0108f4b:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0108f52:	8b 55 10             	mov    0x10(%ebp),%edx
f0108f55:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108f58:	01 d0                	add    %edx,%eax
f0108f5a:	48                   	dec    %eax
f0108f5b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108f5e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108f61:	ba 00 00 00 00       	mov    $0x0,%edx
f0108f66:	f7 75 e4             	divl   -0x1c(%ebp)
f0108f69:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108f6c:	29 d0                	sub    %edx,%eax
f0108f6e:	89 45 10             	mov    %eax,0x10(%ebp)
	struct FrameInfo* ptr=NULL;
f0108f71:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	uint32 *ptr_page_table = NULL;
f0108f78:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	uint32 *second_ptr=NULL;
f0108f7f:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
	uint32 *glopal_ptr=NULL;
f0108f86:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(uint32 i=sva;i<eva;i+=PAGE_SIZE)
f0108f8d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108f90:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108f93:	eb 3e                	jmp    f0108fd3 <calculate_allocated_space+0x9f>
	{
		get_page_table(page_directory, i, &second_ptr);
f0108f95:	83 ec 04             	sub    $0x4,%esp
f0108f98:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0108f9b:	50                   	push   %eax
f0108f9c:	ff 75 f0             	pushl  -0x10(%ebp)
f0108f9f:	ff 75 08             	pushl  0x8(%ebp)
f0108fa2:	e8 25 db ff ff       	call   f0106acc <get_page_table>
f0108fa7:	83 c4 10             	add    $0x10,%esp
	    if((second_ptr!=glopal_ptr && second_ptr!=NULL))
f0108faa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108fad:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108fb0:	74 14                	je     f0108fc6 <calculate_allocated_space+0x92>
f0108fb2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108fb5:	85 c0                	test   %eax,%eax
f0108fb7:	74 0d                	je     f0108fc6 <calculate_allocated_space+0x92>
	    {
	    	(*num_tables)++;
f0108fb9:	8b 45 14             	mov    0x14(%ebp),%eax
f0108fbc:	8b 00                	mov    (%eax),%eax
f0108fbe:	8d 50 01             	lea    0x1(%eax),%edx
f0108fc1:	8b 45 14             	mov    0x14(%ebp),%eax
f0108fc4:	89 10                	mov    %edx,(%eax)
	    }
		 glopal_ptr=second_ptr;
f0108fc6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108fc9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	eva=ROUNDUP(eva,PAGE_SIZE);
	struct FrameInfo* ptr=NULL;
	uint32 *ptr_page_table = NULL;
	uint32 *second_ptr=NULL;
	uint32 *glopal_ptr=NULL;
	for(uint32 i=sva;i<eva;i+=PAGE_SIZE)
f0108fcc:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0108fd3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108fd6:	3b 45 10             	cmp    0x10(%ebp),%eax
f0108fd9:	72 ba                	jb     f0108f95 <calculate_allocated_space+0x61>
	    {
	    	(*num_tables)++;
	    }
		 glopal_ptr=second_ptr;
	}
	for(uint32 i=sva;i<eva;i+=PAGE_SIZE)
f0108fdb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108fde:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108fe1:	eb 32                	jmp    f0109015 <calculate_allocated_space+0xe1>
	{
		ptr=get_frame_info(page_directory,i,&ptr_page_table);
f0108fe3:	83 ec 04             	sub    $0x4,%esp
f0108fe6:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0108fe9:	50                   	push   %eax
f0108fea:	ff 75 ec             	pushl  -0x14(%ebp)
f0108fed:	ff 75 08             	pushl  0x8(%ebp)
f0108ff0:	e8 2c de ff ff       	call   f0106e21 <get_frame_info>
f0108ff5:	83 c4 10             	add    $0x10,%esp
f0108ff8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if (ptr != NULL)
f0108ffb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0108fff:	74 0d                	je     f010900e <calculate_allocated_space+0xda>
		{
			(*num_pages)++;
f0109001:	8b 45 18             	mov    0x18(%ebp),%eax
f0109004:	8b 00                	mov    (%eax),%eax
f0109006:	8d 50 01             	lea    0x1(%eax),%edx
f0109009:	8b 45 18             	mov    0x18(%ebp),%eax
f010900c:	89 10                	mov    %edx,(%eax)
	    {
	    	(*num_tables)++;
	    }
		 glopal_ptr=second_ptr;
	}
	for(uint32 i=sva;i<eva;i+=PAGE_SIZE)
f010900e:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f0109015:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109018:	3b 45 10             	cmp    0x10(%ebp),%eax
f010901b:	72 c6                	jb     f0108fe3 <calculate_allocated_space+0xaf>
		if (ptr != NULL)
		{
			(*num_pages)++;
		}
	}
}
f010901d:	90                   	nop
f010901e:	c9                   	leave  
f010901f:	c3                   	ret    

f0109020 <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocation size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0109020:	55                   	push   %ebp
f0109021:	89 e5                	mov    %esp,%ebp
f0109023:	83 ec 48             	sub    $0x48,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_required_frames
	// Write your code here, remove the panic and write your code
	//panic("calculate_required_frames() is not implemented yet...!!");

	uint32 svm = ROUNDDOWN(sva,PAGE_SIZE);
f0109026:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109029:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010902c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010902f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109034:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 eva = sva+size;
f0109037:	8b 55 0c             	mov    0xc(%ebp),%edx
f010903a:	8b 45 10             	mov    0x10(%ebp),%eax
f010903d:	01 d0                	add    %edx,%eax
f010903f:	89 45 d8             	mov    %eax,-0x28(%ebp)
	eva = ROUNDUP(eva,PAGE_SIZE);
f0109042:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0109049:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010904c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010904f:	01 d0                	add    %edx,%eax
f0109051:	48                   	dec    %eax
f0109052:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0109055:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109058:	ba 00 00 00 00       	mov    $0x0,%edx
f010905d:	f7 75 d4             	divl   -0x2c(%ebp)
f0109060:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109063:	29 d0                	sub    %edx,%eax
f0109065:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 num_pages = 0;
f0109068:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 num_tables = 0;
f010906f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 h = 0;
f0109076:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	uint32 glopal_ptr = svm;
f010907d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109080:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = NULL;
f0109083:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	struct FrameInfo* ptr = NULL;
f010908a:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)

	for(uint32 i = svm; i < eva; i+=PAGE_SIZE)
f0109091:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109094:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0109097:	eb 28                	jmp    f01090c1 <calculate_required_frames+0xa1>
	{
		ptr = get_frame_info(page_directory, i, &ptr_page_table);
f0109099:	83 ec 04             	sub    $0x4,%esp
f010909c:	8d 45 bc             	lea    -0x44(%ebp),%eax
f010909f:	50                   	push   %eax
f01090a0:	ff 75 e8             	pushl  -0x18(%ebp)
f01090a3:	ff 75 08             	pushl  0x8(%ebp)
f01090a6:	e8 76 dd ff ff       	call   f0106e21 <get_frame_info>
f01090ab:	83 c4 10             	add    $0x10,%esp
f01090ae:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if(ptr == NULL)
f01090b1:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f01090b5:	75 03                	jne    f01090ba <calculate_required_frames+0x9a>
		{
			num_pages++;
f01090b7:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 h = 0;
	uint32 glopal_ptr = svm;
	uint32 *ptr_page_table = NULL;
	struct FrameInfo* ptr = NULL;

	for(uint32 i = svm; i < eva; i+=PAGE_SIZE)
f01090ba:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
f01090c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01090c4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01090c7:	72 d0                	jb     f0109099 <calculate_required_frames+0x79>
		{
			num_pages++;
		}
	}

	int ret1 = get_page_table(page_directory, glopal_ptr, &ptr_page_table);
f01090c9:	83 ec 04             	sub    $0x4,%esp
f01090cc:	8d 45 bc             	lea    -0x44(%ebp),%eax
f01090cf:	50                   	push   %eax
f01090d0:	ff 75 ec             	pushl  -0x14(%ebp)
f01090d3:	ff 75 08             	pushl  0x8(%ebp)
f01090d6:	e8 f1 d9 ff ff       	call   f0106acc <get_page_table>
f01090db:	83 c4 10             	add    $0x10,%esp
f01090de:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	if (ret1 == TABLE_NOT_EXIST)
f01090e1:	83 7d c4 01          	cmpl   $0x1,-0x3c(%ebp)
f01090e5:	75 03                	jne    f01090ea <calculate_required_frames+0xca>
	{
		num_tables++;
f01090e7:	ff 45 f0             	incl   -0x10(%ebp)
	}

	for(uint32 i = svm; i < eva; i+=PAGE_SIZE)
f01090ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01090ed:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01090f0:	eb 40                	jmp    f0109132 <calculate_required_frames+0x112>
	{
		int ret = get_page_table(page_directory, i, &ptr_page_table);
f01090f2:	83 ec 04             	sub    $0x4,%esp
f01090f5:	8d 45 bc             	lea    -0x44(%ebp),%eax
f01090f8:	50                   	push   %eax
f01090f9:	ff 75 e4             	pushl  -0x1c(%ebp)
f01090fc:	ff 75 08             	pushl  0x8(%ebp)
f01090ff:	e8 c8 d9 ff ff       	call   f0106acc <get_page_table>
f0109104:	83 c4 10             	add    $0x10,%esp
f0109107:	89 45 c0             	mov    %eax,-0x40(%ebp)
		if(ret==TABLE_NOT_EXIST && PDX(i)!=PDX(glopal_ptr))
f010910a:	83 7d c0 01          	cmpl   $0x1,-0x40(%ebp)
f010910e:	75 15                	jne    f0109125 <calculate_required_frames+0x105>
f0109110:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109113:	c1 e8 16             	shr    $0x16,%eax
f0109116:	89 c2                	mov    %eax,%edx
f0109118:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010911b:	c1 e8 16             	shr    $0x16,%eax
f010911e:	39 c2                	cmp    %eax,%edx
f0109120:	74 03                	je     f0109125 <calculate_required_frames+0x105>
		{
			num_tables++;
f0109122:	ff 45 f0             	incl   -0x10(%ebp)
		}
		glopal_ptr=i;
f0109125:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109128:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if (ret1 == TABLE_NOT_EXIST)
	{
		num_tables++;
	}

	for(uint32 i = svm; i < eva; i+=PAGE_SIZE)
f010912b:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
f0109132:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109135:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0109138:	72 b8                	jb     f01090f2 <calculate_required_frames+0xd2>
			num_tables++;
		}
		glopal_ptr=i;
	}

	return (num_pages+num_tables);
f010913a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010913d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109140:	01 d0                	add    %edx,%eax
}
f0109142:	c9                   	leave  
f0109143:	c3                   	ret    

f0109144 <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0109144:	55                   	push   %ebp
f0109145:	89 e5                	mov    %esp,%ebp
	// Write your code here, remove the panic and write your code
	//panic("allocate_user_mem() is not implemented yet...!!");
}
f0109147:	90                   	nop
f0109148:	5d                   	pop    %ebp
f0109149:	c3                   	ret    

f010914a <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f010914a:	55                   	push   %ebp
f010914b:	89 e5                	mov    %esp,%ebp
f010914d:	83 ec 38             	sub    $0x38,%esp

	//TODO: [PROJECT MS3] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	//panic("free_user_mem() is not implemented yet...!!");

	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f0109150:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109153:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109156:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109159:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010915e:	89 45 0c             	mov    %eax,0xc(%ebp)
//	cprintf ("va at user kernel side = %x \n", virtual_address);
	size = ROUNDUP(size, PAGE_SIZE);
f0109161:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0109168:	8b 55 10             	mov    0x10(%ebp),%edx
f010916b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010916e:	01 d0                	add    %edx,%eax
f0109170:	48                   	dec    %eax
f0109171:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0109174:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109177:	ba 00 00 00 00       	mov    $0x0,%edx
f010917c:	f7 75 e0             	divl   -0x20(%ebp)
f010917f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109182:	29 d0                	sub    %edx,%eax
f0109184:	89 45 10             	mov    %eax,0x10(%ebp)
	uint32 *ptr_page_table = NULL;
f0109187:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	int flag = 0;
f010918e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
//		unmap_frame(e->env_page_directory, i);
//		env_page_ws_invalidate(e, i);
//	}

//	int pg=0;
	for(int j = 0; j < e->page_WS_max_size; j++)
f0109195:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010919c:	eb 7b                	jmp    f0109219 <free_user_mem+0xcf>
	{
		uint32 va = env_page_ws_get_virtual_address(e, j);
f010919e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01091a1:	83 ec 08             	sub    $0x8,%esp
f01091a4:	50                   	push   %eax
f01091a5:	ff 75 08             	pushl  0x8(%ebp)
f01091a8:	e8 e3 ef ff ff       	call   f0108190 <env_page_ws_get_virtual_address>
f01091ad:	83 c4 10             	add    $0x10,%esp
f01091b0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 ret = env_page_ws_is_entry_empty(e, j);
f01091b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01091b6:	83 ec 08             	sub    $0x8,%esp
f01091b9:	50                   	push   %eax
f01091ba:	ff 75 08             	pushl  0x8(%ebp)
f01091bd:	e8 58 f0 ff ff       	call   f010821a <env_page_ws_is_entry_empty>
f01091c2:	83 c4 10             	add    $0x10,%esp
f01091c5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if (ret == 0)
f01091c8:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01091cc:	75 48                	jne    f0109216 <free_user_mem+0xcc>
		{
//			cprintf("vaaaaaaaaaaa %x \n", va);
			if(va >= virtual_address && va < virtual_address + size)
f01091ce:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01091d1:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01091d4:	72 40                	jb     f0109216 <free_user_mem+0xcc>
f01091d6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01091d9:	8b 45 10             	mov    0x10(%ebp),%eax
f01091dc:	01 d0                	add    %edx,%eax
f01091de:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01091e1:	76 33                	jbe    f0109216 <free_user_mem+0xcc>
			{
//				cprintf ("all virtual adresses = %x \n", va);
				e->page_last_WS_index = j;
f01091e3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01091e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01091e9:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
				unmap_frame(e->env_page_directory, va);
f01091ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01091f2:	8b 40 5c             	mov    0x5c(%eax),%eax
f01091f5:	83 ec 08             	sub    $0x8,%esp
f01091f8:	ff 75 d8             	pushl  -0x28(%ebp)
f01091fb:	50                   	push   %eax
f01091fc:	e8 90 dc ff ff       	call   f0106e91 <unmap_frame>
f0109201:	83 c4 10             	add    $0x10,%esp
				env_page_ws_clear_entry(e, j);
f0109204:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109207:	83 ec 08             	sub    $0x8,%esp
f010920a:	50                   	push   %eax
f010920b:	ff 75 08             	pushl  0x8(%ebp)
f010920e:	e8 06 ef ff ff       	call   f0108119 <env_page_ws_clear_entry>
f0109213:	83 c4 10             	add    $0x10,%esp
//		unmap_frame(e->env_page_directory, i);
//		env_page_ws_invalidate(e, i);
//	}

//	int pg=0;
	for(int j = 0; j < e->page_WS_max_size; j++)
f0109216:	ff 45 f0             	incl   -0x10(%ebp)
f0109219:	8b 45 08             	mov    0x8(%ebp),%eax
f010921c:	8b 50 74             	mov    0x74(%eax),%edx
f010921f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109222:	39 c2                	cmp    %eax,%edx
f0109224:	0f 87 74 ff ff ff    	ja     f010919e <free_user_mem+0x54>
			}
		}
	}

//	int pg_tb=0;
	for(uint32 i = virtual_address; i < virtual_address + size; i+=4096)
f010922a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010922d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0109230:	e9 9c 00 00 00       	jmp    f01092d1 <free_user_mem+0x187>
	{
		pf_remove_env_page(e, i);
f0109235:	83 ec 08             	sub    $0x8,%esp
f0109238:	ff 75 ec             	pushl  -0x14(%ebp)
f010923b:	ff 75 08             	pushl  0x8(%ebp)
f010923e:	e8 cf a8 ff ff       	call   f0103b12 <pf_remove_env_page>
f0109243:	83 c4 10             	add    $0x10,%esp

		int ret = get_page_table(e->env_page_directory, i, &ptr_page_table);
f0109246:	8b 45 08             	mov    0x8(%ebp),%eax
f0109249:	8b 40 5c             	mov    0x5c(%eax),%eax
f010924c:	83 ec 04             	sub    $0x4,%esp
f010924f:	8d 55 cc             	lea    -0x34(%ebp),%edx
f0109252:	52                   	push   %edx
f0109253:	ff 75 ec             	pushl  -0x14(%ebp)
f0109256:	50                   	push   %eax
f0109257:	e8 70 d8 ff ff       	call   f0106acc <get_page_table>
f010925c:	83 c4 10             	add    $0x10,%esp
f010925f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if(ret == TABLE_IN_MEMORY)
f0109262:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
f0109266:	75 5b                	jne    f01092c3 <free_user_mem+0x179>
		{
			for(int j = 0; j < 1024; j++)
f0109268:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f010926f:	eb 1d                	jmp    f010928e <free_user_mem+0x144>
			{
				if(ptr_page_table[j] != 0)
f0109271:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109274:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0109277:	c1 e2 02             	shl    $0x2,%edx
f010927a:	01 d0                	add    %edx,%eax
f010927c:	8b 00                	mov    (%eax),%eax
f010927e:	85 c0                	test   %eax,%eax
f0109280:	74 09                	je     f010928b <free_user_mem+0x141>
				{
					flag = 1;
f0109282:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
					break;
f0109289:	eb 0c                	jmp    f0109297 <free_user_mem+0x14d>
		pf_remove_env_page(e, i);

		int ret = get_page_table(e->env_page_directory, i, &ptr_page_table);
		if(ret == TABLE_IN_MEMORY)
		{
			for(int j = 0; j < 1024; j++)
f010928b:	ff 45 e8             	incl   -0x18(%ebp)
f010928e:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
f0109295:	7e da                	jle    f0109271 <free_user_mem+0x127>
				{
					flag = 1;
					break;
				}
			}
			if(flag == 0)
f0109297:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010929b:	75 26                	jne    f01092c3 <free_user_mem+0x179>
			{
				kfree((void *)ptr_page_table);
f010929d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01092a0:	83 ec 0c             	sub    $0xc,%esp
f01092a3:	50                   	push   %eax
f01092a4:	e8 70 e8 ff ff       	call   f0107b19 <kfree>
f01092a9:	83 c4 10             	add    $0x10,%esp
				e->env_page_directory[PDX(i)] = 0;
f01092ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01092af:	8b 40 5c             	mov    0x5c(%eax),%eax
f01092b2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01092b5:	c1 ea 16             	shr    $0x16,%edx
f01092b8:	c1 e2 02             	shl    $0x2,%edx
f01092bb:	01 d0                	add    %edx,%eax
f01092bd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//				pg_tb++;
			}
		}
		flag = 0;
f01092c3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			}
		}
	}

//	int pg_tb=0;
	for(uint32 i = virtual_address; i < virtual_address + size; i+=4096)
f01092ca:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f01092d1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01092d4:	8b 45 10             	mov    0x10(%ebp),%eax
f01092d7:	01 d0                	add    %edx,%eax
f01092d9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01092dc:	0f 87 53 ff ff ff    	ja     f0109235 <free_user_mem+0xeb>

	//This function should:
	//1. Free ALL pages of the given range from the Page File
	//2. Free ONLY pages that are resident in the working set from the memory
	//3. Removes ONLY the empty page tables (i.e. not used) (no pages are mapped in the table)
}
f01092e2:	90                   	nop
f01092e3:	c9                   	leave  
f01092e4:	c3                   	ret    

f01092e5 <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f01092e5:	55                   	push   %ebp
f01092e6:	89 e5                	mov    %esp,%ebp
f01092e8:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f01092eb:	83 ec 04             	sub    $0x4,%esp
f01092ee:	68 60 67 13 f0       	push   $0xf0136760
f01092f3:	68 a6 01 00 00       	push   $0x1a6
f01092f8:	68 9d 67 13 f0       	push   $0xf013679d
f01092fd:	e8 03 6f ff ff       	call   f0100205 <_panic>

f0109302 <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f0109302:	55                   	push   %ebp
f0109303:	89 e5                	mov    %esp,%ebp
f0109305:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0109308:	83 ec 04             	sub    $0x4,%esp
f010930b:	68 bc 67 13 f0       	push   $0xf01367bc
f0109310:	68 b6 01 00 00       	push   $0x1b6
f0109315:	68 9d 67 13 f0       	push   $0xf013679d
f010931a:	e8 e6 6e ff ff       	call   f0100205 <_panic>

f010931f <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010931f:	55                   	push   %ebp
f0109320:	89 e5                	mov    %esp,%ebp
f0109322:	57                   	push   %edi
f0109323:	56                   	push   %esi
f0109324:	53                   	push   %ebx
f0109325:	81 ec ec 00 00 00    	sub    $0xec,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f010932b:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0109332:	83 ec 0c             	sub    $0xc,%esp
f0109335:	ff 75 08             	pushl  0x8(%ebp)
f0109338:	e8 0b 22 00 00       	call   f010b548 <get_user_program_info>
f010933d:	83 c4 10             	add    $0x10,%esp
f0109340:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0109343:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0109347:	75 0a                	jne    f0109353 <env_create+0x34>
f0109349:	b8 00 00 00 00       	mov    $0x0,%eax
f010934e:	e9 cd 0b 00 00       	jmp    f0109f20 <env_create+0xc01>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0109353:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109356:	8b 40 08             	mov    0x8(%eax),%eax
f0109359:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f010935c:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%ebp)
f0109363:	00 00 00 
	if(allocate_environment(&e) < 0)
f0109366:	83 ec 0c             	sub    $0xc,%esp
f0109369:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010936f:	50                   	push   %eax
f0109370:	e8 d3 0e 00 00       	call   f010a248 <allocate_environment>
f0109375:	83 c4 10             	add    $0x10,%esp
f0109378:	85 c0                	test   %eax,%eax
f010937a:	79 0a                	jns    f0109386 <env_create+0x67>
	{
		return 0;
f010937c:	b8 00 00 00 00       	mov    $0x0,%eax
f0109381:	e9 9a 0b 00 00       	jmp    f0109f20 <env_create+0xc01>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0109386:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109389:	8b 00                	mov    (%eax),%eax
f010938b:	83 ec 0c             	sub    $0xc,%esp
f010938e:	50                   	push   %eax
f010938f:	e8 d3 86 02 00       	call   f0131a67 <strlen>
f0109394:	83 c4 10             	add    $0x10,%esp
f0109397:	83 f8 3f             	cmp    $0x3f,%eax
f010939a:	7f 20                	jg     f01093bc <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f010939c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010939f:	8b 00                	mov    (%eax),%eax
f01093a1:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01093a7:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f01093ad:	83 ec 08             	sub    $0x8,%esp
f01093b0:	50                   	push   %eax
f01093b1:	52                   	push   %edx
f01093b2:	e8 ff 86 02 00       	call   f0131ab6 <strcpy>
f01093b7:	83 c4 10             	add    $0x10,%esp
f01093ba:	eb 20                	jmp    f01093dc <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f01093bc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01093bf:	8b 00                	mov    (%eax),%eax
f01093c1:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01093c7:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f01093cd:	83 ec 04             	sub    $0x4,%esp
f01093d0:	6a 3f                	push   $0x3f
f01093d2:	50                   	push   %eax
f01093d3:	52                   	push   %edx
f01093d4:	e8 0b 87 02 00       	call   f0131ae4 <strncpy>
f01093d9:	83 c4 10             	add    $0x10,%esp
	//REMEMBER: "allocate_frame" should always return a free frame
	uint32* ptr_user_page_directory;
	unsigned int phys_user_page_directory;
#if USE_KHEAP
	{
		ptr_user_page_directory = create_user_directory();
f01093dc:	e8 6d 0f 00 00       	call   f010a34e <create_user_directory>
f01093e1:	89 45 b0             	mov    %eax,-0x50(%ebp)
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
f01093e4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01093e7:	83 ec 0c             	sub    $0xc,%esp
f01093ea:	50                   	push   %eax
f01093eb:	e8 5b e8 ff ff       	call   f0107c4b <kheap_physical_address>
f01093f0:	83 c4 10             	add    $0x10,%esp
f01093f3:	89 45 ac             	mov    %eax,-0x54(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f01093f6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01093fc:	8b 55 0c             	mov    0xc(%ebp),%edx
f01093ff:	89 50 74             	mov    %edx,0x74(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109402:	83 ec 0c             	sub    $0xc,%esp
f0109405:	6a 02                	push   $0x2
f0109407:	e8 f3 4d 00 00       	call   f010e1ff <isPageReplacmentAlgorithmLRU>
f010940c:	83 c4 10             	add    $0x10,%esp
f010940f:	85 c0                	test   %eax,%eax
f0109411:	74 21                	je     f0109434 <env_create+0x115>
	{
		e->SecondListSize = LRU_second_list_size;
f0109413:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109419:	8b 55 10             	mov    0x10(%ebp),%edx
f010941c:	89 90 ec 05 00 00    	mov    %edx,0x5ec(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f0109422:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109428:	8b 55 0c             	mov    0xc(%ebp),%edx
f010942b:	2b 55 10             	sub    0x10(%ebp),%edx
f010942e:	89 90 e8 05 00 00    	mov    %edx,0x5e8(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0109434:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0109438:	75 12                	jne    f010944c <env_create+0x12d>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f010943a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109440:	c7 80 a0 05 00 00 0a 	movl   $0xa,0x5a0(%eax)
f0109447:	00 00 00 
f010944a:	eb 0f                	jmp    f010945b <env_create+0x13c>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f010944c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109452:	8b 55 14             	mov    0x14(%ebp),%edx
f0109455:	89 90 a0 05 00 00    	mov    %edx,0x5a0(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f010945b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109461:	83 ec 04             	sub    $0x4,%esp
f0109464:	ff 75 ac             	pushl  -0x54(%ebp)
f0109467:	ff 75 b0             	pushl  -0x50(%ebp)
f010946a:	50                   	push   %eax
f010946b:	e8 fa 15 00 00       	call   f010aa6a <initialize_environment>
f0109470:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0109473:	0f 20 d8             	mov    %cr3,%eax
f0109476:	89 45 a0             	mov    %eax,-0x60(%ebp)
	return val;
f0109479:	8b 45 a0             	mov    -0x60(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f010947c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	lcr3(e->env_cr3) ;
f010947f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109485:	8b 40 60             	mov    0x60(%eax),%eax
f0109488:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010948e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0109494:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0109497:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f010949e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f01094a5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01094ab:	8b 40 74             	mov    0x74(%eax),%eax
f01094ae:	48                   	dec    %eax
f01094af:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f01094b2:	c7 85 48 ff ff ff ff 	movl   $0xffffffff,-0xb8(%ebp)
f01094b9:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f01094bc:	8d 85 08 ff ff ff    	lea    -0xf8(%ebp),%eax
f01094c2:	83 ec 08             	sub    $0x8,%esp
f01094c5:	ff 75 b8             	pushl  -0x48(%ebp)
f01094c8:	50                   	push   %eax
f01094c9:	e8 af 1d 00 00       	call   f010b27d <PROGRAM_SEGMENT_FIRST>
f01094ce:	83 c4 0c             	add    $0xc,%esp
f01094d1:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01094d7:	8d 95 08 ff ff ff    	lea    -0xf8(%ebp),%edx
f01094dd:	b9 05 00 00 00       	mov    $0x5,%ecx
f01094e2:	89 c7                	mov    %eax,%edi
f01094e4:	89 d6                	mov    %edx,%esi
f01094e6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01094e8:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01094ee:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01094f1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01094f4:	8b 40 10             	mov    0x10(%eax),%eax
f01094f7:	83 f8 ff             	cmp    $0xffffffff,%eax
f01094fa:	75 07                	jne    f0109503 <env_create+0x1e4>
f01094fc:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0109503:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109506:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109509:	e9 15 03 00 00       	jmp    f0109823 <env_create+0x504>
	{
		segment_counter++;
f010950e:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f0109511:	c7 85 30 ff ff ff 00 	movl   $0x0,-0xd0(%ebp)
f0109518:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f010951b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109521:	83 ec 0c             	sub    $0xc,%esp
f0109524:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f010952a:	52                   	push   %edx
f010952b:	ff 75 dc             	pushl  -0x24(%ebp)
f010952e:	8d 95 30 ff ff ff    	lea    -0xd0(%ebp),%edx
f0109534:	52                   	push   %edx
f0109535:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109538:	50                   	push   %eax
f0109539:	e8 4b 0e 00 00       	call   f010a389 <program_segment_alloc_map_copy_workingset>
f010953e:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0109541:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0109547:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f010954a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010954d:	8b 00                	mov    (%eax),%eax
f010954f:	89 45 9c             	mov    %eax,-0x64(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0109552:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109555:	8b 40 0c             	mov    0xc(%eax),%eax
f0109558:	89 45 98             	mov    %eax,-0x68(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f010955b:	8b 45 98             	mov    -0x68(%ebp),%eax
f010955e:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0109561:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0109564:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109569:	89 45 90             	mov    %eax,-0x70(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f010956c:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0109573:	8b 55 98             	mov    -0x68(%ebp),%edx
f0109576:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0109579:	01 d0                	add    %edx,%eax
f010957b:	48                   	dec    %eax
f010957c:	89 45 88             	mov    %eax,-0x78(%ebp)
f010957f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0109582:	ba 00 00 00 00       	mov    $0x0,%edx
f0109587:	f7 75 8c             	divl   -0x74(%ebp)
f010958a:	8b 45 88             	mov    -0x78(%ebp),%eax
f010958d:	29 d0                	sub    %edx,%eax
f010958f:	89 45 84             	mov    %eax,-0x7c(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f0109592:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109595:	2b 45 90             	sub    -0x70(%ebp),%eax
f0109598:	89 45 80             	mov    %eax,-0x80(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f010959b:	a1 00 b9 85 f0       	mov    0xf085b900,%eax
f01095a0:	83 ec 04             	sub    $0x4,%esp
f01095a3:	68 00 10 00 00       	push   $0x1000
f01095a8:	6a 00                	push   $0x0
f01095aa:	50                   	push   %eax
f01095ab:	e8 a5 86 02 00       	call   f0131c55 <memset>
f01095b0:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f01095b3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01095b6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f01095b9:	8b 15 00 b9 85 f0    	mov    0xf085b900,%edx
f01095bf:	8b 45 80             	mov    -0x80(%ebp),%eax
f01095c2:	01 d0                	add    %edx,%eax
f01095c4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f01095c7:	8b 45 98             	mov    -0x68(%ebp),%eax
f01095ca:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01095cd:	eb 13                	jmp    f01095e2 <env_create+0x2c3>
		{
			*dst_ptr = *src_ptr ;
f01095cf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01095d2:	8a 10                	mov    (%eax),%dl
f01095d4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01095d7:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f01095d9:	ff 45 cc             	incl   -0x34(%ebp)
f01095dc:	ff 45 d4             	incl   -0x2c(%ebp)
f01095df:	ff 45 d0             	incl   -0x30(%ebp)
f01095e2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01095e5:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01095e8:	72 e5                	jb     f01095cf <env_create+0x2b0>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f01095ea:	8b 15 00 b9 85 f0    	mov    0xf085b900,%edx
f01095f0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095f6:	83 ec 04             	sub    $0x4,%esp
f01095f9:	52                   	push   %edx
f01095fa:	ff 75 90             	pushl  -0x70(%ebp)
f01095fd:	50                   	push   %eax
f01095fe:	e8 2d a1 ff ff       	call   f0103730 <pf_add_env_page>
f0109603:	83 c4 10             	add    $0x10,%esp
f0109606:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109609:	75 17                	jne    f0109622 <env_create+0x303>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f010960b:	83 ec 04             	sub    $0x4,%esp
f010960e:	68 e8 67 13 f0       	push   $0xf01367e8
f0109613:	68 e1 00 00 00       	push   $0xe1
f0109618:	68 2d 68 13 f0       	push   $0xf013682d
f010961d:	e8 e3 6b ff ff       	call   f0100205 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0109622:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109625:	8b 50 04             	mov    0x4(%eax),%edx
f0109628:	8b 45 98             	mov    -0x68(%ebp),%eax
f010962b:	01 d0                	add    %edx,%eax
f010962d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0109633:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0109639:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010963e:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f0109644:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109647:	8b 50 04             	mov    0x4(%eax),%edx
f010964a:	8b 45 98             	mov    -0x68(%ebp),%eax
f010964d:	01 d0                	add    %edx,%eax
f010964f:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0109655:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0109658:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010965b:	eb 43                	jmp    f01096a0 <env_create+0x381>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f010965d:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0109660:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109666:	83 ec 04             	sub    $0x4,%esp
f0109669:	ff 75 d4             	pushl  -0x2c(%ebp)
f010966c:	52                   	push   %edx
f010966d:	50                   	push   %eax
f010966e:	e8 bd a0 ff ff       	call   f0103730 <pf_add_env_page>
f0109673:	83 c4 10             	add    $0x10,%esp
f0109676:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109679:	75 17                	jne    f0109692 <env_create+0x373>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f010967b:	83 ec 04             	sub    $0x4,%esp
f010967e:	68 e8 67 13 f0       	push   $0xf01367e8
f0109683:	68 ee 00 00 00       	push   $0xee
f0109688:	68 2d 68 13 f0       	push   $0xf013682d
f010968d:	e8 73 6b ff ff       	call   f0100205 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0109692:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0109699:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f01096a0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01096a3:	3b 85 78 ff ff ff    	cmp    -0x88(%ebp),%eax
f01096a9:	72 b2                	jb     f010965d <env_create+0x33e>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f01096ab:	a1 00 b9 85 f0       	mov    0xf085b900,%eax
f01096b0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f01096b3:	83 ec 04             	sub    $0x4,%esp
f01096b6:	68 00 10 00 00       	push   $0x1000
f01096bb:	6a 00                	push   $0x0
f01096bd:	ff 75 d0             	pushl  -0x30(%ebp)
f01096c0:	e8 90 85 02 00       	call   f0131c55 <memset>
f01096c5:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f01096c8:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01096ce:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01096d1:	eb 13                	jmp    f01096e6 <env_create+0x3c7>
		{
			*dst_ptr = *src_ptr;
f01096d3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01096d6:	8a 10                	mov    (%eax),%dl
f01096d8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01096db:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f01096dd:	ff 45 cc             	incl   -0x34(%ebp)
f01096e0:	ff 45 d4             	incl   -0x2c(%ebp)
f01096e3:	ff 45 d0             	incl   -0x30(%ebp)
f01096e6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01096e9:	3b 85 74 ff ff ff    	cmp    -0x8c(%ebp),%eax
f01096ef:	72 e2                	jb     f01096d3 <env_create+0x3b4>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f01096f1:	8b 15 00 b9 85 f0    	mov    0xf085b900,%edx
f01096f7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01096fd:	83 ec 04             	sub    $0x4,%esp
f0109700:	52                   	push   %edx
f0109701:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0109707:	50                   	push   %eax
f0109708:	e8 23 a0 ff ff       	call   f0103730 <pf_add_env_page>
f010970d:	83 c4 10             	add    $0x10,%esp
f0109710:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109713:	75 17                	jne    f010972c <env_create+0x40d>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109715:	83 ec 04             	sub    $0x4,%esp
f0109718:	68 e8 67 13 f0       	push   $0xf01367e8
f010971d:	68 fd 00 00 00       	push   $0xfd
f0109722:	68 2d 68 13 f0       	push   $0xf013682d
f0109727:	e8 d9 6a ff ff       	call   f0100205 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f010972c:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0109733:	10 00 00 
f0109736:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109739:	8b 50 04             	mov    0x4(%eax),%edx
f010973c:	8b 45 98             	mov    -0x68(%ebp),%eax
f010973f:	01 c2                	add    %eax,%edx
f0109741:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0109747:	01 d0                	add    %edx,%eax
f0109749:	48                   	dec    %eax
f010974a:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0109750:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0109756:	ba 00 00 00 00       	mov    $0x0,%edx
f010975b:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0109761:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0109767:	29 d0                	sub    %edx,%eax
f0109769:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f010976c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010976f:	8b 50 08             	mov    0x8(%eax),%edx
f0109772:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109775:	01 d0                	add    %edx,%eax
f0109777:	2b 45 c8             	sub    -0x38(%ebp),%eax
f010977a:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0109780:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0109787:	eb 41                	jmp    f01097ca <env_create+0x4ab>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f0109789:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010978f:	83 ec 04             	sub    $0x4,%esp
f0109792:	6a 01                	push   $0x1
f0109794:	ff 75 c8             	pushl  -0x38(%ebp)
f0109797:	50                   	push   %eax
f0109798:	e8 62 9e ff ff       	call   f01035ff <pf_add_empty_env_page>
f010979d:	83 c4 10             	add    $0x10,%esp
f01097a0:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01097a3:	75 17                	jne    f01097bc <env_create+0x49d>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01097a5:	83 ec 04             	sub    $0x4,%esp
f01097a8:	68 e8 67 13 f0       	push   $0xf01367e8
f01097ad:	68 0a 01 00 00       	push   $0x10a
f01097b2:	68 2d 68 13 f0       	push   $0xf013682d
f01097b7:	e8 49 6a ff ff       	call   f0100205 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f01097bc:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f01097c3:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f01097ca:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01097d1:	10 00 00 
f01097d4:	8b 95 68 ff ff ff    	mov    -0x98(%ebp),%edx
f01097da:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01097e0:	01 d0                	add    %edx,%eax
f01097e2:	48                   	dec    %eax
f01097e3:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01097e9:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01097ef:	ba 00 00 00 00       	mov    $0x0,%edx
f01097f4:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01097fa:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0109800:	29 d0                	sub    %edx,%eax
f0109802:	89 c2                	mov    %eax,%edx
f0109804:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109807:	39 c2                	cmp    %eax,%edx
f0109809:	0f 87 7a ff ff ff    	ja     f0109789 <env_create+0x46a>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f010980f:	83 ec 08             	sub    $0x8,%esp
f0109812:	ff 75 b8             	pushl  -0x48(%ebp)
f0109815:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109818:	e8 55 19 00 00       	call   f010b172 <PROGRAM_SEGMENT_NEXT>
f010981d:	83 c4 10             	add    $0x10,%esp
f0109820:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109823:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0109827:	0f 85 e1 fc ff ff    	jne    f010950e <env_create+0x1ef>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f010982d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f0109834:	e9 9d 00 00 00       	jmp    f01098d6 <env_create+0x5b7>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f0109839:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010983f:	8b 48 78             	mov    0x78(%eax),%ecx
f0109842:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0109845:	89 d0                	mov    %edx,%eax
f0109847:	01 c0                	add    %eax,%eax
f0109849:	01 d0                	add    %edx,%eax
f010984b:	c1 e0 03             	shl    $0x3,%eax
f010984e:	01 c8                	add    %ecx,%eax
f0109850:	8a 40 04             	mov    0x4(%eax),%al
f0109853:	84 c0                	test   %al,%al
f0109855:	75 7c                	jne    f01098d3 <env_create+0x5b4>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0109857:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010985d:	8b 48 78             	mov    0x78(%eax),%ecx
f0109860:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0109863:	89 d0                	mov    %edx,%eax
f0109865:	01 c0                	add    %eax,%eax
f0109867:	01 d0                	add    %edx,%eax
f0109869:	c1 e0 03             	shl    $0x3,%eax
f010986c:	01 c8                	add    %ecx,%eax
f010986e:	8b 00                	mov    (%eax),%eax
f0109870:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f0109876:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010987c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010987f:	83 ec 04             	sub    $0x4,%esp
f0109882:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f0109888:	52                   	push   %edx
f0109889:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
f010988f:	50                   	push   %eax
f0109890:	e8 37 d2 ff ff       	call   f0106acc <get_page_table>
f0109895:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f0109898:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f010989e:	8b 95 5c ff ff ff    	mov    -0xa4(%ebp),%edx
f01098a4:	c1 ea 0c             	shr    $0xc,%edx
f01098a7:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01098ad:	c1 e2 02             	shl    $0x2,%edx
f01098b0:	01 d0                	add    %edx,%eax
f01098b2:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f01098b8:	8b 8d 5c ff ff ff    	mov    -0xa4(%ebp),%ecx
f01098be:	c1 e9 0c             	shr    $0xc,%ecx
f01098c1:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f01098c7:	c1 e1 02             	shl    $0x2,%ecx
f01098ca:	01 ca                	add    %ecx,%edx
f01098cc:	8b 12                	mov    (%edx),%edx
f01098ce:	83 e2 bf             	and    $0xffffffbf,%edx
f01098d1:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f01098d3:	ff 45 c4             	incl   -0x3c(%ebp)
f01098d6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098dc:	8b 50 74             	mov    0x74(%eax),%edx
f01098df:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01098e2:	39 c2                	cmp    %eax,%edx
f01098e4:	0f 87 4f ff ff ff    	ja     f0109839 <env_create+0x51a>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f01098ea:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01098ed:	8b 50 08             	mov    0x8(%eax),%edx
f01098f0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098f6:	83 ec 08             	sub    $0x8,%esp
f01098f9:	52                   	push   %edx
f01098fa:	50                   	push   %eax
f01098fb:	e8 bc 16 00 00       	call   f010afbc <set_environment_entry_point>
f0109900:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f0109903:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109909:	c7 80 58 05 00 00 01 	movl   $0x1,0x558(%eax)
f0109910:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f0109913:	c7 85 58 ff ff ff 00 	movl   $0xeebfd000,-0xa8(%ebp)
f010991a:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f010991d:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109924:	e9 53 05 00 00       	jmp    f0109e7c <env_create+0xb5d>
	{
		struct FrameInfo *pp = NULL;
f0109929:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f0109930:	00 00 00 
		allocate_frame(&pp);
f0109933:	83 ec 0c             	sub    $0xc,%esp
f0109936:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010993c:	50                   	push   %eax
f010993d:	e8 cb cf ff ff       	call   f010690d <allocate_frame>
f0109942:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f0109945:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f010994b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109951:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109954:	6a 06                	push   $0x6
f0109956:	ff 75 c0             	pushl  -0x40(%ebp)
f0109959:	52                   	push   %edx
f010995a:	50                   	push   %eax
f010995b:	e8 b8 d5 ff ff       	call   f0106f18 <loadtime_map_frame>
f0109960:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f0109963:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0109966:	83 ec 04             	sub    $0x4,%esp
f0109969:	68 00 10 00 00       	push   $0x1000
f010996e:	6a 00                	push   $0x0
f0109970:	50                   	push   %eax
f0109971:	e8 df 82 02 00       	call   f0131c55 <memset>
f0109976:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f0109979:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010997f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109985:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010998b:	83 ec 04             	sub    $0x4,%esp
f010998e:	ff 75 c0             	pushl  -0x40(%ebp)
f0109991:	52                   	push   %edx
f0109992:	50                   	push   %eax
f0109993:	e8 e0 e6 ff ff       	call   f0108078 <env_page_ws_set_entry>
f0109998:	83 c4 10             	add    $0x10,%esp

			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010999b:	83 ec 0c             	sub    $0xc,%esp
f010999e:	6a 02                	push   $0x2
f01099a0:	e8 5a 48 00 00       	call   f010e1ff <isPageReplacmentAlgorithmLRU>
f01099a5:	83 c4 10             	add    $0x10,%esp
f01099a8:	85 c0                	test   %eax,%eax
f01099aa:	0f 84 6b 04 00 00    	je     f0109e1b <env_create+0xafc>
			{
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01099b0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099b6:	8b 48 78             	mov    0x78(%eax),%ecx
f01099b9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099bf:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f01099c5:	89 d0                	mov    %edx,%eax
f01099c7:	01 c0                	add    %eax,%eax
f01099c9:	01 d0                	add    %edx,%eax
f01099cb:	c1 e0 03             	shl    $0x3,%eax
f01099ce:	01 c8                	add    %ecx,%eax
f01099d0:	85 c0                	test   %eax,%eax
f01099d2:	75 17                	jne    f01099eb <env_create+0x6cc>
f01099d4:	83 ec 04             	sub    $0x4,%esp
f01099d7:	68 4a 68 13 f0       	push   $0xf013684a
f01099dc:	68 41 01 00 00       	push   $0x141
f01099e1:	68 2d 68 13 f0       	push   $0xf013682d
f01099e6:	e8 1a 68 ff ff       	call   f0100205 <_panic>
f01099eb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099f1:	8b 48 78             	mov    0x78(%eax),%ecx
f01099f4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099fa:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109a00:	89 d0                	mov    %edx,%eax
f0109a02:	01 c0                	add    %eax,%eax
f0109a04:	01 d0                	add    %edx,%eax
f0109a06:	c1 e0 03             	shl    $0x3,%eax
f0109a09:	01 c8                	add    %ecx,%eax
f0109a0b:	8b 40 10             	mov    0x10(%eax),%eax
f0109a0e:	85 c0                	test   %eax,%eax
f0109a10:	74 4b                	je     f0109a5d <env_create+0x73e>
f0109a12:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a18:	8b 48 78             	mov    0x78(%eax),%ecx
f0109a1b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a21:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109a27:	89 d0                	mov    %edx,%eax
f0109a29:	01 c0                	add    %eax,%eax
f0109a2b:	01 d0                	add    %edx,%eax
f0109a2d:	c1 e0 03             	shl    $0x3,%eax
f0109a30:	01 c8                	add    %ecx,%eax
f0109a32:	8b 50 10             	mov    0x10(%eax),%edx
f0109a35:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a3b:	8b 58 78             	mov    0x78(%eax),%ebx
f0109a3e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a44:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109a4a:	89 c8                	mov    %ecx,%eax
f0109a4c:	01 c0                	add    %eax,%eax
f0109a4e:	01 c8                	add    %ecx,%eax
f0109a50:	c1 e0 03             	shl    $0x3,%eax
f0109a53:	01 d8                	add    %ebx,%eax
f0109a55:	8b 40 14             	mov    0x14(%eax),%eax
f0109a58:	89 42 14             	mov    %eax,0x14(%edx)
f0109a5b:	eb 2f                	jmp    f0109a8c <env_create+0x76d>
f0109a5d:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109a63:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a69:	8b 58 78             	mov    0x78(%eax),%ebx
f0109a6c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a72:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109a78:	89 c8                	mov    %ecx,%eax
f0109a7a:	01 c0                	add    %eax,%eax
f0109a7c:	01 c8                	add    %ecx,%eax
f0109a7e:	c1 e0 03             	shl    $0x3,%eax
f0109a81:	01 d8                	add    %ebx,%eax
f0109a83:	8b 40 14             	mov    0x14(%eax),%eax
f0109a86:	89 82 bc 05 00 00    	mov    %eax,0x5bc(%edx)
f0109a8c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a92:	8b 48 78             	mov    0x78(%eax),%ecx
f0109a95:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a9b:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109aa1:	89 d0                	mov    %edx,%eax
f0109aa3:	01 c0                	add    %eax,%eax
f0109aa5:	01 d0                	add    %edx,%eax
f0109aa7:	c1 e0 03             	shl    $0x3,%eax
f0109aaa:	01 c8                	add    %ecx,%eax
f0109aac:	8b 40 14             	mov    0x14(%eax),%eax
f0109aaf:	85 c0                	test   %eax,%eax
f0109ab1:	74 4b                	je     f0109afe <env_create+0x7df>
f0109ab3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ab9:	8b 48 78             	mov    0x78(%eax),%ecx
f0109abc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ac2:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109ac8:	89 d0                	mov    %edx,%eax
f0109aca:	01 c0                	add    %eax,%eax
f0109acc:	01 d0                	add    %edx,%eax
f0109ace:	c1 e0 03             	shl    $0x3,%eax
f0109ad1:	01 c8                	add    %ecx,%eax
f0109ad3:	8b 50 14             	mov    0x14(%eax),%edx
f0109ad6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109adc:	8b 58 78             	mov    0x78(%eax),%ebx
f0109adf:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ae5:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109aeb:	89 c8                	mov    %ecx,%eax
f0109aed:	01 c0                	add    %eax,%eax
f0109aef:	01 c8                	add    %ecx,%eax
f0109af1:	c1 e0 03             	shl    $0x3,%eax
f0109af4:	01 d8                	add    %ebx,%eax
f0109af6:	8b 40 10             	mov    0x10(%eax),%eax
f0109af9:	89 42 10             	mov    %eax,0x10(%edx)
f0109afc:	eb 2f                	jmp    f0109b2d <env_create+0x80e>
f0109afe:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109b04:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b0a:	8b 58 78             	mov    0x78(%eax),%ebx
f0109b0d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b13:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109b19:	89 c8                	mov    %ecx,%eax
f0109b1b:	01 c0                	add    %eax,%eax
f0109b1d:	01 c8                	add    %ecx,%eax
f0109b1f:	c1 e0 03             	shl    $0x3,%eax
f0109b22:	01 d8                	add    %ebx,%eax
f0109b24:	8b 40 10             	mov    0x10(%eax),%eax
f0109b27:	89 82 b8 05 00 00    	mov    %eax,0x5b8(%edx)
f0109b2d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b33:	8b 48 78             	mov    0x78(%eax),%ecx
f0109b36:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b3c:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109b42:	89 d0                	mov    %edx,%eax
f0109b44:	01 c0                	add    %eax,%eax
f0109b46:	01 d0                	add    %edx,%eax
f0109b48:	c1 e0 03             	shl    $0x3,%eax
f0109b4b:	01 c8                	add    %ecx,%eax
f0109b4d:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f0109b54:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b5a:	8b 48 78             	mov    0x78(%eax),%ecx
f0109b5d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b63:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109b69:	89 d0                	mov    %edx,%eax
f0109b6b:	01 c0                	add    %eax,%eax
f0109b6d:	01 d0                	add    %edx,%eax
f0109b6f:	c1 e0 03             	shl    $0x3,%eax
f0109b72:	01 c8                	add    %ecx,%eax
f0109b74:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109b7b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b81:	8b 90 c4 05 00 00    	mov    0x5c4(%eax),%edx
f0109b87:	4a                   	dec    %edx
f0109b88:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f0109b8e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b94:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f0109b9a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ba0:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f0109ba6:	39 c2                	cmp    %eax,%edx
f0109ba8:	0f 83 39 01 00 00    	jae    f0109ce7 <env_create+0x9c8>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109bae:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bb4:	8b 48 78             	mov    0x78(%eax),%ecx
f0109bb7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bbd:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109bc3:	89 d0                	mov    %edx,%eax
f0109bc5:	01 c0                	add    %eax,%eax
f0109bc7:	01 d0                	add    %edx,%eax
f0109bc9:	c1 e0 03             	shl    $0x3,%eax
f0109bcc:	01 c8                	add    %ecx,%eax
f0109bce:	85 c0                	test   %eax,%eax
f0109bd0:	75 17                	jne    f0109be9 <env_create+0x8ca>
f0109bd2:	83 ec 04             	sub    $0x4,%esp
f0109bd5:	68 68 68 13 f0       	push   $0xf0136868
f0109bda:	68 46 01 00 00       	push   $0x146
f0109bdf:	68 2d 68 13 f0       	push   $0xf013682d
f0109be4:	e8 1c 66 ff ff       	call   f0100205 <_panic>
f0109be9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bef:	8b 48 78             	mov    0x78(%eax),%ecx
f0109bf2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bf8:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109bfe:	89 d0                	mov    %edx,%eax
f0109c00:	01 c0                	add    %eax,%eax
f0109c02:	01 d0                	add    %edx,%eax
f0109c04:	c1 e0 03             	shl    $0x3,%eax
f0109c07:	01 c8                	add    %ecx,%eax
f0109c09:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109c0f:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f0109c15:	89 50 10             	mov    %edx,0x10(%eax)
f0109c18:	8b 40 10             	mov    0x10(%eax),%eax
f0109c1b:	85 c0                	test   %eax,%eax
f0109c1d:	74 31                	je     f0109c50 <env_create+0x931>
f0109c1f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c25:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f0109c2b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c31:	8b 58 78             	mov    0x78(%eax),%ebx
f0109c34:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c3a:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109c40:	89 c8                	mov    %ecx,%eax
f0109c42:	01 c0                	add    %eax,%eax
f0109c44:	01 c8                	add    %ecx,%eax
f0109c46:	c1 e0 03             	shl    $0x3,%eax
f0109c49:	01 d8                	add    %ebx,%eax
f0109c4b:	89 42 14             	mov    %eax,0x14(%edx)
f0109c4e:	eb 2c                	jmp    f0109c7c <env_create+0x95d>
f0109c50:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109c56:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c5c:	8b 58 78             	mov    0x78(%eax),%ebx
f0109c5f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c65:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109c6b:	89 c8                	mov    %ecx,%eax
f0109c6d:	01 c0                	add    %eax,%eax
f0109c6f:	01 c8                	add    %ecx,%eax
f0109c71:	c1 e0 03             	shl    $0x3,%eax
f0109c74:	01 d8                	add    %ebx,%eax
f0109c76:	89 82 cc 05 00 00    	mov    %eax,0x5cc(%edx)
f0109c7c:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109c82:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c88:	8b 58 78             	mov    0x78(%eax),%ebx
f0109c8b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c91:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109c97:	89 c8                	mov    %ecx,%eax
f0109c99:	01 c0                	add    %eax,%eax
f0109c9b:	01 c8                	add    %ecx,%eax
f0109c9d:	c1 e0 03             	shl    $0x3,%eax
f0109ca0:	01 d8                	add    %ebx,%eax
f0109ca2:	89 82 c8 05 00 00    	mov    %eax,0x5c8(%edx)
f0109ca8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109cae:	8b 48 78             	mov    0x78(%eax),%ecx
f0109cb1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109cb7:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109cbd:	89 d0                	mov    %edx,%eax
f0109cbf:	01 c0                	add    %eax,%eax
f0109cc1:	01 d0                	add    %edx,%eax
f0109cc3:	c1 e0 03             	shl    $0x3,%eax
f0109cc6:	01 c8                	add    %ecx,%eax
f0109cc8:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109ccf:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109cd5:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f0109cdb:	42                   	inc    %edx
f0109cdc:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f0109ce2:	e9 34 01 00 00       	jmp    f0109e1b <env_create+0xafc>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109ce7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ced:	8b 48 78             	mov    0x78(%eax),%ecx
f0109cf0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109cf6:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109cfc:	89 d0                	mov    %edx,%eax
f0109cfe:	01 c0                	add    %eax,%eax
f0109d00:	01 d0                	add    %edx,%eax
f0109d02:	c1 e0 03             	shl    $0x3,%eax
f0109d05:	01 c8                	add    %ecx,%eax
f0109d07:	85 c0                	test   %eax,%eax
f0109d09:	75 17                	jne    f0109d22 <env_create+0xa03>
f0109d0b:	83 ec 04             	sub    $0x4,%esp
f0109d0e:	68 68 68 13 f0       	push   $0xf0136868
f0109d13:	68 4a 01 00 00       	push   $0x14a
f0109d18:	68 2d 68 13 f0       	push   $0xf013682d
f0109d1d:	e8 e3 64 ff ff       	call   f0100205 <_panic>
f0109d22:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d28:	8b 48 78             	mov    0x78(%eax),%ecx
f0109d2b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d31:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109d37:	89 d0                	mov    %edx,%eax
f0109d39:	01 c0                	add    %eax,%eax
f0109d3b:	01 d0                	add    %edx,%eax
f0109d3d:	c1 e0 03             	shl    $0x3,%eax
f0109d40:	01 c8                	add    %ecx,%eax
f0109d42:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109d48:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f0109d4e:	89 50 10             	mov    %edx,0x10(%eax)
f0109d51:	8b 40 10             	mov    0x10(%eax),%eax
f0109d54:	85 c0                	test   %eax,%eax
f0109d56:	74 31                	je     f0109d89 <env_create+0xa6a>
f0109d58:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d5e:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f0109d64:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d6a:	8b 58 78             	mov    0x78(%eax),%ebx
f0109d6d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d73:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109d79:	89 c8                	mov    %ecx,%eax
f0109d7b:	01 c0                	add    %eax,%eax
f0109d7d:	01 c8                	add    %ecx,%eax
f0109d7f:	c1 e0 03             	shl    $0x3,%eax
f0109d82:	01 d8                	add    %ebx,%eax
f0109d84:	89 42 14             	mov    %eax,0x14(%edx)
f0109d87:	eb 2c                	jmp    f0109db5 <env_create+0xa96>
f0109d89:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109d8f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d95:	8b 58 78             	mov    0x78(%eax),%ebx
f0109d98:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d9e:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109da4:	89 c8                	mov    %ecx,%eax
f0109da6:	01 c0                	add    %eax,%eax
f0109da8:	01 c8                	add    %ecx,%eax
f0109daa:	c1 e0 03             	shl    $0x3,%eax
f0109dad:	01 d8                	add    %ebx,%eax
f0109daf:	89 82 dc 05 00 00    	mov    %eax,0x5dc(%edx)
f0109db5:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109dbb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109dc1:	8b 58 78             	mov    0x78(%eax),%ebx
f0109dc4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109dca:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109dd0:	89 c8                	mov    %ecx,%eax
f0109dd2:	01 c0                	add    %eax,%eax
f0109dd4:	01 c8                	add    %ecx,%eax
f0109dd6:	c1 e0 03             	shl    $0x3,%eax
f0109dd9:	01 d8                	add    %ebx,%eax
f0109ddb:	89 82 d8 05 00 00    	mov    %eax,0x5d8(%edx)
f0109de1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109de7:	8b 48 78             	mov    0x78(%eax),%ecx
f0109dea:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109df0:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109df6:	89 d0                	mov    %edx,%eax
f0109df8:	01 c0                	add    %eax,%eax
f0109dfa:	01 d0                	add    %edx,%eax
f0109dfc:	c1 e0 03             	shl    $0x3,%eax
f0109dff:	01 c8                	add    %ecx,%eax
f0109e01:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109e08:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e0e:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f0109e14:	42                   	inc    %edx
f0109e15:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
				}
			}
			e->page_last_WS_index ++;
f0109e1b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e21:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109e27:	42                   	inc    %edx
f0109e28:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f0109e2e:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109e34:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e3a:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0109e40:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109e46:	8b 5a 74             	mov    0x74(%edx),%ebx
f0109e49:	ba 00 00 00 00       	mov    $0x0,%edx
f0109e4e:	f7 f3                	div    %ebx
f0109e50:	89 d0                	mov    %edx,%eax
f0109e52:	89 81 2c 05 00 00    	mov    %eax,0x52c(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f0109e58:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e5e:	83 ec 04             	sub    $0x4,%esp
f0109e61:	6a 01                	push   $0x1
f0109e63:	ff 75 c0             	pushl  -0x40(%ebp)
f0109e66:	50                   	push   %eax
f0109e67:	e8 93 97 ff ff       	call   f01035ff <pf_add_empty_env_page>
f0109e6c:	83 c4 10             	add    $0x10,%esp
f0109e6f:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109e75:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f0109e7c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0109e7f:	3b 85 58 ff ff ff    	cmp    -0xa8(%ebp),%eax
f0109e85:	0f 83 9e fa ff ff    	jae    f0109929 <env_create+0x60a>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109e8b:	83 ec 0c             	sub    $0xc,%esp
f0109e8e:	6a 02                	push   $0x2
f0109e90:	e8 6a 43 00 00       	call   f010e1ff <isPageReplacmentAlgorithmLRU>
f0109e95:	83 c4 10             	add    $0x10,%esp
f0109e98:	85 c0                	test   %eax,%eax
f0109e9a:	74 72                	je     f0109f0e <env_create+0xbef>
	{
		struct WorkingSetElement * elm = NULL;
f0109e9c:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f0109ea3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ea9:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f0109eaf:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109eb2:	eb 2b                	jmp    f0109edf <env_create+0xbc0>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f0109eb4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0109eb7:	8b 10                	mov    (%eax),%edx
f0109eb9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ebf:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109ec2:	6a 01                	push   $0x1
f0109ec4:	6a 00                	push   $0x0
f0109ec6:	52                   	push   %edx
f0109ec7:	50                   	push   %eax
f0109ec8:	e8 14 de ff ff       	call   f0107ce1 <pt_set_page_permissions>
f0109ecd:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f0109ed0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ed6:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0109edc:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109edf:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ee5:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109ee9:	74 08                	je     f0109ef3 <env_create+0xbd4>
f0109eeb:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0109eee:	8b 52 10             	mov    0x10(%edx),%edx
f0109ef1:	eb 05                	jmp    f0109ef8 <env_create+0xbd9>
f0109ef3:	ba 00 00 00 00       	mov    $0x0,%edx
f0109ef8:	89 90 e0 05 00 00    	mov    %edx,0x5e0(%eax)
f0109efe:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0109f04:	85 c0                	test   %eax,%eax
f0109f06:	75 ac                	jne    f0109eb4 <env_create+0xb95>
f0109f08:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109f0c:	75 a6                	jne    f0109eb4 <env_create+0xb95>
f0109f0e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0109f11:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0109f14:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0109f17:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f0109f1a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
}
f0109f20:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0109f23:	5b                   	pop    %ebx
f0109f24:	5e                   	pop    %esi
f0109f25:	5f                   	pop    %edi
f0109f26:	5d                   	pop    %ebp
f0109f27:	c3                   	ret    

f0109f28 <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f0109f28:	55                   	push   %ebp
f0109f29:	89 e5                	mov    %esp,%ebp
f0109f2b:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f0109f2e:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f0109f33:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109f36:	74 25                	je     f0109f5d <env_run+0x35>
	{
		curenv = e ;
f0109f38:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f3b:	a3 74 af 85 f0       	mov    %eax,0xf085af74
		curenv->env_runs++ ;
f0109f40:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f0109f45:	8b 50 58             	mov    0x58(%eax),%edx
f0109f48:	42                   	inc    %edx
f0109f49:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f0109f4c:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f0109f51:	8b 40 60             	mov    0x60(%eax),%eax
f0109f54:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109f57:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109f5a:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f0109f5d:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f0109f62:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0109f69:	e8 6c a2 ff ff       	call   f01041da <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f0109f6e:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f0109f73:	83 ec 0c             	sub    $0xc,%esp
f0109f76:	50                   	push   %eax
f0109f77:	e8 0f 01 00 00       	call   f010a08b <env_pop_tf>

f0109f7c <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f0109f7c:	55                   	push   %ebp
f0109f7d:	89 e5                	mov    %esp,%ebp
f0109f7f:	83 ec 08             	sub    $0x8,%esp
	/********DON'T CHANGE THIS LINE***********/
#if USE_KHEAP
	unshare_pws_at_user_space(e);
f0109f82:	83 ec 0c             	sub    $0xc,%esp
f0109f85:	ff 75 08             	pushl  0x8(%ebp)
f0109f88:	e8 3e 11 00 00       	call   f010b0cb <unshare_pws_at_user_space>
f0109f8d:	83 c4 10             	add    $0x10,%esp
#endif
	/*****************************************/
	//TODO: [PROJECT MS3 - BONUS] [EXIT ENV] env_free
	// your code is here, remove the panic and write your code
	panic("env_free() is not implemented yet...!!");
f0109f90:	83 ec 04             	sub    $0x4,%esp
f0109f93:	68 8c 68 13 f0       	push   $0xf013688c
f0109f98:	68 9d 01 00 00       	push   $0x19d
f0109f9d:	68 2d 68 13 f0       	push   $0xf013682d
f0109fa2:	e8 5e 62 ff ff       	call   f0100205 <_panic>

f0109fa7 <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f0109fa7:	55                   	push   %ebp
f0109fa8:	89 e5                	mov    %esp,%ebp
f0109faa:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f0109fad:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f0109fb2:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109fb5:	83 ec 0c             	sub    $0xc,%esp
f0109fb8:	50                   	push   %eax
f0109fb9:	e8 ff b2 ff ff       	call   f01052bd <sched_exit_env>
f0109fbe:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f0109fc1:	e8 7b a7 ff ff       	call   f0104741 <fos_scheduler>

f0109fc6 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f0109fc6:	55                   	push   %ebp
f0109fc7:	89 e5                	mov    %esp,%ebp
f0109fc9:	53                   	push   %ebx
f0109fca:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f0109fcd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109fd1:	75 15                	jne    f0109fe8 <envid2env+0x22>
		*env_store = curenv;
f0109fd3:	8b 15 74 af 85 f0    	mov    0xf085af74,%edx
f0109fd9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109fdc:	89 10                	mov    %edx,(%eax)
		return 0;
f0109fde:	b8 00 00 00 00       	mov    $0x0,%eax
f0109fe3:	e9 9e 00 00 00       	jmp    f010a086 <envid2env+0xc0>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f0109fe8:	8b 1d 70 af 85 f0    	mov    0xf085af70,%ebx
f0109fee:	83 ec 0c             	sub    $0xc,%esp
f0109ff1:	68 b1 02 00 00       	push   $0x2b1
f0109ff6:	e8 de 67 02 00       	call   f01307d9 <nearest_pow2_ceil>
f0109ffb:	83 c4 10             	add    $0x10,%esp
f0109ffe:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a001:	8b 45 08             	mov    0x8(%ebp),%eax
f010a004:	21 c2                	and    %eax,%edx
f010a006:	89 d0                	mov    %edx,%eax
f010a008:	c1 e0 03             	shl    $0x3,%eax
f010a00b:	01 d0                	add    %edx,%eax
f010a00d:	01 c0                	add    %eax,%eax
f010a00f:	01 d0                	add    %edx,%eax
f010a011:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a018:	01 d0                	add    %edx,%eax
f010a01a:	c1 e0 04             	shl    $0x4,%eax
f010a01d:	01 d8                	add    %ebx,%eax
f010a01f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f010a022:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a025:	8b 40 54             	mov    0x54(%eax),%eax
f010a028:	85 c0                	test   %eax,%eax
f010a02a:	74 0b                	je     f010a037 <envid2env+0x71>
f010a02c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a02f:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a032:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a035:	74 10                	je     f010a047 <envid2env+0x81>
		*env_store = 0;
f010a037:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a03a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f010a040:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f010a045:	eb 3f                	jmp    f010a086 <envid2env+0xc0>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f010a047:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010a04b:	74 2c                	je     f010a079 <envid2env+0xb3>
f010a04d:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010a052:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010a055:	74 22                	je     f010a079 <envid2env+0xb3>
f010a057:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a05a:	8b 50 50             	mov    0x50(%eax),%edx
f010a05d:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010a062:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a065:	39 c2                	cmp    %eax,%edx
f010a067:	74 10                	je     f010a079 <envid2env+0xb3>
		*env_store = 0;
f010a069:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a06c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f010a072:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f010a077:	eb 0d                	jmp    f010a086 <envid2env+0xc0>
	}

	*env_store = e;
f010a079:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a07c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a07f:	89 10                	mov    %edx,(%eax)
	return 0;
f010a081:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a086:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a089:	c9                   	leave  
f010a08a:	c3                   	ret    

f010a08b <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f010a08b:	55                   	push   %ebp
f010a08c:	89 e5                	mov    %esp,%ebp
f010a08e:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f010a091:	8b 65 08             	mov    0x8(%ebp),%esp
f010a094:	61                   	popa   
f010a095:	07                   	pop    %es
f010a096:	1f                   	pop    %ds
f010a097:	83 c4 08             	add    $0x8,%esp
f010a09a:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f010a09b:	83 ec 04             	sub    $0x4,%esp
f010a09e:	68 b3 68 13 f0       	push   $0xf01368b3
f010a0a3:	68 fd 01 00 00       	push   $0x1fd
f010a0a8:	68 2d 68 13 f0       	push   $0xf013682d
f010a0ad:	e8 53 61 ff ff       	call   f0100205 <_panic>

f010a0b2 <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f010a0b2:	55                   	push   %ebp
f010a0b3:	89 e5                	mov    %esp,%ebp
f010a0b5:	53                   	push   %ebx
f010a0b6:	83 ec 14             	sub    $0x14,%esp
	int iEnv = NENV-1;
f010a0b9:	c7 45 f4 b0 02 00 00 	movl   $0x2b0,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f010a0c0:	e9 73 01 00 00       	jmp    f010a238 <env_init+0x186>
	{
		envs[iEnv].env_status = ENV_FREE;
f010a0c5:	8b 0d 70 af 85 f0    	mov    0xf085af70,%ecx
f010a0cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a0ce:	89 d0                	mov    %edx,%eax
f010a0d0:	c1 e0 03             	shl    $0x3,%eax
f010a0d3:	01 d0                	add    %edx,%eax
f010a0d5:	01 c0                	add    %eax,%eax
f010a0d7:	01 d0                	add    %edx,%eax
f010a0d9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a0e0:	01 d0                	add    %edx,%eax
f010a0e2:	c1 e0 04             	shl    $0x4,%eax
f010a0e5:	01 c8                	add    %ecx,%eax
f010a0e7:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f010a0ee:	8b 0d 70 af 85 f0    	mov    0xf085af70,%ecx
f010a0f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a0f7:	89 d0                	mov    %edx,%eax
f010a0f9:	c1 e0 03             	shl    $0x3,%eax
f010a0fc:	01 d0                	add    %edx,%eax
f010a0fe:	01 c0                	add    %eax,%eax
f010a100:	01 d0                	add    %edx,%eax
f010a102:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a109:	01 d0                	add    %edx,%eax
f010a10b:	c1 e0 04             	shl    $0x4,%eax
f010a10e:	01 c8                	add    %ecx,%eax
f010a110:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f010a117:	8b 0d 70 af 85 f0    	mov    0xf085af70,%ecx
f010a11d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a120:	89 d0                	mov    %edx,%eax
f010a122:	c1 e0 03             	shl    $0x3,%eax
f010a125:	01 d0                	add    %edx,%eax
f010a127:	01 c0                	add    %eax,%eax
f010a129:	01 d0                	add    %edx,%eax
f010a12b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a132:	01 d0                	add    %edx,%eax
f010a134:	c1 e0 04             	shl    $0x4,%eax
f010a137:	01 c8                	add    %ecx,%eax
f010a139:	85 c0                	test   %eax,%eax
f010a13b:	75 17                	jne    f010a154 <env_init+0xa2>
f010a13d:	83 ec 04             	sub    $0x4,%esp
f010a140:	68 68 68 13 f0       	push   $0xf0136868
f010a145:	68 19 02 00 00       	push   $0x219
f010a14a:	68 2d 68 13 f0       	push   $0xf013682d
f010a14f:	e8 b1 60 ff ff       	call   f0100205 <_panic>
f010a154:	8b 0d 70 af 85 f0    	mov    0xf085af70,%ecx
f010a15a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a15d:	89 d0                	mov    %edx,%eax
f010a15f:	c1 e0 03             	shl    $0x3,%eax
f010a162:	01 d0                	add    %edx,%eax
f010a164:	01 c0                	add    %eax,%eax
f010a166:	01 d0                	add    %edx,%eax
f010a168:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a16f:	01 d0                	add    %edx,%eax
f010a171:	c1 e0 04             	shl    $0x4,%eax
f010a174:	01 c8                	add    %ecx,%eax
f010a176:	8b 15 78 af 85 f0    	mov    0xf085af78,%edx
f010a17c:	89 50 44             	mov    %edx,0x44(%eax)
f010a17f:	8b 40 44             	mov    0x44(%eax),%eax
f010a182:	85 c0                	test   %eax,%eax
f010a184:	74 2d                	je     f010a1b3 <env_init+0x101>
f010a186:	8b 0d 78 af 85 f0    	mov    0xf085af78,%ecx
f010a18c:	8b 1d 70 af 85 f0    	mov    0xf085af70,%ebx
f010a192:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a195:	89 d0                	mov    %edx,%eax
f010a197:	c1 e0 03             	shl    $0x3,%eax
f010a19a:	01 d0                	add    %edx,%eax
f010a19c:	01 c0                	add    %eax,%eax
f010a19e:	01 d0                	add    %edx,%eax
f010a1a0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a1a7:	01 d0                	add    %edx,%eax
f010a1a9:	c1 e0 04             	shl    $0x4,%eax
f010a1ac:	01 d8                	add    %ebx,%eax
f010a1ae:	89 41 48             	mov    %eax,0x48(%ecx)
f010a1b1:	eb 27                	jmp    f010a1da <env_init+0x128>
f010a1b3:	8b 0d 70 af 85 f0    	mov    0xf085af70,%ecx
f010a1b9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a1bc:	89 d0                	mov    %edx,%eax
f010a1be:	c1 e0 03             	shl    $0x3,%eax
f010a1c1:	01 d0                	add    %edx,%eax
f010a1c3:	01 c0                	add    %eax,%eax
f010a1c5:	01 d0                	add    %edx,%eax
f010a1c7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a1ce:	01 d0                	add    %edx,%eax
f010a1d0:	c1 e0 04             	shl    $0x4,%eax
f010a1d3:	01 c8                	add    %ecx,%eax
f010a1d5:	a3 7c af 85 f0       	mov    %eax,0xf085af7c
f010a1da:	8b 0d 70 af 85 f0    	mov    0xf085af70,%ecx
f010a1e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a1e3:	89 d0                	mov    %edx,%eax
f010a1e5:	c1 e0 03             	shl    $0x3,%eax
f010a1e8:	01 d0                	add    %edx,%eax
f010a1ea:	01 c0                	add    %eax,%eax
f010a1ec:	01 d0                	add    %edx,%eax
f010a1ee:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a1f5:	01 d0                	add    %edx,%eax
f010a1f7:	c1 e0 04             	shl    $0x4,%eax
f010a1fa:	01 c8                	add    %ecx,%eax
f010a1fc:	a3 78 af 85 f0       	mov    %eax,0xf085af78
f010a201:	8b 0d 70 af 85 f0    	mov    0xf085af70,%ecx
f010a207:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a20a:	89 d0                	mov    %edx,%eax
f010a20c:	c1 e0 03             	shl    $0x3,%eax
f010a20f:	01 d0                	add    %edx,%eax
f010a211:	01 c0                	add    %eax,%eax
f010a213:	01 d0                	add    %edx,%eax
f010a215:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a21c:	01 d0                	add    %edx,%eax
f010a21e:	c1 e0 04             	shl    $0x4,%eax
f010a221:	01 c8                	add    %ecx,%eax
f010a223:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a22a:	a1 84 af 85 f0       	mov    0xf085af84,%eax
f010a22f:	40                   	inc    %eax
f010a230:	a3 84 af 85 f0       	mov    %eax,0xf085af84
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f010a235:	ff 4d f4             	decl   -0xc(%ebp)
f010a238:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a23c:	0f 89 83 fe ff ff    	jns    f010a0c5 <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f010a242:	90                   	nop
f010a243:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a246:	c9                   	leave  
f010a247:	c3                   	ret    

f010a248 <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f010a248:	55                   	push   %ebp
f010a249:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f010a24b:	8b 15 78 af 85 f0    	mov    0xf085af78,%edx
f010a251:	8b 45 08             	mov    0x8(%ebp),%eax
f010a254:	89 10                	mov    %edx,(%eax)
f010a256:	8b 45 08             	mov    0x8(%ebp),%eax
f010a259:	8b 00                	mov    (%eax),%eax
f010a25b:	85 c0                	test   %eax,%eax
f010a25d:	75 07                	jne    f010a266 <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f010a25f:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f010a264:	eb 11                	jmp    f010a277 <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f010a266:	8b 45 08             	mov    0x8(%ebp),%eax
f010a269:	8b 00                	mov    (%eax),%eax
f010a26b:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f010a272:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a277:	5d                   	pop    %ebp
f010a278:	c3                   	ret    

f010a279 <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f010a279:	55                   	push   %ebp
f010a27a:	89 e5                	mov    %esp,%ebp
f010a27c:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f010a27f:	83 ec 04             	sub    $0x4,%esp
f010a282:	68 f0 05 00 00       	push   $0x5f0
f010a287:	6a 00                	push   $0x0
f010a289:	ff 75 08             	pushl  0x8(%ebp)
f010a28c:	e8 c4 79 02 00       	call   f0131c55 <memset>
f010a291:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f010a294:	8b 45 08             	mov    0x8(%ebp),%eax
f010a297:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f010a29e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a2a2:	75 17                	jne    f010a2bb <free_environment+0x42>
f010a2a4:	83 ec 04             	sub    $0x4,%esp
f010a2a7:	68 68 68 13 f0       	push   $0xf0136868
f010a2ac:	68 36 02 00 00       	push   $0x236
f010a2b1:	68 2d 68 13 f0       	push   $0xf013682d
f010a2b6:	e8 4a 5f ff ff       	call   f0100205 <_panic>
f010a2bb:	8b 15 78 af 85 f0    	mov    0xf085af78,%edx
f010a2c1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2c4:	89 50 44             	mov    %edx,0x44(%eax)
f010a2c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2ca:	8b 40 44             	mov    0x44(%eax),%eax
f010a2cd:	85 c0                	test   %eax,%eax
f010a2cf:	74 0d                	je     f010a2de <free_environment+0x65>
f010a2d1:	a1 78 af 85 f0       	mov    0xf085af78,%eax
f010a2d6:	8b 55 08             	mov    0x8(%ebp),%edx
f010a2d9:	89 50 48             	mov    %edx,0x48(%eax)
f010a2dc:	eb 08                	jmp    f010a2e6 <free_environment+0x6d>
f010a2de:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2e1:	a3 7c af 85 f0       	mov    %eax,0xf085af7c
f010a2e6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2e9:	a3 78 af 85 f0       	mov    %eax,0xf085af78
f010a2ee:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2f1:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a2f8:	a1 84 af 85 f0       	mov    0xf085af84,%eax
f010a2fd:	40                   	inc    %eax
f010a2fe:	a3 84 af 85 f0       	mov    %eax,0xf085af84
}
f010a303:	90                   	nop
f010a304:	c9                   	leave  
f010a305:	c3                   	ret    

f010a306 <create_user_page_WS>:

//===============================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR WORKING SET:
//===============================================
void * create_user_page_WS(struct Env * e, unsigned int numOfElements)
{
f010a306:	55                   	push   %ebp
f010a307:	89 e5                	mov    %esp,%ebp
f010a309:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [PROGRAM LOAD] create_user_page_WS()
	// Write your code here, remove the panic and write your code
	//panic("create_user_page_WS() is not implemented yet...!!");
	uint32 nBytes = sizeof(struct WorkingSetElement) * numOfElements;
f010a30c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a30f:	89 d0                	mov    %edx,%eax
f010a311:	01 c0                	add    %eax,%eax
f010a313:	01 d0                	add    %edx,%eax
f010a315:	c1 e0 03             	shl    $0x3,%eax
f010a318:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct WorkingSetElement* ptr_page_WS = kmalloc(nBytes);
f010a31b:	83 ec 0c             	sub    $0xc,%esp
f010a31e:	ff 75 f4             	pushl  -0xc(%ebp)
f010a321:	e8 0a d7 ff ff       	call   f0107a30 <kmalloc>
f010a326:	83 c4 10             	add    $0x10,%esp
f010a329:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(ptr_page_WS == NULL){
f010a32c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010a330:	75 17                	jne    f010a349 <create_user_page_WS+0x43>
		panic("NOT ENOUGH KERNEL HEAP SPACE");}
f010a332:	83 ec 04             	sub    $0x4,%esp
f010a335:	68 bf 68 13 f0       	push   $0xf01368bf
f010a33a:	68 44 02 00 00       	push   $0x244
f010a33f:	68 2d 68 13 f0       	push   $0xf013682d
f010a344:	e8 bc 5e ff ff       	call   f0100205 <_panic>
	return ptr_page_WS;
f010a349:	8b 45 f0             	mov    -0x10(%ebp),%eax
	//Use kmalloc() to allocate a new space for a working set with numOfElements elements
}
f010a34c:	c9                   	leave  
f010a34d:	c3                   	ret    

f010a34e <create_user_directory>:

//==================================================
// 5) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f010a34e:	55                   	push   %ebp
f010a34f:	89 e5                	mov    %esp,%ebp
f010a351:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [PROGRAM LOAD] create_user_directory()
	// Write your code here, remove the panic and write your code
	//panic("create_user_directory() is not implemented yet...!!");
	uint32* ptr_user_page_directory = kmalloc(PAGE_SIZE);
f010a354:	83 ec 0c             	sub    $0xc,%esp
f010a357:	68 00 10 00 00       	push   $0x1000
f010a35c:	e8 cf d6 ff ff       	call   f0107a30 <kmalloc>
f010a361:	83 c4 10             	add    $0x10,%esp
f010a364:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f010a367:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a36b:	75 17                	jne    f010a384 <create_user_directory+0x36>
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010a36d:	83 ec 04             	sub    $0x4,%esp
f010a370:	68 bf 68 13 f0       	push   $0xf01368bf
f010a375:	68 53 02 00 00       	push   $0x253
f010a37a:	68 2d 68 13 f0       	push   $0xf013682d
f010a37f:	e8 81 5e ff ff       	call   f0100205 <_panic>
	return ptr_user_page_directory;
f010a384:	8b 45 f4             	mov    -0xc(%ebp),%eax

	//Use kmalloc() to allocate a new directory
}
f010a387:	c9                   	leave  
f010a388:	c3                   	ret    

f010a389 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f010a389:	55                   	push   %ebp
f010a38a:	89 e5                	mov    %esp,%ebp
f010a38c:	53                   	push   %ebx
f010a38d:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f010a390:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a393:	8b 40 0c             	mov    0xc(%eax),%eax
f010a396:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f010a399:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a39c:	8b 40 08             	mov    0x8(%eax),%eax
f010a39f:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f010a3a2:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010a3a9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010a3ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a3af:	01 c2                	add    %eax,%edx
f010a3b1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a3b4:	01 d0                	add    %edx,%eax
f010a3b6:	48                   	dec    %eax
f010a3b7:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010a3ba:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a3bd:	ba 00 00 00 00       	mov    $0x0,%edx
f010a3c2:	f7 75 dc             	divl   -0x24(%ebp)
f010a3c5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a3c8:	29 d0                	sub    %edx,%eax
f010a3ca:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f010a3cd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a3d0:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010a3d3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010a3d6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a3db:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f010a3de:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f010a3e5:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f010a3ec:	8b 45 10             	mov    0x10(%ebp),%eax
f010a3ef:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f010a3f5:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f010a3fc:	0f 85 c8 05 00 00    	jne    f010a9ca <program_segment_alloc_map_copy_workingset+0x641>
f010a402:	8b 45 08             	mov    0x8(%ebp),%eax
f010a405:	05 5c 05 00 00       	add    $0x55c,%eax
f010a40a:	83 ec 08             	sub    $0x8,%esp
f010a40d:	68 dc 68 13 f0       	push   $0xf01368dc
f010a412:	50                   	push   %eax
f010a413:	e8 5b 77 02 00       	call   f0131b73 <strcmp>
f010a418:	83 c4 10             	add    $0x10,%esp
f010a41b:	85 c0                	test   %eax,%eax
f010a41d:	0f 84 a7 05 00 00    	je     f010a9ca <program_segment_alloc_map_copy_workingset+0x641>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f010a423:	8b 45 14             	mov    0x14(%ebp),%eax
f010a426:	83 f8 06             	cmp    $0x6,%eax
f010a429:	76 05                	jbe    f010a430 <program_segment_alloc_map_copy_workingset+0xa7>
f010a42b:	b8 06 00 00 00       	mov    $0x6,%eax
f010a430:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a433:	e9 92 05 00 00       	jmp    f010a9ca <program_segment_alloc_map_copy_workingset+0x641>
	{
		// Allocate a page
		allocate_frame(&p) ;
f010a438:	83 ec 0c             	sub    $0xc,%esp
f010a43b:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010a43e:	50                   	push   %eax
f010a43f:	e8 c9 c4 ff ff       	call   f010690d <allocate_frame>
f010a444:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f010a447:	8b 55 c0             	mov    -0x40(%ebp),%edx
f010a44a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a44d:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a450:	6a 06                	push   $0x6
f010a452:	ff 75 f4             	pushl  -0xc(%ebp)
f010a455:	52                   	push   %edx
f010a456:	50                   	push   %eax
f010a457:	e8 bc ca ff ff       	call   f0106f18 <loadtime_map_frame>
f010a45c:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f010a45f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a462:	8b 48 78             	mov    0x78(%eax),%ecx
f010a465:	8b 45 08             	mov    0x8(%ebp),%eax
f010a468:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a46e:	89 d0                	mov    %edx,%eax
f010a470:	01 c0                	add    %eax,%eax
f010a472:	01 d0                	add    %edx,%eax
f010a474:	c1 e0 03             	shl    $0x3,%eax
f010a477:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a47a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a47d:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f010a47f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a482:	8b 48 78             	mov    0x78(%eax),%ecx
f010a485:	8b 45 08             	mov    0x8(%ebp),%eax
f010a488:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a48e:	89 d0                	mov    %edx,%eax
f010a490:	01 c0                	add    %eax,%eax
f010a492:	01 d0                	add    %edx,%eax
f010a494:	c1 e0 03             	shl    $0x3,%eax
f010a497:	01 c8                	add    %ecx,%eax
f010a499:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f010a49d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4a0:	8b 48 78             	mov    0x78(%eax),%ecx
f010a4a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4a6:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a4ac:	89 d0                	mov    %edx,%eax
f010a4ae:	01 c0                	add    %eax,%eax
f010a4b0:	01 d0                	add    %edx,%eax
f010a4b2:	c1 e0 03             	shl    $0x3,%eax
f010a4b5:	01 c8                	add    %ecx,%eax
f010a4b7:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a4be:	83 ec 0c             	sub    $0xc,%esp
f010a4c1:	6a 02                	push   $0x2
f010a4c3:	e8 37 3d 00 00       	call   f010e1ff <isPageReplacmentAlgorithmLRU>
f010a4c8:	83 c4 10             	add    $0x10,%esp
f010a4cb:	85 c0                	test   %eax,%eax
f010a4cd:	0f 84 c8 03 00 00    	je     f010a89b <program_segment_alloc_map_copy_workingset+0x512>
		{
			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a4d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4d6:	8b 48 78             	mov    0x78(%eax),%ecx
f010a4d9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4dc:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a4e2:	89 d0                	mov    %edx,%eax
f010a4e4:	01 c0                	add    %eax,%eax
f010a4e6:	01 d0                	add    %edx,%eax
f010a4e8:	c1 e0 03             	shl    $0x3,%eax
f010a4eb:	01 c8                	add    %ecx,%eax
f010a4ed:	85 c0                	test   %eax,%eax
f010a4ef:	75 17                	jne    f010a508 <program_segment_alloc_map_copy_workingset+0x17f>
f010a4f1:	83 ec 04             	sub    $0x4,%esp
f010a4f4:	68 4a 68 13 f0       	push   $0xf013684a
f010a4f9:	68 86 02 00 00       	push   $0x286
f010a4fe:	68 2d 68 13 f0       	push   $0xf013682d
f010a503:	e8 fd 5c ff ff       	call   f0100205 <_panic>
f010a508:	8b 45 08             	mov    0x8(%ebp),%eax
f010a50b:	8b 48 78             	mov    0x78(%eax),%ecx
f010a50e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a511:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a517:	89 d0                	mov    %edx,%eax
f010a519:	01 c0                	add    %eax,%eax
f010a51b:	01 d0                	add    %edx,%eax
f010a51d:	c1 e0 03             	shl    $0x3,%eax
f010a520:	01 c8                	add    %ecx,%eax
f010a522:	8b 40 10             	mov    0x10(%eax),%eax
f010a525:	85 c0                	test   %eax,%eax
f010a527:	74 3f                	je     f010a568 <program_segment_alloc_map_copy_workingset+0x1df>
f010a529:	8b 45 08             	mov    0x8(%ebp),%eax
f010a52c:	8b 48 78             	mov    0x78(%eax),%ecx
f010a52f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a532:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a538:	89 d0                	mov    %edx,%eax
f010a53a:	01 c0                	add    %eax,%eax
f010a53c:	01 d0                	add    %edx,%eax
f010a53e:	c1 e0 03             	shl    $0x3,%eax
f010a541:	01 c8                	add    %ecx,%eax
f010a543:	8b 50 10             	mov    0x10(%eax),%edx
f010a546:	8b 45 08             	mov    0x8(%ebp),%eax
f010a549:	8b 58 78             	mov    0x78(%eax),%ebx
f010a54c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a54f:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a555:	89 c8                	mov    %ecx,%eax
f010a557:	01 c0                	add    %eax,%eax
f010a559:	01 c8                	add    %ecx,%eax
f010a55b:	c1 e0 03             	shl    $0x3,%eax
f010a55e:	01 d8                	add    %ebx,%eax
f010a560:	8b 40 14             	mov    0x14(%eax),%eax
f010a563:	89 42 14             	mov    %eax,0x14(%edx)
f010a566:	eb 26                	jmp    f010a58e <program_segment_alloc_map_copy_workingset+0x205>
f010a568:	8b 45 08             	mov    0x8(%ebp),%eax
f010a56b:	8b 48 78             	mov    0x78(%eax),%ecx
f010a56e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a571:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a577:	89 d0                	mov    %edx,%eax
f010a579:	01 c0                	add    %eax,%eax
f010a57b:	01 d0                	add    %edx,%eax
f010a57d:	c1 e0 03             	shl    $0x3,%eax
f010a580:	01 c8                	add    %ecx,%eax
f010a582:	8b 50 14             	mov    0x14(%eax),%edx
f010a585:	8b 45 08             	mov    0x8(%ebp),%eax
f010a588:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010a58e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a591:	8b 48 78             	mov    0x78(%eax),%ecx
f010a594:	8b 45 08             	mov    0x8(%ebp),%eax
f010a597:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a59d:	89 d0                	mov    %edx,%eax
f010a59f:	01 c0                	add    %eax,%eax
f010a5a1:	01 d0                	add    %edx,%eax
f010a5a3:	c1 e0 03             	shl    $0x3,%eax
f010a5a6:	01 c8                	add    %ecx,%eax
f010a5a8:	8b 40 14             	mov    0x14(%eax),%eax
f010a5ab:	85 c0                	test   %eax,%eax
f010a5ad:	74 3f                	je     f010a5ee <program_segment_alloc_map_copy_workingset+0x265>
f010a5af:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5b2:	8b 48 78             	mov    0x78(%eax),%ecx
f010a5b5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5b8:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a5be:	89 d0                	mov    %edx,%eax
f010a5c0:	01 c0                	add    %eax,%eax
f010a5c2:	01 d0                	add    %edx,%eax
f010a5c4:	c1 e0 03             	shl    $0x3,%eax
f010a5c7:	01 c8                	add    %ecx,%eax
f010a5c9:	8b 50 14             	mov    0x14(%eax),%edx
f010a5cc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5cf:	8b 58 78             	mov    0x78(%eax),%ebx
f010a5d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5d5:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a5db:	89 c8                	mov    %ecx,%eax
f010a5dd:	01 c0                	add    %eax,%eax
f010a5df:	01 c8                	add    %ecx,%eax
f010a5e1:	c1 e0 03             	shl    $0x3,%eax
f010a5e4:	01 d8                	add    %ebx,%eax
f010a5e6:	8b 40 10             	mov    0x10(%eax),%eax
f010a5e9:	89 42 10             	mov    %eax,0x10(%edx)
f010a5ec:	eb 26                	jmp    f010a614 <program_segment_alloc_map_copy_workingset+0x28b>
f010a5ee:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5f1:	8b 48 78             	mov    0x78(%eax),%ecx
f010a5f4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5f7:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a5fd:	89 d0                	mov    %edx,%eax
f010a5ff:	01 c0                	add    %eax,%eax
f010a601:	01 d0                	add    %edx,%eax
f010a603:	c1 e0 03             	shl    $0x3,%eax
f010a606:	01 c8                	add    %ecx,%eax
f010a608:	8b 50 10             	mov    0x10(%eax),%edx
f010a60b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a60e:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010a614:	8b 45 08             	mov    0x8(%ebp),%eax
f010a617:	8b 48 78             	mov    0x78(%eax),%ecx
f010a61a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a61d:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a623:	89 d0                	mov    %edx,%eax
f010a625:	01 c0                	add    %eax,%eax
f010a627:	01 d0                	add    %edx,%eax
f010a629:	c1 e0 03             	shl    $0x3,%eax
f010a62c:	01 c8                	add    %ecx,%eax
f010a62e:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f010a635:	8b 45 08             	mov    0x8(%ebp),%eax
f010a638:	8b 48 78             	mov    0x78(%eax),%ecx
f010a63b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a63e:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a644:	89 d0                	mov    %edx,%eax
f010a646:	01 c0                	add    %eax,%eax
f010a648:	01 d0                	add    %edx,%eax
f010a64a:	c1 e0 03             	shl    $0x3,%eax
f010a64d:	01 c8                	add    %ecx,%eax
f010a64f:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a656:	8b 45 08             	mov    0x8(%ebp),%eax
f010a659:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010a65f:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a662:	8b 45 08             	mov    0x8(%ebp),%eax
f010a665:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f010a66b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a66e:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010a674:	8b 45 08             	mov    0x8(%ebp),%eax
f010a677:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f010a67d:	48                   	dec    %eax
f010a67e:	39 c2                	cmp    %eax,%edx
f010a680:	0f 83 0d 01 00 00    	jae    f010a793 <program_segment_alloc_map_copy_workingset+0x40a>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a686:	8b 45 08             	mov    0x8(%ebp),%eax
f010a689:	8b 48 78             	mov    0x78(%eax),%ecx
f010a68c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a68f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a695:	89 d0                	mov    %edx,%eax
f010a697:	01 c0                	add    %eax,%eax
f010a699:	01 d0                	add    %edx,%eax
f010a69b:	c1 e0 03             	shl    $0x3,%eax
f010a69e:	01 c8                	add    %ecx,%eax
f010a6a0:	85 c0                	test   %eax,%eax
f010a6a2:	75 17                	jne    f010a6bb <program_segment_alloc_map_copy_workingset+0x332>
f010a6a4:	83 ec 04             	sub    $0x4,%esp
f010a6a7:	68 68 68 13 f0       	push   $0xf0136868
f010a6ac:	68 8a 02 00 00       	push   $0x28a
f010a6b1:	68 2d 68 13 f0       	push   $0xf013682d
f010a6b6:	e8 4a 5b ff ff       	call   f0100205 <_panic>
f010a6bb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6be:	8b 48 78             	mov    0x78(%eax),%ecx
f010a6c1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6c4:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a6ca:	89 d0                	mov    %edx,%eax
f010a6cc:	01 c0                	add    %eax,%eax
f010a6ce:	01 d0                	add    %edx,%eax
f010a6d0:	c1 e0 03             	shl    $0x3,%eax
f010a6d3:	01 c8                	add    %ecx,%eax
f010a6d5:	8b 55 08             	mov    0x8(%ebp),%edx
f010a6d8:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f010a6de:	89 50 10             	mov    %edx,0x10(%eax)
f010a6e1:	8b 40 10             	mov    0x10(%eax),%eax
f010a6e4:	85 c0                	test   %eax,%eax
f010a6e6:	74 28                	je     f010a710 <program_segment_alloc_map_copy_workingset+0x387>
f010a6e8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6eb:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f010a6f1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6f4:	8b 58 78             	mov    0x78(%eax),%ebx
f010a6f7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6fa:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a700:	89 c8                	mov    %ecx,%eax
f010a702:	01 c0                	add    %eax,%eax
f010a704:	01 c8                	add    %ecx,%eax
f010a706:	c1 e0 03             	shl    $0x3,%eax
f010a709:	01 d8                	add    %ebx,%eax
f010a70b:	89 42 14             	mov    %eax,0x14(%edx)
f010a70e:	eb 24                	jmp    f010a734 <program_segment_alloc_map_copy_workingset+0x3ab>
f010a710:	8b 45 08             	mov    0x8(%ebp),%eax
f010a713:	8b 48 78             	mov    0x78(%eax),%ecx
f010a716:	8b 45 08             	mov    0x8(%ebp),%eax
f010a719:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a71f:	89 d0                	mov    %edx,%eax
f010a721:	01 c0                	add    %eax,%eax
f010a723:	01 d0                	add    %edx,%eax
f010a725:	c1 e0 03             	shl    $0x3,%eax
f010a728:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a72b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a72e:	89 90 cc 05 00 00    	mov    %edx,0x5cc(%eax)
f010a734:	8b 45 08             	mov    0x8(%ebp),%eax
f010a737:	8b 48 78             	mov    0x78(%eax),%ecx
f010a73a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a73d:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a743:	89 d0                	mov    %edx,%eax
f010a745:	01 c0                	add    %eax,%eax
f010a747:	01 d0                	add    %edx,%eax
f010a749:	c1 e0 03             	shl    $0x3,%eax
f010a74c:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a74f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a752:	89 90 c8 05 00 00    	mov    %edx,0x5c8(%eax)
f010a758:	8b 45 08             	mov    0x8(%ebp),%eax
f010a75b:	8b 48 78             	mov    0x78(%eax),%ecx
f010a75e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a761:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a767:	89 d0                	mov    %edx,%eax
f010a769:	01 c0                	add    %eax,%eax
f010a76b:	01 d0                	add    %edx,%eax
f010a76d:	c1 e0 03             	shl    $0x3,%eax
f010a770:	01 c8                	add    %ecx,%eax
f010a772:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a779:	8b 45 08             	mov    0x8(%ebp),%eax
f010a77c:	8b 80 d4 05 00 00    	mov    0x5d4(%eax),%eax
f010a782:	8d 50 01             	lea    0x1(%eax),%edx
f010a785:	8b 45 08             	mov    0x8(%ebp),%eax
f010a788:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f010a78e:	e9 08 01 00 00       	jmp    f010a89b <program_segment_alloc_map_copy_workingset+0x512>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a793:	8b 45 08             	mov    0x8(%ebp),%eax
f010a796:	8b 48 78             	mov    0x78(%eax),%ecx
f010a799:	8b 45 08             	mov    0x8(%ebp),%eax
f010a79c:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a7a2:	89 d0                	mov    %edx,%eax
f010a7a4:	01 c0                	add    %eax,%eax
f010a7a6:	01 d0                	add    %edx,%eax
f010a7a8:	c1 e0 03             	shl    $0x3,%eax
f010a7ab:	01 c8                	add    %ecx,%eax
f010a7ad:	85 c0                	test   %eax,%eax
f010a7af:	75 17                	jne    f010a7c8 <program_segment_alloc_map_copy_workingset+0x43f>
f010a7b1:	83 ec 04             	sub    $0x4,%esp
f010a7b4:	68 68 68 13 f0       	push   $0xf0136868
f010a7b9:	68 8f 02 00 00       	push   $0x28f
f010a7be:	68 2d 68 13 f0       	push   $0xf013682d
f010a7c3:	e8 3d 5a ff ff       	call   f0100205 <_panic>
f010a7c8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7cb:	8b 48 78             	mov    0x78(%eax),%ecx
f010a7ce:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7d1:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a7d7:	89 d0                	mov    %edx,%eax
f010a7d9:	01 c0                	add    %eax,%eax
f010a7db:	01 d0                	add    %edx,%eax
f010a7dd:	c1 e0 03             	shl    $0x3,%eax
f010a7e0:	01 c8                	add    %ecx,%eax
f010a7e2:	8b 55 08             	mov    0x8(%ebp),%edx
f010a7e5:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f010a7eb:	89 50 10             	mov    %edx,0x10(%eax)
f010a7ee:	8b 40 10             	mov    0x10(%eax),%eax
f010a7f1:	85 c0                	test   %eax,%eax
f010a7f3:	74 28                	je     f010a81d <program_segment_alloc_map_copy_workingset+0x494>
f010a7f5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7f8:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f010a7fe:	8b 45 08             	mov    0x8(%ebp),%eax
f010a801:	8b 58 78             	mov    0x78(%eax),%ebx
f010a804:	8b 45 08             	mov    0x8(%ebp),%eax
f010a807:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a80d:	89 c8                	mov    %ecx,%eax
f010a80f:	01 c0                	add    %eax,%eax
f010a811:	01 c8                	add    %ecx,%eax
f010a813:	c1 e0 03             	shl    $0x3,%eax
f010a816:	01 d8                	add    %ebx,%eax
f010a818:	89 42 14             	mov    %eax,0x14(%edx)
f010a81b:	eb 24                	jmp    f010a841 <program_segment_alloc_map_copy_workingset+0x4b8>
f010a81d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a820:	8b 48 78             	mov    0x78(%eax),%ecx
f010a823:	8b 45 08             	mov    0x8(%ebp),%eax
f010a826:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a82c:	89 d0                	mov    %edx,%eax
f010a82e:	01 c0                	add    %eax,%eax
f010a830:	01 d0                	add    %edx,%eax
f010a832:	c1 e0 03             	shl    $0x3,%eax
f010a835:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a838:	8b 45 08             	mov    0x8(%ebp),%eax
f010a83b:	89 90 dc 05 00 00    	mov    %edx,0x5dc(%eax)
f010a841:	8b 45 08             	mov    0x8(%ebp),%eax
f010a844:	8b 48 78             	mov    0x78(%eax),%ecx
f010a847:	8b 45 08             	mov    0x8(%ebp),%eax
f010a84a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a850:	89 d0                	mov    %edx,%eax
f010a852:	01 c0                	add    %eax,%eax
f010a854:	01 d0                	add    %edx,%eax
f010a856:	c1 e0 03             	shl    $0x3,%eax
f010a859:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a85c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a85f:	89 90 d8 05 00 00    	mov    %edx,0x5d8(%eax)
f010a865:	8b 45 08             	mov    0x8(%ebp),%eax
f010a868:	8b 48 78             	mov    0x78(%eax),%ecx
f010a86b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a86e:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a874:	89 d0                	mov    %edx,%eax
f010a876:	01 c0                	add    %eax,%eax
f010a878:	01 d0                	add    %edx,%eax
f010a87a:	c1 e0 03             	shl    $0x3,%eax
f010a87d:	01 c8                	add    %ecx,%eax
f010a87f:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a886:	8b 45 08             	mov    0x8(%ebp),%eax
f010a889:	8b 80 e4 05 00 00    	mov    0x5e4(%eax),%eax
f010a88f:	8d 50 01             	lea    0x1(%eax),%edx
f010a892:	8b 45 08             	mov    0x8(%ebp),%eax
f010a895:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
			}
		}
		//=======================
		e->page_last_WS_index ++;
f010a89b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a89e:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a8a4:	8d 50 01             	lea    0x1(%eax),%edx
f010a8a7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8aa:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010a8b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8b3:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a8b9:	8b 55 08             	mov    0x8(%ebp),%edx
f010a8bc:	8b 4a 74             	mov    0x74(%edx),%ecx
f010a8bf:	ba 00 00 00 00       	mov    $0x0,%edx
f010a8c4:	f7 f1                	div    %ecx
f010a8c6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8c9:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010a8cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a8d2:	c1 e8 16             	shr    $0x16,%eax
f010a8d5:	89 c2                	mov    %eax,%edx
f010a8d7:	8b 45 18             	mov    0x18(%ebp),%eax
f010a8da:	8b 00                	mov    (%eax),%eax
f010a8dc:	39 c2                	cmp    %eax,%edx
f010a8de:	0f 84 cf 00 00 00    	je     f010a9b3 <program_segment_alloc_map_copy_workingset+0x62a>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010a8e4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8e7:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a8ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a8f0:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010a8f3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010a8f6:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010a8fb:	89 c1                	mov    %eax,%ecx
f010a8fd:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a900:	89 d0                	mov    %edx,%eax
f010a902:	01 c0                	add    %eax,%eax
f010a904:	01 d0                	add    %edx,%eax
f010a906:	c1 e0 03             	shl    $0x3,%eax
f010a909:	01 d8                	add    %ebx,%eax
f010a90b:	83 c0 7c             	add    $0x7c,%eax
f010a90e:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010a910:	8b 45 08             	mov    0x8(%ebp),%eax
f010a913:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a919:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a91c:	89 d0                	mov    %edx,%eax
f010a91e:	01 c0                	add    %eax,%eax
f010a920:	01 d0                	add    %edx,%eax
f010a922:	c1 e0 03             	shl    $0x3,%eax
f010a925:	01 c8                	add    %ecx,%eax
f010a927:	83 e8 80             	sub    $0xffffff80,%eax
f010a92a:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010a92d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a930:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010a936:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a939:	89 d0                	mov    %edx,%eax
f010a93b:	01 c0                	add    %eax,%eax
f010a93d:	01 d0                	add    %edx,%eax
f010a93f:	c1 e0 03             	shl    $0x3,%eax
f010a942:	01 c8                	add    %ecx,%eax
f010a944:	05 84 00 00 00       	add    $0x84,%eax
f010a949:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010a94f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a952:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a958:	8d 50 01             	lea    0x1(%eax),%edx
f010a95b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a95e:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010a964:	8b 45 08             	mov    0x8(%ebp),%eax
f010a967:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a96d:	b9 32 00 00 00       	mov    $0x32,%ecx
f010a972:	ba 00 00 00 00       	mov    $0x0,%edx
f010a977:	f7 f1                	div    %ecx
f010a979:	8b 45 08             	mov    0x8(%ebp),%eax
f010a97c:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			if (e->table_last_WS_index == 0)
f010a982:	8b 45 08             	mov    0x8(%ebp),%eax
f010a985:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010a98b:	85 c0                	test   %eax,%eax
f010a98d:	75 17                	jne    f010a9a6 <program_segment_alloc_map_copy_workingset+0x61d>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010a98f:	83 ec 04             	sub    $0x4,%esp
f010a992:	68 e0 68 13 f0       	push   $0xf01368e0
f010a997:	68 9f 02 00 00       	push   $0x29f
f010a99c:	68 2d 68 13 f0       	push   $0xf013682d
f010a9a1:	e8 5f 58 ff ff       	call   f0100205 <_panic>
			(*lastTableNumber) = PDX(iVA);
f010a9a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a9a9:	c1 e8 16             	shr    $0x16,%eax
f010a9ac:	89 c2                	mov    %eax,%edx
f010a9ae:	8b 45 18             	mov    0x18(%ebp),%eax
f010a9b1:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010a9b3:	8b 45 10             	mov    0x10(%ebp),%eax
f010a9b6:	8b 00                	mov    (%eax),%eax
f010a9b8:	8d 50 01             	lea    0x1(%eax),%edx
f010a9bb:	8b 45 10             	mov    0x10(%ebp),%eax
f010a9be:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a9c0:	ff 45 f0             	incl   -0x10(%ebp)
f010a9c3:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010a9ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a9cd:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010a9d0:	73 0c                	jae    f010a9de <program_segment_alloc_map_copy_workingset+0x655>
f010a9d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a9d5:	3b 45 14             	cmp    0x14(%ebp),%eax
f010a9d8:	0f 82 5a fa ff ff    	jb     f010a438 <program_segment_alloc_map_copy_workingset+0xaf>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010a9de:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a9e1:	8b 00                	mov    (%eax),%eax
f010a9e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010a9e6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a9e9:	8b 40 0c             	mov    0xc(%eax),%eax
f010a9ec:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a9ef:	eb 10                	jmp    f010aa01 <program_segment_alloc_map_copy_workingset+0x678>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010a9f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a9f4:	8a 10                	mov    (%eax),%dl
f010a9f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a9f9:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010a9fb:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010a9fe:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010aa01:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010aa04:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010aa07:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010aa0a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010aa0f:	89 c2                	mov    %eax,%edx
f010aa11:	8b 45 10             	mov    0x10(%ebp),%eax
f010aa14:	8b 00                	mov    (%eax),%eax
f010aa16:	c1 e0 0c             	shl    $0xc,%eax
f010aa19:	01 c2                	add    %eax,%edx
f010aa1b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010aa1e:	39 c2                	cmp    %eax,%edx
f010aa20:	76 1d                	jbe    f010aa3f <program_segment_alloc_map_copy_workingset+0x6b6>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010aa22:	8b 45 0c             	mov    0xc(%ebp),%eax
f010aa25:	8b 50 04             	mov    0x4(%eax),%edx
f010aa28:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010aa2b:	01 c2                	add    %eax,%edx
f010aa2d:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010aa30:	39 c2                	cmp    %eax,%edx
f010aa32:	77 bd                	ja     f010a9f1 <program_segment_alloc_map_copy_workingset+0x668>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010aa34:	eb 09                	jmp    f010aa3f <program_segment_alloc_map_copy_workingset+0x6b6>
	{
		*dst_ptr = 0;
f010aa36:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010aa39:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010aa3c:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010aa3f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010aa42:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010aa45:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010aa48:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010aa4d:	89 c2                	mov    %eax,%edx
f010aa4f:	8b 45 10             	mov    0x10(%ebp),%eax
f010aa52:	8b 00                	mov    (%eax),%eax
f010aa54:	c1 e0 0c             	shl    $0xc,%eax
f010aa57:	01 c2                	add    %eax,%edx
f010aa59:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010aa5c:	39 c2                	cmp    %eax,%edx
f010aa5e:	77 d6                	ja     f010aa36 <program_segment_alloc_map_copy_workingset+0x6ad>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010aa60:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010aa65:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010aa68:	c9                   	leave  
f010aa69:	c3                   	ret    

f010aa6a <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010aa6a:	55                   	push   %ebp
f010aa6b:	89 e5                	mov    %esp,%ebp
f010aa6d:	53                   	push   %ebx
f010aa6e:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010aa71:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa74:	8b 55 0c             	mov    0xc(%ebp),%edx
f010aa77:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010aa7a:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa7d:	8b 55 10             	mov    0x10(%ebp),%edx
f010aa80:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010aa83:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010aa8a:	eb 17                	jmp    f010aaa3 <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f010aa8c:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa8f:	8b 40 5c             	mov    0x5c(%eax),%eax
f010aa92:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aa95:	c1 e2 02             	shl    $0x2,%edx
f010aa98:	01 d0                	add    %edx,%eax
f010aa9a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010aaa0:	ff 45 f4             	incl   -0xc(%ebp)
f010aaa3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aaa6:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010aaab:	76 df                	jbe    f010aa8c <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010aaad:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010aab4:	eb 22                	jmp    f010aad8 <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010aab6:	8b 45 08             	mov    0x8(%ebp),%eax
f010aab9:	8b 40 5c             	mov    0x5c(%eax),%eax
f010aabc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aabf:	c1 e2 02             	shl    $0x2,%edx
f010aac2:	01 c2                	add    %eax,%edx
f010aac4:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f010aac9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010aacc:	c1 e1 02             	shl    $0x2,%ecx
f010aacf:	01 c8                	add    %ecx,%eax
f010aad1:	8b 00                	mov    (%eax),%eax
f010aad3:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010aad5:	ff 45 f4             	incl   -0xc(%ebp)
f010aad8:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010aadf:	7e d5                	jle    f010aab6 <initialize_environment+0x4c>
	}

	// Allocate the page working set for both kernel and user
#if USE_KHEAP == 1
	{
		e->ptr_pageWorkingSet = create_user_page_WS(e, e->page_WS_max_size);
f010aae1:	8b 45 08             	mov    0x8(%ebp),%eax
f010aae4:	8b 40 74             	mov    0x74(%eax),%eax
f010aae7:	83 ec 08             	sub    $0x8,%esp
f010aaea:	50                   	push   %eax
f010aaeb:	ff 75 08             	pushl  0x8(%ebp)
f010aaee:	e8 13 f8 ff ff       	call   f010a306 <create_user_page_WS>
f010aaf3:	83 c4 10             	add    $0x10,%esp
f010aaf6:	89 c2                	mov    %eax,%edx
f010aaf8:	8b 45 08             	mov    0x8(%ebp),%eax
f010aafb:	89 50 78             	mov    %edx,0x78(%eax)
		share_pws_at_user_space(e);
f010aafe:	83 ec 0c             	sub    $0xc,%esp
f010ab01:	ff 75 08             	pushl  0x8(%ebp)
f010ab04:	e8 f3 04 00 00       	call   f010affc <share_pws_at_user_space>
f010ab09:	83 c4 10             	add    $0x10,%esp
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010ab0c:	83 ec 0c             	sub    $0xc,%esp
f010ab0f:	6a 02                	push   $0x2
f010ab11:	e8 e9 36 00 00       	call   f010e1ff <isPageReplacmentAlgorithmLRU>
f010ab16:	83 c4 10             	add    $0x10,%esp
f010ab19:	85 c0                	test   %eax,%eax
f010ab1b:	0f 84 04 01 00 00    	je     f010ac25 <initialize_environment+0x1bb>
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010ab21:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010ab28:	e9 e7 00 00 00       	jmp    f010ac14 <initialize_environment+0x1aa>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010ab2d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab30:	8b 48 78             	mov    0x78(%eax),%ecx
f010ab33:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ab36:	89 d0                	mov    %edx,%eax
f010ab38:	01 c0                	add    %eax,%eax
f010ab3a:	01 d0                	add    %edx,%eax
f010ab3c:	c1 e0 03             	shl    $0x3,%eax
f010ab3f:	01 c8                	add    %ecx,%eax
f010ab41:	85 c0                	test   %eax,%eax
f010ab43:	75 17                	jne    f010ab5c <initialize_environment+0xf2>
f010ab45:	83 ec 04             	sub    $0x4,%esp
f010ab48:	68 68 68 13 f0       	push   $0xf0136868
f010ab4d:	68 fd 02 00 00       	push   $0x2fd
f010ab52:	68 2d 68 13 f0       	push   $0xf013682d
f010ab57:	e8 a9 56 ff ff       	call   f0100205 <_panic>
f010ab5c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab5f:	8b 48 78             	mov    0x78(%eax),%ecx
f010ab62:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ab65:	89 d0                	mov    %edx,%eax
f010ab67:	01 c0                	add    %eax,%eax
f010ab69:	01 d0                	add    %edx,%eax
f010ab6b:	c1 e0 03             	shl    $0x3,%eax
f010ab6e:	01 c8                	add    %ecx,%eax
f010ab70:	8b 55 08             	mov    0x8(%ebp),%edx
f010ab73:	8b 92 b8 05 00 00    	mov    0x5b8(%edx),%edx
f010ab79:	89 50 10             	mov    %edx,0x10(%eax)
f010ab7c:	8b 40 10             	mov    0x10(%eax),%eax
f010ab7f:	85 c0                	test   %eax,%eax
f010ab81:	74 22                	je     f010aba5 <initialize_environment+0x13b>
f010ab83:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab86:	8b 90 b8 05 00 00    	mov    0x5b8(%eax),%edx
f010ab8c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab8f:	8b 58 78             	mov    0x78(%eax),%ebx
f010ab92:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010ab95:	89 c8                	mov    %ecx,%eax
f010ab97:	01 c0                	add    %eax,%eax
f010ab99:	01 c8                	add    %ecx,%eax
f010ab9b:	c1 e0 03             	shl    $0x3,%eax
f010ab9e:	01 d8                	add    %ebx,%eax
f010aba0:	89 42 14             	mov    %eax,0x14(%edx)
f010aba3:	eb 1e                	jmp    f010abc3 <initialize_environment+0x159>
f010aba5:	8b 45 08             	mov    0x8(%ebp),%eax
f010aba8:	8b 48 78             	mov    0x78(%eax),%ecx
f010abab:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010abae:	89 d0                	mov    %edx,%eax
f010abb0:	01 c0                	add    %eax,%eax
f010abb2:	01 d0                	add    %edx,%eax
f010abb4:	c1 e0 03             	shl    $0x3,%eax
f010abb7:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010abba:	8b 45 08             	mov    0x8(%ebp),%eax
f010abbd:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010abc3:	8b 45 08             	mov    0x8(%ebp),%eax
f010abc6:	8b 48 78             	mov    0x78(%eax),%ecx
f010abc9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010abcc:	89 d0                	mov    %edx,%eax
f010abce:	01 c0                	add    %eax,%eax
f010abd0:	01 d0                	add    %edx,%eax
f010abd2:	c1 e0 03             	shl    $0x3,%eax
f010abd5:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010abd8:	8b 45 08             	mov    0x8(%ebp),%eax
f010abdb:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010abe1:	8b 45 08             	mov    0x8(%ebp),%eax
f010abe4:	8b 48 78             	mov    0x78(%eax),%ecx
f010abe7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010abea:	89 d0                	mov    %edx,%eax
f010abec:	01 c0                	add    %eax,%eax
f010abee:	01 d0                	add    %edx,%eax
f010abf0:	c1 e0 03             	shl    $0x3,%eax
f010abf3:	01 c8                	add    %ecx,%eax
f010abf5:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010abfc:	8b 45 08             	mov    0x8(%ebp),%eax
f010abff:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010ac05:	8d 50 01             	lea    0x1(%eax),%edx
f010ac08:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac0b:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010ac11:	ff 45 f0             	incl   -0x10(%ebp)
f010ac14:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac17:	8b 50 74             	mov    0x74(%eax),%edx
f010ac1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ac1d:	39 c2                	cmp    %eax,%edx
f010ac1f:	0f 87 08 ff ff ff    	ja     f010ab2d <initialize_environment+0xc3>
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010ac25:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010ac2c:	eb 50                	jmp    f010ac7e <initialize_environment+0x214>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010ac2e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac31:	8b 48 78             	mov    0x78(%eax),%ecx
f010ac34:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ac37:	89 d0                	mov    %edx,%eax
f010ac39:	01 c0                	add    %eax,%eax
f010ac3b:	01 d0                	add    %edx,%eax
f010ac3d:	c1 e0 03             	shl    $0x3,%eax
f010ac40:	01 c8                	add    %ecx,%eax
f010ac42:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010ac48:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac4b:	8b 48 78             	mov    0x78(%eax),%ecx
f010ac4e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ac51:	89 d0                	mov    %edx,%eax
f010ac53:	01 c0                	add    %eax,%eax
f010ac55:	01 d0                	add    %edx,%eax
f010ac57:	c1 e0 03             	shl    $0x3,%eax
f010ac5a:	01 c8                	add    %ecx,%eax
f010ac5c:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010ac60:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac63:	8b 48 78             	mov    0x78(%eax),%ecx
f010ac66:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ac69:	89 d0                	mov    %edx,%eax
f010ac6b:	01 c0                	add    %eax,%eax
f010ac6d:	01 d0                	add    %edx,%eax
f010ac6f:	c1 e0 03             	shl    $0x3,%eax
f010ac72:	01 c8                	add    %ecx,%eax
f010ac74:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010ac7b:	ff 45 f4             	incl   -0xc(%ebp)
f010ac7e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac81:	8b 50 74             	mov    0x74(%eax),%edx
f010ac84:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac87:	39 c2                	cmp    %eax,%edx
f010ac89:	77 a3                	ja     f010ac2e <initialize_environment+0x1c4>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010ac8b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac8e:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010ac95:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010ac98:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010ac9f:	eb 50                	jmp    f010acf1 <initialize_environment+0x287>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010aca1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010aca4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aca7:	89 d0                	mov    %edx,%eax
f010aca9:	01 c0                	add    %eax,%eax
f010acab:	01 d0                	add    %edx,%eax
f010acad:	c1 e0 03             	shl    $0x3,%eax
f010acb0:	01 c8                	add    %ecx,%eax
f010acb2:	83 c0 7c             	add    $0x7c,%eax
f010acb5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010acbb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010acbe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010acc1:	89 d0                	mov    %edx,%eax
f010acc3:	01 c0                	add    %eax,%eax
f010acc5:	01 d0                	add    %edx,%eax
f010acc7:	c1 e0 03             	shl    $0x3,%eax
f010acca:	01 c8                	add    %ecx,%eax
f010accc:	83 e8 80             	sub    $0xffffff80,%eax
f010accf:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010acd2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010acd5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010acd8:	89 d0                	mov    %edx,%eax
f010acda:	01 c0                	add    %eax,%eax
f010acdc:	01 d0                	add    %edx,%eax
f010acde:	c1 e0 03             	shl    $0x3,%eax
f010ace1:	01 c8                	add    %ecx,%eax
f010ace3:	05 84 00 00 00       	add    $0x84,%eax
f010ace8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010acee:	ff 45 f4             	incl   -0xc(%ebp)
f010acf1:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010acf5:	7e aa                	jle    f010aca1 <initialize_environment+0x237>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010acf7:	8b 45 08             	mov    0x8(%ebp),%eax
f010acfa:	c7 80 30 05 00 00 00 	movl   $0x0,0x530(%eax)
f010ad01:	00 00 00 

	e->pageFaultsCounter=0;
f010ad04:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad07:	c7 80 34 05 00 00 00 	movl   $0x0,0x534(%eax)
f010ad0e:	00 00 00 
	e->tableFaultsCounter=0;
f010ad11:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad14:	c7 80 38 05 00 00 00 	movl   $0x0,0x538(%eax)
f010ad1b:	00 00 00 

	e->freeingFullWSCounter = 0;
f010ad1e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad21:	c7 80 3c 05 00 00 00 	movl   $0x0,0x53c(%eax)
f010ad28:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010ad2b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad2e:	c7 80 40 05 00 00 00 	movl   $0x0,0x540(%eax)
f010ad35:	00 00 00 

	e->nModifiedPages=0;
f010ad38:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad3b:	c7 80 44 05 00 00 00 	movl   $0x0,0x544(%eax)
f010ad42:	00 00 00 
	e->nNotModifiedPages=0;
f010ad45:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad48:	c7 80 48 05 00 00 00 	movl   $0x0,0x548(%eax)
f010ad4f:	00 00 00 
	e->nClocks = 0;
f010ad52:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad55:	c7 80 a4 05 00 00 00 	movl   $0x0,0x5a4(%eax)
f010ad5c:	00 00 00 

	//2020
	e->nPageIn = 0;
f010ad5f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad62:	c7 80 4c 05 00 00 00 	movl   $0x0,0x54c(%eax)
f010ad69:	00 00 00 
	e->nPageOut = 0;
f010ad6c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad6f:	c7 80 50 05 00 00 00 	movl   $0x0,0x550(%eax)
f010ad76:	00 00 00 
	e->nNewPageAdded = 0;
f010ad79:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad7c:	c7 80 54 05 00 00 00 	movl   $0x0,0x554(%eax)
f010ad83:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010ad86:	83 ec 0c             	sub    $0xc,%esp
f010ad89:	ff 75 08             	pushl  0x8(%ebp)
f010ad8c:	e8 09 00 00 00       	call   f010ad9a <complete_environment_initialization>
f010ad91:	83 c4 10             	add    $0x10,%esp
}
f010ad94:	90                   	nop
f010ad95:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010ad98:	c9                   	leave  
f010ad99:	c3                   	ret    

f010ad9a <complete_environment_initialization>:

//========================================================
// 8) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010ad9a:	55                   	push   %ebp
f010ad9b:	89 e5                	mov    %esp,%ebp
f010ad9d:	53                   	push   %ebx
f010ad9e:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010ada1:	8b 45 08             	mov    0x8(%ebp),%eax
f010ada4:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ada7:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010adad:	8b 45 08             	mov    0x8(%ebp),%eax
f010adb0:	8b 40 60             	mov    0x60(%eax),%eax
f010adb3:	83 c8 03             	or     $0x3,%eax
f010adb6:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010adb8:	8b 45 08             	mov    0x8(%ebp),%eax
f010adbb:	8b 40 5c             	mov    0x5c(%eax),%eax
f010adbe:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010adc4:	8b 45 08             	mov    0x8(%ebp),%eax
f010adc7:	8b 40 60             	mov    0x60(%eax),%eax
f010adca:	83 c8 05             	or     $0x5,%eax
f010adcd:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010adcf:	8b 45 08             	mov    0x8(%ebp),%eax
f010add2:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f010add9:	8b 45 08             	mov    0x8(%ebp),%eax
f010addc:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f010ade3:	8b 45 08             	mov    0x8(%ebp),%eax
f010ade6:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f010aded:	8b 45 08             	mov    0x8(%ebp),%eax
f010adf0:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010adf7:	8b 45 08             	mov    0x8(%ebp),%eax
f010adfa:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010adfd:	83 ec 0c             	sub    $0xc,%esp
f010ae00:	68 b1 02 00 00       	push   $0x2b1
f010ae05:	e8 04 5a 02 00       	call   f013080e <log2_ceil>
f010ae0a:	83 c4 10             	add    $0x10,%esp
f010ae0d:	ba 01 00 00 00       	mov    $0x1,%edx
f010ae12:	88 c1                	mov    %al,%cl
f010ae14:	d3 e2                	shl    %cl,%edx
f010ae16:	89 d0                	mov    %edx,%eax
f010ae18:	01 d8                	add    %ebx,%eax
f010ae1a:	89 c3                	mov    %eax,%ebx
f010ae1c:	83 ec 0c             	sub    $0xc,%esp
f010ae1f:	68 b1 02 00 00       	push   $0x2b1
f010ae24:	e8 b0 59 02 00       	call   f01307d9 <nearest_pow2_ceil>
f010ae29:	83 c4 10             	add    $0x10,%esp
f010ae2c:	f7 d8                	neg    %eax
f010ae2e:	21 d8                	and    %ebx,%eax
f010ae30:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010ae33:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ae37:	7f 1e                	jg     f010ae57 <complete_environment_initialization+0xbd>
		generation = 1 << ENVGENSHIFT;
f010ae39:	83 ec 0c             	sub    $0xc,%esp
f010ae3c:	68 b1 02 00 00       	push   $0x2b1
f010ae41:	e8 c8 59 02 00       	call   f013080e <log2_ceil>
f010ae46:	83 c4 10             	add    $0x10,%esp
f010ae49:	ba 01 00 00 00       	mov    $0x1,%edx
f010ae4e:	88 c1                	mov    %al,%cl
f010ae50:	d3 e2                	shl    %cl,%edx
f010ae52:	89 d0                	mov    %edx,%eax
f010ae54:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010ae57:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae5a:	8b 15 70 af 85 f0    	mov    0xf085af70,%edx
f010ae60:	29 d0                	sub    %edx,%eax
f010ae62:	c1 f8 04             	sar    $0x4,%eax
f010ae65:	89 c2                	mov    %eax,%edx
f010ae67:	89 d0                	mov    %edx,%eax
f010ae69:	c1 e0 03             	shl    $0x3,%eax
f010ae6c:	01 d0                	add    %edx,%eax
f010ae6e:	01 c0                	add    %eax,%eax
f010ae70:	01 d0                	add    %edx,%eax
f010ae72:	c1 e0 03             	shl    $0x3,%eax
f010ae75:	01 d0                	add    %edx,%eax
f010ae77:	89 c1                	mov    %eax,%ecx
f010ae79:	c1 e1 08             	shl    $0x8,%ecx
f010ae7c:	01 c8                	add    %ecx,%eax
f010ae7e:	01 c0                	add    %eax,%eax
f010ae80:	01 d0                	add    %edx,%eax
f010ae82:	01 c0                	add    %eax,%eax
f010ae84:	01 d0                	add    %edx,%eax
f010ae86:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010ae8d:	01 d0                	add    %edx,%eax
f010ae8f:	89 c2                	mov    %eax,%edx
f010ae91:	c1 e2 09             	shl    $0x9,%edx
f010ae94:	29 c2                	sub    %eax,%edx
f010ae96:	89 d0                	mov    %edx,%eax
f010ae98:	f7 d8                	neg    %eax
f010ae9a:	0b 45 f4             	or     -0xc(%ebp),%eax
f010ae9d:	89 c2                	mov    %eax,%edx
f010ae9f:	8b 45 08             	mov    0x8(%ebp),%eax
f010aea2:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010aea5:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010aeaa:	85 c0                	test   %eax,%eax
f010aeac:	75 0c                	jne    f010aeba <complete_environment_initialization+0x120>
		e->env_parent_id = 0;//no parent;
f010aeae:	8b 45 08             	mov    0x8(%ebp),%eax
f010aeb1:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010aeb8:	eb 0e                	jmp    f010aec8 <complete_environment_initialization+0x12e>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010aeba:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010aebf:	8b 50 4c             	mov    0x4c(%eax),%edx
f010aec2:	8b 45 08             	mov    0x8(%ebp),%eax
f010aec5:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010aec8:	8b 45 08             	mov    0x8(%ebp),%eax
f010aecb:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010aed2:	8b 45 08             	mov    0x8(%ebp),%eax
f010aed5:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010aedc:	8b 45 08             	mov    0x8(%ebp),%eax
f010aedf:	83 ec 04             	sub    $0x4,%esp
f010aee2:	6a 44                	push   $0x44
f010aee4:	6a 00                	push   $0x0
f010aee6:	50                   	push   %eax
f010aee7:	e8 69 6d 02 00       	call   f0131c55 <memset>
f010aeec:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010aeef:	8b 45 08             	mov    0x8(%ebp),%eax
f010aef2:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010aef8:	8b 45 08             	mov    0x8(%ebp),%eax
f010aefb:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010af01:	8b 45 08             	mov    0x8(%ebp),%eax
f010af04:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010af0a:	8b 45 08             	mov    0x8(%ebp),%eax
f010af0d:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010af14:	8b 45 08             	mov    0x8(%ebp),%eax
f010af17:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010af1d:	8b 45 08             	mov    0x8(%ebp),%eax
f010af20:	8b 40 38             	mov    0x38(%eax),%eax
f010af23:	80 cc 02             	or     $0x2,%ah
f010af26:	89 c2                	mov    %eax,%edx
f010af28:	8b 45 08             	mov    0x8(%ebp),%eax
f010af2b:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010af2e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010af32:	75 17                	jne    f010af4b <complete_environment_initialization+0x1b1>
f010af34:	83 ec 04             	sub    $0x4,%esp
f010af37:	68 4a 68 13 f0       	push   $0xf013684a
f010af3c:	68 61 03 00 00       	push   $0x361
f010af41:	68 2d 68 13 f0       	push   $0xf013682d
f010af46:	e8 ba 52 ff ff       	call   f0100205 <_panic>
f010af4b:	8b 45 08             	mov    0x8(%ebp),%eax
f010af4e:	8b 40 44             	mov    0x44(%eax),%eax
f010af51:	85 c0                	test   %eax,%eax
f010af53:	74 11                	je     f010af66 <complete_environment_initialization+0x1cc>
f010af55:	8b 45 08             	mov    0x8(%ebp),%eax
f010af58:	8b 40 44             	mov    0x44(%eax),%eax
f010af5b:	8b 55 08             	mov    0x8(%ebp),%edx
f010af5e:	8b 52 48             	mov    0x48(%edx),%edx
f010af61:	89 50 48             	mov    %edx,0x48(%eax)
f010af64:	eb 0b                	jmp    f010af71 <complete_environment_initialization+0x1d7>
f010af66:	8b 45 08             	mov    0x8(%ebp),%eax
f010af69:	8b 40 48             	mov    0x48(%eax),%eax
f010af6c:	a3 7c af 85 f0       	mov    %eax,0xf085af7c
f010af71:	8b 45 08             	mov    0x8(%ebp),%eax
f010af74:	8b 40 48             	mov    0x48(%eax),%eax
f010af77:	85 c0                	test   %eax,%eax
f010af79:	74 11                	je     f010af8c <complete_environment_initialization+0x1f2>
f010af7b:	8b 45 08             	mov    0x8(%ebp),%eax
f010af7e:	8b 40 48             	mov    0x48(%eax),%eax
f010af81:	8b 55 08             	mov    0x8(%ebp),%edx
f010af84:	8b 52 44             	mov    0x44(%edx),%edx
f010af87:	89 50 44             	mov    %edx,0x44(%eax)
f010af8a:	eb 0b                	jmp    f010af97 <complete_environment_initialization+0x1fd>
f010af8c:	8b 45 08             	mov    0x8(%ebp),%eax
f010af8f:	8b 40 44             	mov    0x44(%eax),%eax
f010af92:	a3 78 af 85 f0       	mov    %eax,0xf085af78
f010af97:	8b 45 08             	mov    0x8(%ebp),%eax
f010af9a:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010afa1:	8b 45 08             	mov    0x8(%ebp),%eax
f010afa4:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010afab:	a1 84 af 85 f0       	mov    0xf085af84,%eax
f010afb0:	48                   	dec    %eax
f010afb1:	a3 84 af 85 f0       	mov    %eax,0xf085af84
	return ;
f010afb6:	90                   	nop
}
f010afb7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010afba:	c9                   	leave  
f010afbb:	c3                   	ret    

f010afbc <set_environment_entry_point>:

//===============================================
// 9) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010afbc:	55                   	push   %ebp
f010afbd:	89 e5                	mov    %esp,%ebp
f010afbf:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010afc2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010afc5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010afc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010afcb:	8b 00                	mov    (%eax),%eax
f010afcd:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010afd2:	74 17                	je     f010afeb <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010afd4:	83 ec 04             	sub    $0x4,%esp
f010afd7:	68 83 69 13 f0       	push   $0xf0136983
f010afdc:	68 6d 03 00 00       	push   $0x36d
f010afe1:	68 2d 68 13 f0       	push   $0xf013682d
f010afe6:	e8 1a 52 ff ff       	call   f0100205 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010afeb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010afee:	8b 40 18             	mov    0x18(%eax),%eax
f010aff1:	89 c2                	mov    %eax,%edx
f010aff3:	8b 45 08             	mov    0x8(%ebp),%eax
f010aff6:	89 50 30             	mov    %edx,0x30(%eax)
}
f010aff9:	90                   	nop
f010affa:	c9                   	leave  
f010affb:	c3                   	ret    

f010affc <share_pws_at_user_space>:

//===============================================
// 10) SHARE WS AT USER SPACE (READ ONLY):
//===============================================
void share_pws_at_user_space(struct Env* e)
{
f010affc:	55                   	push   %ebp
f010affd:	89 e5                	mov    %esp,%ebp
f010afff:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
f010b002:	8b 45 08             	mov    0x8(%ebp),%eax
f010b005:	c7 80 9c 05 00 00 00 	movl   $0xa0000000,0x59c(%eax)
f010b00c:	00 00 a0 
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
f010b00f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b012:	8b 40 78             	mov    0x78(%eax),%eax
f010b015:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010b018:	8b 45 08             	mov    0x8(%ebp),%eax
f010b01b:	8b 50 74             	mov    0x74(%eax),%edx
f010b01e:	89 d0                	mov    %edx,%eax
f010b020:	01 c0                	add    %eax,%eax
f010b022:	01 d0                	add    %edx,%eax
f010b024:	c1 e0 03             	shl    $0x3,%eax
f010b027:	89 45 ec             	mov    %eax,-0x14(%ebp)
	unsigned int dva = (unsigned int) (e->__uptr_pws);
f010b02a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b02d:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010b033:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010b036:	8b 45 08             	mov    0x8(%ebp),%eax
f010b039:	8b 40 78             	mov    0x78(%eax),%eax
f010b03c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b03f:	eb 71                	jmp    f010b0b2 <share_pws_at_user_space+0xb6>
	{
		//2017: Copy the table entries instead of mapping (to avoid increasing the number of references of corresponding frames)
		//unsigned int pa = kheap_physical_address(sva);
		//map_frame(e->env_page_directory, to_frame_info(pa), dva, PERM_USER);
		uint32 pa = kheap_physical_address(sva);
f010b041:	83 ec 0c             	sub    $0xc,%esp
f010b044:	ff 75 f4             	pushl  -0xc(%ebp)
f010b047:	e8 ff cb ff ff       	call   f0107c4b <kheap_physical_address>
f010b04c:	83 c4 10             	add    $0x10,%esp
f010b04f:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32* ptr_page_table;
		if (get_page_table(e->env_page_directory,  dva, &ptr_page_table) == TABLE_NOT_EXIST)
f010b052:	8b 45 08             	mov    0x8(%ebp),%eax
f010b055:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b058:	83 ec 04             	sub    $0x4,%esp
f010b05b:	8d 55 e4             	lea    -0x1c(%ebp),%edx
f010b05e:	52                   	push   %edx
f010b05f:	ff 75 f0             	pushl  -0x10(%ebp)
f010b062:	50                   	push   %eax
f010b063:	e8 64 ba ff ff       	call   f0106acc <get_page_table>
f010b068:	83 c4 10             	add    $0x10,%esp
f010b06b:	83 f8 01             	cmp    $0x1,%eax
f010b06e:	75 18                	jne    f010b088 <share_pws_at_user_space+0x8c>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
f010b070:	8b 45 08             	mov    0x8(%ebp),%eax
f010b073:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b076:	83 ec 08             	sub    $0x8,%esp
f010b079:	ff 75 f0             	pushl  -0x10(%ebp)
f010b07c:	50                   	push   %eax
f010b07d:	e8 a0 bb ff ff       	call   f0106c22 <create_page_table>
f010b082:	83 c4 10             	add    $0x10,%esp
f010b085:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
f010b088:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b08b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b08e:	c1 ea 0c             	shr    $0xc,%edx
f010b091:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010b097:	c1 e2 02             	shl    $0x2,%edx
f010b09a:	01 d0                	add    %edx,%eax
f010b09c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010b09f:	83 ca 05             	or     $0x5,%edx
f010b0a2:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
	unsigned int dva = (unsigned int) (e->__uptr_pws);
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010b0a4:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010b0ab:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f010b0b2:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0b5:	8b 40 78             	mov    0x78(%eax),%eax
f010b0b8:	89 c2                	mov    %eax,%edx
f010b0ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b0bd:	01 d0                	add    %edx,%eax
f010b0bf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010b0c2:	0f 87 79 ff ff ff    	ja     f010b041 <share_pws_at_user_space+0x45>
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
#else
	panic("share_pws_at_user_space(): should not be called when kernel heap is disabled.");
#endif
}
f010b0c8:	90                   	nop
f010b0c9:	c9                   	leave  
f010b0ca:	c3                   	ret    

f010b0cb <unshare_pws_at_user_space>:

//===============================================
// 11) REMOVE THE SHARED WS FROM USER SPACE:
//===============================================
void unshare_pws_at_user_space(struct Env *e)
{
f010b0cb:	55                   	push   %ebp
f010b0cc:	89 e5                	mov    %esp,%ebp
f010b0ce:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	{
		uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010b0d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0d4:	8b 50 74             	mov    0x74(%eax),%edx
f010b0d7:	89 d0                	mov    %edx,%eax
f010b0d9:	01 c0                	add    %eax,%eax
f010b0db:	01 d0                	add    %edx,%eax
f010b0dd:	c1 e0 03             	shl    $0x3,%eax
f010b0e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		unsigned int sva = (unsigned int) e->__uptr_pws;
f010b0e3:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0e6:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010b0ec:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
f010b0ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0f2:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010b0f8:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010b0fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b0fe:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010b103:	89 45 f4             	mov    %eax,-0xc(%ebp)
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010b106:	eb 46                	jmp    f010b14e <unshare_pws_at_user_space+0x83>
		{
			unsigned int * uws_table;
			get_page_table(e->env_page_directory, tsva, &uws_table );
f010b108:	8b 45 08             	mov    0x8(%ebp),%eax
f010b10b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b10e:	83 ec 04             	sub    $0x4,%esp
f010b111:	8d 55 e0             	lea    -0x20(%ebp),%edx
f010b114:	52                   	push   %edx
f010b115:	ff 75 f4             	pushl  -0xc(%ebp)
f010b118:	50                   	push   %eax
f010b119:	e8 ae b9 ff ff       	call   f0106acc <get_page_table>
f010b11e:	83 c4 10             	add    $0x10,%esp
			kfree(uws_table);
f010b121:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b124:	83 ec 0c             	sub    $0xc,%esp
f010b127:	50                   	push   %eax
f010b128:	e8 ec c9 ff ff       	call   f0107b19 <kfree>
f010b12d:	83 c4 10             	add    $0x10,%esp
			e->env_page_directory[PDX(tsva)] = 0;
f010b130:	8b 45 08             	mov    0x8(%ebp),%eax
f010b133:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b136:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b139:	c1 ea 16             	shr    $0x16,%edx
f010b13c:	c1 e2 02             	shl    $0x2,%edx
f010b13f:	01 d0                	add    %edx,%eax
f010b141:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010b147:	81 45 f4 00 00 40 00 	addl   $0x400000,-0xc(%ebp)
f010b14e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b151:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010b157:	89 c2                	mov    %eax,%edx
f010b159:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b15c:	01 d0                	add    %edx,%eax
f010b15e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010b161:	77 a5                	ja     f010b108 <unshare_pws_at_user_space+0x3d>

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010b163:	0f 20 d8             	mov    %cr3,%eax
f010b166:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010b169:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b16c:	0f 22 d8             	mov    %eax,%cr3
		tlbflush();
	}
#else
	panic("__remove_pws_user_pages(): should not be called when kernel heap is disabled.");
#endif
}
f010b16f:	90                   	nop
f010b170:	c9                   	leave  
f010b171:	c3                   	ret    

f010b172 <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 12) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010b172:	55                   	push   %ebp
f010b173:	89 e5                	mov    %esp,%ebp
f010b175:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010b178:	8b 45 08             	mov    0x8(%ebp),%eax
f010b17b:	8b 40 10             	mov    0x10(%eax),%eax
f010b17e:	8d 48 01             	lea    0x1(%eax),%ecx
f010b181:	8b 55 08             	mov    0x8(%ebp),%edx
f010b184:	89 4a 10             	mov    %ecx,0x10(%edx)
f010b187:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010b18a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b18d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010b190:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b193:	8b 00                	mov    (%eax),%eax
f010b195:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010b19a:	74 17                	je     f010b1b3 <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010b19c:	83 ec 04             	sub    $0x4,%esp
f010b19f:	68 83 69 13 f0       	push   $0xf0136983
f010b1a4:	68 b7 03 00 00       	push   $0x3b7
f010b1a9:	68 2d 68 13 f0       	push   $0xf013682d
f010b1ae:	e8 52 50 ff ff       	call   f0100205 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010b1b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b1b6:	8b 50 1c             	mov    0x1c(%eax),%edx
f010b1b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b1bc:	01 d0                	add    %edx,%eax
f010b1be:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010b1c1:	eb 0f                	jmp    f010b1d2 <PROGRAM_SEGMENT_NEXT+0x60>
f010b1c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1c6:	8b 40 10             	mov    0x10(%eax),%eax
f010b1c9:	8d 50 01             	lea    0x1(%eax),%edx
f010b1cc:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1cf:	89 50 10             	mov    %edx,0x10(%eax)
f010b1d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1d5:	8b 40 10             	mov    0x10(%eax),%eax
f010b1d8:	c1 e0 05             	shl    $0x5,%eax
f010b1db:	89 c2                	mov    %eax,%edx
f010b1dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b1e0:	01 d0                	add    %edx,%eax
f010b1e2:	8b 00                	mov    (%eax),%eax
f010b1e4:	83 f8 01             	cmp    $0x1,%eax
f010b1e7:	74 13                	je     f010b1fc <PROGRAM_SEGMENT_NEXT+0x8a>
f010b1e9:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1ec:	8b 50 10             	mov    0x10(%eax),%edx
f010b1ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b1f2:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b1f5:	0f b7 c0             	movzwl %ax,%eax
f010b1f8:	39 c2                	cmp    %eax,%edx
f010b1fa:	72 c7                	jb     f010b1c3 <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010b1fc:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1ff:	8b 40 10             	mov    0x10(%eax),%eax
f010b202:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010b205:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b208:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b20b:	0f b7 c0             	movzwl %ax,%eax
f010b20e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010b211:	7e 63                	jle    f010b276 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010b213:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b216:	c1 e0 05             	shl    $0x5,%eax
f010b219:	89 c2                	mov    %eax,%edx
f010b21b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b21e:	01 d0                	add    %edx,%eax
f010b220:	8b 50 04             	mov    0x4(%eax),%edx
f010b223:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b226:	01 c2                	add    %eax,%edx
f010b228:	8b 45 08             	mov    0x8(%ebp),%eax
f010b22b:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010b22d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b230:	c1 e0 05             	shl    $0x5,%eax
f010b233:	89 c2                	mov    %eax,%edx
f010b235:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b238:	01 d0                	add    %edx,%eax
f010b23a:	8b 50 14             	mov    0x14(%eax),%edx
f010b23d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b240:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010b243:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b246:	c1 e0 05             	shl    $0x5,%eax
f010b249:	89 c2                	mov    %eax,%edx
f010b24b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b24e:	01 d0                	add    %edx,%eax
f010b250:	8b 50 10             	mov    0x10(%eax),%edx
f010b253:	8b 45 08             	mov    0x8(%ebp),%eax
f010b256:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010b259:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b25c:	c1 e0 05             	shl    $0x5,%eax
f010b25f:	89 c2                	mov    %eax,%edx
f010b261:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b264:	01 d0                	add    %edx,%eax
f010b266:	8b 40 08             	mov    0x8(%eax),%eax
f010b269:	89 c2                	mov    %eax,%edx
f010b26b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b26e:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010b271:	8b 45 08             	mov    0x8(%ebp),%eax
f010b274:	eb 05                	jmp    f010b27b <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010b276:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b27b:	c9                   	leave  
f010b27c:	c3                   	ret    

f010b27d <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 13) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010b27d:	55                   	push   %ebp
f010b27e:	89 e5                	mov    %esp,%ebp
f010b280:	57                   	push   %edi
f010b281:	56                   	push   %esi
f010b282:	53                   	push   %ebx
f010b283:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010b286:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010b28d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b290:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010b293:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b296:	8b 00                	mov    (%eax),%eax
f010b298:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010b29d:	74 17                	je     f010b2b6 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010b29f:	83 ec 04             	sub    $0x4,%esp
f010b2a2:	68 83 69 13 f0       	push   $0xf0136983
f010b2a7:	68 d3 03 00 00       	push   $0x3d3
f010b2ac:	68 2d 68 13 f0       	push   $0xf013682d
f010b2b1:	e8 4f 4f ff ff       	call   f0100205 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010b2b6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b2b9:	8b 50 1c             	mov    0x1c(%eax),%edx
f010b2bc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b2bf:	01 d0                	add    %edx,%eax
f010b2c1:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010b2c4:	eb 07                	jmp    f010b2cd <PROGRAM_SEGMENT_FIRST+0x50>
f010b2c6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b2c9:	40                   	inc    %eax
f010b2ca:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010b2cd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b2d0:	c1 e0 05             	shl    $0x5,%eax
f010b2d3:	89 c2                	mov    %eax,%edx
f010b2d5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b2d8:	01 d0                	add    %edx,%eax
f010b2da:	8b 00                	mov    (%eax),%eax
f010b2dc:	83 f8 01             	cmp    $0x1,%eax
f010b2df:	74 10                	je     f010b2f1 <PROGRAM_SEGMENT_FIRST+0x74>
f010b2e1:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010b2e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b2e7:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b2ea:	0f b7 c0             	movzwl %ax,%eax
f010b2ed:	39 c2                	cmp    %eax,%edx
f010b2ef:	72 d5                	jb     f010b2c6 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010b2f1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b2f4:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010b2f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b2fa:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b2fd:	0f b7 c0             	movzwl %ax,%eax
f010b300:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010b303:	7e 68                	jle    f010b36d <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010b305:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b308:	c1 e0 05             	shl    $0x5,%eax
f010b30b:	89 c2                	mov    %eax,%edx
f010b30d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b310:	01 d0                	add    %edx,%eax
f010b312:	8b 50 04             	mov    0x4(%eax),%edx
f010b315:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b318:	01 d0                	add    %edx,%eax
f010b31a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010b31d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b320:	c1 e0 05             	shl    $0x5,%eax
f010b323:	89 c2                	mov    %eax,%edx
f010b325:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b328:	01 d0                	add    %edx,%eax
f010b32a:	8b 40 14             	mov    0x14(%eax),%eax
f010b32d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010b330:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b333:	c1 e0 05             	shl    $0x5,%eax
f010b336:	89 c2                	mov    %eax,%edx
f010b338:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b33b:	01 d0                	add    %edx,%eax
f010b33d:	8b 40 10             	mov    0x10(%eax),%eax
f010b340:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010b343:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b346:	c1 e0 05             	shl    $0x5,%eax
f010b349:	89 c2                	mov    %eax,%edx
f010b34b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b34e:	01 d0                	add    %edx,%eax
f010b350:	8b 40 08             	mov    0x8(%eax),%eax
f010b353:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010b356:	8b 45 08             	mov    0x8(%ebp),%eax
f010b359:	89 c3                	mov    %eax,%ebx
f010b35b:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010b35e:	ba 05 00 00 00       	mov    $0x5,%edx
f010b363:	89 df                	mov    %ebx,%edi
f010b365:	89 c6                	mov    %eax,%esi
f010b367:	89 d1                	mov    %edx,%ecx
f010b369:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010b36b:	eb 1c                	jmp    f010b389 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010b36d:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010b374:	8b 45 08             	mov    0x8(%ebp),%eax
f010b377:	89 c3                	mov    %eax,%ebx
f010b379:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010b37c:	ba 05 00 00 00       	mov    $0x5,%edx
f010b381:	89 df                	mov    %ebx,%edi
f010b383:	89 c6                	mov    %eax,%esi
f010b385:	89 d1                	mov    %edx,%ecx
f010b387:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010b389:	8b 45 08             	mov    0x8(%ebp),%eax
f010b38c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010b38f:	5b                   	pop    %ebx
f010b390:	5e                   	pop    %esi
f010b391:	5f                   	pop    %edi
f010b392:	5d                   	pop    %ebp
f010b393:	c2 04 00             	ret    $0x4

f010b396 <cleanup_buffers>:

//===============================================
// 14) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================
void cleanup_buffers(struct Env* e)
{
f010b396:	55                   	push   %ebp
f010b397:	89 e5                	mov    %esp,%ebp
f010b399:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010b39c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010b3a3:	a1 34 b8 85 f0       	mov    0xf085b834,%eax
f010b3a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b3ab:	e9 c3 00 00 00       	jmp    f010b473 <cleanup_buffers+0xdd>
	{
		if(ptr_fi->environment == e)
f010b3b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b3b3:	8b 40 10             	mov    0x10(%eax),%eax
f010b3b6:	3b 45 08             	cmp    0x8(%ebp),%eax
f010b3b9:	0f 85 ac 00 00 00    	jne    f010b46b <cleanup_buffers+0xd5>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010b3bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b3c2:	8b 50 0c             	mov    0xc(%eax),%edx
f010b3c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b3c8:	8b 40 10             	mov    0x10(%eax),%eax
f010b3cb:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b3ce:	83 ec 08             	sub    $0x8,%esp
f010b3d1:	52                   	push   %edx
f010b3d2:	50                   	push   %eax
f010b3d3:	e8 7c ca ff ff       	call   f0107e54 <pt_clear_page_table_entry>
f010b3d8:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010b3db:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b3df:	75 17                	jne    f010b3f8 <cleanup_buffers+0x62>
f010b3e1:	83 ec 04             	sub    $0x4,%esp
f010b3e4:	68 4a 68 13 f0       	push   $0xf013684a
f010b3e9:	68 fa 03 00 00       	push   $0x3fa
f010b3ee:	68 2d 68 13 f0       	push   $0xf013682d
f010b3f3:	e8 0d 4e ff ff       	call   f0100205 <_panic>
f010b3f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b3fb:	8b 00                	mov    (%eax),%eax
f010b3fd:	85 c0                	test   %eax,%eax
f010b3ff:	74 10                	je     f010b411 <cleanup_buffers+0x7b>
f010b401:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b404:	8b 00                	mov    (%eax),%eax
f010b406:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b409:	8b 52 04             	mov    0x4(%edx),%edx
f010b40c:	89 50 04             	mov    %edx,0x4(%eax)
f010b40f:	eb 0b                	jmp    f010b41c <cleanup_buffers+0x86>
f010b411:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b414:	8b 40 04             	mov    0x4(%eax),%eax
f010b417:	a3 38 b8 85 f0       	mov    %eax,0xf085b838
f010b41c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b41f:	8b 40 04             	mov    0x4(%eax),%eax
f010b422:	85 c0                	test   %eax,%eax
f010b424:	74 0f                	je     f010b435 <cleanup_buffers+0x9f>
f010b426:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b429:	8b 40 04             	mov    0x4(%eax),%eax
f010b42c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b42f:	8b 12                	mov    (%edx),%edx
f010b431:	89 10                	mov    %edx,(%eax)
f010b433:	eb 0a                	jmp    f010b43f <cleanup_buffers+0xa9>
f010b435:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b438:	8b 00                	mov    (%eax),%eax
f010b43a:	a3 34 b8 85 f0       	mov    %eax,0xf085b834
f010b43f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b442:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010b448:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b44b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010b452:	a1 40 b8 85 f0       	mov    0xf085b840,%eax
f010b457:	48                   	dec    %eax
f010b458:	a3 40 b8 85 f0       	mov    %eax,0xf085b840

			free_frame(ptr_fi);
f010b45d:	83 ec 0c             	sub    $0xc,%esp
f010b460:	ff 75 f4             	pushl  -0xc(%ebp)
f010b463:	e8 ba b5 ff ff       	call   f0106a22 <free_frame>
f010b468:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010b46b:	a1 3c b8 85 f0       	mov    0xf085b83c,%eax
f010b470:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b473:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b477:	74 07                	je     f010b480 <cleanup_buffers+0xea>
f010b479:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b47c:	8b 00                	mov    (%eax),%eax
f010b47e:	eb 05                	jmp    f010b485 <cleanup_buffers+0xef>
f010b480:	b8 00 00 00 00       	mov    $0x0,%eax
f010b485:	a3 3c b8 85 f0       	mov    %eax,0xf085b83c
f010b48a:	a1 3c b8 85 f0       	mov    0xf085b83c,%eax
f010b48f:	85 c0                	test   %eax,%eax
f010b491:	0f 85 19 ff ff ff    	jne    f010b3b0 <cleanup_buffers+0x1a>
f010b497:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b49b:	0f 85 0f ff ff ff    	jne    f010b3b0 <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010b4a1:	90                   	nop
f010b4a2:	c9                   	leave  
f010b4a3:	c3                   	ret    

f010b4a4 <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010b4a4:	55                   	push   %ebp
f010b4a5:	89 e5                	mov    %esp,%ebp
f010b4a7:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f010b4aa:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010b4ae:	7e 06                	jle    f010b4b6 <set_program_priority+0x12>
f010b4b0:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010b4b4:	7e 14                	jle    f010b4ca <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f010b4b6:	83 ec 04             	sub    $0x4,%esp
f010b4b9:	68 9c 69 13 f0       	push   $0xf013699c
f010b4be:	6a 10                	push   $0x10
f010b4c0:	68 c0 69 13 f0       	push   $0xf01369c0
f010b4c5:	e8 3b 4d ff ff       	call   f0100205 <_panic>
		return;
	}
	if(env == NULL)
f010b4ca:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010b4ce:	74 75                	je     f010b545 <set_program_priority+0xa1>
		return;
	switch(priority)
f010b4d0:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010b4d4:	77 56                	ja     f010b52c <set_program_priority+0x88>
f010b4d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b4d9:	c1 e0 02             	shl    $0x2,%eax
f010b4dc:	05 fc 69 13 f0       	add    $0xf01369fc,%eax
f010b4e1:	8b 00                	mov    (%eax),%eax
f010b4e3:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f010b4e5:	83 ec 08             	sub    $0x8,%esp
f010b4e8:	6a 01                	push   $0x1
f010b4ea:	ff 75 08             	pushl  0x8(%ebp)
f010b4ed:	e8 ef d3 ff ff       	call   f01088e1 <half_WS_Size>
f010b4f2:	83 c4 10             	add    $0x10,%esp
			break;
f010b4f5:	eb 35                	jmp    f010b52c <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f010b4f7:	83 ec 08             	sub    $0x8,%esp
f010b4fa:	6a 00                	push   $0x0
f010b4fc:	ff 75 08             	pushl  0x8(%ebp)
f010b4ff:	e8 dd d3 ff ff       	call   f01088e1 <half_WS_Size>
f010b504:	83 c4 10             	add    $0x10,%esp
			break;
f010b507:	eb 23                	jmp    f010b52c <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f010b509:	83 ec 08             	sub    $0x8,%esp
f010b50c:	6a 01                	push   $0x1
f010b50e:	ff 75 08             	pushl  0x8(%ebp)
f010b511:	e8 ae d3 ff ff       	call   f01088c4 <double_WS_Size>
f010b516:	83 c4 10             	add    $0x10,%esp
			break;
f010b519:	eb 11                	jmp    f010b52c <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f010b51b:	83 ec 08             	sub    $0x8,%esp
f010b51e:	6a 00                	push   $0x0
f010b520:	ff 75 08             	pushl  0x8(%ebp)
f010b523:	e8 9c d3 ff ff       	call   f01088c4 <double_WS_Size>
f010b528:	83 c4 10             	add    $0x10,%esp
			break;
f010b52b:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f010b52c:	8b 45 08             	mov    0x8(%ebp),%eax
f010b52f:	8b 40 74             	mov    0x74(%eax),%eax
f010b532:	83 ec 08             	sub    $0x8,%esp
f010b535:	50                   	push   %eax
f010b536:	68 dd 69 13 f0       	push   $0xf01369dd
f010b53b:	e8 ce 57 ff ff       	call   f0100d0e <cprintf>
f010b540:	83 c4 10             	add    $0x10,%esp
f010b543:	eb 01                	jmp    f010b546 <set_program_priority+0xa2>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f010b545:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f010b546:	c9                   	leave  
f010b547:	c3                   	ret    

f010b548 <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010b548:	55                   	push   %ebp
f010b549:	89 e5                	mov    %esp,%ebp
f010b54b:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b54e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b555:	eb 29                	jmp    f010b580 <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010b557:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b55a:	89 d0                	mov    %edx,%eax
f010b55c:	01 c0                	add    %eax,%eax
f010b55e:	01 d0                	add    %edx,%eax
f010b560:	c1 e0 02             	shl    $0x2,%eax
f010b563:	05 00 39 19 f0       	add    $0xf0193900,%eax
f010b568:	8b 00                	mov    (%eax),%eax
f010b56a:	83 ec 08             	sub    $0x8,%esp
f010b56d:	50                   	push   %eax
f010b56e:	ff 75 08             	pushl  0x8(%ebp)
f010b571:	e8 fd 65 02 00       	call   f0131b73 <strcmp>
f010b576:	83 c4 10             	add    $0x10,%esp
f010b579:	85 c0                	test   %eax,%eax
f010b57b:	74 0f                	je     f010b58c <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b57d:	ff 45 f4             	incl   -0xc(%ebp)
f010b580:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b585:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b588:	7c cd                	jl     f010b557 <get_user_program_info+0xf>
f010b58a:	eb 01                	jmp    f010b58d <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010b58c:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b58d:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b592:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b595:	75 1a                	jne    f010b5b1 <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010b597:	83 ec 08             	sub    $0x8,%esp
f010b59a:	ff 75 08             	pushl  0x8(%ebp)
f010b59d:	68 91 75 13 f0       	push   $0xf0137591
f010b5a2:	e8 67 57 ff ff       	call   f0100d0e <cprintf>
f010b5a7:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b5aa:	b8 00 00 00 00       	mov    $0x0,%eax
f010b5af:	eb 11                	jmp    f010b5c2 <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010b5b1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b5b4:	89 d0                	mov    %edx,%eax
f010b5b6:	01 c0                	add    %eax,%eax
f010b5b8:	01 d0                	add    %edx,%eax
f010b5ba:	c1 e0 02             	shl    $0x2,%eax
f010b5bd:	05 00 39 19 f0       	add    $0xf0193900,%eax
}
f010b5c2:	c9                   	leave  
f010b5c3:	c3                   	ret    

f010b5c4 <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010b5c4:	55                   	push   %ebp
f010b5c5:	89 e5                	mov    %esp,%ebp
f010b5c7:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b5ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b5d1:	eb 30                	jmp    f010b603 <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010b5d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b5d6:	89 d0                	mov    %edx,%eax
f010b5d8:	01 c0                	add    %eax,%eax
f010b5da:	01 d0                	add    %edx,%eax
f010b5dc:	c1 e0 02             	shl    $0x2,%eax
f010b5df:	05 00 39 19 f0       	add    $0xf0193900,%eax
f010b5e4:	8b 00                	mov    (%eax),%eax
f010b5e6:	8b 55 08             	mov    0x8(%ebp),%edx
f010b5e9:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010b5ef:	83 ec 08             	sub    $0x8,%esp
f010b5f2:	50                   	push   %eax
f010b5f3:	52                   	push   %edx
f010b5f4:	e8 7a 65 02 00       	call   f0131b73 <strcmp>
f010b5f9:	83 c4 10             	add    $0x10,%esp
f010b5fc:	85 c0                	test   %eax,%eax
f010b5fe:	74 0f                	je     f010b60f <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b600:	ff 45 f4             	incl   -0xc(%ebp)
f010b603:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b608:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b60b:	7c c6                	jl     f010b5d3 <get_user_program_info_by_env+0xf>
f010b60d:	eb 01                	jmp    f010b610 <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010b60f:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b610:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b615:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b618:	75 17                	jne    f010b631 <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f010b61a:	83 ec 0c             	sub    $0xc,%esp
f010b61d:	68 ac 75 13 f0       	push   $0xf01375ac
f010b622:	e8 e7 56 ff ff       	call   f0100d0e <cprintf>
f010b627:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b62a:	b8 00 00 00 00       	mov    $0x0,%eax
f010b62f:	eb 11                	jmp    f010b642 <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f010b631:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b634:	89 d0                	mov    %edx,%eax
f010b636:	01 c0                	add    %eax,%eax
f010b638:	01 d0                	add    %edx,%eax
f010b63a:	c1 e0 02             	shl    $0x2,%eax
f010b63d:	05 00 39 19 f0       	add    $0xf0193900,%eax
}
f010b642:	c9                   	leave  
f010b643:	c3                   	ret    

f010b644 <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010b644:	55                   	push   %ebp
f010b645:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010b647:	8b 45 08             	mov    0x8(%ebp),%eax
f010b64a:	83 f8 13             	cmp    $0x13,%eax
f010b64d:	77 0c                	ja     f010b65b <trapname+0x17>
		return excnames[trapno];
f010b64f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b652:	8b 04 85 00 7a 13 f0 	mov    -0xfec8600(,%eax,4),%eax
f010b659:	eb 12                	jmp    f010b66d <trapname+0x29>
	if (trapno == T_SYSCALL)
f010b65b:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010b65f:	75 07                	jne    f010b668 <trapname+0x24>
		return "System call";
f010b661:	b8 e0 75 13 f0       	mov    $0xf01375e0,%eax
f010b666:	eb 05                	jmp    f010b66d <trapname+0x29>
	return "(unknown trap)";
f010b668:	b8 ec 75 13 f0       	mov    $0xf01375ec,%eax
}
f010b66d:	5d                   	pop    %ebp
f010b66e:	c3                   	ret    

f010b66f <idt_init>:


void
idt_init(void)
{
f010b66f:	55                   	push   %ebp
f010b670:	89 e5                	mov    %esp,%ebp
f010b672:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010b675:	b8 04 cd 10 f0       	mov    $0xf010cd04,%eax
f010b67a:	66 a3 10 b0 85 f0    	mov    %ax,0xf085b010
f010b680:	66 c7 05 12 b0 85 f0 	movw   $0x8,0xf085b012
f010b687:	08 00 
f010b689:	a0 14 b0 85 f0       	mov    0xf085b014,%al
f010b68e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b691:	a2 14 b0 85 f0       	mov    %al,0xf085b014
f010b696:	a0 14 b0 85 f0       	mov    0xf085b014,%al
f010b69b:	83 e0 1f             	and    $0x1f,%eax
f010b69e:	a2 14 b0 85 f0       	mov    %al,0xf085b014
f010b6a3:	a0 15 b0 85 f0       	mov    0xf085b015,%al
f010b6a8:	83 e0 f0             	and    $0xfffffff0,%eax
f010b6ab:	83 c8 0e             	or     $0xe,%eax
f010b6ae:	a2 15 b0 85 f0       	mov    %al,0xf085b015
f010b6b3:	a0 15 b0 85 f0       	mov    0xf085b015,%al
f010b6b8:	83 e0 ef             	and    $0xffffffef,%eax
f010b6bb:	a2 15 b0 85 f0       	mov    %al,0xf085b015
f010b6c0:	a0 15 b0 85 f0       	mov    0xf085b015,%al
f010b6c5:	83 e0 9f             	and    $0xffffff9f,%eax
f010b6c8:	a2 15 b0 85 f0       	mov    %al,0xf085b015
f010b6cd:	a0 15 b0 85 f0       	mov    0xf085b015,%al
f010b6d2:	83 c8 80             	or     $0xffffff80,%eax
f010b6d5:	a2 15 b0 85 f0       	mov    %al,0xf085b015
f010b6da:	b8 04 cd 10 f0       	mov    $0xf010cd04,%eax
f010b6df:	c1 e8 10             	shr    $0x10,%eax
f010b6e2:	66 a3 16 b0 85 f0    	mov    %ax,0xf085b016
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010b6e8:	b8 0c cd 10 f0       	mov    $0xf010cd0c,%eax
f010b6ed:	66 a3 20 b1 85 f0    	mov    %ax,0xf085b120
f010b6f3:	66 c7 05 22 b1 85 f0 	movw   $0x8,0xf085b122
f010b6fa:	08 00 
f010b6fc:	a0 24 b1 85 f0       	mov    0xf085b124,%al
f010b701:	83 e0 e0             	and    $0xffffffe0,%eax
f010b704:	a2 24 b1 85 f0       	mov    %al,0xf085b124
f010b709:	a0 24 b1 85 f0       	mov    0xf085b124,%al
f010b70e:	83 e0 1f             	and    $0x1f,%eax
f010b711:	a2 24 b1 85 f0       	mov    %al,0xf085b124
f010b716:	a0 25 b1 85 f0       	mov    0xf085b125,%al
f010b71b:	83 e0 f0             	and    $0xfffffff0,%eax
f010b71e:	83 c8 0e             	or     $0xe,%eax
f010b721:	a2 25 b1 85 f0       	mov    %al,0xf085b125
f010b726:	a0 25 b1 85 f0       	mov    0xf085b125,%al
f010b72b:	83 e0 ef             	and    $0xffffffef,%eax
f010b72e:	a2 25 b1 85 f0       	mov    %al,0xf085b125
f010b733:	a0 25 b1 85 f0       	mov    0xf085b125,%al
f010b738:	83 c8 60             	or     $0x60,%eax
f010b73b:	a2 25 b1 85 f0       	mov    %al,0xf085b125
f010b740:	a0 25 b1 85 f0       	mov    0xf085b125,%al
f010b745:	83 c8 80             	or     $0xffffff80,%eax
f010b748:	a2 25 b1 85 f0       	mov    %al,0xf085b125
f010b74d:	b8 0c cd 10 f0       	mov    $0xf010cd0c,%eax
f010b752:	c1 e8 10             	shr    $0x10,%eax
f010b755:	66 a3 26 b1 85 f0    	mov    %ax,0xf085b126
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010b75b:	b8 16 cd 10 f0       	mov    $0xf010cd16,%eax
f010b760:	66 a3 e0 af 85 f0    	mov    %ax,0xf085afe0
f010b766:	66 c7 05 e2 af 85 f0 	movw   $0x8,0xf085afe2
f010b76d:	08 00 
f010b76f:	a0 e4 af 85 f0       	mov    0xf085afe4,%al
f010b774:	83 e0 e0             	and    $0xffffffe0,%eax
f010b777:	a2 e4 af 85 f0       	mov    %al,0xf085afe4
f010b77c:	a0 e4 af 85 f0       	mov    0xf085afe4,%al
f010b781:	83 e0 1f             	and    $0x1f,%eax
f010b784:	a2 e4 af 85 f0       	mov    %al,0xf085afe4
f010b789:	a0 e5 af 85 f0       	mov    0xf085afe5,%al
f010b78e:	83 e0 f0             	and    $0xfffffff0,%eax
f010b791:	83 c8 0e             	or     $0xe,%eax
f010b794:	a2 e5 af 85 f0       	mov    %al,0xf085afe5
f010b799:	a0 e5 af 85 f0       	mov    0xf085afe5,%al
f010b79e:	83 e0 ef             	and    $0xffffffef,%eax
f010b7a1:	a2 e5 af 85 f0       	mov    %al,0xf085afe5
f010b7a6:	a0 e5 af 85 f0       	mov    0xf085afe5,%al
f010b7ab:	83 e0 9f             	and    $0xffffff9f,%eax
f010b7ae:	a2 e5 af 85 f0       	mov    %al,0xf085afe5
f010b7b3:	a0 e5 af 85 f0       	mov    0xf085afe5,%al
f010b7b8:	83 c8 80             	or     $0xffffff80,%eax
f010b7bb:	a2 e5 af 85 f0       	mov    %al,0xf085afe5
f010b7c0:	b8 16 cd 10 f0       	mov    $0xf010cd16,%eax
f010b7c5:	c1 e8 10             	shr    $0x10,%eax
f010b7c8:	66 a3 e6 af 85 f0    	mov    %ax,0xf085afe6


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010b7ce:	b8 1e cd 10 f0       	mov    $0xf010cd1e,%eax
f010b7d3:	66 a3 a0 af 85 f0    	mov    %ax,0xf085afa0
f010b7d9:	66 c7 05 a2 af 85 f0 	movw   $0x8,0xf085afa2
f010b7e0:	08 00 
f010b7e2:	a0 a4 af 85 f0       	mov    0xf085afa4,%al
f010b7e7:	83 e0 e0             	and    $0xffffffe0,%eax
f010b7ea:	a2 a4 af 85 f0       	mov    %al,0xf085afa4
f010b7ef:	a0 a4 af 85 f0       	mov    0xf085afa4,%al
f010b7f4:	83 e0 1f             	and    $0x1f,%eax
f010b7f7:	a2 a4 af 85 f0       	mov    %al,0xf085afa4
f010b7fc:	a0 a5 af 85 f0       	mov    0xf085afa5,%al
f010b801:	83 e0 f0             	and    $0xfffffff0,%eax
f010b804:	83 c8 0e             	or     $0xe,%eax
f010b807:	a2 a5 af 85 f0       	mov    %al,0xf085afa5
f010b80c:	a0 a5 af 85 f0       	mov    0xf085afa5,%al
f010b811:	83 e0 ef             	and    $0xffffffef,%eax
f010b814:	a2 a5 af 85 f0       	mov    %al,0xf085afa5
f010b819:	a0 a5 af 85 f0       	mov    0xf085afa5,%al
f010b81e:	83 c8 60             	or     $0x60,%eax
f010b821:	a2 a5 af 85 f0       	mov    %al,0xf085afa5
f010b826:	a0 a5 af 85 f0       	mov    0xf085afa5,%al
f010b82b:	83 c8 80             	or     $0xffffff80,%eax
f010b82e:	a2 a5 af 85 f0       	mov    %al,0xf085afa5
f010b833:	b8 1e cd 10 f0       	mov    $0xf010cd1e,%eax
f010b838:	c1 e8 10             	shr    $0x10,%eax
f010b83b:	66 a3 a6 af 85 f0    	mov    %ax,0xf085afa6
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010b841:	b8 28 cd 10 f0       	mov    $0xf010cd28,%eax
f010b846:	66 a3 a8 af 85 f0    	mov    %ax,0xf085afa8
f010b84c:	66 c7 05 aa af 85 f0 	movw   $0x8,0xf085afaa
f010b853:	08 00 
f010b855:	a0 ac af 85 f0       	mov    0xf085afac,%al
f010b85a:	83 e0 e0             	and    $0xffffffe0,%eax
f010b85d:	a2 ac af 85 f0       	mov    %al,0xf085afac
f010b862:	a0 ac af 85 f0       	mov    0xf085afac,%al
f010b867:	83 e0 1f             	and    $0x1f,%eax
f010b86a:	a2 ac af 85 f0       	mov    %al,0xf085afac
f010b86f:	a0 ad af 85 f0       	mov    0xf085afad,%al
f010b874:	83 c8 0f             	or     $0xf,%eax
f010b877:	a2 ad af 85 f0       	mov    %al,0xf085afad
f010b87c:	a0 ad af 85 f0       	mov    0xf085afad,%al
f010b881:	83 e0 ef             	and    $0xffffffef,%eax
f010b884:	a2 ad af 85 f0       	mov    %al,0xf085afad
f010b889:	a0 ad af 85 f0       	mov    0xf085afad,%al
f010b88e:	83 c8 60             	or     $0x60,%eax
f010b891:	a2 ad af 85 f0       	mov    %al,0xf085afad
f010b896:	a0 ad af 85 f0       	mov    0xf085afad,%al
f010b89b:	83 c8 80             	or     $0xffffff80,%eax
f010b89e:	a2 ad af 85 f0       	mov    %al,0xf085afad
f010b8a3:	b8 28 cd 10 f0       	mov    $0xf010cd28,%eax
f010b8a8:	c1 e8 10             	shr    $0x10,%eax
f010b8ab:	66 a3 ae af 85 f0    	mov    %ax,0xf085afae
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010b8b1:	b8 32 cd 10 f0       	mov    $0xf010cd32,%eax
f010b8b6:	66 a3 b0 af 85 f0    	mov    %ax,0xf085afb0
f010b8bc:	66 c7 05 b2 af 85 f0 	movw   $0x8,0xf085afb2
f010b8c3:	08 00 
f010b8c5:	a0 b4 af 85 f0       	mov    0xf085afb4,%al
f010b8ca:	83 e0 e0             	and    $0xffffffe0,%eax
f010b8cd:	a2 b4 af 85 f0       	mov    %al,0xf085afb4
f010b8d2:	a0 b4 af 85 f0       	mov    0xf085afb4,%al
f010b8d7:	83 e0 1f             	and    $0x1f,%eax
f010b8da:	a2 b4 af 85 f0       	mov    %al,0xf085afb4
f010b8df:	a0 b5 af 85 f0       	mov    0xf085afb5,%al
f010b8e4:	83 e0 f0             	and    $0xfffffff0,%eax
f010b8e7:	83 c8 0e             	or     $0xe,%eax
f010b8ea:	a2 b5 af 85 f0       	mov    %al,0xf085afb5
f010b8ef:	a0 b5 af 85 f0       	mov    0xf085afb5,%al
f010b8f4:	83 e0 ef             	and    $0xffffffef,%eax
f010b8f7:	a2 b5 af 85 f0       	mov    %al,0xf085afb5
f010b8fc:	a0 b5 af 85 f0       	mov    0xf085afb5,%al
f010b901:	83 c8 60             	or     $0x60,%eax
f010b904:	a2 b5 af 85 f0       	mov    %al,0xf085afb5
f010b909:	a0 b5 af 85 f0       	mov    0xf085afb5,%al
f010b90e:	83 c8 80             	or     $0xffffff80,%eax
f010b911:	a2 b5 af 85 f0       	mov    %al,0xf085afb5
f010b916:	b8 32 cd 10 f0       	mov    $0xf010cd32,%eax
f010b91b:	c1 e8 10             	shr    $0x10,%eax
f010b91e:	66 a3 b6 af 85 f0    	mov    %ax,0xf085afb6
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010b924:	b8 3c cd 10 f0       	mov    $0xf010cd3c,%eax
f010b929:	66 a3 b8 af 85 f0    	mov    %ax,0xf085afb8
f010b92f:	66 c7 05 ba af 85 f0 	movw   $0x8,0xf085afba
f010b936:	08 00 
f010b938:	a0 bc af 85 f0       	mov    0xf085afbc,%al
f010b93d:	83 e0 e0             	and    $0xffffffe0,%eax
f010b940:	a2 bc af 85 f0       	mov    %al,0xf085afbc
f010b945:	a0 bc af 85 f0       	mov    0xf085afbc,%al
f010b94a:	83 e0 1f             	and    $0x1f,%eax
f010b94d:	a2 bc af 85 f0       	mov    %al,0xf085afbc
f010b952:	a0 bd af 85 f0       	mov    0xf085afbd,%al
f010b957:	83 c8 0f             	or     $0xf,%eax
f010b95a:	a2 bd af 85 f0       	mov    %al,0xf085afbd
f010b95f:	a0 bd af 85 f0       	mov    0xf085afbd,%al
f010b964:	83 e0 ef             	and    $0xffffffef,%eax
f010b967:	a2 bd af 85 f0       	mov    %al,0xf085afbd
f010b96c:	a0 bd af 85 f0       	mov    0xf085afbd,%al
f010b971:	83 c8 60             	or     $0x60,%eax
f010b974:	a2 bd af 85 f0       	mov    %al,0xf085afbd
f010b979:	a0 bd af 85 f0       	mov    0xf085afbd,%al
f010b97e:	83 c8 80             	or     $0xffffff80,%eax
f010b981:	a2 bd af 85 f0       	mov    %al,0xf085afbd
f010b986:	b8 3c cd 10 f0       	mov    $0xf010cd3c,%eax
f010b98b:	c1 e8 10             	shr    $0x10,%eax
f010b98e:	66 a3 be af 85 f0    	mov    %ax,0xf085afbe
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010b994:	b8 46 cd 10 f0       	mov    $0xf010cd46,%eax
f010b999:	66 a3 c0 af 85 f0    	mov    %ax,0xf085afc0
f010b99f:	66 c7 05 c2 af 85 f0 	movw   $0x8,0xf085afc2
f010b9a6:	08 00 
f010b9a8:	a0 c4 af 85 f0       	mov    0xf085afc4,%al
f010b9ad:	83 e0 e0             	and    $0xffffffe0,%eax
f010b9b0:	a2 c4 af 85 f0       	mov    %al,0xf085afc4
f010b9b5:	a0 c4 af 85 f0       	mov    0xf085afc4,%al
f010b9ba:	83 e0 1f             	and    $0x1f,%eax
f010b9bd:	a2 c4 af 85 f0       	mov    %al,0xf085afc4
f010b9c2:	a0 c5 af 85 f0       	mov    0xf085afc5,%al
f010b9c7:	83 c8 0f             	or     $0xf,%eax
f010b9ca:	a2 c5 af 85 f0       	mov    %al,0xf085afc5
f010b9cf:	a0 c5 af 85 f0       	mov    0xf085afc5,%al
f010b9d4:	83 e0 ef             	and    $0xffffffef,%eax
f010b9d7:	a2 c5 af 85 f0       	mov    %al,0xf085afc5
f010b9dc:	a0 c5 af 85 f0       	mov    0xf085afc5,%al
f010b9e1:	83 c8 60             	or     $0x60,%eax
f010b9e4:	a2 c5 af 85 f0       	mov    %al,0xf085afc5
f010b9e9:	a0 c5 af 85 f0       	mov    0xf085afc5,%al
f010b9ee:	83 c8 80             	or     $0xffffff80,%eax
f010b9f1:	a2 c5 af 85 f0       	mov    %al,0xf085afc5
f010b9f6:	b8 46 cd 10 f0       	mov    $0xf010cd46,%eax
f010b9fb:	c1 e8 10             	shr    $0x10,%eax
f010b9fe:	66 a3 c6 af 85 f0    	mov    %ax,0xf085afc6
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010ba04:	b8 50 cd 10 f0       	mov    $0xf010cd50,%eax
f010ba09:	66 a3 c8 af 85 f0    	mov    %ax,0xf085afc8
f010ba0f:	66 c7 05 ca af 85 f0 	movw   $0x8,0xf085afca
f010ba16:	08 00 
f010ba18:	a0 cc af 85 f0       	mov    0xf085afcc,%al
f010ba1d:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba20:	a2 cc af 85 f0       	mov    %al,0xf085afcc
f010ba25:	a0 cc af 85 f0       	mov    0xf085afcc,%al
f010ba2a:	83 e0 1f             	and    $0x1f,%eax
f010ba2d:	a2 cc af 85 f0       	mov    %al,0xf085afcc
f010ba32:	a0 cd af 85 f0       	mov    0xf085afcd,%al
f010ba37:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba3a:	83 c8 0e             	or     $0xe,%eax
f010ba3d:	a2 cd af 85 f0       	mov    %al,0xf085afcd
f010ba42:	a0 cd af 85 f0       	mov    0xf085afcd,%al
f010ba47:	83 e0 ef             	and    $0xffffffef,%eax
f010ba4a:	a2 cd af 85 f0       	mov    %al,0xf085afcd
f010ba4f:	a0 cd af 85 f0       	mov    0xf085afcd,%al
f010ba54:	83 c8 60             	or     $0x60,%eax
f010ba57:	a2 cd af 85 f0       	mov    %al,0xf085afcd
f010ba5c:	a0 cd af 85 f0       	mov    0xf085afcd,%al
f010ba61:	83 c8 80             	or     $0xffffff80,%eax
f010ba64:	a2 cd af 85 f0       	mov    %al,0xf085afcd
f010ba69:	b8 50 cd 10 f0       	mov    $0xf010cd50,%eax
f010ba6e:	c1 e8 10             	shr    $0x10,%eax
f010ba71:	66 a3 ce af 85 f0    	mov    %ax,0xf085afce
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010ba77:	b8 5a cd 10 f0       	mov    $0xf010cd5a,%eax
f010ba7c:	66 a3 d0 af 85 f0    	mov    %ax,0xf085afd0
f010ba82:	66 c7 05 d2 af 85 f0 	movw   $0x8,0xf085afd2
f010ba89:	08 00 
f010ba8b:	a0 d4 af 85 f0       	mov    0xf085afd4,%al
f010ba90:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba93:	a2 d4 af 85 f0       	mov    %al,0xf085afd4
f010ba98:	a0 d4 af 85 f0       	mov    0xf085afd4,%al
f010ba9d:	83 e0 1f             	and    $0x1f,%eax
f010baa0:	a2 d4 af 85 f0       	mov    %al,0xf085afd4
f010baa5:	a0 d5 af 85 f0       	mov    0xf085afd5,%al
f010baaa:	83 e0 f0             	and    $0xfffffff0,%eax
f010baad:	83 c8 0e             	or     $0xe,%eax
f010bab0:	a2 d5 af 85 f0       	mov    %al,0xf085afd5
f010bab5:	a0 d5 af 85 f0       	mov    0xf085afd5,%al
f010baba:	83 e0 ef             	and    $0xffffffef,%eax
f010babd:	a2 d5 af 85 f0       	mov    %al,0xf085afd5
f010bac2:	a0 d5 af 85 f0       	mov    0xf085afd5,%al
f010bac7:	83 c8 60             	or     $0x60,%eax
f010baca:	a2 d5 af 85 f0       	mov    %al,0xf085afd5
f010bacf:	a0 d5 af 85 f0       	mov    0xf085afd5,%al
f010bad4:	83 c8 80             	or     $0xffffff80,%eax
f010bad7:	a2 d5 af 85 f0       	mov    %al,0xf085afd5
f010badc:	b8 5a cd 10 f0       	mov    $0xf010cd5a,%eax
f010bae1:	c1 e8 10             	shr    $0x10,%eax
f010bae4:	66 a3 d6 af 85 f0    	mov    %ax,0xf085afd6
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010baea:	b8 64 cd 10 f0       	mov    $0xf010cd64,%eax
f010baef:	66 a3 d8 af 85 f0    	mov    %ax,0xf085afd8
f010baf5:	66 c7 05 da af 85 f0 	movw   $0x8,0xf085afda
f010bafc:	08 00 
f010bafe:	a0 dc af 85 f0       	mov    0xf085afdc,%al
f010bb03:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb06:	a2 dc af 85 f0       	mov    %al,0xf085afdc
f010bb0b:	a0 dc af 85 f0       	mov    0xf085afdc,%al
f010bb10:	83 e0 1f             	and    $0x1f,%eax
f010bb13:	a2 dc af 85 f0       	mov    %al,0xf085afdc
f010bb18:	a0 dd af 85 f0       	mov    0xf085afdd,%al
f010bb1d:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb20:	83 c8 0e             	or     $0xe,%eax
f010bb23:	a2 dd af 85 f0       	mov    %al,0xf085afdd
f010bb28:	a0 dd af 85 f0       	mov    0xf085afdd,%al
f010bb2d:	83 e0 ef             	and    $0xffffffef,%eax
f010bb30:	a2 dd af 85 f0       	mov    %al,0xf085afdd
f010bb35:	a0 dd af 85 f0       	mov    0xf085afdd,%al
f010bb3a:	83 c8 60             	or     $0x60,%eax
f010bb3d:	a2 dd af 85 f0       	mov    %al,0xf085afdd
f010bb42:	a0 dd af 85 f0       	mov    0xf085afdd,%al
f010bb47:	83 c8 80             	or     $0xffffff80,%eax
f010bb4a:	a2 dd af 85 f0       	mov    %al,0xf085afdd
f010bb4f:	b8 64 cd 10 f0       	mov    $0xf010cd64,%eax
f010bb54:	c1 e8 10             	shr    $0x10,%eax
f010bb57:	66 a3 de af 85 f0    	mov    %ax,0xf085afde
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010bb5d:	b8 6e cd 10 f0       	mov    $0xf010cd6e,%eax
f010bb62:	66 a3 f0 af 85 f0    	mov    %ax,0xf085aff0
f010bb68:	66 c7 05 f2 af 85 f0 	movw   $0x8,0xf085aff2
f010bb6f:	08 00 
f010bb71:	a0 f4 af 85 f0       	mov    0xf085aff4,%al
f010bb76:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb79:	a2 f4 af 85 f0       	mov    %al,0xf085aff4
f010bb7e:	a0 f4 af 85 f0       	mov    0xf085aff4,%al
f010bb83:	83 e0 1f             	and    $0x1f,%eax
f010bb86:	a2 f4 af 85 f0       	mov    %al,0xf085aff4
f010bb8b:	a0 f5 af 85 f0       	mov    0xf085aff5,%al
f010bb90:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb93:	83 c8 0e             	or     $0xe,%eax
f010bb96:	a2 f5 af 85 f0       	mov    %al,0xf085aff5
f010bb9b:	a0 f5 af 85 f0       	mov    0xf085aff5,%al
f010bba0:	83 e0 ef             	and    $0xffffffef,%eax
f010bba3:	a2 f5 af 85 f0       	mov    %al,0xf085aff5
f010bba8:	a0 f5 af 85 f0       	mov    0xf085aff5,%al
f010bbad:	83 c8 60             	or     $0x60,%eax
f010bbb0:	a2 f5 af 85 f0       	mov    %al,0xf085aff5
f010bbb5:	a0 f5 af 85 f0       	mov    0xf085aff5,%al
f010bbba:	83 c8 80             	or     $0xffffff80,%eax
f010bbbd:	a2 f5 af 85 f0       	mov    %al,0xf085aff5
f010bbc2:	b8 6e cd 10 f0       	mov    $0xf010cd6e,%eax
f010bbc7:	c1 e8 10             	shr    $0x10,%eax
f010bbca:	66 a3 f6 af 85 f0    	mov    %ax,0xf085aff6
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010bbd0:	b8 76 cd 10 f0       	mov    $0xf010cd76,%eax
f010bbd5:	66 a3 f8 af 85 f0    	mov    %ax,0xf085aff8
f010bbdb:	66 c7 05 fa af 85 f0 	movw   $0x8,0xf085affa
f010bbe2:	08 00 
f010bbe4:	a0 fc af 85 f0       	mov    0xf085affc,%al
f010bbe9:	83 e0 e0             	and    $0xffffffe0,%eax
f010bbec:	a2 fc af 85 f0       	mov    %al,0xf085affc
f010bbf1:	a0 fc af 85 f0       	mov    0xf085affc,%al
f010bbf6:	83 e0 1f             	and    $0x1f,%eax
f010bbf9:	a2 fc af 85 f0       	mov    %al,0xf085affc
f010bbfe:	a0 fd af 85 f0       	mov    0xf085affd,%al
f010bc03:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc06:	83 c8 0e             	or     $0xe,%eax
f010bc09:	a2 fd af 85 f0       	mov    %al,0xf085affd
f010bc0e:	a0 fd af 85 f0       	mov    0xf085affd,%al
f010bc13:	83 e0 ef             	and    $0xffffffef,%eax
f010bc16:	a2 fd af 85 f0       	mov    %al,0xf085affd
f010bc1b:	a0 fd af 85 f0       	mov    0xf085affd,%al
f010bc20:	83 c8 60             	or     $0x60,%eax
f010bc23:	a2 fd af 85 f0       	mov    %al,0xf085affd
f010bc28:	a0 fd af 85 f0       	mov    0xf085affd,%al
f010bc2d:	83 c8 80             	or     $0xffffff80,%eax
f010bc30:	a2 fd af 85 f0       	mov    %al,0xf085affd
f010bc35:	b8 76 cd 10 f0       	mov    $0xf010cd76,%eax
f010bc3a:	c1 e8 10             	shr    $0x10,%eax
f010bc3d:	66 a3 fe af 85 f0    	mov    %ax,0xf085affe
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010bc43:	b8 7a cd 10 f0       	mov    $0xf010cd7a,%eax
f010bc48:	66 a3 00 b0 85 f0    	mov    %ax,0xf085b000
f010bc4e:	66 c7 05 02 b0 85 f0 	movw   $0x8,0xf085b002
f010bc55:	08 00 
f010bc57:	a0 04 b0 85 f0       	mov    0xf085b004,%al
f010bc5c:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc5f:	a2 04 b0 85 f0       	mov    %al,0xf085b004
f010bc64:	a0 04 b0 85 f0       	mov    0xf085b004,%al
f010bc69:	83 e0 1f             	and    $0x1f,%eax
f010bc6c:	a2 04 b0 85 f0       	mov    %al,0xf085b004
f010bc71:	a0 05 b0 85 f0       	mov    0xf085b005,%al
f010bc76:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc79:	83 c8 0e             	or     $0xe,%eax
f010bc7c:	a2 05 b0 85 f0       	mov    %al,0xf085b005
f010bc81:	a0 05 b0 85 f0       	mov    0xf085b005,%al
f010bc86:	83 e0 ef             	and    $0xffffffef,%eax
f010bc89:	a2 05 b0 85 f0       	mov    %al,0xf085b005
f010bc8e:	a0 05 b0 85 f0       	mov    0xf085b005,%al
f010bc93:	83 c8 60             	or     $0x60,%eax
f010bc96:	a2 05 b0 85 f0       	mov    %al,0xf085b005
f010bc9b:	a0 05 b0 85 f0       	mov    0xf085b005,%al
f010bca0:	83 c8 80             	or     $0xffffff80,%eax
f010bca3:	a2 05 b0 85 f0       	mov    %al,0xf085b005
f010bca8:	b8 7a cd 10 f0       	mov    $0xf010cd7a,%eax
f010bcad:	c1 e8 10             	shr    $0x10,%eax
f010bcb0:	66 a3 06 b0 85 f0    	mov    %ax,0xf085b006
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010bcb6:	b8 7e cd 10 f0       	mov    $0xf010cd7e,%eax
f010bcbb:	66 a3 08 b0 85 f0    	mov    %ax,0xf085b008
f010bcc1:	66 c7 05 0a b0 85 f0 	movw   $0x8,0xf085b00a
f010bcc8:	08 00 
f010bcca:	a0 0c b0 85 f0       	mov    0xf085b00c,%al
f010bccf:	83 e0 e0             	and    $0xffffffe0,%eax
f010bcd2:	a2 0c b0 85 f0       	mov    %al,0xf085b00c
f010bcd7:	a0 0c b0 85 f0       	mov    0xf085b00c,%al
f010bcdc:	83 e0 1f             	and    $0x1f,%eax
f010bcdf:	a2 0c b0 85 f0       	mov    %al,0xf085b00c
f010bce4:	a0 0d b0 85 f0       	mov    0xf085b00d,%al
f010bce9:	83 e0 f0             	and    $0xfffffff0,%eax
f010bcec:	83 c8 0e             	or     $0xe,%eax
f010bcef:	a2 0d b0 85 f0       	mov    %al,0xf085b00d
f010bcf4:	a0 0d b0 85 f0       	mov    0xf085b00d,%al
f010bcf9:	83 e0 ef             	and    $0xffffffef,%eax
f010bcfc:	a2 0d b0 85 f0       	mov    %al,0xf085b00d
f010bd01:	a0 0d b0 85 f0       	mov    0xf085b00d,%al
f010bd06:	83 c8 60             	or     $0x60,%eax
f010bd09:	a2 0d b0 85 f0       	mov    %al,0xf085b00d
f010bd0e:	a0 0d b0 85 f0       	mov    0xf085b00d,%al
f010bd13:	83 c8 80             	or     $0xffffff80,%eax
f010bd16:	a2 0d b0 85 f0       	mov    %al,0xf085b00d
f010bd1b:	b8 7e cd 10 f0       	mov    $0xf010cd7e,%eax
f010bd20:	c1 e8 10             	shr    $0x10,%eax
f010bd23:	66 a3 0e b0 85 f0    	mov    %ax,0xf085b00e
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010bd29:	b8 82 cd 10 f0       	mov    $0xf010cd82,%eax
f010bd2e:	66 a3 20 b0 85 f0    	mov    %ax,0xf085b020
f010bd34:	66 c7 05 22 b0 85 f0 	movw   $0x8,0xf085b022
f010bd3b:	08 00 
f010bd3d:	a0 24 b0 85 f0       	mov    0xf085b024,%al
f010bd42:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd45:	a2 24 b0 85 f0       	mov    %al,0xf085b024
f010bd4a:	a0 24 b0 85 f0       	mov    0xf085b024,%al
f010bd4f:	83 e0 1f             	and    $0x1f,%eax
f010bd52:	a2 24 b0 85 f0       	mov    %al,0xf085b024
f010bd57:	a0 25 b0 85 f0       	mov    0xf085b025,%al
f010bd5c:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd5f:	83 c8 0e             	or     $0xe,%eax
f010bd62:	a2 25 b0 85 f0       	mov    %al,0xf085b025
f010bd67:	a0 25 b0 85 f0       	mov    0xf085b025,%al
f010bd6c:	83 e0 ef             	and    $0xffffffef,%eax
f010bd6f:	a2 25 b0 85 f0       	mov    %al,0xf085b025
f010bd74:	a0 25 b0 85 f0       	mov    0xf085b025,%al
f010bd79:	83 c8 60             	or     $0x60,%eax
f010bd7c:	a2 25 b0 85 f0       	mov    %al,0xf085b025
f010bd81:	a0 25 b0 85 f0       	mov    0xf085b025,%al
f010bd86:	83 c8 80             	or     $0xffffff80,%eax
f010bd89:	a2 25 b0 85 f0       	mov    %al,0xf085b025
f010bd8e:	b8 82 cd 10 f0       	mov    $0xf010cd82,%eax
f010bd93:	c1 e8 10             	shr    $0x10,%eax
f010bd96:	66 a3 26 b0 85 f0    	mov    %ax,0xf085b026
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010bd9c:	b8 88 cd 10 f0       	mov    $0xf010cd88,%eax
f010bda1:	66 a3 28 b0 85 f0    	mov    %ax,0xf085b028
f010bda7:	66 c7 05 2a b0 85 f0 	movw   $0x8,0xf085b02a
f010bdae:	08 00 
f010bdb0:	a0 2c b0 85 f0       	mov    0xf085b02c,%al
f010bdb5:	83 e0 e0             	and    $0xffffffe0,%eax
f010bdb8:	a2 2c b0 85 f0       	mov    %al,0xf085b02c
f010bdbd:	a0 2c b0 85 f0       	mov    0xf085b02c,%al
f010bdc2:	83 e0 1f             	and    $0x1f,%eax
f010bdc5:	a2 2c b0 85 f0       	mov    %al,0xf085b02c
f010bdca:	a0 2d b0 85 f0       	mov    0xf085b02d,%al
f010bdcf:	83 e0 f0             	and    $0xfffffff0,%eax
f010bdd2:	83 c8 0e             	or     $0xe,%eax
f010bdd5:	a2 2d b0 85 f0       	mov    %al,0xf085b02d
f010bdda:	a0 2d b0 85 f0       	mov    0xf085b02d,%al
f010bddf:	83 e0 ef             	and    $0xffffffef,%eax
f010bde2:	a2 2d b0 85 f0       	mov    %al,0xf085b02d
f010bde7:	a0 2d b0 85 f0       	mov    0xf085b02d,%al
f010bdec:	83 c8 60             	or     $0x60,%eax
f010bdef:	a2 2d b0 85 f0       	mov    %al,0xf085b02d
f010bdf4:	a0 2d b0 85 f0       	mov    0xf085b02d,%al
f010bdf9:	83 c8 80             	or     $0xffffff80,%eax
f010bdfc:	a2 2d b0 85 f0       	mov    %al,0xf085b02d
f010be01:	b8 88 cd 10 f0       	mov    $0xf010cd88,%eax
f010be06:	c1 e8 10             	shr    $0x10,%eax
f010be09:	66 a3 2e b0 85 f0    	mov    %ax,0xf085b02e
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010be0f:	b8 8c cd 10 f0       	mov    $0xf010cd8c,%eax
f010be14:	66 a3 30 b0 85 f0    	mov    %ax,0xf085b030
f010be1a:	66 c7 05 32 b0 85 f0 	movw   $0x8,0xf085b032
f010be21:	08 00 
f010be23:	a0 34 b0 85 f0       	mov    0xf085b034,%al
f010be28:	83 e0 e0             	and    $0xffffffe0,%eax
f010be2b:	a2 34 b0 85 f0       	mov    %al,0xf085b034
f010be30:	a0 34 b0 85 f0       	mov    0xf085b034,%al
f010be35:	83 e0 1f             	and    $0x1f,%eax
f010be38:	a2 34 b0 85 f0       	mov    %al,0xf085b034
f010be3d:	a0 35 b0 85 f0       	mov    0xf085b035,%al
f010be42:	83 e0 f0             	and    $0xfffffff0,%eax
f010be45:	83 c8 0e             	or     $0xe,%eax
f010be48:	a2 35 b0 85 f0       	mov    %al,0xf085b035
f010be4d:	a0 35 b0 85 f0       	mov    0xf085b035,%al
f010be52:	83 e0 ef             	and    $0xffffffef,%eax
f010be55:	a2 35 b0 85 f0       	mov    %al,0xf085b035
f010be5a:	a0 35 b0 85 f0       	mov    0xf085b035,%al
f010be5f:	83 c8 60             	or     $0x60,%eax
f010be62:	a2 35 b0 85 f0       	mov    %al,0xf085b035
f010be67:	a0 35 b0 85 f0       	mov    0xf085b035,%al
f010be6c:	83 c8 80             	or     $0xffffff80,%eax
f010be6f:	a2 35 b0 85 f0       	mov    %al,0xf085b035
f010be74:	b8 8c cd 10 f0       	mov    $0xf010cd8c,%eax
f010be79:	c1 e8 10             	shr    $0x10,%eax
f010be7c:	66 a3 36 b0 85 f0    	mov    %ax,0xf085b036
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010be82:	b8 92 cd 10 f0       	mov    $0xf010cd92,%eax
f010be87:	66 a3 38 b0 85 f0    	mov    %ax,0xf085b038
f010be8d:	66 c7 05 3a b0 85 f0 	movw   $0x8,0xf085b03a
f010be94:	08 00 
f010be96:	a0 3c b0 85 f0       	mov    0xf085b03c,%al
f010be9b:	83 e0 e0             	and    $0xffffffe0,%eax
f010be9e:	a2 3c b0 85 f0       	mov    %al,0xf085b03c
f010bea3:	a0 3c b0 85 f0       	mov    0xf085b03c,%al
f010bea8:	83 e0 1f             	and    $0x1f,%eax
f010beab:	a2 3c b0 85 f0       	mov    %al,0xf085b03c
f010beb0:	a0 3d b0 85 f0       	mov    0xf085b03d,%al
f010beb5:	83 e0 f0             	and    $0xfffffff0,%eax
f010beb8:	83 c8 0e             	or     $0xe,%eax
f010bebb:	a2 3d b0 85 f0       	mov    %al,0xf085b03d
f010bec0:	a0 3d b0 85 f0       	mov    0xf085b03d,%al
f010bec5:	83 e0 ef             	and    $0xffffffef,%eax
f010bec8:	a2 3d b0 85 f0       	mov    %al,0xf085b03d
f010becd:	a0 3d b0 85 f0       	mov    0xf085b03d,%al
f010bed2:	83 c8 60             	or     $0x60,%eax
f010bed5:	a2 3d b0 85 f0       	mov    %al,0xf085b03d
f010beda:	a0 3d b0 85 f0       	mov    0xf085b03d,%al
f010bedf:	83 c8 80             	or     $0xffffff80,%eax
f010bee2:	a2 3d b0 85 f0       	mov    %al,0xf085b03d
f010bee7:	b8 92 cd 10 f0       	mov    $0xf010cd92,%eax
f010beec:	c1 e8 10             	shr    $0x10,%eax
f010beef:	66 a3 3e b0 85 f0    	mov    %ax,0xf085b03e


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010bef5:	b8 98 cd 10 f0       	mov    $0xf010cd98,%eax
f010befa:	66 a3 a0 b0 85 f0    	mov    %ax,0xf085b0a0
f010bf00:	66 c7 05 a2 b0 85 f0 	movw   $0x8,0xf085b0a2
f010bf07:	08 00 
f010bf09:	a0 a4 b0 85 f0       	mov    0xf085b0a4,%al
f010bf0e:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf11:	a2 a4 b0 85 f0       	mov    %al,0xf085b0a4
f010bf16:	a0 a4 b0 85 f0       	mov    0xf085b0a4,%al
f010bf1b:	83 e0 1f             	and    $0x1f,%eax
f010bf1e:	a2 a4 b0 85 f0       	mov    %al,0xf085b0a4
f010bf23:	a0 a5 b0 85 f0       	mov    0xf085b0a5,%al
f010bf28:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf2b:	83 c8 0e             	or     $0xe,%eax
f010bf2e:	a2 a5 b0 85 f0       	mov    %al,0xf085b0a5
f010bf33:	a0 a5 b0 85 f0       	mov    0xf085b0a5,%al
f010bf38:	83 e0 ef             	and    $0xffffffef,%eax
f010bf3b:	a2 a5 b0 85 f0       	mov    %al,0xf085b0a5
f010bf40:	a0 a5 b0 85 f0       	mov    0xf085b0a5,%al
f010bf45:	83 c8 60             	or     $0x60,%eax
f010bf48:	a2 a5 b0 85 f0       	mov    %al,0xf085b0a5
f010bf4d:	a0 a5 b0 85 f0       	mov    0xf085b0a5,%al
f010bf52:	83 c8 80             	or     $0xffffff80,%eax
f010bf55:	a2 a5 b0 85 f0       	mov    %al,0xf085b0a5
f010bf5a:	b8 98 cd 10 f0       	mov    $0xf010cd98,%eax
f010bf5f:	c1 e8 10             	shr    $0x10,%eax
f010bf62:	66 a3 a6 b0 85 f0    	mov    %ax,0xf085b0a6
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010bf68:	b8 9e cd 10 f0       	mov    $0xf010cd9e,%eax
f010bf6d:	66 a3 a8 b0 85 f0    	mov    %ax,0xf085b0a8
f010bf73:	66 c7 05 aa b0 85 f0 	movw   $0x8,0xf085b0aa
f010bf7a:	08 00 
f010bf7c:	a0 ac b0 85 f0       	mov    0xf085b0ac,%al
f010bf81:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf84:	a2 ac b0 85 f0       	mov    %al,0xf085b0ac
f010bf89:	a0 ac b0 85 f0       	mov    0xf085b0ac,%al
f010bf8e:	83 e0 1f             	and    $0x1f,%eax
f010bf91:	a2 ac b0 85 f0       	mov    %al,0xf085b0ac
f010bf96:	a0 ad b0 85 f0       	mov    0xf085b0ad,%al
f010bf9b:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf9e:	83 c8 0e             	or     $0xe,%eax
f010bfa1:	a2 ad b0 85 f0       	mov    %al,0xf085b0ad
f010bfa6:	a0 ad b0 85 f0       	mov    0xf085b0ad,%al
f010bfab:	83 e0 ef             	and    $0xffffffef,%eax
f010bfae:	a2 ad b0 85 f0       	mov    %al,0xf085b0ad
f010bfb3:	a0 ad b0 85 f0       	mov    0xf085b0ad,%al
f010bfb8:	83 c8 60             	or     $0x60,%eax
f010bfbb:	a2 ad b0 85 f0       	mov    %al,0xf085b0ad
f010bfc0:	a0 ad b0 85 f0       	mov    0xf085b0ad,%al
f010bfc5:	83 c8 80             	or     $0xffffff80,%eax
f010bfc8:	a2 ad b0 85 f0       	mov    %al,0xf085b0ad
f010bfcd:	b8 9e cd 10 f0       	mov    $0xf010cd9e,%eax
f010bfd2:	c1 e8 10             	shr    $0x10,%eax
f010bfd5:	66 a3 ae b0 85 f0    	mov    %ax,0xf085b0ae
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010bfdb:	b8 a4 cd 10 f0       	mov    $0xf010cda4,%eax
f010bfe0:	66 a3 b0 b0 85 f0    	mov    %ax,0xf085b0b0
f010bfe6:	66 c7 05 b2 b0 85 f0 	movw   $0x8,0xf085b0b2
f010bfed:	08 00 
f010bfef:	a0 b4 b0 85 f0       	mov    0xf085b0b4,%al
f010bff4:	83 e0 e0             	and    $0xffffffe0,%eax
f010bff7:	a2 b4 b0 85 f0       	mov    %al,0xf085b0b4
f010bffc:	a0 b4 b0 85 f0       	mov    0xf085b0b4,%al
f010c001:	83 e0 1f             	and    $0x1f,%eax
f010c004:	a2 b4 b0 85 f0       	mov    %al,0xf085b0b4
f010c009:	a0 b5 b0 85 f0       	mov    0xf085b0b5,%al
f010c00e:	83 e0 f0             	and    $0xfffffff0,%eax
f010c011:	83 c8 0e             	or     $0xe,%eax
f010c014:	a2 b5 b0 85 f0       	mov    %al,0xf085b0b5
f010c019:	a0 b5 b0 85 f0       	mov    0xf085b0b5,%al
f010c01e:	83 e0 ef             	and    $0xffffffef,%eax
f010c021:	a2 b5 b0 85 f0       	mov    %al,0xf085b0b5
f010c026:	a0 b5 b0 85 f0       	mov    0xf085b0b5,%al
f010c02b:	83 c8 60             	or     $0x60,%eax
f010c02e:	a2 b5 b0 85 f0       	mov    %al,0xf085b0b5
f010c033:	a0 b5 b0 85 f0       	mov    0xf085b0b5,%al
f010c038:	83 c8 80             	or     $0xffffff80,%eax
f010c03b:	a2 b5 b0 85 f0       	mov    %al,0xf085b0b5
f010c040:	b8 a4 cd 10 f0       	mov    $0xf010cda4,%eax
f010c045:	c1 e8 10             	shr    $0x10,%eax
f010c048:	66 a3 b6 b0 85 f0    	mov    %ax,0xf085b0b6
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010c04e:	b8 aa cd 10 f0       	mov    $0xf010cdaa,%eax
f010c053:	66 a3 b8 b0 85 f0    	mov    %ax,0xf085b0b8
f010c059:	66 c7 05 ba b0 85 f0 	movw   $0x8,0xf085b0ba
f010c060:	08 00 
f010c062:	a0 bc b0 85 f0       	mov    0xf085b0bc,%al
f010c067:	83 e0 e0             	and    $0xffffffe0,%eax
f010c06a:	a2 bc b0 85 f0       	mov    %al,0xf085b0bc
f010c06f:	a0 bc b0 85 f0       	mov    0xf085b0bc,%al
f010c074:	83 e0 1f             	and    $0x1f,%eax
f010c077:	a2 bc b0 85 f0       	mov    %al,0xf085b0bc
f010c07c:	a0 bd b0 85 f0       	mov    0xf085b0bd,%al
f010c081:	83 e0 f0             	and    $0xfffffff0,%eax
f010c084:	83 c8 0e             	or     $0xe,%eax
f010c087:	a2 bd b0 85 f0       	mov    %al,0xf085b0bd
f010c08c:	a0 bd b0 85 f0       	mov    0xf085b0bd,%al
f010c091:	83 e0 ef             	and    $0xffffffef,%eax
f010c094:	a2 bd b0 85 f0       	mov    %al,0xf085b0bd
f010c099:	a0 bd b0 85 f0       	mov    0xf085b0bd,%al
f010c09e:	83 c8 60             	or     $0x60,%eax
f010c0a1:	a2 bd b0 85 f0       	mov    %al,0xf085b0bd
f010c0a6:	a0 bd b0 85 f0       	mov    0xf085b0bd,%al
f010c0ab:	83 c8 80             	or     $0xffffff80,%eax
f010c0ae:	a2 bd b0 85 f0       	mov    %al,0xf085b0bd
f010c0b3:	b8 aa cd 10 f0       	mov    $0xf010cdaa,%eax
f010c0b8:	c1 e8 10             	shr    $0x10,%eax
f010c0bb:	66 a3 be b0 85 f0    	mov    %ax,0xf085b0be
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010c0c1:	b8 b0 cd 10 f0       	mov    $0xf010cdb0,%eax
f010c0c6:	66 a3 c0 b0 85 f0    	mov    %ax,0xf085b0c0
f010c0cc:	66 c7 05 c2 b0 85 f0 	movw   $0x8,0xf085b0c2
f010c0d3:	08 00 
f010c0d5:	a0 c4 b0 85 f0       	mov    0xf085b0c4,%al
f010c0da:	83 e0 e0             	and    $0xffffffe0,%eax
f010c0dd:	a2 c4 b0 85 f0       	mov    %al,0xf085b0c4
f010c0e2:	a0 c4 b0 85 f0       	mov    0xf085b0c4,%al
f010c0e7:	83 e0 1f             	and    $0x1f,%eax
f010c0ea:	a2 c4 b0 85 f0       	mov    %al,0xf085b0c4
f010c0ef:	a0 c5 b0 85 f0       	mov    0xf085b0c5,%al
f010c0f4:	83 e0 f0             	and    $0xfffffff0,%eax
f010c0f7:	83 c8 0e             	or     $0xe,%eax
f010c0fa:	a2 c5 b0 85 f0       	mov    %al,0xf085b0c5
f010c0ff:	a0 c5 b0 85 f0       	mov    0xf085b0c5,%al
f010c104:	83 e0 ef             	and    $0xffffffef,%eax
f010c107:	a2 c5 b0 85 f0       	mov    %al,0xf085b0c5
f010c10c:	a0 c5 b0 85 f0       	mov    0xf085b0c5,%al
f010c111:	83 c8 60             	or     $0x60,%eax
f010c114:	a2 c5 b0 85 f0       	mov    %al,0xf085b0c5
f010c119:	a0 c5 b0 85 f0       	mov    0xf085b0c5,%al
f010c11e:	83 c8 80             	or     $0xffffff80,%eax
f010c121:	a2 c5 b0 85 f0       	mov    %al,0xf085b0c5
f010c126:	b8 b0 cd 10 f0       	mov    $0xf010cdb0,%eax
f010c12b:	c1 e8 10             	shr    $0x10,%eax
f010c12e:	66 a3 c6 b0 85 f0    	mov    %ax,0xf085b0c6
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010c134:	b8 b6 cd 10 f0       	mov    $0xf010cdb6,%eax
f010c139:	66 a3 c8 b0 85 f0    	mov    %ax,0xf085b0c8
f010c13f:	66 c7 05 ca b0 85 f0 	movw   $0x8,0xf085b0ca
f010c146:	08 00 
f010c148:	a0 cc b0 85 f0       	mov    0xf085b0cc,%al
f010c14d:	83 e0 e0             	and    $0xffffffe0,%eax
f010c150:	a2 cc b0 85 f0       	mov    %al,0xf085b0cc
f010c155:	a0 cc b0 85 f0       	mov    0xf085b0cc,%al
f010c15a:	83 e0 1f             	and    $0x1f,%eax
f010c15d:	a2 cc b0 85 f0       	mov    %al,0xf085b0cc
f010c162:	a0 cd b0 85 f0       	mov    0xf085b0cd,%al
f010c167:	83 e0 f0             	and    $0xfffffff0,%eax
f010c16a:	83 c8 0e             	or     $0xe,%eax
f010c16d:	a2 cd b0 85 f0       	mov    %al,0xf085b0cd
f010c172:	a0 cd b0 85 f0       	mov    0xf085b0cd,%al
f010c177:	83 e0 ef             	and    $0xffffffef,%eax
f010c17a:	a2 cd b0 85 f0       	mov    %al,0xf085b0cd
f010c17f:	a0 cd b0 85 f0       	mov    0xf085b0cd,%al
f010c184:	83 c8 60             	or     $0x60,%eax
f010c187:	a2 cd b0 85 f0       	mov    %al,0xf085b0cd
f010c18c:	a0 cd b0 85 f0       	mov    0xf085b0cd,%al
f010c191:	83 c8 80             	or     $0xffffff80,%eax
f010c194:	a2 cd b0 85 f0       	mov    %al,0xf085b0cd
f010c199:	b8 b6 cd 10 f0       	mov    $0xf010cdb6,%eax
f010c19e:	c1 e8 10             	shr    $0x10,%eax
f010c1a1:	66 a3 ce b0 85 f0    	mov    %ax,0xf085b0ce
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010c1a7:	b8 bc cd 10 f0       	mov    $0xf010cdbc,%eax
f010c1ac:	66 a3 d0 b0 85 f0    	mov    %ax,0xf085b0d0
f010c1b2:	66 c7 05 d2 b0 85 f0 	movw   $0x8,0xf085b0d2
f010c1b9:	08 00 
f010c1bb:	a0 d4 b0 85 f0       	mov    0xf085b0d4,%al
f010c1c0:	83 e0 e0             	and    $0xffffffe0,%eax
f010c1c3:	a2 d4 b0 85 f0       	mov    %al,0xf085b0d4
f010c1c8:	a0 d4 b0 85 f0       	mov    0xf085b0d4,%al
f010c1cd:	83 e0 1f             	and    $0x1f,%eax
f010c1d0:	a2 d4 b0 85 f0       	mov    %al,0xf085b0d4
f010c1d5:	a0 d5 b0 85 f0       	mov    0xf085b0d5,%al
f010c1da:	83 e0 f0             	and    $0xfffffff0,%eax
f010c1dd:	83 c8 0e             	or     $0xe,%eax
f010c1e0:	a2 d5 b0 85 f0       	mov    %al,0xf085b0d5
f010c1e5:	a0 d5 b0 85 f0       	mov    0xf085b0d5,%al
f010c1ea:	83 e0 ef             	and    $0xffffffef,%eax
f010c1ed:	a2 d5 b0 85 f0       	mov    %al,0xf085b0d5
f010c1f2:	a0 d5 b0 85 f0       	mov    0xf085b0d5,%al
f010c1f7:	83 c8 60             	or     $0x60,%eax
f010c1fa:	a2 d5 b0 85 f0       	mov    %al,0xf085b0d5
f010c1ff:	a0 d5 b0 85 f0       	mov    0xf085b0d5,%al
f010c204:	83 c8 80             	or     $0xffffff80,%eax
f010c207:	a2 d5 b0 85 f0       	mov    %al,0xf085b0d5
f010c20c:	b8 bc cd 10 f0       	mov    $0xf010cdbc,%eax
f010c211:	c1 e8 10             	shr    $0x10,%eax
f010c214:	66 a3 d6 b0 85 f0    	mov    %ax,0xf085b0d6
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010c21a:	b8 c2 cd 10 f0       	mov    $0xf010cdc2,%eax
f010c21f:	66 a3 d8 b0 85 f0    	mov    %ax,0xf085b0d8
f010c225:	66 c7 05 da b0 85 f0 	movw   $0x8,0xf085b0da
f010c22c:	08 00 
f010c22e:	a0 dc b0 85 f0       	mov    0xf085b0dc,%al
f010c233:	83 e0 e0             	and    $0xffffffe0,%eax
f010c236:	a2 dc b0 85 f0       	mov    %al,0xf085b0dc
f010c23b:	a0 dc b0 85 f0       	mov    0xf085b0dc,%al
f010c240:	83 e0 1f             	and    $0x1f,%eax
f010c243:	a2 dc b0 85 f0       	mov    %al,0xf085b0dc
f010c248:	a0 dd b0 85 f0       	mov    0xf085b0dd,%al
f010c24d:	83 e0 f0             	and    $0xfffffff0,%eax
f010c250:	83 c8 0e             	or     $0xe,%eax
f010c253:	a2 dd b0 85 f0       	mov    %al,0xf085b0dd
f010c258:	a0 dd b0 85 f0       	mov    0xf085b0dd,%al
f010c25d:	83 e0 ef             	and    $0xffffffef,%eax
f010c260:	a2 dd b0 85 f0       	mov    %al,0xf085b0dd
f010c265:	a0 dd b0 85 f0       	mov    0xf085b0dd,%al
f010c26a:	83 c8 60             	or     $0x60,%eax
f010c26d:	a2 dd b0 85 f0       	mov    %al,0xf085b0dd
f010c272:	a0 dd b0 85 f0       	mov    0xf085b0dd,%al
f010c277:	83 c8 80             	or     $0xffffff80,%eax
f010c27a:	a2 dd b0 85 f0       	mov    %al,0xf085b0dd
f010c27f:	b8 c2 cd 10 f0       	mov    $0xf010cdc2,%eax
f010c284:	c1 e8 10             	shr    $0x10,%eax
f010c287:	66 a3 de b0 85 f0    	mov    %ax,0xf085b0de
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010c28d:	b8 c8 cd 10 f0       	mov    $0xf010cdc8,%eax
f010c292:	66 a3 e0 b0 85 f0    	mov    %ax,0xf085b0e0
f010c298:	66 c7 05 e2 b0 85 f0 	movw   $0x8,0xf085b0e2
f010c29f:	08 00 
f010c2a1:	a0 e4 b0 85 f0       	mov    0xf085b0e4,%al
f010c2a6:	83 e0 e0             	and    $0xffffffe0,%eax
f010c2a9:	a2 e4 b0 85 f0       	mov    %al,0xf085b0e4
f010c2ae:	a0 e4 b0 85 f0       	mov    0xf085b0e4,%al
f010c2b3:	83 e0 1f             	and    $0x1f,%eax
f010c2b6:	a2 e4 b0 85 f0       	mov    %al,0xf085b0e4
f010c2bb:	a0 e5 b0 85 f0       	mov    0xf085b0e5,%al
f010c2c0:	83 e0 f0             	and    $0xfffffff0,%eax
f010c2c3:	83 c8 0e             	or     $0xe,%eax
f010c2c6:	a2 e5 b0 85 f0       	mov    %al,0xf085b0e5
f010c2cb:	a0 e5 b0 85 f0       	mov    0xf085b0e5,%al
f010c2d0:	83 e0 ef             	and    $0xffffffef,%eax
f010c2d3:	a2 e5 b0 85 f0       	mov    %al,0xf085b0e5
f010c2d8:	a0 e5 b0 85 f0       	mov    0xf085b0e5,%al
f010c2dd:	83 c8 60             	or     $0x60,%eax
f010c2e0:	a2 e5 b0 85 f0       	mov    %al,0xf085b0e5
f010c2e5:	a0 e5 b0 85 f0       	mov    0xf085b0e5,%al
f010c2ea:	83 c8 80             	or     $0xffffff80,%eax
f010c2ed:	a2 e5 b0 85 f0       	mov    %al,0xf085b0e5
f010c2f2:	b8 c8 cd 10 f0       	mov    $0xf010cdc8,%eax
f010c2f7:	c1 e8 10             	shr    $0x10,%eax
f010c2fa:	66 a3 e6 b0 85 f0    	mov    %ax,0xf085b0e6
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010c300:	b8 ce cd 10 f0       	mov    $0xf010cdce,%eax
f010c305:	66 a3 e8 b0 85 f0    	mov    %ax,0xf085b0e8
f010c30b:	66 c7 05 ea b0 85 f0 	movw   $0x8,0xf085b0ea
f010c312:	08 00 
f010c314:	a0 ec b0 85 f0       	mov    0xf085b0ec,%al
f010c319:	83 e0 e0             	and    $0xffffffe0,%eax
f010c31c:	a2 ec b0 85 f0       	mov    %al,0xf085b0ec
f010c321:	a0 ec b0 85 f0       	mov    0xf085b0ec,%al
f010c326:	83 e0 1f             	and    $0x1f,%eax
f010c329:	a2 ec b0 85 f0       	mov    %al,0xf085b0ec
f010c32e:	a0 ed b0 85 f0       	mov    0xf085b0ed,%al
f010c333:	83 e0 f0             	and    $0xfffffff0,%eax
f010c336:	83 c8 0e             	or     $0xe,%eax
f010c339:	a2 ed b0 85 f0       	mov    %al,0xf085b0ed
f010c33e:	a0 ed b0 85 f0       	mov    0xf085b0ed,%al
f010c343:	83 e0 ef             	and    $0xffffffef,%eax
f010c346:	a2 ed b0 85 f0       	mov    %al,0xf085b0ed
f010c34b:	a0 ed b0 85 f0       	mov    0xf085b0ed,%al
f010c350:	83 c8 60             	or     $0x60,%eax
f010c353:	a2 ed b0 85 f0       	mov    %al,0xf085b0ed
f010c358:	a0 ed b0 85 f0       	mov    0xf085b0ed,%al
f010c35d:	83 c8 80             	or     $0xffffff80,%eax
f010c360:	a2 ed b0 85 f0       	mov    %al,0xf085b0ed
f010c365:	b8 ce cd 10 f0       	mov    $0xf010cdce,%eax
f010c36a:	c1 e8 10             	shr    $0x10,%eax
f010c36d:	66 a3 ee b0 85 f0    	mov    %ax,0xf085b0ee
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010c373:	b8 d4 cd 10 f0       	mov    $0xf010cdd4,%eax
f010c378:	66 a3 f0 b0 85 f0    	mov    %ax,0xf085b0f0
f010c37e:	66 c7 05 f2 b0 85 f0 	movw   $0x8,0xf085b0f2
f010c385:	08 00 
f010c387:	a0 f4 b0 85 f0       	mov    0xf085b0f4,%al
f010c38c:	83 e0 e0             	and    $0xffffffe0,%eax
f010c38f:	a2 f4 b0 85 f0       	mov    %al,0xf085b0f4
f010c394:	a0 f4 b0 85 f0       	mov    0xf085b0f4,%al
f010c399:	83 e0 1f             	and    $0x1f,%eax
f010c39c:	a2 f4 b0 85 f0       	mov    %al,0xf085b0f4
f010c3a1:	a0 f5 b0 85 f0       	mov    0xf085b0f5,%al
f010c3a6:	83 e0 f0             	and    $0xfffffff0,%eax
f010c3a9:	83 c8 0e             	or     $0xe,%eax
f010c3ac:	a2 f5 b0 85 f0       	mov    %al,0xf085b0f5
f010c3b1:	a0 f5 b0 85 f0       	mov    0xf085b0f5,%al
f010c3b6:	83 e0 ef             	and    $0xffffffef,%eax
f010c3b9:	a2 f5 b0 85 f0       	mov    %al,0xf085b0f5
f010c3be:	a0 f5 b0 85 f0       	mov    0xf085b0f5,%al
f010c3c3:	83 c8 60             	or     $0x60,%eax
f010c3c6:	a2 f5 b0 85 f0       	mov    %al,0xf085b0f5
f010c3cb:	a0 f5 b0 85 f0       	mov    0xf085b0f5,%al
f010c3d0:	83 c8 80             	or     $0xffffff80,%eax
f010c3d3:	a2 f5 b0 85 f0       	mov    %al,0xf085b0f5
f010c3d8:	b8 d4 cd 10 f0       	mov    $0xf010cdd4,%eax
f010c3dd:	c1 e8 10             	shr    $0x10,%eax
f010c3e0:	66 a3 f6 b0 85 f0    	mov    %ax,0xf085b0f6
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010c3e6:	b8 da cd 10 f0       	mov    $0xf010cdda,%eax
f010c3eb:	66 a3 f8 b0 85 f0    	mov    %ax,0xf085b0f8
f010c3f1:	66 c7 05 fa b0 85 f0 	movw   $0x8,0xf085b0fa
f010c3f8:	08 00 
f010c3fa:	a0 fc b0 85 f0       	mov    0xf085b0fc,%al
f010c3ff:	83 e0 e0             	and    $0xffffffe0,%eax
f010c402:	a2 fc b0 85 f0       	mov    %al,0xf085b0fc
f010c407:	a0 fc b0 85 f0       	mov    0xf085b0fc,%al
f010c40c:	83 e0 1f             	and    $0x1f,%eax
f010c40f:	a2 fc b0 85 f0       	mov    %al,0xf085b0fc
f010c414:	a0 fd b0 85 f0       	mov    0xf085b0fd,%al
f010c419:	83 e0 f0             	and    $0xfffffff0,%eax
f010c41c:	83 c8 0e             	or     $0xe,%eax
f010c41f:	a2 fd b0 85 f0       	mov    %al,0xf085b0fd
f010c424:	a0 fd b0 85 f0       	mov    0xf085b0fd,%al
f010c429:	83 e0 ef             	and    $0xffffffef,%eax
f010c42c:	a2 fd b0 85 f0       	mov    %al,0xf085b0fd
f010c431:	a0 fd b0 85 f0       	mov    0xf085b0fd,%al
f010c436:	83 c8 60             	or     $0x60,%eax
f010c439:	a2 fd b0 85 f0       	mov    %al,0xf085b0fd
f010c43e:	a0 fd b0 85 f0       	mov    0xf085b0fd,%al
f010c443:	83 c8 80             	or     $0xffffff80,%eax
f010c446:	a2 fd b0 85 f0       	mov    %al,0xf085b0fd
f010c44b:	b8 da cd 10 f0       	mov    $0xf010cdda,%eax
f010c450:	c1 e8 10             	shr    $0x10,%eax
f010c453:	66 a3 fe b0 85 f0    	mov    %ax,0xf085b0fe
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010c459:	b8 e0 cd 10 f0       	mov    $0xf010cde0,%eax
f010c45e:	66 a3 00 b1 85 f0    	mov    %ax,0xf085b100
f010c464:	66 c7 05 02 b1 85 f0 	movw   $0x8,0xf085b102
f010c46b:	08 00 
f010c46d:	a0 04 b1 85 f0       	mov    0xf085b104,%al
f010c472:	83 e0 e0             	and    $0xffffffe0,%eax
f010c475:	a2 04 b1 85 f0       	mov    %al,0xf085b104
f010c47a:	a0 04 b1 85 f0       	mov    0xf085b104,%al
f010c47f:	83 e0 1f             	and    $0x1f,%eax
f010c482:	a2 04 b1 85 f0       	mov    %al,0xf085b104
f010c487:	a0 05 b1 85 f0       	mov    0xf085b105,%al
f010c48c:	83 e0 f0             	and    $0xfffffff0,%eax
f010c48f:	83 c8 0e             	or     $0xe,%eax
f010c492:	a2 05 b1 85 f0       	mov    %al,0xf085b105
f010c497:	a0 05 b1 85 f0       	mov    0xf085b105,%al
f010c49c:	83 e0 ef             	and    $0xffffffef,%eax
f010c49f:	a2 05 b1 85 f0       	mov    %al,0xf085b105
f010c4a4:	a0 05 b1 85 f0       	mov    0xf085b105,%al
f010c4a9:	83 c8 60             	or     $0x60,%eax
f010c4ac:	a2 05 b1 85 f0       	mov    %al,0xf085b105
f010c4b1:	a0 05 b1 85 f0       	mov    0xf085b105,%al
f010c4b6:	83 c8 80             	or     $0xffffff80,%eax
f010c4b9:	a2 05 b1 85 f0       	mov    %al,0xf085b105
f010c4be:	b8 e0 cd 10 f0       	mov    $0xf010cde0,%eax
f010c4c3:	c1 e8 10             	shr    $0x10,%eax
f010c4c6:	66 a3 06 b1 85 f0    	mov    %ax,0xf085b106
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010c4cc:	b8 e6 cd 10 f0       	mov    $0xf010cde6,%eax
f010c4d1:	66 a3 08 b1 85 f0    	mov    %ax,0xf085b108
f010c4d7:	66 c7 05 0a b1 85 f0 	movw   $0x8,0xf085b10a
f010c4de:	08 00 
f010c4e0:	a0 0c b1 85 f0       	mov    0xf085b10c,%al
f010c4e5:	83 e0 e0             	and    $0xffffffe0,%eax
f010c4e8:	a2 0c b1 85 f0       	mov    %al,0xf085b10c
f010c4ed:	a0 0c b1 85 f0       	mov    0xf085b10c,%al
f010c4f2:	83 e0 1f             	and    $0x1f,%eax
f010c4f5:	a2 0c b1 85 f0       	mov    %al,0xf085b10c
f010c4fa:	a0 0d b1 85 f0       	mov    0xf085b10d,%al
f010c4ff:	83 e0 f0             	and    $0xfffffff0,%eax
f010c502:	83 c8 0e             	or     $0xe,%eax
f010c505:	a2 0d b1 85 f0       	mov    %al,0xf085b10d
f010c50a:	a0 0d b1 85 f0       	mov    0xf085b10d,%al
f010c50f:	83 e0 ef             	and    $0xffffffef,%eax
f010c512:	a2 0d b1 85 f0       	mov    %al,0xf085b10d
f010c517:	a0 0d b1 85 f0       	mov    0xf085b10d,%al
f010c51c:	83 c8 60             	or     $0x60,%eax
f010c51f:	a2 0d b1 85 f0       	mov    %al,0xf085b10d
f010c524:	a0 0d b1 85 f0       	mov    0xf085b10d,%al
f010c529:	83 c8 80             	or     $0xffffff80,%eax
f010c52c:	a2 0d b1 85 f0       	mov    %al,0xf085b10d
f010c531:	b8 e6 cd 10 f0       	mov    $0xf010cde6,%eax
f010c536:	c1 e8 10             	shr    $0x10,%eax
f010c539:	66 a3 0e b1 85 f0    	mov    %ax,0xf085b10e
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010c53f:	b8 ec cd 10 f0       	mov    $0xf010cdec,%eax
f010c544:	66 a3 10 b1 85 f0    	mov    %ax,0xf085b110
f010c54a:	66 c7 05 12 b1 85 f0 	movw   $0x8,0xf085b112
f010c551:	08 00 
f010c553:	a0 14 b1 85 f0       	mov    0xf085b114,%al
f010c558:	83 e0 e0             	and    $0xffffffe0,%eax
f010c55b:	a2 14 b1 85 f0       	mov    %al,0xf085b114
f010c560:	a0 14 b1 85 f0       	mov    0xf085b114,%al
f010c565:	83 e0 1f             	and    $0x1f,%eax
f010c568:	a2 14 b1 85 f0       	mov    %al,0xf085b114
f010c56d:	a0 15 b1 85 f0       	mov    0xf085b115,%al
f010c572:	83 e0 f0             	and    $0xfffffff0,%eax
f010c575:	83 c8 0e             	or     $0xe,%eax
f010c578:	a2 15 b1 85 f0       	mov    %al,0xf085b115
f010c57d:	a0 15 b1 85 f0       	mov    0xf085b115,%al
f010c582:	83 e0 ef             	and    $0xffffffef,%eax
f010c585:	a2 15 b1 85 f0       	mov    %al,0xf085b115
f010c58a:	a0 15 b1 85 f0       	mov    0xf085b115,%al
f010c58f:	83 c8 60             	or     $0x60,%eax
f010c592:	a2 15 b1 85 f0       	mov    %al,0xf085b115
f010c597:	a0 15 b1 85 f0       	mov    0xf085b115,%al
f010c59c:	83 c8 80             	or     $0xffffff80,%eax
f010c59f:	a2 15 b1 85 f0       	mov    %al,0xf085b115
f010c5a4:	b8 ec cd 10 f0       	mov    $0xf010cdec,%eax
f010c5a9:	c1 e8 10             	shr    $0x10,%eax
f010c5ac:	66 a3 16 b1 85 f0    	mov    %ax,0xf085b116
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010c5b2:	b8 f2 cd 10 f0       	mov    $0xf010cdf2,%eax
f010c5b7:	66 a3 18 b1 85 f0    	mov    %ax,0xf085b118
f010c5bd:	66 c7 05 1a b1 85 f0 	movw   $0x8,0xf085b11a
f010c5c4:	08 00 
f010c5c6:	a0 1c b1 85 f0       	mov    0xf085b11c,%al
f010c5cb:	83 e0 e0             	and    $0xffffffe0,%eax
f010c5ce:	a2 1c b1 85 f0       	mov    %al,0xf085b11c
f010c5d3:	a0 1c b1 85 f0       	mov    0xf085b11c,%al
f010c5d8:	83 e0 1f             	and    $0x1f,%eax
f010c5db:	a2 1c b1 85 f0       	mov    %al,0xf085b11c
f010c5e0:	a0 1d b1 85 f0       	mov    0xf085b11d,%al
f010c5e5:	83 e0 f0             	and    $0xfffffff0,%eax
f010c5e8:	83 c8 0e             	or     $0xe,%eax
f010c5eb:	a2 1d b1 85 f0       	mov    %al,0xf085b11d
f010c5f0:	a0 1d b1 85 f0       	mov    0xf085b11d,%al
f010c5f5:	83 e0 ef             	and    $0xffffffef,%eax
f010c5f8:	a2 1d b1 85 f0       	mov    %al,0xf085b11d
f010c5fd:	a0 1d b1 85 f0       	mov    0xf085b11d,%al
f010c602:	83 c8 60             	or     $0x60,%eax
f010c605:	a2 1d b1 85 f0       	mov    %al,0xf085b11d
f010c60a:	a0 1d b1 85 f0       	mov    0xf085b11d,%al
f010c60f:	83 c8 80             	or     $0xffffff80,%eax
f010c612:	a2 1d b1 85 f0       	mov    %al,0xf085b11d
f010c617:	b8 f2 cd 10 f0       	mov    $0xf010cdf2,%eax
f010c61c:	c1 e8 10             	shr    $0x10,%eax
f010c61f:	66 a3 1e b1 85 f0    	mov    %ax,0xf085b11e



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010c625:	c7 05 c4 b7 85 f0 00 	movl   $0xefc00000,0xf085b7c4
f010c62c:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010c62f:	66 c7 05 c8 b7 85 f0 	movw   $0x10,0xf085b7c8
f010c636:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010c638:	66 c7 05 e8 38 19 f0 	movw   $0x68,0xf01938e8
f010c63f:	68 00 
f010c641:	b8 c0 b7 85 f0       	mov    $0xf085b7c0,%eax
f010c646:	66 a3 ea 38 19 f0    	mov    %ax,0xf01938ea
f010c64c:	b8 c0 b7 85 f0       	mov    $0xf085b7c0,%eax
f010c651:	c1 e8 10             	shr    $0x10,%eax
f010c654:	a2 ec 38 19 f0       	mov    %al,0xf01938ec
f010c659:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c65e:	83 e0 f0             	and    $0xfffffff0,%eax
f010c661:	83 c8 09             	or     $0x9,%eax
f010c664:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c669:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c66e:	83 c8 10             	or     $0x10,%eax
f010c671:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c676:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c67b:	83 e0 9f             	and    $0xffffff9f,%eax
f010c67e:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c683:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c688:	83 c8 80             	or     $0xffffff80,%eax
f010c68b:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c690:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c695:	83 e0 f0             	and    $0xfffffff0,%eax
f010c698:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c69d:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c6a2:	83 e0 ef             	and    $0xffffffef,%eax
f010c6a5:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c6aa:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c6af:	83 e0 df             	and    $0xffffffdf,%eax
f010c6b2:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c6b7:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c6bc:	83 c8 40             	or     $0x40,%eax
f010c6bf:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c6c4:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c6c9:	83 e0 7f             	and    $0x7f,%eax
f010c6cc:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c6d1:	b8 c0 b7 85 f0       	mov    $0xf085b7c0,%eax
f010c6d6:	c1 e8 18             	shr    $0x18,%eax
f010c6d9:	a2 ef 38 19 f0       	mov    %al,0xf01938ef
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010c6de:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c6e3:	83 e0 ef             	and    $0xffffffef,%eax
f010c6e6:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c6eb:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010c6f1:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010c6f5:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010c6f8:	0f 01 1d 1c 3d 19 f0 	lidtl  0xf0193d1c
}
f010c6ff:	90                   	nop
f010c700:	c9                   	leave  
f010c701:	c3                   	ret    

f010c702 <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010c702:	55                   	push   %ebp
f010c703:	89 e5                	mov    %esp,%ebp
f010c705:	53                   	push   %ebx
f010c706:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010c709:	83 ec 08             	sub    $0x8,%esp
f010c70c:	ff 75 08             	pushl  0x8(%ebp)
f010c70f:	68 fb 75 13 f0       	push   $0xf01375fb
f010c714:	e8 f5 45 ff ff       	call   f0100d0e <cprintf>
f010c719:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010c71c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c71f:	83 ec 0c             	sub    $0xc,%esp
f010c722:	50                   	push   %eax
f010c723:	e8 fd 00 00 00       	call   f010c825 <print_regs>
f010c728:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010c72b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c72e:	8b 40 20             	mov    0x20(%eax),%eax
f010c731:	0f b7 c0             	movzwl %ax,%eax
f010c734:	83 ec 08             	sub    $0x8,%esp
f010c737:	50                   	push   %eax
f010c738:	68 0d 76 13 f0       	push   $0xf013760d
f010c73d:	e8 cc 45 ff ff       	call   f0100d0e <cprintf>
f010c742:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010c745:	8b 45 08             	mov    0x8(%ebp),%eax
f010c748:	8b 40 24             	mov    0x24(%eax),%eax
f010c74b:	0f b7 c0             	movzwl %ax,%eax
f010c74e:	83 ec 08             	sub    $0x8,%esp
f010c751:	50                   	push   %eax
f010c752:	68 20 76 13 f0       	push   $0xf0137620
f010c757:	e8 b2 45 ff ff       	call   f0100d0e <cprintf>
f010c75c:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010c75f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c762:	8b 58 28             	mov    0x28(%eax),%ebx
f010c765:	8b 45 08             	mov    0x8(%ebp),%eax
f010c768:	8b 40 28             	mov    0x28(%eax),%eax
f010c76b:	83 ec 0c             	sub    $0xc,%esp
f010c76e:	50                   	push   %eax
f010c76f:	e8 d0 ee ff ff       	call   f010b644 <trapname>
f010c774:	83 c4 10             	add    $0x10,%esp
f010c777:	89 c2                	mov    %eax,%edx
f010c779:	8b 45 08             	mov    0x8(%ebp),%eax
f010c77c:	8b 40 28             	mov    0x28(%eax),%eax
f010c77f:	53                   	push   %ebx
f010c780:	52                   	push   %edx
f010c781:	50                   	push   %eax
f010c782:	68 33 76 13 f0       	push   $0xf0137633
f010c787:	e8 82 45 ff ff       	call   f0100d0e <cprintf>
f010c78c:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010c78f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c792:	8b 40 2c             	mov    0x2c(%eax),%eax
f010c795:	83 ec 08             	sub    $0x8,%esp
f010c798:	50                   	push   %eax
f010c799:	68 4a 76 13 f0       	push   $0xf013764a
f010c79e:	e8 6b 45 ff ff       	call   f0100d0e <cprintf>
f010c7a3:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010c7a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7a9:	8b 40 30             	mov    0x30(%eax),%eax
f010c7ac:	83 ec 08             	sub    $0x8,%esp
f010c7af:	50                   	push   %eax
f010c7b0:	68 59 76 13 f0       	push   $0xf0137659
f010c7b5:	e8 54 45 ff ff       	call   f0100d0e <cprintf>
f010c7ba:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010c7bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7c0:	8b 40 34             	mov    0x34(%eax),%eax
f010c7c3:	0f b7 c0             	movzwl %ax,%eax
f010c7c6:	83 ec 08             	sub    $0x8,%esp
f010c7c9:	50                   	push   %eax
f010c7ca:	68 68 76 13 f0       	push   $0xf0137668
f010c7cf:	e8 3a 45 ff ff       	call   f0100d0e <cprintf>
f010c7d4:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010c7d7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7da:	8b 40 38             	mov    0x38(%eax),%eax
f010c7dd:	83 ec 08             	sub    $0x8,%esp
f010c7e0:	50                   	push   %eax
f010c7e1:	68 7b 76 13 f0       	push   $0xf013767b
f010c7e6:	e8 23 45 ff ff       	call   f0100d0e <cprintf>
f010c7eb:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010c7ee:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7f1:	8b 40 3c             	mov    0x3c(%eax),%eax
f010c7f4:	83 ec 08             	sub    $0x8,%esp
f010c7f7:	50                   	push   %eax
f010c7f8:	68 8a 76 13 f0       	push   $0xf013768a
f010c7fd:	e8 0c 45 ff ff       	call   f0100d0e <cprintf>
f010c802:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010c805:	8b 45 08             	mov    0x8(%ebp),%eax
f010c808:	8b 40 40             	mov    0x40(%eax),%eax
f010c80b:	0f b7 c0             	movzwl %ax,%eax
f010c80e:	83 ec 08             	sub    $0x8,%esp
f010c811:	50                   	push   %eax
f010c812:	68 99 76 13 f0       	push   $0xf0137699
f010c817:	e8 f2 44 ff ff       	call   f0100d0e <cprintf>
f010c81c:	83 c4 10             	add    $0x10,%esp
}
f010c81f:	90                   	nop
f010c820:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010c823:	c9                   	leave  
f010c824:	c3                   	ret    

f010c825 <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010c825:	55                   	push   %ebp
f010c826:	89 e5                	mov    %esp,%ebp
f010c828:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010c82b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c82e:	8b 00                	mov    (%eax),%eax
f010c830:	83 ec 08             	sub    $0x8,%esp
f010c833:	50                   	push   %eax
f010c834:	68 ac 76 13 f0       	push   $0xf01376ac
f010c839:	e8 d0 44 ff ff       	call   f0100d0e <cprintf>
f010c83e:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010c841:	8b 45 08             	mov    0x8(%ebp),%eax
f010c844:	8b 40 04             	mov    0x4(%eax),%eax
f010c847:	83 ec 08             	sub    $0x8,%esp
f010c84a:	50                   	push   %eax
f010c84b:	68 bb 76 13 f0       	push   $0xf01376bb
f010c850:	e8 b9 44 ff ff       	call   f0100d0e <cprintf>
f010c855:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010c858:	8b 45 08             	mov    0x8(%ebp),%eax
f010c85b:	8b 40 08             	mov    0x8(%eax),%eax
f010c85e:	83 ec 08             	sub    $0x8,%esp
f010c861:	50                   	push   %eax
f010c862:	68 ca 76 13 f0       	push   $0xf01376ca
f010c867:	e8 a2 44 ff ff       	call   f0100d0e <cprintf>
f010c86c:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010c86f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c872:	8b 40 0c             	mov    0xc(%eax),%eax
f010c875:	83 ec 08             	sub    $0x8,%esp
f010c878:	50                   	push   %eax
f010c879:	68 d9 76 13 f0       	push   $0xf01376d9
f010c87e:	e8 8b 44 ff ff       	call   f0100d0e <cprintf>
f010c883:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010c886:	8b 45 08             	mov    0x8(%ebp),%eax
f010c889:	8b 40 10             	mov    0x10(%eax),%eax
f010c88c:	83 ec 08             	sub    $0x8,%esp
f010c88f:	50                   	push   %eax
f010c890:	68 e8 76 13 f0       	push   $0xf01376e8
f010c895:	e8 74 44 ff ff       	call   f0100d0e <cprintf>
f010c89a:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010c89d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8a0:	8b 40 14             	mov    0x14(%eax),%eax
f010c8a3:	83 ec 08             	sub    $0x8,%esp
f010c8a6:	50                   	push   %eax
f010c8a7:	68 f7 76 13 f0       	push   $0xf01376f7
f010c8ac:	e8 5d 44 ff ff       	call   f0100d0e <cprintf>
f010c8b1:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010c8b4:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8b7:	8b 40 18             	mov    0x18(%eax),%eax
f010c8ba:	83 ec 08             	sub    $0x8,%esp
f010c8bd:	50                   	push   %eax
f010c8be:	68 06 77 13 f0       	push   $0xf0137706
f010c8c3:	e8 46 44 ff ff       	call   f0100d0e <cprintf>
f010c8c8:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010c8cb:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8ce:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c8d1:	83 ec 08             	sub    $0x8,%esp
f010c8d4:	50                   	push   %eax
f010c8d5:	68 15 77 13 f0       	push   $0xf0137715
f010c8da:	e8 2f 44 ff ff       	call   f0100d0e <cprintf>
f010c8df:	83 c4 10             	add    $0x10,%esp
}
f010c8e2:	90                   	nop
f010c8e3:	c9                   	leave  
f010c8e4:	c3                   	ret    

f010c8e5 <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010c8e5:	55                   	push   %ebp
f010c8e6:	89 e5                	mov    %esp,%ebp
f010c8e8:	57                   	push   %edi
f010c8e9:	56                   	push   %esi
f010c8ea:	53                   	push   %ebx
f010c8eb:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010c8ee:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8f1:	8b 40 28             	mov    0x28(%eax),%eax
f010c8f4:	83 f8 0e             	cmp    $0xe,%eax
f010c8f7:	75 29                	jne    f010c922 <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010c8f9:	83 ec 0c             	sub    $0xc,%esp
f010c8fc:	6a 01                	push   $0x1
f010c8fe:	e8 fc 18 00 00       	call   f010e1ff <isPageReplacmentAlgorithmLRU>
f010c903:	83 c4 10             	add    $0x10,%esp
f010c906:	85 c0                	test   %eax,%eax
f010c908:	74 05                	je     f010c90f <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010c90a:	e8 38 91 ff ff       	call   f0105a47 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010c90f:	83 ec 0c             	sub    $0xc,%esp
f010c912:	ff 75 08             	pushl  0x8(%ebp)
f010c915:	e8 51 02 00 00       	call   f010cb6b <fault_handler>
f010c91a:	83 c4 10             	add    $0x10,%esp
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c91d:	e9 bb 00 00 00       	jmp    f010c9dd <trap_dispatch+0xf8>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010c922:	8b 45 08             	mov    0x8(%ebp),%eax
f010c925:	8b 40 28             	mov    0x28(%eax),%eax
f010c928:	83 f8 30             	cmp    $0x30,%eax
f010c92b:	75 42                	jne    f010c96f <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010c92d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c930:	8b 78 04             	mov    0x4(%eax),%edi
f010c933:	8b 45 08             	mov    0x8(%ebp),%eax
f010c936:	8b 30                	mov    (%eax),%esi
f010c938:	8b 45 08             	mov    0x8(%ebp),%eax
f010c93b:	8b 58 10             	mov    0x10(%eax),%ebx
f010c93e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c941:	8b 48 18             	mov    0x18(%eax),%ecx
f010c944:	8b 45 08             	mov    0x8(%ebp),%eax
f010c947:	8b 50 14             	mov    0x14(%eax),%edx
f010c94a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c94d:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c950:	83 ec 08             	sub    $0x8,%esp
f010c953:	57                   	push   %edi
f010c954:	56                   	push   %esi
f010c955:	53                   	push   %ebx
f010c956:	51                   	push   %ecx
f010c957:	52                   	push   %edx
f010c958:	50                   	push   %eax
f010c959:	e8 ec 0f 00 00       	call   f010d94a <syscall>
f010c95e:	83 c4 20             	add    $0x20,%esp
f010c961:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010c964:	8b 45 08             	mov    0x8(%ebp),%eax
f010c967:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c96a:	89 50 1c             	mov    %edx,0x1c(%eax)
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c96d:	eb 6e                	jmp    f010c9dd <trap_dispatch+0xf8>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010c96f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c972:	8b 40 28             	mov    0x28(%eax),%eax
f010c975:	83 f8 08             	cmp    $0x8,%eax
f010c978:	75 17                	jne    f010c991 <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010c97a:	83 ec 04             	sub    $0x4,%esp
f010c97d:	68 24 77 13 f0       	push   $0xf0137724
f010c982:	68 e7 00 00 00       	push   $0xe7
f010c987:	68 33 77 13 f0       	push   $0xf0137733
f010c98c:	e8 74 38 ff ff       	call   f0100205 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010c991:	8b 45 08             	mov    0x8(%ebp),%eax
f010c994:	8b 40 28             	mov    0x28(%eax),%eax
f010c997:	83 f8 20             	cmp    $0x20,%eax
f010c99a:	75 07                	jne    f010c9a3 <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010c99c:	e8 85 90 ff ff       	call   f0105a26 <clock_interrupt_handler>
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c9a1:	eb 3a                	jmp    f010c9dd <trap_dispatch+0xf8>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010c9a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9a6:	8b 40 34             	mov    0x34(%eax),%eax
f010c9a9:	66 83 f8 08          	cmp    $0x8,%ax
f010c9ad:	75 17                	jne    f010c9c6 <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010c9af:	83 ec 04             	sub    $0x4,%esp
f010c9b2:	68 44 77 13 f0       	push   $0xf0137744
f010c9b7:	68 f4 00 00 00       	push   $0xf4
f010c9bc:	68 33 77 13 f0       	push   $0xf0137733
f010c9c1:	e8 3f 38 ff ff       	call   f0100205 <_panic>
		}
		else {
			//env_destroy(curenv);
			panic("unhandled trap in user program");
f010c9c6:	83 ec 04             	sub    $0x4,%esp
f010c9c9:	68 60 77 13 f0       	push   $0xf0137760
f010c9ce:	68 f8 00 00 00       	push   $0xf8
f010c9d3:	68 33 77 13 f0       	push   $0xf0137733
f010c9d8:	e8 28 38 ff ff       	call   f0100205 <_panic>

			return;
		}
	}
	return;
}
f010c9dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010c9e0:	5b                   	pop    %ebx
f010c9e1:	5e                   	pop    %esi
f010c9e2:	5f                   	pop    %edi
f010c9e3:	5d                   	pop    %ebp
f010c9e4:	c3                   	ret    

f010c9e5 <trap>:

void trap(struct Trapframe *tf)
{
f010c9e5:	55                   	push   %ebp
f010c9e6:	89 e5                	mov    %esp,%ebp
f010c9e8:	57                   	push   %edi
f010c9e9:	56                   	push   %esi
f010c9ea:	53                   	push   %ebx
f010c9eb:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010c9ee:	e8 bc 77 ff ff       	call   f01041af <kclock_stop>

	int userTrap = 0;
f010c9f3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c9fa:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9fd:	8b 40 34             	mov    0x34(%eax),%eax
f010ca00:	0f b7 c0             	movzwl %ax,%eax
f010ca03:	83 e0 03             	and    $0x3,%eax
f010ca06:	83 f8 03             	cmp    $0x3,%eax
f010ca09:	75 49                	jne    f010ca54 <trap+0x6f>
		assert(curenv);
f010ca0b:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010ca10:	85 c0                	test   %eax,%eax
f010ca12:	75 19                	jne    f010ca2d <trap+0x48>
f010ca14:	68 7f 77 13 f0       	push   $0xf013777f
f010ca19:	68 86 77 13 f0       	push   $0xf0137786
f010ca1e:	68 06 01 00 00       	push   $0x106
f010ca23:	68 33 77 13 f0       	push   $0xf0137733
f010ca28:	e8 d8 37 ff ff       	call   f0100205 <_panic>
		curenv->env_tf = *tf;
f010ca2d:	8b 15 74 af 85 f0    	mov    0xf085af74,%edx
f010ca33:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca36:	89 c3                	mov    %eax,%ebx
f010ca38:	b8 11 00 00 00       	mov    $0x11,%eax
f010ca3d:	89 d7                	mov    %edx,%edi
f010ca3f:	89 de                	mov    %ebx,%esi
f010ca41:	89 c1                	mov    %eax,%ecx
f010ca43:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010ca45:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010ca4a:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010ca4d:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010ca54:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca57:	8b 40 28             	mov    0x28(%eax),%eax
f010ca5a:	83 f8 20             	cmp    $0x20,%eax
f010ca5d:	75 40                	jne    f010ca9f <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010ca5f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010ca63:	0f 84 a6 00 00 00    	je     f010cb0f <trap+0x12a>
		{
			assert(curenv);
f010ca69:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010ca6e:	85 c0                	test   %eax,%eax
f010ca70:	75 19                	jne    f010ca8b <trap+0xa6>
f010ca72:	68 7f 77 13 f0       	push   $0xf013777f
f010ca77:	68 86 77 13 f0       	push   $0xf0137786
f010ca7c:	68 12 01 00 00       	push   $0x112
f010ca81:	68 33 77 13 f0       	push   $0xf0137733
f010ca86:	e8 7a 37 ff ff       	call   f0100205 <_panic>
			curenv->nClocks++ ;
f010ca8b:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010ca90:	8b 90 a4 05 00 00    	mov    0x5a4(%eax),%edx
f010ca96:	42                   	inc    %edx
f010ca97:	89 90 a4 05 00 00    	mov    %edx,0x5a4(%eax)
f010ca9d:	eb 70                	jmp    f010cb0f <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010ca9f:	8b 45 08             	mov    0x8(%ebp),%eax
f010caa2:	8b 40 28             	mov    0x28(%eax),%eax
f010caa5:	83 f8 0e             	cmp    $0xe,%eax
f010caa8:	75 65                	jne    f010cb0f <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010caaa:	a0 28 b8 85 f0       	mov    0xf085b828,%al
f010caaf:	84 c0                	test   %al,%al
f010cab1:	74 5c                	je     f010cb0f <trap+0x12a>
			if (userTrap){
f010cab3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010cab7:	74 2c                	je     f010cae5 <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010cab9:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010cabe:	8b 15 74 af 85 f0    	mov    0xf085af74,%edx
f010cac4:	8b 52 30             	mov    0x30(%edx),%edx
f010cac7:	89 d1                	mov    %edx,%ecx
f010cac9:	8a 15 28 b8 85 f0    	mov    0xf085b828,%dl
f010cacf:	0f b6 d2             	movzbl %dl,%edx
f010cad2:	01 ca                	add    %ecx,%edx
f010cad4:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010cad7:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010cadc:	83 ec 0c             	sub    $0xc,%esp
f010cadf:	50                   	push   %eax
f010cae0:	e8 43 d4 ff ff       	call   f0109f28 <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010cae5:	8b 45 08             	mov    0x8(%ebp),%eax
f010cae8:	8b 40 30             	mov    0x30(%eax),%eax
f010caeb:	89 c2                	mov    %eax,%edx
f010caed:	a0 28 b8 85 f0       	mov    0xf085b828,%al
f010caf2:	0f b6 c0             	movzbl %al,%eax
f010caf5:	01 d0                	add    %edx,%eax
f010caf7:	89 c2                	mov    %eax,%edx
f010caf9:	8b 45 08             	mov    0x8(%ebp),%eax
f010cafc:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010caff:	e8 d6 76 ff ff       	call   f01041da <kclock_resume>
				env_pop_tf(tf);
f010cb04:	83 ec 0c             	sub    $0xc,%esp
f010cb07:	ff 75 08             	pushl  0x8(%ebp)
f010cb0a:	e8 7c d5 ff ff       	call   f010a08b <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010cb0f:	83 ec 0c             	sub    $0xc,%esp
f010cb12:	ff 75 08             	pushl  0x8(%ebp)
f010cb15:	e8 cb fd ff ff       	call   f010c8e5 <trap_dispatch>
f010cb1a:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010cb1d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010cb21:	74 3d                	je     f010cb60 <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010cb23:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010cb28:	85 c0                	test   %eax,%eax
f010cb2a:	74 0d                	je     f010cb39 <trap+0x154>
f010cb2c:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010cb31:	8b 40 54             	mov    0x54(%eax),%eax
f010cb34:	83 f8 02             	cmp    $0x2,%eax
f010cb37:	74 19                	je     f010cb52 <trap+0x16d>
f010cb39:	68 9c 77 13 f0       	push   $0xf013779c
f010cb3e:	68 86 77 13 f0       	push   $0xf0137786
f010cb43:	68 27 01 00 00       	push   $0x127
f010cb48:	68 33 77 13 f0       	push   $0xf0137733
f010cb4d:	e8 b3 36 ff ff       	call   f0100205 <_panic>
		env_run(curenv);
f010cb52:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010cb57:	83 ec 0c             	sub    $0xc,%esp
f010cb5a:	50                   	push   %eax
f010cb5b:	e8 c8 d3 ff ff       	call   f0109f28 <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010cb60:	83 ec 0c             	sub    $0xc,%esp
f010cb63:	ff 75 08             	pushl  0x8(%ebp)
f010cb66:	e8 20 d5 ff ff       	call   f010a08b <env_pop_tf>

f010cb6b <fault_handler>:

/*2022*/
uint32 last_fault_va = 0;
int8 num_repeated_fault  = 0;
void fault_handler(struct Trapframe *tf)
{
f010cb6b:	55                   	push   %ebp
f010cb6c:	89 e5                	mov    %esp,%ebp
f010cb6e:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010cb71:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010cb78:	8b 45 08             	mov    0x8(%ebp),%eax
f010cb7b:	8b 40 34             	mov    0x34(%eax),%eax
f010cb7e:	0f b7 c0             	movzwl %ax,%eax
f010cb81:	83 e0 03             	and    $0x3,%eax
f010cb84:	83 f8 03             	cmp    $0x3,%eax
f010cb87:	75 07                	jne    f010cb90 <fault_handler+0x25>
		userTrap = 1;
f010cb89:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010cb90:	0f 20 d0             	mov    %cr2,%eax
f010cb93:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010cb96:	8b 45 e0             	mov    -0x20(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010cb99:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/******************************************************/
	/*2022*///If same fault va for 3 times, then panic
	if (last_fault_va == fault_va)
f010cb9c:	a1 a0 b7 85 f0       	mov    0xf085b7a0,%eax
f010cba1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010cba4:	75 2b                	jne    f010cbd1 <fault_handler+0x66>
	{
		num_repeated_fault++ ;
f010cba6:	a0 a4 b7 85 f0       	mov    0xf085b7a4,%al
f010cbab:	40                   	inc    %eax
f010cbac:	a2 a4 b7 85 f0       	mov    %al,0xf085b7a4
		if (num_repeated_fault == 3)
f010cbb1:	a0 a4 b7 85 f0       	mov    0xf085b7a4,%al
f010cbb6:	3c 03                	cmp    $0x3,%al
f010cbb8:	75 1e                	jne    f010cbd8 <fault_handler+0x6d>
			panic("Failed to handle fault at va=%x: same va is faulted for 3 successive times\n", fault_va);
f010cbba:	ff 75 ec             	pushl  -0x14(%ebp)
f010cbbd:	68 cc 77 13 f0       	push   $0xf01377cc
f010cbc2:	68 47 01 00 00       	push   $0x147
f010cbc7:	68 33 77 13 f0       	push   $0xf0137733
f010cbcc:	e8 34 36 ff ff       	call   f0100205 <_panic>
	}
	else
	{
		num_repeated_fault = 0;
f010cbd1:	c6 05 a4 b7 85 f0 00 	movb   $0x0,0xf085b7a4
	}
	last_fault_va = fault_va ;
f010cbd8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cbdb:	a3 a0 b7 85 f0       	mov    %eax,0xf085b7a0
	/******************************************************/
	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010cbe0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cbe4:	75 29                	jne    f010cc0f <fault_handler+0xa4>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010cbe6:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010cbed:	77 40                	ja     f010cc2f <fault_handler+0xc4>
f010cbef:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010cbf6:	76 37                	jbe    f010cc2f <fault_handler+0xc4>
			panic("Kernel: stack overflow exception!");
f010cbf8:	83 ec 04             	sub    $0x4,%esp
f010cbfb:	68 18 78 13 f0       	push   $0xf0137818
f010cc00:	68 53 01 00 00       	push   $0x153
f010cc05:	68 33 77 13 f0       	push   $0xf0137733
f010cc0a:	e8 f6 35 ff ff       	call   f0100205 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010cc0f:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010cc16:	76 17                	jbe    f010cc2f <fault_handler+0xc4>
			panic("User: stack underflow exception!");
f010cc18:	83 ec 04             	sub    $0x4,%esp
f010cc1b:	68 3c 78 13 f0       	push   $0xf013783c
f010cc20:	68 59 01 00 00       	push   $0x159
f010cc25:	68 33 77 13 f0       	push   $0xf0137733
f010cc2a:	e8 d6 35 ff ff       	call   f0100205 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010cc2f:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010cc34:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (faulted_env->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010cc37:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cc3a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cc3d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cc40:	c1 ea 16             	shr    $0x16,%edx
f010cc43:	c1 e2 02             	shl    $0x2,%edx
f010cc46:	01 d0                	add    %edx,%eax
f010cc48:	8b 00                	mov    (%eax),%eax
f010cc4a:	83 e0 01             	and    $0x1,%eax
f010cc4d:	85 c0                	test   %eax,%eax
f010cc4f:	75 28                	jne    f010cc79 <fault_handler+0x10e>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010cc51:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cc54:	8b 80 38 05 00 00    	mov    0x538(%eax),%eax
f010cc5a:	8d 50 01             	lea    0x1(%eax),%edx
f010cc5d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cc60:	89 90 38 05 00 00    	mov    %edx,0x538(%eax)

		table_fault_handler(faulted_env, fault_va);
f010cc66:	83 ec 08             	sub    $0x8,%esp
f010cc69:	ff 75 ec             	pushl  -0x14(%ebp)
f010cc6c:	ff 75 e8             	pushl  -0x18(%ebp)
f010cc6f:	e8 70 16 00 00       	call   f010e2e4 <table_fault_handler>
f010cc74:	83 c4 10             	add    $0x10,%esp
f010cc77:	eb 7b                	jmp    f010ccf4 <fault_handler+0x189>
	}
	else
	{
		/*2022: Check if fault due to Access Rights */
		int perms = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
f010cc79:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cc7c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cc7f:	83 ec 08             	sub    $0x8,%esp
f010cc82:	ff 75 ec             	pushl  -0x14(%ebp)
f010cc85:	50                   	push   %eax
f010cc86:	e8 74 b1 ff ff       	call   f0107dff <pt_get_page_permissions>
f010cc8b:	83 c4 10             	add    $0x10,%esp
f010cc8e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (perms & PERM_PRESENT)
f010cc91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cc94:	83 e0 01             	and    $0x1,%eax
f010cc97:	85 c0                	test   %eax,%eax
f010cc99:	74 17                	je     f010ccb2 <fault_handler+0x147>
			panic("Page @va=%x is exist! page fault due to violation of ACCESS RIGHTS\n", fault_va) ;
f010cc9b:	ff 75 ec             	pushl  -0x14(%ebp)
f010cc9e:	68 60 78 13 f0       	push   $0xf0137860
f010cca3:	68 6e 01 00 00       	push   $0x16e
f010cca8:	68 33 77 13 f0       	push   $0xf0137733
f010ccad:	e8 53 35 ff ff       	call   f0100205 <_panic>
		/*============================================================================================*/


		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010ccb2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ccb5:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f010ccbb:	8d 50 01             	lea    0x1(%eax),%edx
f010ccbe:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ccc1:	89 90 34 05 00 00    	mov    %edx,0x534(%eax)

		//cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//cprintf("\nPage working set BEFORE fault handler...\n");
		//env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010ccc7:	e8 f6 15 00 00       	call   f010e2c2 <isBufferingEnabled>
f010cccc:	84 c0                	test   %al,%al
f010ccce:	74 13                	je     f010cce3 <fault_handler+0x178>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010ccd0:	83 ec 08             	sub    $0x8,%esp
f010ccd3:	ff 75 ec             	pushl  -0x14(%ebp)
f010ccd6:	ff 75 e8             	pushl  -0x18(%ebp)
f010ccd9:	e8 d5 1b 00 00       	call   f010e8b3 <__page_fault_handler_with_buffering>
f010ccde:	83 c4 10             	add    $0x10,%esp
f010cce1:	eb 11                	jmp    f010ccf4 <fault_handler+0x189>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010cce3:	83 ec 08             	sub    $0x8,%esp
f010cce6:	ff 75 ec             	pushl  -0x14(%ebp)
f010cce9:	ff 75 e8             	pushl  -0x18(%ebp)
f010ccec:	e8 7e 17 00 00       	call   f010e46f <page_fault_handler>
f010ccf1:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010ccf4:	0f 20 d8             	mov    %cr3,%eax
f010ccf7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010ccfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ccfd:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010cd00:	90                   	nop
f010cd01:	c9                   	leave  
f010cd02:	c3                   	ret    
f010cd03:	90                   	nop

f010cd04 <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010cd04:	6a 0e                	push   $0xe
f010cd06:	e9 ed 00 00 00       	jmp    f010cdf8 <_alltraps>
f010cd0b:	90                   	nop

f010cd0c <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010cd0c:	6a 00                	push   $0x0
f010cd0e:	6a 30                	push   $0x30
f010cd10:	e9 e3 00 00 00       	jmp    f010cdf8 <_alltraps>
f010cd15:	90                   	nop

f010cd16 <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010cd16:	6a 08                	push   $0x8
f010cd18:	e9 db 00 00 00       	jmp    f010cdf8 <_alltraps>
f010cd1d:	90                   	nop

f010cd1e <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010cd1e:	6a 00                	push   $0x0
f010cd20:	6a 00                	push   $0x0
f010cd22:	e9 d1 00 00 00       	jmp    f010cdf8 <_alltraps>
f010cd27:	90                   	nop

f010cd28 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010cd28:	6a 00                	push   $0x0
f010cd2a:	6a 01                	push   $0x1
f010cd2c:	e9 c7 00 00 00       	jmp    f010cdf8 <_alltraps>
f010cd31:	90                   	nop

f010cd32 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010cd32:	6a 00                	push   $0x0
f010cd34:	6a 02                	push   $0x2
f010cd36:	e9 bd 00 00 00       	jmp    f010cdf8 <_alltraps>
f010cd3b:	90                   	nop

f010cd3c <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010cd3c:	6a 00                	push   $0x0
f010cd3e:	6a 03                	push   $0x3
f010cd40:	e9 b3 00 00 00       	jmp    f010cdf8 <_alltraps>
f010cd45:	90                   	nop

f010cd46 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010cd46:	6a 00                	push   $0x0
f010cd48:	6a 04                	push   $0x4
f010cd4a:	e9 a9 00 00 00       	jmp    f010cdf8 <_alltraps>
f010cd4f:	90                   	nop

f010cd50 <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010cd50:	6a 00                	push   $0x0
f010cd52:	6a 05                	push   $0x5
f010cd54:	e9 9f 00 00 00       	jmp    f010cdf8 <_alltraps>
f010cd59:	90                   	nop

f010cd5a <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010cd5a:	6a 00                	push   $0x0
f010cd5c:	6a 06                	push   $0x6
f010cd5e:	e9 95 00 00 00       	jmp    f010cdf8 <_alltraps>
f010cd63:	90                   	nop

f010cd64 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010cd64:	6a 00                	push   $0x0
f010cd66:	6a 07                	push   $0x7
f010cd68:	e9 8b 00 00 00       	jmp    f010cdf8 <_alltraps>
f010cd6d:	90                   	nop

f010cd6e <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010cd6e:	6a 0a                	push   $0xa
f010cd70:	e9 83 00 00 00       	jmp    f010cdf8 <_alltraps>
f010cd75:	90                   	nop

f010cd76 <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010cd76:	6a 0b                	push   $0xb
f010cd78:	eb 7e                	jmp    f010cdf8 <_alltraps>

f010cd7a <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010cd7a:	6a 0c                	push   $0xc
f010cd7c:	eb 7a                	jmp    f010cdf8 <_alltraps>

f010cd7e <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010cd7e:	6a 0d                	push   $0xd
f010cd80:	eb 76                	jmp    f010cdf8 <_alltraps>

f010cd82 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010cd82:	6a 00                	push   $0x0
f010cd84:	6a 10                	push   $0x10
f010cd86:	eb 70                	jmp    f010cdf8 <_alltraps>

f010cd88 <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010cd88:	6a 11                	push   $0x11
f010cd8a:	eb 6c                	jmp    f010cdf8 <_alltraps>

f010cd8c <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010cd8c:	6a 00                	push   $0x0
f010cd8e:	6a 12                	push   $0x12
f010cd90:	eb 66                	jmp    f010cdf8 <_alltraps>

f010cd92 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010cd92:	6a 00                	push   $0x0
f010cd94:	6a 13                	push   $0x13
f010cd96:	eb 60                	jmp    f010cdf8 <_alltraps>

f010cd98 <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010cd98:	6a 00                	push   $0x0
f010cd9a:	6a 20                	push   $0x20
f010cd9c:	eb 5a                	jmp    f010cdf8 <_alltraps>

f010cd9e <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010cd9e:	6a 00                	push   $0x0
f010cda0:	6a 21                	push   $0x21
f010cda2:	eb 54                	jmp    f010cdf8 <_alltraps>

f010cda4 <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010cda4:	6a 00                	push   $0x0
f010cda6:	6a 22                	push   $0x22
f010cda8:	eb 4e                	jmp    f010cdf8 <_alltraps>

f010cdaa <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010cdaa:	6a 00                	push   $0x0
f010cdac:	6a 23                	push   $0x23
f010cdae:	eb 48                	jmp    f010cdf8 <_alltraps>

f010cdb0 <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010cdb0:	6a 00                	push   $0x0
f010cdb2:	6a 24                	push   $0x24
f010cdb4:	eb 42                	jmp    f010cdf8 <_alltraps>

f010cdb6 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010cdb6:	6a 00                	push   $0x0
f010cdb8:	6a 25                	push   $0x25
f010cdba:	eb 3c                	jmp    f010cdf8 <_alltraps>

f010cdbc <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010cdbc:	6a 00                	push   $0x0
f010cdbe:	6a 26                	push   $0x26
f010cdc0:	eb 36                	jmp    f010cdf8 <_alltraps>

f010cdc2 <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010cdc2:	6a 00                	push   $0x0
f010cdc4:	6a 27                	push   $0x27
f010cdc6:	eb 30                	jmp    f010cdf8 <_alltraps>

f010cdc8 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010cdc8:	6a 00                	push   $0x0
f010cdca:	6a 28                	push   $0x28
f010cdcc:	eb 2a                	jmp    f010cdf8 <_alltraps>

f010cdce <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010cdce:	6a 00                	push   $0x0
f010cdd0:	6a 29                	push   $0x29
f010cdd2:	eb 24                	jmp    f010cdf8 <_alltraps>

f010cdd4 <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010cdd4:	6a 00                	push   $0x0
f010cdd6:	6a 2a                	push   $0x2a
f010cdd8:	eb 1e                	jmp    f010cdf8 <_alltraps>

f010cdda <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010cdda:	6a 00                	push   $0x0
f010cddc:	6a 2b                	push   $0x2b
f010cdde:	eb 18                	jmp    f010cdf8 <_alltraps>

f010cde0 <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010cde0:	6a 00                	push   $0x0
f010cde2:	6a 2c                	push   $0x2c
f010cde4:	eb 12                	jmp    f010cdf8 <_alltraps>

f010cde6 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010cde6:	6a 00                	push   $0x0
f010cde8:	6a 2d                	push   $0x2d
f010cdea:	eb 0c                	jmp    f010cdf8 <_alltraps>

f010cdec <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010cdec:	6a 00                	push   $0x0
f010cdee:	6a 2e                	push   $0x2e
f010cdf0:	eb 06                	jmp    f010cdf8 <_alltraps>

f010cdf2 <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010cdf2:	6a 00                	push   $0x0
f010cdf4:	6a 2f                	push   $0x2f
f010cdf6:	eb 00                	jmp    f010cdf8 <_alltraps>

f010cdf8 <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010cdf8:	1e                   	push   %ds
push %es
f010cdf9:	06                   	push   %es
pushal
f010cdfa:	60                   	pusha  

mov $(GD_KD), %ax
f010cdfb:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010cdff:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010ce01:	8e c0                	mov    %eax,%es

push %esp
f010ce03:	54                   	push   %esp

call trap
f010ce04:	e8 dc fb ff ff       	call   f010c9e5 <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010ce09:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010ce0a:	61                   	popa   
pop %es
f010ce0b:	07                   	pop    %es
pop %ds
f010ce0c:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010ce0d:	83 c4 08             	add    $0x8,%esp

iret
f010ce10:	cf                   	iret   

f010ce11 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010ce11:	55                   	push   %ebp
f010ce12:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010ce14:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce17:	8b 15 d0 b8 85 f0    	mov    0xf085b8d0,%edx
f010ce1d:	29 d0                	sub    %edx,%eax
f010ce1f:	c1 f8 03             	sar    $0x3,%eax
f010ce22:	89 c2                	mov    %eax,%edx
f010ce24:	89 d0                	mov    %edx,%eax
f010ce26:	c1 e0 02             	shl    $0x2,%eax
f010ce29:	01 d0                	add    %edx,%eax
f010ce2b:	c1 e0 02             	shl    $0x2,%eax
f010ce2e:	01 d0                	add    %edx,%eax
f010ce30:	c1 e0 02             	shl    $0x2,%eax
f010ce33:	01 d0                	add    %edx,%eax
f010ce35:	89 c1                	mov    %eax,%ecx
f010ce37:	c1 e1 08             	shl    $0x8,%ecx
f010ce3a:	01 c8                	add    %ecx,%eax
f010ce3c:	89 c1                	mov    %eax,%ecx
f010ce3e:	c1 e1 10             	shl    $0x10,%ecx
f010ce41:	01 c8                	add    %ecx,%eax
f010ce43:	01 c0                	add    %eax,%eax
f010ce45:	01 d0                	add    %edx,%eax
}
f010ce47:	5d                   	pop    %ebp
f010ce48:	c3                   	ret    

f010ce49 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010ce49:	55                   	push   %ebp
f010ce4a:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010ce4c:	ff 75 08             	pushl  0x8(%ebp)
f010ce4f:	e8 bd ff ff ff       	call   f010ce11 <to_frame_number>
f010ce54:	83 c4 04             	add    $0x4,%esp
f010ce57:	c1 e0 0c             	shl    $0xc,%eax
}
f010ce5a:	c9                   	leave  
f010ce5b:	c3                   	ret    

f010ce5c <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010ce5c:	55                   	push   %ebp
f010ce5d:	89 e5                	mov    %esp,%ebp
f010ce5f:	83 ec 18             	sub    $0x18,%esp
f010ce62:	8b 45 10             	mov    0x10(%ebp),%eax
f010ce65:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010ce68:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010ce6c:	74 26                	je     f010ce94 <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010ce6e:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010ce73:	8b 40 4c             	mov    0x4c(%eax),%eax
f010ce76:	8b 15 74 af 85 f0    	mov    0xf085af74,%edx
f010ce7c:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010ce82:	83 ec 04             	sub    $0x4,%esp
f010ce85:	50                   	push   %eax
f010ce86:	52                   	push   %edx
f010ce87:	68 50 7a 13 f0       	push   $0xf0137a50
f010ce8c:	e8 7d 3e ff ff       	call   f0100d0e <cprintf>
f010ce91:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010ce94:	83 ec 04             	sub    $0x4,%esp
f010ce97:	ff 75 08             	pushl  0x8(%ebp)
f010ce9a:	ff 75 0c             	pushl  0xc(%ebp)
f010ce9d:	68 59 7a 13 f0       	push   $0xf0137a59
f010cea2:	e8 67 3e ff ff       	call   f0100d0e <cprintf>
f010cea7:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010ceaa:	90                   	nop
f010ceab:	c9                   	leave  
f010ceac:	c3                   	ret    

f010cead <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010cead:	55                   	push   %ebp
f010ceae:	89 e5                	mov    %esp,%ebp
f010ceb0:	83 ec 18             	sub    $0x18,%esp
f010ceb3:	8b 45 08             	mov    0x8(%ebp),%eax
f010ceb6:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010ceb9:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010cebd:	83 ec 08             	sub    $0x8,%esp
f010cec0:	50                   	push   %eax
f010cec1:	68 5e 7a 13 f0       	push   $0xf0137a5e
f010cec6:	e8 43 3e ff ff       	call   f0100d0e <cprintf>
f010cecb:	83 c4 10             	add    $0x10,%esp
}
f010cece:	90                   	nop
f010cecf:	c9                   	leave  
f010ced0:	c3                   	ret    

f010ced1 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010ced1:	55                   	push   %ebp
f010ced2:	89 e5                	mov    %esp,%ebp
f010ced4:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010ced7:	e8 6c 3c ff ff       	call   f0100b48 <cons_getc2>
f010cedc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010cedf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010cee2:	c9                   	leave  
f010cee3:	c3                   	ret    

f010cee4 <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010cee4:	55                   	push   %ebp
f010cee5:	89 e5                	mov    %esp,%ebp
f010cee7:	83 ec 18             	sub    $0x18,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010ceea:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010ceef:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010cef2:	83 ec 0c             	sub    $0xc,%esp
f010cef5:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010cef8:	50                   	push   %eax
f010cef9:	e8 0f 9a ff ff       	call   f010690d <allocate_frame>
f010cefe:	83 c4 10             	add    $0x10,%esp
f010cf01:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010cf04:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010cf08:	75 08                	jne    f010cf12 <__sys_allocate_page+0x2e>
		return r ;
f010cf0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cf0d:	e9 e9 00 00 00       	jmp    f010cffb <__sys_allocate_page+0x117>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010cf12:	8b 45 08             	mov    0x8(%ebp),%eax
f010cf15:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010cf1a:	77 0c                	ja     f010cf28 <__sys_allocate_page+0x44>
f010cf1c:	8b 45 08             	mov    0x8(%ebp),%eax
f010cf1f:	25 ff 0f 00 00       	and    $0xfff,%eax
f010cf24:	85 c0                	test   %eax,%eax
f010cf26:	74 0a                	je     f010cf32 <__sys_allocate_page+0x4e>
		return E_INVAL;
f010cf28:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010cf2d:	e9 c9 00 00 00       	jmp    f010cffb <__sys_allocate_page+0x117>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010cf32:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf35:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010cf3a:	83 f8 04             	cmp    $0x4,%eax
f010cf3d:	74 0a                	je     f010cf49 <__sys_allocate_page+0x65>
		return E_INVAL;
f010cf3f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010cf44:	e9 b2 00 00 00       	jmp    f010cffb <__sys_allocate_page+0x117>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010cf49:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cf4c:	83 ec 0c             	sub    $0xc,%esp
f010cf4f:	50                   	push   %eax
f010cf50:	e8 f4 fe ff ff       	call   f010ce49 <to_physical_address>
f010cf55:	83 c4 10             	add    $0x10,%esp
f010cf58:	89 45 ec             	mov    %eax,-0x14(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unsed VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(e->env_page_directory, ptr_frame_info, USER_LIMIT, PERM_WRITEABLE);
f010cf5b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cf5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cf61:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cf64:	6a 02                	push   $0x2
f010cf66:	68 00 00 80 ef       	push   $0xef800000
f010cf6b:	52                   	push   %edx
f010cf6c:	50                   	push   %eax
f010cf6d:	e8 ea 9d ff ff       	call   f0106d5c <map_frame>
f010cf72:	83 c4 10             	add    $0x10,%esp
		memset((void*)USER_LIMIT, 0, PAGE_SIZE);
f010cf75:	83 ec 04             	sub    $0x4,%esp
f010cf78:	68 00 10 00 00       	push   $0x1000
f010cf7d:	6a 00                	push   $0x0
f010cf7f:	68 00 00 80 ef       	push   $0xef800000
f010cf84:	e8 cc 4c 02 00       	call   f0131c55 <memset>
f010cf89:	83 c4 10             	add    $0x10,%esp

		// Temporarily increase the references to prevent unmap_frame from removing the frame
		// we just got from allocate_frame, we will use it for the new page
		ptr_frame_info->references += 1;
f010cf8c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cf8f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cf92:	8b 40 08             	mov    0x8(%eax),%eax
f010cf95:	40                   	inc    %eax
f010cf96:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(e->env_page_directory, USER_LIMIT);
f010cf9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cf9d:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cfa0:	83 ec 08             	sub    $0x8,%esp
f010cfa3:	68 00 00 80 ef       	push   $0xef800000
f010cfa8:	50                   	push   %eax
f010cfa9:	e8 e3 9e ff ff       	call   f0106e91 <unmap_frame>
f010cfae:	83 c4 10             	add    $0x10,%esp

		//return it to the original status
		ptr_frame_info->references -= 1;
f010cfb1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cfb4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cfb7:	8b 40 08             	mov    0x8(%eax),%eax
f010cfba:	48                   	dec    %eax
f010cfbb:	66 89 42 08          	mov    %ax,0x8(%edx)
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010cfbf:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010cfc2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cfc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cfc8:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cfcb:	ff 75 0c             	pushl  0xc(%ebp)
f010cfce:	51                   	push   %ecx
f010cfcf:	52                   	push   %edx
f010cfd0:	50                   	push   %eax
f010cfd1:	e8 86 9d ff ff       	call   f0106d5c <map_frame>
f010cfd6:	83 c4 10             	add    $0x10,%esp
f010cfd9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010cfdc:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010cfe0:	75 14                	jne    f010cff6 <__sys_allocate_page+0x112>
	{
		decrement_references(ptr_frame_info);
f010cfe2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cfe5:	83 ec 0c             	sub    $0xc,%esp
f010cfe8:	50                   	push   %eax
f010cfe9:	e8 ae 9a ff ff       	call   f0106a9c <decrement_references>
f010cfee:	83 c4 10             	add    $0x10,%esp
		return r;
f010cff1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cff4:	eb 05                	jmp    f010cffb <__sys_allocate_page+0x117>
	}
	return 0 ;
f010cff6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010cffb:	c9                   	leave  
f010cffc:	c3                   	ret    

f010cffd <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010cffd:	55                   	push   %ebp
f010cffe:	89 e5                	mov    %esp,%ebp
f010d000:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010d003:	83 ec 04             	sub    $0x4,%esp
f010d006:	68 61 7a 13 f0       	push   $0xf0137a61
f010d00b:	68 b3 00 00 00       	push   $0xb3
f010d010:	68 7f 7a 13 f0       	push   $0xf0137a7f
f010d015:	e8 eb 31 ff ff       	call   f0100205 <_panic>

f010d01a <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010d01a:	55                   	push   %ebp
f010d01b:	89 e5                	mov    %esp,%ebp
f010d01d:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010d020:	83 ec 04             	sub    $0x4,%esp
f010d023:	68 94 7a 13 f0       	push   $0xf0137a94
f010d028:	68 c3 00 00 00       	push   $0xc3
f010d02d:	68 7f 7a 13 f0       	push   $0xf0137a7f
f010d032:	e8 ce 31 ff ff       	call   f0100205 <_panic>

f010d037 <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010d037:	55                   	push   %ebp
f010d038:	89 e5                	mov    %esp,%ebp
f010d03a:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010d03d:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010d042:	8b 40 5c             	mov    0x5c(%eax),%eax
f010d045:	83 ec 04             	sub    $0x4,%esp
f010d048:	ff 75 0c             	pushl  0xc(%ebp)
f010d04b:	ff 75 08             	pushl  0x8(%ebp)
f010d04e:	50                   	push   %eax
f010d04f:	e8 cc bf ff ff       	call   f0109020 <calculate_required_frames>
f010d054:	83 c4 10             	add    $0x10,%esp
}
f010d057:	c9                   	leave  
f010d058:	c3                   	ret    

f010d059 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010d059:	55                   	push   %ebp
f010d05a:	89 e5                	mov    %esp,%ebp
f010d05c:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010d05f:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010d062:	83 ec 0c             	sub    $0xc,%esp
f010d065:	50                   	push   %eax
f010d066:	e8 8b 9f ff ff       	call   f0106ff6 <calculate_available_frames>
f010d06b:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010d06e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d071:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d074:	01 d0                	add    %edx,%eax
}
f010d076:	c9                   	leave  
f010d077:	c3                   	ret    

f010d078 <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010d078:	55                   	push   %ebp
f010d079:	89 e5                	mov    %esp,%ebp
f010d07b:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010d07e:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010d081:	83 ec 0c             	sub    $0xc,%esp
f010d084:	50                   	push   %eax
f010d085:	e8 6c 9f ff ff       	call   f0106ff6 <calculate_available_frames>
f010d08a:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010d08d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010d090:	c9                   	leave  
f010d091:	c3                   	ret    

f010d092 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010d092:	55                   	push   %ebp
f010d093:	89 e5                	mov    %esp,%ebp
f010d095:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010d098:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010d09b:	83 ec 0c             	sub    $0xc,%esp
f010d09e:	50                   	push   %eax
f010d09f:	e8 52 9f ff ff       	call   f0106ff6 <calculate_available_frames>
f010d0a4:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010d0a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010d0aa:	c9                   	leave  
f010d0ab:	c3                   	ret    

f010d0ac <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010d0ac:	55                   	push   %ebp
f010d0ad:	89 e5                	mov    %esp,%ebp
f010d0af:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010d0b2:	83 ec 0c             	sub    $0xc,%esp
f010d0b5:	ff 75 08             	pushl  0x8(%ebp)
f010d0b8:	e8 b5 38 02 00       	call   f0130972 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010d0bd:	83 c4 10             	add    $0x10,%esp
}
f010d0c0:	c9                   	leave  
f010d0c1:	c3                   	ret    

f010d0c2 <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010d0c2:	55                   	push   %ebp
f010d0c3:	89 e5                	mov    %esp,%ebp
f010d0c5:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010d0c8:	e8 fd 37 02 00       	call   f01308ca <scarce_memory>
}
f010d0cd:	90                   	nop
f010d0ce:	c9                   	leave  
f010d0cf:	c3                   	ret    

f010d0d0 <sys_clearFFL>:

void sys_clearFFL()
{
f010d0d0:	55                   	push   %ebp
f010d0d1:	89 e5                	mov    %esp,%ebp
f010d0d3:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010d0d6:	a1 a0 b8 85 f0       	mov    0xf085b8a0,%eax
f010d0db:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010d0de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010d0e5:	eb 12                	jmp    f010d0f9 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010d0e7:	83 ec 0c             	sub    $0xc,%esp
f010d0ea:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010d0ed:	50                   	push   %eax
f010d0ee:	e8 1a 98 ff ff       	call   f010690d <allocate_frame>
f010d0f3:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010d0f6:	ff 45 f4             	incl   -0xc(%ebp)
f010d0f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d0fc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d0ff:	7c e6                	jl     f010d0e7 <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010d101:	90                   	nop
f010d102:	c9                   	leave  
f010d103:	c3                   	ret    

f010d104 <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010d104:	55                   	push   %ebp
f010d105:	89 e5                	mov    %esp,%ebp
f010d107:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010d10a:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010d10f:	83 ec 0c             	sub    $0xc,%esp
f010d112:	50                   	push   %eax
f010d113:	e8 2b 6c ff ff       	call   f0103d43 <pf_calculate_allocated_pages>
f010d118:	83 c4 10             	add    $0x10,%esp
}
f010d11b:	c9                   	leave  
f010d11c:	c3                   	ret    

f010d11d <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010d11d:	55                   	push   %ebp
f010d11e:	89 e5                	mov    %esp,%ebp
f010d120:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010d123:	e8 9a 11 00 00       	call   f010e2c2 <isBufferingEnabled>
f010d128:	84 c0                	test   %al,%al
f010d12a:	74 19                	je     f010d145 <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010d12c:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010d131:	83 ec 04             	sub    $0x4,%esp
f010d134:	ff 75 0c             	pushl  0xc(%ebp)
f010d137:	ff 75 08             	pushl  0x8(%ebp)
f010d13a:	50                   	push   %eax
f010d13b:	e8 a5 c1 ff ff       	call   f01092e5 <__free_user_mem_with_buffering>
f010d140:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010d143:	eb 18                	jmp    f010d15d <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010d145:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010d14a:	83 ec 04             	sub    $0x4,%esp
f010d14d:	ff 75 0c             	pushl  0xc(%ebp)
f010d150:	ff 75 08             	pushl  0x8(%ebp)
f010d153:	50                   	push   %eax
f010d154:	e8 f1 bf ff ff       	call   f010914a <free_user_mem>
f010d159:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010d15c:	90                   	nop
}
f010d15d:	c9                   	leave  
f010d15e:	c3                   	ret    

f010d15f <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010d15f:	55                   	push   %ebp
f010d160:	89 e5                	mov    %esp,%ebp
f010d162:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010d165:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010d16a:	83 ec 04             	sub    $0x4,%esp
f010d16d:	ff 75 0c             	pushl  0xc(%ebp)
f010d170:	ff 75 08             	pushl  0x8(%ebp)
f010d173:	50                   	push   %eax
f010d174:	e8 cb bf ff ff       	call   f0109144 <allocate_user_mem>
f010d179:	83 c4 10             	add    $0x10,%esp
	return;
f010d17c:	90                   	nop
}
f010d17d:	c9                   	leave  
f010d17e:	c3                   	ret    

f010d17f <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010d17f:	55                   	push   %ebp
f010d180:	89 e5                	mov    %esp,%ebp
f010d182:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010d185:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010d18a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010d18d:	ff 75 10             	pushl  0x10(%ebp)
f010d190:	ff 75 0c             	pushl  0xc(%ebp)
f010d193:	ff 75 08             	pushl  0x8(%ebp)
f010d196:	50                   	push   %eax
f010d197:	e8 87 bc ff ff       	call   f0108e23 <allocate_chunk>
f010d19c:	83 c4 10             	add    $0x10,%esp
	return;
f010d19f:	90                   	nop
}
f010d1a0:	c9                   	leave  
f010d1a1:	c3                   	ret    

f010d1a2 <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010d1a2:	55                   	push   %ebp
f010d1a3:	89 e5                	mov    %esp,%ebp
f010d1a5:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010d1a8:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010d1ad:	ff 75 10             	pushl  0x10(%ebp)
f010d1b0:	ff 75 0c             	pushl  0xc(%ebp)
f010d1b3:	ff 75 08             	pushl  0x8(%ebp)
f010d1b6:	50                   	push   %eax
f010d1b7:	e8 46 c1 ff ff       	call   f0109302 <move_user_mem>
f010d1bc:	83 c4 10             	add    $0x10,%esp
	return;
f010d1bf:	90                   	nop
}
f010d1c0:	c9                   	leave  
f010d1c1:	c3                   	ret    

f010d1c2 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010d1c2:	55                   	push   %ebp
f010d1c3:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010d1c5:	a1 ac b8 85 f0       	mov    0xf085b8ac,%eax
}
f010d1ca:	5d                   	pop    %ebp
f010d1cb:	c3                   	ret    

f010d1cc <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010d1cc:	55                   	push   %ebp
f010d1cd:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010d1cf:	8b 45 08             	mov    0x8(%ebp),%eax
f010d1d2:	a3 ac b8 85 f0       	mov    %eax,0xf085b8ac
}
f010d1d7:	90                   	nop
f010d1d8:	5d                   	pop    %ebp
f010d1d9:	c3                   	ret    

f010d1da <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010d1da:	55                   	push   %ebp
f010d1db:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010d1dd:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010d1e2:	8b 15 74 af 85 f0    	mov    0xf085af74,%edx
f010d1e8:	8b 52 38             	mov    0x38(%edx),%edx
f010d1eb:	80 e6 fd             	and    $0xfd,%dh
f010d1ee:	89 50 38             	mov    %edx,0x38(%eax)
}
f010d1f1:	90                   	nop
f010d1f2:	5d                   	pop    %ebp
f010d1f3:	c3                   	ret    

f010d1f4 <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010d1f4:	55                   	push   %ebp
f010d1f5:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010d1f7:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010d1fc:	8b 15 74 af 85 f0    	mov    0xf085af74,%edx
f010d202:	8b 52 38             	mov    0x38(%edx),%edx
f010d205:	80 ce 02             	or     $0x2,%dh
f010d208:	89 50 38             	mov    %edx,0x38(%eax)
}
f010d20b:	90                   	nop
f010d20c:	5d                   	pop    %ebp
f010d20d:	c3                   	ret    

f010d20e <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010d20e:	55                   	push   %ebp
f010d20f:	89 e5                	mov    %esp,%ebp
f010d211:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010d214:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010d219:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d21c:	83 ec 04             	sub    $0x4,%esp
f010d21f:	ff 75 0c             	pushl  0xc(%ebp)
f010d222:	ff 75 08             	pushl  0x8(%ebp)
f010d225:	50                   	push   %eax
f010d226:	e8 47 1a 00 00       	call   f010ec72 <createSemaphore>
f010d22b:	83 c4 10             	add    $0x10,%esp
}
f010d22e:	c9                   	leave  
f010d22f:	c3                   	ret    

f010d230 <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010d230:	55                   	push   %ebp
f010d231:	89 e5                	mov    %esp,%ebp
f010d233:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010d236:	83 ec 08             	sub    $0x8,%esp
f010d239:	ff 75 0c             	pushl  0xc(%ebp)
f010d23c:	ff 75 08             	pushl  0x8(%ebp)
f010d23f:	e8 9f 1a 00 00       	call   f010ece3 <waitSemaphore>
f010d244:	83 c4 10             	add    $0x10,%esp
}
f010d247:	90                   	nop
f010d248:	c9                   	leave  
f010d249:	c3                   	ret    

f010d24a <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010d24a:	55                   	push   %ebp
f010d24b:	89 e5                	mov    %esp,%ebp
f010d24d:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010d250:	83 ec 08             	sub    $0x8,%esp
f010d253:	ff 75 0c             	pushl  0xc(%ebp)
f010d256:	ff 75 08             	pushl  0x8(%ebp)
f010d259:	e8 1f 1b 00 00       	call   f010ed7d <signalSemaphore>
f010d25e:	83 c4 10             	add    $0x10,%esp
}
f010d261:	90                   	nop
f010d262:	c9                   	leave  
f010d263:	c3                   	ret    

f010d264 <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010d264:	55                   	push   %ebp
f010d265:	89 e5                	mov    %esp,%ebp
f010d267:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010d26a:	83 ec 08             	sub    $0x8,%esp
f010d26d:	ff 75 0c             	pushl  0xc(%ebp)
f010d270:	ff 75 08             	pushl  0x8(%ebp)
f010d273:	e8 72 18 00 00       	call   f010eaea <get_semaphore_object_ID>
f010d278:	83 c4 10             	add    $0x10,%esp
f010d27b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010d27e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d282:	78 0c                	js     f010d290 <sys_getSemaphoreValue+0x2c>
f010d284:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d287:	a1 30 b8 85 f0       	mov    0xf085b830,%eax
f010d28c:	39 c2                	cmp    %eax,%edx
f010d28e:	72 19                	jb     f010d2a9 <sys_getSemaphoreValue+0x45>
f010d290:	68 b4 7a 13 f0       	push   $0xf0137ab4
f010d295:	68 d9 7a 13 f0       	push   $0xf0137ad9
f010d29a:	68 4a 01 00 00       	push   $0x14a
f010d29f:	68 7f 7a 13 f0       	push   $0xf0137a7f
f010d2a4:	e8 5c 2f ff ff       	call   f0100205 <_panic>

	return semaphores[semID].value ;
f010d2a9:	8b 0d 88 b8 85 f0    	mov    0xf085b888,%ecx
f010d2af:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d2b2:	89 d0                	mov    %edx,%eax
f010d2b4:	c1 e0 02             	shl    $0x2,%eax
f010d2b7:	01 d0                	add    %edx,%eax
f010d2b9:	01 c0                	add    %eax,%eax
f010d2bb:	01 d0                	add    %edx,%eax
f010d2bd:	01 c0                	add    %eax,%eax
f010d2bf:	01 d0                	add    %edx,%eax
f010d2c1:	c1 e0 02             	shl    $0x2,%eax
f010d2c4:	01 c8                	add    %ecx,%eax
f010d2c6:	8b 40 54             	mov    0x54(%eax),%eax
}
f010d2c9:	c9                   	leave  
f010d2ca:	c3                   	ret    

f010d2cb <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010d2cb:	55                   	push   %ebp
f010d2cc:	89 e5                	mov    %esp,%ebp
f010d2ce:	83 ec 18             	sub    $0x18,%esp
f010d2d1:	8b 45 10             	mov    0x10(%ebp),%eax
f010d2d4:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010d2d7:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010d2db:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010d2e0:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d2e3:	83 ec 0c             	sub    $0xc,%esp
f010d2e6:	ff 75 14             	pushl  0x14(%ebp)
f010d2e9:	52                   	push   %edx
f010d2ea:	ff 75 0c             	pushl  0xc(%ebp)
f010d2ed:	ff 75 08             	pushl  0x8(%ebp)
f010d2f0:	50                   	push   %eax
f010d2f1:	e8 c1 a2 ff ff       	call   f01075b7 <createSharedObject>
f010d2f6:	83 c4 20             	add    $0x20,%esp
}
f010d2f9:	c9                   	leave  
f010d2fa:	c3                   	ret    

f010d2fb <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010d2fb:	55                   	push   %ebp
f010d2fc:	89 e5                	mov    %esp,%ebp
f010d2fe:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010d301:	83 ec 08             	sub    $0x8,%esp
f010d304:	ff 75 0c             	pushl  0xc(%ebp)
f010d307:	ff 75 08             	pushl  0x8(%ebp)
f010d30a:	e8 62 a2 ff ff       	call   f0107571 <getSizeOfSharedObject>
f010d30f:	83 c4 10             	add    $0x10,%esp
}
f010d312:	c9                   	leave  
f010d313:	c3                   	ret    

f010d314 <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010d314:	55                   	push   %ebp
f010d315:	89 e5                	mov    %esp,%ebp
f010d317:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010d31a:	83 ec 04             	sub    $0x4,%esp
f010d31d:	ff 75 10             	pushl  0x10(%ebp)
f010d320:	ff 75 0c             	pushl  0xc(%ebp)
f010d323:	ff 75 08             	pushl  0x8(%ebp)
f010d326:	e8 aa a3 ff ff       	call   f01076d5 <getSharedObject>
f010d32b:	83 c4 10             	add    $0x10,%esp
}
f010d32e:	c9                   	leave  
f010d32f:	c3                   	ret    

f010d330 <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010d330:	55                   	push   %ebp
f010d331:	89 e5                	mov    %esp,%ebp
f010d333:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010d336:	83 ec 08             	sub    $0x8,%esp
f010d339:	ff 75 0c             	pushl  0xc(%ebp)
f010d33c:	ff 75 08             	pushl  0x8(%ebp)
f010d33f:	e8 97 a4 ff ff       	call   f01077db <freeSharedObject>
f010d344:	83 c4 10             	add    $0x10,%esp
}
f010d347:	c9                   	leave  
f010d348:	c3                   	ret    

f010d349 <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010d349:	55                   	push   %ebp
f010d34a:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010d34c:	a1 a4 b8 85 f0       	mov    0xf085b8a4,%eax
}
f010d351:	5d                   	pop    %ebp
f010d352:	c3                   	ret    

f010d353 <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010d353:	55                   	push   %ebp
f010d354:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010d356:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010d35b:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010d35e:	5d                   	pop    %ebp
f010d35f:	c3                   	ret    

f010d360 <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010d360:	55                   	push   %ebp
f010d361:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010d363:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010d368:	89 c2                	mov    %eax,%edx
f010d36a:	a1 70 af 85 f0       	mov    0xf085af70,%eax
f010d36f:	29 c2                	sub    %eax,%edx
f010d371:	89 d0                	mov    %edx,%eax
f010d373:	c1 f8 04             	sar    $0x4,%eax
f010d376:	89 c2                	mov    %eax,%edx
f010d378:	89 d0                	mov    %edx,%eax
f010d37a:	c1 e0 03             	shl    $0x3,%eax
f010d37d:	01 d0                	add    %edx,%eax
f010d37f:	01 c0                	add    %eax,%eax
f010d381:	01 d0                	add    %edx,%eax
f010d383:	c1 e0 03             	shl    $0x3,%eax
f010d386:	01 d0                	add    %edx,%eax
f010d388:	89 c1                	mov    %eax,%ecx
f010d38a:	c1 e1 08             	shl    $0x8,%ecx
f010d38d:	01 c8                	add    %ecx,%eax
f010d38f:	01 c0                	add    %eax,%eax
f010d391:	01 d0                	add    %edx,%eax
f010d393:	01 c0                	add    %eax,%eax
f010d395:	01 d0                	add    %edx,%eax
f010d397:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010d39e:	01 d0                	add    %edx,%eax
f010d3a0:	89 c2                	mov    %eax,%edx
f010d3a2:	c1 e2 09             	shl    $0x9,%edx
f010d3a5:	29 c2                	sub    %eax,%edx
f010d3a7:	89 d0                	mov    %edx,%eax
f010d3a9:	f7 d8                	neg    %eax
}
f010d3ab:	5d                   	pop    %ebp
f010d3ac:	c3                   	ret    

f010d3ad <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010d3ad:	55                   	push   %ebp
f010d3ae:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010d3b0:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010d3b5:	8b 40 50             	mov    0x50(%eax),%eax
}
f010d3b8:	5d                   	pop    %ebp
f010d3b9:	c3                   	ret    

f010d3ba <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010d3ba:	55                   	push   %ebp
f010d3bb:	89 e5                	mov    %esp,%ebp
f010d3bd:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010d3c0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d3c4:	75 0a                	jne    f010d3d0 <sys_destroy_env+0x16>
	{
		e = curenv ;
f010d3c6:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010d3cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d3ce:	eb 22                	jmp    f010d3f2 <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010d3d0:	83 ec 04             	sub    $0x4,%esp
f010d3d3:	6a 00                	push   $0x0
f010d3d5:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010d3d8:	50                   	push   %eax
f010d3d9:	ff 75 08             	pushl  0x8(%ebp)
f010d3dc:	e8 e5 cb ff ff       	call   f0109fc6 <envid2env>
f010d3e1:	83 c4 10             	add    $0x10,%esp
f010d3e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d3e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d3eb:	79 05                	jns    f010d3f2 <sys_destroy_env+0x38>
	{
		return r;
f010d3ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d3f0:	eb 5e                	jmp    f010d450 <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010d3f2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d3f5:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010d3fa:	39 c2                	cmp    %eax,%edx
f010d3fc:	75 1b                	jne    f010d419 <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010d3fe:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010d403:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d406:	83 ec 08             	sub    $0x8,%esp
f010d409:	50                   	push   %eax
f010d40a:	68 ee 7a 13 f0       	push   $0xf0137aee
f010d40f:	e8 fa 38 ff ff       	call   f0100d0e <cprintf>
f010d414:	83 c4 10             	add    $0x10,%esp
f010d417:	eb 20                	jmp    f010d439 <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010d419:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d41c:	8b 50 4c             	mov    0x4c(%eax),%edx
f010d41f:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010d424:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d427:	83 ec 04             	sub    $0x4,%esp
f010d42a:	52                   	push   %edx
f010d42b:	50                   	push   %eax
f010d42c:	68 09 7b 13 f0       	push   $0xf0137b09
f010d431:	e8 d8 38 ff ff       	call   f0100d0e <cprintf>
f010d436:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010d439:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d43c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d43f:	83 ec 0c             	sub    $0xc,%esp
f010d442:	50                   	push   %eax
f010d443:	e8 12 82 ff ff       	call   f010565a <sched_kill_env>
f010d448:	83 c4 10             	add    $0x10,%esp

	return 0;
f010d44b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d450:	c9                   	leave  
f010d451:	c3                   	ret    

f010d452 <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010d452:	55                   	push   %ebp
f010d453:	89 e5                	mov    %esp,%ebp
f010d455:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010d458:	e8 4a cb ff ff       	call   f0109fa7 <env_exit>
	//env_run_cmd_prmpt();
}
f010d45d:	90                   	nop
f010d45e:	c9                   	leave  
f010d45f:	c3                   	ret    

f010d460 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010d460:	55                   	push   %ebp
f010d461:	89 e5                	mov    %esp,%ebp
f010d463:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010d466:	ff 75 14             	pushl  0x14(%ebp)
f010d469:	ff 75 10             	pushl  0x10(%ebp)
f010d46c:	ff 75 0c             	pushl  0xc(%ebp)
f010d46f:	ff 75 08             	pushl  0x8(%ebp)
f010d472:	e8 a8 be ff ff       	call   f010931f <env_create>
f010d477:	83 c4 10             	add    $0x10,%esp
f010d47a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010d47d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d481:	75 07                	jne    f010d48a <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010d483:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010d488:	eb 14                	jmp    f010d49e <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010d48a:	83 ec 0c             	sub    $0xc,%esp
f010d48d:	ff 75 f4             	pushl  -0xc(%ebp)
f010d490:	e8 8a 7d ff ff       	call   f010521f <sched_new_env>
f010d495:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010d498:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d49b:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010d49e:	c9                   	leave  
f010d49f:	c3                   	ret    

f010d4a0 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010d4a0:	55                   	push   %ebp
f010d4a1:	89 e5                	mov    %esp,%ebp
f010d4a3:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010d4a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4a9:	83 ec 0c             	sub    $0xc,%esp
f010d4ac:	50                   	push   %eax
f010d4ad:	e8 8a 7d ff ff       	call   f010523c <sched_run_env>
f010d4b2:	83 c4 10             	add    $0x10,%esp
}
f010d4b5:	90                   	nop
f010d4b6:	c9                   	leave  
f010d4b7:	c3                   	ret    

f010d4b8 <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010d4b8:	55                   	push   %ebp
f010d4b9:	89 e5                	mov    %esp,%ebp
f010d4bb:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010d4be:	0f 31                	rdtsc  
f010d4c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d4c3:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010d4c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d4c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d4cc:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d4cf:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010d4d2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010d4d5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d4d8:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d4db:	89 01                	mov    %eax,(%ecx)
f010d4dd:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010d4e0:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4e3:	c9                   	leave  
f010d4e4:	c2 04 00             	ret    $0x4

f010d4e7 <sys_rcr2>:

uint32 sys_rcr2()
{
f010d4e7:	55                   	push   %ebp
f010d4e8:	89 e5                	mov    %esp,%ebp
f010d4ea:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010d4ed:	0f 20 d0             	mov    %cr2,%eax
f010d4f0:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010d4f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010d4f6:	90                   	nop
}
f010d4f7:	c9                   	leave  
f010d4f8:	c3                   	ret    

f010d4f9 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010d4f9:	55                   	push   %ebp
f010d4fa:	89 e5                	mov    %esp,%ebp
f010d4fc:	83 ec 04             	sub    $0x4,%esp
f010d4ff:	8b 45 08             	mov    0x8(%ebp),%eax
f010d502:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010d505:	8a 45 fc             	mov    -0x4(%ebp),%al
f010d508:	a2 28 b8 85 f0       	mov    %al,0xf085b828
}
f010d50d:	90                   	nop
f010d50e:	c9                   	leave  
f010d50f:	c3                   	ret    

f010d510 <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010d510:	55                   	push   %ebp
f010d511:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010d513:	c7 05 30 ba 85 f0 00 	movl   $0x0,0xf085ba30
f010d51a:	00 00 00 
}
f010d51d:	90                   	nop
f010d51e:	5d                   	pop    %ebp
f010d51f:	c3                   	ret    

f010d520 <inctst>:
void inctst()
{
f010d520:	55                   	push   %ebp
f010d521:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010d523:	a1 30 ba 85 f0       	mov    0xf085ba30,%eax
f010d528:	40                   	inc    %eax
f010d529:	a3 30 ba 85 f0       	mov    %eax,0xf085ba30
}
f010d52e:	90                   	nop
f010d52f:	5d                   	pop    %ebp
f010d530:	c3                   	ret    

f010d531 <gettst>:
uint32 gettst()
{
f010d531:	55                   	push   %ebp
f010d532:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010d534:	a1 30 ba 85 f0       	mov    0xf085ba30,%eax
}
f010d539:	5d                   	pop    %ebp
f010d53a:	c3                   	ret    

f010d53b <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010d53b:	55                   	push   %ebp
f010d53c:	89 e5                	mov    %esp,%ebp
f010d53e:	83 ec 28             	sub    $0x28,%esp
f010d541:	8b 45 14             	mov    0x14(%ebp),%eax
f010d544:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010d547:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010d54e:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010d552:	83 f8 65             	cmp    $0x65,%eax
f010d555:	74 5d                	je     f010d5b4 <tst+0x79>
f010d557:	83 f8 65             	cmp    $0x65,%eax
f010d55a:	7f 0a                	jg     f010d566 <tst+0x2b>
f010d55c:	83 f8 62             	cmp    $0x62,%eax
f010d55f:	74 73                	je     f010d5d4 <tst+0x99>
f010d561:	e9 91 00 00 00       	jmp    f010d5f7 <tst+0xbc>
f010d566:	83 f8 67             	cmp    $0x67,%eax
f010d569:	74 29                	je     f010d594 <tst+0x59>
f010d56b:	83 f8 6c             	cmp    $0x6c,%eax
f010d56e:	0f 85 83 00 00 00    	jne    f010d5f7 <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010d574:	8b 45 08             	mov    0x8(%ebp),%eax
f010d577:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d57a:	73 09                	jae    f010d585 <tst+0x4a>
			chk = 1;
f010d57c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d583:	eb 68                	jmp    f010d5ed <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010d585:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d589:	74 62                	je     f010d5ed <tst+0xb2>
			chk = 1;
f010d58b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d592:	eb 59                	jmp    f010d5ed <tst+0xb2>
	case 'g':
		if (n > v1)
f010d594:	8b 45 08             	mov    0x8(%ebp),%eax
f010d597:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d59a:	76 09                	jbe    f010d5a5 <tst+0x6a>
			chk = 1;
f010d59c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d5a3:	eb 4b                	jmp    f010d5f0 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010d5a5:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d5a9:	74 45                	je     f010d5f0 <tst+0xb5>
			chk = 1;
f010d5ab:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d5b2:	eb 3c                	jmp    f010d5f0 <tst+0xb5>
	case 'e':
		if (n == v1)
f010d5b4:	8b 45 08             	mov    0x8(%ebp),%eax
f010d5b7:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d5ba:	75 09                	jne    f010d5c5 <tst+0x8a>
			chk = 1;
f010d5bc:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d5c3:	eb 2e                	jmp    f010d5f3 <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010d5c5:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d5c9:	74 28                	je     f010d5f3 <tst+0xb8>
			chk = 1;
f010d5cb:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d5d2:	eb 1f                	jmp    f010d5f3 <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010d5d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010d5d7:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d5da:	72 1a                	jb     f010d5f6 <tst+0xbb>
f010d5dc:	8b 45 08             	mov    0x8(%ebp),%eax
f010d5df:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d5e2:	77 12                	ja     f010d5f6 <tst+0xbb>
			chk = 1;
f010d5e4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d5eb:	eb 09                	jmp    f010d5f6 <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d5ed:	90                   	nop
f010d5ee:	eb 07                	jmp    f010d5f7 <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d5f0:	90                   	nop
f010d5f1:	eb 04                	jmp    f010d5f7 <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d5f3:	90                   	nop
f010d5f4:	eb 01                	jmp    f010d5f7 <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010d5f6:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010d5f7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d5fb:	75 17                	jne    f010d614 <tst+0xd9>
f010d5fd:	83 ec 04             	sub    $0x4,%esp
f010d600:	68 21 7b 13 f0       	push   $0xf0137b21
f010d605:	68 00 02 00 00       	push   $0x200
f010d60a:	68 7f 7a 13 f0       	push   $0xf0137a7f
f010d60f:	e8 f1 2b ff ff       	call   f0100205 <_panic>
	tstcnt++ ;
f010d614:	a1 30 ba 85 f0       	mov    0xf085ba30,%eax
f010d619:	40                   	inc    %eax
f010d61a:	a3 30 ba 85 f0       	mov    %eax,0xf085ba30
	return;
f010d61f:	90                   	nop
}
f010d620:	c9                   	leave  
f010d621:	c3                   	ret    

f010d622 <chktst>:

void chktst(uint32 n)
{
f010d622:	55                   	push   %ebp
f010d623:	89 e5                	mov    %esp,%ebp
f010d625:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010d628:	a1 30 ba 85 f0       	mov    0xf085ba30,%eax
f010d62d:	3b 45 08             	cmp    0x8(%ebp),%eax
f010d630:	75 12                	jne    f010d644 <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010d632:	83 ec 0c             	sub    $0xc,%esp
f010d635:	68 34 7b 13 f0       	push   $0xf0137b34
f010d63a:	e8 cf 36 ff ff       	call   f0100d0e <cprintf>
f010d63f:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010d642:	eb 17                	jmp    f010d65b <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010d644:	83 ec 04             	sub    $0x4,%esp
f010d647:	68 60 7b 13 f0       	push   $0xf0137b60
f010d64c:	68 0a 02 00 00       	push   $0x20a
f010d651:	68 7f 7a 13 f0       	push   $0xf0137a7f
f010d656:	e8 aa 2b ff ff       	call   f0100205 <_panic>
}
f010d65b:	c9                   	leave  
f010d65c:	c3                   	ret    

f010d65d <sys_check_LRU_lists>:



//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f010d65d:	55                   	push   %ebp
f010d65e:	89 e5                	mov    %esp,%ebp
f010d660:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d663:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010d668:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f010d66b:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f010d672:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f010d679:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d67d:	0f 84 a5 00 00 00    	je     f010d728 <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f010d683:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d68a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d68d:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d693:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d696:	eb 4a                	jmp    f010d6e2 <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f010d698:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d69b:	8b 00                	mov    (%eax),%eax
f010d69d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d6a0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d6a3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d6a8:	89 c2                	mov    %eax,%edx
f010d6aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d6ad:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d6b4:	8b 45 08             	mov    0x8(%ebp),%eax
f010d6b7:	01 c8                	add    %ecx,%eax
f010d6b9:	8b 00                	mov    (%eax),%eax
f010d6bb:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d6be:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d6c1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d6c6:	39 c2                	cmp    %eax,%edx
f010d6c8:	74 09                	je     f010d6d3 <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f010d6ca:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f010d6d1:	eb 3e                	jmp    f010d711 <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f010d6d3:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d6d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d6d9:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d6df:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d6e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d6e6:	74 08                	je     f010d6f0 <sys_check_LRU_lists+0x93>
f010d6e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d6eb:	8b 40 10             	mov    0x10(%eax),%eax
f010d6ee:	eb 05                	jmp    f010d6f5 <sys_check_LRU_lists+0x98>
f010d6f0:	b8 00 00 00 00       	mov    $0x0,%eax
f010d6f5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d6f8:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d6fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d701:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d707:	85 c0                	test   %eax,%eax
f010d709:	75 8d                	jne    f010d698 <sys_check_LRU_lists+0x3b>
f010d70b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d70f:	75 87                	jne    f010d698 <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f010d711:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d714:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010d71a:	8b 45 10             	mov    0x10(%ebp),%eax
f010d71d:	39 c2                	cmp    %eax,%edx
f010d71f:	74 07                	je     f010d728 <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f010d721:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f010d728:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010d72c:	0f 84 a5 00 00 00    	je     f010d7d7 <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f010d732:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d739:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d73c:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d742:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d745:	eb 4a                	jmp    f010d791 <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f010d747:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d74a:	8b 00                	mov    (%eax),%eax
f010d74c:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d74f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d752:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d757:	89 c2                	mov    %eax,%edx
f010d759:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d75c:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d763:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d766:	01 c8                	add    %ecx,%eax
f010d768:	8b 00                	mov    (%eax),%eax
f010d76a:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010d76d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d770:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d775:	39 c2                	cmp    %eax,%edx
f010d777:	74 09                	je     f010d782 <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f010d779:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f010d780:	eb 3e                	jmp    f010d7c0 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f010d782:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d785:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d788:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d78e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d791:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d795:	74 08                	je     f010d79f <sys_check_LRU_lists+0x142>
f010d797:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d79a:	8b 40 10             	mov    0x10(%eax),%eax
f010d79d:	eb 05                	jmp    f010d7a4 <sys_check_LRU_lists+0x147>
f010d79f:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7a4:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d7a7:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d7ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d7b0:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d7b6:	85 c0                	test   %eax,%eax
f010d7b8:	75 8d                	jne    f010d747 <sys_check_LRU_lists+0xea>
f010d7ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d7be:	75 87                	jne    f010d747 <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f010d7c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d7c3:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f010d7c9:	8b 45 14             	mov    0x14(%ebp),%eax
f010d7cc:	39 c2                	cmp    %eax,%edx
f010d7ce:	74 07                	je     f010d7d7 <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f010d7d0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f010d7d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d7da:	23 45 f8             	and    -0x8(%ebp),%eax
}
f010d7dd:	c9                   	leave  
f010d7de:	c3                   	ret    

f010d7df <sys_check_LRU_lists_free>:



//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f010d7df:	55                   	push   %ebp
f010d7e0:	89 e5                	mov    %esp,%ebp
f010d7e2:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d7e5:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010d7ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f010d7ed:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d7f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d7f7:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d7fd:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d800:	eb 65                	jmp    f010d867 <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f010d802:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d809:	eb 3a                	jmp    f010d845 <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d80b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d80e:	8b 00                	mov    (%eax),%eax
f010d810:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d813:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d816:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d81b:	89 c2                	mov    %eax,%edx
f010d81d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d820:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d827:	8b 45 08             	mov    0x8(%ebp),%eax
f010d82a:	01 c8                	add    %ecx,%eax
f010d82c:	8b 00                	mov    (%eax),%eax
f010d82e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d831:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d834:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d839:	39 c2                	cmp    %eax,%edx
f010d83b:	75 05                	jne    f010d842 <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f010d83d:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d840:	eb 0b                	jmp    f010d84d <sys_check_LRU_lists_free+0x6e>
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f010d842:	ff 45 f4             	incl   -0xc(%ebp)
f010d845:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d848:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d84b:	7c be                	jl     f010d80b <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d84d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d851:	7e 08                	jle    f010d85b <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f010d853:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d856:	e9 ed 00 00 00       	jmp    f010d948 <sys_check_LRU_lists_free+0x169>
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d85b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d85e:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d864:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d867:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d86b:	74 08                	je     f010d875 <sys_check_LRU_lists_free+0x96>
f010d86d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d870:	8b 40 10             	mov    0x10(%eax),%eax
f010d873:	eb 05                	jmp    f010d87a <sys_check_LRU_lists_free+0x9b>
f010d875:	b8 00 00 00 00       	mov    $0x0,%eax
f010d87a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d87d:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d883:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d886:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d88c:	85 c0                	test   %eax,%eax
f010d88e:	0f 85 6e ff ff ff    	jne    f010d802 <sys_check_LRU_lists_free+0x23>
f010d894:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d898:	0f 85 64 ff ff ff    	jne    f010d802 <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d89e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d8a1:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d8a7:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d8aa:	eb 62                	jmp    f010d90e <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f010d8ac:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010d8b3:	eb 3a                	jmp    f010d8ef <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d8b5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d8b8:	8b 00                	mov    (%eax),%eax
f010d8ba:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010d8bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d8c0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d8c5:	89 c2                	mov    %eax,%edx
f010d8c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d8ca:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d8d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010d8d4:	01 c8                	add    %ecx,%eax
f010d8d6:	8b 00                	mov    (%eax),%eax
f010d8d8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d8db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d8de:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d8e3:	39 c2                	cmp    %eax,%edx
f010d8e5:	75 05                	jne    f010d8ec <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f010d8e7:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d8ea:	eb 0b                	jmp    f010d8f7 <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f010d8ec:	ff 45 f0             	incl   -0x10(%ebp)
f010d8ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d8f2:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d8f5:	7c be                	jl     f010d8b5 <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d8f7:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d8fb:	7e 05                	jle    f010d902 <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f010d8fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d900:	eb 46                	jmp    f010d948 <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d902:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d905:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d90b:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d90e:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d912:	74 08                	je     f010d91c <sys_check_LRU_lists_free+0x13d>
f010d914:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d917:	8b 40 10             	mov    0x10(%eax),%eax
f010d91a:	eb 05                	jmp    f010d921 <sys_check_LRU_lists_free+0x142>
f010d91c:	b8 00 00 00 00       	mov    $0x0,%eax
f010d921:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d924:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d92a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d92d:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d933:	85 c0                	test   %eax,%eax
f010d935:	0f 85 71 ff ff ff    	jne    f010d8ac <sys_check_LRU_lists_free+0xcd>
f010d93b:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d93f:	0f 85 67 ff ff ff    	jne    f010d8ac <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f010d945:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010d948:	c9                   	leave  
f010d949:	c3                   	ret    

f010d94a <syscall>:
/*****************************************************************************/
/************************* SYSTEM CALLS DISPATCHER ***************************/
/*****************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010d94a:	55                   	push   %ebp
f010d94b:	89 e5                	mov    %esp,%ebp
f010d94d:	56                   	push   %esi
f010d94e:	53                   	push   %ebx
f010d94f:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010d952:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010d956:	0f 87 0e 04 00 00    	ja     f010dd6a <syscall+0x420>
f010d95c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d95f:	c1 e0 02             	shl    $0x2,%eax
f010d962:	05 7c 7b 13 f0       	add    $0xf0137b7c,%eax
f010d967:	8b 00                	mov    (%eax),%eax
f010d969:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010d96b:	8b 45 14             	mov    0x14(%ebp),%eax
f010d96e:	0f b6 d0             	movzbl %al,%edx
f010d971:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d974:	83 ec 04             	sub    $0x4,%esp
f010d977:	52                   	push   %edx
f010d978:	ff 75 10             	pushl  0x10(%ebp)
f010d97b:	50                   	push   %eax
f010d97c:	e8 db f4 ff ff       	call   f010ce5c <sys_cputs>
f010d981:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d984:	b8 00 00 00 00       	mov    $0x0,%eax
f010d989:	e9 e1 03 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010d98e:	e8 3e f5 ff ff       	call   f010ced1 <sys_cgetc>
f010d993:	e9 d7 03 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010d998:	83 ec 08             	sub    $0x8,%esp
f010d99b:	ff 75 10             	pushl  0x10(%ebp)
f010d99e:	ff 75 0c             	pushl  0xc(%ebp)
f010d9a1:	e8 91 f6 ff ff       	call   f010d037 <sys_calculate_required_frames>
f010d9a6:	83 c4 10             	add    $0x10,%esp
f010d9a9:	e9 c1 03 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010d9ae:	e8 a6 f6 ff ff       	call   f010d059 <sys_calculate_free_frames>
f010d9b3:	e9 b7 03 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010d9b8:	e8 bb f6 ff ff       	call   f010d078 <sys_calculate_modified_frames>
f010d9bd:	e9 ad 03 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010d9c2:	e8 cb f6 ff ff       	call   f010d092 <sys_calculate_notmod_frames>
f010d9c7:	e9 a3 03 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010d9cc:	e8 33 f7 ff ff       	call   f010d104 <sys_pf_calculate_allocated_pages>
f010d9d1:	e9 99 03 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010d9d6:	83 ec 0c             	sub    $0xc,%esp
f010d9d9:	ff 75 0c             	pushl  0xc(%ebp)
f010d9dc:	e8 cb f6 ff ff       	call   f010d0ac <sys_calculate_pages_tobe_removed_ready_exit>
f010d9e1:	83 c4 10             	add    $0x10,%esp
f010d9e4:	e9 86 03 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010d9e9:	e8 d4 f6 ff ff       	call   f010d0c2 <sys_scarce_memory>
		return 0;
f010d9ee:	b8 00 00 00 00       	mov    $0x0,%eax
f010d9f3:	e9 77 03 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_free_user_mem:
		sys_free_user_mem(a1, a2);
f010d9f8:	83 ec 08             	sub    $0x8,%esp
f010d9fb:	ff 75 10             	pushl  0x10(%ebp)
f010d9fe:	ff 75 0c             	pushl  0xc(%ebp)
f010da01:	e8 17 f7 ff ff       	call   f010d11d <sys_free_user_mem>
f010da06:	83 c4 10             	add    $0x10,%esp
		return 0;
f010da09:	b8 00 00 00 00       	mov    $0x0,%eax
f010da0e:	e9 5c 03 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010da13:	8b 55 10             	mov    0x10(%ebp),%edx
f010da16:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da19:	83 ec 08             	sub    $0x8,%esp
f010da1c:	52                   	push   %edx
f010da1d:	50                   	push   %eax
f010da1e:	e8 c1 f4 ff ff       	call   f010cee4 <__sys_allocate_page>
f010da23:	83 c4 10             	add    $0x10,%esp
		return 0;
f010da26:	b8 00 00 00 00       	mov    $0x0,%eax
f010da2b:	e9 3f 03 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010da30:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010da33:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010da36:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010da39:	8b 55 10             	mov    0x10(%ebp),%edx
f010da3c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da3f:	83 ec 0c             	sub    $0xc,%esp
f010da42:	56                   	push   %esi
f010da43:	53                   	push   %ebx
f010da44:	51                   	push   %ecx
f010da45:	52                   	push   %edx
f010da46:	50                   	push   %eax
f010da47:	e8 b1 f5 ff ff       	call   f010cffd <__sys_map_frame>
f010da4c:	83 c4 20             	add    $0x20,%esp
		return 0;
f010da4f:	b8 00 00 00 00       	mov    $0x0,%eax
f010da54:	e9 16 03 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010da59:	8b 55 10             	mov    0x10(%ebp),%edx
f010da5c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010da5f:	83 ec 08             	sub    $0x8,%esp
f010da62:	52                   	push   %edx
f010da63:	50                   	push   %eax
f010da64:	e8 b1 f5 ff ff       	call   f010d01a <__sys_unmap_frame>
f010da69:	83 c4 10             	add    $0x10,%esp
		return 0;
f010da6c:	b8 00 00 00 00       	mov    $0x0,%eax
f010da71:	e9 f9 02 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

		//2022
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010da76:	83 ec 04             	sub    $0x4,%esp
f010da79:	ff 75 14             	pushl  0x14(%ebp)
f010da7c:	ff 75 10             	pushl  0x10(%ebp)
f010da7f:	ff 75 0c             	pushl  0xc(%ebp)
f010da82:	e8 f8 f6 ff ff       	call   f010d17f <sys_allocate_chunk>
f010da87:	83 c4 10             	add    $0x10,%esp
		return 0;
f010da8a:	b8 00 00 00 00       	mov    $0x0,%eax
f010da8f:	e9 db 02 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010da94:	e8 41 f7 ff ff       	call   f010d1da <sys_disable_interrupt>
		return 0;
f010da99:	b8 00 00 00 00       	mov    $0x0,%eax
f010da9e:	e9 cc 02 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010daa3:	e8 4c f7 ff ff       	call   f010d1f4 <sys_enable_interrupt>
		return 0;
f010daa8:	b8 00 00 00 00       	mov    $0x0,%eax
f010daad:	e9 bd 02 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010dab2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dab5:	0f be c0             	movsbl %al,%eax
f010dab8:	83 ec 0c             	sub    $0xc,%esp
f010dabb:	50                   	push   %eax
f010dabc:	e8 ec f3 ff ff       	call   f010cead <sys_cputc>
f010dac1:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dac4:	b8 00 00 00 00       	mov    $0x0,%eax
f010dac9:	e9 a1 02 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010dace:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dad1:	0f be c0             	movsbl %al,%eax
f010dad4:	83 ec 0c             	sub    $0xc,%esp
f010dad7:	50                   	push   %eax
f010dad8:	e8 f3 f5 ff ff       	call   f010d0d0 <sys_clearFFL>
f010dadd:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dae0:	b8 00 00 00 00       	mov    $0x0,%eax
f010dae5:	e9 85 02 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010daea:	8b 45 0c             	mov    0xc(%ebp),%eax
f010daed:	83 ec 08             	sub    $0x8,%esp
f010daf0:	ff 75 10             	pushl  0x10(%ebp)
f010daf3:	50                   	push   %eax
f010daf4:	e8 15 f7 ff ff       	call   f010d20e <sys_createSemaphore>
f010daf9:	83 c4 10             	add    $0x10,%esp
f010dafc:	e9 6e 02 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010db01:	8b 55 10             	mov    0x10(%ebp),%edx
f010db04:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db07:	83 ec 08             	sub    $0x8,%esp
f010db0a:	52                   	push   %edx
f010db0b:	50                   	push   %eax
f010db0c:	e8 1f f7 ff ff       	call   f010d230 <sys_waitSemaphore>
f010db11:	83 c4 10             	add    $0x10,%esp
		return 0;
f010db14:	b8 00 00 00 00       	mov    $0x0,%eax
f010db19:	e9 51 02 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010db1e:	8b 55 10             	mov    0x10(%ebp),%edx
f010db21:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db24:	83 ec 08             	sub    $0x8,%esp
f010db27:	52                   	push   %edx
f010db28:	50                   	push   %eax
f010db29:	e8 1c f7 ff ff       	call   f010d24a <sys_signalSemaphore>
f010db2e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010db31:	b8 00 00 00 00       	mov    $0x0,%eax
f010db36:	e9 34 02 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010db3b:	8b 55 10             	mov    0x10(%ebp),%edx
f010db3e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db41:	83 ec 08             	sub    $0x8,%esp
f010db44:	52                   	push   %edx
f010db45:	50                   	push   %eax
f010db46:	e8 19 f7 ff ff       	call   f010d264 <sys_getSemaphoreValue>
f010db4b:	83 c4 10             	add    $0x10,%esp
f010db4e:	e9 1c 02 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010db53:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010db56:	8b 45 14             	mov    0x14(%ebp),%eax
f010db59:	0f b6 d0             	movzbl %al,%edx
f010db5c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db5f:	51                   	push   %ecx
f010db60:	52                   	push   %edx
f010db61:	ff 75 10             	pushl  0x10(%ebp)
f010db64:	50                   	push   %eax
f010db65:	e8 61 f7 ff ff       	call   f010d2cb <sys_createSharedObject>
f010db6a:	83 c4 10             	add    $0x10,%esp
f010db6d:	e9 fd 01 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010db72:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010db75:	8b 55 10             	mov    0x10(%ebp),%edx
f010db78:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db7b:	83 ec 04             	sub    $0x4,%esp
f010db7e:	51                   	push   %ecx
f010db7f:	52                   	push   %edx
f010db80:	50                   	push   %eax
f010db81:	e8 8e f7 ff ff       	call   f010d314 <sys_getSharedObject>
f010db86:	83 c4 10             	add    $0x10,%esp
f010db89:	e9 e1 01 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010db8e:	8b 55 10             	mov    0x10(%ebp),%edx
f010db91:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db94:	83 ec 08             	sub    $0x8,%esp
f010db97:	52                   	push   %edx
f010db98:	50                   	push   %eax
f010db99:	e8 92 f7 ff ff       	call   f010d330 <sys_freeSharedObject>
f010db9e:	83 c4 10             	add    $0x10,%esp
f010dba1:	e9 c9 01 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010dba6:	8b 55 10             	mov    0x10(%ebp),%edx
f010dba9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbac:	83 ec 08             	sub    $0x8,%esp
f010dbaf:	52                   	push   %edx
f010dbb0:	50                   	push   %eax
f010dbb1:	e8 45 f7 ff ff       	call   f010d2fb <sys_getSizeOfSharedObject>
f010dbb6:	83 c4 10             	add    $0x10,%esp
f010dbb9:	e9 b1 01 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010dbbe:	e8 86 f7 ff ff       	call   f010d349 <sys_getMaxShares>
f010dbc3:	e9 a7 01 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010dbc8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbcb:	ff 75 18             	pushl  0x18(%ebp)
f010dbce:	ff 75 14             	pushl  0x14(%ebp)
f010dbd1:	ff 75 10             	pushl  0x10(%ebp)
f010dbd4:	50                   	push   %eax
f010dbd5:	e8 86 f8 ff ff       	call   f010d460 <sys_create_env>
f010dbda:	83 c4 10             	add    $0x10,%esp
f010dbdd:	e9 8d 01 00 00       	jmp    f010dd6f <syscall+0x425>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010dbe2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbe5:	83 ec 0c             	sub    $0xc,%esp
f010dbe8:	50                   	push   %eax
f010dbe9:	e8 b2 f8 ff ff       	call   f010d4a0 <sys_run_env>
f010dbee:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dbf1:	b8 00 00 00 00       	mov    $0x0,%eax
f010dbf6:	e9 74 01 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010dbfb:	e8 60 f7 ff ff       	call   f010d360 <sys_getenvindex>
f010dc00:	e9 6a 01 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010dc05:	e8 49 f7 ff ff       	call   f010d353 <sys_getenvid>
f010dc0a:	e9 60 01 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010dc0f:	e8 99 f7 ff ff       	call   f010d3ad <sys_getparentenvid>
f010dc14:	e9 56 01 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010dc19:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc1c:	83 ec 0c             	sub    $0xc,%esp
f010dc1f:	50                   	push   %eax
f010dc20:	e8 95 f7 ff ff       	call   f010d3ba <sys_destroy_env>
f010dc25:	83 c4 10             	add    $0x10,%esp
f010dc28:	e9 42 01 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010dc2d:	e8 20 f8 ff ff       	call   f010d452 <sys_exit_env>
		return 0;
f010dc32:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc37:	e9 33 01 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010dc3c:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010dc3f:	83 ec 0c             	sub    $0xc,%esp
f010dc42:	50                   	push   %eax
f010dc43:	e8 70 f8 ff ff       	call   f010d4b8 <sys_get_virtual_time>
f010dc48:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010dc4b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010dc51:	8b 45 10             	mov    0x10(%ebp),%eax
f010dc54:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010dc57:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010dc5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dc5d:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010dc5f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010dc62:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dc65:	89 10                	mov    %edx,(%eax)
		return 0;
f010dc67:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc6c:	e9 fe 00 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010dc71:	83 ec 04             	sub    $0x4,%esp
f010dc74:	ff 75 14             	pushl  0x14(%ebp)
f010dc77:	ff 75 10             	pushl  0x10(%ebp)
f010dc7a:	ff 75 0c             	pushl  0xc(%ebp)
f010dc7d:	e8 20 f5 ff ff       	call   f010d1a2 <sys_move_user_mem>
f010dc82:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dc85:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc8a:	e9 e0 00 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010dc8f:	e8 53 f8 ff ff       	call   f010d4e7 <sys_rcr2>
f010dc94:	e9 d6 00 00 00       	jmp    f010dd6f <syscall+0x425>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010dc99:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc9c:	0f b6 c0             	movzbl %al,%eax
f010dc9f:	83 ec 0c             	sub    $0xc,%esp
f010dca2:	50                   	push   %eax
f010dca3:	e8 51 f8 ff ff       	call   f010d4f9 <sys_bypassPageFault>
f010dca8:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dcab:	b8 00 00 00 00       	mov    $0x0,%eax
f010dcb0:	e9 ba 00 00 00       	jmp    f010dd6f <syscall+0x425>

	case SYS_rsttst:
		rsttst();
f010dcb5:	e8 56 f8 ff ff       	call   f010d510 <rsttst>
		return 0;
f010dcba:	b8 00 00 00 00       	mov    $0x0,%eax
f010dcbf:	e9 ab 00 00 00       	jmp    f010dd6f <syscall+0x425>
	case SYS_inctst:
		inctst();
f010dcc4:	e8 57 f8 ff ff       	call   f010d520 <inctst>
		return 0;
f010dcc9:	b8 00 00 00 00       	mov    $0x0,%eax
f010dcce:	e9 9c 00 00 00       	jmp    f010dd6f <syscall+0x425>
	case SYS_chktst:
		chktst(a1);
f010dcd3:	83 ec 0c             	sub    $0xc,%esp
f010dcd6:	ff 75 0c             	pushl  0xc(%ebp)
f010dcd9:	e8 44 f9 ff ff       	call   f010d622 <chktst>
f010dcde:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dce1:	b8 00 00 00 00       	mov    $0x0,%eax
f010dce6:	e9 84 00 00 00       	jmp    f010dd6f <syscall+0x425>
	case SYS_gettst:
		return gettst();
f010dceb:	e8 41 f8 ff ff       	call   f010d531 <gettst>
f010dcf0:	eb 7d                	jmp    f010dd6f <syscall+0x425>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010dcf2:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010dcf5:	8b 45 18             	mov    0x18(%ebp),%eax
f010dcf8:	0f be c0             	movsbl %al,%eax
f010dcfb:	83 ec 0c             	sub    $0xc,%esp
f010dcfe:	52                   	push   %edx
f010dcff:	50                   	push   %eax
f010dd00:	ff 75 14             	pushl  0x14(%ebp)
f010dd03:	ff 75 10             	pushl  0x10(%ebp)
f010dd06:	ff 75 0c             	pushl  0xc(%ebp)
f010dd09:	e8 2d f8 ff ff       	call   f010d53b <tst>
f010dd0e:	83 c4 20             	add    $0x20,%esp
		return 0;
f010dd11:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd16:	eb 57                	jmp    f010dd6f <syscall+0x425>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010dd18:	e8 a5 f4 ff ff       	call   f010d1c2 <sys_get_heap_strategy>
f010dd1d:	eb 50                	jmp    f010dd6f <syscall+0x425>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010dd1f:	83 ec 0c             	sub    $0xc,%esp
f010dd22:	ff 75 0c             	pushl  0xc(%ebp)
f010dd25:	e8 a2 f4 ff ff       	call   f010d1cc <sys_set_uheap_strategy>
f010dd2a:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dd2d:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd32:	eb 3b                	jmp    f010dd6f <syscall+0x425>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010dd34:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010dd37:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010dd3a:	8b 55 10             	mov    0x10(%ebp),%edx
f010dd3d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd40:	53                   	push   %ebx
f010dd41:	51                   	push   %ecx
f010dd42:	52                   	push   %edx
f010dd43:	50                   	push   %eax
f010dd44:	e8 14 f9 ff ff       	call   f010d65d <sys_check_LRU_lists>
f010dd49:	83 c4 10             	add    $0x10,%esp
f010dd4c:	eb 21                	jmp    f010dd6f <syscall+0x425>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010dd4e:	8b 55 10             	mov    0x10(%ebp),%edx
f010dd51:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd54:	83 ec 08             	sub    $0x8,%esp
f010dd57:	52                   	push   %edx
f010dd58:	50                   	push   %eax
f010dd59:	e8 81 fa ff ff       	call   f010d7df <sys_check_LRU_lists_free>
f010dd5e:	83 c4 10             	add    $0x10,%esp
f010dd61:	eb 0c                	jmp    f010dd6f <syscall+0x425>

	case NSYSCALLS:
		return 	-E_INVAL;
f010dd63:	b8 03 00 00 00       	mov    $0x3,%eax
f010dd68:	eb 05                	jmp    f010dd6f <syscall+0x425>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010dd6a:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010dd6f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010dd72:	5b                   	pop    %ebx
f010dd73:	5e                   	pop    %esi
f010dd74:	5d                   	pop    %ebp
f010dd75:	c3                   	ret    

f010dd76 <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010dd76:	55                   	push   %ebp
f010dd77:	89 e5                	mov    %esp,%ebp
f010dd79:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010dd7c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd7f:	8b 00                	mov    (%eax),%eax
f010dd81:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010dd84:	8b 45 10             	mov    0x10(%ebp),%eax
f010dd87:	8b 00                	mov    (%eax),%eax
f010dd89:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010dd8c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010dd93:	e9 ca 00 00 00       	jmp    f010de62 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010dd98:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010dd9b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010dd9e:	01 d0                	add    %edx,%eax
f010dda0:	89 c2                	mov    %eax,%edx
f010dda2:	c1 ea 1f             	shr    $0x1f,%edx
f010dda5:	01 d0                	add    %edx,%eax
f010dda7:	d1 f8                	sar    %eax
f010dda9:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010ddac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ddaf:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010ddb2:	eb 03                	jmp    f010ddb7 <stab_binsearch+0x41>
			m--;
f010ddb4:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010ddb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ddba:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010ddbd:	7c 1e                	jl     f010dddd <stab_binsearch+0x67>
f010ddbf:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ddc2:	89 d0                	mov    %edx,%eax
f010ddc4:	01 c0                	add    %eax,%eax
f010ddc6:	01 d0                	add    %edx,%eax
f010ddc8:	c1 e0 02             	shl    $0x2,%eax
f010ddcb:	89 c2                	mov    %eax,%edx
f010ddcd:	8b 45 08             	mov    0x8(%ebp),%eax
f010ddd0:	01 d0                	add    %edx,%eax
f010ddd2:	8a 40 04             	mov    0x4(%eax),%al
f010ddd5:	0f b6 c0             	movzbl %al,%eax
f010ddd8:	3b 45 14             	cmp    0x14(%ebp),%eax
f010dddb:	75 d7                	jne    f010ddb4 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010dddd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dde0:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010dde3:	7d 09                	jge    f010ddee <stab_binsearch+0x78>
			l = true_m + 1;
f010dde5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010dde8:	40                   	inc    %eax
f010dde9:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010ddec:	eb 74                	jmp    f010de62 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010ddee:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010ddf5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ddf8:	89 d0                	mov    %edx,%eax
f010ddfa:	01 c0                	add    %eax,%eax
f010ddfc:	01 d0                	add    %edx,%eax
f010ddfe:	c1 e0 02             	shl    $0x2,%eax
f010de01:	89 c2                	mov    %eax,%edx
f010de03:	8b 45 08             	mov    0x8(%ebp),%eax
f010de06:	01 d0                	add    %edx,%eax
f010de08:	8b 40 08             	mov    0x8(%eax),%eax
f010de0b:	3b 45 18             	cmp    0x18(%ebp),%eax
f010de0e:	73 11                	jae    f010de21 <stab_binsearch+0xab>
			*region_left = m;
f010de10:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de13:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010de16:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010de18:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010de1b:	40                   	inc    %eax
f010de1c:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010de1f:	eb 41                	jmp    f010de62 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010de21:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010de24:	89 d0                	mov    %edx,%eax
f010de26:	01 c0                	add    %eax,%eax
f010de28:	01 d0                	add    %edx,%eax
f010de2a:	c1 e0 02             	shl    $0x2,%eax
f010de2d:	89 c2                	mov    %eax,%edx
f010de2f:	8b 45 08             	mov    0x8(%ebp),%eax
f010de32:	01 d0                	add    %edx,%eax
f010de34:	8b 40 08             	mov    0x8(%eax),%eax
f010de37:	3b 45 18             	cmp    0x18(%ebp),%eax
f010de3a:	76 14                	jbe    f010de50 <stab_binsearch+0xda>
			*region_right = m - 1;
f010de3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010de3f:	8d 50 ff             	lea    -0x1(%eax),%edx
f010de42:	8b 45 10             	mov    0x10(%ebp),%eax
f010de45:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010de47:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010de4a:	48                   	dec    %eax
f010de4b:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010de4e:	eb 12                	jmp    f010de62 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010de50:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de53:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010de56:	89 10                	mov    %edx,(%eax)
			l = m;
f010de58:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010de5b:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010de5e:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010de62:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010de65:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010de68:	0f 8e 2a ff ff ff    	jle    f010dd98 <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010de6e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010de72:	75 0f                	jne    f010de83 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010de74:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de77:	8b 00                	mov    (%eax),%eax
f010de79:	8d 50 ff             	lea    -0x1(%eax),%edx
f010de7c:	8b 45 10             	mov    0x10(%ebp),%eax
f010de7f:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010de81:	eb 3d                	jmp    f010dec0 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010de83:	8b 45 10             	mov    0x10(%ebp),%eax
f010de86:	8b 00                	mov    (%eax),%eax
f010de88:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010de8b:	eb 03                	jmp    f010de90 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010de8d:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010de90:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de93:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010de95:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010de98:	7d 1e                	jge    f010deb8 <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010de9a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010de9d:	89 d0                	mov    %edx,%eax
f010de9f:	01 c0                	add    %eax,%eax
f010dea1:	01 d0                	add    %edx,%eax
f010dea3:	c1 e0 02             	shl    $0x2,%eax
f010dea6:	89 c2                	mov    %eax,%edx
f010dea8:	8b 45 08             	mov    0x8(%ebp),%eax
f010deab:	01 d0                	add    %edx,%eax
f010dead:	8a 40 04             	mov    0x4(%eax),%al
f010deb0:	0f b6 c0             	movzbl %al,%eax
f010deb3:	3b 45 14             	cmp    0x14(%ebp),%eax
f010deb6:	75 d5                	jne    f010de8d <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010deb8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010debb:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010debe:	89 10                	mov    %edx,(%eax)
	}
}
f010dec0:	90                   	nop
f010dec1:	c9                   	leave  
f010dec2:	c3                   	ret    

f010dec3 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010dec3:	55                   	push   %ebp
f010dec4:	89 e5                	mov    %esp,%ebp
f010dec6:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010dec9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010decc:	c7 00 40 7c 13 f0    	movl   $0xf0137c40,(%eax)
	info->eip_line = 0;
f010ded2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ded5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010dedc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dedf:	c7 40 08 40 7c 13 f0 	movl   $0xf0137c40,0x8(%eax)
	info->eip_fn_namelen = 9;
f010dee6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dee9:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010def0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010def3:	8b 55 08             	mov    0x8(%ebp),%edx
f010def6:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010def9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010defc:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010df03:	8b 45 08             	mov    0x8(%ebp),%eax
f010df06:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010df0b:	76 1e                	jbe    f010df2b <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010df0d:	c7 45 f4 10 d8 13 f0 	movl   $0xf013d810,-0xc(%ebp)
		stab_end = __STAB_END__;
f010df14:	c7 45 f0 40 dd 17 f0 	movl   $0xf017dd40,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010df1b:	c7 45 ec 41 dd 17 f0 	movl   $0xf017dd41,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010df22:	c7 45 e8 bf aa 18 f0 	movl   $0xf018aabf,-0x18(%ebp)
f010df29:	eb 2a                	jmp    f010df55 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010df2b:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010df32:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010df35:	8b 00                	mov    (%eax),%eax
f010df37:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010df3a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010df3d:	8b 40 04             	mov    0x4(%eax),%eax
f010df40:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010df43:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010df46:	8b 40 08             	mov    0x8(%eax),%eax
f010df49:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010df4c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010df4f:	8b 40 0c             	mov    0xc(%eax),%eax
f010df52:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010df55:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010df58:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010df5b:	76 0a                	jbe    f010df67 <debuginfo_eip+0xa4>
f010df5d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010df60:	48                   	dec    %eax
f010df61:	8a 00                	mov    (%eax),%al
f010df63:	84 c0                	test   %al,%al
f010df65:	74 0a                	je     f010df71 <debuginfo_eip+0xae>
		return -1;
f010df67:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010df6c:	e9 01 02 00 00       	jmp    f010e172 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010df71:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010df78:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010df7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010df7e:	29 c2                	sub    %eax,%edx
f010df80:	89 d0                	mov    %edx,%eax
f010df82:	c1 f8 02             	sar    $0x2,%eax
f010df85:	89 c2                	mov    %eax,%edx
f010df87:	89 d0                	mov    %edx,%eax
f010df89:	c1 e0 02             	shl    $0x2,%eax
f010df8c:	01 d0                	add    %edx,%eax
f010df8e:	c1 e0 02             	shl    $0x2,%eax
f010df91:	01 d0                	add    %edx,%eax
f010df93:	c1 e0 02             	shl    $0x2,%eax
f010df96:	01 d0                	add    %edx,%eax
f010df98:	89 c1                	mov    %eax,%ecx
f010df9a:	c1 e1 08             	shl    $0x8,%ecx
f010df9d:	01 c8                	add    %ecx,%eax
f010df9f:	89 c1                	mov    %eax,%ecx
f010dfa1:	c1 e1 10             	shl    $0x10,%ecx
f010dfa4:	01 c8                	add    %ecx,%eax
f010dfa6:	01 c0                	add    %eax,%eax
f010dfa8:	01 d0                	add    %edx,%eax
f010dfaa:	48                   	dec    %eax
f010dfab:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010dfae:	ff 75 08             	pushl  0x8(%ebp)
f010dfb1:	6a 64                	push   $0x64
f010dfb3:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010dfb6:	50                   	push   %eax
f010dfb7:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010dfba:	50                   	push   %eax
f010dfbb:	ff 75 f4             	pushl  -0xc(%ebp)
f010dfbe:	e8 b3 fd ff ff       	call   f010dd76 <stab_binsearch>
f010dfc3:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010dfc6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010dfc9:	85 c0                	test   %eax,%eax
f010dfcb:	75 0a                	jne    f010dfd7 <debuginfo_eip+0x114>
		return -1;
f010dfcd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010dfd2:	e9 9b 01 00 00       	jmp    f010e172 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010dfd7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010dfda:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010dfdd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010dfe0:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010dfe3:	ff 75 08             	pushl  0x8(%ebp)
f010dfe6:	6a 24                	push   $0x24
f010dfe8:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010dfeb:	50                   	push   %eax
f010dfec:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010dfef:	50                   	push   %eax
f010dff0:	ff 75 f4             	pushl  -0xc(%ebp)
f010dff3:	e8 7e fd ff ff       	call   f010dd76 <stab_binsearch>
f010dff8:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010dffb:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010dffe:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e001:	39 c2                	cmp    %eax,%edx
f010e003:	0f 8f 86 00 00 00    	jg     f010e08f <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010e009:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e00c:	89 c2                	mov    %eax,%edx
f010e00e:	89 d0                	mov    %edx,%eax
f010e010:	01 c0                	add    %eax,%eax
f010e012:	01 d0                	add    %edx,%eax
f010e014:	c1 e0 02             	shl    $0x2,%eax
f010e017:	89 c2                	mov    %eax,%edx
f010e019:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e01c:	01 d0                	add    %edx,%eax
f010e01e:	8b 00                	mov    (%eax),%eax
f010e020:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010e023:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e026:	29 d1                	sub    %edx,%ecx
f010e028:	89 ca                	mov    %ecx,%edx
f010e02a:	39 d0                	cmp    %edx,%eax
f010e02c:	73 22                	jae    f010e050 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010e02e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e031:	89 c2                	mov    %eax,%edx
f010e033:	89 d0                	mov    %edx,%eax
f010e035:	01 c0                	add    %eax,%eax
f010e037:	01 d0                	add    %edx,%eax
f010e039:	c1 e0 02             	shl    $0x2,%eax
f010e03c:	89 c2                	mov    %eax,%edx
f010e03e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e041:	01 d0                	add    %edx,%eax
f010e043:	8b 10                	mov    (%eax),%edx
f010e045:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e048:	01 c2                	add    %eax,%edx
f010e04a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e04d:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010e050:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e053:	89 c2                	mov    %eax,%edx
f010e055:	89 d0                	mov    %edx,%eax
f010e057:	01 c0                	add    %eax,%eax
f010e059:	01 d0                	add    %edx,%eax
f010e05b:	c1 e0 02             	shl    $0x2,%eax
f010e05e:	89 c2                	mov    %eax,%edx
f010e060:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e063:	01 d0                	add    %edx,%eax
f010e065:	8b 50 08             	mov    0x8(%eax),%edx
f010e068:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e06b:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010e06e:	8b 55 08             	mov    0x8(%ebp),%edx
f010e071:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e074:	8b 40 10             	mov    0x10(%eax),%eax
f010e077:	29 c2                	sub    %eax,%edx
f010e079:	89 d0                	mov    %edx,%eax
f010e07b:	c1 f8 02             	sar    $0x2,%eax
f010e07e:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010e081:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e084:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010e087:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e08a:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010e08d:	eb 15                	jmp    f010e0a4 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010e08f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e092:	8b 55 08             	mov    0x8(%ebp),%edx
f010e095:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010e098:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e09b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010e09e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e0a1:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010e0a4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0a7:	8b 40 08             	mov    0x8(%eax),%eax
f010e0aa:	83 ec 08             	sub    $0x8,%esp
f010e0ad:	6a 3a                	push   $0x3a
f010e0af:	50                   	push   %eax
f010e0b0:	e8 74 3b 02 00       	call   f0131c29 <strfind>
f010e0b5:	83 c4 10             	add    $0x10,%esp
f010e0b8:	89 c2                	mov    %eax,%edx
f010e0ba:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0bd:	8b 40 08             	mov    0x8(%eax),%eax
f010e0c0:	29 c2                	sub    %eax,%edx
f010e0c2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0c5:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010e0c8:	eb 03                	jmp    f010e0cd <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010e0ca:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010e0cd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e0d0:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010e0d3:	7c 4e                	jl     f010e123 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010e0d5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e0d8:	89 d0                	mov    %edx,%eax
f010e0da:	01 c0                	add    %eax,%eax
f010e0dc:	01 d0                	add    %edx,%eax
f010e0de:	c1 e0 02             	shl    $0x2,%eax
f010e0e1:	89 c2                	mov    %eax,%edx
f010e0e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e0e6:	01 d0                	add    %edx,%eax
f010e0e8:	8a 40 04             	mov    0x4(%eax),%al
f010e0eb:	3c 84                	cmp    $0x84,%al
f010e0ed:	74 34                	je     f010e123 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010e0ef:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e0f2:	89 d0                	mov    %edx,%eax
f010e0f4:	01 c0                	add    %eax,%eax
f010e0f6:	01 d0                	add    %edx,%eax
f010e0f8:	c1 e0 02             	shl    $0x2,%eax
f010e0fb:	89 c2                	mov    %eax,%edx
f010e0fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e100:	01 d0                	add    %edx,%eax
f010e102:	8a 40 04             	mov    0x4(%eax),%al
f010e105:	3c 64                	cmp    $0x64,%al
f010e107:	75 c1                	jne    f010e0ca <debuginfo_eip+0x207>
f010e109:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e10c:	89 d0                	mov    %edx,%eax
f010e10e:	01 c0                	add    %eax,%eax
f010e110:	01 d0                	add    %edx,%eax
f010e112:	c1 e0 02             	shl    $0x2,%eax
f010e115:	89 c2                	mov    %eax,%edx
f010e117:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e11a:	01 d0                	add    %edx,%eax
f010e11c:	8b 40 08             	mov    0x8(%eax),%eax
f010e11f:	85 c0                	test   %eax,%eax
f010e121:	74 a7                	je     f010e0ca <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010e123:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e126:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010e129:	7c 42                	jl     f010e16d <debuginfo_eip+0x2aa>
f010e12b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e12e:	89 d0                	mov    %edx,%eax
f010e130:	01 c0                	add    %eax,%eax
f010e132:	01 d0                	add    %edx,%eax
f010e134:	c1 e0 02             	shl    $0x2,%eax
f010e137:	89 c2                	mov    %eax,%edx
f010e139:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e13c:	01 d0                	add    %edx,%eax
f010e13e:	8b 00                	mov    (%eax),%eax
f010e140:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010e143:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e146:	29 d1                	sub    %edx,%ecx
f010e148:	89 ca                	mov    %ecx,%edx
f010e14a:	39 d0                	cmp    %edx,%eax
f010e14c:	73 1f                	jae    f010e16d <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010e14e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e151:	89 d0                	mov    %edx,%eax
f010e153:	01 c0                	add    %eax,%eax
f010e155:	01 d0                	add    %edx,%eax
f010e157:	c1 e0 02             	shl    $0x2,%eax
f010e15a:	89 c2                	mov    %eax,%edx
f010e15c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e15f:	01 d0                	add    %edx,%eax
f010e161:	8b 10                	mov    (%eax),%edx
f010e163:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e166:	01 c2                	add    %eax,%edx
f010e168:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e16b:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010e16d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e172:	c9                   	leave  
f010e173:	c3                   	ret    

f010e174 <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010e174:	55                   	push   %ebp
f010e175:	89 e5                	mov    %esp,%ebp
f010e177:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010e17a:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010e17e:	74 1c                	je     f010e19c <setPageReplacmentAlgorithmLRU+0x28>
f010e180:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010e184:	74 16                	je     f010e19c <setPageReplacmentAlgorithmLRU+0x28>
f010e186:	68 4c 7c 13 f0       	push   $0xf0137c4c
f010e18b:	68 96 7c 13 f0       	push   $0xf0137c96
f010e190:	6a 18                	push   $0x18
f010e192:	68 ab 7c 13 f0       	push   $0xf0137cab
f010e197:	e8 69 20 ff ff       	call   f0100205 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010e19c:	8b 45 08             	mov    0x8(%ebp),%eax
f010e19f:	a3 04 b9 85 f0       	mov    %eax,0xf085b904
}
f010e1a4:	90                   	nop
f010e1a5:	c9                   	leave  
f010e1a6:	c3                   	ret    

f010e1a7 <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010e1a7:	55                   	push   %ebp
f010e1a8:	89 e5                	mov    %esp,%ebp
f010e1aa:	c7 05 04 b9 85 f0 03 	movl   $0x3,0xf085b904
f010e1b1:	00 00 00 
f010e1b4:	90                   	nop
f010e1b5:	5d                   	pop    %ebp
f010e1b6:	c3                   	ret    

f010e1b7 <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010e1b7:	55                   	push   %ebp
f010e1b8:	89 e5                	mov    %esp,%ebp
f010e1ba:	c7 05 04 b9 85 f0 04 	movl   $0x4,0xf085b904
f010e1c1:	00 00 00 
f010e1c4:	90                   	nop
f010e1c5:	5d                   	pop    %ebp
f010e1c6:	c3                   	ret    

f010e1c7 <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010e1c7:	55                   	push   %ebp
f010e1c8:	89 e5                	mov    %esp,%ebp
f010e1ca:	c7 05 04 b9 85 f0 05 	movl   $0x5,0xf085b904
f010e1d1:	00 00 00 
f010e1d4:	90                   	nop
f010e1d5:	5d                   	pop    %ebp
f010e1d6:	c3                   	ret    

f010e1d7 <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010e1d7:	55                   	push   %ebp
f010e1d8:	89 e5                	mov    %esp,%ebp
f010e1da:	c7 05 04 b9 85 f0 07 	movl   $0x7,0xf085b904
f010e1e1:	00 00 00 
f010e1e4:	90                   	nop
f010e1e5:	5d                   	pop    %ebp
f010e1e6:	c3                   	ret    

f010e1e7 <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010e1e7:	55                   	push   %ebp
f010e1e8:	89 e5                	mov    %esp,%ebp
f010e1ea:	c7 05 04 b9 85 f0 06 	movl   $0x6,0xf085b904
f010e1f1:	00 00 00 
f010e1f4:	8b 45 08             	mov    0x8(%ebp),%eax
f010e1f7:	a3 60 b8 85 f0       	mov    %eax,0xf085b860
f010e1fc:	90                   	nop
f010e1fd:	5d                   	pop    %ebp
f010e1fe:	c3                   	ret    

f010e1ff <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010e1ff:	55                   	push   %ebp
f010e200:	89 e5                	mov    %esp,%ebp
f010e202:	8b 15 04 b9 85 f0    	mov    0xf085b904,%edx
f010e208:	8b 45 08             	mov    0x8(%ebp),%eax
f010e20b:	39 c2                	cmp    %eax,%edx
f010e20d:	0f 94 c0             	sete   %al
f010e210:	0f b6 c0             	movzbl %al,%eax
f010e213:	5d                   	pop    %ebp
f010e214:	c3                   	ret    

f010e215 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010e215:	55                   	push   %ebp
f010e216:	89 e5                	mov    %esp,%ebp
f010e218:	a1 04 b9 85 f0       	mov    0xf085b904,%eax
f010e21d:	83 f8 03             	cmp    $0x3,%eax
f010e220:	75 07                	jne    f010e229 <isPageReplacmentAlgorithmCLOCK+0x14>
f010e222:	b8 01 00 00 00       	mov    $0x1,%eax
f010e227:	eb 05                	jmp    f010e22e <isPageReplacmentAlgorithmCLOCK+0x19>
f010e229:	b8 00 00 00 00       	mov    $0x0,%eax
f010e22e:	5d                   	pop    %ebp
f010e22f:	c3                   	ret    

f010e230 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010e230:	55                   	push   %ebp
f010e231:	89 e5                	mov    %esp,%ebp
f010e233:	a1 04 b9 85 f0       	mov    0xf085b904,%eax
f010e238:	83 f8 04             	cmp    $0x4,%eax
f010e23b:	75 07                	jne    f010e244 <isPageReplacmentAlgorithmFIFO+0x14>
f010e23d:	b8 01 00 00 00       	mov    $0x1,%eax
f010e242:	eb 05                	jmp    f010e249 <isPageReplacmentAlgorithmFIFO+0x19>
f010e244:	b8 00 00 00 00       	mov    $0x0,%eax
f010e249:	5d                   	pop    %ebp
f010e24a:	c3                   	ret    

f010e24b <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010e24b:	55                   	push   %ebp
f010e24c:	89 e5                	mov    %esp,%ebp
f010e24e:	a1 04 b9 85 f0       	mov    0xf085b904,%eax
f010e253:	83 f8 05             	cmp    $0x5,%eax
f010e256:	75 07                	jne    f010e25f <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010e258:	b8 01 00 00 00       	mov    $0x1,%eax
f010e25d:	eb 05                	jmp    f010e264 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010e25f:	b8 00 00 00 00       	mov    $0x0,%eax
f010e264:	5d                   	pop    %ebp
f010e265:	c3                   	ret    

f010e266 <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010e266:	55                   	push   %ebp
f010e267:	89 e5                	mov    %esp,%ebp
f010e269:	a1 04 b9 85 f0       	mov    0xf085b904,%eax
f010e26e:	83 f8 07             	cmp    $0x7,%eax
f010e271:	75 07                	jne    f010e27a <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010e273:	b8 01 00 00 00       	mov    $0x1,%eax
f010e278:	eb 05                	jmp    f010e27f <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010e27a:	b8 00 00 00 00       	mov    $0x0,%eax
f010e27f:	5d                   	pop    %ebp
f010e280:	c3                   	ret    

f010e281 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010e281:	55                   	push   %ebp
f010e282:	89 e5                	mov    %esp,%ebp
f010e284:	a1 04 b9 85 f0       	mov    0xf085b904,%eax
f010e289:	83 f8 06             	cmp    $0x6,%eax
f010e28c:	75 07                	jne    f010e295 <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010e28e:	b8 01 00 00 00       	mov    $0x1,%eax
f010e293:	eb 05                	jmp    f010e29a <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010e295:	b8 00 00 00 00       	mov    $0x0,%eax
f010e29a:	5d                   	pop    %ebp
f010e29b:	c3                   	ret    

f010e29c <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010e29c:	55                   	push   %ebp
f010e29d:	89 e5                	mov    %esp,%ebp
f010e29f:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2a2:	a3 cc b8 85 f0       	mov    %eax,0xf085b8cc
f010e2a7:	90                   	nop
f010e2a8:	5d                   	pop    %ebp
f010e2a9:	c3                   	ret    

f010e2aa <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010e2aa:	55                   	push   %ebp
f010e2ab:	89 e5                	mov    %esp,%ebp
f010e2ad:	a1 cc b8 85 f0       	mov    0xf085b8cc,%eax
f010e2b2:	5d                   	pop    %ebp
f010e2b3:	c3                   	ret    

f010e2b4 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010e2b4:	55                   	push   %ebp
f010e2b5:	89 e5                	mov    %esp,%ebp
f010e2b7:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2ba:	a3 0c b9 85 f0       	mov    %eax,0xf085b90c
f010e2bf:	90                   	nop
f010e2c0:	5d                   	pop    %ebp
f010e2c1:	c3                   	ret    

f010e2c2 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010e2c2:	55                   	push   %ebp
f010e2c3:	89 e5                	mov    %esp,%ebp
f010e2c5:	a1 0c b9 85 f0       	mov    0xf085b90c,%eax
f010e2ca:	5d                   	pop    %ebp
f010e2cb:	c3                   	ret    

f010e2cc <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010e2cc:	55                   	push   %ebp
f010e2cd:	89 e5                	mov    %esp,%ebp
f010e2cf:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2d2:	a3 2c b9 85 f0       	mov    %eax,0xf085b92c
f010e2d7:	90                   	nop
f010e2d8:	5d                   	pop    %ebp
f010e2d9:	c3                   	ret    

f010e2da <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010e2da:	55                   	push   %ebp
f010e2db:	89 e5                	mov    %esp,%ebp
f010e2dd:	a1 2c b9 85 f0       	mov    0xf085b92c,%eax
f010e2e2:	5d                   	pop    %ebp
f010e2e3:	c3                   	ret    

f010e2e4 <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010e2e4:	55                   	push   %ebp
f010e2e5:	89 e5                	mov    %esp,%ebp
f010e2e7:	83 ec 18             	sub    $0x18,%esp
	//panic("table_fault_handler() is not implemented yet...!!");
	//Check if it's a stack page
	uint32* ptr_table;
#if USE_KHEAP
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
f010e2ea:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2ed:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e2f0:	83 ec 08             	sub    $0x8,%esp
f010e2f3:	ff 75 0c             	pushl  0xc(%ebp)
f010e2f6:	50                   	push   %eax
f010e2f7:	e8 26 89 ff ff       	call   f0106c22 <create_page_table>
f010e2fc:	83 c4 10             	add    $0x10,%esp
f010e2ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
	}
#endif
}
f010e302:	90                   	nop
f010e303:	c9                   	leave  
f010e304:	c3                   	ret    

f010e305 <placment>:

//Handle the page fault

void placment(struct Env * curenv, uint32 fault_va){
f010e305:	55                   	push   %ebp
f010e306:	89 e5                	mov    %esp,%ebp
f010e308:	83 ec 28             	sub    $0x28,%esp
	uint32 *ptr_table = NULL;
f010e30b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		uint32 last_index =curenv->page_last_WS_index;
f010e312:	8b 45 08             	mov    0x8(%ebp),%eax
f010e315:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e31b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		unsigned int ret = env_page_ws_get_size(curenv);
f010e31e:	83 ec 0c             	sub    $0xc,%esp
f010e321:	ff 75 08             	pushl  0x8(%ebp)
f010e324:	e8 9b 9c ff ff       	call   f0107fc4 <env_page_ws_get_size>
f010e329:	83 c4 10             	add    $0x10,%esp
f010e32c:	89 45 ec             	mov    %eax,-0x14(%ebp)
		struct FrameInfo* ptr ;
		if (ret < curenv->page_WS_max_size)
f010e32f:	8b 45 08             	mov    0x8(%ebp),%eax
f010e332:	8b 40 74             	mov    0x74(%eax),%eax
f010e335:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e338:	0f 86 2e 01 00 00    	jbe    f010e46c <placment+0x167>
		{
			//cprintf("======= Placement of va = %x \n ",fault_va);
			allocate_frame(&ptr);
f010e33e:	83 ec 0c             	sub    $0xc,%esp
f010e341:	8d 45 dc             	lea    -0x24(%ebp),%eax
f010e344:	50                   	push   %eax
f010e345:	e8 c3 85 ff ff       	call   f010690d <allocate_frame>
f010e34a:	83 c4 10             	add    $0x10,%esp
			map_frame(curenv->env_page_directory, ptr, fault_va,PERM_MODIFIED |PERM_WRITEABLE | PERM_USER);
f010e34d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010e350:	8b 45 08             	mov    0x8(%ebp),%eax
f010e353:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e356:	6a 46                	push   $0x46
f010e358:	ff 75 0c             	pushl  0xc(%ebp)
f010e35b:	52                   	push   %edx
f010e35c:	50                   	push   %eax
f010e35d:	e8 fa 89 ff ff       	call   f0106d5c <map_frame>
f010e362:	83 c4 10             	add    $0x10,%esp
			int ret_page = pf_read_env_page(curenv, (void*)fault_va);
f010e365:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e368:	83 ec 08             	sub    $0x8,%esp
f010e36b:	50                   	push   %eax
f010e36c:	ff 75 08             	pushl  0x8(%ebp)
f010e36f:	e8 e1 56 ff ff       	call   f0103a55 <pf_read_env_page>
f010e374:	83 c4 10             	add    $0x10,%esp
f010e377:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (ret_page ==0)
f010e37a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010e37e:	75 2e                	jne    f010e3ae <placment+0xa9>
			{
				env_page_ws_set_entry(curenv, last_index, fault_va);
f010e380:	83 ec 04             	sub    $0x4,%esp
f010e383:	ff 75 0c             	pushl  0xc(%ebp)
f010e386:	ff 75 f0             	pushl  -0x10(%ebp)
f010e389:	ff 75 08             	pushl  0x8(%ebp)
f010e38c:	e8 e7 9c ff ff       	call   f0108078 <env_page_ws_set_entry>
f010e391:	83 c4 10             	add    $0x10,%esp
				curenv->page_last_WS_index++;
f010e394:	8b 45 08             	mov    0x8(%ebp),%eax
f010e397:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e39d:	8d 50 01             	lea    0x1(%eax),%edx
f010e3a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010e3a3:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
f010e3a9:	e9 9e 00 00 00       	jmp    f010e44c <placment+0x147>
			}
			else if (ret_page == E_PAGE_NOT_EXIST_IN_PF)
f010e3ae:	83 7d e8 f7          	cmpl   $0xfffffff7,-0x18(%ebp)
f010e3b2:	0f 85 94 00 00 00    	jne    f010e44c <placment+0x147>
			{
				if ((fault_va >= USER_HEAP_START && fault_va < USER_HEAP_MAX) || (fault_va >= USTACKBOTTOM && fault_va < USTACKTOP))
f010e3b8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e3bb:	85 c0                	test   %eax,%eax
f010e3bd:	79 09                	jns    f010e3c8 <placment+0xc3>
f010e3bf:	81 7d 0c ff ff ff 9f 	cmpl   $0x9fffffff,0xc(%ebp)
f010e3c6:	76 30                	jbe    f010e3f8 <placment+0xf3>
f010e3c8:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f010e3cf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e3d2:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010e3d7:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010e3da:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e3dd:	ba 00 00 00 00       	mov    $0x0,%edx
f010e3e2:	f7 75 e4             	divl   -0x1c(%ebp)
f010e3e5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e3e8:	29 d0                	sub    %edx,%eax
f010e3ea:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010e3ed:	77 34                	ja     f010e423 <placment+0x11e>
f010e3ef:	81 7d 0c ff df bf ee 	cmpl   $0xeebfdfff,0xc(%ebp)
f010e3f6:	77 2b                	ja     f010e423 <placment+0x11e>
				{
					env_page_ws_set_entry(curenv, last_index, fault_va);
f010e3f8:	83 ec 04             	sub    $0x4,%esp
f010e3fb:	ff 75 0c             	pushl  0xc(%ebp)
f010e3fe:	ff 75 f0             	pushl  -0x10(%ebp)
f010e401:	ff 75 08             	pushl  0x8(%ebp)
f010e404:	e8 6f 9c ff ff       	call   f0108078 <env_page_ws_set_entry>
f010e409:	83 c4 10             	add    $0x10,%esp
					curenv->page_last_WS_index++;
f010e40c:	8b 45 08             	mov    0x8(%ebp),%eax
f010e40f:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e415:	8d 50 01             	lea    0x1(%eax),%edx
f010e418:	8b 45 08             	mov    0x8(%ebp),%eax
f010e41b:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
f010e421:	eb 29                	jmp    f010e44c <placment+0x147>
				}
				else
				{
					unmap_frame(curenv->env_page_directory, fault_va);
f010e423:	8b 45 08             	mov    0x8(%ebp),%eax
f010e426:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e429:	83 ec 08             	sub    $0x8,%esp
f010e42c:	ff 75 0c             	pushl  0xc(%ebp)
f010e42f:	50                   	push   %eax
f010e430:	e8 5c 8a ff ff       	call   f0106e91 <unmap_frame>
f010e435:	83 c4 10             	add    $0x10,%esp
					panic("ILLEGAL MEMORY ACCESS !!");
f010e438:	83 ec 04             	sub    $0x4,%esp
f010e43b:	68 c5 7c 13 f0       	push   $0xf0137cc5
f010e440:	6a 66                	push   $0x66
f010e442:	68 ab 7c 13 f0       	push   $0xf0137cab
f010e447:	e8 b9 1d ff ff       	call   f0100205 <_panic>
				}
			}
			if(curenv->page_last_WS_index==curenv->page_WS_max_size)
f010e44c:	8b 45 08             	mov    0x8(%ebp),%eax
f010e44f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e455:	8b 45 08             	mov    0x8(%ebp),%eax
f010e458:	8b 40 74             	mov    0x74(%eax),%eax
f010e45b:	39 c2                	cmp    %eax,%edx
f010e45d:	75 0d                	jne    f010e46c <placment+0x167>
			{
				curenv->page_last_WS_index=0;
f010e45f:	8b 45 08             	mov    0x8(%ebp),%eax
f010e462:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010e469:	00 00 00 
			}
		}
}
f010e46c:	90                   	nop
f010e46d:	c9                   	leave  
f010e46e:	c3                   	ret    

f010e46f <page_fault_handler>:

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010e46f:	55                   	push   %ebp
f010e470:	89 e5                	mov    %esp,%ebp
f010e472:	83 ec 58             	sub    $0x58,%esp
	//TODO: [PROJECT MS3] [FAULT HANDLER] page_fault_handler
	// Write your code here, remove the panic and write your code
	//panic("page_fault_handler() is not implemented yet...!!");

	//uint32 *ptr_table = NULL;
	uint32 last_index =curenv->page_last_WS_index;
f010e475:	8b 45 08             	mov    0x8(%ebp),%eax
f010e478:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e47e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	unsigned int ret = env_page_ws_get_size(curenv);
f010e481:	83 ec 0c             	sub    $0xc,%esp
f010e484:	ff 75 08             	pushl  0x8(%ebp)
f010e487:	e8 38 9b ff ff       	call   f0107fc4 <env_page_ws_get_size>
f010e48c:	83 c4 10             	add    $0x10,%esp
f010e48f:	89 45 e0             	mov    %eax,-0x20(%ebp)
	struct FrameInfo* ptr ;
	if (ret < curenv->page_WS_max_size)
f010e492:	8b 45 08             	mov    0x8(%ebp),%eax
f010e495:	8b 40 74             	mov    0x74(%eax),%eax
f010e498:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010e49b:	0f 86 3a 01 00 00    	jbe    f010e5db <page_fault_handler+0x16c>
	{
		//cprintf("======= Placement of va = %x \n ",fault_va);
		allocate_frame(&ptr);
f010e4a1:	83 ec 0c             	sub    $0xc,%esp
f010e4a4:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010e4a7:	50                   	push   %eax
f010e4a8:	e8 60 84 ff ff       	call   f010690d <allocate_frame>
f010e4ad:	83 c4 10             	add    $0x10,%esp
		map_frame(curenv->env_page_directory, ptr, fault_va,PERM_MODIFIED |PERM_WRITEABLE | PERM_USER);
f010e4b0:	8b 55 b8             	mov    -0x48(%ebp),%edx
f010e4b3:	8b 45 08             	mov    0x8(%ebp),%eax
f010e4b6:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e4b9:	6a 46                	push   $0x46
f010e4bb:	ff 75 0c             	pushl  0xc(%ebp)
f010e4be:	52                   	push   %edx
f010e4bf:	50                   	push   %eax
f010e4c0:	e8 97 88 ff ff       	call   f0106d5c <map_frame>
f010e4c5:	83 c4 10             	add    $0x10,%esp
		int ret_page = pf_read_env_page(curenv, (void*)fault_va);
f010e4c8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e4cb:	83 ec 08             	sub    $0x8,%esp
f010e4ce:	50                   	push   %eax
f010e4cf:	ff 75 08             	pushl  0x8(%ebp)
f010e4d2:	e8 7e 55 ff ff       	call   f0103a55 <pf_read_env_page>
f010e4d7:	83 c4 10             	add    $0x10,%esp
f010e4da:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if (ret_page ==0)
f010e4dd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e4e1:	75 2e                	jne    f010e511 <page_fault_handler+0xa2>
		{
			env_page_ws_set_entry(curenv, last_index, fault_va);
f010e4e3:	83 ec 04             	sub    $0x4,%esp
f010e4e6:	ff 75 0c             	pushl  0xc(%ebp)
f010e4e9:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e4ec:	ff 75 08             	pushl  0x8(%ebp)
f010e4ef:	e8 84 9b ff ff       	call   f0108078 <env_page_ws_set_entry>
f010e4f4:	83 c4 10             	add    $0x10,%esp
			curenv->page_last_WS_index++;
f010e4f7:	8b 45 08             	mov    0x8(%ebp),%eax
f010e4fa:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e500:	8d 50 01             	lea    0x1(%eax),%edx
f010e503:	8b 45 08             	mov    0x8(%ebp),%eax
f010e506:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
f010e50c:	e9 a1 00 00 00       	jmp    f010e5b2 <page_fault_handler+0x143>
		}
		else if (ret_page == E_PAGE_NOT_EXIST_IN_PF)
f010e511:	83 7d dc f7          	cmpl   $0xfffffff7,-0x24(%ebp)
f010e515:	0f 85 97 00 00 00    	jne    f010e5b2 <page_fault_handler+0x143>
		{
			if ((fault_va >= USER_HEAP_START && fault_va < USER_HEAP_MAX) || (fault_va >= USTACKBOTTOM && fault_va < USTACKTOP))
f010e51b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e51e:	85 c0                	test   %eax,%eax
f010e520:	79 09                	jns    f010e52b <page_fault_handler+0xbc>
f010e522:	81 7d 0c ff ff ff 9f 	cmpl   $0x9fffffff,0xc(%ebp)
f010e529:	76 30                	jbe    f010e55b <page_fault_handler+0xec>
f010e52b:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f010e532:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e535:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010e53a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010e53d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e540:	ba 00 00 00 00       	mov    $0x0,%edx
f010e545:	f7 75 d8             	divl   -0x28(%ebp)
f010e548:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e54b:	29 d0                	sub    %edx,%eax
f010e54d:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010e550:	77 34                	ja     f010e586 <page_fault_handler+0x117>
f010e552:	81 7d 0c ff df bf ee 	cmpl   $0xeebfdfff,0xc(%ebp)
f010e559:	77 2b                	ja     f010e586 <page_fault_handler+0x117>
			{
				env_page_ws_set_entry(curenv, last_index, fault_va);
f010e55b:	83 ec 04             	sub    $0x4,%esp
f010e55e:	ff 75 0c             	pushl  0xc(%ebp)
f010e561:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e564:	ff 75 08             	pushl  0x8(%ebp)
f010e567:	e8 0c 9b ff ff       	call   f0108078 <env_page_ws_set_entry>
f010e56c:	83 c4 10             	add    $0x10,%esp
				curenv->page_last_WS_index++;
f010e56f:	8b 45 08             	mov    0x8(%ebp),%eax
f010e572:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e578:	8d 50 01             	lea    0x1(%eax),%edx
f010e57b:	8b 45 08             	mov    0x8(%ebp),%eax
f010e57e:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
f010e584:	eb 2c                	jmp    f010e5b2 <page_fault_handler+0x143>
			}
			else
			{
				unmap_frame(curenv->env_page_directory, fault_va);
f010e586:	8b 45 08             	mov    0x8(%ebp),%eax
f010e589:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e58c:	83 ec 08             	sub    $0x8,%esp
f010e58f:	ff 75 0c             	pushl  0xc(%ebp)
f010e592:	50                   	push   %eax
f010e593:	e8 f9 88 ff ff       	call   f0106e91 <unmap_frame>
f010e598:	83 c4 10             	add    $0x10,%esp
				panic("ILLEGAL MEMORY ACCESS !!");
f010e59b:	83 ec 04             	sub    $0x4,%esp
f010e59e:	68 c5 7c 13 f0       	push   $0xf0137cc5
f010e5a3:	68 8f 00 00 00       	push   $0x8f
f010e5a8:	68 ab 7c 13 f0       	push   $0xf0137cab
f010e5ad:	e8 53 1c ff ff       	call   f0100205 <_panic>
			}
		}
		if(curenv->page_last_WS_index==curenv->page_WS_max_size)
f010e5b2:	8b 45 08             	mov    0x8(%ebp),%eax
f010e5b5:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e5bb:	8b 45 08             	mov    0x8(%ebp),%eax
f010e5be:	8b 40 74             	mov    0x74(%eax),%eax
f010e5c1:	39 c2                	cmp    %eax,%edx
f010e5c3:	0f 85 e7 02 00 00    	jne    f010e8b0 <page_fault_handler+0x441>
		{
			curenv->page_last_WS_index=0;
f010e5c9:	8b 45 08             	mov    0x8(%ebp),%eax
f010e5cc:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010e5d3:	00 00 00 
			}
		}
	}
	}
	//refer to the project presentation and documentation for details
}
f010e5d6:	e9 d5 02 00 00       	jmp    f010e8b0 <page_fault_handler+0x441>
		}
	}
	else
	{
		//cprintf("======= curent index = %x \n ",curenv->page_last_WS_index);
		bool amira =1;
f010e5db:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		while(amira==1){
f010e5e2:	e9 bf 02 00 00       	jmp    f010e8a6 <page_fault_handler+0x437>
	    int flag=0;
f010e5e7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		uint32 *ptr_bb = NULL;
f010e5ee:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
		for (int i =curenv->page_last_WS_index; i < curenv->page_WS_max_size; i++)
f010e5f5:	8b 45 08             	mov    0x8(%ebp),%eax
f010e5f8:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e5fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010e601:	e9 39 01 00 00       	jmp    f010e73f <page_fault_handler+0x2d0>
		{
			uint32 vitual_add = env_page_ws_get_virtual_address(curenv, i);
f010e606:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e609:	83 ec 08             	sub    $0x8,%esp
f010e60c:	50                   	push   %eax
f010e60d:	ff 75 08             	pushl  0x8(%ebp)
f010e610:	e8 7b 9b ff ff       	call   f0108190 <env_page_ws_get_virtual_address>
f010e615:	83 c4 10             	add    $0x10,%esp
f010e618:	89 45 d0             	mov    %eax,-0x30(%ebp)
			struct FrameInfo* ptr_rep = get_frame_info(curenv->env_page_directory, vitual_add, &ptr_bb);
f010e61b:	8b 45 08             	mov    0x8(%ebp),%eax
f010e61e:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e621:	83 ec 04             	sub    $0x4,%esp
f010e624:	8d 55 b4             	lea    -0x4c(%ebp),%edx
f010e627:	52                   	push   %edx
f010e628:	ff 75 d0             	pushl  -0x30(%ebp)
f010e62b:	50                   	push   %eax
f010e62c:	e8 f0 87 ff ff       	call   f0106e21 <get_frame_info>
f010e631:	83 c4 10             	add    $0x10,%esp
f010e634:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 permisstin_111= pt_get_page_permissions(curenv->env_page_directory, vitual_add);
f010e637:	8b 45 08             	mov    0x8(%ebp),%eax
f010e63a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e63d:	83 ec 08             	sub    $0x8,%esp
f010e640:	ff 75 d0             	pushl  -0x30(%ebp)
f010e643:	50                   	push   %eax
f010e644:	e8 b6 97 ff ff       	call   f0107dff <pt_get_page_permissions>
f010e649:	83 c4 10             	add    $0x10,%esp
f010e64c:	89 45 c8             	mov    %eax,-0x38(%ebp)

			if ((permisstin_111&PERM_USED) != PERM_USED)
f010e64f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e652:	83 e0 20             	and    $0x20,%eax
f010e655:	85 c0                	test   %eax,%eax
f010e657:	0f 85 c9 00 00 00    	jne    f010e726 <page_fault_handler+0x2b7>
			{
				//cprintf("0");
				if ((permisstin_111&PERM_MODIFIED) != PERM_MODIFIED)
f010e65d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e660:	83 e0 40             	and    $0x40,%eax
f010e663:	85 c0                	test   %eax,%eax
f010e665:	75 57                	jne    f010e6be <page_fault_handler+0x24f>
				{
					//cprintf("1");
					env_page_ws_clear_entry(curenv, i);
f010e667:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e66a:	83 ec 08             	sub    $0x8,%esp
f010e66d:	50                   	push   %eax
f010e66e:	ff 75 08             	pushl  0x8(%ebp)
f010e671:	e8 a3 9a ff ff       	call   f0108119 <env_page_ws_clear_entry>
f010e676:	83 c4 10             	add    $0x10,%esp
					unmap_frame(curenv->env_page_directory, vitual_add);
f010e679:	8b 45 08             	mov    0x8(%ebp),%eax
f010e67c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e67f:	83 ec 08             	sub    $0x8,%esp
f010e682:	ff 75 d0             	pushl  -0x30(%ebp)
f010e685:	50                   	push   %eax
f010e686:	e8 06 88 ff ff       	call   f0106e91 <unmap_frame>
f010e68b:	83 c4 10             	add    $0x10,%esp
					curenv->page_last_WS_index=i;
f010e68e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e691:	8b 45 08             	mov    0x8(%ebp),%eax
f010e694:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
					placment(curenv,fault_va);
f010e69a:	83 ec 08             	sub    $0x8,%esp
f010e69d:	ff 75 0c             	pushl  0xc(%ebp)
f010e6a0:	ff 75 08             	pushl  0x8(%ebp)
f010e6a3:	e8 5d fc ff ff       	call   f010e305 <placment>
f010e6a8:	83 c4 10             	add    $0x10,%esp
					flag=1;
f010e6ab:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
					amira=0;
f010e6b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
					break;
f010e6b9:	e9 92 00 00 00       	jmp    f010e750 <page_fault_handler+0x2e1>
				}
				else
				{
					//cprintf("2");
					pf_update_env_page(curenv, vitual_add, ptr_rep);
f010e6be:	83 ec 04             	sub    $0x4,%esp
f010e6c1:	ff 75 cc             	pushl  -0x34(%ebp)
f010e6c4:	ff 75 d0             	pushl  -0x30(%ebp)
f010e6c7:	ff 75 08             	pushl  0x8(%ebp)
f010e6ca:	e8 24 51 ff ff       	call   f01037f3 <pf_update_env_page>
f010e6cf:	83 c4 10             	add    $0x10,%esp
					env_page_ws_clear_entry(curenv, i);
f010e6d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e6d5:	83 ec 08             	sub    $0x8,%esp
f010e6d8:	50                   	push   %eax
f010e6d9:	ff 75 08             	pushl  0x8(%ebp)
f010e6dc:	e8 38 9a ff ff       	call   f0108119 <env_page_ws_clear_entry>
f010e6e1:	83 c4 10             	add    $0x10,%esp
					unmap_frame(curenv->env_page_directory, vitual_add);
f010e6e4:	8b 45 08             	mov    0x8(%ebp),%eax
f010e6e7:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e6ea:	83 ec 08             	sub    $0x8,%esp
f010e6ed:	ff 75 d0             	pushl  -0x30(%ebp)
f010e6f0:	50                   	push   %eax
f010e6f1:	e8 9b 87 ff ff       	call   f0106e91 <unmap_frame>
f010e6f6:	83 c4 10             	add    $0x10,%esp
					flag=1;
f010e6f9:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
					curenv->page_last_WS_index=i;
f010e700:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e703:	8b 45 08             	mov    0x8(%ebp),%eax
f010e706:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
					placment(curenv,fault_va);
f010e70c:	83 ec 08             	sub    $0x8,%esp
f010e70f:	ff 75 0c             	pushl  0xc(%ebp)
f010e712:	ff 75 08             	pushl  0x8(%ebp)
f010e715:	e8 eb fb ff ff       	call   f010e305 <placment>
f010e71a:	83 c4 10             	add    $0x10,%esp
					amira=0;
f010e71d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
					break;
f010e724:	eb 2a                	jmp    f010e750 <page_fault_handler+0x2e1>
				}
			}
			else
			{
				pt_set_page_permissions(curenv->env_page_directory, vitual_add, 0, PERM_USED);
f010e726:	8b 45 08             	mov    0x8(%ebp),%eax
f010e729:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e72c:	6a 20                	push   $0x20
f010e72e:	6a 00                	push   $0x0
f010e730:	ff 75 d0             	pushl  -0x30(%ebp)
f010e733:	50                   	push   %eax
f010e734:	e8 a8 95 ff ff       	call   f0107ce1 <pt_set_page_permissions>
f010e739:	83 c4 10             	add    $0x10,%esp
		//cprintf("======= curent index = %x \n ",curenv->page_last_WS_index);
		bool amira =1;
		while(amira==1){
	    int flag=0;
		uint32 *ptr_bb = NULL;
		for (int i =curenv->page_last_WS_index; i < curenv->page_WS_max_size; i++)
f010e73c:	ff 45 ec             	incl   -0x14(%ebp)
f010e73f:	8b 45 08             	mov    0x8(%ebp),%eax
f010e742:	8b 50 74             	mov    0x74(%eax),%edx
f010e745:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e748:	39 c2                	cmp    %eax,%edx
f010e74a:	0f 87 b6 fe ff ff    	ja     f010e606 <page_fault_handler+0x197>
			else
			{
				pt_set_page_permissions(curenv->env_page_directory, vitual_add, 0, PERM_USED);
			}
		}
		if(flag==0)
f010e750:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e754:	0f 85 4c 01 00 00    	jne    f010e8a6 <page_fault_handler+0x437>
		{
			for(int i=0; i <curenv->page_last_WS_index;i++)
f010e75a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f010e761:	e9 2c 01 00 00       	jmp    f010e892 <page_fault_handler+0x423>
			{
				uint32 *ptr4;
				uint32 vitual_add1 = env_page_ws_get_virtual_address(curenv, i);
f010e766:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e769:	83 ec 08             	sub    $0x8,%esp
f010e76c:	50                   	push   %eax
f010e76d:	ff 75 08             	pushl  0x8(%ebp)
f010e770:	e8 1b 9a ff ff       	call   f0108190 <env_page_ws_get_virtual_address>
f010e775:	83 c4 10             	add    $0x10,%esp
f010e778:	89 45 c4             	mov    %eax,-0x3c(%ebp)
				struct FrameInfo* ptr_rep1 = get_frame_info(curenv->env_page_directory, vitual_add1, &ptr4);
f010e77b:	8b 45 08             	mov    0x8(%ebp),%eax
f010e77e:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e781:	83 ec 04             	sub    $0x4,%esp
f010e784:	8d 55 b0             	lea    -0x50(%ebp),%edx
f010e787:	52                   	push   %edx
f010e788:	ff 75 c4             	pushl  -0x3c(%ebp)
f010e78b:	50                   	push   %eax
f010e78c:	e8 90 86 ff ff       	call   f0106e21 <get_frame_info>
f010e791:	83 c4 10             	add    $0x10,%esp
f010e794:	89 45 c0             	mov    %eax,-0x40(%ebp)
				uint32 permisstin_1111= pt_get_page_permissions(curenv->env_page_directory, vitual_add1);
f010e797:	8b 45 08             	mov    0x8(%ebp),%eax
f010e79a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e79d:	83 ec 08             	sub    $0x8,%esp
f010e7a0:	ff 75 c4             	pushl  -0x3c(%ebp)
f010e7a3:	50                   	push   %eax
f010e7a4:	e8 56 96 ff ff       	call   f0107dff <pt_get_page_permissions>
f010e7a9:	83 c4 10             	add    $0x10,%esp
f010e7ac:	89 45 bc             	mov    %eax,-0x44(%ebp)

				if ((permisstin_1111&PERM_USED) != PERM_USED)
f010e7af:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010e7b2:	83 e0 20             	and    $0x20,%eax
f010e7b5:	85 c0                	test   %eax,%eax
f010e7b7:	0f 85 bc 00 00 00    	jne    f010e879 <page_fault_handler+0x40a>
				{
					if ((permisstin_1111&PERM_MODIFIED) != PERM_MODIFIED)
f010e7bd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010e7c0:	83 e0 40             	and    $0x40,%eax
f010e7c3:	85 c0                	test   %eax,%eax
f010e7c5:	75 50                	jne    f010e817 <page_fault_handler+0x3a8>
					{
						env_page_ws_clear_entry(curenv, i);
f010e7c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e7ca:	83 ec 08             	sub    $0x8,%esp
f010e7cd:	50                   	push   %eax
f010e7ce:	ff 75 08             	pushl  0x8(%ebp)
f010e7d1:	e8 43 99 ff ff       	call   f0108119 <env_page_ws_clear_entry>
f010e7d6:	83 c4 10             	add    $0x10,%esp
						unmap_frame(curenv->env_page_directory, vitual_add1);
f010e7d9:	8b 45 08             	mov    0x8(%ebp),%eax
f010e7dc:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e7df:	83 ec 08             	sub    $0x8,%esp
f010e7e2:	ff 75 c4             	pushl  -0x3c(%ebp)
f010e7e5:	50                   	push   %eax
f010e7e6:	e8 a6 86 ff ff       	call   f0106e91 <unmap_frame>
f010e7eb:	83 c4 10             	add    $0x10,%esp
						curenv->page_last_WS_index=i;
f010e7ee:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010e7f1:	8b 45 08             	mov    0x8(%ebp),%eax
f010e7f4:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
						placment(curenv,fault_va);
f010e7fa:	83 ec 08             	sub    $0x8,%esp
f010e7fd:	ff 75 0c             	pushl  0xc(%ebp)
f010e800:	ff 75 08             	pushl  0x8(%ebp)
f010e803:	e8 fd fa ff ff       	call   f010e305 <placment>
f010e808:	83 c4 10             	add    $0x10,%esp
						amira=0;
f010e80b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
						break;
f010e812:	e9 8f 00 00 00       	jmp    f010e8a6 <page_fault_handler+0x437>
					}
					else
					{
						pf_update_env_page(curenv, vitual_add1, ptr_rep1);
f010e817:	83 ec 04             	sub    $0x4,%esp
f010e81a:	ff 75 c0             	pushl  -0x40(%ebp)
f010e81d:	ff 75 c4             	pushl  -0x3c(%ebp)
f010e820:	ff 75 08             	pushl  0x8(%ebp)
f010e823:	e8 cb 4f ff ff       	call   f01037f3 <pf_update_env_page>
f010e828:	83 c4 10             	add    $0x10,%esp
						env_page_ws_clear_entry(curenv, i);
f010e82b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e82e:	83 ec 08             	sub    $0x8,%esp
f010e831:	50                   	push   %eax
f010e832:	ff 75 08             	pushl  0x8(%ebp)
f010e835:	e8 df 98 ff ff       	call   f0108119 <env_page_ws_clear_entry>
f010e83a:	83 c4 10             	add    $0x10,%esp
						unmap_frame(curenv->env_page_directory, vitual_add1);
f010e83d:	8b 45 08             	mov    0x8(%ebp),%eax
f010e840:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e843:	83 ec 08             	sub    $0x8,%esp
f010e846:	ff 75 c4             	pushl  -0x3c(%ebp)
f010e849:	50                   	push   %eax
f010e84a:	e8 42 86 ff ff       	call   f0106e91 <unmap_frame>
f010e84f:	83 c4 10             	add    $0x10,%esp
						curenv->page_last_WS_index=i;
f010e852:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010e855:	8b 45 08             	mov    0x8(%ebp),%eax
f010e858:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
						placment(curenv,fault_va);
f010e85e:	83 ec 08             	sub    $0x8,%esp
f010e861:	ff 75 0c             	pushl  0xc(%ebp)
f010e864:	ff 75 08             	pushl  0x8(%ebp)
f010e867:	e8 99 fa ff ff       	call   f010e305 <placment>
f010e86c:	83 c4 10             	add    $0x10,%esp
						amira=0;
f010e86f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
						break;
f010e876:	90                   	nop
f010e877:	eb 2d                	jmp    f010e8a6 <page_fault_handler+0x437>
					}
				}
				else
				{
					pt_set_page_permissions(curenv->env_page_directory, vitual_add1, 0, PERM_USED);
f010e879:	8b 45 08             	mov    0x8(%ebp),%eax
f010e87c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e87f:	6a 20                	push   $0x20
f010e881:	6a 00                	push   $0x0
f010e883:	ff 75 c4             	pushl  -0x3c(%ebp)
f010e886:	50                   	push   %eax
f010e887:	e8 55 94 ff ff       	call   f0107ce1 <pt_set_page_permissions>
f010e88c:	83 c4 10             	add    $0x10,%esp
				pt_set_page_permissions(curenv->env_page_directory, vitual_add, 0, PERM_USED);
			}
		}
		if(flag==0)
		{
			for(int i=0; i <curenv->page_last_WS_index;i++)
f010e88f:	ff 45 e8             	incl   -0x18(%ebp)
f010e892:	8b 45 08             	mov    0x8(%ebp),%eax
f010e895:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010e89b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e89e:	39 c2                	cmp    %eax,%edx
f010e8a0:	0f 87 c0 fe ff ff    	ja     f010e766 <page_fault_handler+0x2f7>
	}
	else
	{
		//cprintf("======= curent index = %x \n ",curenv->page_last_WS_index);
		bool amira =1;
		while(amira==1){
f010e8a6:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010e8aa:	0f 84 37 fd ff ff    	je     f010e5e7 <page_fault_handler+0x178>
			}
		}
	}
	}
	//refer to the project presentation and documentation for details
}
f010e8b0:	90                   	nop
f010e8b1:	c9                   	leave  
f010e8b2:	c3                   	ret    

f010e8b3 <__page_fault_handler_with_buffering>:

void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010e8b3:	55                   	push   %ebp
f010e8b4:	89 e5                	mov    %esp,%ebp
f010e8b6:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010e8b9:	83 ec 04             	sub    $0x4,%esp
f010e8bc:	68 e0 7c 13 f0       	push   $0xf0137ce0
f010e8c1:	68 f1 00 00 00       	push   $0xf1
f010e8c6:	68 ab 7c 13 f0       	push   $0xf0137cab
f010e8cb:	e8 35 19 ff ff       	call   f0100205 <_panic>

f010e8d0 <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010e8d0:	55                   	push   %ebp
f010e8d1:	89 e5                	mov    %esp,%ebp
f010e8d3:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SEMAPHORES = numOfSemaphores ;
f010e8d6:	8b 45 08             	mov    0x8(%ebp),%eax
f010e8d9:	a3 30 b8 85 f0       	mov    %eax,0xf085b830
	semaphores = (struct Semaphore*) kmalloc(numOfSemaphores*sizeof(struct Semaphore));
f010e8de:	8b 55 08             	mov    0x8(%ebp),%edx
f010e8e1:	89 d0                	mov    %edx,%eax
f010e8e3:	c1 e0 02             	shl    $0x2,%eax
f010e8e6:	01 d0                	add    %edx,%eax
f010e8e8:	01 c0                	add    %eax,%eax
f010e8ea:	01 d0                	add    %edx,%eax
f010e8ec:	01 c0                	add    %eax,%eax
f010e8ee:	01 d0                	add    %edx,%eax
f010e8f0:	c1 e0 02             	shl    $0x2,%eax
f010e8f3:	83 ec 0c             	sub    $0xc,%esp
f010e8f6:	50                   	push   %eax
f010e8f7:	e8 34 91 ff ff       	call   f0107a30 <kmalloc>
f010e8fc:	83 c4 10             	add    $0x10,%esp
f010e8ff:	a3 88 b8 85 f0       	mov    %eax,0xf085b888
	if (semaphores == NULL)
f010e904:	a1 88 b8 85 f0       	mov    0xf085b888,%eax
f010e909:	85 c0                	test   %eax,%eax
f010e90b:	75 14                	jne    f010e921 <create_semaphores_array+0x51>
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
f010e90d:	83 ec 04             	sub    $0x4,%esp
f010e910:	68 24 7d 13 f0       	push   $0xf0137d24
f010e915:	6a 1e                	push   $0x1e
f010e917:	68 64 7d 13 f0       	push   $0xf0137d64
f010e91c:	e8 e4 18 ff ff       	call   f0100205 <_panic>
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e921:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010e928:	e9 bd 00 00 00       	jmp    f010e9ea <create_semaphores_array+0x11a>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010e92d:	8b 0d 88 b8 85 f0    	mov    0xf085b888,%ecx
f010e933:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e936:	89 d0                	mov    %edx,%eax
f010e938:	c1 e0 02             	shl    $0x2,%eax
f010e93b:	01 d0                	add    %edx,%eax
f010e93d:	01 c0                	add    %eax,%eax
f010e93f:	01 d0                	add    %edx,%eax
f010e941:	01 c0                	add    %eax,%eax
f010e943:	01 d0                	add    %edx,%eax
f010e945:	c1 e0 02             	shl    $0x2,%eax
f010e948:	01 c8                	add    %ecx,%eax
f010e94a:	83 ec 04             	sub    $0x4,%esp
f010e94d:	6a 5c                	push   $0x5c
f010e94f:	6a 00                	push   $0x0
f010e951:	50                   	push   %eax
f010e952:	e8 fe 32 02 00       	call   f0131c55 <memset>
f010e957:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010e95a:	8b 0d 88 b8 85 f0    	mov    0xf085b888,%ecx
f010e960:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e963:	89 d0                	mov    %edx,%eax
f010e965:	c1 e0 02             	shl    $0x2,%eax
f010e968:	01 d0                	add    %edx,%eax
f010e96a:	01 c0                	add    %eax,%eax
f010e96c:	01 d0                	add    %edx,%eax
f010e96e:	01 c0                	add    %eax,%eax
f010e970:	01 d0                	add    %edx,%eax
f010e972:	c1 e0 02             	shl    $0x2,%eax
f010e975:	01 c8                	add    %ecx,%eax
f010e977:	c6 40 58 01          	movb   $0x1,0x58(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010e97b:	8b 0d 88 b8 85 f0    	mov    0xf085b888,%ecx
f010e981:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e984:	89 d0                	mov    %edx,%eax
f010e986:	c1 e0 02             	shl    $0x2,%eax
f010e989:	01 d0                	add    %edx,%eax
f010e98b:	01 c0                	add    %eax,%eax
f010e98d:	01 d0                	add    %edx,%eax
f010e98f:	01 c0                	add    %eax,%eax
f010e991:	01 d0                	add    %edx,%eax
f010e993:	c1 e0 02             	shl    $0x2,%eax
f010e996:	01 c8                	add    %ecx,%eax
f010e998:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010e99f:	8b 0d 88 b8 85 f0    	mov    0xf085b888,%ecx
f010e9a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e9a8:	89 d0                	mov    %edx,%eax
f010e9aa:	c1 e0 02             	shl    $0x2,%eax
f010e9ad:	01 d0                	add    %edx,%eax
f010e9af:	01 c0                	add    %eax,%eax
f010e9b1:	01 d0                	add    %edx,%eax
f010e9b3:	01 c0                	add    %eax,%eax
f010e9b5:	01 d0                	add    %edx,%eax
f010e9b7:	c1 e0 02             	shl    $0x2,%eax
f010e9ba:	01 c8                	add    %ecx,%eax
f010e9bc:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010e9c3:	8b 0d 88 b8 85 f0    	mov    0xf085b888,%ecx
f010e9c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e9cc:	89 d0                	mov    %edx,%eax
f010e9ce:	c1 e0 02             	shl    $0x2,%eax
f010e9d1:	01 d0                	add    %edx,%eax
f010e9d3:	01 c0                	add    %eax,%eax
f010e9d5:	01 d0                	add    %edx,%eax
f010e9d7:	01 c0                	add    %eax,%eax
f010e9d9:	01 d0                	add    %edx,%eax
f010e9db:	c1 e0 02             	shl    $0x2,%eax
f010e9de:	01 c8                	add    %ecx,%eax
f010e9e0:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e9e7:	ff 45 f4             	incl   -0xc(%ebp)
f010e9ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e9ed:	a1 30 b8 85 f0       	mov    0xf085b830,%eax
f010e9f2:	39 c2                	cmp    %eax,%edx
f010e9f4:	0f 82 33 ff ff ff    	jb     f010e92d <create_semaphores_array+0x5d>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010e9fa:	90                   	nop
f010e9fb:	c9                   	leave  
f010e9fc:	c3                   	ret    

f010e9fd <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010e9fd:	55                   	push   %ebp
f010e9fe:	89 e5                	mov    %esp,%ebp
f010ea00:	83 ec 18             	sub    $0x18,%esp
	int32 semaphoreObjectID = -1 ;
f010ea03:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010ea0a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010ea11:	eb 2f                	jmp    f010ea42 <allocate_semaphore_object+0x45>
	{
		if (semaphores[i].empty)
f010ea13:	8b 0d 88 b8 85 f0    	mov    0xf085b888,%ecx
f010ea19:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ea1c:	89 d0                	mov    %edx,%eax
f010ea1e:	c1 e0 02             	shl    $0x2,%eax
f010ea21:	01 d0                	add    %edx,%eax
f010ea23:	01 c0                	add    %eax,%eax
f010ea25:	01 d0                	add    %edx,%eax
f010ea27:	01 c0                	add    %eax,%eax
f010ea29:	01 d0                	add    %edx,%eax
f010ea2b:	c1 e0 02             	shl    $0x2,%eax
f010ea2e:	01 c8                	add    %ecx,%eax
f010ea30:	8a 40 58             	mov    0x58(%eax),%al
f010ea33:	84 c0                	test   %al,%al
f010ea35:	74 08                	je     f010ea3f <allocate_semaphore_object+0x42>
		{
			semaphoreObjectID = i;
f010ea37:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ea3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010ea3d:	eb 0f                	jmp    f010ea4e <allocate_semaphore_object+0x51>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010ea3f:	ff 45 f0             	incl   -0x10(%ebp)
f010ea42:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ea45:	a1 30 b8 85 f0       	mov    0xf085b830,%eax
f010ea4a:	39 c2                	cmp    %eax,%edx
f010ea4c:	72 c5                	jb     f010ea13 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010ea4e:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010ea52:	75 4d                	jne    f010eaa1 <allocate_semaphore_object+0xa4>
	{
		//try to double the size of the "semaphores" array
		#if USE_KHEAP
		{
			semaphores = (struct Semaphore*) krealloc(semaphores, 2*MAX_SEMAPHORES);
f010ea54:	a1 30 b8 85 f0       	mov    0xf085b830,%eax
f010ea59:	01 c0                	add    %eax,%eax
f010ea5b:	89 c2                	mov    %eax,%edx
f010ea5d:	a1 88 b8 85 f0       	mov    0xf085b888,%eax
f010ea62:	83 ec 08             	sub    $0x8,%esp
f010ea65:	52                   	push   %edx
f010ea66:	50                   	push   %eax
f010ea67:	e8 58 92 ff ff       	call   f0107cc4 <krealloc>
f010ea6c:	83 c4 10             	add    $0x10,%esp
f010ea6f:	a3 88 b8 85 f0       	mov    %eax,0xf085b888
			if (semaphores == NULL)
f010ea74:	a1 88 b8 85 f0       	mov    0xf085b888,%eax
f010ea79:	85 c0                	test   %eax,%eax
f010ea7b:	75 10                	jne    f010ea8d <allocate_semaphore_object+0x90>
			{
				*allocatedObject = NULL;
f010ea7d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ea80:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				return E_NO_SEMAPHORE;
f010ea86:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010ea8b:	eb 5b                	jmp    f010eae8 <allocate_semaphore_object+0xeb>
			}
			else
			{
				semaphoreObjectID = MAX_SEMAPHORES;
f010ea8d:	a1 30 b8 85 f0       	mov    0xf085b830,%eax
f010ea92:	89 45 f4             	mov    %eax,-0xc(%ebp)
				MAX_SEMAPHORES *= 2;
f010ea95:	a1 30 b8 85 f0       	mov    0xf085b830,%eax
f010ea9a:	01 c0                	add    %eax,%eax
f010ea9c:	a3 30 b8 85 f0       	mov    %eax,0xf085b830
			return E_NO_SEMAPHORE;
		}
		#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010eaa1:	8b 0d 88 b8 85 f0    	mov    0xf085b888,%ecx
f010eaa7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010eaaa:	89 d0                	mov    %edx,%eax
f010eaac:	c1 e0 02             	shl    $0x2,%eax
f010eaaf:	01 d0                	add    %edx,%eax
f010eab1:	01 c0                	add    %eax,%eax
f010eab3:	01 d0                	add    %edx,%eax
f010eab5:	01 c0                	add    %eax,%eax
f010eab7:	01 d0                	add    %edx,%eax
f010eab9:	c1 e0 02             	shl    $0x2,%eax
f010eabc:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010eabf:	8b 45 08             	mov    0x8(%ebp),%eax
f010eac2:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010eac4:	8b 0d 88 b8 85 f0    	mov    0xf085b888,%ecx
f010eaca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010eacd:	89 d0                	mov    %edx,%eax
f010eacf:	c1 e0 02             	shl    $0x2,%eax
f010ead2:	01 d0                	add    %edx,%eax
f010ead4:	01 c0                	add    %eax,%eax
f010ead6:	01 d0                	add    %edx,%eax
f010ead8:	01 c0                	add    %eax,%eax
f010eada:	01 d0                	add    %edx,%eax
f010eadc:	c1 e0 02             	shl    $0x2,%eax
f010eadf:	01 c8                	add    %ecx,%eax
f010eae1:	c6 40 58 00          	movb   $0x0,0x58(%eax)

	return semaphoreObjectID;
f010eae5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010eae8:	c9                   	leave  
f010eae9:	c3                   	ret    

f010eaea <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010eaea:	55                   	push   %ebp
f010eaeb:	89 e5                	mov    %esp,%ebp
f010eaed:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010eaf0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010eaf7:	e9 84 00 00 00       	jmp    f010eb80 <get_semaphore_object_ID+0x96>
	{
		if (semaphores[i].empty)
f010eafc:	8b 0d 88 b8 85 f0    	mov    0xf085b888,%ecx
f010eb02:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010eb05:	89 d0                	mov    %edx,%eax
f010eb07:	c1 e0 02             	shl    $0x2,%eax
f010eb0a:	01 d0                	add    %edx,%eax
f010eb0c:	01 c0                	add    %eax,%eax
f010eb0e:	01 d0                	add    %edx,%eax
f010eb10:	01 c0                	add    %eax,%eax
f010eb12:	01 d0                	add    %edx,%eax
f010eb14:	c1 e0 02             	shl    $0x2,%eax
f010eb17:	01 c8                	add    %ecx,%eax
f010eb19:	8a 40 58             	mov    0x58(%eax),%al
f010eb1c:	84 c0                	test   %al,%al
f010eb1e:	75 5c                	jne    f010eb7c <get_semaphore_object_ID+0x92>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010eb20:	8b 0d 88 b8 85 f0    	mov    0xf085b888,%ecx
f010eb26:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010eb29:	89 d0                	mov    %edx,%eax
f010eb2b:	c1 e0 02             	shl    $0x2,%eax
f010eb2e:	01 d0                	add    %edx,%eax
f010eb30:	01 c0                	add    %eax,%eax
f010eb32:	01 d0                	add    %edx,%eax
f010eb34:	01 c0                	add    %eax,%eax
f010eb36:	01 d0                	add    %edx,%eax
f010eb38:	c1 e0 02             	shl    $0x2,%eax
f010eb3b:	01 c8                	add    %ecx,%eax
f010eb3d:	8b 00                	mov    (%eax),%eax
f010eb3f:	3b 45 08             	cmp    0x8(%ebp),%eax
f010eb42:	75 39                	jne    f010eb7d <get_semaphore_object_ID+0x93>
f010eb44:	8b 0d 88 b8 85 f0    	mov    0xf085b888,%ecx
f010eb4a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010eb4d:	89 d0                	mov    %edx,%eax
f010eb4f:	c1 e0 02             	shl    $0x2,%eax
f010eb52:	01 d0                	add    %edx,%eax
f010eb54:	01 c0                	add    %eax,%eax
f010eb56:	01 d0                	add    %edx,%eax
f010eb58:	01 c0                	add    %eax,%eax
f010eb5a:	01 d0                	add    %edx,%eax
f010eb5c:	c1 e0 02             	shl    $0x2,%eax
f010eb5f:	01 c8                	add    %ecx,%eax
f010eb61:	83 c0 04             	add    $0x4,%eax
f010eb64:	83 ec 08             	sub    $0x8,%esp
f010eb67:	50                   	push   %eax
f010eb68:	ff 75 0c             	pushl  0xc(%ebp)
f010eb6b:	e8 03 30 02 00       	call   f0131b73 <strcmp>
f010eb70:	83 c4 10             	add    $0x10,%esp
f010eb73:	85 c0                	test   %eax,%eax
f010eb75:	75 06                	jne    f010eb7d <get_semaphore_object_ID+0x93>
		{
			return i;
f010eb77:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010eb7a:	eb 19                	jmp    f010eb95 <get_semaphore_object_ID+0xab>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010eb7c:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010eb7d:	ff 45 f4             	incl   -0xc(%ebp)
f010eb80:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010eb83:	a1 30 b8 85 f0       	mov    0xf085b830,%eax
f010eb88:	39 c2                	cmp    %eax,%edx
f010eb8a:	0f 82 6c ff ff ff    	jb     f010eafc <get_semaphore_object_ID+0x12>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010eb90:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010eb95:	c9                   	leave  
f010eb96:	c3                   	ret    

f010eb97 <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010eb97:	55                   	push   %ebp
f010eb98:	89 e5                	mov    %esp,%ebp
f010eb9a:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010eb9d:	a1 30 b8 85 f0       	mov    0xf085b830,%eax
f010eba2:	39 45 08             	cmp    %eax,0x8(%ebp)
f010eba5:	72 0a                	jb     f010ebb1 <free_semaphore_object+0x1a>
		return E_SEMAPHORE_NOT_EXISTS;
f010eba7:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010ebac:	e9 bf 00 00 00       	jmp    f010ec70 <free_semaphore_object+0xd9>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010ebb1:	8b 0d 88 b8 85 f0    	mov    0xf085b888,%ecx
f010ebb7:	8b 55 08             	mov    0x8(%ebp),%edx
f010ebba:	89 d0                	mov    %edx,%eax
f010ebbc:	c1 e0 02             	shl    $0x2,%eax
f010ebbf:	01 d0                	add    %edx,%eax
f010ebc1:	01 c0                	add    %eax,%eax
f010ebc3:	01 d0                	add    %edx,%eax
f010ebc5:	01 c0                	add    %eax,%eax
f010ebc7:	01 d0                	add    %edx,%eax
f010ebc9:	c1 e0 02             	shl    $0x2,%eax
f010ebcc:	01 c8                	add    %ecx,%eax
f010ebce:	83 ec 04             	sub    $0x4,%esp
f010ebd1:	6a 5c                	push   $0x5c
f010ebd3:	6a 00                	push   $0x0
f010ebd5:	50                   	push   %eax
f010ebd6:	e8 7a 30 02 00       	call   f0131c55 <memset>
f010ebdb:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010ebde:	8b 0d 88 b8 85 f0    	mov    0xf085b888,%ecx
f010ebe4:	8b 55 08             	mov    0x8(%ebp),%edx
f010ebe7:	89 d0                	mov    %edx,%eax
f010ebe9:	c1 e0 02             	shl    $0x2,%eax
f010ebec:	01 d0                	add    %edx,%eax
f010ebee:	01 c0                	add    %eax,%eax
f010ebf0:	01 d0                	add    %edx,%eax
f010ebf2:	01 c0                	add    %eax,%eax
f010ebf4:	01 d0                	add    %edx,%eax
f010ebf6:	c1 e0 02             	shl    $0x2,%eax
f010ebf9:	01 c8                	add    %ecx,%eax
f010ebfb:	c6 40 58 01          	movb   $0x1,0x58(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010ebff:	8b 0d 88 b8 85 f0    	mov    0xf085b888,%ecx
f010ec05:	8b 55 08             	mov    0x8(%ebp),%edx
f010ec08:	89 d0                	mov    %edx,%eax
f010ec0a:	c1 e0 02             	shl    $0x2,%eax
f010ec0d:	01 d0                	add    %edx,%eax
f010ec0f:	01 c0                	add    %eax,%eax
f010ec11:	01 d0                	add    %edx,%eax
f010ec13:	01 c0                	add    %eax,%eax
f010ec15:	01 d0                	add    %edx,%eax
f010ec17:	c1 e0 02             	shl    $0x2,%eax
f010ec1a:	01 c8                	add    %ecx,%eax
f010ec1c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010ec23:	8b 0d 88 b8 85 f0    	mov    0xf085b888,%ecx
f010ec29:	8b 55 08             	mov    0x8(%ebp),%edx
f010ec2c:	89 d0                	mov    %edx,%eax
f010ec2e:	c1 e0 02             	shl    $0x2,%eax
f010ec31:	01 d0                	add    %edx,%eax
f010ec33:	01 c0                	add    %eax,%eax
f010ec35:	01 d0                	add    %edx,%eax
f010ec37:	01 c0                	add    %eax,%eax
f010ec39:	01 d0                	add    %edx,%eax
f010ec3b:	c1 e0 02             	shl    $0x2,%eax
f010ec3e:	01 c8                	add    %ecx,%eax
f010ec40:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010ec47:	8b 0d 88 b8 85 f0    	mov    0xf085b888,%ecx
f010ec4d:	8b 55 08             	mov    0x8(%ebp),%edx
f010ec50:	89 d0                	mov    %edx,%eax
f010ec52:	c1 e0 02             	shl    $0x2,%eax
f010ec55:	01 d0                	add    %edx,%eax
f010ec57:	01 c0                	add    %eax,%eax
f010ec59:	01 d0                	add    %edx,%eax
f010ec5b:	01 c0                	add    %eax,%eax
f010ec5d:	01 d0                	add    %edx,%eax
f010ec5f:	c1 e0 02             	shl    $0x2,%eax
f010ec62:	01 c8                	add    %ecx,%eax
f010ec64:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

	return 0;
f010ec6b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ec70:	c9                   	leave  
f010ec71:	c3                   	ret    

f010ec72 <createSemaphore>:
//==================================================================================//

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue) {
f010ec72:	55                   	push   %ebp
f010ec73:	89 e5                	mov    %esp,%ebp
f010ec75:	83 ec 18             	sub    $0x18,%esp
	//	a) SemaphoreID (its index in the array) if succeed
	//	b) E_SEMAPHORE_EXISTS if the semaphore is already exists
	//	c) E_NO_SEMAPHORE if the the array of semaphores is full

	//change this "return" according to your answer
	int sem_exist = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010ec78:	83 ec 08             	sub    $0x8,%esp
f010ec7b:	ff 75 0c             	pushl  0xc(%ebp)
f010ec7e:	ff 75 08             	pushl  0x8(%ebp)
f010ec81:	e8 64 fe ff ff       	call   f010eaea <get_semaphore_object_ID>
f010ec86:	83 c4 10             	add    $0x10,%esp
f010ec89:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (sem_exist == E_SEMAPHORE_EXISTS)
f010ec8c:	83 7d f4 f4          	cmpl   $0xfffffff4,-0xc(%ebp)
f010ec90:	75 07                	jne    f010ec99 <createSemaphore+0x27>
		return E_SEMAPHORE_EXISTS;
f010ec92:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
f010ec97:	eb 48                	jmp    f010ece1 <createSemaphore+0x6f>

	struct Semaphore *allocatedObject;
	int obj = allocate_semaphore_object(&allocatedObject);
f010ec99:	83 ec 0c             	sub    $0xc,%esp
f010ec9c:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010ec9f:	50                   	push   %eax
f010eca0:	e8 58 fd ff ff       	call   f010e9fd <allocate_semaphore_object>
f010eca5:	83 c4 10             	add    $0x10,%esp
f010eca8:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if (obj == E_NO_SEMAPHORE) {
f010ecab:	83 7d f0 f5          	cmpl   $0xfffffff5,-0x10(%ebp)
f010ecaf:	75 07                	jne    f010ecb8 <createSemaphore+0x46>
		return E_NO_SEMAPHORE;
f010ecb1:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010ecb6:	eb 29                	jmp    f010ece1 <createSemaphore+0x6f>
	}
	allocatedObject->ownerID = ownerEnvID;
f010ecb8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ecbb:	8b 55 08             	mov    0x8(%ebp),%edx
f010ecbe:	89 10                	mov    %edx,(%eax)
	strcpy(allocatedObject->name, semaphoreName);
f010ecc0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ecc3:	83 c0 04             	add    $0x4,%eax
f010ecc6:	83 ec 08             	sub    $0x8,%esp
f010ecc9:	ff 75 0c             	pushl  0xc(%ebp)
f010eccc:	50                   	push   %eax
f010eccd:	e8 e4 2d 02 00       	call   f0131ab6 <strcpy>
f010ecd2:	83 c4 10             	add    $0x10,%esp
	allocatedObject->value = initialValue;
f010ecd5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ecd8:	8b 55 10             	mov    0x10(%ebp),%edx
f010ecdb:	89 50 54             	mov    %edx,0x54(%eax)
	return obj;
f010ecde:	8b 45 f0             	mov    -0x10(%ebp),%eax

	//return 0;
}
f010ece1:	c9                   	leave  
f010ece2:	c3                   	ret    

f010ece3 <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName) {
f010ece3:	55                   	push   %ebp
f010ece4:	89 e5                	mov    %esp,%ebp
f010ece6:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [SEMAPHORES] waitSemaphore
	// your code is here, remove the panic and write your code
	//panic("waitSemaphore() is not implemented yet...!!");

	struct Env* myenv = curenv; //The calling environment
f010ece9:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f010ecee:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int sem = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010ecf1:	83 ec 08             	sub    $0x8,%esp
f010ecf4:	ff 75 0c             	pushl  0xc(%ebp)
f010ecf7:	ff 75 08             	pushl  0x8(%ebp)
f010ecfa:	e8 eb fd ff ff       	call   f010eaea <get_semaphore_object_ID>
f010ecff:	83 c4 10             	add    $0x10,%esp
f010ed02:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int res = --semaphores[sem].value;
f010ed05:	8b 0d 88 b8 85 f0    	mov    0xf085b888,%ecx
f010ed0b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ed0e:	89 d0                	mov    %edx,%eax
f010ed10:	c1 e0 02             	shl    $0x2,%eax
f010ed13:	01 d0                	add    %edx,%eax
f010ed15:	01 c0                	add    %eax,%eax
f010ed17:	01 d0                	add    %edx,%eax
f010ed19:	01 c0                	add    %eax,%eax
f010ed1b:	01 d0                	add    %edx,%eax
f010ed1d:	c1 e0 02             	shl    $0x2,%eax
f010ed20:	01 c8                	add    %ecx,%eax
f010ed22:	8b 50 54             	mov    0x54(%eax),%edx
f010ed25:	4a                   	dec    %edx
f010ed26:	89 50 54             	mov    %edx,0x54(%eax)
f010ed29:	8b 40 54             	mov    0x54(%eax),%eax
f010ed2c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if (res < 0) {
f010ed2f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010ed33:	79 43                	jns    f010ed78 <waitSemaphore+0x95>
		enqueue(&semaphores[sem].env_queue, myenv);
f010ed35:	8b 0d 88 b8 85 f0    	mov    0xf085b888,%ecx
f010ed3b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ed3e:	89 d0                	mov    %edx,%eax
f010ed40:	c1 e0 02             	shl    $0x2,%eax
f010ed43:	01 d0                	add    %edx,%eax
f010ed45:	01 c0                	add    %eax,%eax
f010ed47:	01 d0                	add    %edx,%eax
f010ed49:	01 c0                	add    %eax,%eax
f010ed4b:	01 d0                	add    %edx,%eax
f010ed4d:	c1 e0 02             	shl    $0x2,%eax
f010ed50:	01 c8                	add    %ecx,%eax
f010ed52:	83 c0 44             	add    $0x44,%eax
f010ed55:	83 ec 08             	sub    $0x8,%esp
f010ed58:	ff 75 f4             	pushl  -0xc(%ebp)
f010ed5b:	50                   	push   %eax
f010ed5c:	e8 57 57 ff ff       	call   f01044b8 <enqueue>
f010ed61:	83 c4 10             	add    $0x10,%esp
		myenv->env_status = ENV_BLOCKED;
f010ed64:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ed67:	c7 40 54 03 00 00 00 	movl   $0x3,0x54(%eax)
		curenv = NULL;
f010ed6e:	c7 05 74 af 85 f0 00 	movl   $0x0,0xf085af74
f010ed75:	00 00 00 
	}

	fos_scheduler();
f010ed78:	e8 c4 59 ff ff       	call   f0104741 <fos_scheduler>

f010ed7d <signalSemaphore>:
}

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName) {
f010ed7d:	55                   	push   %ebp
f010ed7e:	89 e5                	mov    %esp,%ebp
f010ed80:	83 ec 18             	sub    $0x18,%esp
	//	2) Increment its value
	//	3) If less than or equal 0, release a blocked environment, by
	//		a) removing it from semaphore queue		[refer to helper functions in doc]
	//		b) adding it to ready queue				[refer to helper functions in doc]
	//		c) changing its status to ENV_READY
	int sem = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010ed83:	83 ec 08             	sub    $0x8,%esp
f010ed86:	ff 75 0c             	pushl  0xc(%ebp)
f010ed89:	ff 75 08             	pushl  0x8(%ebp)
f010ed8c:	e8 59 fd ff ff       	call   f010eaea <get_semaphore_object_ID>
f010ed91:	83 c4 10             	add    $0x10,%esp
f010ed94:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int res = ++semaphores[sem].value;
f010ed97:	8b 0d 88 b8 85 f0    	mov    0xf085b888,%ecx
f010ed9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010eda0:	89 d0                	mov    %edx,%eax
f010eda2:	c1 e0 02             	shl    $0x2,%eax
f010eda5:	01 d0                	add    %edx,%eax
f010eda7:	01 c0                	add    %eax,%eax
f010eda9:	01 d0                	add    %edx,%eax
f010edab:	01 c0                	add    %eax,%eax
f010edad:	01 d0                	add    %edx,%eax
f010edaf:	c1 e0 02             	shl    $0x2,%eax
f010edb2:	01 c8                	add    %ecx,%eax
f010edb4:	8b 50 54             	mov    0x54(%eax),%edx
f010edb7:	42                   	inc    %edx
f010edb8:	89 50 54             	mov    %edx,0x54(%eax)
f010edbb:	8b 40 54             	mov    0x54(%eax),%eax
f010edbe:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (res <= 0) {
f010edc1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010edc5:	7f 47                	jg     f010ee0e <signalSemaphore+0x91>
		struct Env* myenv = dequeue(&semaphores[sem].env_queue);
f010edc7:	8b 0d 88 b8 85 f0    	mov    0xf085b888,%ecx
f010edcd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010edd0:	89 d0                	mov    %edx,%eax
f010edd2:	c1 e0 02             	shl    $0x2,%eax
f010edd5:	01 d0                	add    %edx,%eax
f010edd7:	01 c0                	add    %eax,%eax
f010edd9:	01 d0                	add    %edx,%eax
f010eddb:	01 c0                	add    %eax,%eax
f010eddd:	01 d0                	add    %edx,%eax
f010eddf:	c1 e0 02             	shl    $0x2,%eax
f010ede2:	01 c8                	add    %ecx,%eax
f010ede4:	83 c0 44             	add    $0x44,%eax
f010ede7:	83 ec 0c             	sub    $0xc,%esp
f010edea:	50                   	push   %eax
f010edeb:	e8 59 57 ff ff       	call   f0104549 <dequeue>
f010edf0:	83 c4 10             	add    $0x10,%esp
f010edf3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		sched_insert_ready(myenv);
f010edf6:	83 ec 0c             	sub    $0xc,%esp
f010edf9:	ff 75 ec             	pushl  -0x14(%ebp)
f010edfc:	e8 66 5b ff ff       	call   f0104967 <sched_insert_ready>
f010ee01:	83 c4 10             	add    $0x10,%esp
		myenv->env_status = ENV_READY;
f010ee04:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ee07:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
	}

}
f010ee0e:	90                   	nop
f010ee0f:	c9                   	leave  
f010ee10:	c3                   	ret    

f010ee11 <test_initialize_MemBlocksList>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_MemBlocksList()
{
f010ee11:	55                   	push   %ebp
f010ee12:	89 e5                	mov    %esp,%ebp
f010ee14:	83 ec 18             	sub    $0x18,%esp
	uint32 numOfBlocks = 5;
f010ee17:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010ee1e:	83 ec 0c             	sub    $0xc,%esp
f010ee21:	ff 75 ec             	pushl  -0x14(%ebp)
f010ee24:	e8 a8 37 02 00       	call   f01325d1 <initialize_MemBlocksList>
f010ee29:	83 c4 10             	add    $0x10,%esp
	//Check 1: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks)
f010ee2c:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f010ee31:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010ee34:	74 17                	je     f010ee4d <test_initialize_MemBlocksList+0x3c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AvailableMemBlocksList %d\n", LIST_SIZE(&(AvailableMemBlocksList)));
f010ee36:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f010ee3b:	50                   	push   %eax
f010ee3c:	68 a0 7d 13 f0       	push   $0xf0137da0
f010ee41:	6a 1f                	push   $0x1f
f010ee43:	68 f4 7d 13 f0       	push   $0xf0137df4
f010ee48:	e8 b8 13 ff ff       	call   f0100205 <_panic>
		//assert(LIST_SIZE(&AvailableMemBlocksList) == numOfBlocks);
	}

	//Check 2: Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ee4d:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f010ee52:	85 c0                	test   %eax,%eax
f010ee54:	74 17                	je     f010ee6d <test_initialize_MemBlocksList+0x5c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AllocMemBlocksList %d\n", LIST_SIZE(&(AllocMemBlocksList)));
f010ee56:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f010ee5b:	50                   	push   %eax
f010ee5c:	68 18 7e 13 f0       	push   $0xf0137e18
f010ee61:	6a 26                	push   $0x26
f010ee63:	68 f4 7d 13 f0       	push   $0xf0137df4
f010ee68:	e8 98 13 ff ff       	call   f0100205 <_panic>
	}

	//Check 3: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 0)
f010ee6d:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f010ee72:	85 c0                	test   %eax,%eax
f010ee74:	74 17                	je     f010ee8d <test_initialize_MemBlocksList+0x7c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the FreeMemBlocksList %d\n", LIST_SIZE(&(FreeMemBlocksList)));
f010ee76:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f010ee7b:	50                   	push   %eax
f010ee7c:	68 68 7e 13 f0       	push   $0xf0137e68
f010ee81:	6a 2c                	push   $0x2c
f010ee83:	68 f4 7d 13 f0       	push   $0xf0137df4
f010ee88:	e8 78 13 ff ff       	call   f0100205 <_panic>
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
f010ee8d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 size = 0;
f010ee94:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010ee9b:	a1 14 b9 85 f0       	mov    0xf085b914,%eax
f010eea0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010eea3:	eb 29                	jmp    f010eece <test_initialize_MemBlocksList+0xbd>
	{
		size++;
f010eea5:	ff 45 f0             	incl   -0x10(%ebp)
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f010eea8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010eeab:	8b 50 0c             	mov    0xc(%eax),%edx
f010eeae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010eeb1:	8b 40 08             	mov    0x8(%eax),%eax
f010eeb4:	83 ec 04             	sub    $0x4,%esp
f010eeb7:	52                   	push   %edx
f010eeb8:	50                   	push   %eax
f010eeb9:	68 b8 7e 13 f0       	push   $0xf0137eb8
f010eebe:	e8 4b 1e ff ff       	call   f0100d0e <cprintf>
f010eec3:	83 c4 10             	add    $0x10,%esp
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
	uint32 size = 0;
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010eec6:	a1 1c b9 85 f0       	mov    0xf085b91c,%eax
f010eecb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010eece:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010eed2:	74 07                	je     f010eedb <test_initialize_MemBlocksList+0xca>
f010eed4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010eed7:	8b 00                	mov    (%eax),%eax
f010eed9:	eb 05                	jmp    f010eee0 <test_initialize_MemBlocksList+0xcf>
f010eedb:	b8 00 00 00 00       	mov    $0x0,%eax
f010eee0:	a3 1c b9 85 f0       	mov    %eax,0xf085b91c
f010eee5:	a1 1c b9 85 f0       	mov    0xf085b91c,%eax
f010eeea:	85 c0                	test   %eax,%eax
f010eeec:	75 b7                	jne    f010eea5 <test_initialize_MemBlocksList+0x94>
f010eeee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010eef2:	75 b1                	jne    f010eea5 <test_initialize_MemBlocksList+0x94>
	{
		size++;
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
	if(LIST_SIZE(&(AvailableMemBlocksList)) != size)
f010eef4:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f010eef9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010eefc:	74 14                	je     f010ef12 <test_initialize_MemBlocksList+0x101>
		panic("initialize_MemBlocksList: Some nodes are not created in the initialize_MemBlocksList\n");
f010eefe:	83 ec 04             	sub    $0x4,%esp
f010ef01:	68 d8 7e 13 f0       	push   $0xf0137ed8
f010ef06:	6a 38                	push   $0x38
f010ef08:	68 f4 7d 13 f0       	push   $0xf0137df4
f010ef0d:	e8 f3 12 ff ff       	call   f0100205 <_panic>
	else
		cprintf("Congratulations!! test initialize_MemBlocksList completed successfully.\n");
f010ef12:	83 ec 0c             	sub    $0xc,%esp
f010ef15:	68 30 7f 13 f0       	push   $0xf0137f30
f010ef1a:	e8 ef 1d ff ff       	call   f0100d0e <cprintf>
f010ef1f:	83 c4 10             	add    $0x10,%esp
}
f010ef22:	90                   	nop
f010ef23:	c9                   	leave  
f010ef24:	c3                   	ret    

f010ef25 <test_insert_sorted_allocList>:

void test_insert_sorted_allocList()
{
f010ef25:	55                   	push   %ebp
f010ef26:	89 e5                	mov    %esp,%ebp
f010ef28:	57                   	push   %edi
f010ef29:	81 ec 94 00 00 00    	sub    $0x94,%esp
	uint32 numOfBlocks = 5;
f010ef2f:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010ef36:	83 ec 0c             	sub    $0xc,%esp
f010ef39:	ff 75 f4             	pushl  -0xc(%ebp)
f010ef3c:	e8 90 36 02 00       	call   f01325d1 <initialize_MemBlocksList>
f010ef41:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010ef44:	c7 05 44 b8 85 f0 00 	movl   $0x0,0xf085b844
f010ef4b:	00 00 00 
f010ef4e:	c7 05 48 b8 85 f0 00 	movl   $0x0,0xf085b848
f010ef55:	00 00 00 
f010ef58:	c7 05 50 b8 85 f0 00 	movl   $0x0,0xf085b850
f010ef5f:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010ef62:	c7 05 e0 b8 85 f0 00 	movl   $0x0,0xf085b8e0
f010ef69:	00 00 00 
f010ef6c:	c7 05 e4 b8 85 f0 00 	movl   $0x0,0xf085b8e4
f010ef73:	00 00 00 
f010ef76:	c7 05 ec b8 85 f0 00 	movl   $0x0,0xf085b8ec
f010ef7d:	00 00 00 

	uint32 blocksToInsertSVAs[5]={0,0,0,0,0};
f010ef80:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010ef83:	b9 05 00 00 00       	mov    $0x5,%ecx
f010ef88:	b8 00 00 00 00       	mov    $0x0,%eax
f010ef8d:	89 d7                	mov    %edx,%edi
f010ef8f:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[5]={0,0,0,0,0};
f010ef91:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f010ef94:	b9 05 00 00 00       	mov    $0x5,%ecx
f010ef99:	b8 00 00 00 00       	mov    $0x0,%eax
f010ef9e:	89 d7                	mov    %edx,%edi
f010efa0:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010efa2:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	uint32 actualSize = 0;
f010efa9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)


	/*INSERT Scenario 1: Insert BLOCK_1 in the empty AllocMemBlocksList*/
	//BLOCK_1 sva = 8K
	blocksToInsertSVAs[1] = 0x0 + (8*kilo);
f010efb0:	c7 45 dc 00 20 00 00 	movl   $0x2000,-0x24(%ebp)
	blocksToInsertSizes[1] = (4*kilo);
f010efb7:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[1];
f010efbe:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010efc1:	89 45 b8             	mov    %eax,-0x48(%ebp)
	blockToInsert1.size = blocksToInsertSizes[1];
f010efc4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010efc7:	89 45 bc             	mov    %eax,-0x44(%ebp)

	insert_sorted_allocList(&blockToInsert1);
f010efca:	83 ec 0c             	sub    $0xc,%esp
f010efcd:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010efd0:	50                   	push   %eax
f010efd1:	e8 56 37 02 00       	call   f013272c <insert_sorted_allocList>
f010efd6:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 1;
f010efd9:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010efe0:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f010efe5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010efe8:	74 14                	je     f010effe <test_insert_sorted_allocList+0xd9>
f010efea:	83 ec 04             	sub    $0x4,%esp
f010efed:	68 7c 7f 13 f0       	push   $0xf0137f7c
f010eff2:	6a 56                	push   $0x56
f010eff4:	68 f4 7d 13 f0       	push   $0xf0137df4
f010eff9:	e8 07 12 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010effe:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f010f003:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f006:	74 14                	je     f010f01c <test_insert_sorted_allocList+0xf7>
f010f008:	83 ec 04             	sub    $0x4,%esp
f010f00b:	68 c8 7f 13 f0       	push   $0xf0137fc8
f010f010:	6a 59                	push   $0x59
f010f012:	68 f4 7d 13 f0       	push   $0xf0137df4
f010f017:	e8 e9 11 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	int chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f01c:	83 ec 0c             	sub    $0xc,%esp
f010f01f:	ff 75 f0             	pushl  -0x10(%ebp)
f010f022:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f025:	50                   	push   %eax
f010f026:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010f029:	50                   	push   %eax
f010f02a:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010f02d:	50                   	push   %eax
f010f02e:	68 44 b8 85 f0       	push   $0xf085b844
f010f033:	e8 7d 26 00 00       	call   f01116b5 <check_list_data>
f010f038:	83 c4 20             	add    $0x20,%esp
f010f03b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010f03e:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010f042:	74 14                	je     f010f058 <test_insert_sorted_allocList+0x133>
f010f044:	83 ec 04             	sub    $0x4,%esp
f010f047:	68 18 80 13 f0       	push   $0xf0138018
f010f04c:	6a 5d                	push   $0x5d
f010f04e:	68 f4 7d 13 f0       	push   $0xf0137df4
f010f053:	e8 ad 11 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010f058:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f05b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f05e:	74 14                	je     f010f074 <test_insert_sorted_allocList+0x14f>
f010f060:	83 ec 04             	sub    $0x4,%esp
f010f063:	68 68 80 13 f0       	push   $0xf0138068
f010f068:	6a 5e                	push   $0x5e
f010f06a:	68 f4 7d 13 f0       	push   $0xf0137df4
f010f06f:	e8 91 11 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT Scenario 2: Insert BLOCK_2 in the AllocMemBlocksList with sva greater than BLOCK_1*/
	//BLOCK_2 sva = 28K
	blocksToInsertSVAs[4] = (28*kilo);
f010f074:	c7 45 e8 00 70 00 00 	movl   $0x7000,-0x18(%ebp)
	blocksToInsertSizes[4] = (2*kilo);
f010f07b:	c7 45 d4 00 08 00 00 	movl   $0x800,-0x2c(%ebp)
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[4];
f010f082:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f085:	89 45 a8             	mov    %eax,-0x58(%ebp)
	blockToInsert2.size = blocksToInsertSizes[4];
f010f088:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f08b:	89 45 ac             	mov    %eax,-0x54(%ebp)

	insert_sorted_allocList(&blockToInsert2);
f010f08e:	83 ec 0c             	sub    $0xc,%esp
f010f091:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010f094:	50                   	push   %eax
f010f095:	e8 92 36 02 00       	call   f013272c <insert_sorted_allocList>
f010f09a:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 2;
f010f09d:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010f0a4:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f010f0a9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f0ac:	74 14                	je     f010f0c2 <test_insert_sorted_allocList+0x19d>
f010f0ae:	83 ec 04             	sub    $0x4,%esp
f010f0b1:	68 7c 7f 13 f0       	push   $0xf0137f7c
f010f0b6:	6a 6d                	push   $0x6d
f010f0b8:	68 f4 7d 13 f0       	push   $0xf0137df4
f010f0bd:	e8 43 11 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010f0c2:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f010f0c7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f0ca:	74 14                	je     f010f0e0 <test_insert_sorted_allocList+0x1bb>
f010f0cc:	83 ec 04             	sub    $0x4,%esp
f010f0cf:	68 c8 7f 13 f0       	push   $0xf0137fc8
f010f0d4:	6a 70                	push   $0x70
f010f0d6:	68 f4 7d 13 f0       	push   $0xf0137df4
f010f0db:	e8 25 11 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010f0e0:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f0e7:	83 ec 0c             	sub    $0xc,%esp
f010f0ea:	ff 75 f0             	pushl  -0x10(%ebp)
f010f0ed:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f0f0:	50                   	push   %eax
f010f0f1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010f0f4:	50                   	push   %eax
f010f0f5:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010f0f8:	50                   	push   %eax
f010f0f9:	68 44 b8 85 f0       	push   $0xf085b844
f010f0fe:	e8 b2 25 00 00       	call   f01116b5 <check_list_data>
f010f103:	83 c4 20             	add    $0x20,%esp
f010f106:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010f109:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010f10d:	74 14                	je     f010f123 <test_insert_sorted_allocList+0x1fe>
f010f10f:	83 ec 04             	sub    $0x4,%esp
f010f112:	68 18 80 13 f0       	push   $0xf0138018
f010f117:	6a 75                	push   $0x75
f010f119:	68 f4 7d 13 f0       	push   $0xf0137df4
f010f11e:	e8 e2 10 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010f123:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f126:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f129:	74 14                	je     f010f13f <test_insert_sorted_allocList+0x21a>
f010f12b:	83 ec 04             	sub    $0x4,%esp
f010f12e:	68 68 80 13 f0       	push   $0xf0138068
f010f133:	6a 76                	push   $0x76
f010f135:	68 f4 7d 13 f0       	push   $0xf0137df4
f010f13a:	e8 c6 10 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT Scenario 3: Insert BLOCK_3 in the AllocMemBlocksList with sva smaller than BLOCK_2*/
	//BLOCK_3 sva = 16K
	blocksToInsertSVAs[2] = (16*kilo);
f010f13f:	c7 45 e0 00 40 00 00 	movl   $0x4000,-0x20(%ebp)
	blocksToInsertSizes[2] = (8*kilo);
f010f146:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[2];
f010f14d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f150:	89 45 98             	mov    %eax,-0x68(%ebp)
	blockToInsert3.size = blocksToInsertSizes[2];
f010f153:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f156:	89 45 9c             	mov    %eax,-0x64(%ebp)

	insert_sorted_allocList(&blockToInsert3);
f010f159:	83 ec 0c             	sub    $0xc,%esp
f010f15c:	8d 45 90             	lea    -0x70(%ebp),%eax
f010f15f:	50                   	push   %eax
f010f160:	e8 c7 35 02 00       	call   f013272c <insert_sorted_allocList>
f010f165:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 3;
f010f168:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010f16f:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f010f174:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f177:	74 17                	je     f010f190 <test_insert_sorted_allocList+0x26b>
f010f179:	83 ec 04             	sub    $0x4,%esp
f010f17c:	68 7c 7f 13 f0       	push   $0xf0137f7c
f010f181:	68 85 00 00 00       	push   $0x85
f010f186:	68 f4 7d 13 f0       	push   $0xf0137df4
f010f18b:	e8 75 10 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList\n");
f010f190:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f010f195:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f198:	74 17                	je     f010f1b1 <test_insert_sorted_allocList+0x28c>
f010f19a:	83 ec 04             	sub    $0x4,%esp
f010f19d:	68 b4 80 13 f0       	push   $0xf01380b4
f010f1a2:	68 88 00 00 00       	push   $0x88
f010f1a7:	68 f4 7d 13 f0       	push   $0xf0137df4
f010f1ac:	e8 54 10 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010f1b1:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f1b8:	83 ec 0c             	sub    $0xc,%esp
f010f1bb:	ff 75 f0             	pushl  -0x10(%ebp)
f010f1be:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f1c1:	50                   	push   %eax
f010f1c2:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010f1c5:	50                   	push   %eax
f010f1c6:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010f1c9:	50                   	push   %eax
f010f1ca:	68 44 b8 85 f0       	push   $0xf085b844
f010f1cf:	e8 e1 24 00 00       	call   f01116b5 <check_list_data>
f010f1d4:	83 c4 20             	add    $0x20,%esp
f010f1d7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010f1da:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010f1de:	74 17                	je     f010f1f7 <test_insert_sorted_allocList+0x2d2>
f010f1e0:	83 ec 04             	sub    $0x4,%esp
f010f1e3:	68 18 80 13 f0       	push   $0xf0138018
f010f1e8:	68 8d 00 00 00       	push   $0x8d
f010f1ed:	68 f4 7d 13 f0       	push   $0xf0137df4
f010f1f2:	e8 0e 10 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010f1f7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f1fa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f1fd:	74 17                	je     f010f216 <test_insert_sorted_allocList+0x2f1>
f010f1ff:	83 ec 04             	sub    $0x4,%esp
f010f202:	68 68 80 13 f0       	push   $0xf0138068
f010f207:	68 8e 00 00 00       	push   $0x8e
f010f20c:	68 f4 7d 13 f0       	push   $0xf0137df4
f010f211:	e8 ef 0f ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//INSERT Scenario 4: Insert BLOCK_4 in the AllocMemBlocksList with sva smaller than ALL (SHALL BE INSERTED AS HEAD)
	//BLOCK_4 sva = 0x0
	blocksToInsertSVAs[0] = (0x0);
f010f216:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	blocksToInsertSizes[0] = (8*kilo);
f010f21d:	c7 45 c4 00 20 00 00 	movl   $0x2000,-0x3c(%ebp)
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[0];
f010f224:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010f227:	89 45 88             	mov    %eax,-0x78(%ebp)
	blockToInsert4.size = blocksToInsertSizes[0];
f010f22a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f22d:	89 45 8c             	mov    %eax,-0x74(%ebp)
	insert_sorted_allocList(&blockToInsert4);
f010f230:	83 ec 0c             	sub    $0xc,%esp
f010f233:	8d 45 80             	lea    -0x80(%ebp),%eax
f010f236:	50                   	push   %eax
f010f237:	e8 f0 34 02 00       	call   f013272c <insert_sorted_allocList>
f010f23c:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 4;
f010f23f:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010f246:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f010f24b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f24e:	74 17                	je     f010f267 <test_insert_sorted_allocList+0x342>
f010f250:	83 ec 04             	sub    $0x4,%esp
f010f253:	68 7c 7f 13 f0       	push   $0xf0137f7c
f010f258:	68 9c 00 00 00       	push   $0x9c
f010f25d:	68 f4 7d 13 f0       	push   $0xf0137df4
f010f262:	e8 9e 0f ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010f267:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f010f26c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f26f:	74 17                	je     f010f288 <test_insert_sorted_allocList+0x363>
f010f271:	83 ec 04             	sub    $0x4,%esp
f010f274:	68 c8 7f 13 f0       	push   $0xf0137fc8
f010f279:	68 9f 00 00 00       	push   $0x9f
f010f27e:	68 f4 7d 13 f0       	push   $0xf0137df4
f010f283:	e8 7d 0f ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010f288:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f28f:	83 ec 0c             	sub    $0xc,%esp
f010f292:	ff 75 f0             	pushl  -0x10(%ebp)
f010f295:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f298:	50                   	push   %eax
f010f299:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010f29c:	50                   	push   %eax
f010f29d:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010f2a0:	50                   	push   %eax
f010f2a1:	68 44 b8 85 f0       	push   $0xf085b844
f010f2a6:	e8 0a 24 00 00       	call   f01116b5 <check_list_data>
f010f2ab:	83 c4 20             	add    $0x20,%esp
f010f2ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010f2b1:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010f2b5:	74 17                	je     f010f2ce <test_insert_sorted_allocList+0x3a9>
f010f2b7:	83 ec 04             	sub    $0x4,%esp
f010f2ba:	68 18 80 13 f0       	push   $0xf0138018
f010f2bf:	68 a4 00 00 00       	push   $0xa4
f010f2c4:	68 f4 7d 13 f0       	push   $0xf0137df4
f010f2c9:	e8 37 0f ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010f2ce:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f2d1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f2d4:	74 17                	je     f010f2ed <test_insert_sorted_allocList+0x3c8>
f010f2d6:	83 ec 04             	sub    $0x4,%esp
f010f2d9:	68 68 80 13 f0       	push   $0xf0138068
f010f2de:	68 a5 00 00 00       	push   $0xa5
f010f2e3:	68 f4 7d 13 f0       	push   $0xf0137df4
f010f2e8:	e8 18 0f ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//INSERT Scenario 5: Insert BLOCK_5 in the AllocMemBlocksList with sva not greater than the first block only
	//BLOCK_5 sva = 24K
	blocksToInsertSVAs[3] = 24*kilo;
f010f2ed:	c7 45 e4 00 60 00 00 	movl   $0x6000,-0x1c(%ebp)
	blocksToInsertSizes[3] = (4*kilo);
f010f2f4:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[3];
f010f2fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f2fe:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
	blockToInsert5.size = blocksToInsertSizes[3];
f010f304:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f307:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	insert_sorted_allocList(&blockToInsert5);
f010f30d:	83 ec 0c             	sub    $0xc,%esp
f010f310:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f010f316:	50                   	push   %eax
f010f317:	e8 10 34 02 00       	call   f013272c <insert_sorted_allocList>
f010f31c:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 5;
f010f31f:	c7 45 f0 05 00 00 00 	movl   $0x5,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010f326:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f010f32b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f32e:	74 17                	je     f010f347 <test_insert_sorted_allocList+0x422>
f010f330:	83 ec 04             	sub    $0x4,%esp
f010f333:	68 7c 7f 13 f0       	push   $0xf0137f7c
f010f338:	68 b3 00 00 00       	push   $0xb3
f010f33d:	68 f4 7d 13 f0       	push   $0xf0137df4
f010f342:	e8 be 0e ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010f347:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f010f34c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f34f:	74 17                	je     f010f368 <test_insert_sorted_allocList+0x443>
f010f351:	83 ec 04             	sub    $0x4,%esp
f010f354:	68 c8 7f 13 f0       	push   $0xf0137fc8
f010f359:	68 b6 00 00 00       	push   $0xb6
f010f35e:	68 f4 7d 13 f0       	push   $0xf0137df4
f010f363:	e8 9d 0e ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010f368:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f36f:	83 ec 0c             	sub    $0xc,%esp
f010f372:	ff 75 f0             	pushl  -0x10(%ebp)
f010f375:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f378:	50                   	push   %eax
f010f379:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010f37c:	50                   	push   %eax
f010f37d:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010f380:	50                   	push   %eax
f010f381:	68 44 b8 85 f0       	push   $0xf085b844
f010f386:	e8 2a 23 00 00       	call   f01116b5 <check_list_data>
f010f38b:	83 c4 20             	add    $0x20,%esp
f010f38e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010f391:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010f395:	74 17                	je     f010f3ae <test_insert_sorted_allocList+0x489>
f010f397:	83 ec 04             	sub    $0x4,%esp
f010f39a:	68 18 80 13 f0       	push   $0xf0138018
f010f39f:	68 bb 00 00 00       	push   $0xbb
f010f3a4:	68 f4 7d 13 f0       	push   $0xf0137df4
f010f3a9:	e8 57 0e ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010f3ae:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f3b1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f3b4:	74 17                	je     f010f3cd <test_insert_sorted_allocList+0x4a8>
f010f3b6:	83 ec 04             	sub    $0x4,%esp
f010f3b9:	68 68 80 13 f0       	push   $0xf0138068
f010f3be:	68 bc 00 00 00       	push   $0xbc
f010f3c3:	68 f4 7d 13 f0       	push   $0xf0137df4
f010f3c8:	e8 38 0e ff ff       	call   f0100205 <_panic>
	//====================================================================//
	//====================================================================//
	//show_list_content(&AllocMemBlocksList);

	cprintf("Congratulations!! test insert_sorted completed successfully.\n");
f010f3cd:	83 ec 0c             	sub    $0xc,%esp
f010f3d0:	68 04 81 13 f0       	push   $0xf0138104
f010f3d5:	e8 34 19 ff ff       	call   f0100d0e <cprintf>
f010f3da:	83 c4 10             	add    $0x10,%esp
}
f010f3dd:	90                   	nop
f010f3de:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010f3e1:	c9                   	leave  
f010f3e2:	c3                   	ret    

f010f3e3 <test_find_block>:

void test_find_block()
{
f010f3e3:	55                   	push   %ebp
f010f3e4:	89 e5                	mov    %esp,%ebp
f010f3e6:	57                   	push   %edi
f010f3e7:	56                   	push   %esi
f010f3e8:	53                   	push   %ebx
f010f3e9:	81 ec ac 00 00 00    	sub    $0xac,%esp
	uint32 numOfBlocks = 6;
f010f3ef:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f3f6:	83 ec 0c             	sub    $0xc,%esp
f010f3f9:	ff 75 e0             	pushl  -0x20(%ebp)
f010f3fc:	e8 d0 31 02 00       	call   f01325d1 <initialize_MemBlocksList>
f010f401:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&FreeMemBlocksList);
f010f404:	c7 05 e0 b8 85 f0 00 	movl   $0x0,0xf085b8e0
f010f40b:	00 00 00 
f010f40e:	c7 05 e4 b8 85 f0 00 	movl   $0x0,0xf085b8e4
f010f415:	00 00 00 
f010f418:	c7 05 ec b8 85 f0 00 	movl   $0x0,0xf085b8ec
f010f41f:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfAllocBlocks  6
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
f010f422:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010f425:	bb 7c 82 13 f0       	mov    $0xf013827c,%ebx
f010f42a:	ba 06 00 00 00       	mov    $0x6,%edx
f010f42f:	89 c7                	mov    %eax,%edi
f010f431:	89 de                	mov    %ebx,%esi
f010f433:	89 d1                	mov    %edx,%ecx
f010f435:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;
f010f437:	8d 45 ac             	lea    -0x54(%ebp),%eax
f010f43a:	bb 94 82 13 f0       	mov    $0xf0138294,%ebx
f010f43f:	ba 06 00 00 00       	mov    $0x6,%edx
f010f444:	89 c7                	mov    %eax,%edi
f010f446:	89 de                	mov    %ebx,%esi
f010f448:	89 d1                	mov    %edx,%ecx
f010f44a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&AllocMemBlocksList);
f010f44c:	c7 05 44 b8 85 f0 00 	movl   $0x0,0xf085b844
f010f453:	00 00 00 
f010f456:	c7 05 48 b8 85 f0 00 	movl   $0x0,0xf085b848
f010f45d:	00 00 00 
f010f460:	c7 05 50 b8 85 f0 00 	movl   $0x0,0xf085b850
f010f467:	00 00 00 
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010f46a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f471:	e9 5f 01 00 00       	jmp    f010f5d5 <test_find_block+0x1f2>
	{
		blockToInsert[i].sva = BlocksSVAs[i];
f010f476:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f479:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
f010f47d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f480:	c1 e2 04             	shl    $0x4,%edx
f010f483:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f486:	01 da                	add    %ebx,%edx
f010f488:	81 ea 94 00 00 00    	sub    $0x94,%edx
f010f48e:	89 02                	mov    %eax,(%edx)
		blockToInsert[i].size = BlocksSizes[i];
f010f490:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f493:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f010f497:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f49a:	c1 e2 04             	shl    $0x4,%edx
f010f49d:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f4a0:	01 f2                	add    %esi,%edx
f010f4a2:	81 ea 90 00 00 00    	sub    $0x90,%edx
f010f4a8:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f4aa:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f4ae:	0f 85 92 00 00 00    	jne    f010f546 <test_find_block+0x163>
			LIST_INSERT_HEAD(&AllocMemBlocksList, &(blockToInsert[i]));
f010f4b4:	a1 44 b8 85 f0       	mov    0xf085b844,%eax
f010f4b9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f4bc:	c1 e2 04             	shl    $0x4,%edx
f010f4bf:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f4c2:	01 fa                	add    %edi,%edx
f010f4c4:	81 ea 9c 00 00 00    	sub    $0x9c,%edx
f010f4ca:	89 02                	mov    %eax,(%edx)
f010f4cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4cf:	c1 e0 04             	shl    $0x4,%eax
f010f4d2:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f4d5:	01 d8                	add    %ebx,%eax
f010f4d7:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010f4dc:	8b 00                	mov    (%eax),%eax
f010f4de:	85 c0                	test   %eax,%eax
f010f4e0:	74 18                	je     f010f4fa <test_find_block+0x117>
f010f4e2:	a1 44 b8 85 f0       	mov    0xf085b844,%eax
f010f4e7:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010f4ed:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f4f0:	c1 e1 04             	shl    $0x4,%ecx
f010f4f3:	01 ca                	add    %ecx,%edx
f010f4f5:	89 50 04             	mov    %edx,0x4(%eax)
f010f4f8:	eb 13                	jmp    f010f50d <test_find_block+0x12a>
f010f4fa:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f500:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f503:	c1 e2 04             	shl    $0x4,%edx
f010f506:	01 d0                	add    %edx,%eax
f010f508:	a3 48 b8 85 f0       	mov    %eax,0xf085b848
f010f50d:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f513:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f516:	c1 e2 04             	shl    $0x4,%edx
f010f519:	01 d0                	add    %edx,%eax
f010f51b:	a3 44 b8 85 f0       	mov    %eax,0xf085b844
f010f520:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f523:	c1 e0 04             	shl    $0x4,%eax
f010f526:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f529:	01 f0                	add    %esi,%eax
f010f52b:	2d 98 00 00 00       	sub    $0x98,%eax
f010f530:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f536:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f010f53b:	40                   	inc    %eax
f010f53c:	a3 50 b8 85 f0       	mov    %eax,0xf085b850
f010f541:	e9 8c 00 00 00       	jmp    f010f5d2 <test_find_block+0x1ef>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
f010f546:	a1 48 b8 85 f0       	mov    0xf085b848,%eax
f010f54b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f54e:	c1 e2 04             	shl    $0x4,%edx
f010f551:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f554:	01 fa                	add    %edi,%edx
f010f556:	81 ea 98 00 00 00    	sub    $0x98,%edx
f010f55c:	89 02                	mov    %eax,(%edx)
f010f55e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f561:	c1 e0 04             	shl    $0x4,%eax
f010f564:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f567:	01 d8                	add    %ebx,%eax
f010f569:	2d 98 00 00 00       	sub    $0x98,%eax
f010f56e:	8b 00                	mov    (%eax),%eax
f010f570:	85 c0                	test   %eax,%eax
f010f572:	74 17                	je     f010f58b <test_find_block+0x1a8>
f010f574:	a1 48 b8 85 f0       	mov    0xf085b848,%eax
f010f579:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010f57f:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f582:	c1 e1 04             	shl    $0x4,%ecx
f010f585:	01 ca                	add    %ecx,%edx
f010f587:	89 10                	mov    %edx,(%eax)
f010f589:	eb 13                	jmp    f010f59e <test_find_block+0x1bb>
f010f58b:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f591:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f594:	c1 e2 04             	shl    $0x4,%edx
f010f597:	01 d0                	add    %edx,%eax
f010f599:	a3 44 b8 85 f0       	mov    %eax,0xf085b844
f010f59e:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f5a4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f5a7:	c1 e2 04             	shl    $0x4,%edx
f010f5aa:	01 d0                	add    %edx,%eax
f010f5ac:	a3 48 b8 85 f0       	mov    %eax,0xf085b848
f010f5b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f5b4:	c1 e0 04             	shl    $0x4,%eax
f010f5b7:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f5ba:	01 f0                	add    %esi,%eax
f010f5bc:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010f5c1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f5c7:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f010f5cc:	40                   	inc    %eax
f010f5cd:	a3 50 b8 85 f0       	mov    %eax,0xf085b850
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;

	LIST_INIT(&AllocMemBlocksList);
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010f5d2:	ff 45 e4             	incl   -0x1c(%ebp)
f010f5d5:	83 7d e4 05          	cmpl   $0x5,-0x1c(%ebp)
f010f5d9:	0f 8e 97 fe ff ff    	jle    f010f476 <test_find_block+0x93>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
	}

	/*FIND Scenario 1: Search for a block that doesn't exist (Block with SVA = 4KB)*/
	struct MemBlock * blockToFind = find_block(&AllocMemBlocksList, 0x1000);
f010f5df:	83 ec 08             	sub    $0x8,%esp
f010f5e2:	68 00 10 00 00       	push   $0x1000
f010f5e7:	68 44 b8 85 f0       	push   $0xf085b844
f010f5ec:	e8 c3 30 02 00       	call   f01326b4 <find_block>
f010f5f1:	83 c4 10             	add    $0x10,%esp
f010f5f4:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind != NULL)
f010f5f7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f5fb:	74 17                	je     f010f614 <test_find_block+0x231>
		panic("find_block: WRONG SEARCH - The block you searched for doesn't exist, however find_block find it.");
f010f5fd:	83 ec 04             	sub    $0x4,%esp
f010f600:	68 44 81 13 f0       	push   $0xf0138144
f010f605:	68 de 00 00 00       	push   $0xde
f010f60a:	68 f4 7d 13 f0       	push   $0xf0137df4
f010f60f:	e8 f1 0b ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 2: Search for a block exist @ the beginning (Block with SVA = 0KB)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x0);
f010f614:	83 ec 08             	sub    $0x8,%esp
f010f617:	6a 00                	push   $0x0
f010f619:	68 44 b8 85 f0       	push   $0xf085b844
f010f61e:	e8 91 30 02 00       	call   f01326b4 <find_block>
f010f623:	83 c4 10             	add    $0x10,%esp
f010f626:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 3*kilo || blockToFind->sva != 0x0)
f010f629:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f62d:	74 17                	je     f010f646 <test_find_block+0x263>
f010f62f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f632:	8b 40 0c             	mov    0xc(%eax),%eax
f010f635:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010f63a:	75 0a                	jne    f010f646 <test_find_block+0x263>
f010f63c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f63f:	8b 40 08             	mov    0x8(%eax),%eax
f010f642:	85 c0                	test   %eax,%eax
f010f644:	74 17                	je     f010f65d <test_find_block+0x27a>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f646:	83 ec 04             	sub    $0x4,%esp
f010f649:	68 a8 81 13 f0       	push   $0xf01381a8
f010f64e:	68 e3 00 00 00       	push   $0xe3
f010f653:	68 f4 7d 13 f0       	push   $0xf0137df4
f010f658:	e8 a8 0b ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 3: Search for a block exist @ the mid (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x7000);
f010f65d:	83 ec 08             	sub    $0x8,%esp
f010f660:	68 00 70 00 00       	push   $0x7000
f010f665:	68 44 b8 85 f0       	push   $0xf085b844
f010f66a:	e8 45 30 02 00       	call   f01326b4 <find_block>
f010f66f:	83 c4 10             	add    $0x10,%esp
f010f672:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 9*kilo || blockToFind->sva != 0x7000)
f010f675:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f679:	74 1a                	je     f010f695 <test_find_block+0x2b2>
f010f67b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f67e:	8b 40 0c             	mov    0xc(%eax),%eax
f010f681:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010f686:	75 0d                	jne    f010f695 <test_find_block+0x2b2>
f010f688:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f68b:	8b 40 08             	mov    0x8(%eax),%eax
f010f68e:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f693:	74 17                	je     f010f6ac <test_find_block+0x2c9>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f695:	83 ec 04             	sub    $0x4,%esp
f010f698:	68 a8 81 13 f0       	push   $0xf01381a8
f010f69d:	68 e8 00 00 00       	push   $0xe8
f010f6a2:	68 f4 7d 13 f0       	push   $0xf0137df4
f010f6a7:	e8 59 0b ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 4: Search for a block exist @ the end (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x1A400);
f010f6ac:	83 ec 08             	sub    $0x8,%esp
f010f6af:	68 00 a4 01 00       	push   $0x1a400
f010f6b4:	68 44 b8 85 f0       	push   $0xf085b844
f010f6b9:	e8 f6 2f 02 00       	call   f01326b4 <find_block>
f010f6be:	83 c4 10             	add    $0x10,%esp
f010f6c1:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 2*Mega || blockToFind->sva != 0x1A400)
f010f6c4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f6c8:	74 1a                	je     f010f6e4 <test_find_block+0x301>
f010f6ca:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f6cd:	8b 40 0c             	mov    0xc(%eax),%eax
f010f6d0:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010f6d5:	75 0d                	jne    f010f6e4 <test_find_block+0x301>
f010f6d7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f6da:	8b 40 08             	mov    0x8(%eax),%eax
f010f6dd:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f6e2:	74 17                	je     f010f6fb <test_find_block+0x318>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f6e4:	83 ec 04             	sub    $0x4,%esp
f010f6e7:	68 a8 81 13 f0       	push   $0xf01381a8
f010f6ec:	68 ed 00 00 00       	push   $0xed
f010f6f1:	68 f4 7d 13 f0       	push   $0xf0137df4
f010f6f6:	e8 0a 0b ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList & FreeMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 0 )
f010f6fb:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f010f700:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f703:	75 09                	jne    f010f70e <test_find_block+0x32b>
f010f705:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f010f70a:	85 c0                	test   %eax,%eax
f010f70c:	74 17                	je     f010f725 <test_find_block+0x342>
	{
		panic("find_block: AvailableMemBlocksList and FreeMemBlocksList are affected and this shall not occurred.");
f010f70e:	83 ec 04             	sub    $0x4,%esp
f010f711:	68 dc 81 13 f0       	push   $0xf01381dc
f010f716:	68 f2 00 00 00       	push   $0xf2
f010f71b:	68 f4 7d 13 f0       	push   $0xf0137df4
f010f720:	e8 e0 0a ff ff       	call   f0100205 <_panic>
	}

	//show_list_content(&AllocMemBlocksList);
	cprintf("Congratulations!! test find_block completed successfully.\n");
f010f725:	83 ec 0c             	sub    $0xc,%esp
f010f728:	68 40 82 13 f0       	push   $0xf0138240
f010f72d:	e8 dc 15 ff ff       	call   f0100d0e <cprintf>
f010f732:	83 c4 10             	add    $0x10,%esp
}
f010f735:	90                   	nop
f010f736:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f739:	5b                   	pop    %ebx
f010f73a:	5e                   	pop    %esi
f010f73b:	5f                   	pop    %edi
f010f73c:	5d                   	pop    %ebp
f010f73d:	c3                   	ret    

f010f73e <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010f73e:	55                   	push   %ebp
f010f73f:	89 e5                	mov    %esp,%ebp
f010f741:	57                   	push   %edi
f010f742:	56                   	push   %esi
f010f743:	53                   	push   %ebx
f010f744:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010f74a:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f751:	83 ec 0c             	sub    $0xc,%esp
f010f754:	ff 75 e0             	pushl  -0x20(%ebp)
f010f757:	e8 75 2e 02 00       	call   f01325d1 <initialize_MemBlocksList>
f010f75c:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f75f:	c7 05 44 b8 85 f0 00 	movl   $0x0,0xf085b844
f010f766:	00 00 00 
f010f769:	c7 05 48 b8 85 f0 00 	movl   $0x0,0xf085b848
f010f770:	00 00 00 
f010f773:	c7 05 50 b8 85 f0 00 	movl   $0x0,0xf085b850
f010f77a:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_FF  8
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010f77d:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f780:	bb 20 85 13 f0       	mov    $0xf0138520,%ebx
f010f785:	ba 08 00 00 00       	mov    $0x8,%edx
f010f78a:	89 c7                	mov    %eax,%edi
f010f78c:	89 de                	mov    %ebx,%esi
f010f78e:	89 d1                	mov    %edx,%ecx
f010f790:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;
f010f792:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f795:	bb 40 85 13 f0       	mov    $0xf0138540,%ebx
f010f79a:	ba 08 00 00 00       	mov    $0x8,%edx
f010f79f:	89 c7                	mov    %eax,%edi
f010f7a1:	89 de                	mov    %ebx,%esi
f010f7a3:	89 d1                	mov    %edx,%ecx
f010f7a5:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010f7a7:	c7 05 e0 b8 85 f0 00 	movl   $0x0,0xf085b8e0
f010f7ae:	00 00 00 
f010f7b1:	c7 05 e4 b8 85 f0 00 	movl   $0x0,0xf085b8e4
f010f7b8:	00 00 00 
f010f7bb:	c7 05 ec b8 85 f0 00 	movl   $0x0,0xf085b8ec
f010f7c2:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010f7c5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f7cc:	e9 5f 01 00 00       	jmp    f010f930 <test_alloc_block_FF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010f7d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f7d4:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010f7d8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f7db:	c1 e2 04             	shl    $0x4,%edx
f010f7de:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f7e1:	01 da                	add    %ebx,%edx
f010f7e3:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010f7e9:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010f7eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f7ee:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010f7f2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f7f5:	c1 e2 04             	shl    $0x4,%edx
f010f7f8:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f7fb:	01 f2                	add    %esi,%edx
f010f7fd:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010f803:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f805:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f809:	0f 85 92 00 00 00    	jne    f010f8a1 <test_alloc_block_FF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010f80f:	a1 e0 b8 85 f0       	mov    0xf085b8e0,%eax
f010f814:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f817:	c1 e2 04             	shl    $0x4,%edx
f010f81a:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f81d:	01 fa                	add    %edi,%edx
f010f81f:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010f825:	89 02                	mov    %eax,(%edx)
f010f827:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f82a:	c1 e0 04             	shl    $0x4,%eax
f010f82d:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f830:	01 d8                	add    %ebx,%eax
f010f832:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f837:	8b 00                	mov    (%eax),%eax
f010f839:	85 c0                	test   %eax,%eax
f010f83b:	74 18                	je     f010f855 <test_alloc_block_FF+0x117>
f010f83d:	a1 e0 b8 85 f0       	mov    0xf085b8e0,%eax
f010f842:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f848:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f84b:	c1 e1 04             	shl    $0x4,%ecx
f010f84e:	01 ca                	add    %ecx,%edx
f010f850:	89 50 04             	mov    %edx,0x4(%eax)
f010f853:	eb 13                	jmp    f010f868 <test_alloc_block_FF+0x12a>
f010f855:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f85b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f85e:	c1 e2 04             	shl    $0x4,%edx
f010f861:	01 d0                	add    %edx,%eax
f010f863:	a3 e4 b8 85 f0       	mov    %eax,0xf085b8e4
f010f868:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f86e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f871:	c1 e2 04             	shl    $0x4,%edx
f010f874:	01 d0                	add    %edx,%eax
f010f876:	a3 e0 b8 85 f0       	mov    %eax,0xf085b8e0
f010f87b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f87e:	c1 e0 04             	shl    $0x4,%eax
f010f881:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f884:	01 f0                	add    %esi,%eax
f010f886:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f88b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f891:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f010f896:	40                   	inc    %eax
f010f897:	a3 ec b8 85 f0       	mov    %eax,0xf085b8ec
f010f89c:	e9 8c 00 00 00       	jmp    f010f92d <test_alloc_block_FF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010f8a1:	a1 e4 b8 85 f0       	mov    0xf085b8e4,%eax
f010f8a6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f8a9:	c1 e2 04             	shl    $0x4,%edx
f010f8ac:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f8af:	01 fa                	add    %edi,%edx
f010f8b1:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010f8b7:	89 02                	mov    %eax,(%edx)
f010f8b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f8bc:	c1 e0 04             	shl    $0x4,%eax
f010f8bf:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f8c2:	01 d8                	add    %ebx,%eax
f010f8c4:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f8c9:	8b 00                	mov    (%eax),%eax
f010f8cb:	85 c0                	test   %eax,%eax
f010f8cd:	74 17                	je     f010f8e6 <test_alloc_block_FF+0x1a8>
f010f8cf:	a1 e4 b8 85 f0       	mov    0xf085b8e4,%eax
f010f8d4:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f8da:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f8dd:	c1 e1 04             	shl    $0x4,%ecx
f010f8e0:	01 ca                	add    %ecx,%edx
f010f8e2:	89 10                	mov    %edx,(%eax)
f010f8e4:	eb 13                	jmp    f010f8f9 <test_alloc_block_FF+0x1bb>
f010f8e6:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f8ec:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f8ef:	c1 e2 04             	shl    $0x4,%edx
f010f8f2:	01 d0                	add    %edx,%eax
f010f8f4:	a3 e0 b8 85 f0       	mov    %eax,0xf085b8e0
f010f8f9:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f8ff:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f902:	c1 e2 04             	shl    $0x4,%edx
f010f905:	01 d0                	add    %edx,%eax
f010f907:	a3 e4 b8 85 f0       	mov    %eax,0xf085b8e4
f010f90c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f90f:	c1 e0 04             	shl    $0x4,%eax
f010f912:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f915:	01 f0                	add    %esi,%eax
f010f917:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f91c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f922:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f010f927:	40                   	inc    %eax
f010f928:	a3 ec b8 85 f0       	mov    %eax,0xf085b8ec
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010f92d:	ff 45 e4             	incl   -0x1c(%ebp)
f010f930:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010f934:	0f 8e 97 fe ff ff    	jle    f010f7d1 <test_alloc_block_FF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_FF(3*Mega);
f010f93a:	83 ec 0c             	sub    $0xc,%esp
f010f93d:	68 00 00 30 00       	push   $0x300000
f010f942:	e8 d3 2f 02 00       	call   f013291a <alloc_block_FF>
f010f947:	83 c4 10             	add    $0x10,%esp
f010f94a:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.");
f010f94d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f951:	74 17                	je     f010f96a <test_alloc_block_FF+0x22c>
f010f953:	83 ec 04             	sub    $0x4,%esp
f010f956:	68 ac 82 13 f0       	push   $0xf01382ac
f010f95b:	68 15 01 00 00       	push   $0x115
f010f960:	68 f4 7d 13 f0       	push   $0xf0137df4
f010f965:	e8 9b 08 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f96a:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f010f96f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f972:	75 13                	jne    f010f987 <test_alloc_block_FF+0x249>
f010f974:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f010f979:	83 f8 08             	cmp    $0x8,%eax
f010f97c:	75 09                	jne    f010f987 <test_alloc_block_FF+0x249>
f010f97e:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f010f983:	85 c0                	test   %eax,%eax
f010f985:	74 17                	je     f010f99e <test_alloc_block_FF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f987:	83 ec 04             	sub    $0x4,%esp
f010f98a:	68 20 83 13 f0       	push   $0xf0138320
f010f98f:	68 19 01 00 00       	push   $0x119
f010f994:	68 f4 7d 13 f0       	push   $0xf0137df4
f010f999:	e8 67 08 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(9*kilo);
f010f99e:	83 ec 0c             	sub    $0xc,%esp
f010f9a1:	68 00 24 00 00       	push   $0x2400
f010f9a6:	e8 6f 2f 02 00       	call   f013291a <alloc_block_FF>
f010f9ab:	83 c4 10             	add    $0x10,%esp
f010f9ae:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 9*kilo || blockToAlloc->sva != 0x7000)
f010f9b1:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f9b5:	74 1a                	je     f010f9d1 <test_alloc_block_FF+0x293>
f010f9b7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f9ba:	8b 40 0c             	mov    0xc(%eax),%eax
f010f9bd:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010f9c2:	75 0d                	jne    f010f9d1 <test_alloc_block_FF+0x293>
f010f9c4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f9c7:	8b 40 08             	mov    0x8(%eax),%eax
f010f9ca:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f9cf:	74 17                	je     f010f9e8 <test_alloc_block_FF+0x2aa>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010f9d1:	83 ec 04             	sub    $0x4,%esp
f010f9d4:	68 98 83 13 f0       	push   $0xf0138398
f010f9d9:	68 21 01 00 00       	push   $0x121
f010f9de:	68 f4 7d 13 f0       	push   $0xf0137df4
f010f9e3:	e8 1d 08 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f9e8:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f010f9ed:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f9f0:	75 13                	jne    f010fa05 <test_alloc_block_FF+0x2c7>
f010f9f2:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f010f9f7:	83 f8 07             	cmp    $0x7,%eax
f010f9fa:	75 09                	jne    f010fa05 <test_alloc_block_FF+0x2c7>
f010f9fc:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f010fa01:	85 c0                	test   %eax,%eax
f010fa03:	74 17                	je     f010fa1c <test_alloc_block_FF+0x2de>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fa05:	83 ec 04             	sub    $0x4,%esp
f010fa08:	68 dc 83 13 f0       	push   $0xf01383dc
f010fa0d:	68 25 01 00 00       	push   $0x125
f010fa12:	68 f4 7d 13 f0       	push   $0xf0137df4
f010fa17:	e8 e9 07 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010fa1c:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fa23:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_FF-1;
f010fa26:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010fa2d:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010fa34:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fa3b:	83 ec 0c             	sub    $0xc,%esp
f010fa3e:	ff 75 d8             	pushl  -0x28(%ebp)
f010fa41:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010fa47:	50                   	push   %eax
f010fa48:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fa4b:	50                   	push   %eax
f010fa4c:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fa4f:	50                   	push   %eax
f010fa50:	68 e0 b8 85 f0       	push   $0xf085b8e0
f010fa55:	e8 5b 1c 00 00       	call   f01116b5 <check_list_data>
f010fa5a:	83 c4 20             	add    $0x20,%esp
f010fa5d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010fa60:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fa64:	74 17                	je     f010fa7d <test_alloc_block_FF+0x33f>
f010fa66:	83 ec 04             	sub    $0x4,%esp
f010fa69:	68 40 84 13 f0       	push   $0xf0138440
f010fa6e:	68 2d 01 00 00       	push   $0x12d
f010fa73:	68 f4 7d 13 f0       	push   $0xf0137df4
f010fa78:	e8 88 07 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010fa7d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fa83:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fa86:	74 17                	je     f010fa9f <test_alloc_block_FF+0x361>
f010fa88:	83 ec 04             	sub    $0x4,%esp
f010fa8b:	68 8c 84 13 f0       	push   $0xf013848c
f010fa90:	68 2e 01 00 00       	push   $0x12e
f010fa95:	68 f4 7d 13 f0       	push   $0xf0137df4
f010fa9a:	e8 66 07 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(1*Mega);
f010fa9f:	83 ec 0c             	sub    $0xc,%esp
f010faa2:	68 00 00 10 00       	push   $0x100000
f010faa7:	e8 6e 2e 02 00       	call   f013291a <alloc_block_FF>
f010faac:	83 c4 10             	add    $0x10,%esp
f010faaf:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010fab2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fab6:	74 1a                	je     f010fad2 <test_alloc_block_FF+0x394>
f010fab8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fabb:	8b 40 0c             	mov    0xc(%eax),%eax
f010fabe:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010fac3:	75 0d                	jne    f010fad2 <test_alloc_block_FF+0x394>
f010fac5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fac8:	8b 40 08             	mov    0x8(%eax),%eax
f010facb:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010fad0:	74 17                	je     f010fae9 <test_alloc_block_FF+0x3ab>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010fad2:	83 ec 04             	sub    $0x4,%esp
f010fad5:	68 98 83 13 f0       	push   $0xf0138398
f010fada:	68 36 01 00 00       	push   $0x136
f010fadf:	68 f4 7d 13 f0       	push   $0xf0137df4
f010fae4:	e8 1c 07 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fae9:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f010faee:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010faf1:	4a                   	dec    %edx
f010faf2:	39 d0                	cmp    %edx,%eax
f010faf4:	75 13                	jne    f010fb09 <test_alloc_block_FF+0x3cb>
f010faf6:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f010fafb:	83 f8 07             	cmp    $0x7,%eax
f010fafe:	75 09                	jne    f010fb09 <test_alloc_block_FF+0x3cb>
f010fb00:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f010fb05:	85 c0                	test   %eax,%eax
f010fb07:	74 17                	je     f010fb20 <test_alloc_block_FF+0x3e2>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fb09:	83 ec 04             	sub    $0x4,%esp
f010fb0c:	68 dc 83 13 f0       	push   $0xf01383dc
f010fb11:	68 3a 01 00 00       	push   $0x13a
f010fb16:	68 f4 7d 13 f0       	push   $0xf0137df4
f010fb1b:	e8 e5 06 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fb20:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fb27:	00 00 00 
	actualSize = numOfFreeBlocks_FF-1;
f010fb2a:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010fb31:	c7 45 c8 00 a4 11 00 	movl   $0x11a400,-0x38(%ebp)
	BlocksSizes[5] = 1*Mega;
f010fb38:	c7 45 a8 00 00 10 00 	movl   $0x100000,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fb3f:	83 ec 0c             	sub    $0xc,%esp
f010fb42:	ff 75 d8             	pushl  -0x28(%ebp)
f010fb45:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010fb4b:	50                   	push   %eax
f010fb4c:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fb4f:	50                   	push   %eax
f010fb50:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010fb53:	50                   	push   %eax
f010fb54:	68 e0 b8 85 f0       	push   $0xf085b8e0
f010fb59:	e8 57 1b 00 00       	call   f01116b5 <check_list_data>
f010fb5e:	83 c4 20             	add    $0x20,%esp
f010fb61:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010fb64:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fb68:	74 17                	je     f010fb81 <test_alloc_block_FF+0x443>
f010fb6a:	83 ec 04             	sub    $0x4,%esp
f010fb6d:	68 40 84 13 f0       	push   $0xf0138440
f010fb72:	68 42 01 00 00       	push   $0x142
f010fb77:	68 f4 7d 13 f0       	push   $0xf0137df4
f010fb7c:	e8 84 06 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010fb81:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fb87:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fb8a:	74 17                	je     f010fba3 <test_alloc_block_FF+0x465>
f010fb8c:	83 ec 04             	sub    $0x4,%esp
f010fb8f:	68 8c 84 13 f0       	push   $0xf013848c
f010fb94:	68 43 01 00 00       	push   $0x143
f010fb99:	68 f4 7d 13 f0       	push   $0xf0137df4
f010fb9e:	e8 62 06 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_FF completed successfully.\n");
f010fba3:	83 ec 0c             	sub    $0xc,%esp
f010fba6:	68 d8 84 13 f0       	push   $0xf01384d8
f010fbab:	e8 5e 11 ff ff       	call   f0100d0e <cprintf>
f010fbb0:	83 c4 10             	add    $0x10,%esp
}
f010fbb3:	90                   	nop
f010fbb4:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010fbb7:	5b                   	pop    %ebx
f010fbb8:	5e                   	pop    %esi
f010fbb9:	5f                   	pop    %edi
f010fbba:	5d                   	pop    %ebp
f010fbbb:	c3                   	ret    

f010fbbc <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010fbbc:	55                   	push   %ebp
f010fbbd:	89 e5                	mov    %esp,%ebp
f010fbbf:	57                   	push   %edi
f010fbc0:	56                   	push   %esi
f010fbc1:	53                   	push   %ebx
f010fbc2:	81 ec cc 00 00 00    	sub    $0xcc,%esp
	uint32 numOfBlocks = 10;
f010fbc8:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010fbcf:	83 ec 0c             	sub    $0xc,%esp
f010fbd2:	ff 75 e0             	pushl  -0x20(%ebp)
f010fbd5:	e8 f7 29 02 00       	call   f01325d1 <initialize_MemBlocksList>
f010fbda:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010fbdd:	c7 05 44 b8 85 f0 00 	movl   $0x0,0xf085b844
f010fbe4:	00 00 00 
f010fbe7:	c7 05 48 b8 85 f0 00 	movl   $0x0,0xf085b848
f010fbee:	00 00 00 
f010fbf1:	c7 05 50 b8 85 f0 00 	movl   $0x0,0xf085b850
f010fbf8:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_BF 7
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
f010fbfb:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fbfe:	bb 54 87 13 f0       	mov    $0xf0138754,%ebx
f010fc03:	ba 07 00 00 00       	mov    $0x7,%edx
f010fc08:	89 c7                	mov    %eax,%edi
f010fc0a:	89 de                	mov    %ebx,%esi
f010fc0c:	89 d1                	mov    %edx,%ecx
f010fc0e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;
f010fc10:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fc13:	bb 70 87 13 f0       	mov    $0xf0138770,%ebx
f010fc18:	ba 07 00 00 00       	mov    $0x7,%edx
f010fc1d:	89 c7                	mov    %eax,%edi
f010fc1f:	89 de                	mov    %ebx,%esi
f010fc21:	89 d1                	mov    %edx,%ecx
f010fc23:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010fc25:	c7 05 e0 b8 85 f0 00 	movl   $0x0,0xf085b8e0
f010fc2c:	00 00 00 
f010fc2f:	c7 05 e4 b8 85 f0 00 	movl   $0x0,0xf085b8e4
f010fc36:	00 00 00 
f010fc39:	c7 05 ec b8 85 f0 00 	movl   $0x0,0xf085b8ec
f010fc40:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010fc43:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010fc4a:	e9 5f 01 00 00       	jmp    f010fdae <test_alloc_block_BF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010fc4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fc52:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f010fc56:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fc59:	c1 e2 04             	shl    $0x4,%edx
f010fc5c:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fc5f:	01 da                	add    %ebx,%edx
f010fc61:	81 ea b4 00 00 00    	sub    $0xb4,%edx
f010fc67:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010fc69:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fc6c:	8b 44 85 9c          	mov    -0x64(%ebp,%eax,4),%eax
f010fc70:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fc73:	c1 e2 04             	shl    $0x4,%edx
f010fc76:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fc79:	01 f2                	add    %esi,%edx
f010fc7b:	81 ea b0 00 00 00    	sub    $0xb0,%edx
f010fc81:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010fc83:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010fc87:	0f 85 92 00 00 00    	jne    f010fd1f <test_alloc_block_BF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010fc8d:	a1 e0 b8 85 f0       	mov    0xf085b8e0,%eax
f010fc92:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fc95:	c1 e2 04             	shl    $0x4,%edx
f010fc98:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010fc9b:	01 fa                	add    %edi,%edx
f010fc9d:	81 ea bc 00 00 00    	sub    $0xbc,%edx
f010fca3:	89 02                	mov    %eax,(%edx)
f010fca5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fca8:	c1 e0 04             	shl    $0x4,%eax
f010fcab:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fcae:	01 d8                	add    %ebx,%eax
f010fcb0:	2d bc 00 00 00       	sub    $0xbc,%eax
f010fcb5:	8b 00                	mov    (%eax),%eax
f010fcb7:	85 c0                	test   %eax,%eax
f010fcb9:	74 18                	je     f010fcd3 <test_alloc_block_BF+0x117>
f010fcbb:	a1 e0 b8 85 f0       	mov    0xf085b8e0,%eax
f010fcc0:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010fcc6:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010fcc9:	c1 e1 04             	shl    $0x4,%ecx
f010fccc:	01 ca                	add    %ecx,%edx
f010fcce:	89 50 04             	mov    %edx,0x4(%eax)
f010fcd1:	eb 13                	jmp    f010fce6 <test_alloc_block_BF+0x12a>
f010fcd3:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010fcd9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fcdc:	c1 e2 04             	shl    $0x4,%edx
f010fcdf:	01 d0                	add    %edx,%eax
f010fce1:	a3 e4 b8 85 f0       	mov    %eax,0xf085b8e4
f010fce6:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010fcec:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fcef:	c1 e2 04             	shl    $0x4,%edx
f010fcf2:	01 d0                	add    %edx,%eax
f010fcf4:	a3 e0 b8 85 f0       	mov    %eax,0xf085b8e0
f010fcf9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fcfc:	c1 e0 04             	shl    $0x4,%eax
f010fcff:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fd02:	01 f0                	add    %esi,%eax
f010fd04:	2d b8 00 00 00       	sub    $0xb8,%eax
f010fd09:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010fd0f:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f010fd14:	40                   	inc    %eax
f010fd15:	a3 ec b8 85 f0       	mov    %eax,0xf085b8ec
f010fd1a:	e9 8c 00 00 00       	jmp    f010fdab <test_alloc_block_BF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010fd1f:	a1 e4 b8 85 f0       	mov    0xf085b8e4,%eax
f010fd24:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fd27:	c1 e2 04             	shl    $0x4,%edx
f010fd2a:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010fd2d:	01 fa                	add    %edi,%edx
f010fd2f:	81 ea b8 00 00 00    	sub    $0xb8,%edx
f010fd35:	89 02                	mov    %eax,(%edx)
f010fd37:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fd3a:	c1 e0 04             	shl    $0x4,%eax
f010fd3d:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fd40:	01 d8                	add    %ebx,%eax
f010fd42:	2d b8 00 00 00       	sub    $0xb8,%eax
f010fd47:	8b 00                	mov    (%eax),%eax
f010fd49:	85 c0                	test   %eax,%eax
f010fd4b:	74 17                	je     f010fd64 <test_alloc_block_BF+0x1a8>
f010fd4d:	a1 e4 b8 85 f0       	mov    0xf085b8e4,%eax
f010fd52:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010fd58:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010fd5b:	c1 e1 04             	shl    $0x4,%ecx
f010fd5e:	01 ca                	add    %ecx,%edx
f010fd60:	89 10                	mov    %edx,(%eax)
f010fd62:	eb 13                	jmp    f010fd77 <test_alloc_block_BF+0x1bb>
f010fd64:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010fd6a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fd6d:	c1 e2 04             	shl    $0x4,%edx
f010fd70:	01 d0                	add    %edx,%eax
f010fd72:	a3 e0 b8 85 f0       	mov    %eax,0xf085b8e0
f010fd77:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010fd7d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fd80:	c1 e2 04             	shl    $0x4,%edx
f010fd83:	01 d0                	add    %edx,%eax
f010fd85:	a3 e4 b8 85 f0       	mov    %eax,0xf085b8e4
f010fd8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fd8d:	c1 e0 04             	shl    $0x4,%eax
f010fd90:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fd93:	01 f0                	add    %esi,%eax
f010fd95:	2d bc 00 00 00       	sub    $0xbc,%eax
f010fd9a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010fda0:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f010fda5:	40                   	inc    %eax
f010fda6:	a3 ec b8 85 f0       	mov    %eax,0xf085b8ec
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010fdab:	ff 45 e4             	incl   -0x1c(%ebp)
f010fdae:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f010fdb2:	0f 8e 97 fe ff ff    	jle    f010fc4f <test_alloc_block_BF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_BF(4*Mega);
f010fdb8:	83 ec 0c             	sub    $0xc,%esp
f010fdbb:	68 00 00 40 00       	push   $0x400000
f010fdc0:	e8 22 2d 02 00       	call   f0132ae7 <alloc_block_BF>
f010fdc5:	83 c4 10             	add    $0x10,%esp
f010fdc8:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.");
f010fdcb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fdcf:	74 17                	je     f010fde8 <test_alloc_block_BF+0x22c>
f010fdd1:	83 ec 04             	sub    $0x4,%esp
f010fdd4:	68 60 85 13 f0       	push   $0xf0138560
f010fdd9:	68 66 01 00 00       	push   $0x166
f010fdde:	68 f4 7d 13 f0       	push   $0xf0137df4
f010fde3:	e8 1d 04 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fde8:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f010fded:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fdf0:	75 13                	jne    f010fe05 <test_alloc_block_BF+0x249>
f010fdf2:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f010fdf7:	83 f8 07             	cmp    $0x7,%eax
f010fdfa:	75 09                	jne    f010fe05 <test_alloc_block_BF+0x249>
f010fdfc:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f010fe01:	85 c0                	test   %eax,%eax
f010fe03:	74 17                	je     f010fe1c <test_alloc_block_BF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010fe05:	83 ec 04             	sub    $0x4,%esp
f010fe08:	68 20 83 13 f0       	push   $0xf0138320
f010fe0d:	68 6a 01 00 00       	push   $0x16a
f010fe12:	68 f4 7d 13 f0       	push   $0xf0137df4
f010fe17:	e8 e9 03 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (NOT THE FIRST BLOCK FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010fe1c:	83 ec 0c             	sub    $0xc,%esp
f010fe1f:	68 00 00 10 00       	push   $0x100000
f010fe24:	e8 be 2c 02 00       	call   f0132ae7 <alloc_block_BF>
f010fe29:	83 c4 10             	add    $0x10,%esp
f010fe2c:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x21B400)
f010fe2f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fe33:	74 1a                	je     f010fe4f <test_alloc_block_BF+0x293>
f010fe35:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fe38:	8b 40 0c             	mov    0xc(%eax),%eax
f010fe3b:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010fe40:	75 0d                	jne    f010fe4f <test_alloc_block_BF+0x293>
f010fe42:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fe45:	8b 40 08             	mov    0x8(%eax),%eax
f010fe48:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010fe4d:	74 17                	je     f010fe66 <test_alloc_block_BF+0x2aa>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010fe4f:	83 ec 04             	sub    $0x4,%esp
f010fe52:	68 d4 85 13 f0       	push   $0xf01385d4
f010fe57:	68 72 01 00 00       	push   $0x172
f010fe5c:	68 f4 7d 13 f0       	push   $0xf0137df4
f010fe61:	e8 9f 03 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fe66:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f010fe6b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fe6e:	75 13                	jne    f010fe83 <test_alloc_block_BF+0x2c7>
f010fe70:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f010fe75:	83 f8 06             	cmp    $0x6,%eax
f010fe78:	75 09                	jne    f010fe83 <test_alloc_block_BF+0x2c7>
f010fe7a:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f010fe7f:	85 c0                	test   %eax,%eax
f010fe81:	74 17                	je     f010fe9a <test_alloc_block_BF+0x2de>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fe83:	83 ec 04             	sub    $0x4,%esp
f010fe86:	68 18 86 13 f0       	push   $0xf0138618
f010fe8b:	68 76 01 00 00       	push   $0x176
f010fe90:	68 f4 7d 13 f0       	push   $0xf0137df4
f010fe95:	e8 6b 03 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010fe9a:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010fea1:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_BF-1;
f010fea4:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0;
f010feab:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	BlocksSizes[6] = 0;
f010feb2:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010feb9:	83 ec 0c             	sub    $0xc,%esp
f010febc:	ff 75 d8             	pushl  -0x28(%ebp)
f010febf:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010fec5:	50                   	push   %eax
f010fec6:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fec9:	50                   	push   %eax
f010feca:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fecd:	50                   	push   %eax
f010fece:	68 e0 b8 85 f0       	push   $0xf085b8e0
f010fed3:	e8 dd 17 00 00       	call   f01116b5 <check_list_data>
f010fed8:	83 c4 20             	add    $0x20,%esp
f010fedb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010fede:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fee2:	74 17                	je     f010fefb <test_alloc_block_BF+0x33f>
f010fee4:	83 ec 04             	sub    $0x4,%esp
f010fee7:	68 7c 86 13 f0       	push   $0xf013867c
f010feec:	68 7e 01 00 00       	push   $0x17e
f010fef1:	68 f4 7d 13 f0       	push   $0xf0137df4
f010fef6:	e8 0a 03 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010fefb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010ff01:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ff04:	74 17                	je     f010ff1d <test_alloc_block_BF+0x361>
f010ff06:	83 ec 04             	sub    $0x4,%esp
f010ff09:	68 c8 86 13 f0       	push   $0xf01386c8
f010ff0e:	68 7f 01 00 00       	push   $0x17f
f010ff13:	68 f4 7d 13 f0       	push   $0xf0137df4
f010ff18:	e8 e8 02 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of any existing free block (ONLY ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010ff1d:	83 ec 0c             	sub    $0xc,%esp
f010ff20:	68 00 00 10 00       	push   $0x100000
f010ff25:	e8 bd 2b 02 00       	call   f0132ae7 <alloc_block_BF>
f010ff2a:	83 c4 10             	add    $0x10,%esp
f010ff2d:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010ff30:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ff34:	74 1a                	je     f010ff50 <test_alloc_block_BF+0x394>
f010ff36:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ff39:	8b 40 0c             	mov    0xc(%eax),%eax
f010ff3c:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010ff41:	75 0d                	jne    f010ff50 <test_alloc_block_BF+0x394>
f010ff43:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ff46:	8b 40 08             	mov    0x8(%eax),%eax
f010ff49:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010ff4e:	74 17                	je     f010ff67 <test_alloc_block_BF+0x3ab>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010ff50:	83 ec 04             	sub    $0x4,%esp
f010ff53:	68 d4 85 13 f0       	push   $0xf01385d4
f010ff58:	68 87 01 00 00       	push   $0x187
f010ff5d:	68 f4 7d 13 f0       	push   $0xf0137df4
f010ff62:	e8 9e 02 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ff67:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f010ff6c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010ff6f:	4a                   	dec    %edx
f010ff70:	39 d0                	cmp    %edx,%eax
f010ff72:	75 13                	jne    f010ff87 <test_alloc_block_BF+0x3cb>
f010ff74:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f010ff79:	83 f8 06             	cmp    $0x6,%eax
f010ff7c:	75 09                	jne    f010ff87 <test_alloc_block_BF+0x3cb>
f010ff7e:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f010ff83:	85 c0                	test   %eax,%eax
f010ff85:	74 17                	je     f010ff9e <test_alloc_block_BF+0x3e2>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ff87:	83 ec 04             	sub    $0x4,%esp
f010ff8a:	68 18 86 13 f0       	push   $0xf0138618
f010ff8f:	68 8b 01 00 00       	push   $0x18b
f010ff94:	68 f4 7d 13 f0       	push   $0xf0137df4
f010ff99:	e8 67 02 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010ff9e:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010ffa5:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010ffa8:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010ffaf:	c7 45 cc 00 a4 11 00 	movl   $0x11a400,-0x34(%ebp)
	BlocksSizes[5] = 1*Mega;
f010ffb6:	c7 45 b0 00 00 10 00 	movl   $0x100000,-0x50(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ffbd:	83 ec 0c             	sub    $0xc,%esp
f010ffc0:	ff 75 d8             	pushl  -0x28(%ebp)
f010ffc3:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010ffc9:	50                   	push   %eax
f010ffca:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010ffcd:	50                   	push   %eax
f010ffce:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010ffd1:	50                   	push   %eax
f010ffd2:	68 e0 b8 85 f0       	push   $0xf085b8e0
f010ffd7:	e8 d9 16 00 00       	call   f01116b5 <check_list_data>
f010ffdc:	83 c4 20             	add    $0x20,%esp
f010ffdf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010ffe2:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ffe6:	74 17                	je     f010ffff <test_alloc_block_BF+0x443>
f010ffe8:	83 ec 04             	sub    $0x4,%esp
f010ffeb:	68 7c 86 13 f0       	push   $0xf013867c
f010fff0:	68 93 01 00 00       	push   $0x193
f010fff5:	68 f4 7d 13 f0       	push   $0xf0137df4
f010fffa:	e8 06 02 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010ffff:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0110005:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110008:	74 17                	je     f0110021 <test_alloc_block_BF+0x465>
f011000a:	83 ec 04             	sub    $0x4,%esp
f011000d:	68 c8 86 13 f0       	push   $0xf01386c8
f0110012:	68 94 01 00 00       	push   $0x194
f0110017:	68 f4 7d 13 f0       	push   $0xf0137df4
f011001c:	e8 e4 01 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (MORE THAN ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(3*kilo);
f0110021:	83 ec 0c             	sub    $0xc,%esp
f0110024:	68 00 0c 00 00       	push   $0xc00
f0110029:	e8 b9 2a 02 00       	call   f0132ae7 <alloc_block_BF>
f011002e:	83 c4 10             	add    $0x10,%esp
f0110031:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x19000)
f0110034:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110038:	74 1a                	je     f0110054 <test_alloc_block_BF+0x498>
f011003a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011003d:	8b 40 0c             	mov    0xc(%eax),%eax
f0110040:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f0110045:	75 0d                	jne    f0110054 <test_alloc_block_BF+0x498>
f0110047:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011004a:	8b 40 08             	mov    0x8(%eax),%eax
f011004d:	3d 00 90 01 00       	cmp    $0x19000,%eax
f0110052:	74 17                	je     f011006b <test_alloc_block_BF+0x4af>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f0110054:	83 ec 04             	sub    $0x4,%esp
f0110057:	68 d4 85 13 f0       	push   $0xf01385d4
f011005c:	68 9c 01 00 00       	push   $0x19c
f0110061:	68 f4 7d 13 f0       	push   $0xf0137df4
f0110066:	e8 9a 01 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011006b:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f0110070:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110073:	83 ea 02             	sub    $0x2,%edx
f0110076:	39 d0                	cmp    %edx,%eax
f0110078:	75 13                	jne    f011008d <test_alloc_block_BF+0x4d1>
f011007a:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f011007f:	83 f8 06             	cmp    $0x6,%eax
f0110082:	75 09                	jne    f011008d <test_alloc_block_BF+0x4d1>
f0110084:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f0110089:	85 c0                	test   %eax,%eax
f011008b:	74 17                	je     f01100a4 <test_alloc_block_BF+0x4e8>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011008d:	83 ec 04             	sub    $0x4,%esp
f0110090:	68 18 86 13 f0       	push   $0xf0138618
f0110095:	68 a0 01 00 00       	push   $0x1a0
f011009a:	68 f4 7d 13 f0       	push   $0xf0137df4
f011009f:	e8 61 01 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f01100a4:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f01100ab:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f01100ae:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[4] = 0x19C00;  //100KB + 3KB
f01100b5:	c7 45 c8 00 9c 01 00 	movl   $0x19c00,-0x38(%ebp)
	BlocksSizes[4] = 1*kilo;
f01100bc:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01100c3:	83 ec 0c             	sub    $0xc,%esp
f01100c6:	ff 75 d8             	pushl  -0x28(%ebp)
f01100c9:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f01100cf:	50                   	push   %eax
f01100d0:	8d 45 9c             	lea    -0x64(%ebp),%eax
f01100d3:	50                   	push   %eax
f01100d4:	8d 45 b8             	lea    -0x48(%ebp),%eax
f01100d7:	50                   	push   %eax
f01100d8:	68 e0 b8 85 f0       	push   $0xf085b8e0
f01100dd:	e8 d3 15 00 00       	call   f01116b5 <check_list_data>
f01100e2:	83 c4 20             	add    $0x20,%esp
f01100e5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f01100e8:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01100ec:	74 17                	je     f0110105 <test_alloc_block_BF+0x549>
f01100ee:	83 ec 04             	sub    $0x4,%esp
f01100f1:	68 7c 86 13 f0       	push   $0xf013867c
f01100f6:	68 a8 01 00 00       	push   $0x1a8
f01100fb:	68 f4 7d 13 f0       	push   $0xf0137df4
f0110100:	e8 00 01 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f0110105:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011010b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011010e:	74 17                	je     f0110127 <test_alloc_block_BF+0x56b>
f0110110:	83 ec 04             	sub    $0x4,%esp
f0110113:	68 c8 86 13 f0       	push   $0xf01386c8
f0110118:	68 a9 01 00 00       	push   $0x1a9
f011011d:	68 f4 7d 13 f0       	push   $0xf0137df4
f0110122:	e8 de 00 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 5: Try to allocate a block @ the head of the free block list */
	blockToAlloc = alloc_block_BF(2*kilo);
f0110127:	83 ec 0c             	sub    $0xc,%esp
f011012a:	68 00 08 00 00       	push   $0x800
f011012f:	e8 b3 29 02 00       	call   f0132ae7 <alloc_block_BF>
f0110134:	83 c4 10             	add    $0x10,%esp
f0110137:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*kilo || blockToAlloc->sva != 0x0)
f011013a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011013e:	74 17                	je     f0110157 <test_alloc_block_BF+0x59b>
f0110140:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110143:	8b 40 0c             	mov    0xc(%eax),%eax
f0110146:	3d 00 08 00 00       	cmp    $0x800,%eax
f011014b:	75 0a                	jne    f0110157 <test_alloc_block_BF+0x59b>
f011014d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110150:	8b 40 08             	mov    0x8(%eax),%eax
f0110153:	85 c0                	test   %eax,%eax
f0110155:	74 17                	je     f011016e <test_alloc_block_BF+0x5b2>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f0110157:	83 ec 04             	sub    $0x4,%esp
f011015a:	68 d4 85 13 f0       	push   $0xf01385d4
f011015f:	68 b1 01 00 00       	push   $0x1b1
f0110164:	68 f4 7d 13 f0       	push   $0xf0137df4
f0110169:	e8 97 00 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011016e:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f0110173:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110176:	83 ea 02             	sub    $0x2,%edx
f0110179:	39 d0                	cmp    %edx,%eax
f011017b:	75 13                	jne    f0110190 <test_alloc_block_BF+0x5d4>
f011017d:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f0110182:	83 f8 05             	cmp    $0x5,%eax
f0110185:	75 09                	jne    f0110190 <test_alloc_block_BF+0x5d4>
f0110187:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f011018c:	85 c0                	test   %eax,%eax
f011018e:	74 17                	je     f01101a7 <test_alloc_block_BF+0x5eb>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110190:	83 ec 04             	sub    $0x4,%esp
f0110193:	68 18 86 13 f0       	push   $0xf0138618
f0110198:	68 b5 01 00 00       	push   $0x1b5
f011019d:	68 f4 7d 13 f0       	push   $0xf0137df4
f01101a2:	e8 5e 00 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f01101a7:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f01101ae:	00 00 00 
	actualSize = numOfFreeBlocks_BF-2;
f01101b1:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0x0;
f01101b8:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
	BlocksSizes[0] = 0;
f01101bf:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01101c6:	83 ec 0c             	sub    $0xc,%esp
f01101c9:	ff 75 d8             	pushl  -0x28(%ebp)
f01101cc:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f01101d2:	50                   	push   %eax
f01101d3:	8d 45 9c             	lea    -0x64(%ebp),%eax
f01101d6:	50                   	push   %eax
f01101d7:	8d 45 b8             	lea    -0x48(%ebp),%eax
f01101da:	50                   	push   %eax
f01101db:	68 e0 b8 85 f0       	push   $0xf085b8e0
f01101e0:	e8 d0 14 00 00       	call   f01116b5 <check_list_data>
f01101e5:	83 c4 20             	add    $0x20,%esp
f01101e8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f01101eb:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f01101ef:	74 17                	je     f0110208 <test_alloc_block_BF+0x64c>
f01101f1:	83 ec 04             	sub    $0x4,%esp
f01101f4:	68 7c 86 13 f0       	push   $0xf013867c
f01101f9:	68 bd 01 00 00       	push   $0x1bd
f01101fe:	68 f4 7d 13 f0       	push   $0xf0137df4
f0110203:	e8 fd ff fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f0110208:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011020e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110211:	74 17                	je     f011022a <test_alloc_block_BF+0x66e>
f0110213:	83 ec 04             	sub    $0x4,%esp
f0110216:	68 c8 86 13 f0       	push   $0xf01386c8
f011021b:	68 be 01 00 00       	push   $0x1be
f0110220:	68 f4 7d 13 f0       	push   $0xf0137df4
f0110225:	e8 db ff fe ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_BF completed successfully.\n");
f011022a:	83 ec 0c             	sub    $0xc,%esp
f011022d:	68 14 87 13 f0       	push   $0xf0138714
f0110232:	e8 d7 0a ff ff       	call   f0100d0e <cprintf>
f0110237:	83 c4 10             	add    $0x10,%esp
}
f011023a:	90                   	nop
f011023b:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011023e:	5b                   	pop    %ebx
f011023f:	5e                   	pop    %esi
f0110240:	5f                   	pop    %edi
f0110241:	5d                   	pop    %ebp
f0110242:	c3                   	ret    

f0110243 <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f0110243:	55                   	push   %ebp
f0110244:	89 e5                	mov    %esp,%ebp
f0110246:	57                   	push   %edi
f0110247:	56                   	push   %esi
f0110248:	53                   	push   %ebx
f0110249:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f011024f:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f0110256:	83 ec 0c             	sub    $0xc,%esp
f0110259:	ff 75 e0             	pushl  -0x20(%ebp)
f011025c:	e8 70 23 02 00       	call   f01325d1 <initialize_MemBlocksList>
f0110261:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f0110264:	c7 05 44 b8 85 f0 00 	movl   $0x0,0xf085b844
f011026b:	00 00 00 
f011026e:	c7 05 48 b8 85 f0 00 	movl   $0x0,0xf085b848
f0110275:	00 00 00 
f0110278:	c7 05 50 b8 85 f0 00 	movl   $0x0,0xf085b850
f011027f:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_NF 8
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f0110282:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0110285:	bb 20 85 13 f0       	mov    $0xf0138520,%ebx
f011028a:	ba 08 00 00 00       	mov    $0x8,%edx
f011028f:	89 c7                	mov    %eax,%edi
f0110291:	89 de                	mov    %ebx,%esi
f0110293:	89 d1                	mov    %edx,%ecx
f0110295:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;
f0110297:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011029a:	bb 80 89 13 f0       	mov    $0xf0138980,%ebx
f011029f:	ba 08 00 00 00       	mov    $0x8,%edx
f01102a4:	89 c7                	mov    %eax,%edi
f01102a6:	89 de                	mov    %ebx,%esi
f01102a8:	89 d1                	mov    %edx,%ecx
f01102aa:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f01102ac:	c7 05 e0 b8 85 f0 00 	movl   $0x0,0xf085b8e0
f01102b3:	00 00 00 
f01102b6:	c7 05 e4 b8 85 f0 00 	movl   $0x0,0xf085b8e4
f01102bd:	00 00 00 
f01102c0:	c7 05 ec b8 85 f0 00 	movl   $0x0,0xf085b8ec
f01102c7:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f01102ca:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01102d1:	e9 5f 01 00 00       	jmp    f0110435 <test_alloc_block_NF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f01102d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01102d9:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f01102dd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01102e0:	c1 e2 04             	shl    $0x4,%edx
f01102e3:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f01102e6:	01 da                	add    %ebx,%edx
f01102e8:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f01102ee:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f01102f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01102f3:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f01102f7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01102fa:	c1 e2 04             	shl    $0x4,%edx
f01102fd:	8d 75 e8             	lea    -0x18(%ebp),%esi
f0110300:	01 f2                	add    %esi,%edx
f0110302:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f0110308:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f011030a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011030e:	0f 85 92 00 00 00    	jne    f01103a6 <test_alloc_block_NF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f0110314:	a1 e0 b8 85 f0       	mov    0xf085b8e0,%eax
f0110319:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011031c:	c1 e2 04             	shl    $0x4,%edx
f011031f:	8d 7d e8             	lea    -0x18(%ebp),%edi
f0110322:	01 fa                	add    %edi,%edx
f0110324:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f011032a:	89 02                	mov    %eax,(%edx)
f011032c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011032f:	c1 e0 04             	shl    $0x4,%eax
f0110332:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f0110335:	01 d8                	add    %ebx,%eax
f0110337:	2d d4 00 00 00       	sub    $0xd4,%eax
f011033c:	8b 00                	mov    (%eax),%eax
f011033e:	85 c0                	test   %eax,%eax
f0110340:	74 18                	je     f011035a <test_alloc_block_NF+0x117>
f0110342:	a1 e0 b8 85 f0       	mov    0xf085b8e0,%eax
f0110347:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f011034d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f0110350:	c1 e1 04             	shl    $0x4,%ecx
f0110353:	01 ca                	add    %ecx,%edx
f0110355:	89 50 04             	mov    %edx,0x4(%eax)
f0110358:	eb 13                	jmp    f011036d <test_alloc_block_NF+0x12a>
f011035a:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f0110360:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110363:	c1 e2 04             	shl    $0x4,%edx
f0110366:	01 d0                	add    %edx,%eax
f0110368:	a3 e4 b8 85 f0       	mov    %eax,0xf085b8e4
f011036d:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f0110373:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110376:	c1 e2 04             	shl    $0x4,%edx
f0110379:	01 d0                	add    %edx,%eax
f011037b:	a3 e0 b8 85 f0       	mov    %eax,0xf085b8e0
f0110380:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110383:	c1 e0 04             	shl    $0x4,%eax
f0110386:	8d 75 e8             	lea    -0x18(%ebp),%esi
f0110389:	01 f0                	add    %esi,%eax
f011038b:	2d d0 00 00 00       	sub    $0xd0,%eax
f0110390:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0110396:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f011039b:	40                   	inc    %eax
f011039c:	a3 ec b8 85 f0       	mov    %eax,0xf085b8ec
f01103a1:	e9 8c 00 00 00       	jmp    f0110432 <test_alloc_block_NF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f01103a6:	a1 e4 b8 85 f0       	mov    0xf085b8e4,%eax
f01103ab:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01103ae:	c1 e2 04             	shl    $0x4,%edx
f01103b1:	8d 7d e8             	lea    -0x18(%ebp),%edi
f01103b4:	01 fa                	add    %edi,%edx
f01103b6:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f01103bc:	89 02                	mov    %eax,(%edx)
f01103be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01103c1:	c1 e0 04             	shl    $0x4,%eax
f01103c4:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f01103c7:	01 d8                	add    %ebx,%eax
f01103c9:	2d d0 00 00 00       	sub    $0xd0,%eax
f01103ce:	8b 00                	mov    (%eax),%eax
f01103d0:	85 c0                	test   %eax,%eax
f01103d2:	74 17                	je     f01103eb <test_alloc_block_NF+0x1a8>
f01103d4:	a1 e4 b8 85 f0       	mov    0xf085b8e4,%eax
f01103d9:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f01103df:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f01103e2:	c1 e1 04             	shl    $0x4,%ecx
f01103e5:	01 ca                	add    %ecx,%edx
f01103e7:	89 10                	mov    %edx,(%eax)
f01103e9:	eb 13                	jmp    f01103fe <test_alloc_block_NF+0x1bb>
f01103eb:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f01103f1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01103f4:	c1 e2 04             	shl    $0x4,%edx
f01103f7:	01 d0                	add    %edx,%eax
f01103f9:	a3 e0 b8 85 f0       	mov    %eax,0xf085b8e0
f01103fe:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f0110404:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110407:	c1 e2 04             	shl    $0x4,%edx
f011040a:	01 d0                	add    %edx,%eax
f011040c:	a3 e4 b8 85 f0       	mov    %eax,0xf085b8e4
f0110411:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110414:	c1 e0 04             	shl    $0x4,%eax
f0110417:	8d 75 e8             	lea    -0x18(%ebp),%esi
f011041a:	01 f0                	add    %esi,%eax
f011041c:	2d d4 00 00 00       	sub    $0xd4,%eax
f0110421:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0110427:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f011042c:	40                   	inc    %eax
f011042d:	a3 ec b8 85 f0       	mov    %eax,0xf085b8ec
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f0110432:	ff 45 e4             	incl   -0x1c(%ebp)
f0110435:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f0110439:	0f 8e 97 fe ff ff    	jle    f01102d6 <test_alloc_block_NF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*NF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_NF(10*Mega);
f011043f:	83 ec 0c             	sub    $0xc,%esp
f0110442:	68 00 00 a0 00       	push   $0xa00000
f0110447:	e8 70 29 02 00       	call   f0132dbc <alloc_block_NF>
f011044c:	83 c4 10             	add    $0x10,%esp
f011044f:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a block instead no existing free blocks with the given size.");
f0110452:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110456:	74 17                	je     f011046f <test_alloc_block_NF+0x22c>
f0110458:	83 ec 04             	sub    $0x4,%esp
f011045b:	68 8c 87 13 f0       	push   $0xf013878c
f0110460:	68 e1 01 00 00       	push   $0x1e1
f0110465:	68 f4 7d 13 f0       	push   $0xf0137df4
f011046a:	e8 96 fd fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011046f:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f0110474:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110477:	75 13                	jne    f011048c <test_alloc_block_NF+0x249>
f0110479:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f011047e:	83 f8 08             	cmp    $0x8,%eax
f0110481:	75 09                	jne    f011048c <test_alloc_block_NF+0x249>
f0110483:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f0110488:	85 c0                	test   %eax,%eax
f011048a:	74 17                	je     f01104a3 <test_alloc_block_NF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f011048c:	83 ec 04             	sub    $0x4,%esp
f011048f:	68 20 83 13 f0       	push   $0xf0138320
f0110494:	68 e5 01 00 00       	push   $0x1e5
f0110499:	68 f4 7d 13 f0       	push   $0xf0137df4
f011049e:	e8 62 fd fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (STARTING from 0)*/
	blockToAlloc = alloc_block_NF(10*kilo);
f01104a3:	83 ec 0c             	sub    $0xc,%esp
f01104a6:	68 00 28 00 00       	push   $0x2800
f01104ab:	e8 0c 29 02 00       	call   f0132dbc <alloc_block_NF>
f01104b0:	83 c4 10             	add    $0x10,%esp
f01104b3:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 10*kilo || blockToAlloc->sva != 0x7000)
f01104b6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01104ba:	74 1a                	je     f01104d6 <test_alloc_block_NF+0x293>
f01104bc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01104bf:	8b 40 0c             	mov    0xc(%eax),%eax
f01104c2:	3d 00 28 00 00       	cmp    $0x2800,%eax
f01104c7:	75 0d                	jne    f01104d6 <test_alloc_block_NF+0x293>
f01104c9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01104cc:	8b 40 08             	mov    0x8(%eax),%eax
f01104cf:	3d 00 70 00 00       	cmp    $0x7000,%eax
f01104d4:	74 17                	je     f01104ed <test_alloc_block_NF+0x2aa>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f01104d6:	83 ec 04             	sub    $0x4,%esp
f01104d9:	68 00 88 13 f0       	push   $0xf0138800
f01104de:	68 ed 01 00 00       	push   $0x1ed
f01104e3:	68 f4 7d 13 f0       	push   $0xf0137df4
f01104e8:	e8 18 fd fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f01104ed:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f01104f2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01104f5:	75 13                	jne    f011050a <test_alloc_block_NF+0x2c7>
f01104f7:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f01104fc:	83 f8 07             	cmp    $0x7,%eax
f01104ff:	75 09                	jne    f011050a <test_alloc_block_NF+0x2c7>
f0110501:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f0110506:	85 c0                	test   %eax,%eax
f0110508:	74 17                	je     f0110521 <test_alloc_block_NF+0x2de>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011050a:	83 ec 04             	sub    $0x4,%esp
f011050d:	68 44 88 13 f0       	push   $0xf0138844
f0110512:	68 f1 01 00 00       	push   $0x1f1
f0110517:	68 f4 7d 13 f0       	push   $0xf0137df4
f011051c:	e8 e4 fc fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f0110521:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f0110528:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_NF-1;
f011052b:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f0110532:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f0110539:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f0110540:	83 ec 0c             	sub    $0xc,%esp
f0110543:	ff 75 d8             	pushl  -0x28(%ebp)
f0110546:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f011054c:	50                   	push   %eax
f011054d:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110550:	50                   	push   %eax
f0110551:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0110554:	50                   	push   %eax
f0110555:	68 e0 b8 85 f0       	push   $0xf085b8e0
f011055a:	e8 56 11 00 00       	call   f01116b5 <check_list_data>
f011055f:	83 c4 20             	add    $0x20,%esp
f0110562:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f0110565:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f0110569:	74 17                	je     f0110582 <test_alloc_block_NF+0x33f>
f011056b:	83 ec 04             	sub    $0x4,%esp
f011056e:	68 a8 88 13 f0       	push   $0xf01388a8
f0110573:	68 f9 01 00 00       	push   $0x1f9
f0110578:	68 f4 7d 13 f0       	push   $0xf0137df4
f011057d:	e8 83 fc fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f0110582:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110588:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011058b:	74 17                	je     f01105a4 <test_alloc_block_NF+0x361>
f011058d:	83 ec 04             	sub    $0x4,%esp
f0110590:	68 f4 88 13 f0       	push   $0xf01388f4
f0110595:	68 fa 01 00 00       	push   $0x1fa
f011059a:	68 f4 7d 13 f0       	push   $0xf0137df4
f011059f:	e8 61 fc fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the one existing free blocks (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(2*Mega);
f01105a4:	83 ec 0c             	sub    $0xc,%esp
f01105a7:	68 00 00 20 00       	push   $0x200000
f01105ac:	e8 0b 28 02 00       	call   f0132dbc <alloc_block_NF>
f01105b1:	83 c4 10             	add    $0x10,%esp
f01105b4:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*Mega || blockToAlloc->sva != 0x1A400)
f01105b7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01105bb:	74 1a                	je     f01105d7 <test_alloc_block_NF+0x394>
f01105bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01105c0:	8b 40 0c             	mov    0xc(%eax),%eax
f01105c3:	3d 00 00 20 00       	cmp    $0x200000,%eax
f01105c8:	75 0d                	jne    f01105d7 <test_alloc_block_NF+0x394>
f01105ca:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01105cd:	8b 40 08             	mov    0x8(%eax),%eax
f01105d0:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f01105d5:	74 17                	je     f01105ee <test_alloc_block_NF+0x3ab>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f01105d7:	83 ec 04             	sub    $0x4,%esp
f01105da:	68 00 88 13 f0       	push   $0xf0138800
f01105df:	68 03 02 00 00       	push   $0x203
f01105e4:	68 f4 7d 13 f0       	push   $0xf0137df4
f01105e9:	e8 17 fc fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f01105ee:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f01105f3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01105f6:	75 13                	jne    f011060b <test_alloc_block_NF+0x3c8>
f01105f8:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f01105fd:	83 f8 06             	cmp    $0x6,%eax
f0110600:	75 09                	jne    f011060b <test_alloc_block_NF+0x3c8>
f0110602:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f0110607:	85 c0                	test   %eax,%eax
f0110609:	74 17                	je     f0110622 <test_alloc_block_NF+0x3df>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011060b:	83 ec 04             	sub    $0x4,%esp
f011060e:	68 44 88 13 f0       	push   $0xf0138844
f0110613:	68 07 02 00 00       	push   $0x207
f0110618:	68 f4 7d 13 f0       	push   $0xf0137df4
f011061d:	e8 e3 fb fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f0110622:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f0110629:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f011062c:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0;
f0110633:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	BlocksSizes[5] = 0;
f011063a:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f0110641:	83 ec 0c             	sub    $0xc,%esp
f0110644:	ff 75 d8             	pushl  -0x28(%ebp)
f0110647:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f011064d:	50                   	push   %eax
f011064e:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110651:	50                   	push   %eax
f0110652:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0110655:	50                   	push   %eax
f0110656:	68 e0 b8 85 f0       	push   $0xf085b8e0
f011065b:	e8 55 10 00 00       	call   f01116b5 <check_list_data>
f0110660:	83 c4 20             	add    $0x20,%esp
f0110663:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f0110666:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f011066a:	74 17                	je     f0110683 <test_alloc_block_NF+0x440>
f011066c:	83 ec 04             	sub    $0x4,%esp
f011066f:	68 a8 88 13 f0       	push   $0xf01388a8
f0110674:	68 0f 02 00 00       	push   $0x20f
f0110679:	68 f4 7d 13 f0       	push   $0xf0137df4
f011067e:	e8 82 fb fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f0110683:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110689:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011068c:	74 17                	je     f01106a5 <test_alloc_block_NF+0x462>
f011068e:	83 ec 04             	sub    $0x4,%esp
f0110691:	68 f4 88 13 f0       	push   $0xf01388f4
f0110696:	68 10 02 00 00       	push   $0x210
f011069b:	68 f4 7d 13 f0       	push   $0xf0137df4
f01106a0:	e8 60 fb fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(512*kilo);
f01106a5:	83 ec 0c             	sub    $0xc,%esp
f01106a8:	68 00 00 08 00       	push   $0x80000
f01106ad:	e8 0a 27 02 00       	call   f0132dbc <alloc_block_NF>
f01106b2:	83 c4 10             	add    $0x10,%esp
f01106b5:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 512*kilo || blockToAlloc->sva != 0x21B400)
f01106b8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01106bc:	74 1a                	je     f01106d8 <test_alloc_block_NF+0x495>
f01106be:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01106c1:	8b 40 0c             	mov    0xc(%eax),%eax
f01106c4:	3d 00 00 08 00       	cmp    $0x80000,%eax
f01106c9:	75 0d                	jne    f01106d8 <test_alloc_block_NF+0x495>
f01106cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01106ce:	8b 40 08             	mov    0x8(%eax),%eax
f01106d1:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f01106d6:	74 17                	je     f01106ef <test_alloc_block_NF+0x4ac>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f01106d8:	83 ec 04             	sub    $0x4,%esp
f01106db:	68 00 88 13 f0       	push   $0xf0138800
f01106e0:	68 19 02 00 00       	push   $0x219
f01106e5:	68 f4 7d 13 f0       	push   $0xf0137df4
f01106ea:	e8 16 fb fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f01106ef:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f01106f4:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01106f7:	4a                   	dec    %edx
f01106f8:	39 d0                	cmp    %edx,%eax
f01106fa:	75 13                	jne    f011070f <test_alloc_block_NF+0x4cc>
f01106fc:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f0110701:	83 f8 06             	cmp    $0x6,%eax
f0110704:	75 09                	jne    f011070f <test_alloc_block_NF+0x4cc>
f0110706:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f011070b:	85 c0                	test   %eax,%eax
f011070d:	74 17                	je     f0110726 <test_alloc_block_NF+0x4e3>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011070f:	83 ec 04             	sub    $0x4,%esp
f0110712:	68 44 88 13 f0       	push   $0xf0138844
f0110717:	68 1d 02 00 00       	push   $0x21d
f011071c:	68 f4 7d 13 f0       	push   $0xf0137df4
f0110721:	e8 df fa fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f0110726:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f011072d:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f0110730:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo;
f0110737:	c7 45 cc 00 b4 29 00 	movl   $0x29b400,-0x34(%ebp)
	BlocksSizes[6] = 512*kilo;
f011073e:	c7 45 ac 00 00 08 00 	movl   $0x80000,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f0110745:	83 ec 0c             	sub    $0xc,%esp
f0110748:	ff 75 d8             	pushl  -0x28(%ebp)
f011074b:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110751:	50                   	push   %eax
f0110752:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110755:	50                   	push   %eax
f0110756:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0110759:	50                   	push   %eax
f011075a:	68 e0 b8 85 f0       	push   $0xf085b8e0
f011075f:	e8 51 0f 00 00       	call   f01116b5 <check_list_data>
f0110764:	83 c4 20             	add    $0x20,%esp
f0110767:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f011076a:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f011076e:	74 17                	je     f0110787 <test_alloc_block_NF+0x544>
f0110770:	83 ec 04             	sub    $0x4,%esp
f0110773:	68 a8 88 13 f0       	push   $0xf01388a8
f0110778:	68 25 02 00 00       	push   $0x225
f011077d:	68 f4 7d 13 f0       	push   $0xf0137df4
f0110782:	e8 7e fa fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f0110787:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011078d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110790:	74 17                	je     f01107a9 <test_alloc_block_NF+0x566>
f0110792:	83 ec 04             	sub    $0x4,%esp
f0110795:	68 f4 88 13 f0       	push   $0xf01388f4
f011079a:	68 26 02 00 00       	push   $0x226
f011079f:	68 f4 7d 13 f0       	push   $0xf0137df4
f01107a4:	e8 5c fa fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 5: Try to allocate a block with a size smaller than the size of any existing free block (One from the updated blocks before in the free list)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(511*kilo);
f01107a9:	83 ec 0c             	sub    $0xc,%esp
f01107ac:	68 00 fc 07 00       	push   $0x7fc00
f01107b1:	e8 06 26 02 00       	call   f0132dbc <alloc_block_NF>
f01107b6:	83 c4 10             	add    $0x10,%esp
f01107b9:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 511*kilo || blockToAlloc->sva != (0x21B400 + 512*kilo))
f01107bc:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01107c0:	74 1a                	je     f01107dc <test_alloc_block_NF+0x599>
f01107c2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01107c5:	8b 40 0c             	mov    0xc(%eax),%eax
f01107c8:	3d 00 fc 07 00       	cmp    $0x7fc00,%eax
f01107cd:	75 0d                	jne    f01107dc <test_alloc_block_NF+0x599>
f01107cf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01107d2:	8b 40 08             	mov    0x8(%eax),%eax
f01107d5:	3d 00 b4 29 00       	cmp    $0x29b400,%eax
f01107da:	74 17                	je     f01107f3 <test_alloc_block_NF+0x5b0>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f01107dc:	83 ec 04             	sub    $0x4,%esp
f01107df:	68 00 88 13 f0       	push   $0xf0138800
f01107e4:	68 2f 02 00 00       	push   $0x22f
f01107e9:	68 f4 7d 13 f0       	push   $0xf0137df4
f01107ee:	e8 12 fa fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f01107f3:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f01107f8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01107fb:	83 ea 02             	sub    $0x2,%edx
f01107fe:	39 d0                	cmp    %edx,%eax
f0110800:	75 13                	jne    f0110815 <test_alloc_block_NF+0x5d2>
f0110802:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f0110807:	83 f8 06             	cmp    $0x6,%eax
f011080a:	75 09                	jne    f0110815 <test_alloc_block_NF+0x5d2>
f011080c:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f0110811:	85 c0                	test   %eax,%eax
f0110813:	74 17                	je     f011082c <test_alloc_block_NF+0x5e9>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110815:	83 ec 04             	sub    $0x4,%esp
f0110818:	68 44 88 13 f0       	push   $0xf0138844
f011081d:	68 33 02 00 00       	push   $0x233
f0110822:	68 f4 7d 13 f0       	push   $0xf0137df4
f0110827:	e8 d9 f9 fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f011082c:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f0110833:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f0110836:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo + (511*kilo);
f011083d:	c7 45 cc 00 b0 31 00 	movl   $0x31b000,-0x34(%ebp)
	BlocksSizes[6] = 1*kilo;
f0110844:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f011084b:	83 ec 0c             	sub    $0xc,%esp
f011084e:	ff 75 d8             	pushl  -0x28(%ebp)
f0110851:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110857:	50                   	push   %eax
f0110858:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011085b:	50                   	push   %eax
f011085c:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f011085f:	50                   	push   %eax
f0110860:	68 e0 b8 85 f0       	push   $0xf085b8e0
f0110865:	e8 4b 0e 00 00       	call   f01116b5 <check_list_data>
f011086a:	83 c4 20             	add    $0x20,%esp
f011086d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f0110870:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f0110874:	74 17                	je     f011088d <test_alloc_block_NF+0x64a>
f0110876:	83 ec 04             	sub    $0x4,%esp
f0110879:	68 a8 88 13 f0       	push   $0xf01388a8
f011087e:	68 3b 02 00 00       	push   $0x23b
f0110883:	68 f4 7d 13 f0       	push   $0xf0137df4
f0110888:	e8 78 f9 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f011088d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110893:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110896:	74 17                	je     f01108af <test_alloc_block_NF+0x66c>
f0110898:	83 ec 04             	sub    $0x4,%esp
f011089b:	68 f4 88 13 f0       	push   $0xf01388f4
f01108a0:	68 3c 02 00 00       	push   $0x23c
f01108a5:	68 f4 7d 13 f0       	push   $0xf0137df4
f01108aa:	e8 56 f9 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 6: Try to allocate a block with a size smaller than ALL the NEXT existing blocks .. Shall start search from the start of the list*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(3*kilo);
f01108af:	83 ec 0c             	sub    $0xc,%esp
f01108b2:	68 00 0c 00 00       	push   $0xc00
f01108b7:	e8 00 25 02 00       	call   f0132dbc <alloc_block_NF>
f01108bc:	83 c4 10             	add    $0x10,%esp
f01108bf:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x0)
f01108c2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01108c6:	74 17                	je     f01108df <test_alloc_block_NF+0x69c>
f01108c8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01108cb:	8b 40 0c             	mov    0xc(%eax),%eax
f01108ce:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f01108d3:	75 0a                	jne    f01108df <test_alloc_block_NF+0x69c>
f01108d5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01108d8:	8b 40 08             	mov    0x8(%eax),%eax
f01108db:	85 c0                	test   %eax,%eax
f01108dd:	74 17                	je     f01108f6 <test_alloc_block_NF+0x6b3>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f01108df:	83 ec 04             	sub    $0x4,%esp
f01108e2:	68 00 88 13 f0       	push   $0xf0138800
f01108e7:	68 45 02 00 00       	push   $0x245
f01108ec:	68 f4 7d 13 f0       	push   $0xf0137df4
f01108f1:	e8 0f f9 fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f01108f6:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f01108fb:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01108fe:	83 ea 02             	sub    $0x2,%edx
f0110901:	39 d0                	cmp    %edx,%eax
f0110903:	75 13                	jne    f0110918 <test_alloc_block_NF+0x6d5>
f0110905:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f011090a:	83 f8 05             	cmp    $0x5,%eax
f011090d:	75 09                	jne    f0110918 <test_alloc_block_NF+0x6d5>
f011090f:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f0110914:	85 c0                	test   %eax,%eax
f0110916:	74 17                	je     f011092f <test_alloc_block_NF+0x6ec>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110918:	83 ec 04             	sub    $0x4,%esp
f011091b:	68 44 88 13 f0       	push   $0xf0138844
f0110920:	68 49 02 00 00       	push   $0x249
f0110925:	68 f4 7d 13 f0       	push   $0xf0137df4
f011092a:	e8 d6 f8 fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f011092f:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f0110936:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f0110939:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0;
f0110940:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	BlocksSizes[0] = 0;
f0110947:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f011094e:	83 ec 0c             	sub    $0xc,%esp
f0110951:	ff 75 d8             	pushl  -0x28(%ebp)
f0110954:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f011095a:	50                   	push   %eax
f011095b:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011095e:	50                   	push   %eax
f011095f:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0110962:	50                   	push   %eax
f0110963:	68 e0 b8 85 f0       	push   $0xf085b8e0
f0110968:	e8 48 0d 00 00       	call   f01116b5 <check_list_data>
f011096d:	83 c4 20             	add    $0x20,%esp
f0110970:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f0110973:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f0110977:	74 17                	je     f0110990 <test_alloc_block_NF+0x74d>
f0110979:	83 ec 04             	sub    $0x4,%esp
f011097c:	68 a8 88 13 f0       	push   $0xf01388a8
f0110981:	68 51 02 00 00       	push   $0x251
f0110986:	68 f4 7d 13 f0       	push   $0xf0137df4
f011098b:	e8 75 f8 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f0110990:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110996:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110999:	74 17                	je     f01109b2 <test_alloc_block_NF+0x76f>
f011099b:	83 ec 04             	sub    $0x4,%esp
f011099e:	68 f4 88 13 f0       	push   $0xf01388f4
f01109a3:	68 52 02 00 00       	push   $0x252
f01109a8:	68 f4 7d 13 f0       	push   $0xf0137df4
f01109ad:	e8 53 f8 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(1*kilo);
f01109b2:	83 ec 0c             	sub    $0xc,%esp
f01109b5:	68 00 04 00 00       	push   $0x400
f01109ba:	e8 fd 23 02 00       	call   f0132dbc <alloc_block_NF>
f01109bf:	83 c4 10             	add    $0x10,%esp
f01109c2:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*kilo || blockToAlloc->sva != 0x2000)
f01109c5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01109c9:	74 1a                	je     f01109e5 <test_alloc_block_NF+0x7a2>
f01109cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01109ce:	8b 40 0c             	mov    0xc(%eax),%eax
f01109d1:	3d 00 04 00 00       	cmp    $0x400,%eax
f01109d6:	75 0d                	jne    f01109e5 <test_alloc_block_NF+0x7a2>
f01109d8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01109db:	8b 40 08             	mov    0x8(%eax),%eax
f01109de:	3d 00 20 00 00       	cmp    $0x2000,%eax
f01109e3:	74 17                	je     f01109fc <test_alloc_block_NF+0x7b9>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f01109e5:	83 ec 04             	sub    $0x4,%esp
f01109e8:	68 00 88 13 f0       	push   $0xf0138800
f01109ed:	68 5b 02 00 00       	push   $0x25b
f01109f2:	68 f4 7d 13 f0       	push   $0xf0137df4
f01109f7:	e8 09 f8 fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-3 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f01109fc:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f0110a01:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110a04:	83 ea 03             	sub    $0x3,%edx
f0110a07:	39 d0                	cmp    %edx,%eax
f0110a09:	75 13                	jne    f0110a1e <test_alloc_block_NF+0x7db>
f0110a0b:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f0110a10:	83 f8 05             	cmp    $0x5,%eax
f0110a13:	75 09                	jne    f0110a1e <test_alloc_block_NF+0x7db>
f0110a15:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f0110a1a:	85 c0                	test   %eax,%eax
f0110a1c:	74 17                	je     f0110a35 <test_alloc_block_NF+0x7f2>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110a1e:	83 ec 04             	sub    $0x4,%esp
f0110a21:	68 44 88 13 f0       	push   $0xf0138844
f0110a26:	68 5f 02 00 00       	push   $0x25f
f0110a2b:	68 f4 7d 13 f0       	push   $0xf0137df4
f0110a30:	e8 d0 f7 fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f0110a35:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f0110a3c:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f0110a3f:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[1] = 0x2000 + 1*kilo;
f0110a46:	c7 45 b8 00 24 00 00 	movl   $0x2400,-0x48(%ebp)
	BlocksSizes[1] = 7*kilo;
f0110a4d:	c7 45 98 00 1c 00 00 	movl   $0x1c00,-0x68(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f0110a54:	83 ec 0c             	sub    $0xc,%esp
f0110a57:	ff 75 d8             	pushl  -0x28(%ebp)
f0110a5a:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110a60:	50                   	push   %eax
f0110a61:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110a64:	50                   	push   %eax
f0110a65:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0110a68:	50                   	push   %eax
f0110a69:	68 e0 b8 85 f0       	push   $0xf085b8e0
f0110a6e:	e8 42 0c 00 00       	call   f01116b5 <check_list_data>
f0110a73:	83 c4 20             	add    $0x20,%esp
f0110a76:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f0110a79:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f0110a7d:	74 17                	je     f0110a96 <test_alloc_block_NF+0x853>
f0110a7f:	83 ec 04             	sub    $0x4,%esp
f0110a82:	68 a8 88 13 f0       	push   $0xf01388a8
f0110a87:	68 67 02 00 00       	push   $0x267
f0110a8c:	68 f4 7d 13 f0       	push   $0xf0137df4
f0110a91:	e8 6f f7 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f0110a96:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110a9c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110a9f:	74 17                	je     f0110ab8 <test_alloc_block_NF+0x875>
f0110aa1:	83 ec 04             	sub    $0x4,%esp
f0110aa4:	68 f4 88 13 f0       	push   $0xf01388f4
f0110aa9:	68 68 02 00 00       	push   $0x268
f0110aae:	68 f4 7d 13 f0       	push   $0xf0137df4
f0110ab3:	e8 4d f7 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");
f0110ab8:	83 ec 0c             	sub    $0xc,%esp
f0110abb:	68 40 89 13 f0       	push   $0xf0138940
f0110ac0:	e8 49 02 ff ff       	call   f0100d0e <cprintf>
f0110ac5:	83 c4 10             	add    $0x10,%esp

}
f0110ac8:	90                   	nop
f0110ac9:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0110acc:	5b                   	pop    %ebx
f0110acd:	5e                   	pop    %esi
f0110ace:	5f                   	pop    %edi
f0110acf:	5d                   	pop    %ebp
f0110ad0:	c3                   	ret    

f0110ad1 <test_insert_sorted_with_merge_freeList>:

void test_insert_sorted_with_merge_freeList()
{
f0110ad1:	55                   	push   %ebp
f0110ad2:	89 e5                	mov    %esp,%ebp
f0110ad4:	57                   	push   %edi
f0110ad5:	81 ec 04 01 00 00    	sub    $0x104,%esp
	uint32 numOfBlocks = 10;
f0110adb:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f0110ae2:	83 ec 0c             	sub    $0xc,%esp
f0110ae5:	ff 75 f4             	pushl  -0xc(%ebp)
f0110ae8:	e8 e4 1a 02 00       	call   f01325d1 <initialize_MemBlocksList>
f0110aed:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f0110af0:	c7 05 44 b8 85 f0 00 	movl   $0x0,0xf085b844
f0110af7:	00 00 00 
f0110afa:	c7 05 48 b8 85 f0 00 	movl   $0x0,0xf085b848
f0110b01:	00 00 00 
f0110b04:	c7 05 50 b8 85 f0 00 	movl   $0x0,0xf085b850
f0110b0b:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f0110b0e:	c7 05 e0 b8 85 f0 00 	movl   $0x0,0xf085b8e0
f0110b15:	00 00 00 
f0110b18:	c7 05 e4 b8 85 f0 00 	movl   $0x0,0xf085b8e4
f0110b1f:	00 00 00 
f0110b22:	c7 05 ec b8 85 f0 00 	movl   $0x0,0xf085b8ec
f0110b29:	00 00 00 

	uint32 blocksToInsertSVAs[10]={0,0,0,0,0,0,0,0,0,0};
f0110b2c:	8d 55 c0             	lea    -0x40(%ebp),%edx
f0110b2f:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0110b34:	b8 00 00 00 00       	mov    $0x0,%eax
f0110b39:	89 d7                	mov    %edx,%edi
f0110b3b:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[10]={0,0,0,0,0,0,0,0,0,0};
f0110b3d:	8d 55 98             	lea    -0x68(%ebp),%edx
f0110b40:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0110b45:	b8 00 00 00 00       	mov    $0x0,%eax
f0110b4a:	89 d7                	mov    %edx,%edi
f0110b4c:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f0110b4e:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	uint32 actualSize = 0;
f0110b55:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*INSERT_SORTED_WITH MERGE Scenario 1: CASE 0 - Insert BLOCK_1 in the empty FreeMemBlocksList*/
	int idx_blocksToInsert = 3;
f0110b5c:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo;
f0110b63:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b66:	c7 44 85 c0 00 20 00 	movl   $0x2000,-0x40(%ebp,%eax,4)
f0110b6d:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110b6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b71:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f0110b78:	00 
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110b79:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b7c:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110b80:	89 45 8c             	mov    %eax,-0x74(%ebp)
	blockToInsert1.size = blocksToInsertSizes[idx_blocksToInsert];
f0110b83:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b86:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110b8a:	89 45 90             	mov    %eax,-0x70(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert1);
f0110b8d:	83 ec 0c             	sub    $0xc,%esp
f0110b90:	8d 45 84             	lea    -0x7c(%ebp),%eax
f0110b93:	50                   	push   %eax
f0110b94:	e8 70 24 02 00       	call   f0133009 <insert_sorted_with_merge_freeList>
f0110b99:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 1)
f0110b9c:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f0110ba1:	85 c0                	test   %eax,%eax
f0110ba3:	75 14                	jne    f0110bb9 <test_insert_sorted_with_merge_freeList+0xe8>
f0110ba5:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f0110baa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110bad:	75 0a                	jne    f0110bb9 <test_insert_sorted_with_merge_freeList+0xe8>
f0110baf:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f0110bb4:	83 f8 01             	cmp    $0x1,%eax
f0110bb7:	74 17                	je     f0110bd0 <test_insert_sorted_with_merge_freeList+0xff>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110bb9:	83 ec 04             	sub    $0x4,%esp
f0110bbc:	68 a0 89 13 f0       	push   $0xf01389a0
f0110bc1:	68 88 02 00 00       	push   $0x288
f0110bc6:	68 f4 7d 13 f0       	push   $0xf0137df4
f0110bcb:	e8 35 f6 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the free list content
	size = 0;
f0110bd0:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 1;
f0110bd7:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110bde:	83 ec 0c             	sub    $0xc,%esp
f0110be1:	ff 75 f0             	pushl  -0x10(%ebp)
f0110be4:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110be7:	50                   	push   %eax
f0110be8:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110beb:	50                   	push   %eax
f0110bec:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110bef:	50                   	push   %eax
f0110bf0:	68 e0 b8 85 f0       	push   $0xf085b8e0
f0110bf5:	e8 bb 0a 00 00       	call   f01116b5 <check_list_data>
f0110bfa:	83 c4 20             	add    $0x20,%esp
f0110bfd:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110c00:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110c04:	74 17                	je     f0110c1d <test_insert_sorted_with_merge_freeList+0x14c>
f0110c06:	83 ec 04             	sub    $0x4,%esp
f0110c09:	68 0c 8a 13 f0       	push   $0xf0138a0c
f0110c0e:	68 8e 02 00 00       	push   $0x28e
f0110c13:	68 f4 7d 13 f0       	push   $0xf0137df4
f0110c18:	e8 e8 f5 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110c1d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110c20:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110c23:	74 17                	je     f0110c3c <test_insert_sorted_with_merge_freeList+0x16b>
f0110c25:	83 ec 04             	sub    $0x4,%esp
f0110c28:	68 60 8a 13 f0       	push   $0xf0138a60
f0110c2d:	68 8f 02 00 00       	push   $0x28f
f0110c32:	68 f4 7d 13 f0       	push   $0xf0137df4
f0110c37:	e8 c9 f5 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 2: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE TAIL)*/
	idx_blocksToInsert = 7;
f0110c3c:	c7 45 ec 07 00 00 00 	movl   $0x7,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo;
f0110c43:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c46:	c7 44 85 c0 00 80 00 	movl   $0x8000,-0x40(%ebp,%eax,4)
f0110c4d:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 7*kilo;
f0110c4e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c51:	c7 44 85 98 00 1c 00 	movl   $0x1c00,-0x68(%ebp,%eax,4)
f0110c58:	00 
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110c59:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c5c:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110c60:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	blockToInsert2.size = blocksToInsertSizes[idx_blocksToInsert];
f0110c66:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c69:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110c6d:	89 45 80             	mov    %eax,-0x80(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert2);
f0110c70:	83 ec 0c             	sub    $0xc,%esp
f0110c73:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0110c79:	50                   	push   %eax
f0110c7a:	e8 8a 23 02 00       	call   f0133009 <insert_sorted_with_merge_freeList>
f0110c7f:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 2)
f0110c82:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f0110c87:	85 c0                	test   %eax,%eax
f0110c89:	75 14                	jne    f0110c9f <test_insert_sorted_with_merge_freeList+0x1ce>
f0110c8b:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f0110c90:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110c93:	75 0a                	jne    f0110c9f <test_insert_sorted_with_merge_freeList+0x1ce>
f0110c95:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f0110c9a:	83 f8 02             	cmp    $0x2,%eax
f0110c9d:	74 17                	je     f0110cb6 <test_insert_sorted_with_merge_freeList+0x1e5>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110c9f:	83 ec 04             	sub    $0x4,%esp
f0110ca2:	68 a0 89 13 f0       	push   $0xf01389a0
f0110ca7:	68 9e 02 00 00       	push   $0x29e
f0110cac:	68 f4 7d 13 f0       	push   $0xf0137df4
f0110cb1:	e8 4f f5 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110cb6:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 2;
f0110cbd:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110cc4:	83 ec 0c             	sub    $0xc,%esp
f0110cc7:	ff 75 f0             	pushl  -0x10(%ebp)
f0110cca:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110ccd:	50                   	push   %eax
f0110cce:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110cd1:	50                   	push   %eax
f0110cd2:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110cd5:	50                   	push   %eax
f0110cd6:	68 e0 b8 85 f0       	push   $0xf085b8e0
f0110cdb:	e8 d5 09 00 00       	call   f01116b5 <check_list_data>
f0110ce0:	83 c4 20             	add    $0x20,%esp
f0110ce3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110ce6:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110cea:	74 17                	je     f0110d03 <test_insert_sorted_with_merge_freeList+0x232>
f0110cec:	83 ec 04             	sub    $0x4,%esp
f0110cef:	68 0c 8a 13 f0       	push   $0xf0138a0c
f0110cf4:	68 a4 02 00 00       	push   $0x2a4
f0110cf9:	68 f4 7d 13 f0       	push   $0xf0137df4
f0110cfe:	e8 02 f5 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110d03:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110d06:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110d09:	74 17                	je     f0110d22 <test_insert_sorted_with_merge_freeList+0x251>
f0110d0b:	83 ec 04             	sub    $0x4,%esp
f0110d0e:	68 60 8a 13 f0       	push   $0xf0138a60
f0110d13:	68 a5 02 00 00       	push   $0x2a5
f0110d18:	68 f4 7d 13 f0       	push   $0xf0137df4
f0110d1d:	e8 e3 f4 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 3: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE HEAD)*/
	idx_blocksToInsert = 1;
f0110d22:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 1*kilo;
f0110d29:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d2c:	c7 44 85 c0 00 04 00 	movl   $0x400,-0x40(%ebp,%eax,4)
f0110d33:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0110d34:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d37:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110d3e:	00 
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110d3f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d42:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110d46:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
	blockToInsert3.size = blocksToInsertSizes[idx_blocksToInsert];
f0110d4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110d4f:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110d53:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert3);
f0110d59:	83 ec 0c             	sub    $0xc,%esp
f0110d5c:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f0110d62:	50                   	push   %eax
f0110d63:	e8 a1 22 02 00       	call   f0133009 <insert_sorted_with_merge_freeList>
f0110d68:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f0110d6b:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f0110d70:	85 c0                	test   %eax,%eax
f0110d72:	75 14                	jne    f0110d88 <test_insert_sorted_with_merge_freeList+0x2b7>
f0110d74:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f0110d79:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110d7c:	75 0a                	jne    f0110d88 <test_insert_sorted_with_merge_freeList+0x2b7>
f0110d7e:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f0110d83:	83 f8 03             	cmp    $0x3,%eax
f0110d86:	74 17                	je     f0110d9f <test_insert_sorted_with_merge_freeList+0x2ce>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110d88:	83 ec 04             	sub    $0x4,%esp
f0110d8b:	68 a0 89 13 f0       	push   $0xf01389a0
f0110d90:	68 b4 02 00 00       	push   $0x2b4
f0110d95:	68 f4 7d 13 f0       	push   $0xf0137df4
f0110d9a:	e8 66 f4 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110d9f:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f0110da6:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110dad:	83 ec 0c             	sub    $0xc,%esp
f0110db0:	ff 75 f0             	pushl  -0x10(%ebp)
f0110db3:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110db6:	50                   	push   %eax
f0110db7:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110dba:	50                   	push   %eax
f0110dbb:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110dbe:	50                   	push   %eax
f0110dbf:	68 e0 b8 85 f0       	push   $0xf085b8e0
f0110dc4:	e8 ec 08 00 00       	call   f01116b5 <check_list_data>
f0110dc9:	83 c4 20             	add    $0x20,%esp
f0110dcc:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110dcf:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110dd3:	74 17                	je     f0110dec <test_insert_sorted_with_merge_freeList+0x31b>
f0110dd5:	83 ec 04             	sub    $0x4,%esp
f0110dd8:	68 0c 8a 13 f0       	push   $0xf0138a0c
f0110ddd:	68 ba 02 00 00       	push   $0x2ba
f0110de2:	68 f4 7d 13 f0       	push   $0xf0137df4
f0110de7:	e8 19 f4 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110dec:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110def:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110df2:	74 17                	je     f0110e0b <test_insert_sorted_with_merge_freeList+0x33a>
f0110df4:	83 ec 04             	sub    $0x4,%esp
f0110df7:	68 60 8a 13 f0       	push   $0xf0138a60
f0110dfc:	68 bb 02 00 00       	push   $0x2bb
f0110e01:	68 f4 7d 13 f0       	push   $0xf0137df4
f0110e06:	e8 fa f3 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 4: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 6;
f0110e0b:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 10*kilo;
f0110e12:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e15:	c7 44 85 c0 00 58 00 	movl   $0x5800,-0x40(%ebp,%eax,4)
f0110e1c:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110e1d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e20:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f0110e27:	00 
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110e28:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e2b:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110e2f:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
	blockToInsert4.size = blocksToInsertSizes[idx_blocksToInsert];
f0110e35:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e38:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110e3c:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert4);
f0110e42:	83 ec 0c             	sub    $0xc,%esp
f0110e45:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0110e4b:	50                   	push   %eax
f0110e4c:	e8 b8 21 02 00       	call   f0133009 <insert_sorted_with_merge_freeList>
f0110e51:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110e54:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f0110e59:	85 c0                	test   %eax,%eax
f0110e5b:	75 14                	jne    f0110e71 <test_insert_sorted_with_merge_freeList+0x3a0>
f0110e5d:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f0110e62:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110e65:	75 0a                	jne    f0110e71 <test_insert_sorted_with_merge_freeList+0x3a0>
f0110e67:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f0110e6c:	83 f8 04             	cmp    $0x4,%eax
f0110e6f:	74 17                	je     f0110e88 <test_insert_sorted_with_merge_freeList+0x3b7>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110e71:	83 ec 04             	sub    $0x4,%esp
f0110e74:	68 a0 89 13 f0       	push   $0xf01389a0
f0110e79:	68 ca 02 00 00       	push   $0x2ca
f0110e7e:	68 f4 7d 13 f0       	push   $0xf0137df4
f0110e83:	e8 7d f3 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110e88:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110e8f:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110e96:	83 ec 0c             	sub    $0xc,%esp
f0110e99:	ff 75 f0             	pushl  -0x10(%ebp)
f0110e9c:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110e9f:	50                   	push   %eax
f0110ea0:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110ea3:	50                   	push   %eax
f0110ea4:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110ea7:	50                   	push   %eax
f0110ea8:	68 e0 b8 85 f0       	push   $0xf085b8e0
f0110ead:	e8 03 08 00 00       	call   f01116b5 <check_list_data>
f0110eb2:	83 c4 20             	add    $0x20,%esp
f0110eb5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110eb8:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110ebc:	74 17                	je     f0110ed5 <test_insert_sorted_with_merge_freeList+0x404>
f0110ebe:	83 ec 04             	sub    $0x4,%esp
f0110ec1:	68 0c 8a 13 f0       	push   $0xf0138a0c
f0110ec6:	68 d0 02 00 00       	push   $0x2d0
f0110ecb:	68 f4 7d 13 f0       	push   $0xf0137df4
f0110ed0:	e8 30 f3 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110ed5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110ed8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110edb:	74 17                	je     f0110ef4 <test_insert_sorted_with_merge_freeList+0x423>
f0110edd:	83 ec 04             	sub    $0x4,%esp
f0110ee0:	68 60 8a 13 f0       	push   $0xf0138a60
f0110ee5:	68 d1 02 00 00       	push   $0x2d1
f0110eea:	68 f4 7d 13 f0       	push   $0xf0137df4
f0110eef:	e8 11 f3 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 5: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (AT the tail)*/
	idx_blocksToInsert = 8;
f0110ef4:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo + 7*kilo;
f0110efb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110efe:	c7 44 85 c0 00 9c 00 	movl   $0x9c00,-0x40(%ebp,%eax,4)
f0110f05:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 3*kilo;
f0110f06:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f09:	c7 44 85 98 00 0c 00 	movl   $0xc00,-0x68(%ebp,%eax,4)
f0110f10:	00 
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110f11:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f14:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110f18:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	blockToInsert5.size = blocksToInsertSizes[idx_blocksToInsert];
f0110f1e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f21:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110f25:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert5);
f0110f2b:	83 ec 0c             	sub    $0xc,%esp
f0110f2e:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f0110f34:	50                   	push   %eax
f0110f35:	e8 cf 20 02 00       	call   f0133009 <insert_sorted_with_merge_freeList>
f0110f3a:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 1 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110f3d:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f0110f42:	85 c0                	test   %eax,%eax
f0110f44:	75 17                	jne    f0110f5d <test_insert_sorted_with_merge_freeList+0x48c>
f0110f46:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f0110f4b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110f4e:	42                   	inc    %edx
f0110f4f:	39 d0                	cmp    %edx,%eax
f0110f51:	75 0a                	jne    f0110f5d <test_insert_sorted_with_merge_freeList+0x48c>
f0110f53:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f0110f58:	83 f8 04             	cmp    $0x4,%eax
f0110f5b:	74 17                	je     f0110f74 <test_insert_sorted_with_merge_freeList+0x4a3>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110f5d:	83 ec 04             	sub    $0x4,%esp
f0110f60:	68 a0 89 13 f0       	push   $0xf01389a0
f0110f65:	68 e3 02 00 00       	push   $0x2e3
f0110f6a:	68 f4 7d 13 f0       	push   $0xf0137df4
f0110f6f:	e8 91 f2 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110f74:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110f7b:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f0110f82:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f85:	8d 50 ff             	lea    -0x1(%eax),%edx
f0110f88:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f8b:	48                   	dec    %eax
f0110f8c:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110f90:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f93:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110f97:	01 c8                	add    %ecx,%eax
f0110f99:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110f9d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110fa0:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110fa7:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110fa8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110fab:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110fb2:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110fb3:	83 ec 0c             	sub    $0xc,%esp
f0110fb6:	ff 75 f0             	pushl  -0x10(%ebp)
f0110fb9:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110fbc:	50                   	push   %eax
f0110fbd:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110fc0:	50                   	push   %eax
f0110fc1:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110fc4:	50                   	push   %eax
f0110fc5:	68 e0 b8 85 f0       	push   $0xf085b8e0
f0110fca:	e8 e6 06 00 00       	call   f01116b5 <check_list_data>
f0110fcf:	83 c4 20             	add    $0x20,%esp
f0110fd2:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110fd5:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110fd9:	74 17                	je     f0110ff2 <test_insert_sorted_with_merge_freeList+0x521>
f0110fdb:	83 ec 04             	sub    $0x4,%esp
f0110fde:	68 0c 8a 13 f0       	push   $0xf0138a0c
f0110fe3:	68 ec 02 00 00       	push   $0x2ec
f0110fe8:	68 f4 7d 13 f0       	push   $0xf0137df4
f0110fed:	e8 13 f2 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110ff2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110ff5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110ff8:	74 17                	je     f0111011 <test_insert_sorted_with_merge_freeList+0x540>
f0110ffa:	83 ec 04             	sub    $0x4,%esp
f0110ffd:	68 60 8a 13 f0       	push   $0xf0138a60
f0111002:	68 ed 02 00 00       	push   $0x2ed
f0111007:	68 f4 7d 13 f0       	push   $0xf0137df4
f011100c:	e8 f4 f1 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0111011:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0111018:	83 ec 0c             	sub    $0xc,%esp
f011101b:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011101e:	50                   	push   %eax
f011101f:	e8 5d 07 00 00       	call   f0111781 <check_avaliable_list_data>
f0111024:	83 c4 10             	add    $0x10,%esp
f0111027:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f011102a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011102d:	8d 50 01             	lea    0x1(%eax),%edx
f0111030:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111033:	39 c2                	cmp    %eax,%edx
f0111035:	74 17                	je     f011104e <test_insert_sorted_with_merge_freeList+0x57d>
f0111037:	83 ec 04             	sub    $0x4,%esp
f011103a:	68 b4 8a 13 f0       	push   $0xf0138ab4
f011103f:	68 f2 02 00 00       	push   $0x2f2
f0111044:	68 f4 7d 13 f0       	push   $0xf0137df4
f0111049:	e8 b7 f1 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f011104e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111052:	74 17                	je     f011106b <test_insert_sorted_with_merge_freeList+0x59a>
f0111054:	83 ec 04             	sub    $0x4,%esp
f0111057:	68 0c 8b 13 f0       	push   $0xf0138b0c
f011105c:	68 f3 02 00 00       	push   $0x2f3
f0111061:	68 f4 7d 13 f0       	push   $0xf0137df4
f0111066:	e8 9a f1 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 6: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 4;
f011106b:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo;
f0111072:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111075:	c7 44 85 c0 00 30 00 	movl   $0x3000,-0x40(%ebp,%eax,4)
f011107c:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f011107d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111080:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0111087:	00 
	struct MemBlock blockToInsert6;
	blockToInsert6.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0111088:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011108b:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011108f:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
	blockToInsert6.size = blocksToInsertSizes[idx_blocksToInsert];
f0111095:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111098:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011109c:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert6);
f01110a2:	83 ec 0c             	sub    $0xc,%esp
f01110a5:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01110ab:	50                   	push   %eax
f01110ac:	e8 58 1f 02 00       	call   f0133009 <insert_sorted_with_merge_freeList>
f01110b1:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 2 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f01110b4:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f01110b9:	85 c0                	test   %eax,%eax
f01110bb:	75 19                	jne    f01110d6 <test_insert_sorted_with_merge_freeList+0x605>
f01110bd:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f01110c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01110c5:	83 c2 02             	add    $0x2,%edx
f01110c8:	39 d0                	cmp    %edx,%eax
f01110ca:	75 0a                	jne    f01110d6 <test_insert_sorted_with_merge_freeList+0x605>
f01110cc:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f01110d1:	83 f8 04             	cmp    $0x4,%eax
f01110d4:	74 17                	je     f01110ed <test_insert_sorted_with_merge_freeList+0x61c>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01110d6:	83 ec 04             	sub    $0x4,%esp
f01110d9:	68 a0 89 13 f0       	push   $0xf01389a0
f01110de:	68 05 03 00 00       	push   $0x305
f01110e3:	68 f4 7d 13 f0       	push   $0xf0137df4
f01110e8:	e8 18 f1 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01110ed:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f01110f4:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f01110fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01110fe:	8d 50 ff             	lea    -0x1(%eax),%edx
f0111101:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111104:	48                   	dec    %eax
f0111105:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0111109:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011110c:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0111110:	01 c8                	add    %ecx,%eax
f0111112:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0111116:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111119:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0111120:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0111121:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111124:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f011112b:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f011112c:	83 ec 0c             	sub    $0xc,%esp
f011112f:	ff 75 f0             	pushl  -0x10(%ebp)
f0111132:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0111135:	50                   	push   %eax
f0111136:	8d 45 98             	lea    -0x68(%ebp),%eax
f0111139:	50                   	push   %eax
f011113a:	8d 45 c0             	lea    -0x40(%ebp),%eax
f011113d:	50                   	push   %eax
f011113e:	68 e0 b8 85 f0       	push   $0xf085b8e0
f0111143:	e8 6d 05 00 00       	call   f01116b5 <check_list_data>
f0111148:	83 c4 20             	add    $0x20,%esp
f011114b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f011114e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111152:	74 17                	je     f011116b <test_insert_sorted_with_merge_freeList+0x69a>
f0111154:	83 ec 04             	sub    $0x4,%esp
f0111157:	68 0c 8a 13 f0       	push   $0xf0138a0c
f011115c:	68 0e 03 00 00       	push   $0x30e
f0111161:	68 f4 7d 13 f0       	push   $0xf0137df4
f0111166:	e8 9a f0 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f011116b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011116e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111171:	74 17                	je     f011118a <test_insert_sorted_with_merge_freeList+0x6b9>
f0111173:	83 ec 04             	sub    $0x4,%esp
f0111176:	68 60 8a 13 f0       	push   $0xf0138a60
f011117b:	68 0f 03 00 00       	push   $0x30f
f0111180:	68 f4 7d 13 f0       	push   $0xf0137df4
f0111185:	e8 7b f0 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f011118a:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0111191:	83 ec 0c             	sub    $0xc,%esp
f0111194:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0111197:	50                   	push   %eax
f0111198:	e8 e4 05 00 00       	call   f0111781 <check_avaliable_list_data>
f011119d:	83 c4 10             	add    $0x10,%esp
f01111a0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 2) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f01111a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01111a6:	8d 50 02             	lea    0x2(%eax),%edx
f01111a9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01111ac:	39 c2                	cmp    %eax,%edx
f01111ae:	74 17                	je     f01111c7 <test_insert_sorted_with_merge_freeList+0x6f6>
f01111b0:	83 ec 04             	sub    $0x4,%esp
f01111b3:	68 b4 8a 13 f0       	push   $0xf0138ab4
f01111b8:	68 14 03 00 00       	push   $0x314
f01111bd:	68 f4 7d 13 f0       	push   $0xf0137df4
f01111c2:	e8 3e f0 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f01111c7:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01111cb:	74 17                	je     f01111e4 <test_insert_sorted_with_merge_freeList+0x713>
f01111cd:	83 ec 04             	sub    $0x4,%esp
f01111d0:	68 0c 8b 13 f0       	push   $0xf0138b0c
f01111d5:	68 15 03 00 00       	push   $0x315
f01111da:	68 f4 7d 13 f0       	push   $0xf0137df4
f01111df:	e8 21 f0 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 7: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (AT the head)*/
	idx_blocksToInsert = 0;
f01111e4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f01111eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01111ee:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01111f5:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f01111f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01111f9:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0111200:	00 
	struct MemBlock blockToInsert7;
	blockToInsert7.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0111201:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111204:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0111208:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
	blockToInsert7.size = blocksToInsertSizes[idx_blocksToInsert];
f011120e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111211:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0111215:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert7);
f011121b:	83 ec 0c             	sub    $0xc,%esp
f011121e:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0111224:	50                   	push   %eax
f0111225:	e8 df 1d 02 00       	call   f0133009 <insert_sorted_with_merge_freeList>
f011122a:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 3 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f011122d:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f0111232:	85 c0                	test   %eax,%eax
f0111234:	75 19                	jne    f011124f <test_insert_sorted_with_merge_freeList+0x77e>
f0111236:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f011123b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011123e:	83 c2 03             	add    $0x3,%edx
f0111241:	39 d0                	cmp    %edx,%eax
f0111243:	75 0a                	jne    f011124f <test_insert_sorted_with_merge_freeList+0x77e>
f0111245:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f011124a:	83 f8 04             	cmp    $0x4,%eax
f011124d:	74 17                	je     f0111266 <test_insert_sorted_with_merge_freeList+0x795>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011124f:	83 ec 04             	sub    $0x4,%esp
f0111252:	68 a0 89 13 f0       	push   $0xf01389a0
f0111257:	68 28 03 00 00       	push   $0x328
f011125c:	68 f4 7d 13 f0       	push   $0xf0137df4
f0111261:	e8 9f ef fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0111266:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f011126d:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f0111274:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111277:	8d 50 01             	lea    0x1(%eax),%edx
f011127a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011127d:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0111281:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f0111285:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111288:	8d 50 01             	lea    0x1(%eax),%edx
f011128b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011128e:	40                   	inc    %eax
f011128f:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0111293:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111296:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011129a:	01 c8                	add    %ecx,%eax
f011129c:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f01112a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01112a3:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01112aa:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f01112ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01112ae:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f01112b5:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01112b6:	83 ec 0c             	sub    $0xc,%esp
f01112b9:	ff 75 f0             	pushl  -0x10(%ebp)
f01112bc:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01112bf:	50                   	push   %eax
f01112c0:	8d 45 98             	lea    -0x68(%ebp),%eax
f01112c3:	50                   	push   %eax
f01112c4:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01112c7:	50                   	push   %eax
f01112c8:	68 e0 b8 85 f0       	push   $0xf085b8e0
f01112cd:	e8 e3 03 00 00       	call   f01116b5 <check_list_data>
f01112d2:	83 c4 20             	add    $0x20,%esp
f01112d5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01112d8:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01112dc:	74 17                	je     f01112f5 <test_insert_sorted_with_merge_freeList+0x824>
f01112de:	83 ec 04             	sub    $0x4,%esp
f01112e1:	68 0c 8a 13 f0       	push   $0xf0138a0c
f01112e6:	68 32 03 00 00       	push   $0x332
f01112eb:	68 f4 7d 13 f0       	push   $0xf0137df4
f01112f0:	e8 10 ef fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01112f5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01112f8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01112fb:	74 17                	je     f0111314 <test_insert_sorted_with_merge_freeList+0x843>
f01112fd:	83 ec 04             	sub    $0x4,%esp
f0111300:	68 60 8a 13 f0       	push   $0xf0138a60
f0111305:	68 33 03 00 00       	push   $0x333
f011130a:	68 f4 7d 13 f0       	push   $0xf0137df4
f011130f:	e8 f1 ee fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0111314:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f011131b:	83 ec 0c             	sub    $0xc,%esp
f011131e:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0111321:	50                   	push   %eax
f0111322:	e8 5a 04 00 00       	call   f0111781 <check_avaliable_list_data>
f0111327:	83 c4 10             	add    $0x10,%esp
f011132a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 3) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f011132d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111330:	8d 50 03             	lea    0x3(%eax),%edx
f0111333:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111336:	39 c2                	cmp    %eax,%edx
f0111338:	74 17                	je     f0111351 <test_insert_sorted_with_merge_freeList+0x880>
f011133a:	83 ec 04             	sub    $0x4,%esp
f011133d:	68 b4 8a 13 f0       	push   $0xf0138ab4
f0111342:	68 38 03 00 00       	push   $0x338
f0111347:	68 f4 7d 13 f0       	push   $0xf0137df4
f011134c:	e8 b4 ee fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0111351:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111355:	74 17                	je     f011136e <test_insert_sorted_with_merge_freeList+0x89d>
f0111357:	83 ec 04             	sub    $0x4,%esp
f011135a:	68 0c 8b 13 f0       	push   $0xf0138b0c
f011135f:	68 39 03 00 00       	push   $0x339
f0111364:	68 f4 7d 13 f0       	push   $0xf0137df4
f0111369:	e8 97 ee fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 8: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 5;
f011136e:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = (8*kilo + 4*kilo + 10*kilo) - (4*kilo);
f0111375:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111378:	c7 44 85 c0 00 48 00 	movl   $0x4800,-0x40(%ebp,%eax,4)
f011137f:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0111380:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111383:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f011138a:	00 
	struct MemBlock blockToInsert8;
	blockToInsert8.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011138b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011138e:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0111392:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
	blockToInsert8.size = blocksToInsertSizes[idx_blocksToInsert];
f0111398:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011139b:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011139f:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert8);
f01113a5:	83 ec 0c             	sub    $0xc,%esp
f01113a8:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f01113ae:	50                   	push   %eax
f01113af:	e8 55 1c 02 00       	call   f0133009 <insert_sorted_with_merge_freeList>
f01113b4:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 4 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f01113b7:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f01113bc:	85 c0                	test   %eax,%eax
f01113be:	75 19                	jne    f01113d9 <test_insert_sorted_with_merge_freeList+0x908>
f01113c0:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f01113c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01113c8:	83 c2 04             	add    $0x4,%edx
f01113cb:	39 d0                	cmp    %edx,%eax
f01113cd:	75 0a                	jne    f01113d9 <test_insert_sorted_with_merge_freeList+0x908>
f01113cf:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f01113d4:	83 f8 04             	cmp    $0x4,%eax
f01113d7:	74 17                	je     f01113f0 <test_insert_sorted_with_merge_freeList+0x91f>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01113d9:	83 ec 04             	sub    $0x4,%esp
f01113dc:	68 a0 89 13 f0       	push   $0xf01389a0
f01113e1:	68 4c 03 00 00       	push   $0x34c
f01113e6:	68 f4 7d 13 f0       	push   $0xf0137df4
f01113eb:	e8 15 ee fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f01113f0:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f01113f7:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f01113fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111401:	8d 50 01             	lea    0x1(%eax),%edx
f0111404:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111407:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011140b:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f011140f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111412:	8d 50 01             	lea    0x1(%eax),%edx
f0111415:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111418:	40                   	inc    %eax
f0111419:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f011141d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111420:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0111424:	01 c8                	add    %ecx,%eax
f0111426:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f011142a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011142d:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0111434:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0111435:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111438:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f011143f:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0111440:	83 ec 0c             	sub    $0xc,%esp
f0111443:	ff 75 f0             	pushl  -0x10(%ebp)
f0111446:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0111449:	50                   	push   %eax
f011144a:	8d 45 98             	lea    -0x68(%ebp),%eax
f011144d:	50                   	push   %eax
f011144e:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0111451:	50                   	push   %eax
f0111452:	68 e0 b8 85 f0       	push   $0xf085b8e0
f0111457:	e8 59 02 00 00       	call   f01116b5 <check_list_data>
f011145c:	83 c4 20             	add    $0x20,%esp
f011145f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0111462:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111466:	74 17                	je     f011147f <test_insert_sorted_with_merge_freeList+0x9ae>
f0111468:	83 ec 04             	sub    $0x4,%esp
f011146b:	68 0c 8a 13 f0       	push   $0xf0138a0c
f0111470:	68 56 03 00 00       	push   $0x356
f0111475:	68 f4 7d 13 f0       	push   $0xf0137df4
f011147a:	e8 86 ed fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f011147f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111482:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111485:	74 17                	je     f011149e <test_insert_sorted_with_merge_freeList+0x9cd>
f0111487:	83 ec 04             	sub    $0x4,%esp
f011148a:	68 60 8a 13 f0       	push   $0xf0138a60
f011148f:	68 57 03 00 00       	push   $0x357
f0111494:	68 f4 7d 13 f0       	push   $0xf0137df4
f0111499:	e8 67 ed fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f011149e:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f01114a5:	83 ec 0c             	sub    $0xc,%esp
f01114a8:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01114ab:	50                   	push   %eax
f01114ac:	e8 d0 02 00 00       	call   f0111781 <check_avaliable_list_data>
f01114b1:	83 c4 10             	add    $0x10,%esp
f01114b4:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 4) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f01114b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01114ba:	8d 50 04             	lea    0x4(%eax),%edx
f01114bd:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01114c0:	39 c2                	cmp    %eax,%edx
f01114c2:	74 17                	je     f01114db <test_insert_sorted_with_merge_freeList+0xa0a>
f01114c4:	83 ec 04             	sub    $0x4,%esp
f01114c7:	68 b4 8a 13 f0       	push   $0xf0138ab4
f01114cc:	68 5c 03 00 00       	push   $0x35c
f01114d1:	68 f4 7d 13 f0       	push   $0xf0137df4
f01114d6:	e8 2a ed fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f01114db:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01114df:	74 17                	je     f01114f8 <test_insert_sorted_with_merge_freeList+0xa27>
f01114e1:	83 ec 04             	sub    $0x4,%esp
f01114e4:	68 0c 8b 13 f0       	push   $0xf0138b0c
f01114e9:	68 5d 03 00 00       	push   $0x35d
f01114ee:	68 f4 7d 13 f0       	push   $0xf0137df4
f01114f3:	e8 0d ed fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 9: CASE 4 - Merge with prev & next in the FreeMemBlocksList */
	idx_blocksToInsert = 2;
f01114f8:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 2*kilo;
f01114ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111502:	c7 44 85 c0 00 08 00 	movl   $0x800,-0x40(%ebp,%eax,4)
f0111509:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0x2000 - 2*kilo; //6144
f011150a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011150d:	c7 44 85 98 00 18 00 	movl   $0x1800,-0x68(%ebp,%eax,4)
f0111514:	00 
	struct MemBlock blockToInsert9;
	blockToInsert9.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0111515:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111518:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011151c:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
	blockToInsert9.size = blocksToInsertSizes[idx_blocksToInsert];
f0111522:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111525:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0111529:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)

	//printf("===>BEFORE\n");
	//show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert9);
f011152f:	83 ec 0c             	sub    $0xc,%esp
f0111532:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111538:	50                   	push   %eax
f0111539:	e8 cb 1a 02 00       	call   f0133009 <insert_sorted_with_merge_freeList>
f011153e:	83 c4 10             	add    $0x10,%esp
	//show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 6 || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f0111541:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f0111546:	85 c0                	test   %eax,%eax
f0111548:	75 19                	jne    f0111563 <test_insert_sorted_with_merge_freeList+0xa92>
f011154a:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f011154f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111552:	83 c2 06             	add    $0x6,%edx
f0111555:	39 d0                	cmp    %edx,%eax
f0111557:	75 0a                	jne    f0111563 <test_insert_sorted_with_merge_freeList+0xa92>
f0111559:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f011155e:	83 f8 03             	cmp    $0x3,%eax
f0111561:	74 17                	je     f011157a <test_insert_sorted_with_merge_freeList+0xaa9>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0111563:	83 ec 04             	sub    $0x4,%esp
f0111566:	68 a0 89 13 f0       	push   $0xf01389a0
f011156b:	68 70 03 00 00       	push   $0x370
f0111570:	68 f4 7d 13 f0       	push   $0xf0137df4
f0111575:	e8 8b ec fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f011157a:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f0111581:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert-1] = 0x0;
f0111588:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011158b:	48                   	dec    %eax
f011158c:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0111593:	00 
	blocksToInsertSizes[idx_blocksToInsert-1] = blocksToInsertSizes[idx_blocksToInsert-1] + blocksToInsertSizes[idx_blocksToInsert] + blocksToInsertSizes[idx_blocksToInsert+1];
f0111594:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111597:	8d 50 ff             	lea    -0x1(%eax),%edx
f011159a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011159d:	48                   	dec    %eax
f011159e:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f01115a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01115a5:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01115a9:	01 c1                	add    %eax,%ecx
f01115ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01115ae:	40                   	inc    %eax
f01115af:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01115b3:	01 c8                	add    %ecx,%eax
f01115b5:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f01115b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01115bc:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01115c3:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f01115c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01115c7:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f01115ce:	00 
	blocksToInsertSVAs[idx_blocksToInsert+1] = 0x0;
f01115cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01115d2:	40                   	inc    %eax
f01115d3:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01115da:	00 
	blocksToInsertSizes[idx_blocksToInsert+1] = 0;
f01115db:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01115de:	40                   	inc    %eax
f01115df:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f01115e6:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01115e7:	83 ec 0c             	sub    $0xc,%esp
f01115ea:	ff 75 f0             	pushl  -0x10(%ebp)
f01115ed:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01115f0:	50                   	push   %eax
f01115f1:	8d 45 98             	lea    -0x68(%ebp),%eax
f01115f4:	50                   	push   %eax
f01115f5:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01115f8:	50                   	push   %eax
f01115f9:	68 e0 b8 85 f0       	push   $0xf085b8e0
f01115fe:	e8 b2 00 00 00       	call   f01116b5 <check_list_data>
f0111603:	83 c4 20             	add    $0x20,%esp
f0111606:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0111609:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011160d:	74 17                	je     f0111626 <test_insert_sorted_with_merge_freeList+0xb55>
f011160f:	83 ec 04             	sub    $0x4,%esp
f0111612:	68 0c 8a 13 f0       	push   $0xf0138a0c
f0111617:	68 7c 03 00 00       	push   $0x37c
f011161c:	68 f4 7d 13 f0       	push   $0xf0137df4
f0111621:	e8 df eb fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0111626:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111629:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011162c:	74 17                	je     f0111645 <test_insert_sorted_with_merge_freeList+0xb74>
f011162e:	83 ec 04             	sub    $0x4,%esp
f0111631:	68 60 8a 13 f0       	push   $0xf0138a60
f0111636:	68 7d 03 00 00       	push   $0x37d
f011163b:	68 f4 7d 13 f0       	push   $0xf0137df4
f0111640:	e8 c0 eb fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0111645:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f011164c:	83 ec 0c             	sub    $0xc,%esp
f011164f:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0111652:	50                   	push   %eax
f0111653:	e8 29 01 00 00       	call   f0111781 <check_avaliable_list_data>
f0111658:	83 c4 10             	add    $0x10,%esp
f011165b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 6) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f011165e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111661:	8d 50 06             	lea    0x6(%eax),%edx
f0111664:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111667:	39 c2                	cmp    %eax,%edx
f0111669:	74 17                	je     f0111682 <test_insert_sorted_with_merge_freeList+0xbb1>
f011166b:	83 ec 04             	sub    $0x4,%esp
f011166e:	68 b4 8a 13 f0       	push   $0xf0138ab4
f0111673:	68 82 03 00 00       	push   $0x382
f0111678:	68 f4 7d 13 f0       	push   $0xf0137df4
f011167d:	e8 83 eb fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0111682:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111686:	74 17                	je     f011169f <test_insert_sorted_with_merge_freeList+0xbce>
f0111688:	83 ec 04             	sub    $0x4,%esp
f011168b:	68 0c 8b 13 f0       	push   $0xf0138b0c
f0111690:	68 83 03 00 00       	push   $0x383
f0111695:	68 f4 7d 13 f0       	push   $0xf0137df4
f011169a:	e8 66 eb fe ff       	call   f0100205 <_panic>
	//====================================================================//


	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test insert_sorted_with_merge_freeList completed successfully.\n");
f011169f:	83 ec 0c             	sub    $0xc,%esp
f01116a2:	68 68 8b 13 f0       	push   $0xf0138b68
f01116a7:	e8 62 f6 fe ff       	call   f0100d0e <cprintf>
f01116ac:	83 c4 10             	add    $0x10,%esp

}
f01116af:	90                   	nop
f01116b0:	8b 7d fc             	mov    -0x4(%ebp),%edi
f01116b3:	c9                   	leave  
f01116b4:	c3                   	ret    

f01116b5 <check_list_data>:

/********************Helper Functions***************************/
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
f01116b5:	55                   	push   %ebp
f01116b6:	89 e5                	mov    %esp,%ebp
f01116b8:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f01116bb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f01116c2:	8b 45 14             	mov    0x14(%ebp),%eax
f01116c5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i = 0;
f01116cb:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	LIST_FOREACH(node, list)
f01116d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01116d5:	8b 00                	mov    (%eax),%eax
f01116d7:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01116da:	eb 6e                	jmp    f011174a <check_list_data+0x95>
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
			i++;
f01116dc:	ff 45 f8             	incl   -0x8(%ebp)
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
f01116df:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01116e2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01116e9:	8b 45 10             	mov    0x10(%ebp),%eax
f01116ec:	01 d0                	add    %edx,%eax
f01116ee:	8b 00                	mov    (%eax),%eax
f01116f0:	85 c0                	test   %eax,%eax
f01116f2:	74 e8                	je     f01116dc <check_list_data+0x27>
			i++;
		if(node->sva != blocksSVAs[(i)] || node->size != blocksSizes[i])
f01116f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01116f7:	8b 50 08             	mov    0x8(%eax),%edx
f01116fa:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01116fd:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111704:	8b 45 0c             	mov    0xc(%ebp),%eax
f0111707:	01 c8                	add    %ecx,%eax
f0111709:	8b 00                	mov    (%eax),%eax
f011170b:	39 c2                	cmp    %eax,%edx
f011170d:	75 1b                	jne    f011172a <check_list_data+0x75>
f011170f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111712:	8b 50 0c             	mov    0xc(%eax),%edx
f0111715:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111718:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f011171f:	8b 45 10             	mov    0x10(%ebp),%eax
f0111722:	01 c8                	add    %ecx,%eax
f0111724:	8b 00                	mov    (%eax),%eax
f0111726:	39 c2                	cmp    %eax,%edx
f0111728:	74 07                	je     f0111731 <check_list_data+0x7c>
		{
//			cprintf("i = %d .. \n", i);
//			cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
//			cprintf("blocks[i] data: sva = %x, size = %d\n", blocksSVAs[(i)], blocksSizes[i]);
			return 0;
f011172a:	b8 00 00 00 00       	mov    $0x0,%eax
f011172f:	eb 4e                	jmp    f011177f <check_list_data+0xca>
		}
		(*size)++;
f0111731:	8b 45 14             	mov    0x14(%ebp),%eax
f0111734:	8b 00                	mov    (%eax),%eax
f0111736:	8d 50 01             	lea    0x1(%eax),%edx
f0111739:	8b 45 14             	mov    0x14(%ebp),%eax
f011173c:	89 10                	mov    %edx,(%eax)
		i++;
f011173e:	ff 45 f8             	incl   -0x8(%ebp)
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
f0111741:	8b 45 08             	mov    0x8(%ebp),%eax
f0111744:	8b 40 08             	mov    0x8(%eax),%eax
f0111747:	89 45 fc             	mov    %eax,-0x4(%ebp)
f011174a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f011174e:	74 07                	je     f0111757 <check_list_data+0xa2>
f0111750:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111753:	8b 00                	mov    (%eax),%eax
f0111755:	eb 05                	jmp    f011175c <check_list_data+0xa7>
f0111757:	b8 00 00 00 00       	mov    $0x0,%eax
f011175c:	8b 55 08             	mov    0x8(%ebp),%edx
f011175f:	89 42 08             	mov    %eax,0x8(%edx)
f0111762:	8b 45 08             	mov    0x8(%ebp),%eax
f0111765:	8b 40 08             	mov    0x8(%eax),%eax
f0111768:	85 c0                	test   %eax,%eax
f011176a:	0f 85 6f ff ff ff    	jne    f01116df <check_list_data+0x2a>
f0111770:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111774:	0f 85 65 ff ff ff    	jne    f01116df <check_list_data+0x2a>
			return 0;
		}
		(*size)++;
		i++;
	}
	return 1;
f011177a:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011177f:	c9                   	leave  
f0111780:	c3                   	ret    

f0111781 <check_avaliable_list_data>:

int check_avaliable_list_data(uint32* size)
{
f0111781:	55                   	push   %ebp
f0111782:	89 e5                	mov    %esp,%ebp
f0111784:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f0111787:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f011178e:	8b 45 08             	mov    0x8(%ebp),%eax
f0111791:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	LIST_FOREACH(node, &AvailableMemBlocksList)
f0111797:	a1 14 b9 85 f0       	mov    0xf085b914,%eax
f011179c:	89 45 fc             	mov    %eax,-0x4(%ebp)
f011179f:	eb 30                	jmp    f01117d1 <check_avaliable_list_data+0x50>
	{
		if(node->sva != 0x0 || node->size != 0)
f01117a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01117a4:	8b 40 08             	mov    0x8(%eax),%eax
f01117a7:	85 c0                	test   %eax,%eax
f01117a9:	75 0a                	jne    f01117b5 <check_avaliable_list_data+0x34>
f01117ab:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01117ae:	8b 40 0c             	mov    0xc(%eax),%eax
f01117b1:	85 c0                	test   %eax,%eax
f01117b3:	74 07                	je     f01117bc <check_avaliable_list_data+0x3b>
		{
			return 0;
f01117b5:	b8 00 00 00 00       	mov    $0x0,%eax
f01117ba:	eb 40                	jmp    f01117fc <check_avaliable_list_data+0x7b>
		}
		(*size)++;
f01117bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01117bf:	8b 00                	mov    (%eax),%eax
f01117c1:	8d 50 01             	lea    0x1(%eax),%edx
f01117c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01117c7:	89 10                	mov    %edx,(%eax)
int check_avaliable_list_data(uint32* size)
{
	struct MemBlock* node = NULL;
	*size = 0;

	LIST_FOREACH(node, &AvailableMemBlocksList)
f01117c9:	a1 1c b9 85 f0       	mov    0xf085b91c,%eax
f01117ce:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01117d1:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01117d5:	74 07                	je     f01117de <check_avaliable_list_data+0x5d>
f01117d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01117da:	8b 00                	mov    (%eax),%eax
f01117dc:	eb 05                	jmp    f01117e3 <check_avaliable_list_data+0x62>
f01117de:	b8 00 00 00 00       	mov    $0x0,%eax
f01117e3:	a3 1c b9 85 f0       	mov    %eax,0xf085b91c
f01117e8:	a1 1c b9 85 f0       	mov    0xf085b91c,%eax
f01117ed:	85 c0                	test   %eax,%eax
f01117ef:	75 b0                	jne    f01117a1 <check_avaliable_list_data+0x20>
f01117f1:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01117f5:	75 aa                	jne    f01117a1 <check_avaliable_list_data+0x20>
		{
			return 0;
		}
		(*size)++;
	}
	return 1;
f01117f7:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01117fc:	c9                   	leave  
f01117fd:	c3                   	ret    

f01117fe <show_list_content>:


void show_list_content(struct MemBlock_List* list)
{
f01117fe:	55                   	push   %ebp
f01117ff:	89 e5                	mov    %esp,%ebp
f0111801:	83 ec 18             	sub    $0x18,%esp
	struct MemBlock* node = NULL;
f0111804:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(node, list)
f011180b:	8b 45 08             	mov    0x8(%ebp),%eax
f011180e:	8b 00                	mov    (%eax),%eax
f0111810:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111813:	eb 27                	jmp    f011183c <show_list_content+0x3e>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f0111815:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111818:	8b 50 0c             	mov    0xc(%eax),%edx
f011181b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011181e:	8b 40 08             	mov    0x8(%eax),%eax
f0111821:	83 ec 04             	sub    $0x4,%esp
f0111824:	52                   	push   %edx
f0111825:	50                   	push   %eax
f0111826:	68 b8 7e 13 f0       	push   $0xf0137eb8
f011182b:	e8 de f4 fe ff       	call   f0100d0e <cprintf>
f0111830:	83 c4 10             	add    $0x10,%esp


void show_list_content(struct MemBlock_List* list)
{
	struct MemBlock* node = NULL;
	LIST_FOREACH(node, list)
f0111833:	8b 45 08             	mov    0x8(%ebp),%eax
f0111836:	8b 40 08             	mov    0x8(%eax),%eax
f0111839:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011183c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111840:	74 07                	je     f0111849 <show_list_content+0x4b>
f0111842:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111845:	8b 00                	mov    (%eax),%eax
f0111847:	eb 05                	jmp    f011184e <show_list_content+0x50>
f0111849:	b8 00 00 00 00       	mov    $0x0,%eax
f011184e:	8b 55 08             	mov    0x8(%ebp),%edx
f0111851:	89 42 08             	mov    %eax,0x8(%edx)
f0111854:	8b 45 08             	mov    0x8(%ebp),%eax
f0111857:	8b 40 08             	mov    0x8(%eax),%eax
f011185a:	85 c0                	test   %eax,%eax
f011185c:	75 b7                	jne    f0111815 <show_list_content+0x17>
f011185e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111862:	75 b1                	jne    f0111815 <show_list_content+0x17>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
}
f0111864:	90                   	nop
f0111865:	c9                   	leave  
f0111866:	c3                   	ret    

f0111867 <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f0111867:	55                   	push   %ebp
f0111868:	89 e5                	mov    %esp,%ebp
f011186a:	57                   	push   %edi
f011186b:	56                   	push   %esi
f011186c:	53                   	push   %ebx
f011186d:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f0111873:	83 ec 0c             	sub    $0xc,%esp
f0111876:	68 bc 8b 13 f0       	push   $0xf0138bbc
f011187b:	e8 8e f4 fe ff       	call   f0100d0e <cprintf>
f0111880:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f0111883:	83 ec 0c             	sub    $0xc,%esp
f0111886:	68 e0 8b 13 f0       	push   $0xf0138be0
f011188b:	e8 7e f4 fe ff       	call   f0100d0e <cprintf>
f0111890:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f0111893:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f011189a:	83 ec 0c             	sub    $0xc,%esp
f011189d:	68 fc 8b 13 f0       	push   $0xf0138bfc
f01118a2:	e8 67 f4 fe ff       	call   f0100d0e <cprintf>
f01118a7:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f01118aa:	8d 45 80             	lea    -0x80(%ebp),%eax
f01118ad:	bb b6 8c 13 f0       	mov    $0xf0138cb6,%ebx
f01118b2:	ba 03 00 00 00       	mov    $0x3,%edx
f01118b7:	89 c7                	mov    %eax,%edi
f01118b9:	89 de                	mov    %ebx,%esi
f01118bb:	89 d1                	mov    %edx,%ecx
f01118bd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01118bf:	8d 55 8c             	lea    -0x74(%ebp),%edx
f01118c2:	b9 16 00 00 00       	mov    $0x16,%ecx
f01118c7:	b8 00 00 00 00       	mov    $0x0,%eax
f01118cc:	89 d7                	mov    %edx,%edi
f01118ce:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f01118d0:	83 ec 0c             	sub    $0xc,%esp
f01118d3:	8d 45 80             	lea    -0x80(%ebp),%eax
f01118d6:	50                   	push   %eax
f01118d7:	e8 94 f4 fe ff       	call   f0100d70 <execute_command>
f01118dc:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f01118df:	83 ec 0c             	sub    $0xc,%esp
f01118e2:	68 2a 8c 13 f0       	push   $0xf0138c2a
f01118e7:	e8 22 f4 fe ff       	call   f0100d0e <cprintf>
f01118ec:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f01118ef:	83 ec 0c             	sub    $0xc,%esp
f01118f2:	68 40 8c 13 f0       	push   $0xf0138c40
f01118f7:	e8 12 f4 fe ff       	call   f0100d0e <cprintf>
f01118fc:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f01118ff:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f0111906:	65 00 00 
f0111909:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f011190f:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111914:	b8 00 00 00 00       	mov    $0x0,%eax
f0111919:	89 d7                	mov    %edx,%edi
f011191b:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f011191d:	83 ec 0c             	sub    $0xc,%esp
f0111920:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f0111926:	50                   	push   %eax
f0111927:	e8 44 f4 fe ff       	call   f0100d70 <execute_command>
f011192c:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f011192f:	83 ec 0c             	sub    $0xc,%esp
f0111932:	68 2a 8c 13 f0       	push   $0xf0138c2a
f0111937:	e8 d2 f3 fe ff       	call   f0100d0e <cprintf>
f011193c:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f011193f:	83 ec 0c             	sub    $0xc,%esp
f0111942:	68 68 8c 13 f0       	push   $0xf0138c68
f0111947:	e8 c2 f3 fe ff       	call   f0100d0e <cprintf>
f011194c:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f011194f:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f0111956:	75 00 00 
f0111959:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f011195f:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111964:	b8 00 00 00 00       	mov    $0x0,%eax
f0111969:	89 d7                	mov    %edx,%edi
f011196b:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f011196d:	83 ec 0c             	sub    $0xc,%esp
f0111970:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f0111976:	50                   	push   %eax
f0111977:	e8 f4 f3 fe ff       	call   f0100d70 <execute_command>
f011197c:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f011197f:	83 ec 0c             	sub    $0xc,%esp
f0111982:	68 2a 8c 13 f0       	push   $0xf0138c2a
f0111987:	e8 82 f3 fe ff       	call   f0100d0e <cprintf>
f011198c:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f011198f:	83 ec 0c             	sub    $0xc,%esp
f0111992:	68 90 8c 13 f0       	push   $0xf0138c90
f0111997:	e8 72 f3 fe ff       	call   f0100d0e <cprintf>
f011199c:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f011199f:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f01119a6:	6d 6d 00 
f01119a9:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f01119af:	b9 18 00 00 00       	mov    $0x18,%ecx
f01119b4:	b8 00 00 00 00       	mov    $0x0,%eax
f01119b9:	89 d7                	mov    %edx,%edi
f01119bb:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f01119bd:	83 ec 0c             	sub    $0xc,%esp
f01119c0:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f01119c6:	50                   	push   %eax
f01119c7:	e8 a4 f3 fe ff       	call   f0100d70 <execute_command>
f01119cc:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f01119cf:	83 ec 0c             	sub    $0xc,%esp
f01119d2:	68 2a 8c 13 f0       	push   $0xf0138c2a
f01119d7:	e8 32 f3 fe ff       	call   f0100d0e <cprintf>
f01119dc:	83 c4 10             	add    $0x10,%esp
	return 0;
f01119df:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01119e4:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01119e7:	5b                   	pop    %ebx
f01119e8:	5e                   	pop    %esi
f01119e9:	5f                   	pop    %edi
f01119ea:	5d                   	pop    %ebp
f01119eb:	c3                   	ret    

f01119ec <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f01119ec:	55                   	push   %ebp
f01119ed:	89 e5                	mov    %esp,%ebp
f01119ef:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f01119f2:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f01119f9:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0111a00:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111a07:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111a0c:	ff 75 ec             	pushl  -0x14(%ebp)
f0111a0f:	ff 75 f0             	pushl  -0x10(%ebp)
f0111a12:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a15:	50                   	push   %eax
f0111a16:	e8 c6 62 ff ff       	call   f0107ce1 <pt_set_page_permissions>
f0111a1b:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111a1e:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111a23:	ff 75 ec             	pushl  -0x14(%ebp)
f0111a26:	ff 75 f0             	pushl  -0x10(%ebp)
f0111a29:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a2c:	50                   	push   %eax
f0111a2d:	e8 9e 4e 00 00       	call   f01168d0 <CP>
f0111a32:	83 c4 10             	add    $0x10,%esp
f0111a35:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111a38:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111a3c:	74 14                	je     f0111a52 <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f0111a3e:	83 ec 04             	sub    $0x4,%esp
f0111a41:	68 1c 8d 13 f0       	push   $0xf0138d1c
f0111a46:	6a 5a                	push   $0x5a
f0111a48:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0111a4d:	e8 b3 e7 fe ff       	call   f0100205 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f0111a52:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f0111a59:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f0111a60:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111a67:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111a6c:	ff 75 ec             	pushl  -0x14(%ebp)
f0111a6f:	ff 75 f0             	pushl  -0x10(%ebp)
f0111a72:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a75:	50                   	push   %eax
f0111a76:	e8 66 62 ff ff       	call   f0107ce1 <pt_set_page_permissions>
f0111a7b:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111a7e:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111a83:	ff 75 ec             	pushl  -0x14(%ebp)
f0111a86:	ff 75 f0             	pushl  -0x10(%ebp)
f0111a89:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a8c:	50                   	push   %eax
f0111a8d:	e8 3e 4e 00 00       	call   f01168d0 <CP>
f0111a92:	83 c4 10             	add    $0x10,%esp
f0111a95:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111a98:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111a9c:	74 14                	je     f0111ab2 <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f0111a9e:	83 ec 04             	sub    $0x4,%esp
f0111aa1:	68 5c 8d 13 f0       	push   $0xf0138d5c
f0111aa6:	6a 66                	push   $0x66
f0111aa8:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0111aad:	e8 53 e7 fe ff       	call   f0100205 <_panic>
	}

	va = 0xEF800000;
f0111ab2:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f0111ab9:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0111ac0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111ac7:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111acc:	ff 75 ec             	pushl  -0x14(%ebp)
f0111acf:	ff 75 f0             	pushl  -0x10(%ebp)
f0111ad2:	ff 75 f4             	pushl  -0xc(%ebp)
f0111ad5:	50                   	push   %eax
f0111ad6:	e8 06 62 ff ff       	call   f0107ce1 <pt_set_page_permissions>
f0111adb:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111ade:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111ae3:	ff 75 ec             	pushl  -0x14(%ebp)
f0111ae6:	ff 75 f0             	pushl  -0x10(%ebp)
f0111ae9:	ff 75 f4             	pushl  -0xc(%ebp)
f0111aec:	50                   	push   %eax
f0111aed:	e8 de 4d 00 00       	call   f01168d0 <CP>
f0111af2:	83 c4 10             	add    $0x10,%esp
f0111af5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111af8:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111afc:	74 14                	je     f0111b12 <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f0111afe:	83 ec 04             	sub    $0x4,%esp
f0111b01:	68 80 8d 13 f0       	push   $0xf0138d80
f0111b06:	6a 71                	push   $0x71
f0111b08:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0111b0d:	e8 f3 e6 fe ff       	call   f0100205 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f0111b12:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f0111b19:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f0111b20:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111b27:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111b2c:	ff 75 ec             	pushl  -0x14(%ebp)
f0111b2f:	ff 75 f0             	pushl  -0x10(%ebp)
f0111b32:	ff 75 f4             	pushl  -0xc(%ebp)
f0111b35:	50                   	push   %eax
f0111b36:	e8 a6 61 ff ff       	call   f0107ce1 <pt_set_page_permissions>
f0111b3b:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111b3e:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111b43:	ff 75 ec             	pushl  -0x14(%ebp)
f0111b46:	ff 75 f0             	pushl  -0x10(%ebp)
f0111b49:	ff 75 f4             	pushl  -0xc(%ebp)
f0111b4c:	50                   	push   %eax
f0111b4d:	e8 7e 4d 00 00       	call   f01168d0 <CP>
f0111b52:	83 c4 10             	add    $0x10,%esp
f0111b55:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111b58:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111b5c:	74 14                	je     f0111b72 <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f0111b5e:	83 ec 04             	sub    $0x4,%esp
f0111b61:	68 a4 8d 13 f0       	push   $0xf0138da4
f0111b66:	6a 7d                	push   $0x7d
f0111b68:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0111b6d:	e8 93 e6 fe ff       	call   f0100205 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f0111b72:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f0111b79:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f0111b80:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111b87:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111b8c:	ff 75 ec             	pushl  -0x14(%ebp)
f0111b8f:	ff 75 f0             	pushl  -0x10(%ebp)
f0111b92:	ff 75 f4             	pushl  -0xc(%ebp)
f0111b95:	50                   	push   %eax
f0111b96:	e8 46 61 ff ff       	call   f0107ce1 <pt_set_page_permissions>
f0111b9b:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111b9e:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111ba3:	ff 75 ec             	pushl  -0x14(%ebp)
f0111ba6:	ff 75 f0             	pushl  -0x10(%ebp)
f0111ba9:	ff 75 f4             	pushl  -0xc(%ebp)
f0111bac:	50                   	push   %eax
f0111bad:	e8 1e 4d 00 00       	call   f01168d0 <CP>
f0111bb2:	83 c4 10             	add    $0x10,%esp
f0111bb5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111bb8:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111bbc:	74 17                	je     f0111bd5 <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f0111bbe:	83 ec 04             	sub    $0x4,%esp
f0111bc1:	68 c8 8d 13 f0       	push   $0xf0138dc8
f0111bc6:	68 89 00 00 00       	push   $0x89
f0111bcb:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0111bd0:	e8 30 e6 fe ff       	call   f0100205 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f0111bd5:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0111bdc:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0111be3:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111bea:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111bef:	ff 75 ec             	pushl  -0x14(%ebp)
f0111bf2:	ff 75 f0             	pushl  -0x10(%ebp)
f0111bf5:	ff 75 f4             	pushl  -0xc(%ebp)
f0111bf8:	50                   	push   %eax
f0111bf9:	e8 e3 60 ff ff       	call   f0107ce1 <pt_set_page_permissions>
f0111bfe:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111c01:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111c06:	ff 75 ec             	pushl  -0x14(%ebp)
f0111c09:	ff 75 f0             	pushl  -0x10(%ebp)
f0111c0c:	ff 75 f4             	pushl  -0xc(%ebp)
f0111c0f:	50                   	push   %eax
f0111c10:	e8 bb 4c 00 00       	call   f01168d0 <CP>
f0111c15:	83 c4 10             	add    $0x10,%esp
f0111c18:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111c1b:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111c1f:	74 17                	je     f0111c38 <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f0111c21:	83 ec 04             	sub    $0x4,%esp
f0111c24:	68 ec 8d 13 f0       	push   $0xf0138dec
f0111c29:	68 95 00 00 00       	push   $0x95
f0111c2e:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0111c33:	e8 cd e5 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f0111c38:	83 ec 0c             	sub    $0xc,%esp
f0111c3b:	68 18 8e 13 f0       	push   $0xf0138e18
f0111c40:	e8 c9 f0 fe ff       	call   f0100d0e <cprintf>
f0111c45:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111c48:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111c4d:	c9                   	leave  
f0111c4e:	c3                   	ret    

f0111c4f <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f0111c4f:	55                   	push   %ebp
f0111c50:	89 e5                	mov    %esp,%ebp
f0111c52:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f0111c55:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0111c5c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0111c63:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111c6a:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111c6f:	ff 75 ec             	pushl  -0x14(%ebp)
f0111c72:	ff 75 f0             	pushl  -0x10(%ebp)
f0111c75:	ff 75 f4             	pushl  -0xc(%ebp)
f0111c78:	50                   	push   %eax
f0111c79:	e8 63 60 ff ff       	call   f0107ce1 <pt_set_page_permissions>
f0111c7e:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f0111c81:	83 ec 04             	sub    $0x4,%esp
f0111c84:	68 68 8e 13 f0       	push   $0xf0138e68
f0111c89:	68 a2 00 00 00       	push   $0xa2
f0111c8e:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0111c93:	e8 6d e5 fe ff       	call   f0100205 <_panic>

f0111c98 <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f0111c98:	55                   	push   %ebp
f0111c99:	89 e5                	mov    %esp,%ebp
f0111c9b:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f0111c9e:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f0111ca5:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111caa:	83 ec 08             	sub    $0x8,%esp
f0111cad:	ff 75 f4             	pushl  -0xc(%ebp)
f0111cb0:	50                   	push   %eax
f0111cb1:	e8 49 61 ff ff       	call   f0107dff <pt_get_page_permissions>
f0111cb6:	83 c4 10             	add    $0x10,%esp
f0111cb9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f0111cbc:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0111cc0:	74 17                	je     f0111cd9 <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f0111cc2:	83 ec 04             	sub    $0x4,%esp
f0111cc5:	68 04 8f 13 f0       	push   $0xf0138f04
f0111cca:	68 b0 00 00 00       	push   $0xb0
f0111ccf:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0111cd4:	e8 2c e5 fe ff       	call   f0100205 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f0111cd9:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111ce0:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111ce5:	83 ec 08             	sub    $0x8,%esp
f0111ce8:	ff 75 f4             	pushl  -0xc(%ebp)
f0111ceb:	50                   	push   %eax
f0111cec:	e8 0e 61 ff ff       	call   f0107dff <pt_get_page_permissions>
f0111cf1:	83 c4 10             	add    $0x10,%esp
f0111cf4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f0111cf7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111cfb:	74 17                	je     f0111d14 <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f0111cfd:	83 ec 04             	sub    $0x4,%esp
f0111d00:	68 28 8f 13 f0       	push   $0xf0138f28
f0111d05:	68 b8 00 00 00       	push   $0xb8
f0111d0a:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0111d0f:	e8 f1 e4 fe ff       	call   f0100205 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f0111d14:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111d1b:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111d20:	83 ec 08             	sub    $0x8,%esp
f0111d23:	ff 75 f4             	pushl  -0xc(%ebp)
f0111d26:	50                   	push   %eax
f0111d27:	e8 d3 60 ff ff       	call   f0107dff <pt_get_page_permissions>
f0111d2c:	83 c4 10             	add    $0x10,%esp
f0111d2f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0111d32:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0111d36:	74 17                	je     f0111d4f <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f0111d38:	83 ec 04             	sub    $0x4,%esp
f0111d3b:	68 4c 8f 13 f0       	push   $0xf0138f4c
f0111d40:	68 c0 00 00 00       	push   $0xc0
f0111d45:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0111d4a:	e8 b6 e4 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF1000000;
f0111d4f:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111d56:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111d5b:	83 ec 08             	sub    $0x8,%esp
f0111d5e:	ff 75 f4             	pushl  -0xc(%ebp)
f0111d61:	50                   	push   %eax
f0111d62:	e8 98 60 ff ff       	call   f0107dff <pt_get_page_permissions>
f0111d67:	83 c4 10             	add    $0x10,%esp
f0111d6a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0111d6d:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0111d71:	74 17                	je     f0111d8a <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f0111d73:	83 ec 04             	sub    $0x4,%esp
f0111d76:	68 70 8f 13 f0       	push   $0xf0138f70
f0111d7b:	68 c7 00 00 00       	push   $0xc7
f0111d80:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0111d85:	e8 7b e4 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0001000;
f0111d8a:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111d91:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111d96:	83 ec 08             	sub    $0x8,%esp
f0111d99:	ff 75 f4             	pushl  -0xc(%ebp)
f0111d9c:	50                   	push   %eax
f0111d9d:	e8 5d 60 ff ff       	call   f0107dff <pt_get_page_permissions>
f0111da2:	83 c4 10             	add    $0x10,%esp
f0111da5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f0111da8:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0111dac:	74 17                	je     f0111dc5 <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f0111dae:	83 ec 04             	sub    $0x4,%esp
f0111db1:	68 94 8f 13 f0       	push   $0xf0138f94
f0111db6:	68 ce 00 00 00       	push   $0xce
f0111dbb:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0111dc0:	e8 40 e4 fe ff       	call   f0100205 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f0111dc5:	83 ec 0c             	sub    $0xc,%esp
f0111dc8:	68 b8 8f 13 f0       	push   $0xf0138fb8
f0111dcd:	e8 3c ef fe ff       	call   f0100d0e <cprintf>
f0111dd2:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111dd5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111dda:	c9                   	leave  
f0111ddb:	c3                   	ret    

f0111ddc <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f0111ddc:	55                   	push   %ebp
f0111ddd:	89 e5                	mov    %esp,%ebp
f0111ddf:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f0111de2:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111de9:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111dee:	83 ec 08             	sub    $0x8,%esp
f0111df1:	ff 75 f4             	pushl  -0xc(%ebp)
f0111df4:	50                   	push   %eax
f0111df5:	e8 5a 60 ff ff       	call   f0107e54 <pt_clear_page_table_entry>
f0111dfa:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f0111dfd:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111e02:	83 ec 08             	sub    $0x8,%esp
f0111e05:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e08:	50                   	push   %eax
f0111e09:	e8 1e 4a 00 00       	call   f011682c <CE>
f0111e0e:	83 c4 10             	add    $0x10,%esp
f0111e11:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111e14:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111e18:	74 17                	je     f0111e31 <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f0111e1a:	83 ec 04             	sub    $0x4,%esp
f0111e1d:	68 00 90 13 f0       	push   $0xf0139000
f0111e22:	68 de 00 00 00       	push   $0xde
f0111e27:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0111e2c:	e8 d4 e3 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0001000;
f0111e31:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111e38:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111e3d:	83 ec 08             	sub    $0x8,%esp
f0111e40:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e43:	50                   	push   %eax
f0111e44:	e8 0b 60 ff ff       	call   f0107e54 <pt_clear_page_table_entry>
f0111e49:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111e4c:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111e51:	83 ec 08             	sub    $0x8,%esp
f0111e54:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e57:	50                   	push   %eax
f0111e58:	e8 cf 49 00 00       	call   f011682c <CE>
f0111e5d:	83 c4 10             	add    $0x10,%esp
f0111e60:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111e63:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111e67:	74 17                	je     f0111e80 <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f0111e69:	83 ec 04             	sub    $0x4,%esp
f0111e6c:	68 2c 90 13 f0       	push   $0xf013902c
f0111e71:	68 e6 00 00 00       	push   $0xe6
f0111e76:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0111e7b:	e8 85 e3 fe ff       	call   f0100205 <_panic>
	}

	va = 0xEF800000;
f0111e80:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111e87:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111e8c:	83 ec 08             	sub    $0x8,%esp
f0111e8f:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e92:	50                   	push   %eax
f0111e93:	e8 bc 5f ff ff       	call   f0107e54 <pt_clear_page_table_entry>
f0111e98:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111e9b:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111ea0:	83 ec 08             	sub    $0x8,%esp
f0111ea3:	ff 75 f4             	pushl  -0xc(%ebp)
f0111ea6:	50                   	push   %eax
f0111ea7:	e8 80 49 00 00       	call   f011682c <CE>
f0111eac:	83 c4 10             	add    $0x10,%esp
f0111eaf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111eb2:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111eb6:	74 17                	je     f0111ecf <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f0111eb8:	83 ec 04             	sub    $0x4,%esp
f0111ebb:	68 58 90 13 f0       	push   $0xf0139058
f0111ec0:	68 ee 00 00 00       	push   $0xee
f0111ec5:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0111eca:	e8 36 e3 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0000000;
f0111ecf:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111ed6:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111edb:	83 ec 08             	sub    $0x8,%esp
f0111ede:	ff 75 f4             	pushl  -0xc(%ebp)
f0111ee1:	50                   	push   %eax
f0111ee2:	e8 6d 5f ff ff       	call   f0107e54 <pt_clear_page_table_entry>
f0111ee7:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111eea:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111eef:	83 ec 08             	sub    $0x8,%esp
f0111ef2:	ff 75 f4             	pushl  -0xc(%ebp)
f0111ef5:	50                   	push   %eax
f0111ef6:	e8 31 49 00 00       	call   f011682c <CE>
f0111efb:	83 c4 10             	add    $0x10,%esp
f0111efe:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111f01:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111f05:	74 17                	je     f0111f1e <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f0111f07:	83 ec 04             	sub    $0x4,%esp
f0111f0a:	68 84 90 13 f0       	push   $0xf0139084
f0111f0f:	68 f6 00 00 00       	push   $0xf6
f0111f14:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0111f19:	e8 e7 e2 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f0111f1e:	83 ec 0c             	sub    $0xc,%esp
f0111f21:	68 b0 90 13 f0       	push   $0xf01390b0
f0111f26:	e8 e3 ed fe ff       	call   f0100d0e <cprintf>
f0111f2b:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111f2e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111f33:	c9                   	leave  
f0111f34:	c3                   	ret    

f0111f35 <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f0111f35:	55                   	push   %ebp
f0111f36:	89 e5                	mov    %esp,%ebp
f0111f38:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f0111f3b:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111f42:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111f47:	83 ec 08             	sub    $0x8,%esp
f0111f4a:	ff 75 f4             	pushl  -0xc(%ebp)
f0111f4d:	50                   	push   %eax
f0111f4e:	e8 01 5f ff ff       	call   f0107e54 <pt_clear_page_table_entry>
f0111f53:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f0111f56:	83 ec 04             	sub    $0x4,%esp
f0111f59:	68 fc 90 13 f0       	push   $0xf01390fc
f0111f5e:	68 01 01 00 00       	push   $0x101
f0111f63:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0111f68:	e8 98 e2 fe ff       	call   f0100205 <_panic>

f0111f6d <test_virtual_to_physical>:

//=====================================
// 4) TEST CONVERTING VA 2 PA:
//=====================================
int test_virtual_to_physical()
{
f0111f6d:	55                   	push   %ebp
f0111f6e:	89 e5                	mov    %esp,%ebp
f0111f70:	57                   	push   %edi
f0111f71:	56                   	push   %esi
f0111f72:	53                   	push   %ebx
f0111f73:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	int kilo = 1024 ;
f0111f79:	c7 45 e4 00 04 00 00 	movl   $0x400,-0x1c(%ebp)
	int mega = 1024*1024 ;
f0111f80:	c7 45 e0 00 00 10 00 	movl   $0x100000,-0x20(%ebp)
	uint32 va;
	ClearUserSpace(ptr_page_directory);
f0111f87:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111f8c:	83 ec 0c             	sub    $0xc,%esp
f0111f8f:	50                   	push   %eax
f0111f90:	e8 79 49 00 00       	call   f011690e <ClearUserSpace>
f0111f95:	83 c4 10             	add    $0x10,%esp

	//============================
	//Case 1: Check getting pa of a va with NO table
	va = 0xeebfe000;
f0111f98:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	int pa = virtual_to_physical(ptr_page_directory, va);
f0111f9f:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111fa4:	83 ec 08             	sub    $0x8,%esp
f0111fa7:	ff 75 dc             	pushl  -0x24(%ebp)
f0111faa:	50                   	push   %eax
f0111fab:	e8 17 5f ff ff       	call   f0107ec7 <virtual_to_physical>
f0111fb0:	83 c4 10             	add    $0x10,%esp
f0111fb3:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %d\n", va, CA(ptr_page_directory, va), pa);
	if(pa != -1)
f0111fb6:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
f0111fba:	74 17                	je     f0111fd3 <test_virtual_to_physical+0x66>
		panic("[EVAL] #1 Test of virtual_to_physical Entry Failed.\n");
f0111fbc:	83 ec 04             	sub    $0x4,%esp
f0111fbf:	68 94 91 13 f0       	push   $0xf0139194
f0111fc4:	68 16 01 00 00       	push   $0x116
f0111fc9:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0111fce:	e8 32 e2 fe ff       	call   f0100205 <_panic>

	//============================
	//Case 2: Check getting pa of a va with a table
	va = 0xf0000000;
f0111fd3:	c7 45 dc 00 00 00 f0 	movl   $0xf0000000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111fda:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111fdf:	83 ec 08             	sub    $0x8,%esp
f0111fe2:	ff 75 dc             	pushl  -0x24(%ebp)
f0111fe5:	50                   	push   %eax
f0111fe6:	e8 dc 5e ff ff       	call   f0107ec7 <virtual_to_physical>
f0111feb:	83 c4 10             	add    $0x10,%esp
f0111fee:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111ff1:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0111ff6:	83 ec 08             	sub    $0x8,%esp
f0111ff9:	ff 75 dc             	pushl  -0x24(%ebp)
f0111ffc:	50                   	push   %eax
f0111ffd:	e8 0b 48 00 00       	call   f011680d <CA>
f0112002:	83 c4 10             	add    $0x10,%esp
f0112005:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0112008:	74 17                	je     f0112021 <test_virtual_to_physical+0xb4>
		panic("[EVAL] #2 Test of virtual_to_physical Entry Failed.\n");
f011200a:	83 ec 04             	sub    $0x4,%esp
f011200d:	68 cc 91 13 f0       	push   $0xf01391cc
f0112012:	68 1f 01 00 00       	push   $0x11f
f0112017:	68 3e 8d 13 f0       	push   $0xf0138d3e
f011201c:	e8 e4 e1 fe ff       	call   f0100205 <_panic>

	//============================
	char ap1[100] = "ap 0x2800000";execute_command(ap1);
f0112021:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0112027:	bb 98 93 13 f0       	mov    $0xf0139398,%ebx
f011202c:	ba 0d 00 00 00       	mov    $0xd,%edx
f0112031:	89 c7                	mov    %eax,%edi
f0112033:	89 de                	mov    %ebx,%esi
f0112035:	89 d1                	mov    %edx,%ecx
f0112037:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112039:	8d 55 81             	lea    -0x7f(%ebp),%edx
f011203c:	b9 57 00 00 00       	mov    $0x57,%ecx
f0112041:	b0 00                	mov    $0x0,%al
f0112043:	89 d7                	mov    %edx,%edi
f0112045:	f3 aa                	rep stos %al,%es:(%edi)
f0112047:	83 ec 0c             	sub    $0xc,%esp
f011204a:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0112050:	50                   	push   %eax
f0112051:	e8 1a ed fe ff       	call   f0100d70 <execute_command>
f0112056:	83 c4 10             	add    $0x10,%esp
	va = 0x2800000;
f0112059:	c7 45 dc 00 00 80 02 	movl   $0x2800000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0112060:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0112065:	83 ec 08             	sub    $0x8,%esp
f0112068:	ff 75 dc             	pushl  -0x24(%ebp)
f011206b:	50                   	push   %eax
f011206c:	e8 56 5e ff ff       	call   f0107ec7 <virtual_to_physical>
f0112071:	83 c4 10             	add    $0x10,%esp
f0112074:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0112077:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f011207c:	83 ec 08             	sub    $0x8,%esp
f011207f:	ff 75 dc             	pushl  -0x24(%ebp)
f0112082:	50                   	push   %eax
f0112083:	e8 85 47 00 00       	call   f011680d <CA>
f0112088:	83 c4 10             	add    $0x10,%esp
f011208b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011208e:	74 17                	je     f01120a7 <test_virtual_to_physical+0x13a>
		panic("[EVAL] #3 Test of virtual_to_physical Entry Failed.\n");
f0112090:	83 ec 04             	sub    $0x4,%esp
f0112093:	68 04 92 13 f0       	push   $0xf0139204
f0112098:	68 28 01 00 00       	push   $0x128
f011209d:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01120a2:	e8 5e e1 fe ff       	call   f0100205 <_panic>

	//============================
	char ap2[100] = "ap 0x2801000";execute_command(ap2);
f01120a7:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01120ad:	bb fc 93 13 f0       	mov    $0xf01393fc,%ebx
f01120b2:	ba 0d 00 00 00       	mov    $0xd,%edx
f01120b7:	89 c7                	mov    %eax,%edi
f01120b9:	89 de                	mov    %ebx,%esi
f01120bb:	89 d1                	mov    %edx,%ecx
f01120bd:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01120bf:	8d 95 1d ff ff ff    	lea    -0xe3(%ebp),%edx
f01120c5:	b9 57 00 00 00       	mov    $0x57,%ecx
f01120ca:	b0 00                	mov    $0x0,%al
f01120cc:	89 d7                	mov    %edx,%edi
f01120ce:	f3 aa                	rep stos %al,%es:(%edi)
f01120d0:	83 ec 0c             	sub    $0xc,%esp
f01120d3:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01120d9:	50                   	push   %eax
f01120da:	e8 91 ec fe ff       	call   f0100d70 <execute_command>
f01120df:	83 c4 10             	add    $0x10,%esp
	va = 0x2801000;
f01120e2:	c7 45 dc 00 10 80 02 	movl   $0x2801000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f01120e9:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f01120ee:	83 ec 08             	sub    $0x8,%esp
f01120f1:	ff 75 dc             	pushl  -0x24(%ebp)
f01120f4:	50                   	push   %eax
f01120f5:	e8 cd 5d ff ff       	call   f0107ec7 <virtual_to_physical>
f01120fa:	83 c4 10             	add    $0x10,%esp
f01120fd:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0112100:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0112105:	83 ec 08             	sub    $0x8,%esp
f0112108:	ff 75 dc             	pushl  -0x24(%ebp)
f011210b:	50                   	push   %eax
f011210c:	e8 fc 46 00 00       	call   f011680d <CA>
f0112111:	83 c4 10             	add    $0x10,%esp
f0112114:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0112117:	74 17                	je     f0112130 <test_virtual_to_physical+0x1c3>
		panic("[EVAL] #4 Test of virtual_to_physical Entry Failed.\n");
f0112119:	83 ec 04             	sub    $0x4,%esp
f011211c:	68 3c 92 13 f0       	push   $0xf013923c
f0112121:	68 31 01 00 00       	push   $0x131
f0112126:	68 3e 8d 13 f0       	push   $0xf0138d3e
f011212b:	e8 d5 e0 fe ff       	call   f0100205 <_panic>

	//============================
	char ap3[100] = "ap 0x2802000";execute_command(ap3);
f0112130:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f0112136:	bb 60 94 13 f0       	mov    $0xf0139460,%ebx
f011213b:	ba 0d 00 00 00       	mov    $0xd,%edx
f0112140:	89 c7                	mov    %eax,%edi
f0112142:	89 de                	mov    %ebx,%esi
f0112144:	89 d1                	mov    %edx,%ecx
f0112146:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112148:	8d 95 b9 fe ff ff    	lea    -0x147(%ebp),%edx
f011214e:	b9 57 00 00 00       	mov    $0x57,%ecx
f0112153:	b0 00                	mov    $0x0,%al
f0112155:	89 d7                	mov    %edx,%edi
f0112157:	f3 aa                	rep stos %al,%es:(%edi)
f0112159:	83 ec 0c             	sub    $0xc,%esp
f011215c:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f0112162:	50                   	push   %eax
f0112163:	e8 08 ec fe ff       	call   f0100d70 <execute_command>
f0112168:	83 c4 10             	add    $0x10,%esp
	va = 0x2802000;
f011216b:	c7 45 dc 00 20 80 02 	movl   $0x2802000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0112172:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0112177:	83 ec 08             	sub    $0x8,%esp
f011217a:	ff 75 dc             	pushl  -0x24(%ebp)
f011217d:	50                   	push   %eax
f011217e:	e8 44 5d ff ff       	call   f0107ec7 <virtual_to_physical>
f0112183:	83 c4 10             	add    $0x10,%esp
f0112186:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0112189:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f011218e:	83 ec 08             	sub    $0x8,%esp
f0112191:	ff 75 dc             	pushl  -0x24(%ebp)
f0112194:	50                   	push   %eax
f0112195:	e8 73 46 00 00       	call   f011680d <CA>
f011219a:	83 c4 10             	add    $0x10,%esp
f011219d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01121a0:	74 17                	je     f01121b9 <test_virtual_to_physical+0x24c>
		panic("[EVAL] #5 Test of virtual_to_physical Entry Failed.\n");
f01121a2:	83 ec 04             	sub    $0x4,%esp
f01121a5:	68 74 92 13 f0       	push   $0xf0139274
f01121aa:	68 3a 01 00 00       	push   $0x13a
f01121af:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01121b4:	e8 4c e0 fe ff       	call   f0100205 <_panic>

	//============================
	va = 0xF0001000;
f01121b9:	c7 45 dc 00 10 00 f0 	movl   $0xf0001000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f01121c0:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f01121c5:	83 ec 08             	sub    $0x8,%esp
f01121c8:	ff 75 dc             	pushl  -0x24(%ebp)
f01121cb:	50                   	push   %eax
f01121cc:	e8 f6 5c ff ff       	call   f0107ec7 <virtual_to_physical>
f01121d1:	83 c4 10             	add    $0x10,%esp
f01121d4:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01121d7:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f01121dc:	83 ec 08             	sub    $0x8,%esp
f01121df:	ff 75 dc             	pushl  -0x24(%ebp)
f01121e2:	50                   	push   %eax
f01121e3:	e8 25 46 00 00       	call   f011680d <CA>
f01121e8:	83 c4 10             	add    $0x10,%esp
f01121eb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01121ee:	74 17                	je     f0112207 <test_virtual_to_physical+0x29a>
		panic("[EVAL] #6 Test of virtual_to_physical Entry Failed.\n");
f01121f0:	83 ec 04             	sub    $0x4,%esp
f01121f3:	68 ac 92 13 f0       	push   $0xf01392ac
f01121f8:	68 42 01 00 00       	push   $0x142
f01121fd:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0112202:	e8 fe df fe ff       	call   f0100205 <_panic>

	//============================
	va = 0xF0001005;
f0112207:	c7 45 dc 05 10 00 f0 	movl   $0xf0001005,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f011220e:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0112213:	83 ec 08             	sub    $0x8,%esp
f0112216:	ff 75 dc             	pushl  -0x24(%ebp)
f0112219:	50                   	push   %eax
f011221a:	e8 a8 5c ff ff       	call   f0107ec7 <virtual_to_physical>
f011221f:	83 c4 10             	add    $0x10,%esp
f0112222:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0112225:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f011222a:	83 ec 08             	sub    $0x8,%esp
f011222d:	ff 75 dc             	pushl  -0x24(%ebp)
f0112230:	50                   	push   %eax
f0112231:	e8 d7 45 00 00       	call   f011680d <CA>
f0112236:	83 c4 10             	add    $0x10,%esp
f0112239:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011223c:	74 17                	je     f0112255 <test_virtual_to_physical+0x2e8>
		panic("[EVAL] #7 Test of virtual_to_physical Entry Failed.\n");
f011223e:	83 ec 04             	sub    $0x4,%esp
f0112241:	68 e4 92 13 f0       	push   $0xf01392e4
f0112246:	68 4a 01 00 00       	push   $0x14a
f011224b:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0112250:	e8 b0 df fe ff       	call   f0100205 <_panic>

	//============================
	char ap4[100] = "ap 0xeebfe000";execute_command(ap4);
f0112255:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f011225b:	bb c4 94 13 f0       	mov    $0xf01394c4,%ebx
f0112260:	ba 0e 00 00 00       	mov    $0xe,%edx
f0112265:	89 c7                	mov    %eax,%edi
f0112267:	89 de                	mov    %ebx,%esi
f0112269:	89 d1                	mov    %edx,%ecx
f011226b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011226d:	8d 95 56 fe ff ff    	lea    -0x1aa(%ebp),%edx
f0112273:	b9 56 00 00 00       	mov    $0x56,%ecx
f0112278:	b0 00                	mov    $0x0,%al
f011227a:	89 d7                	mov    %edx,%edi
f011227c:	f3 aa                	rep stos %al,%es:(%edi)
f011227e:	83 ec 0c             	sub    $0xc,%esp
f0112281:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f0112287:	50                   	push   %eax
f0112288:	e8 e3 ea fe ff       	call   f0100d70 <execute_command>
f011228d:	83 c4 10             	add    $0x10,%esp
	va = 0xeebfe000;
f0112290:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0112297:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f011229c:	83 ec 08             	sub    $0x8,%esp
f011229f:	ff 75 dc             	pushl  -0x24(%ebp)
f01122a2:	50                   	push   %eax
f01122a3:	e8 1f 5c ff ff       	call   f0107ec7 <virtual_to_physical>
f01122a8:	83 c4 10             	add    $0x10,%esp
f01122ab:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01122ae:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f01122b3:	83 ec 08             	sub    $0x8,%esp
f01122b6:	ff 75 dc             	pushl  -0x24(%ebp)
f01122b9:	50                   	push   %eax
f01122ba:	e8 4e 45 00 00       	call   f011680d <CA>
f01122bf:	83 c4 10             	add    $0x10,%esp
f01122c2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01122c5:	74 17                	je     f01122de <test_virtual_to_physical+0x371>
		panic("[EVAL] #8 Test of virtual_to_physical Entry Failed.\n");
f01122c7:	83 ec 04             	sub    $0x4,%esp
f01122ca:	68 1c 93 13 f0       	push   $0xf013931c
f01122cf:	68 53 01 00 00       	push   $0x153
f01122d4:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01122d9:	e8 27 df fe ff       	call   f0100205 <_panic>

	//============================
	cprintf("Congratulations!! test virtual_to_physical completed successfully.\n");
f01122de:	83 ec 0c             	sub    $0xc,%esp
f01122e1:	68 54 93 13 f0       	push   $0xf0139354
f01122e6:	e8 23 ea fe ff       	call   f0100d0e <cprintf>
f01122eb:	83 c4 10             	add    $0x10,%esp

	return 0;
f01122ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01122f3:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01122f6:	5b                   	pop    %ebx
f01122f7:	5e                   	pop    %esi
f01122f8:	5f                   	pop    %edi
f01122f9:	5d                   	pop    %ebp
f01122fa:	c3                   	ret    

f01122fb <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f01122fb:	55                   	push   %ebp
f01122fc:	89 e5                	mov    %esp,%ebp
f01122fe:	57                   	push   %edi
f01122ff:	56                   	push   %esi
f0112300:	53                   	push   %ebx
f0112301:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112307:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f011230d:	bb d8 97 13 f0       	mov    $0xf01397d8,%ebx
f0112312:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112317:	89 c7                	mov    %eax,%edi
f0112319:	89 de                	mov    %ebx,%esi
f011231b:	89 d1                	mov    %edx,%ecx
f011231d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011231f:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0112325:	b9 23 00 00 00       	mov    $0x23,%ecx
f011232a:	b0 00                	mov    $0x0,%al
f011232c:	89 d7                	mov    %edx,%edi
f011232e:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0112330:	6a 00                	push   $0x0
f0112332:	6a 0a                	push   $0xa
f0112334:	6a 14                	push   $0x14
f0112336:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f011233c:	50                   	push   %eax
f011233d:	e8 dd 6f ff ff       	call   f010931f <env_create>
f0112342:	83 c4 10             	add    $0x10,%esp
f0112345:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112348:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011234b:	8b 40 5c             	mov    0x5c(%eax),%eax
f011234e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0112351:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112354:	8b 40 60             	mov    0x60(%eax),%eax
f0112357:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f011235a:	8b 45 90             	mov    -0x70(%ebp),%eax
f011235d:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0112360:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f0112367:	75 70 20 
f011236a:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f0112371:	00 00 00 
f0112374:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f011237a:	b9 03 00 00 00       	mov    $0x3,%ecx
f011237f:	b8 00 00 00 00       	mov    $0x0,%eax
f0112384:	89 d7                	mov    %edx,%edi
f0112386:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0112388:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011238b:	8b 40 4c             	mov    0x4c(%eax),%eax
f011238e:	83 ec 08             	sub    $0x8,%esp
f0112391:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0112397:	52                   	push   %edx
f0112398:	50                   	push   %eax
f0112399:	e8 6f fb 01 00       	call   f0131f0d <ltostr>
f011239e:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01123a1:	83 ec 04             	sub    $0x4,%esp
f01123a4:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01123aa:	50                   	push   %eax
f01123ab:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f01123b1:	50                   	push   %eax
f01123b2:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f01123b8:	50                   	push   %eax
f01123b9:	e8 47 fc 01 00       	call   f0132005 <strcconcat>
f01123be:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f01123c1:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f01123c8:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f01123cf:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f01123d6:	83 ec 0c             	sub    $0xc,%esp
f01123d9:	ff 75 d4             	pushl  -0x2c(%ebp)
f01123dc:	e8 2d 45 00 00       	call   f011690e <ClearUserSpace>
f01123e1:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f01123e4:	83 ec 04             	sub    $0x4,%esp
f01123e7:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f01123ed:	50                   	push   %eax
f01123ee:	68 28 95 13 f0       	push   $0xf0139528
f01123f3:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01123f9:	50                   	push   %eax
f01123fa:	e8 06 fc 01 00       	call   f0132005 <strcconcat>
f01123ff:	83 c4 10             	add    $0x10,%esp
f0112402:	83 ec 0c             	sub    $0xc,%esp
f0112405:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f011240b:	50                   	push   %eax
f011240c:	e8 5f e9 fe ff       	call   f0100d70 <execute_command>
f0112411:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f0112414:	83 ec 04             	sub    $0x4,%esp
f0112417:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f011241d:	50                   	push   %eax
f011241e:	68 33 95 13 f0       	push   $0xf0139533
f0112423:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112429:	50                   	push   %eax
f011242a:	e8 d6 fb 01 00       	call   f0132005 <strcconcat>
f011242f:	83 c4 10             	add    $0x10,%esp
f0112432:	83 ec 0c             	sub    $0xc,%esp
f0112435:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f011243b:	50                   	push   %eax
f011243c:	e8 2f e9 fe ff       	call   f0100d70 <execute_command>
f0112441:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f0112444:	83 ec 04             	sub    $0x4,%esp
f0112447:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f011244d:	50                   	push   %eax
f011244e:	68 3e 95 13 f0       	push   $0xf013953e
f0112453:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112459:	50                   	push   %eax
f011245a:	e8 a6 fb 01 00       	call   f0132005 <strcconcat>
f011245f:	83 c4 10             	add    $0x10,%esp
f0112462:	83 ec 0c             	sub    $0xc,%esp
f0112465:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f011246b:	50                   	push   %eax
f011246c:	e8 ff e8 fe ff       	call   f0100d70 <execute_command>
f0112471:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f0112474:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f011247b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011247e:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f0112481:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f0112488:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011248b:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f011248e:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f0112495:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112498:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f011249b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011249e:	83 ec 08             	sub    $0x8,%esp
f01124a1:	50                   	push   %eax
f01124a2:	ff 75 d4             	pushl  -0x2c(%ebp)
f01124a5:	e8 45 44 00 00       	call   f01168ef <GP>
f01124aa:	83 c4 10             	add    $0x10,%esp
f01124ad:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f01124b0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f01124b7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f01124be:	e8 96 ab ff ff       	call   f010d059 <sys_calculate_free_frames>
f01124c3:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f01124c6:	83 ec 0c             	sub    $0xc,%esp
f01124c9:	68 4c 95 13 f0       	push   $0xf013954c
f01124ce:	e8 3b e8 fe ff       	call   f0100d0e <cprintf>
f01124d3:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f01124d6:	6a 03                	push   $0x3
f01124d8:	68 00 00 90 02       	push   $0x2900000
f01124dd:	68 00 00 80 02       	push   $0x2800000
f01124e2:	ff 75 d4             	pushl  -0x2c(%ebp)
f01124e5:	e8 14 64 ff ff       	call   f01088fe <cut_paste_pages>
f01124ea:	83 c4 10             	add    $0x10,%esp
f01124ed:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f01124f0:	e8 64 ab ff ff       	call   f010d059 <sys_calculate_free_frames>
f01124f5:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f01124f8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f01124ff:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0112503:	75 08                	jne    f011250d <test_cut_paste_pages+0x212>
f0112505:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112508:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011250b:	74 2b                	je     f0112538 <test_cut_paste_pages+0x23d>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f011250d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112510:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112513:	83 ec 0c             	sub    $0xc,%esp
f0112516:	50                   	push   %eax
f0112517:	ff 75 b4             	pushl  -0x4c(%ebp)
f011251a:	68 7c 95 13 f0       	push   $0xf013957c
f011251f:	68 91 01 00 00       	push   $0x191
f0112524:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0112529:	e8 e5 de fe ff       	call   f0100413 <_warn>
f011252e:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112531:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f0112538:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011253c:	74 04                	je     f0112542 <test_cut_paste_pages+0x247>
f011253e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112542:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0112549:	83 ec 08             	sub    $0x8,%esp
f011254c:	6a 00                	push   $0x0
f011254e:	6a 01                	push   $0x1
f0112550:	6a 00                	push   $0x0
f0112552:	68 ff 0f 00 00       	push   $0xfff
f0112557:	ff 75 bc             	pushl  -0x44(%ebp)
f011255a:	6a 01                	push   $0x1
f011255c:	68 00 30 00 00       	push   $0x3000
f0112561:	68 00 00 90 02       	push   $0x2900000
f0112566:	68 00 00 80 02       	push   $0x2800000
f011256b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011256e:	e8 cf 43 00 00       	call   f0116942 <CCP>
f0112573:	83 c4 30             	add    $0x30,%esp
f0112576:	83 f8 01             	cmp    $0x1,%eax
f0112579:	74 21                	je     f011259c <test_cut_paste_pages+0x2a1>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f011257b:	83 ec 04             	sub    $0x4,%esp
f011257e:	68 d0 95 13 f0       	push   $0xf01395d0
f0112583:	68 99 01 00 00       	push   $0x199
f0112588:	68 3e 8d 13 f0       	push   $0xf0138d3e
f011258d:	e8 81 de fe ff       	call   f0100413 <_warn>
f0112592:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112595:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f011259c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01125a0:	74 04                	je     f01125a6 <test_cut_paste_pages+0x2ab>
f01125a2:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f01125a6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f01125ad:	83 ec 04             	sub    $0x4,%esp
f01125b0:	6a 00                	push   $0x0
f01125b2:	68 00 00 90 02       	push   $0x2900000
f01125b7:	ff 75 d4             	pushl  -0x2c(%ebp)
f01125ba:	e8 5f 41 00 00       	call   f011671e <CB>
f01125bf:	83 c4 10             	add    $0x10,%esp
f01125c2:	85 c0                	test   %eax,%eax
f01125c4:	0f 84 f6 00 00 00    	je     f01126c0 <test_cut_paste_pages+0x3c5>
f01125ca:	83 ec 04             	sub    $0x4,%esp
f01125cd:	6a 00                	push   $0x0
f01125cf:	68 00 10 90 02       	push   $0x2901000
f01125d4:	ff 75 d4             	pushl  -0x2c(%ebp)
f01125d7:	e8 42 41 00 00       	call   f011671e <CB>
f01125dc:	83 c4 10             	add    $0x10,%esp
f01125df:	85 c0                	test   %eax,%eax
f01125e1:	0f 84 d9 00 00 00    	je     f01126c0 <test_cut_paste_pages+0x3c5>
f01125e7:	83 ec 04             	sub    $0x4,%esp
f01125ea:	6a 00                	push   $0x0
f01125ec:	68 00 20 90 02       	push   $0x2902000
f01125f1:	ff 75 d4             	pushl  -0x2c(%ebp)
f01125f4:	e8 25 41 00 00       	call   f011671e <CB>
f01125f9:	83 c4 10             	add    $0x10,%esp
f01125fc:	85 c0                	test   %eax,%eax
f01125fe:	0f 84 bc 00 00 00    	je     f01126c0 <test_cut_paste_pages+0x3c5>
	{
		ptr1 = (char*)0x2900000;
f0112604:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f011260b:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f0112612:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f0112619:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011261c:	8a 00                	mov    (%eax),%al
f011261e:	3c 61                	cmp    $0x61,%al
f0112620:	75 12                	jne    f0112634 <test_cut_paste_pages+0x339>
f0112622:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112625:	8a 00                	mov    (%eax),%al
f0112627:	3c 62                	cmp    $0x62,%al
f0112629:	75 09                	jne    f0112634 <test_cut_paste_pages+0x339>
f011262b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011262e:	8a 00                	mov    (%eax),%al
f0112630:	3c 63                	cmp    $0x63,%al
f0112632:	74 21                	je     f0112655 <test_cut_paste_pages+0x35a>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112634:	83 ec 04             	sub    $0x4,%esp
f0112637:	68 1c 96 13 f0       	push   $0xf013961c
f011263c:	68 a6 01 00 00       	push   $0x1a6
f0112641:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0112646:	e8 c8 dd fe ff       	call   f0100413 <_warn>
f011264b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011264e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112655:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112659:	74 04                	je     f011265f <test_cut_paste_pages+0x364>
f011265b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011265f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f0112666:	83 ec 04             	sub    $0x4,%esp
f0112669:	6a 01                	push   $0x1
f011266b:	68 00 10 90 02       	push   $0x2901000
f0112670:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112673:	e8 a6 40 00 00       	call   f011671e <CB>
f0112678:	83 c4 10             	add    $0x10,%esp
f011267b:	85 c0                	test   %eax,%eax
f011267d:	74 41                	je     f01126c0 <test_cut_paste_pages+0x3c5>
		{
			*ptr2 = 'y';
f011267f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112682:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f0112685:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112688:	8a 00                	mov    (%eax),%al
f011268a:	3c 79                	cmp    $0x79,%al
f011268c:	74 21                	je     f01126af <test_cut_paste_pages+0x3b4>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011268e:	83 ec 04             	sub    $0x4,%esp
f0112691:	68 1c 96 13 f0       	push   $0xf013961c
f0112696:	68 b1 01 00 00       	push   $0x1b1
f011269b:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01126a0:	e8 6e dd fe ff       	call   f0100413 <_warn>
f01126a5:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01126a8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f01126af:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01126b3:	74 04                	je     f01126b9 <test_cut_paste_pages+0x3be>
f01126b5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01126b9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f01126c0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01126c3:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f01126c6:	6a 02                	push   $0x2
f01126c8:	68 00 f0 bf 02       	push   $0x2bff000
f01126cd:	68 00 10 90 02       	push   $0x2901000
f01126d2:	ff 75 d4             	pushl  -0x2c(%ebp)
f01126d5:	e8 24 62 ff ff       	call   f01088fe <cut_paste_pages>
f01126da:	83 c4 10             	add    $0x10,%esp
f01126dd:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01126e0:	e8 74 a9 ff ff       	call   f010d059 <sys_calculate_free_frames>
f01126e5:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f01126e8:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f01126ec:	75 0b                	jne    f01126f9 <test_cut_paste_pages+0x3fe>
f01126ee:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01126f1:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01126f4:	83 f8 01             	cmp    $0x1,%eax
f01126f7:	74 2b                	je     f0112724 <test_cut_paste_pages+0x429>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f01126f9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01126fc:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01126ff:	83 ec 0c             	sub    $0xc,%esp
f0112702:	50                   	push   %eax
f0112703:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112706:	68 7c 95 13 f0       	push   $0xf013957c
f011270b:	68 c2 01 00 00       	push   $0x1c2
f0112710:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0112715:	e8 f9 dc fe ff       	call   f0100413 <_warn>
f011271a:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011271d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112724:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112728:	74 04                	je     f011272e <test_cut_paste_pages+0x433>
f011272a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f011272e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0112735:	83 ec 08             	sub    $0x8,%esp
f0112738:	6a 00                	push   $0x0
f011273a:	6a 01                	push   $0x1
f011273c:	6a 00                	push   $0x0
f011273e:	68 ff 0f 00 00       	push   $0xfff
f0112743:	ff 75 bc             	pushl  -0x44(%ebp)
f0112746:	6a 01                	push   $0x1
f0112748:	68 00 20 00 00       	push   $0x2000
f011274d:	68 00 f0 bf 02       	push   $0x2bff000
f0112752:	68 00 10 90 02       	push   $0x2901000
f0112757:	ff 75 d4             	pushl  -0x2c(%ebp)
f011275a:	e8 e3 41 00 00       	call   f0116942 <CCP>
f011275f:	83 c4 30             	add    $0x30,%esp
f0112762:	83 f8 01             	cmp    $0x1,%eax
f0112765:	74 21                	je     f0112788 <test_cut_paste_pages+0x48d>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0112767:	83 ec 04             	sub    $0x4,%esp
f011276a:	68 d0 95 13 f0       	push   $0xf01395d0
f011276f:	68 ca 01 00 00       	push   $0x1ca
f0112774:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0112779:	e8 95 dc fe ff       	call   f0100413 <_warn>
f011277e:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112781:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112788:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011278c:	74 04                	je     f0112792 <test_cut_paste_pages+0x497>
f011278e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112792:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f0112799:	83 ec 04             	sub    $0x4,%esp
f011279c:	6a 00                	push   $0x0
f011279e:	68 ff f7 bf 02       	push   $0x2bff7ff
f01127a3:	ff 75 d4             	pushl  -0x2c(%ebp)
f01127a6:	e8 73 3f 00 00       	call   f011671e <CB>
f01127ab:	83 c4 10             	add    $0x10,%esp
f01127ae:	85 c0                	test   %eax,%eax
f01127b0:	74 6b                	je     f011281d <test_cut_paste_pages+0x522>
f01127b2:	83 ec 04             	sub    $0x4,%esp
f01127b5:	6a 00                	push   $0x0
f01127b7:	68 ff 0f c0 02       	push   $0x2c00fff
f01127bc:	ff 75 d4             	pushl  -0x2c(%ebp)
f01127bf:	e8 5a 3f 00 00       	call   f011671e <CB>
f01127c4:	83 c4 10             	add    $0x10,%esp
f01127c7:	85 c0                	test   %eax,%eax
f01127c9:	74 52                	je     f011281d <test_cut_paste_pages+0x522>
	{
		ptr1 = (char*)0x2BFF7FF;
f01127cb:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f01127d2:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f01127d9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01127dc:	8a 00                	mov    (%eax),%al
f01127de:	3c 79                	cmp    $0x79,%al
f01127e0:	75 09                	jne    f01127eb <test_cut_paste_pages+0x4f0>
f01127e2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01127e5:	8a 00                	mov    (%eax),%al
f01127e7:	3c 63                	cmp    $0x63,%al
f01127e9:	74 21                	je     f011280c <test_cut_paste_pages+0x511>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01127eb:	83 ec 04             	sub    $0x4,%esp
f01127ee:	68 1c 96 13 f0       	push   $0xf013961c
f01127f3:	68 d6 01 00 00       	push   $0x1d6
f01127f8:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01127fd:	e8 11 dc fe ff       	call   f0100413 <_warn>
f0112802:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112805:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011280c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112810:	74 04                	je     f0112816 <test_cut_paste_pages+0x51b>
f0112812:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112816:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f011281d:	83 ec 0c             	sub    $0xc,%esp
f0112820:	68 55 96 13 f0       	push   $0xf0139655
f0112825:	e8 e4 e4 fe ff       	call   f0100d0e <cprintf>
f011282a:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f011282d:	83 ec 0c             	sub    $0xc,%esp
f0112830:	68 64 96 13 f0       	push   $0xf0139664
f0112835:	e8 d4 e4 fe ff       	call   f0100d0e <cprintf>
f011283a:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f011283d:	83 ec 04             	sub    $0x4,%esp
f0112840:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0112846:	50                   	push   %eax
f0112847:	68 8d 96 13 f0       	push   $0xf013968d
f011284c:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112852:	50                   	push   %eax
f0112853:	e8 ad f7 01 00       	call   f0132005 <strcconcat>
f0112858:	83 c4 10             	add    $0x10,%esp
f011285b:	83 ec 0c             	sub    $0xc,%esp
f011285e:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0112864:	50                   	push   %eax
f0112865:	e8 06 e5 fe ff       	call   f0100d70 <execute_command>
f011286a:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f011286d:	83 ec 04             	sub    $0x4,%esp
f0112870:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0112876:	50                   	push   %eax
f0112877:	68 98 96 13 f0       	push   $0xf0139698
f011287c:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112882:	50                   	push   %eax
f0112883:	e8 7d f7 01 00       	call   f0132005 <strcconcat>
f0112888:	83 c4 10             	add    $0x10,%esp
f011288b:	83 ec 0c             	sub    $0xc,%esp
f011288e:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0112894:	50                   	push   %eax
f0112895:	e8 d6 e4 fe ff       	call   f0100d70 <execute_command>
f011289a:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f011289d:	83 ec 04             	sub    $0x4,%esp
f01128a0:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f01128a6:	50                   	push   %eax
f01128a7:	68 a3 96 13 f0       	push   $0xf01396a3
f01128ac:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01128b2:	50                   	push   %eax
f01128b3:	e8 4d f7 01 00       	call   f0132005 <strcconcat>
f01128b8:	83 c4 10             	add    $0x10,%esp
f01128bb:	83 ec 0c             	sub    $0xc,%esp
f01128be:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f01128c4:	50                   	push   %eax
f01128c5:	e8 a6 e4 fe ff       	call   f0100d70 <execute_command>
f01128ca:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f01128cd:	83 ec 04             	sub    $0x4,%esp
f01128d0:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f01128d6:	50                   	push   %eax
f01128d7:	68 ae 96 13 f0       	push   $0xf01396ae
f01128dc:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01128e2:	50                   	push   %eax
f01128e3:	e8 1d f7 01 00       	call   f0132005 <strcconcat>
f01128e8:	83 c4 10             	add    $0x10,%esp
f01128eb:	83 ec 0c             	sub    $0xc,%esp
f01128ee:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f01128f4:	50                   	push   %eax
f01128f5:	e8 76 e4 fe ff       	call   f0100d70 <execute_command>
f01128fa:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f01128fd:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f0112904:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112907:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f011290a:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f0112911:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112914:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f0112917:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f011291e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112921:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f0112924:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f011292b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011292e:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f0112931:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f0112938:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011293b:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f011293e:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f0112945:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112948:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f011294b:	83 ec 08             	sub    $0x8,%esp
f011294e:	68 00 00 c0 01       	push   $0x1c00000
f0112953:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112956:	e8 94 3f 00 00       	call   f01168ef <GP>
f011295b:	83 c4 10             	add    $0x10,%esp
f011295e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f0112961:	83 ec 08             	sub    $0x8,%esp
f0112964:	68 00 00 40 01       	push   $0x1400000
f0112969:	ff 75 d4             	pushl  -0x2c(%ebp)
f011296c:	e8 7e 3f 00 00       	call   f01168ef <GP>
f0112971:	83 c4 10             	add    $0x10,%esp
f0112974:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f0112977:	e8 dd a6 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011297c:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f011297f:	6a 01                	push   $0x1
f0112981:	68 00 00 40 01       	push   $0x1400000
f0112986:	68 00 00 c0 01       	push   $0x1c00000
f011298b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011298e:	e8 6b 5f ff ff       	call   f01088fe <cut_paste_pages>
f0112993:	83 c4 10             	add    $0x10,%esp
f0112996:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112999:	e8 bb a6 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011299e:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f01129a1:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f01129a5:	75 08                	jne    f01129af <test_cut_paste_pages+0x6b4>
f01129a7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01129aa:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01129ad:	74 2b                	je     f01129da <test_cut_paste_pages+0x6df>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f01129af:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01129b2:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01129b5:	83 ec 0c             	sub    $0xc,%esp
f01129b8:	50                   	push   %eax
f01129b9:	ff 75 b4             	pushl  -0x4c(%ebp)
f01129bc:	68 bc 96 13 f0       	push   $0xf01396bc
f01129c1:	68 f9 01 00 00       	push   $0x1f9
f01129c6:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01129cb:	e8 43 da fe ff       	call   f0100413 <_warn>
f01129d0:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01129d3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01129da:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01129de:	74 04                	je     f01129e4 <test_cut_paste_pages+0x6e9>
f01129e0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01129e4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f01129eb:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f01129f2:	83 ec 08             	sub    $0x8,%esp
f01129f5:	6a 00                	push   $0x0
f01129f7:	68 ff 0f 00 00       	push   $0xfff
f01129fc:	ff 75 a4             	pushl  -0x5c(%ebp)
f01129ff:	68 ff 0f 00 00       	push   $0xfff
f0112a04:	ff 75 a0             	pushl  -0x60(%ebp)
f0112a07:	6a 01                	push   $0x1
f0112a09:	68 00 10 00 00       	push   $0x1000
f0112a0e:	68 00 00 40 01       	push   $0x1400000
f0112a13:	68 00 00 c0 01       	push   $0x1c00000
f0112a18:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112a1b:	e8 22 3f 00 00       	call   f0116942 <CCP>
f0112a20:	83 c4 30             	add    $0x30,%esp
f0112a23:	83 f8 01             	cmp    $0x1,%eax
f0112a26:	74 28                	je     f0112a50 <test_cut_paste_pages+0x755>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0112a28:	83 ec 04             	sub    $0x4,%esp
f0112a2b:	68 d0 95 13 f0       	push   $0xf01395d0
f0112a30:	68 02 02 00 00       	push   $0x202
f0112a35:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0112a3a:	e8 d4 d9 fe ff       	call   f0100413 <_warn>
f0112a3f:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112a42:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0112a49:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112a50:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112a54:	74 04                	je     f0112a5a <test_cut_paste_pages+0x75f>
f0112a56:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112a5a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112a61:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112a65:	0f 84 92 00 00 00    	je     f0112afd <test_cut_paste_pages+0x802>
	{
		ptr1 = (char*)0x1400000;
f0112a6b:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112a72:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0112a79:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0112a80:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112a87:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0112a8e:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112a95:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112a98:	8a 00                	mov    (%eax),%al
f0112a9a:	3c 61                	cmp    $0x61,%al
f0112a9c:	75 2d                	jne    f0112acb <test_cut_paste_pages+0x7d0>
f0112a9e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112aa1:	8a 00                	mov    (%eax),%al
f0112aa3:	3c 78                	cmp    $0x78,%al
f0112aa5:	75 24                	jne    f0112acb <test_cut_paste_pages+0x7d0>
f0112aa7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112aaa:	8a 00                	mov    (%eax),%al
f0112aac:	3c 62                	cmp    $0x62,%al
f0112aae:	75 1b                	jne    f0112acb <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112ab0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112ab3:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112ab5:	3c 79                	cmp    $0x79,%al
f0112ab7:	75 12                	jne    f0112acb <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112ab9:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112abc:	8a 00                	mov    (%eax),%al
f0112abe:	3c 63                	cmp    $0x63,%al
f0112ac0:	75 09                	jne    f0112acb <test_cut_paste_pages+0x7d0>
f0112ac2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112ac5:	8a 00                	mov    (%eax),%al
f0112ac7:	3c 7a                	cmp    $0x7a,%al
f0112ac9:	74 21                	je     f0112aec <test_cut_paste_pages+0x7f1>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112acb:	83 ec 04             	sub    $0x4,%esp
f0112ace:	68 1c 96 13 f0       	push   $0xf013961c
f0112ad3:	68 14 02 00 00       	push   $0x214
f0112ad8:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0112add:	e8 31 d9 fe ff       	call   f0100413 <_warn>
f0112ae2:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112ae5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112aec:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112af0:	74 04                	je     f0112af6 <test_cut_paste_pages+0x7fb>
f0112af2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112af6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f0112afd:	e8 57 a5 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0112b02:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f0112b05:	6a 03                	push   $0x3
f0112b07:	68 00 f0 bf 01       	push   $0x1bff000
f0112b0c:	68 00 00 40 01       	push   $0x1400000
f0112b11:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b14:	e8 e5 5d ff ff       	call   f01088fe <cut_paste_pages>
f0112b19:	83 c4 10             	add    $0x10,%esp
f0112b1c:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112b1f:	e8 35 a5 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0112b24:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0112b27:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0112b2b:	75 08                	jne    f0112b35 <test_cut_paste_pages+0x83a>
f0112b2d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112b30:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112b33:	74 2b                	je     f0112b60 <test_cut_paste_pages+0x865>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112b35:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112b38:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112b3b:	83 ec 0c             	sub    $0xc,%esp
f0112b3e:	50                   	push   %eax
f0112b3f:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112b42:	68 bc 96 13 f0       	push   $0xf01396bc
f0112b47:	68 23 02 00 00       	push   $0x223
f0112b4c:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0112b51:	e8 bd d8 fe ff       	call   f0100413 <_warn>
f0112b56:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112b59:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112b60:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112b64:	74 04                	je     f0112b6a <test_cut_paste_pages+0x86f>
f0112b66:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112b6a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f0112b71:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112b78:	83 ec 04             	sub    $0x4,%esp
f0112b7b:	6a 00                	push   $0x0
f0112b7d:	68 00 00 40 01       	push   $0x1400000
f0112b82:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b85:	e8 94 3b 00 00       	call   f011671e <CB>
f0112b8a:	83 c4 10             	add    $0x10,%esp
f0112b8d:	83 f8 01             	cmp    $0x1,%eax
f0112b90:	0f 85 80 00 00 00    	jne    f0112c16 <test_cut_paste_pages+0x91b>
f0112b96:	83 ec 04             	sub    $0x4,%esp
f0112b99:	6a 00                	push   $0x0
f0112b9b:	68 00 10 40 01       	push   $0x1401000
f0112ba0:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112ba3:	e8 76 3b 00 00       	call   f011671e <CB>
f0112ba8:	83 c4 10             	add    $0x10,%esp
f0112bab:	83 f8 01             	cmp    $0x1,%eax
f0112bae:	75 66                	jne    f0112c16 <test_cut_paste_pages+0x91b>
f0112bb0:	83 ec 04             	sub    $0x4,%esp
f0112bb3:	6a 00                	push   $0x0
f0112bb5:	68 00 20 40 01       	push   $0x1402000
f0112bba:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112bbd:	e8 5c 3b 00 00       	call   f011671e <CB>
f0112bc2:	83 c4 10             	add    $0x10,%esp
f0112bc5:	83 f8 01             	cmp    $0x1,%eax
f0112bc8:	75 4c                	jne    f0112c16 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112bca:	83 ec 04             	sub    $0x4,%esp
f0112bcd:	6a 00                	push   $0x0
f0112bcf:	68 00 f0 bf 01       	push   $0x1bff000
f0112bd4:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112bd7:	e8 42 3b 00 00       	call   f011671e <CB>
f0112bdc:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112bdf:	85 c0                	test   %eax,%eax
f0112be1:	75 33                	jne    f0112c16 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112be3:	83 ec 04             	sub    $0x4,%esp
f0112be6:	6a 00                	push   $0x0
f0112be8:	68 00 00 c0 01       	push   $0x1c00000
f0112bed:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112bf0:	e8 29 3b 00 00       	call   f011671e <CB>
f0112bf5:	83 c4 10             	add    $0x10,%esp
f0112bf8:	83 f8 01             	cmp    $0x1,%eax
f0112bfb:	75 19                	jne    f0112c16 <test_cut_paste_pages+0x91b>
f0112bfd:	83 ec 04             	sub    $0x4,%esp
f0112c00:	6a 00                	push   $0x0
f0112c02:	68 00 10 c0 01       	push   $0x1c01000
f0112c07:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112c0a:	e8 0f 3b 00 00       	call   f011671e <CB>
f0112c0f:	83 c4 10             	add    $0x10,%esp
f0112c12:	85 c0                	test   %eax,%eax
f0112c14:	74 28                	je     f0112c3e <test_cut_paste_pages+0x943>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f0112c16:	83 ec 04             	sub    $0x4,%esp
f0112c19:	68 1c 97 13 f0       	push   $0xf013971c
f0112c1e:	68 2c 02 00 00       	push   $0x22c
f0112c23:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0112c28:	e8 e6 d7 fe ff       	call   f0100413 <_warn>
f0112c2d:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112c30:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0112c37:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112c3e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112c42:	74 04                	je     f0112c48 <test_cut_paste_pages+0x94d>
f0112c44:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112c48:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112c4f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112c53:	0f 84 99 00 00 00    	je     f0112cf2 <test_cut_paste_pages+0x9f7>
	{
		ptr1 = (char*)0x1400000;
f0112c59:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112c60:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0112c67:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0112c6e:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112c75:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0112c7c:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112c83:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112c86:	8a 00                	mov    (%eax),%al
f0112c88:	3c 61                	cmp    $0x61,%al
f0112c8a:	75 2d                	jne    f0112cb9 <test_cut_paste_pages+0x9be>
f0112c8c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112c8f:	8a 00                	mov    (%eax),%al
f0112c91:	3c 78                	cmp    $0x78,%al
f0112c93:	75 24                	jne    f0112cb9 <test_cut_paste_pages+0x9be>
f0112c95:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112c98:	8a 00                	mov    (%eax),%al
f0112c9a:	3c 62                	cmp    $0x62,%al
f0112c9c:	75 1b                	jne    f0112cb9 <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112c9e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112ca1:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112ca3:	3c 79                	cmp    $0x79,%al
f0112ca5:	75 12                	jne    f0112cb9 <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112ca7:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112caa:	8a 00                	mov    (%eax),%al
f0112cac:	3c 63                	cmp    $0x63,%al
f0112cae:	75 09                	jne    f0112cb9 <test_cut_paste_pages+0x9be>
f0112cb0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112cb3:	8a 00                	mov    (%eax),%al
f0112cb5:	3c 7a                	cmp    $0x7a,%al
f0112cb7:	74 28                	je     f0112ce1 <test_cut_paste_pages+0x9e6>
		{
			correct = 0;
f0112cb9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0112cc0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112cc7:	83 ec 04             	sub    $0x4,%esp
f0112cca:	68 1c 96 13 f0       	push   $0xf013961c
f0112ccf:	68 40 02 00 00       	push   $0x240
f0112cd4:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0112cd9:	e8 35 d7 fe ff       	call   f0100413 <_warn>
f0112cde:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f0112ce1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112ce5:	74 04                	je     f0112ceb <test_cut_paste_pages+0x9f0>
f0112ce7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112ceb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f0112cf2:	83 ec 0c             	sub    $0xc,%esp
f0112cf5:	68 55 97 13 f0       	push   $0xf0139755
f0112cfa:	e8 0f e0 fe ff       	call   f0100d0e <cprintf>
f0112cff:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f0112d02:	83 ec 08             	sub    $0x8,%esp
f0112d05:	ff 75 e4             	pushl  -0x1c(%ebp)
f0112d08:	68 64 97 13 f0       	push   $0xf0139764
f0112d0d:	e8 fc df fe ff       	call   f0100d0e <cprintf>
f0112d12:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0112d15:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0112d19:	75 10                	jne    f0112d2b <test_cut_paste_pages+0xa30>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f0112d1b:	83 ec 0c             	sub    $0xc,%esp
f0112d1e:	68 98 97 13 f0       	push   $0xf0139798
f0112d23:	e8 e6 df fe ff       	call   f0100d0e <cprintf>
f0112d28:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0112d2b:	a1 28 b9 85 f0       	mov    0xf085b928,%eax
f0112d30:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0112d33:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112d36:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0112d39:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112d3e:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112d41:	5b                   	pop    %ebx
f0112d42:	5e                   	pop    %esi
f0112d43:	5f                   	pop    %edi
f0112d44:	5d                   	pop    %ebp
f0112d45:	c3                   	ret    

f0112d46 <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f0112d46:	55                   	push   %ebp
f0112d47:	89 e5                	mov    %esp,%ebp
f0112d49:	57                   	push   %edi
f0112d4a:	56                   	push   %esi
f0112d4b:	53                   	push   %ebx
f0112d4c:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112d52:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0112d58:	bb d8 97 13 f0       	mov    $0xf01397d8,%ebx
f0112d5d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112d62:	89 c7                	mov    %eax,%edi
f0112d64:	89 de                	mov    %ebx,%esi
f0112d66:	89 d1                	mov    %edx,%ecx
f0112d68:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112d6a:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0112d70:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112d75:	b0 00                	mov    $0x0,%al
f0112d77:	89 d7                	mov    %edx,%edi
f0112d79:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0112d7b:	6a 00                	push   $0x0
f0112d7d:	6a 0a                	push   $0xa
f0112d7f:	6a 14                	push   $0x14
f0112d81:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0112d87:	50                   	push   %eax
f0112d88:	e8 92 65 ff ff       	call   f010931f <env_create>
f0112d8d:	83 c4 10             	add    $0x10,%esp
f0112d90:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112d93:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112d96:	8b 40 5c             	mov    0x5c(%eax),%eax
f0112d99:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0112d9c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112d9f:	8b 40 60             	mov    0x60(%eax),%eax
f0112da2:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0112da8:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0112dae:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0112db1:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f0112db8:	75 70 20 
f0112dbb:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0112dc2:	00 00 00 
f0112dc5:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0112dcb:	b9 03 00 00 00       	mov    $0x3,%ecx
f0112dd0:	b8 00 00 00 00       	mov    $0x0,%eax
f0112dd5:	89 d7                	mov    %edx,%edi
f0112dd7:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0112dd9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112ddc:	8b 40 4c             	mov    0x4c(%eax),%eax
f0112ddf:	83 ec 08             	sub    $0x8,%esp
f0112de2:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f0112de8:	52                   	push   %edx
f0112de9:	50                   	push   %eax
f0112dea:	e8 1e f1 01 00       	call   f0131f0d <ltostr>
f0112def:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0112df2:	83 ec 04             	sub    $0x4,%esp
f0112df5:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112dfb:	50                   	push   %eax
f0112dfc:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f0112e02:	50                   	push   %eax
f0112e03:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f0112e09:	50                   	push   %eax
f0112e0a:	e8 f6 f1 01 00       	call   f0132005 <strcconcat>
f0112e0f:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f0112e12:	83 ec 0c             	sub    $0xc,%esp
f0112e15:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112e18:	e8 f1 3a 00 00       	call   f011690e <ClearUserSpace>
f0112e1d:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f0112e20:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f0112e27:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f0112e2e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0112e35:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f0112e3c:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0112e43:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f0112e4a:	83 ec 0c             	sub    $0xc,%esp
f0112e4d:	68 0c 98 13 f0       	push   $0xf013980c
f0112e52:	e8 b7 de fe ff       	call   f0100d0e <cprintf>
f0112e57:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0112e5a:	83 ec 04             	sub    $0x4,%esp
f0112e5d:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112e63:	50                   	push   %eax
f0112e64:	68 42 98 13 f0       	push   $0xf0139842
f0112e69:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112e6f:	50                   	push   %eax
f0112e70:	e8 90 f1 01 00       	call   f0132005 <strcconcat>
f0112e75:	83 c4 10             	add    $0x10,%esp
f0112e78:	83 ec 0c             	sub    $0xc,%esp
f0112e7b:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112e81:	50                   	push   %eax
f0112e82:	e8 e9 de fe ff       	call   f0100d70 <execute_command>
f0112e87:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f0112e8a:	83 ec 04             	sub    $0x4,%esp
f0112e8d:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112e93:	50                   	push   %eax
f0112e94:	68 47 98 13 f0       	push   $0xf0139847
f0112e99:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112e9f:	50                   	push   %eax
f0112ea0:	e8 60 f1 01 00       	call   f0132005 <strcconcat>
f0112ea5:	83 c4 10             	add    $0x10,%esp
f0112ea8:	83 ec 0c             	sub    $0xc,%esp
f0112eab:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112eb1:	50                   	push   %eax
f0112eb2:	e8 b9 de fe ff       	call   f0100d70 <execute_command>
f0112eb7:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f0112eba:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112ec0:	bb 4d 9b 13 f0       	mov    $0xf0139b4d,%ebx
f0112ec5:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112eca:	89 c7                	mov    %eax,%edi
f0112ecc:	89 de                	mov    %ebx,%esi
f0112ece:	89 d1                	mov    %edx,%ecx
f0112ed0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112ed2:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112ed8:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112edd:	b0 00                	mov    $0x0,%al
f0112edf:	89 d7                	mov    %edx,%edi
f0112ee1:	f3 aa                	rep stos %al,%es:(%edi)
f0112ee3:	83 ec 0c             	sub    $0xc,%esp
f0112ee6:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112eec:	50                   	push   %eax
f0112eed:	e8 7e de fe ff       	call   f0100d70 <execute_command>
f0112ef2:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f0112ef5:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112efb:	bb b1 9b 13 f0       	mov    $0xf0139bb1,%ebx
f0112f00:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f05:	89 c7                	mov    %eax,%edi
f0112f07:	89 de                	mov    %ebx,%esi
f0112f09:	89 d1                	mov    %edx,%ecx
f0112f0b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f0d:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112f13:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f18:	b0 00                	mov    $0x0,%al
f0112f1a:	89 d7                	mov    %edx,%edi
f0112f1c:	f3 aa                	rep stos %al,%es:(%edi)
f0112f1e:	83 ec 0c             	sub    $0xc,%esp
f0112f21:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112f27:	50                   	push   %eax
f0112f28:	e8 43 de fe ff       	call   f0100d70 <execute_command>
f0112f2d:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f0112f30:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112f36:	bb 15 9c 13 f0       	mov    $0xf0139c15,%ebx
f0112f3b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f40:	89 c7                	mov    %eax,%edi
f0112f42:	89 de                	mov    %ebx,%esi
f0112f44:	89 d1                	mov    %edx,%ecx
f0112f46:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f48:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112f4e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f53:	b0 00                	mov    $0x0,%al
f0112f55:	89 d7                	mov    %edx,%edi
f0112f57:	f3 aa                	rep stos %al,%es:(%edi)
f0112f59:	83 ec 0c             	sub    $0xc,%esp
f0112f5c:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112f62:	50                   	push   %eax
f0112f63:	e8 08 de fe ff       	call   f0100d70 <execute_command>
f0112f68:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f0112f6b:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112f71:	bb 79 9c 13 f0       	mov    $0xf0139c79,%ebx
f0112f76:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f7b:	89 c7                	mov    %eax,%edi
f0112f7d:	89 de                	mov    %ebx,%esi
f0112f7f:	89 d1                	mov    %edx,%ecx
f0112f81:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f83:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0112f89:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f8e:	b0 00                	mov    $0x0,%al
f0112f90:	89 d7                	mov    %edx,%edi
f0112f92:	f3 aa                	rep stos %al,%es:(%edi)
f0112f94:	83 ec 0c             	sub    $0xc,%esp
f0112f97:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112f9d:	50                   	push   %eax
f0112f9e:	e8 cd dd fe ff       	call   f0100d70 <execute_command>
f0112fa3:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f0112fa6:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112fac:	bb dd 9c 13 f0       	mov    $0xf0139cdd,%ebx
f0112fb1:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112fb6:	89 c7                	mov    %eax,%edi
f0112fb8:	89 de                	mov    %ebx,%esi
f0112fba:	89 d1                	mov    %edx,%ecx
f0112fbc:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112fbe:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0112fc4:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112fc9:	b0 00                	mov    $0x0,%al
f0112fcb:	89 d7                	mov    %edx,%edi
f0112fcd:	f3 aa                	rep stos %al,%es:(%edi)
f0112fcf:	83 ec 0c             	sub    $0xc,%esp
f0112fd2:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112fd8:	50                   	push   %eax
f0112fd9:	e8 92 dd fe ff       	call   f0100d70 <execute_command>
f0112fde:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0112fe1:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112fe7:	bb 41 9d 13 f0       	mov    $0xf0139d41,%ebx
f0112fec:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112ff1:	89 c7                	mov    %eax,%edi
f0112ff3:	89 de                	mov    %ebx,%esi
f0112ff5:	89 d1                	mov    %edx,%ecx
f0112ff7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112ff9:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0112fff:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113004:	b0 00                	mov    $0x0,%al
f0113006:	89 d7                	mov    %edx,%edi
f0113008:	f3 aa                	rep stos %al,%es:(%edi)
f011300a:	83 ec 0c             	sub    $0xc,%esp
f011300d:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0113013:	50                   	push   %eax
f0113014:	e8 57 dd fe ff       	call   f0100d70 <execute_command>
f0113019:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f011301c:	83 ec 04             	sub    $0x4,%esp
f011301f:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113025:	50                   	push   %eax
f0113026:	68 4f 98 13 f0       	push   $0xf013984f
f011302b:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113031:	50                   	push   %eax
f0113032:	e8 ce ef 01 00       	call   f0132005 <strcconcat>
f0113037:	83 c4 10             	add    $0x10,%esp
f011303a:	83 ec 0c             	sub    $0xc,%esp
f011303d:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113043:	50                   	push   %eax
f0113044:	e8 27 dd fe ff       	call   f0100d70 <execute_command>
f0113049:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f011304c:	83 ec 04             	sub    $0x4,%esp
f011304f:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113055:	50                   	push   %eax
f0113056:	68 59 98 13 f0       	push   $0xf0139859
f011305b:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113061:	50                   	push   %eax
f0113062:	e8 9e ef 01 00       	call   f0132005 <strcconcat>
f0113067:	83 c4 10             	add    $0x10,%esp
f011306a:	83 ec 0c             	sub    $0xc,%esp
f011306d:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113073:	50                   	push   %eax
f0113074:	e8 f7 dc fe ff       	call   f0100d70 <execute_command>
f0113079:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f011307c:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113082:	bb a5 9d 13 f0       	mov    $0xf0139da5,%ebx
f0113087:	ba 0f 00 00 00       	mov    $0xf,%edx
f011308c:	89 c7                	mov    %eax,%edi
f011308e:	89 de                	mov    %ebx,%esi
f0113090:	89 d1                	mov    %edx,%ecx
f0113092:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113094:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f011309a:	b9 55 00 00 00       	mov    $0x55,%ecx
f011309f:	b0 00                	mov    $0x0,%al
f01130a1:	89 d7                	mov    %edx,%edi
f01130a3:	f3 aa                	rep stos %al,%es:(%edi)
f01130a5:	83 ec 0c             	sub    $0xc,%esp
f01130a8:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01130ae:	50                   	push   %eax
f01130af:	e8 bc dc fe ff       	call   f0100d70 <execute_command>
f01130b4:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f01130b7:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01130bd:	bb 09 9e 13 f0       	mov    $0xf0139e09,%ebx
f01130c2:	ba 0f 00 00 00       	mov    $0xf,%edx
f01130c7:	89 c7                	mov    %eax,%edi
f01130c9:	89 de                	mov    %ebx,%esi
f01130cb:	89 d1                	mov    %edx,%ecx
f01130cd:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01130cf:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f01130d5:	b9 55 00 00 00       	mov    $0x55,%ecx
f01130da:	b0 00                	mov    $0x0,%al
f01130dc:	89 d7                	mov    %edx,%edi
f01130de:	f3 aa                	rep stos %al,%es:(%edi)
f01130e0:	83 ec 0c             	sub    $0xc,%esp
f01130e3:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01130e9:	50                   	push   %eax
f01130ea:	e8 81 dc fe ff       	call   f0100d70 <execute_command>
f01130ef:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f01130f2:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01130f8:	bb 6d 9e 13 f0       	mov    $0xf0139e6d,%ebx
f01130fd:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113102:	89 c7                	mov    %eax,%edi
f0113104:	89 de                	mov    %ebx,%esi
f0113106:	89 d1                	mov    %edx,%ecx
f0113108:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011310a:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113110:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113115:	b0 00                	mov    $0x0,%al
f0113117:	89 d7                	mov    %edx,%edi
f0113119:	f3 aa                	rep stos %al,%es:(%edi)
f011311b:	83 ec 0c             	sub    $0xc,%esp
f011311e:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113124:	50                   	push   %eax
f0113125:	e8 46 dc fe ff       	call   f0100d70 <execute_command>
f011312a:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f011312d:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0113134:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f011313b:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f0113142:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f0113149:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f0113150:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f0113157:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011315e:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f0113165:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f011316c:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f0113173:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f011317a:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f0113181:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113184:	8a 00                	mov    (%eax),%al
f0113186:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f011318c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011318f:	8a 00                	mov    (%eax),%al
f0113191:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f0113197:	8b 45 90             	mov    -0x70(%ebp),%eax
f011319a:	8a 00                	mov    (%eax),%al
f011319c:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f01131a2:	e8 b2 9e ff ff       	call   f010d059 <sys_calculate_free_frames>
f01131a7:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f01131aa:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01131ad:	89 d0                	mov    %edx,%eax
f01131af:	01 c0                	add    %eax,%eax
f01131b1:	01 d0                	add    %edx,%eax
f01131b3:	01 c0                	add    %eax,%eax
f01131b5:	50                   	push   %eax
f01131b6:	68 00 00 10 00       	push   $0x100000
f01131bb:	6a 00                	push   $0x0
f01131bd:	ff 75 d4             	pushl  -0x2c(%ebp)
f01131c0:	e8 a4 58 ff ff       	call   f0108a69 <copy_paste_chunk>
f01131c5:	83 c4 10             	add    $0x10,%esp
f01131c8:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01131cb:	e8 89 9e ff ff       	call   f010d059 <sys_calculate_free_frames>
f01131d0:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f01131d3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f01131da:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f01131de:	75 08                	jne    f01131e8 <test_copy_paste_chunk+0x4a2>
f01131e0:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01131e3:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01131e6:	74 2b                	je     f0113213 <test_copy_paste_chunk+0x4cd>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01131e8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01131eb:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01131ee:	83 ec 0c             	sub    $0xc,%esp
f01131f1:	50                   	push   %eax
f01131f2:	ff 75 88             	pushl  -0x78(%ebp)
f01131f5:	68 68 98 13 f0       	push   $0xf0139868
f01131fa:	68 93 02 00 00       	push   $0x293
f01131ff:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0113204:	e8 0a d2 fe ff       	call   f0100413 <_warn>
f0113209:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011320c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113213:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113217:	74 04                	je     f011321d <test_copy_paste_chunk+0x4d7>
f0113219:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011321d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f0113224:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113227:	8a 00                	mov    (%eax),%al
f0113229:	3c 61                	cmp    $0x61,%al
f011322b:	75 75                	jne    f01132a2 <test_copy_paste_chunk+0x55c>
f011322d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113230:	8a 00                	mov    (%eax),%al
f0113232:	3c 78                	cmp    $0x78,%al
f0113234:	75 6c                	jne    f01132a2 <test_copy_paste_chunk+0x55c>
f0113236:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113239:	8a 00                	mov    (%eax),%al
f011323b:	3c 62                	cmp    $0x62,%al
f011323d:	75 63                	jne    f01132a2 <test_copy_paste_chunk+0x55c>
f011323f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113242:	8a 00                	mov    (%eax),%al
f0113244:	3c 79                	cmp    $0x79,%al
f0113246:	75 5a                	jne    f01132a2 <test_copy_paste_chunk+0x55c>
f0113248:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011324b:	8a 00                	mov    (%eax),%al
f011324d:	3c 63                	cmp    $0x63,%al
f011324f:	75 51                	jne    f01132a2 <test_copy_paste_chunk+0x55c>
f0113251:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113254:	8a 00                	mov    (%eax),%al
f0113256:	3c 7a                	cmp    $0x7a,%al
f0113258:	75 48                	jne    f01132a2 <test_copy_paste_chunk+0x55c>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f011325a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011325d:	8a 00                	mov    (%eax),%al
f011325f:	3c 64                	cmp    $0x64,%al
f0113261:	75 3f                	jne    f01132a2 <test_copy_paste_chunk+0x55c>
f0113263:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113266:	8a 10                	mov    (%eax),%dl
f0113268:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f011326e:	38 c2                	cmp    %al,%dl
f0113270:	75 30                	jne    f01132a2 <test_copy_paste_chunk+0x55c>
f0113272:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113275:	8a 00                	mov    (%eax),%al
f0113277:	3c 65                	cmp    $0x65,%al
f0113279:	75 27                	jne    f01132a2 <test_copy_paste_chunk+0x55c>
f011327b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011327e:	8a 10                	mov    (%eax),%dl
f0113280:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f0113286:	38 c2                	cmp    %al,%dl
f0113288:	75 18                	jne    f01132a2 <test_copy_paste_chunk+0x55c>
f011328a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011328d:	8a 00                	mov    (%eax),%al
f011328f:	3c 66                	cmp    $0x66,%al
f0113291:	75 0f                	jne    f01132a2 <test_copy_paste_chunk+0x55c>
f0113293:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113296:	8a 10                	mov    (%eax),%dl
f0113298:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f011329e:	38 c2                	cmp    %al,%dl
f01132a0:	74 21                	je     f01132c3 <test_copy_paste_chunk+0x57d>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01132a2:	83 ec 04             	sub    $0x4,%esp
f01132a5:	68 cc 98 13 f0       	push   $0xf01398cc
f01132aa:	68 9c 02 00 00       	push   $0x29c
f01132af:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01132b4:	e8 5a d1 fe ff       	call   f0100413 <_warn>
f01132b9:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01132bc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01132c3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01132c7:	74 04                	je     f01132cd <test_copy_paste_chunk+0x587>
f01132c9:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01132cd:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f01132d4:	83 ec 0c             	sub    $0xc,%esp
f01132d7:	68 06 99 13 f0       	push   $0xf0139906
f01132dc:	e8 2d da fe ff       	call   f0100d0e <cprintf>
f01132e1:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f01132e4:	83 ec 0c             	sub    $0xc,%esp
f01132e7:	68 18 99 13 f0       	push   $0xf0139918
f01132ec:	e8 1d da fe ff       	call   f0100d0e <cprintf>
f01132f1:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f01132f4:	83 ec 04             	sub    $0x4,%esp
f01132f7:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01132fd:	50                   	push   %eax
f01132fe:	68 4e 99 13 f0       	push   $0xf013994e
f0113303:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113309:	50                   	push   %eax
f011330a:	e8 f6 ec 01 00       	call   f0132005 <strcconcat>
f011330f:	83 c4 10             	add    $0x10,%esp
f0113312:	83 ec 0c             	sub    $0xc,%esp
f0113315:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f011331b:	50                   	push   %eax
f011331c:	e8 4f da fe ff       	call   f0100d70 <execute_command>
f0113321:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f0113324:	83 ec 04             	sub    $0x4,%esp
f0113327:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f011332d:	50                   	push   %eax
f011332e:	68 58 99 13 f0       	push   $0xf0139958
f0113333:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113339:	50                   	push   %eax
f011333a:	e8 c6 ec 01 00       	call   f0132005 <strcconcat>
f011333f:	83 c4 10             	add    $0x10,%esp
f0113342:	83 ec 0c             	sub    $0xc,%esp
f0113345:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f011334b:	50                   	push   %eax
f011334c:	e8 1f da fe ff       	call   f0100d70 <execute_command>
f0113351:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f0113354:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f011335a:	bb d1 9e 13 f0       	mov    $0xf0139ed1,%ebx
f011335f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113364:	89 c7                	mov    %eax,%edi
f0113366:	89 de                	mov    %ebx,%esi
f0113368:	89 d1                	mov    %edx,%ecx
f011336a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011336c:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0113372:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113377:	b0 00                	mov    $0x0,%al
f0113379:	89 d7                	mov    %edx,%edi
f011337b:	f3 aa                	rep stos %al,%es:(%edi)
f011337d:	83 ec 0c             	sub    $0xc,%esp
f0113380:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0113386:	50                   	push   %eax
f0113387:	e8 e4 d9 fe ff       	call   f0100d70 <execute_command>
f011338c:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f011338f:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0113395:	bb 35 9f 13 f0       	mov    $0xf0139f35,%ebx
f011339a:	ba 0f 00 00 00       	mov    $0xf,%edx
f011339f:	89 c7                	mov    %eax,%edi
f01133a1:	89 de                	mov    %ebx,%esi
f01133a3:	89 d1                	mov    %edx,%ecx
f01133a5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01133a7:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f01133ad:	b9 55 00 00 00       	mov    $0x55,%ecx
f01133b2:	b0 00                	mov    $0x0,%al
f01133b4:	89 d7                	mov    %edx,%edi
f01133b6:	f3 aa                	rep stos %al,%es:(%edi)
f01133b8:	83 ec 0c             	sub    $0xc,%esp
f01133bb:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01133c1:	50                   	push   %eax
f01133c2:	e8 a9 d9 fe ff       	call   f0100d70 <execute_command>
f01133c7:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f01133ca:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01133d0:	bb 99 9f 13 f0       	mov    $0xf0139f99,%ebx
f01133d5:	ba 0f 00 00 00       	mov    $0xf,%edx
f01133da:	89 c7                	mov    %eax,%edi
f01133dc:	89 de                	mov    %ebx,%esi
f01133de:	89 d1                	mov    %edx,%ecx
f01133e0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01133e2:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f01133e8:	b9 55 00 00 00       	mov    $0x55,%ecx
f01133ed:	b0 00                	mov    $0x0,%al
f01133ef:	89 d7                	mov    %edx,%edi
f01133f1:	f3 aa                	rep stos %al,%es:(%edi)
f01133f3:	83 ec 0c             	sub    $0xc,%esp
f01133f6:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01133fc:	50                   	push   %eax
f01133fd:	e8 6e d9 fe ff       	call   f0100d70 <execute_command>
f0113402:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f0113405:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f011340b:	bb fd 9f 13 f0       	mov    $0xf0139ffd,%ebx
f0113410:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113415:	89 c7                	mov    %eax,%edi
f0113417:	89 de                	mov    %ebx,%esi
f0113419:	89 d1                	mov    %edx,%ecx
f011341b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011341d:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0113423:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113428:	b0 00                	mov    $0x0,%al
f011342a:	89 d7                	mov    %edx,%edi
f011342c:	f3 aa                	rep stos %al,%es:(%edi)
f011342e:	83 ec 0c             	sub    $0xc,%esp
f0113431:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0113437:	50                   	push   %eax
f0113438:	e8 33 d9 fe ff       	call   f0100d70 <execute_command>
f011343d:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f0113440:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0113446:	bb 61 a0 13 f0       	mov    $0xf013a061,%ebx
f011344b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113450:	89 c7                	mov    %eax,%edi
f0113452:	89 de                	mov    %ebx,%esi
f0113454:	89 d1                	mov    %edx,%ecx
f0113456:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113458:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f011345e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113463:	b0 00                	mov    $0x0,%al
f0113465:	89 d7                	mov    %edx,%edi
f0113467:	f3 aa                	rep stos %al,%es:(%edi)
f0113469:	83 ec 0c             	sub    $0xc,%esp
f011346c:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0113472:	50                   	push   %eax
f0113473:	e8 f8 d8 fe ff       	call   f0100d70 <execute_command>
f0113478:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f011347b:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0113481:	bb c5 a0 13 f0       	mov    $0xf013a0c5,%ebx
f0113486:	ba 0f 00 00 00       	mov    $0xf,%edx
f011348b:	89 c7                	mov    %eax,%edi
f011348d:	89 de                	mov    %ebx,%esi
f011348f:	89 d1                	mov    %edx,%ecx
f0113491:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113493:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0113499:	b9 55 00 00 00       	mov    $0x55,%ecx
f011349e:	b0 00                	mov    $0x0,%al
f01134a0:	89 d7                	mov    %edx,%edi
f01134a2:	f3 aa                	rep stos %al,%es:(%edi)
f01134a4:	83 ec 0c             	sub    $0xc,%esp
f01134a7:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01134ad:	50                   	push   %eax
f01134ae:	e8 bd d8 fe ff       	call   f0100d70 <execute_command>
f01134b3:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f01134b6:	83 ec 04             	sub    $0x4,%esp
f01134b9:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01134bf:	50                   	push   %eax
f01134c0:	68 62 99 13 f0       	push   $0xf0139962
f01134c5:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01134cb:	50                   	push   %eax
f01134cc:	e8 34 eb 01 00       	call   f0132005 <strcconcat>
f01134d1:	83 c4 10             	add    $0x10,%esp
f01134d4:	83 ec 0c             	sub    $0xc,%esp
f01134d7:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01134dd:	50                   	push   %eax
f01134de:	e8 8d d8 fe ff       	call   f0100d70 <execute_command>
f01134e3:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f01134e6:	83 ec 04             	sub    $0x4,%esp
f01134e9:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01134ef:	50                   	push   %eax
f01134f0:	68 6c 99 13 f0       	push   $0xf013996c
f01134f5:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01134fb:	50                   	push   %eax
f01134fc:	e8 04 eb 01 00       	call   f0132005 <strcconcat>
f0113501:	83 c4 10             	add    $0x10,%esp
f0113504:	83 ec 0c             	sub    $0xc,%esp
f0113507:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011350d:	50                   	push   %eax
f011350e:	e8 5d d8 fe ff       	call   f0100d70 <execute_command>
f0113513:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f0113516:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011351c:	bb 29 a1 13 f0       	mov    $0xf013a129,%ebx
f0113521:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113526:	89 c7                	mov    %eax,%edi
f0113528:	89 de                	mov    %ebx,%esi
f011352a:	89 d1                	mov    %edx,%ecx
f011352c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011352e:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0113534:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113539:	b0 00                	mov    $0x0,%al
f011353b:	89 d7                	mov    %edx,%edi
f011353d:	f3 aa                	rep stos %al,%es:(%edi)
f011353f:	83 ec 0c             	sub    $0xc,%esp
f0113542:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113548:	50                   	push   %eax
f0113549:	e8 22 d8 fe ff       	call   f0100d70 <execute_command>
f011354e:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f0113551:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113557:	bb 8d a1 13 f0       	mov    $0xf013a18d,%ebx
f011355c:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113561:	89 c7                	mov    %eax,%edi
f0113563:	89 de                	mov    %ebx,%esi
f0113565:	89 d1                	mov    %edx,%ecx
f0113567:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113569:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f011356f:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113574:	b0 00                	mov    $0x0,%al
f0113576:	89 d7                	mov    %edx,%edi
f0113578:	f3 aa                	rep stos %al,%es:(%edi)
f011357a:	83 ec 0c             	sub    $0xc,%esp
f011357d:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113583:	50                   	push   %eax
f0113584:	e8 e7 d7 fe ff       	call   f0100d70 <execute_command>
f0113589:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f011358c:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113592:	bb f1 a1 13 f0       	mov    $0xf013a1f1,%ebx
f0113597:	ba 0f 00 00 00       	mov    $0xf,%edx
f011359c:	89 c7                	mov    %eax,%edi
f011359e:	89 de                	mov    %ebx,%esi
f01135a0:	89 d1                	mov    %edx,%ecx
f01135a2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01135a4:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01135aa:	b9 55 00 00 00       	mov    $0x55,%ecx
f01135af:	b0 00                	mov    $0x0,%al
f01135b1:	89 d7                	mov    %edx,%edi
f01135b3:	f3 aa                	rep stos %al,%es:(%edi)
f01135b5:	83 ec 0c             	sub    $0xc,%esp
f01135b8:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01135be:	50                   	push   %eax
f01135bf:	e8 ac d7 fe ff       	call   f0100d70 <execute_command>
f01135c4:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f01135c7:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f01135ce:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f01135d5:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f01135dc:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f01135e3:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f01135ea:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f01135f1:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f01135f8:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f01135ff:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f0113606:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f011360d:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f0113614:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f011361b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011361e:	8a 00                	mov    (%eax),%al
f0113620:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113626:	e8 2e 9a ff ff       	call   f010d059 <sys_calculate_free_frames>
f011362b:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f011362e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113631:	89 d0                	mov    %edx,%eax
f0113633:	01 c0                	add    %eax,%eax
f0113635:	01 d0                	add    %edx,%eax
f0113637:	01 c0                	add    %eax,%eax
f0113639:	50                   	push   %eax
f011363a:	68 00 00 40 00       	push   $0x400000
f011363f:	68 00 00 20 00       	push   $0x200000
f0113644:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113647:	e8 1d 54 ff ff       	call   f0108a69 <copy_paste_chunk>
f011364c:	83 c4 10             	add    $0x10,%esp
f011364f:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113652:	e8 02 9a ff ff       	call   f010d059 <sys_calculate_free_frames>
f0113657:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f011365a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113661:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0113665:	75 08                	jne    f011366f <test_copy_paste_chunk+0x929>
f0113667:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011366a:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011366d:	74 2b                	je     f011369a <test_copy_paste_chunk+0x954>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011366f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113672:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113675:	83 ec 0c             	sub    $0xc,%esp
f0113678:	50                   	push   %eax
f0113679:	ff 75 80             	pushl  -0x80(%ebp)
f011367c:	68 78 99 13 f0       	push   $0xf0139978
f0113681:	68 cc 02 00 00       	push   $0x2cc
f0113686:	68 3e 8d 13 f0       	push   $0xf0138d3e
f011368b:	e8 83 cd fe ff       	call   f0100413 <_warn>
f0113690:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113693:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011369a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011369e:	74 04                	je     f01136a4 <test_copy_paste_chunk+0x95e>
f01136a0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01136a4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f01136ab:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f01136b2:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01136b5:	83 ec 08             	sub    $0x8,%esp
f01136b8:	6a 01                	push   $0x1
f01136ba:	6a 07                	push   $0x7
f01136bc:	6a 07                	push   $0x7
f01136be:	6a 07                	push   $0x7
f01136c0:	6a 07                	push   $0x7
f01136c2:	6a 01                	push   $0x1
f01136c4:	68 00 20 00 00       	push   $0x2000
f01136c9:	68 00 00 40 00       	push   $0x400000
f01136ce:	68 00 00 20 00       	push   $0x200000
f01136d3:	ff 75 d4             	pushl  -0x2c(%ebp)
f01136d6:	e8 67 32 00 00       	call   f0116942 <CCP>
f01136db:	83 c4 30             	add    $0x30,%esp
f01136de:	83 f8 01             	cmp    $0x1,%eax
f01136e1:	74 2b                	je     f011370e <test_copy_paste_chunk+0x9c8>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f01136e3:	83 ec 04             	sub    $0x4,%esp
f01136e6:	68 cc 99 13 f0       	push   $0xf01399cc
f01136eb:	68 d5 02 00 00       	push   $0x2d5
f01136f0:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01136f5:	e8 19 cd fe ff       	call   f0100413 <_warn>
f01136fa:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01136fd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f0113704:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f011370b:	00 00 00 
		}
		if (correct) eval += 5 ;
f011370e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113712:	74 04                	je     f0113718 <test_copy_paste_chunk+0x9d2>
f0113714:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113718:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f011371f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113722:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f0113725:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113728:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f011372b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011372e:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f0113731:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113734:	8a 00                	mov    (%eax),%al
f0113736:	3c 61                	cmp    $0x61,%al
f0113738:	75 69                	jne    f01137a3 <test_copy_paste_chunk+0xa5d>
f011373a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011373d:	8a 00                	mov    (%eax),%al
f011373f:	3c 61                	cmp    $0x61,%al
f0113741:	75 60                	jne    f01137a3 <test_copy_paste_chunk+0xa5d>
f0113743:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113746:	8a 00                	mov    (%eax),%al
f0113748:	3c 79                	cmp    $0x79,%al
f011374a:	75 57                	jne    f01137a3 <test_copy_paste_chunk+0xa5d>
f011374c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011374f:	8a 00                	mov    (%eax),%al
f0113751:	3c 62                	cmp    $0x62,%al
f0113753:	75 4e                	jne    f01137a3 <test_copy_paste_chunk+0xa5d>
f0113755:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113758:	8a 00                	mov    (%eax),%al
f011375a:	3c 63                	cmp    $0x63,%al
f011375c:	75 45                	jne    f01137a3 <test_copy_paste_chunk+0xa5d>
f011375e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113761:	8a 00                	mov    (%eax),%al
f0113763:	3c 7a                	cmp    $0x7a,%al
f0113765:	75 3c                	jne    f01137a3 <test_copy_paste_chunk+0xa5d>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f0113767:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011376a:	8a 00                	mov    (%eax),%al
f011376c:	3c 77                	cmp    $0x77,%al
f011376e:	75 33                	jne    f01137a3 <test_copy_paste_chunk+0xa5d>
f0113770:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113773:	8a 00                	mov    (%eax),%al
f0113775:	3c 64                	cmp    $0x64,%al
f0113777:	75 2a                	jne    f01137a3 <test_copy_paste_chunk+0xa5d>
f0113779:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011377c:	8a 00                	mov    (%eax),%al
f011377e:	3c 65                	cmp    $0x65,%al
f0113780:	75 21                	jne    f01137a3 <test_copy_paste_chunk+0xa5d>
f0113782:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113785:	8a 00                	mov    (%eax),%al
f0113787:	3c 65                	cmp    $0x65,%al
f0113789:	75 18                	jne    f01137a3 <test_copy_paste_chunk+0xa5d>
f011378b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011378e:	8a 00                	mov    (%eax),%al
f0113790:	3c 66                	cmp    $0x66,%al
f0113792:	75 0f                	jne    f01137a3 <test_copy_paste_chunk+0xa5d>
f0113794:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113797:	8a 10                	mov    (%eax),%dl
f0113799:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f011379f:	38 c2                	cmp    %al,%dl
f01137a1:	74 21                	je     f01137c4 <test_copy_paste_chunk+0xa7e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01137a3:	83 ec 04             	sub    $0x4,%esp
f01137a6:	68 cc 98 13 f0       	push   $0xf01398cc
f01137ab:	68 e3 02 00 00       	push   $0x2e3
f01137b0:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01137b5:	e8 59 cc fe ff       	call   f0100413 <_warn>
f01137ba:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01137bd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01137c4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01137c8:	74 04                	je     f01137ce <test_copy_paste_chunk+0xa88>
f01137ca:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01137ce:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f01137d5:	8b 45 98             	mov    -0x68(%ebp),%eax
f01137d8:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01137db:	e8 79 98 ff ff       	call   f010d059 <sys_calculate_free_frames>
f01137e0:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f01137e3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01137e6:	89 c2                	mov    %eax,%edx
f01137e8:	01 d2                	add    %edx,%edx
f01137ea:	01 d0                	add    %edx,%eax
f01137ec:	50                   	push   %eax
f01137ed:	68 00 08 20 00       	push   $0x200800
f01137f2:	68 00 08 40 00       	push   $0x400800
f01137f7:	ff 75 d4             	pushl  -0x2c(%ebp)
f01137fa:	e8 6a 52 ff ff       	call   f0108a69 <copy_paste_chunk>
f01137ff:	83 c4 10             	add    $0x10,%esp
f0113802:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113805:	e8 4f 98 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011380a:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f011380d:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0113811:	75 08                	jne    f011381b <test_copy_paste_chunk+0xad5>
f0113813:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113816:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0113819:	74 2b                	je     f0113846 <test_copy_paste_chunk+0xb00>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011381b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011381e:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113821:	83 ec 0c             	sub    $0xc,%esp
f0113824:	50                   	push   %eax
f0113825:	ff 75 80             	pushl  -0x80(%ebp)
f0113828:	68 78 99 13 f0       	push   $0xf0139978
f011382d:	68 f3 02 00 00       	push   $0x2f3
f0113832:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0113837:	e8 d7 cb fe ff       	call   f0100413 <_warn>
f011383c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011383f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113846:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011384a:	74 04                	je     f0113850 <test_copy_paste_chunk+0xb0a>
f011384c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113850:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113857:	83 ec 08             	sub    $0x8,%esp
f011385a:	6a 01                	push   $0x1
f011385c:	6a 07                	push   $0x7
f011385e:	6a 07                	push   $0x7
f0113860:	6a 07                	push   $0x7
f0113862:	6a 07                	push   $0x7
f0113864:	6a 01                	push   $0x1
f0113866:	68 00 20 00 00       	push   $0x2000
f011386b:	68 00 00 20 00       	push   $0x200000
f0113870:	68 00 00 40 00       	push   $0x400000
f0113875:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113878:	e8 c5 30 00 00       	call   f0116942 <CCP>
f011387d:	83 c4 30             	add    $0x30,%esp
f0113880:	83 f8 01             	cmp    $0x1,%eax
f0113883:	74 21                	je     f01138a6 <test_copy_paste_chunk+0xb60>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113885:	83 ec 04             	sub    $0x4,%esp
f0113888:	68 18 9a 13 f0       	push   $0xf0139a18
f011388d:	68 fb 02 00 00       	push   $0x2fb
f0113892:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0113897:	e8 77 cb fe ff       	call   f0100413 <_warn>
f011389c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011389f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01138a6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01138aa:	74 04                	je     f01138b0 <test_copy_paste_chunk+0xb6a>
f01138ac:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01138b0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f01138b7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01138ba:	8a 00                	mov    (%eax),%al
f01138bc:	3c 61                	cmp    $0x61,%al
f01138be:	75 69                	jne    f0113929 <test_copy_paste_chunk+0xbe3>
f01138c0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01138c3:	8a 00                	mov    (%eax),%al
f01138c5:	3c 61                	cmp    $0x61,%al
f01138c7:	75 60                	jne    f0113929 <test_copy_paste_chunk+0xbe3>
f01138c9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01138cc:	8a 00                	mov    (%eax),%al
f01138ce:	3c 79                	cmp    $0x79,%al
f01138d0:	75 57                	jne    f0113929 <test_copy_paste_chunk+0xbe3>
f01138d2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01138d5:	8a 00                	mov    (%eax),%al
f01138d7:	3c 62                	cmp    $0x62,%al
f01138d9:	75 4e                	jne    f0113929 <test_copy_paste_chunk+0xbe3>
f01138db:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01138de:	8a 00                	mov    (%eax),%al
f01138e0:	3c 7a                	cmp    $0x7a,%al
f01138e2:	75 45                	jne    f0113929 <test_copy_paste_chunk+0xbe3>
f01138e4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01138e7:	8a 00                	mov    (%eax),%al
f01138e9:	3c 7a                	cmp    $0x7a,%al
f01138eb:	75 3c                	jne    f0113929 <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f01138ed:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01138f0:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f01138f2:	3c 64                	cmp    $0x64,%al
f01138f4:	75 33                	jne    f0113929 <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f01138f6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01138f9:	8a 00                	mov    (%eax),%al
f01138fb:	3c 64                	cmp    $0x64,%al
f01138fd:	75 2a                	jne    f0113929 <test_copy_paste_chunk+0xbe3>
f01138ff:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113902:	8a 00                	mov    (%eax),%al
f0113904:	3c 65                	cmp    $0x65,%al
f0113906:	75 21                	jne    f0113929 <test_copy_paste_chunk+0xbe3>
f0113908:	8b 45 98             	mov    -0x68(%ebp),%eax
f011390b:	8a 00                	mov    (%eax),%al
f011390d:	3c 78                	cmp    $0x78,%al
f011390f:	75 18                	jne    f0113929 <test_copy_paste_chunk+0xbe3>
f0113911:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113914:	8a 00                	mov    (%eax),%al
f0113916:	3c 66                	cmp    $0x66,%al
f0113918:	75 0f                	jne    f0113929 <test_copy_paste_chunk+0xbe3>
f011391a:	8b 45 90             	mov    -0x70(%ebp),%eax
f011391d:	8a 10                	mov    (%eax),%dl
f011391f:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0113925:	38 c2                	cmp    %al,%dl
f0113927:	74 21                	je     f011394a <test_copy_paste_chunk+0xc04>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113929:	83 ec 04             	sub    $0x4,%esp
f011392c:	68 cc 98 13 f0       	push   $0xf01398cc
f0113931:	68 04 03 00 00       	push   $0x304
f0113936:	68 3e 8d 13 f0       	push   $0xf0138d3e
f011393b:	e8 d3 ca fe ff       	call   f0100413 <_warn>
f0113940:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113943:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011394a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011394e:	74 04                	je     f0113954 <test_copy_paste_chunk+0xc0e>
f0113950:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113954:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f011395b:	83 ec 0c             	sub    $0xc,%esp
f011395e:	68 63 9a 13 f0       	push   $0xf0139a63
f0113963:	e8 a6 d3 fe ff       	call   f0100d0e <cprintf>
f0113968:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f011396b:	83 ec 0c             	sub    $0xc,%esp
f011396e:	68 74 9a 13 f0       	push   $0xf0139a74
f0113973:	e8 96 d3 fe ff       	call   f0100d0e <cprintf>
f0113978:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f011397b:	83 ec 04             	sub    $0x4,%esp
f011397e:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113984:	50                   	push   %eax
f0113985:	68 a8 9a 13 f0       	push   $0xf0139aa8
f011398a:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113990:	50                   	push   %eax
f0113991:	e8 6f e6 01 00       	call   f0132005 <strcconcat>
f0113996:	83 c4 10             	add    $0x10,%esp
f0113999:	83 ec 0c             	sub    $0xc,%esp
f011399c:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01139a2:	50                   	push   %eax
f01139a3:	e8 c8 d3 fe ff       	call   f0100d70 <execute_command>
f01139a8:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f01139ab:	83 ec 04             	sub    $0x4,%esp
f01139ae:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01139b4:	50                   	push   %eax
f01139b5:	68 b2 9a 13 f0       	push   $0xf0139ab2
f01139ba:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01139c0:	50                   	push   %eax
f01139c1:	e8 3f e6 01 00       	call   f0132005 <strcconcat>
f01139c6:	83 c4 10             	add    $0x10,%esp
f01139c9:	83 ec 0c             	sub    $0xc,%esp
f01139cc:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01139d2:	50                   	push   %eax
f01139d3:	e8 98 d3 fe ff       	call   f0100d70 <execute_command>
f01139d8:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f01139db:	83 ec 04             	sub    $0x4,%esp
f01139de:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01139e4:	50                   	push   %eax
f01139e5:	68 bc 9a 13 f0       	push   $0xf0139abc
f01139ea:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01139f0:	50                   	push   %eax
f01139f1:	e8 0f e6 01 00       	call   f0132005 <strcconcat>
f01139f6:	83 c4 10             	add    $0x10,%esp
f01139f9:	83 ec 0c             	sub    $0xc,%esp
f01139fc:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113a02:	50                   	push   %eax
f0113a03:	e8 68 d3 fe ff       	call   f0100d70 <execute_command>
f0113a08:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f0113a0b:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113a11:	bb 55 a2 13 f0       	mov    $0xf013a255,%ebx
f0113a16:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113a1b:	89 c7                	mov    %eax,%edi
f0113a1d:	89 de                	mov    %ebx,%esi
f0113a1f:	89 d1                	mov    %edx,%ecx
f0113a21:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113a23:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0113a29:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113a2e:	b0 00                	mov    $0x0,%al
f0113a30:	89 d7                	mov    %edx,%edi
f0113a32:	f3 aa                	rep stos %al,%es:(%edi)
f0113a34:	83 ec 0c             	sub    $0xc,%esp
f0113a37:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113a3d:	50                   	push   %eax
f0113a3e:	e8 2d d3 fe ff       	call   f0100d70 <execute_command>
f0113a43:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f0113a46:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113a4c:	bb b9 a2 13 f0       	mov    $0xf013a2b9,%ebx
f0113a51:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113a56:	89 c7                	mov    %eax,%edi
f0113a58:	89 de                	mov    %ebx,%esi
f0113a5a:	89 d1                	mov    %edx,%ecx
f0113a5c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113a5e:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0113a64:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113a69:	b0 00                	mov    $0x0,%al
f0113a6b:	89 d7                	mov    %edx,%edi
f0113a6d:	f3 aa                	rep stos %al,%es:(%edi)
f0113a6f:	83 ec 0c             	sub    $0xc,%esp
f0113a72:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113a78:	50                   	push   %eax
f0113a79:	e8 f2 d2 fe ff       	call   f0100d70 <execute_command>
f0113a7e:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f0113a81:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113a87:	bb 1d a3 13 f0       	mov    $0xf013a31d,%ebx
f0113a8c:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113a91:	89 c7                	mov    %eax,%edi
f0113a93:	89 de                	mov    %ebx,%esi
f0113a95:	89 d1                	mov    %edx,%ecx
f0113a97:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113a99:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113a9f:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113aa4:	b0 00                	mov    $0x0,%al
f0113aa6:	89 d7                	mov    %edx,%edi
f0113aa8:	f3 aa                	rep stos %al,%es:(%edi)
f0113aaa:	83 ec 0c             	sub    $0xc,%esp
f0113aad:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113ab3:	50                   	push   %eax
f0113ab4:	e8 b7 d2 fe ff       	call   f0100d70 <execute_command>
f0113ab9:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113abc:	e8 98 95 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0113ac1:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f0113ac4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113ac7:	89 d0                	mov    %edx,%eax
f0113ac9:	01 c0                	add    %eax,%eax
f0113acb:	01 d0                	add    %edx,%eax
f0113acd:	c1 e0 02             	shl    $0x2,%eax
f0113ad0:	50                   	push   %eax
f0113ad1:	68 00 00 90 00       	push   $0x900000
f0113ad6:	68 00 00 80 00       	push   $0x800000
f0113adb:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113ade:	e8 86 4f ff ff       	call   f0108a69 <copy_paste_chunk>
f0113ae3:	83 c4 10             	add    $0x10,%esp
f0113ae6:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113aec:	e8 68 95 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0113af1:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113af4:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113afb:	75 0b                	jne    f0113b08 <test_copy_paste_chunk+0xdc2>
f0113afd:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113b00:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113b03:	83 f8 03             	cmp    $0x3,%eax
f0113b06:	74 2e                	je     f0113b36 <test_copy_paste_chunk+0xdf0>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113b08:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113b0b:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113b0e:	83 ec 0c             	sub    $0xc,%esp
f0113b11:	50                   	push   %eax
f0113b12:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113b18:	68 78 99 13 f0       	push   $0xf0139978
f0113b1d:	68 22 03 00 00       	push   $0x322
f0113b22:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0113b27:	e8 e7 c8 fe ff       	call   f0100413 <_warn>
f0113b2c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113b2f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113b36:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113b3a:	74 04                	je     f0113b40 <test_copy_paste_chunk+0xdfa>
f0113b3c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113b40:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f0113b47:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113b4e:	83 ec 08             	sub    $0x8,%esp
f0113b51:	6a 01                	push   $0x1
f0113b53:	6a 07                	push   $0x7
f0113b55:	6a 07                	push   $0x7
f0113b57:	6a 07                	push   $0x7
f0113b59:	6a 07                	push   $0x7
f0113b5b:	6a 01                	push   $0x1
f0113b5d:	68 00 30 00 00       	push   $0x3000
f0113b62:	68 00 00 90 00       	push   $0x900000
f0113b67:	68 00 00 80 00       	push   $0x800000
f0113b6c:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113b6f:	e8 ce 2d 00 00       	call   f0116942 <CCP>
f0113b74:	83 c4 30             	add    $0x30,%esp
f0113b77:	83 f8 01             	cmp    $0x1,%eax
f0113b7a:	74 28                	je     f0113ba4 <test_copy_paste_chunk+0xe5e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113b7c:	83 ec 04             	sub    $0x4,%esp
f0113b7f:	68 18 9a 13 f0       	push   $0xf0139a18
f0113b84:	68 2b 03 00 00       	push   $0x32b
f0113b89:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0113b8e:	e8 80 c8 fe ff       	call   f0100413 <_warn>
f0113b93:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113b96:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113b9d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f0113ba4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113ba8:	74 04                	je     f0113bae <test_copy_paste_chunk+0xe68>
f0113baa:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113bae:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113bb5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113bb9:	0f 84 9e 00 00 00    	je     f0113c5d <test_copy_paste_chunk+0xf17>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0113bbf:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f0113bc6:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0113bcd:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f0113bd4:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f0113bdb:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f0113be2:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f0113be9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113bec:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f0113bef:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113bf2:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f0113bf5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113bf8:	8a 00                	mov    (%eax),%al
f0113bfa:	3c 61                	cmp    $0x61,%al
f0113bfc:	75 2d                	jne    f0113c2b <test_copy_paste_chunk+0xee5>
f0113bfe:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113c01:	8a 00                	mov    (%eax),%al
f0113c03:	3c 61                	cmp    $0x61,%al
f0113c05:	75 24                	jne    f0113c2b <test_copy_paste_chunk+0xee5>
f0113c07:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113c0a:	8a 00                	mov    (%eax),%al
f0113c0c:	3c 79                	cmp    $0x79,%al
f0113c0e:	75 1b                	jne    f0113c2b <test_copy_paste_chunk+0xee5>
f0113c10:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113c13:	8a 00                	mov    (%eax),%al
f0113c15:	3c 62                	cmp    $0x62,%al
f0113c17:	75 12                	jne    f0113c2b <test_copy_paste_chunk+0xee5>
f0113c19:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113c1c:	8a 00                	mov    (%eax),%al
f0113c1e:	3c 63                	cmp    $0x63,%al
f0113c20:	75 09                	jne    f0113c2b <test_copy_paste_chunk+0xee5>
f0113c22:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113c25:	8a 00                	mov    (%eax),%al
f0113c27:	3c 7a                	cmp    $0x7a,%al
f0113c29:	74 21                	je     f0113c4c <test_copy_paste_chunk+0xf06>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113c2b:	83 ec 04             	sub    $0x4,%esp
f0113c2e:	68 cc 98 13 f0       	push   $0xf01398cc
f0113c33:	68 3d 03 00 00       	push   $0x33d
f0113c38:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0113c3d:	e8 d1 c7 fe ff       	call   f0100413 <_warn>
f0113c42:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113c45:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f0113c4c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113c50:	74 04                	je     f0113c56 <test_copy_paste_chunk+0xf10>
f0113c52:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f0113c56:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113c5d:	e8 f7 93 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0113c62:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f0113c65:	6a 00                	push   $0x0
f0113c67:	6a 02                	push   $0x2
f0113c69:	68 00 10 90 00       	push   $0x901000
f0113c6e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113c71:	e8 59 2b 00 00       	call   f01167cf <SB>
f0113c76:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f0113c79:	6a 00                	push   $0x0
f0113c7b:	6a 02                	push   $0x2
f0113c7d:	68 00 20 90 00       	push   $0x902000
f0113c82:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113c85:	e8 45 2b 00 00       	call   f01167cf <SB>
f0113c8a:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f0113c8d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113c90:	c1 e0 03             	shl    $0x3,%eax
f0113c93:	50                   	push   %eax
f0113c94:	68 00 f0 bf 00       	push   $0xbff000
f0113c99:	68 00 10 90 00       	push   $0x901000
f0113c9e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113ca1:	e8 c3 4d ff ff       	call   f0108a69 <copy_paste_chunk>
f0113ca6:	83 c4 10             	add    $0x10,%esp
f0113ca9:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113caf:	e8 a5 93 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0113cb4:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113cb7:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113cbe:	75 0b                	jne    f0113ccb <test_copy_paste_chunk+0xf85>
f0113cc0:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113cc3:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113cc6:	83 f8 03             	cmp    $0x3,%eax
f0113cc9:	74 2e                	je     f0113cf9 <test_copy_paste_chunk+0xfb3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113ccb:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113cce:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113cd1:	83 ec 0c             	sub    $0xc,%esp
f0113cd4:	50                   	push   %eax
f0113cd5:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113cdb:	68 78 99 13 f0       	push   $0xf0139978
f0113ce0:	68 4d 03 00 00       	push   $0x34d
f0113ce5:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0113cea:	e8 24 c7 fe ff       	call   f0100413 <_warn>
f0113cef:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113cf2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113cf9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113cfd:	74 04                	je     f0113d03 <test_copy_paste_chunk+0xfbd>
f0113cff:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113d03:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f0113d0a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f0113d11:	83 ec 08             	sub    $0x8,%esp
f0113d14:	6a 01                	push   $0x1
f0113d16:	6a 07                	push   $0x7
f0113d18:	6a 03                	push   $0x3
f0113d1a:	6a 07                	push   $0x7
f0113d1c:	6a 03                	push   $0x3
f0113d1e:	6a 01                	push   $0x1
f0113d20:	68 00 20 00 00       	push   $0x2000
f0113d25:	68 00 f0 bf 00       	push   $0xbff000
f0113d2a:	68 00 10 90 00       	push   $0x901000
f0113d2f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113d32:	e8 0b 2c 00 00       	call   f0116942 <CCP>
f0113d37:	83 c4 30             	add    $0x30,%esp
f0113d3a:	83 f8 01             	cmp    $0x1,%eax
f0113d3d:	74 28                	je     f0113d67 <test_copy_paste_chunk+0x1021>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113d3f:	83 ec 04             	sub    $0x4,%esp
f0113d42:	68 18 9a 13 f0       	push   $0xf0139a18
f0113d47:	68 56 03 00 00       	push   $0x356
f0113d4c:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0113d51:	e8 bd c6 fe ff       	call   f0100413 <_warn>
f0113d56:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113d59:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113d60:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0113d67:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113d6b:	74 04                	je     f0113d71 <test_copy_paste_chunk+0x102b>
f0113d6d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113d71:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113d78:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113d7c:	74 72                	je     f0113df0 <test_copy_paste_chunk+0x10aa>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f0113d7e:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f0113d85:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f0113d8c:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f0113d93:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f0113d9a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113d9d:	8a 00                	mov    (%eax),%al
f0113d9f:	3c 62                	cmp    $0x62,%al
f0113da1:	75 1b                	jne    f0113dbe <test_copy_paste_chunk+0x1078>
f0113da3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113da6:	8a 00                	mov    (%eax),%al
f0113da8:	3c 62                	cmp    $0x62,%al
f0113daa:	75 12                	jne    f0113dbe <test_copy_paste_chunk+0x1078>
f0113dac:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113daf:	8a 00                	mov    (%eax),%al
f0113db1:	3c 7a                	cmp    $0x7a,%al
f0113db3:	75 09                	jne    f0113dbe <test_copy_paste_chunk+0x1078>
f0113db5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113db8:	8a 00                	mov    (%eax),%al
f0113dba:	3c 7a                	cmp    $0x7a,%al
f0113dbc:	74 21                	je     f0113ddf <test_copy_paste_chunk+0x1099>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113dbe:	83 ec 04             	sub    $0x4,%esp
f0113dc1:	68 cc 98 13 f0       	push   $0xf01398cc
f0113dc6:	68 62 03 00 00       	push   $0x362
f0113dcb:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0113dd0:	e8 3e c6 fe ff       	call   f0100413 <_warn>
f0113dd5:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113dd8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0113ddf:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113de3:	74 04                	je     f0113de9 <test_copy_paste_chunk+0x10a3>
f0113de5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113de9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0113df0:	83 ec 0c             	sub    $0xc,%esp
f0113df3:	68 c6 9a 13 f0       	push   $0xf0139ac6
f0113df8:	e8 11 cf fe ff       	call   f0100d0e <cprintf>
f0113dfd:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f0113e00:	83 ec 08             	sub    $0x8,%esp
f0113e03:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113e06:	68 d8 9a 13 f0       	push   $0xf0139ad8
f0113e0b:	e8 fe ce fe ff       	call   f0100d0e <cprintf>
f0113e10:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113e13:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113e17:	75 10                	jne    f0113e29 <test_copy_paste_chunk+0x10e3>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f0113e19:	83 ec 0c             	sub    $0xc,%esp
f0113e1c:	68 0c 9b 13 f0       	push   $0xf0139b0c
f0113e21:	e8 e8 ce fe ff       	call   f0100d0e <cprintf>
f0113e26:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113e29:	a1 28 b9 85 f0       	mov    0xf085b928,%eax
f0113e2e:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0113e31:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113e34:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113e37:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113e3c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113e3f:	5b                   	pop    %ebx
f0113e40:	5e                   	pop    %esi
f0113e41:	5f                   	pop    %edi
f0113e42:	5d                   	pop    %ebp
f0113e43:	c3                   	ret    

f0113e44 <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f0113e44:	55                   	push   %ebp
f0113e45:	89 e5                	mov    %esp,%ebp
f0113e47:	57                   	push   %edi
f0113e48:	56                   	push   %esi
f0113e49:	53                   	push   %ebx
f0113e4a:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113e50:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113e56:	bb d8 97 13 f0       	mov    $0xf01397d8,%ebx
f0113e5b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113e60:	89 c7                	mov    %eax,%edi
f0113e62:	89 de                	mov    %ebx,%esi
f0113e64:	89 d1                	mov    %edx,%ecx
f0113e66:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113e68:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0113e6e:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113e73:	b0 00                	mov    $0x0,%al
f0113e75:	89 d7                	mov    %edx,%edi
f0113e77:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113e79:	6a 00                	push   $0x0
f0113e7b:	6a 0a                	push   $0xa
f0113e7d:	6a 14                	push   $0x14
f0113e7f:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113e85:	50                   	push   %eax
f0113e86:	e8 94 54 ff ff       	call   f010931f <env_create>
f0113e8b:	83 c4 10             	add    $0x10,%esp
f0113e8e:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113e91:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113e94:	8b 40 5c             	mov    0x5c(%eax),%eax
f0113e97:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0113e9a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113e9d:	8b 40 60             	mov    0x60(%eax),%eax
f0113ea0:	89 45 80             	mov    %eax,-0x80(%ebp)
f0113ea3:	8b 45 80             	mov    -0x80(%ebp),%eax
f0113ea6:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0113ea9:	83 ec 0c             	sub    $0xc,%esp
f0113eac:	ff 75 cc             	pushl  -0x34(%ebp)
f0113eaf:	e8 5a 2a 00 00       	call   f011690e <ClearUserSpace>
f0113eb4:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113eb7:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0113ebe:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0113ec5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0113ecc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0113ed0:	83 ec 0c             	sub    $0xc,%esp
f0113ed3:	68 84 a3 13 f0       	push   $0xf013a384
f0113ed8:	e8 31 ce fe ff       	call   f0100d0e <cprintf>
f0113edd:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0113ee0:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF1004000;
f0113ee7:	c7 45 b8 00 40 00 f1 	movl   $0xf1004000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0113eee:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113ef1:	8a 00                	mov    (%eax),%al
f0113ef3:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f0113ef9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113efc:	8a 00                	mov    (%eax),%al
f0113efe:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113f04:	e8 50 91 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0113f09:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f0113f0c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113f0f:	89 d0                	mov    %edx,%eax
f0113f11:	01 c0                	add    %eax,%eax
f0113f13:	01 d0                	add    %edx,%eax
f0113f15:	01 c0                	add    %eax,%eax
f0113f17:	83 ec 0c             	sub    $0xc,%esp
f0113f1a:	6a 02                	push   $0x2
f0113f1c:	50                   	push   %eax
f0113f1d:	68 00 40 10 f0       	push   $0xf0104000
f0113f22:	68 00 00 10 f0       	push   $0xf0100000
f0113f27:	ff 75 cc             	pushl  -0x34(%ebp)
f0113f2a:	e8 22 4d ff ff       	call   f0108c51 <share_chunk>
f0113f2f:	83 c4 20             	add    $0x20,%esp
f0113f32:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113f35:	e8 1f 91 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0113f3a:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113f3d:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113f41:	75 08                	jne    f0113f4b <test_share_chunk+0x107>
f0113f43:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113f46:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113f49:	74 28                	je     f0113f73 <test_share_chunk+0x12f>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f0113f4b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113f4e:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113f51:	83 ec 0c             	sub    $0xc,%esp
f0113f54:	50                   	push   %eax
f0113f55:	ff 75 b0             	pushl  -0x50(%ebp)
f0113f58:	68 b0 a3 13 f0       	push   $0xf013a3b0
f0113f5d:	68 9e 03 00 00       	push   $0x39e
f0113f62:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0113f67:	e8 a7 c4 fe ff       	call   f0100413 <_warn>
f0113f6c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113f6f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113f73:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f77:	74 04                	je     f0113f7d <test_share_chunk+0x139>
f0113f79:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113f7d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0113f81:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113f84:	c1 e0 03             	shl    $0x3,%eax
f0113f87:	83 ec 08             	sub    $0x8,%esp
f0113f8a:	68 fd 00 00 00       	push   $0xfd
f0113f8f:	6a 07                	push   $0x7
f0113f91:	6a 03                	push   $0x3
f0113f93:	6a 07                	push   $0x7
f0113f95:	6a 03                	push   $0x3
f0113f97:	6a 01                	push   $0x1
f0113f99:	50                   	push   %eax
f0113f9a:	68 00 40 10 f0       	push   $0xf0104000
f0113f9f:	68 00 00 10 f0       	push   $0xf0100000
f0113fa4:	ff 75 cc             	pushl  -0x34(%ebp)
f0113fa7:	e8 96 29 00 00       	call   f0116942 <CCP>
f0113fac:	83 c4 30             	add    $0x30,%esp
f0113faf:	85 c0                	test   %eax,%eax
f0113fb1:	75 1e                	jne    f0113fd1 <test_share_chunk+0x18d>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113fb3:	83 ec 04             	sub    $0x4,%esp
f0113fb6:	68 0c a4 13 f0       	push   $0xf013a40c
f0113fbb:	68 a6 03 00 00       	push   $0x3a6
f0113fc0:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0113fc5:	e8 49 c4 fe ff       	call   f0100413 <_warn>
f0113fca:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113fcd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113fd1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113fd5:	74 04                	je     f0113fdb <test_share_chunk+0x197>
f0113fd7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f0113fdb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113fde:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0113fe1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113fe4:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0113fe7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113fea:	8a 00                	mov    (%eax),%al
f0113fec:	3c 41                	cmp    $0x41,%al
f0113fee:	75 09                	jne    f0113ff9 <test_share_chunk+0x1b5>
f0113ff0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113ff3:	8a 00                	mov    (%eax),%al
f0113ff5:	3c 42                	cmp    $0x42,%al
f0113ff7:	74 1e                	je     f0114017 <test_share_chunk+0x1d3>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113ff9:	83 ec 04             	sub    $0x4,%esp
f0113ffc:	68 54 a4 13 f0       	push   $0xf013a454
f0114001:	68 b0 03 00 00       	push   $0x3b0
f0114006:	68 3e 8d 13 f0       	push   $0xf0138d3e
f011400b:	e8 03 c4 fe ff       	call   f0100413 <_warn>
f0114010:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114013:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114017:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011401b:	74 04                	je     f0114021 <test_share_chunk+0x1dd>
f011401d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114021:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f0114025:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f011402b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011402e:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f0114030:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f0114036:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114039:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f011403b:	83 ec 0c             	sub    $0xc,%esp
f011403e:	68 89 a4 13 f0       	push   $0xf013a489
f0114043:	e8 c6 cc fe ff       	call   f0100d0e <cprintf>
f0114048:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f011404b:	83 ec 0c             	sub    $0xc,%esp
f011404e:	68 98 a4 13 f0       	push   $0xf013a498
f0114053:	e8 b6 cc fe ff       	call   f0100d0e <cprintf>
f0114058:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011405b:	e8 f9 8f ff ff       	call   f010d059 <sys_calculate_free_frames>
f0114060:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0114063:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114066:	c1 e0 05             	shl    $0x5,%eax
f0114069:	83 ec 0c             	sub    $0xc,%esp
f011406c:	68 02 0e 00 00       	push   $0xe02
f0114071:	50                   	push   %eax
f0114072:	68 00 00 00 40       	push   $0x40000000
f0114077:	68 00 00 00 f0       	push   $0xf0000000
f011407c:	ff 75 cc             	pushl  -0x34(%ebp)
f011407f:	e8 cd 4b ff ff       	call   f0108c51 <share_chunk>
f0114084:	83 c4 20             	add    $0x20,%esp
f0114087:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011408a:	e8 ca 8f ff ff       	call   f010d059 <sys_calculate_free_frames>
f011408f:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f0114092:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0114096:	75 1f                	jne    f01140b7 <test_share_chunk+0x273>
f0114098:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011409b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011409e:	89 c1                	mov    %eax,%ecx
f01140a0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01140a3:	c1 e0 05             	shl    $0x5,%eax
f01140a6:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01140a9:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01140b0:	99                   	cltd   
f01140b1:	f7 fb                	idiv   %ebx
f01140b3:	39 c1                	cmp    %eax,%ecx
f01140b5:	74 28                	je     f01140df <test_share_chunk+0x29b>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01140b7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01140ba:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01140bd:	83 ec 0c             	sub    $0xc,%esp
f01140c0:	50                   	push   %eax
f01140c1:	ff 75 a8             	pushl  -0x58(%ebp)
f01140c4:	68 d4 a4 13 f0       	push   $0xf013a4d4
f01140c9:	68 c8 03 00 00       	push   $0x3c8
f01140ce:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01140d3:	e8 3b c3 fe ff       	call   f0100413 <_warn>
f01140d8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01140db:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01140df:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01140e3:	74 04                	je     f01140e9 <test_share_chunk+0x2a5>
f01140e5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01140e9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01140ed:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f01140f4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01140f7:	c1 e0 05             	shl    $0x5,%eax
f01140fa:	83 ec 08             	sub    $0x8,%esp
f01140fd:	6a 02                	push   $0x2
f01140ff:	6a 07                	push   $0x7
f0114101:	6a 03                	push   $0x3
f0114103:	68 07 0e 00 00       	push   $0xe07
f0114108:	68 03 0e 00 00       	push   $0xe03
f011410d:	6a ff                	push   $0xffffffff
f011410f:	50                   	push   %eax
f0114110:	68 00 00 00 40       	push   $0x40000000
f0114115:	68 00 00 00 f0       	push   $0xf0000000
f011411a:	ff 75 cc             	pushl  -0x34(%ebp)
f011411d:	e8 20 28 00 00       	call   f0116942 <CCP>
f0114122:	83 c4 30             	add    $0x30,%esp
f0114125:	85 c0                	test   %eax,%eax
f0114127:	75 25                	jne    f011414e <test_share_chunk+0x30a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114129:	83 ec 04             	sub    $0x4,%esp
f011412c:	68 0c a4 13 f0       	push   $0xf013a40c
f0114131:	68 d1 03 00 00       	push   $0x3d1
f0114136:	68 3e 8d 13 f0       	push   $0xf0138d3e
f011413b:	e8 d3 c2 fe ff       	call   f0100413 <_warn>
f0114140:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114143:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114147:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f011414e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114151:	89 d0                	mov    %edx,%eax
f0114153:	01 c0                	add    %eax,%eax
f0114155:	01 d0                	add    %edx,%eax
f0114157:	c1 e0 02             	shl    $0x2,%eax
f011415a:	83 ec 08             	sub    $0x8,%esp
f011415d:	6a 02                	push   $0x2
f011415f:	6a 07                	push   $0x7
f0114161:	6a 03                	push   $0x3
f0114163:	68 07 0e 00 00       	push   $0xe07
f0114168:	68 03 0e 00 00       	push   $0xe03
f011416d:	6a 02                	push   $0x2
f011416f:	50                   	push   %eax
f0114170:	68 00 00 00 40       	push   $0x40000000
f0114175:	68 00 00 00 f0       	push   $0xf0000000
f011417a:	ff 75 cc             	pushl  -0x34(%ebp)
f011417d:	e8 c0 27 00 00       	call   f0116942 <CCP>
f0114182:	83 c4 30             	add    $0x30,%esp
f0114185:	85 c0                	test   %eax,%eax
f0114187:	75 1e                	jne    f01141a7 <test_share_chunk+0x363>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114189:	83 ec 04             	sub    $0x4,%esp
f011418c:	68 0c a4 13 f0       	push   $0xf013a40c
f0114191:	68 d8 03 00 00       	push   $0x3d8
f0114196:	68 3e 8d 13 f0       	push   $0xf0138d3e
f011419b:	e8 73 c2 fe ff       	call   f0100413 <_warn>
f01141a0:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01141a3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01141a7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01141ab:	74 04                	je     f01141b1 <test_share_chunk+0x36d>
f01141ad:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01141b1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f01141b5:	b8 40 ba 85 f0       	mov    $0xf085ba40,%eax
f01141ba:	05 00 00 00 10       	add    $0x10000000,%eax
f01141bf:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f01141c2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01141c5:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f01141ca:	83 ec 08             	sub    $0x8,%esp
f01141cd:	6a 02                	push   $0x2
f01141cf:	6a 07                	push   $0x7
f01141d1:	6a 03                	push   $0x3
f01141d3:	68 07 0e 00 00       	push   $0xe07
f01141d8:	68 03 0e 00 00       	push   $0xe03
f01141dd:	6a 02                	push   $0x2
f01141df:	50                   	push   %eax
f01141e0:	68 00 00 0a 40       	push   $0x400a0000
f01141e5:	68 00 00 0a f0       	push   $0xf00a0000
f01141ea:	ff 75 cc             	pushl  -0x34(%ebp)
f01141ed:	e8 50 27 00 00       	call   f0116942 <CCP>
f01141f2:	83 c4 30             	add    $0x30,%esp
f01141f5:	85 c0                	test   %eax,%eax
f01141f7:	75 1e                	jne    f0114217 <test_share_chunk+0x3d3>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01141f9:	83 ec 04             	sub    $0x4,%esp
f01141fc:	68 0c a4 13 f0       	push   $0xf013a40c
f0114201:	68 e2 03 00 00       	push   $0x3e2
f0114206:	68 3e 8d 13 f0       	push   $0xf0138d3e
f011420b:	e8 03 c2 fe ff       	call   f0100413 <_warn>
f0114210:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114213:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114217:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011421b:	74 04                	je     f0114221 <test_share_chunk+0x3dd>
f011421d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114221:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114225:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0114229:	0f 84 a4 00 00 00    	je     f01142d3 <test_share_chunk+0x48f>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f011422f:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f0114236:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114239:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f011423c:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f0114243:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114246:	8a 00                	mov    (%eax),%al
f0114248:	3c 41                	cmp    $0x41,%al
f011424a:	75 09                	jne    f0114255 <test_share_chunk+0x411>
f011424c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011424f:	8a 00                	mov    (%eax),%al
f0114251:	3c 41                	cmp    $0x41,%al
f0114253:	74 1e                	je     f0114273 <test_share_chunk+0x42f>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114255:	83 ec 04             	sub    $0x4,%esp
f0114258:	68 54 a4 13 f0       	push   $0xf013a454
f011425d:	68 ef 03 00 00       	push   $0x3ef
f0114262:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0114267:	e8 a7 c1 fe ff       	call   f0100413 <_warn>
f011426c:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011426f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114273:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114277:	74 04                	je     f011427d <test_share_chunk+0x439>
f0114279:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011427d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f0114281:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f0114288:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011428b:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f011428e:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f0114295:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114298:	8a 00                	mov    (%eax),%al
f011429a:	3c 43                	cmp    $0x43,%al
f011429c:	75 09                	jne    f01142a7 <test_share_chunk+0x463>
f011429e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01142a1:	8a 00                	mov    (%eax),%al
f01142a3:	3c 43                	cmp    $0x43,%al
f01142a5:	74 1e                	je     f01142c5 <test_share_chunk+0x481>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01142a7:	83 ec 04             	sub    $0x4,%esp
f01142aa:	68 54 a4 13 f0       	push   $0xf013a454
f01142af:	68 fa 03 00 00       	push   $0x3fa
f01142b4:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01142b9:	e8 55 c1 fe ff       	call   f0100413 <_warn>
f01142be:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01142c1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01142c5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01142c9:	74 04                	je     f01142cf <test_share_chunk+0x48b>
f01142cb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01142cf:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f01142d3:	83 ec 0c             	sub    $0xc,%esp
f01142d6:	68 63 9a 13 f0       	push   $0xf0139a63
f01142db:	e8 2e ca fe ff       	call   f0100d0e <cprintf>
f01142e0:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f01142e3:	83 ec 0c             	sub    $0xc,%esp
f01142e6:	68 24 a5 13 f0       	push   $0xf013a524
f01142eb:	e8 1e ca fe ff       	call   f0100d0e <cprintf>
f01142f0:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01142f3:	e8 61 8d ff ff       	call   f010d059 <sys_calculate_free_frames>
f01142f8:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f01142fb:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01142fe:	89 d0                	mov    %edx,%eax
f0114300:	c1 e0 03             	shl    $0x3,%eax
f0114303:	01 d0                	add    %edx,%eax
f0114305:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011430c:	01 d0                	add    %edx,%eax
f011430e:	c1 e0 03             	shl    $0x3,%eax
f0114311:	83 ec 0c             	sub    $0xc,%esp
f0114314:	6a 06                	push   $0x6
f0114316:	50                   	push   %eax
f0114317:	6a 00                	push   $0x0
f0114319:	68 00 00 00 40       	push   $0x40000000
f011431e:	ff 75 cc             	pushl  -0x34(%ebp)
f0114321:	e8 2b 49 ff ff       	call   f0108c51 <share_chunk>
f0114326:	83 c4 20             	add    $0x20,%esp
f0114329:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011432c:	e8 28 8d ff ff       	call   f010d059 <sys_calculate_free_frames>
f0114331:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0114334:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0114338:	75 0b                	jne    f0114345 <test_share_chunk+0x501>
f011433a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011433d:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114340:	83 f8 01             	cmp    $0x1,%eax
f0114343:	74 28                	je     f011436d <test_share_chunk+0x529>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0114345:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114348:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011434b:	83 ec 0c             	sub    $0xc,%esp
f011434e:	50                   	push   %eax
f011434f:	ff 75 a0             	pushl  -0x60(%ebp)
f0114352:	68 d4 a4 13 f0       	push   $0xf013a4d4
f0114357:	68 10 04 00 00       	push   $0x410
f011435c:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0114361:	e8 ad c0 fe ff       	call   f0100413 <_warn>
f0114366:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114369:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011436d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114371:	74 04                	je     f0114377 <test_share_chunk+0x533>
f0114373:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114377:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011437b:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0114382:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114385:	05 00 80 02 00       	add    $0x28000,%eax
f011438a:	c1 e0 02             	shl    $0x2,%eax
f011438d:	83 ec 08             	sub    $0x8,%esp
f0114390:	6a 02                	push   $0x2
f0114392:	6a 07                	push   $0x7
f0114394:	6a 03                	push   $0x3
f0114396:	6a 07                	push   $0x7
f0114398:	6a 07                	push   $0x7
f011439a:	6a ff                	push   $0xffffffff
f011439c:	50                   	push   %eax
f011439d:	6a 00                	push   $0x0
f011439f:	68 00 00 00 40       	push   $0x40000000
f01143a4:	ff 75 cc             	pushl  -0x34(%ebp)
f01143a7:	e8 96 25 00 00       	call   f0116942 <CCP>
f01143ac:	83 c4 30             	add    $0x30,%esp
f01143af:	85 c0                	test   %eax,%eax
f01143b1:	75 25                	jne    f01143d8 <test_share_chunk+0x594>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01143b3:	83 ec 04             	sub    $0x4,%esp
f01143b6:	68 0c a4 13 f0       	push   $0xf013a40c
f01143bb:	68 19 04 00 00       	push   $0x419
f01143c0:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01143c5:	e8 49 c0 fe ff       	call   f0100413 <_warn>
f01143ca:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01143cd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01143d1:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01143d8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01143db:	89 d0                	mov    %edx,%eax
f01143dd:	01 c0                	add    %eax,%eax
f01143df:	01 d0                	add    %edx,%eax
f01143e1:	c1 e0 02             	shl    $0x2,%eax
f01143e4:	83 ec 08             	sub    $0x8,%esp
f01143e7:	6a 02                	push   $0x2
f01143e9:	6a 07                	push   $0x7
f01143eb:	6a 03                	push   $0x3
f01143ed:	6a 07                	push   $0x7
f01143ef:	6a 07                	push   $0x7
f01143f1:	6a 03                	push   $0x3
f01143f3:	50                   	push   %eax
f01143f4:	6a 00                	push   $0x0
f01143f6:	68 00 00 00 40       	push   $0x40000000
f01143fb:	ff 75 cc             	pushl  -0x34(%ebp)
f01143fe:	e8 3f 25 00 00       	call   f0116942 <CCP>
f0114403:	83 c4 30             	add    $0x30,%esp
f0114406:	85 c0                	test   %eax,%eax
f0114408:	75 1e                	jne    f0114428 <test_share_chunk+0x5e4>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011440a:	83 ec 04             	sub    $0x4,%esp
f011440d:	68 0c a4 13 f0       	push   $0xf013a40c
f0114412:	68 20 04 00 00       	push   $0x420
f0114417:	68 3e 8d 13 f0       	push   $0xf0138d3e
f011441c:	e8 f2 bf fe ff       	call   f0100413 <_warn>
f0114421:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114424:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114428:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011442c:	74 04                	je     f0114432 <test_share_chunk+0x5ee>
f011442e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114432:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0114436:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114439:	89 d0                	mov    %edx,%eax
f011443b:	01 c0                	add    %eax,%eax
f011443d:	01 d0                	add    %edx,%eax
f011443f:	c1 e0 02             	shl    $0x2,%eax
f0114442:	f7 d8                	neg    %eax
f0114444:	05 00 00 0a 00       	add    $0xa0000,%eax
f0114449:	83 ec 08             	sub    $0x8,%esp
f011444c:	6a 02                	push   $0x2
f011444e:	6a 07                	push   $0x7
f0114450:	6a 03                	push   $0x3
f0114452:	6a 07                	push   $0x7
f0114454:	6a 07                	push   $0x7
f0114456:	6a 02                	push   $0x2
f0114458:	50                   	push   %eax
f0114459:	68 00 30 00 00       	push   $0x3000
f011445e:	68 00 30 00 40       	push   $0x40003000
f0114463:	ff 75 cc             	pushl  -0x34(%ebp)
f0114466:	e8 d7 24 00 00       	call   f0116942 <CCP>
f011446b:	83 c4 30             	add    $0x30,%esp
f011446e:	85 c0                	test   %eax,%eax
f0114470:	75 1e                	jne    f0114490 <test_share_chunk+0x64c>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114472:	83 ec 04             	sub    $0x4,%esp
f0114475:	68 0c a4 13 f0       	push   $0xf013a40c
f011447a:	68 28 04 00 00       	push   $0x428
f011447f:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0114484:	e8 8a bf fe ff       	call   f0100413 <_warn>
f0114489:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011448c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114490:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114494:	74 04                	je     f011449a <test_share_chunk+0x656>
f0114496:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011449a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f011449e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01144a1:	c1 e0 02             	shl    $0x2,%eax
f01144a4:	83 ec 08             	sub    $0x8,%esp
f01144a7:	6a 02                	push   $0x2
f01144a9:	6a 07                	push   $0x7
f01144ab:	6a 03                	push   $0x3
f01144ad:	6a 07                	push   $0x7
f01144af:	6a 07                	push   $0x7
f01144b1:	6a 03                	push   $0x3
f01144b3:	50                   	push   %eax
f01144b4:	68 00 00 0a 00       	push   $0xa0000
f01144b9:	68 00 00 0a 40       	push   $0x400a0000
f01144be:	ff 75 cc             	pushl  -0x34(%ebp)
f01144c1:	e8 7c 24 00 00       	call   f0116942 <CCP>
f01144c6:	83 c4 30             	add    $0x30,%esp
f01144c9:	85 c0                	test   %eax,%eax
f01144cb:	75 1e                	jne    f01144eb <test_share_chunk+0x6a7>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01144cd:	83 ec 04             	sub    $0x4,%esp
f01144d0:	68 0c a4 13 f0       	push   $0xf013a40c
f01144d5:	68 30 04 00 00       	push   $0x430
f01144da:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01144df:	e8 2f bf fe ff       	call   f0100413 <_warn>
f01144e4:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01144e7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01144eb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01144ef:	74 04                	je     f01144f5 <test_share_chunk+0x6b1>
f01144f1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01144f5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01144f9:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f01144fd:	0f 84 92 00 00 00    	je     f0114595 <test_share_chunk+0x751>
		{
			ptr1 = (char*)0x7FF;
f0114503:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f011450a:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f0114511:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f0114518:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f011451f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114522:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f0114525:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f011452c:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0114533:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114536:	8a 00                	mov    (%eax),%al
f0114538:	3c 41                	cmp    $0x41,%al
f011453a:	75 2d                	jne    f0114569 <test_share_chunk+0x725>
f011453c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011453f:	8a 00                	mov    (%eax),%al
f0114541:	3c 41                	cmp    $0x41,%al
f0114543:	75 24                	jne    f0114569 <test_share_chunk+0x725>
f0114545:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0114548:	8a 00                	mov    (%eax),%al
f011454a:	3c 41                	cmp    $0x41,%al
f011454c:	75 1b                	jne    f0114569 <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f011454e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114551:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0114553:	3c 44                	cmp    $0x44,%al
f0114555:	75 12                	jne    f0114569 <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0114557:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011455a:	8a 00                	mov    (%eax),%al
f011455c:	3c 44                	cmp    $0x44,%al
f011455e:	75 09                	jne    f0114569 <test_share_chunk+0x725>
f0114560:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114563:	8a 00                	mov    (%eax),%al
f0114565:	3c 44                	cmp    $0x44,%al
f0114567:	74 1e                	je     f0114587 <test_share_chunk+0x743>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114569:	83 ec 04             	sub    $0x4,%esp
f011456c:	68 54 a4 13 f0       	push   $0xf013a454
f0114571:	68 42 04 00 00       	push   $0x442
f0114576:	68 3e 8d 13 f0       	push   $0xf0138d3e
f011457b:	e8 93 be fe ff       	call   f0100413 <_warn>
f0114580:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114583:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114587:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011458b:	74 04                	je     f0114591 <test_share_chunk+0x74d>
f011458d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114591:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0114595:	83 ec 0c             	sub    $0xc,%esp
f0114598:	68 c6 9a 13 f0       	push   $0xf0139ac6
f011459d:	e8 6c c7 fe ff       	call   f0100d0e <cprintf>
f01145a2:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f01145a5:	83 ec 0c             	sub    $0xc,%esp
f01145a8:	68 60 a5 13 f0       	push   $0xf013a560
f01145ad:	e8 5c c7 fe ff       	call   f0100d0e <cprintf>
f01145b2:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01145b5:	e8 9f 8a ff ff       	call   f010d059 <sys_calculate_free_frames>
f01145ba:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f01145bd:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01145c0:	89 d0                	mov    %edx,%eax
f01145c2:	01 c0                	add    %eax,%eax
f01145c4:	01 d0                	add    %edx,%eax
f01145c6:	01 c0                	add    %eax,%eax
f01145c8:	01 d0                	add    %edx,%eax
f01145ca:	83 ec 0c             	sub    $0xc,%esp
f01145cd:	6a 04                	push   $0x4
f01145cf:	50                   	push   %eax
f01145d0:	68 00 fc 3f 00       	push   $0x3ffc00
f01145d5:	68 00 fc 09 00       	push   $0x9fc00
f01145da:	ff 75 cc             	pushl  -0x34(%ebp)
f01145dd:	e8 6f 46 ff ff       	call   f0108c51 <share_chunk>
f01145e2:	83 c4 20             	add    $0x20,%esp
f01145e5:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01145e8:	e8 6c 8a ff ff       	call   f010d059 <sys_calculate_free_frames>
f01145ed:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f01145f0:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f01145f4:	75 0b                	jne    f0114601 <test_share_chunk+0x7bd>
f01145f6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01145f9:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01145fc:	83 f8 01             	cmp    $0x1,%eax
f01145ff:	74 28                	je     f0114629 <test_share_chunk+0x7e5>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0114601:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114604:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114607:	83 ec 0c             	sub    $0xc,%esp
f011460a:	50                   	push   %eax
f011460b:	ff 75 8c             	pushl  -0x74(%ebp)
f011460e:	68 d4 a4 13 f0       	push   $0xf013a4d4
f0114613:	68 58 04 00 00       	push   $0x458
f0114618:	68 3e 8d 13 f0       	push   $0xf0138d3e
f011461d:	e8 f1 bd fe ff       	call   f0100413 <_warn>
f0114622:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114625:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114629:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011462d:	74 04                	je     f0114633 <test_share_chunk+0x7ef>
f011462f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114633:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114637:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f011463e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114641:	89 d0                	mov    %edx,%eax
f0114643:	01 c0                	add    %eax,%eax
f0114645:	01 d0                	add    %edx,%eax
f0114647:	c1 e0 02             	shl    $0x2,%eax
f011464a:	83 ec 08             	sub    $0x8,%esp
f011464d:	6a 02                	push   $0x2
f011464f:	6a 07                	push   $0x7
f0114651:	6a 07                	push   $0x7
f0114653:	6a 07                	push   $0x7
f0114655:	6a 05                	push   $0x5
f0114657:	6a ff                	push   $0xffffffff
f0114659:	50                   	push   %eax
f011465a:	68 00 f0 3f 00       	push   $0x3ff000
f011465f:	68 00 f0 09 00       	push   $0x9f000
f0114664:	ff 75 cc             	pushl  -0x34(%ebp)
f0114667:	e8 d6 22 00 00       	call   f0116942 <CCP>
f011466c:	83 c4 30             	add    $0x30,%esp
f011466f:	85 c0                	test   %eax,%eax
f0114671:	75 25                	jne    f0114698 <test_share_chunk+0x854>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114673:	83 ec 04             	sub    $0x4,%esp
f0114676:	68 0c a4 13 f0       	push   $0xf013a40c
f011467b:	68 61 04 00 00       	push   $0x461
f0114680:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0114685:	e8 89 bd fe ff       	call   f0100413 <_warn>
f011468a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011468d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114691:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f0114698:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011469c:	74 04                	je     f01146a2 <test_share_chunk+0x85e>
f011469e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01146a2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01146a6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01146a9:	c1 e0 02             	shl    $0x2,%eax
f01146ac:	83 ec 08             	sub    $0x8,%esp
f01146af:	6a 02                	push   $0x2
f01146b1:	6a 07                	push   $0x7
f01146b3:	6a 07                	push   $0x7
f01146b5:	6a 07                	push   $0x7
f01146b7:	6a 05                	push   $0x5
f01146b9:	6a 03                	push   $0x3
f01146bb:	50                   	push   %eax
f01146bc:	68 00 f0 3f 00       	push   $0x3ff000
f01146c1:	68 00 f0 09 00       	push   $0x9f000
f01146c6:	ff 75 cc             	pushl  -0x34(%ebp)
f01146c9:	e8 74 22 00 00       	call   f0116942 <CCP>
f01146ce:	83 c4 30             	add    $0x30,%esp
f01146d1:	85 c0                	test   %eax,%eax
f01146d3:	75 1e                	jne    f01146f3 <test_share_chunk+0x8af>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01146d5:	83 ec 04             	sub    $0x4,%esp
f01146d8:	68 0c a4 13 f0       	push   $0xf013a40c
f01146dd:	68 6a 04 00 00       	push   $0x46a
f01146e2:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01146e7:	e8 27 bd fe ff       	call   f0100413 <_warn>
f01146ec:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01146ef:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01146f3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01146f7:	74 04                	je     f01146fd <test_share_chunk+0x8b9>
f01146f9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01146fd:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0114701:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114704:	c1 e0 03             	shl    $0x3,%eax
f0114707:	83 ec 08             	sub    $0x8,%esp
f011470a:	6a 02                	push   $0x2
f011470c:	6a 07                	push   $0x7
f011470e:	6a 07                	push   $0x7
f0114710:	6a 07                	push   $0x7
f0114712:	6a 05                	push   $0x5
f0114714:	6a 04                	push   $0x4
f0114716:	50                   	push   %eax
f0114717:	68 00 00 40 00       	push   $0x400000
f011471c:	68 00 00 0a 00       	push   $0xa0000
f0114721:	ff 75 cc             	pushl  -0x34(%ebp)
f0114724:	e8 19 22 00 00       	call   f0116942 <CCP>
f0114729:	83 c4 30             	add    $0x30,%esp
f011472c:	85 c0                	test   %eax,%eax
f011472e:	75 1e                	jne    f011474e <test_share_chunk+0x90a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114730:	83 ec 04             	sub    $0x4,%esp
f0114733:	68 0c a4 13 f0       	push   $0xf013a40c
f0114738:	68 72 04 00 00       	push   $0x472
f011473d:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0114742:	e8 cc bc fe ff       	call   f0100413 <_warn>
f0114747:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011474a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011474e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114752:	74 04                	je     f0114758 <test_share_chunk+0x914>
f0114754:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114758:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f011475c:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0114760:	0f 84 b2 00 00 00    	je     f0114818 <test_share_chunk+0x9d4>
		{
			ptr1 = (char*)0x0009FFFF;
f0114766:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f011476d:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f0114774:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f011477b:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f0114782:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f0114789:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f0114790:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f0114797:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f011479e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01147a1:	8a 00                	mov    (%eax),%al
f01147a3:	3c 44                	cmp    $0x44,%al
f01147a5:	75 45                	jne    f01147ec <test_share_chunk+0x9a8>
f01147a7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01147aa:	8a 00                	mov    (%eax),%al
f01147ac:	3c 44                	cmp    $0x44,%al
f01147ae:	75 3c                	jne    f01147ec <test_share_chunk+0x9a8>
f01147b0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01147b3:	8a 00                	mov    (%eax),%al
f01147b5:	3c 44                	cmp    $0x44,%al
f01147b7:	75 33                	jne    f01147ec <test_share_chunk+0x9a8>
f01147b9:	8b 45 98             	mov    -0x68(%ebp),%eax
f01147bc:	8a 00                	mov    (%eax),%al
f01147be:	3c 44                	cmp    $0x44,%al
f01147c0:	75 2a                	jne    f01147ec <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f01147c2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01147c5:	8a 10                	mov    (%eax),%dl
f01147c7:	8b 45 90             	mov    -0x70(%ebp),%eax
f01147ca:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f01147cc:	38 c2                	cmp    %al,%dl
f01147ce:	75 1c                	jne    f01147ec <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f01147d0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01147d3:	8a 10                	mov    (%eax),%dl
f01147d5:	8b 45 88             	mov    -0x78(%ebp),%eax
f01147d8:	8a 00                	mov    (%eax),%al
f01147da:	38 c2                	cmp    %al,%dl
f01147dc:	75 0e                	jne    f01147ec <test_share_chunk+0x9a8>
f01147de:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01147e1:	8a 10                	mov    (%eax),%dl
f01147e3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01147e6:	8a 00                	mov    (%eax),%al
f01147e8:	38 c2                	cmp    %al,%dl
f01147ea:	74 1e                	je     f011480a <test_share_chunk+0x9c6>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01147ec:	83 ec 04             	sub    $0x4,%esp
f01147ef:	68 54 a4 13 f0       	push   $0xf013a454
f01147f4:	68 87 04 00 00       	push   $0x487
f01147f9:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01147fe:	e8 10 bc fe ff       	call   f0100413 <_warn>
f0114803:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114806:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f011480a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011480e:	74 04                	je     f0114814 <test_share_chunk+0x9d0>
f0114810:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114814:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f0114818:	83 ec 0c             	sub    $0xc,%esp
f011481b:	68 98 a5 13 f0       	push   $0xf013a598
f0114820:	e8 e9 c4 fe ff       	call   f0100d0e <cprintf>
f0114825:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f0114828:	83 ec 08             	sub    $0x8,%esp
f011482b:	ff 75 e4             	pushl  -0x1c(%ebp)
f011482e:	68 a8 a5 13 f0       	push   $0xf013a5a8
f0114833:	e8 d6 c4 fe ff       	call   f0100d0e <cprintf>
f0114838:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f011483b:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011483f:	75 10                	jne    f0114851 <test_share_chunk+0xa0d>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f0114841:	83 ec 0c             	sub    $0xc,%esp
f0114844:	68 d8 a5 13 f0       	push   $0xf013a5d8
f0114849:	e8 c0 c4 fe ff       	call   f0100d0e <cprintf>
f011484e:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114851:	a1 28 b9 85 f0       	mov    0xf085b928,%eax
f0114856:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0114859:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011485c:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011485f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114864:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114867:	5b                   	pop    %ebx
f0114868:	5e                   	pop    %esi
f0114869:	5f                   	pop    %edi
f011486a:	5d                   	pop    %ebp
f011486b:	c3                   	ret    

f011486c <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f011486c:	55                   	push   %ebp
f011486d:	89 e5                	mov    %esp,%ebp
f011486f:	57                   	push   %edi
f0114870:	56                   	push   %esi
f0114871:	53                   	push   %ebx
f0114872:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114878:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f011487e:	bb d8 97 13 f0       	mov    $0xf01397d8,%ebx
f0114883:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114888:	89 c7                	mov    %eax,%edi
f011488a:	89 de                	mov    %ebx,%esi
f011488c:	89 d1                	mov    %edx,%ecx
f011488e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114890:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0114896:	b9 23 00 00 00       	mov    $0x23,%ecx
f011489b:	b0 00                	mov    $0x0,%al
f011489d:	89 d7                	mov    %edx,%edi
f011489f:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01148a1:	6a 00                	push   $0x0
f01148a3:	6a 0a                	push   $0xa
f01148a5:	6a 14                	push   $0x14
f01148a7:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01148ad:	50                   	push   %eax
f01148ae:	e8 6c 4a ff ff       	call   f010931f <env_create>
f01148b3:	83 c4 10             	add    $0x10,%esp
f01148b6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01148b9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01148bc:	8b 40 5c             	mov    0x5c(%eax),%eax
f01148bf:	89 45 d0             	mov    %eax,-0x30(%ebp)
	lcr3(env->env_cr3) ;
f01148c2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01148c5:	8b 40 60             	mov    0x60(%eax),%eax
f01148c8:	89 45 90             	mov    %eax,-0x70(%ebp)
f01148cb:	8b 45 90             	mov    -0x70(%ebp),%eax
f01148ce:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f01148d1:	83 ec 0c             	sub    $0xc,%esp
f01148d4:	ff 75 d0             	pushl  -0x30(%ebp)
f01148d7:	e8 32 20 00 00       	call   f011690e <ClearUserSpace>
f01148dc:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01148df:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f01148e6:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)
	uint32 eval = 0;
f01148ed:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f01148f4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f01148f8:	83 ec 0c             	sub    $0xc,%esp
f01148fb:	68 14 a6 13 f0       	push   $0xf013a614
f0114900:	e8 09 c4 fe ff       	call   f0100d0e <cprintf>
f0114905:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f0114908:	c7 45 c0 ff ff bf ef 	movl   $0xefbfffff,-0x40(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f011490f:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		tptr[1] = *ptr1 ;
f0114916:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114919:	8a 00                	mov    (%eax),%al
f011491b:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f0114921:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114924:	8a 00                	mov    (%eax),%al
f0114926:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f011492c:	83 ec 08             	sub    $0x8,%esp
f011492f:	68 00 f0 bf ef       	push   $0xefbff000
f0114934:	ff 75 d0             	pushl  -0x30(%ebp)
f0114937:	e8 b3 1f 00 00       	call   f01168ef <GP>
f011493c:	83 c4 10             	add    $0x10,%esp
f011493f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114942:	e8 12 87 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0114947:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f011494a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011494d:	c1 e0 02             	shl    $0x2,%eax
f0114950:	6a 02                	push   $0x2
f0114952:	50                   	push   %eax
f0114953:	68 00 f0 bf ef       	push   $0xefbff000
f0114958:	ff 75 d0             	pushl  -0x30(%ebp)
f011495b:	e8 c3 44 ff ff       	call   f0108e23 <allocate_chunk>
f0114960:	83 c4 10             	add    $0x10,%esp
f0114963:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114966:	e8 ee 86 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011496b:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f011496e:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0114972:	75 08                	jne    f011497c <test_allocate_chunk+0x110>
f0114974:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114977:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011497a:	74 2a                	je     f01149a6 <test_allocate_chunk+0x13a>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f011497c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011497f:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114982:	83 ec 08             	sub    $0x8,%esp
f0114985:	6a 00                	push   $0x0
f0114987:	50                   	push   %eax
f0114988:	ff 75 b0             	pushl  -0x50(%ebp)
f011498b:	68 40 a6 13 f0       	push   $0xf013a640
f0114990:	68 c3 04 00 00       	push   $0x4c3
f0114995:	68 3e 8d 13 f0       	push   $0xf0138d3e
f011499a:	e8 74 ba fe ff       	call   f0100413 <_warn>
f011499f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01149a2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01149a6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01149aa:	74 04                	je     f01149b0 <test_allocate_chunk+0x144>
f01149ac:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01149b0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f01149b4:	e8 a0 86 ff ff       	call   f010d059 <sys_calculate_free_frames>
f01149b9:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f01149bc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01149bf:	01 c0                	add    %eax,%eax
f01149c1:	89 c1                	mov    %eax,%ecx
f01149c3:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01149c6:	89 d0                	mov    %edx,%eax
f01149c8:	c1 e0 02             	shl    $0x2,%eax
f01149cb:	01 d0                	add    %edx,%eax
f01149cd:	f7 d8                	neg    %eax
f01149cf:	2d 00 00 40 10       	sub    $0x10400000,%eax
f01149d4:	6a 02                	push   $0x2
f01149d6:	51                   	push   %ecx
f01149d7:	50                   	push   %eax
f01149d8:	ff 75 d0             	pushl  -0x30(%ebp)
f01149db:	e8 43 44 ff ff       	call   f0108e23 <allocate_chunk>
f01149e0:	83 c4 10             	add    $0x10,%esp
f01149e3:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01149e6:	e8 6e 86 ff ff       	call   f010d059 <sys_calculate_free_frames>
f01149eb:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f01149ee:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f01149f2:	75 08                	jne    f01149fc <test_allocate_chunk+0x190>
f01149f4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01149f7:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01149fa:	74 2a                	je     f0114a26 <test_allocate_chunk+0x1ba>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f01149fc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01149ff:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114a02:	83 ec 08             	sub    $0x8,%esp
f0114a05:	6a 00                	push   $0x0
f0114a07:	50                   	push   %eax
f0114a08:	ff 75 b0             	pushl  -0x50(%ebp)
f0114a0b:	68 40 a6 13 f0       	push   $0xf013a640
f0114a10:	68 d1 04 00 00       	push   $0x4d1
f0114a15:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0114a1a:	e8 f4 b9 fe ff       	call   f0100413 <_warn>
f0114a1f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a22:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114a26:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a2a:	74 04                	je     f0114a30 <test_allocate_chunk+0x1c4>
f0114a2c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114a30:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f0114a34:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114a37:	c1 e0 02             	shl    $0x2,%eax
f0114a3a:	83 ec 08             	sub    $0x8,%esp
f0114a3d:	6a 03                	push   $0x3
f0114a3f:	6a 00                	push   $0x0
f0114a41:	6a 00                	push   $0x0
f0114a43:	68 ff 0f 00 00       	push   $0xfff
f0114a48:	ff 75 b8             	pushl  -0x48(%ebp)
f0114a4b:	6a 01                	push   $0x1
f0114a4d:	50                   	push   %eax
f0114a4e:	68 00 f0 bf ef       	push   $0xefbff000
f0114a53:	6a 00                	push   $0x0
f0114a55:	ff 75 d0             	pushl  -0x30(%ebp)
f0114a58:	e8 e5 1e 00 00       	call   f0116942 <CCP>
f0114a5d:	83 c4 30             	add    $0x30,%esp
f0114a60:	85 c0                	test   %eax,%eax
f0114a62:	75 1e                	jne    f0114a82 <test_allocate_chunk+0x216>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114a64:	83 ec 04             	sub    $0x4,%esp
f0114a67:	68 a8 a6 13 f0       	push   $0xf013a6a8
f0114a6c:	68 d9 04 00 00       	push   $0x4d9
f0114a71:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0114a76:	e8 98 b9 fe ff       	call   f0100413 <_warn>
f0114a7b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114a7e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114a82:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a86:	74 04                	je     f0114a8c <test_allocate_chunk+0x220>
f0114a88:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114a8c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f0114a90:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114a93:	8a 10                	mov    (%eax),%dl
f0114a95:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f0114a9b:	38 c2                	cmp    %al,%dl
f0114a9d:	75 0f                	jne    f0114aae <test_allocate_chunk+0x242>
f0114a9f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114aa2:	8a 10                	mov    (%eax),%dl
f0114aa4:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f0114aaa:	38 c2                	cmp    %al,%dl
f0114aac:	74 1e                	je     f0114acc <test_allocate_chunk+0x260>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114aae:	83 ec 04             	sub    $0x4,%esp
f0114ab1:	68 f4 a6 13 f0       	push   $0xf013a6f4
f0114ab6:	68 e1 04 00 00       	push   $0x4e1
f0114abb:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0114ac0:	e8 4e b9 fe ff       	call   f0100413 <_warn>
f0114ac5:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114ac8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114acc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ad0:	74 04                	je     f0114ad6 <test_allocate_chunk+0x26a>
f0114ad2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114ad6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0114ada:	83 ec 0c             	sub    $0xc,%esp
f0114add:	68 89 a4 13 f0       	push   $0xf013a489
f0114ae2:	e8 27 c2 fe ff       	call   f0100d0e <cprintf>
f0114ae7:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f0114aea:	83 ec 0c             	sub    $0xc,%esp
f0114aed:	68 2c a7 13 f0       	push   $0xf013a72c
f0114af2:	e8 17 c2 fe ff       	call   f0100d0e <cprintf>
f0114af7:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114afa:	e8 5a 85 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0114aff:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0114b02:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114b05:	c1 e0 05             	shl    $0x5,%eax
f0114b08:	68 02 0e 00 00       	push   $0xe02
f0114b0d:	50                   	push   %eax
f0114b0e:	6a 00                	push   $0x0
f0114b10:	ff 75 d0             	pushl  -0x30(%ebp)
f0114b13:	e8 0b 43 ff ff       	call   f0108e23 <allocate_chunk>
f0114b18:	83 c4 10             	add    $0x10,%esp
f0114b1b:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114b1e:	e8 36 85 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0114b23:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f0114b26:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0114b2a:	75 36                	jne    f0114b62 <test_allocate_chunk+0x2f6>
f0114b2c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114b2f:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114b32:	89 c1                	mov    %eax,%ecx
f0114b34:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114b37:	c1 e0 05             	shl    $0x5,%eax
f0114b3a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114b3d:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114b44:	99                   	cltd   
f0114b45:	f7 fe                	idiv   %esi
f0114b47:	89 c3                	mov    %eax,%ebx
f0114b49:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114b4c:	c1 e0 05             	shl    $0x5,%eax
f0114b4f:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114b52:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114b59:	99                   	cltd   
f0114b5a:	f7 fe                	idiv   %esi
f0114b5c:	01 d8                	add    %ebx,%eax
f0114b5e:	39 c1                	cmp    %eax,%ecx
f0114b60:	74 54                	je     f0114bb6 <test_allocate_chunk+0x34a>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f0114b62:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114b65:	c1 e0 05             	shl    $0x5,%eax
f0114b68:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114b6b:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114b72:	99                   	cltd   
f0114b73:	f7 ff                	idiv   %edi
f0114b75:	89 c1                	mov    %eax,%ecx
f0114b77:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114b7a:	c1 e0 05             	shl    $0x5,%eax
f0114b7d:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114b80:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114b87:	99                   	cltd   
f0114b88:	f7 fe                	idiv   %esi
f0114b8a:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114b8d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114b90:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114b93:	83 ec 08             	sub    $0x8,%esp
f0114b96:	52                   	push   %edx
f0114b97:	50                   	push   %eax
f0114b98:	ff 75 a8             	pushl  -0x58(%ebp)
f0114b9b:	68 6c a7 13 f0       	push   $0xf013a76c
f0114ba0:	68 f6 04 00 00       	push   $0x4f6
f0114ba5:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0114baa:	e8 64 b8 fe ff       	call   f0100413 <_warn>
f0114baf:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114bb2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114bb6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114bba:	74 04                	je     f0114bc0 <test_allocate_chunk+0x354>
f0114bbc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114bc0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114bc4:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114bcb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114bce:	c1 e0 05             	shl    $0x5,%eax
f0114bd1:	83 ec 08             	sub    $0x8,%esp
f0114bd4:	6a 03                	push   $0x3
f0114bd6:	6a 00                	push   $0x0
f0114bd8:	6a 00                	push   $0x0
f0114bda:	68 07 0e 00 00       	push   $0xe07
f0114bdf:	68 03 0e 00 00       	push   $0xe03
f0114be4:	6a 01                	push   $0x1
f0114be6:	50                   	push   %eax
f0114be7:	6a 00                	push   $0x0
f0114be9:	6a 00                	push   $0x0
f0114beb:	ff 75 d0             	pushl  -0x30(%ebp)
f0114bee:	e8 4f 1d 00 00       	call   f0116942 <CCP>
f0114bf3:	83 c4 30             	add    $0x30,%esp
f0114bf6:	85 c0                	test   %eax,%eax
f0114bf8:	75 25                	jne    f0114c1f <test_allocate_chunk+0x3b3>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114bfa:	83 ec 04             	sub    $0x4,%esp
f0114bfd:	68 a8 a6 13 f0       	push   $0xf013a6a8
f0114c02:	68 ff 04 00 00       	push   $0x4ff
f0114c07:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0114c0c:	e8 02 b8 fe ff       	call   f0100413 <_warn>
f0114c11:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114c14:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114c18:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0114c1f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114c23:	74 04                	je     f0114c29 <test_allocate_chunk+0x3bd>
f0114c25:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114c29:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114c2d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0114c31:	74 5a                	je     f0114c8d <test_allocate_chunk+0x421>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f0114c33:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114c36:	01 c0                	add    %eax,%eax
f0114c38:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114c3b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114c3e:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f0114c41:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114c44:	01 c0                	add    %eax,%eax
f0114c46:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114c49:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114c4c:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114c4f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114c52:	8a 00                	mov    (%eax),%al
f0114c54:	3c 4b                	cmp    $0x4b,%al
f0114c56:	75 09                	jne    f0114c61 <test_allocate_chunk+0x3f5>
f0114c58:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114c5b:	8a 00                	mov    (%eax),%al
f0114c5d:	3c 4d                	cmp    $0x4d,%al
f0114c5f:	74 1e                	je     f0114c7f <test_allocate_chunk+0x413>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114c61:	83 ec 04             	sub    $0x4,%esp
f0114c64:	68 f4 a6 13 f0       	push   $0xf013a6f4
f0114c69:	68 0d 05 00 00       	push   $0x50d
f0114c6e:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0114c73:	e8 9b b7 fe ff       	call   f0100413 <_warn>
f0114c78:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114c7b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114c7f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114c83:	74 04                	je     f0114c89 <test_allocate_chunk+0x41d>
f0114c85:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114c89:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0114c8d:	83 ec 0c             	sub    $0xc,%esp
f0114c90:	68 63 9a 13 f0       	push   $0xf0139a63
f0114c95:	e8 74 c0 fe ff       	call   f0100d0e <cprintf>
f0114c9a:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f0114c9d:	83 ec 0c             	sub    $0xc,%esp
f0114ca0:	68 cc a7 13 f0       	push   $0xf013a7cc
f0114ca5:	e8 64 c0 fe ff       	call   f0100d0e <cprintf>
f0114caa:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114cad:	e8 a7 83 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0114cb2:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f0114cb5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114cb8:	c1 e0 06             	shl    $0x6,%eax
f0114cbb:	89 c2                	mov    %eax,%edx
f0114cbd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114cc0:	c1 e0 05             	shl    $0x5,%eax
f0114cc3:	6a 00                	push   $0x0
f0114cc5:	52                   	push   %edx
f0114cc6:	50                   	push   %eax
f0114cc7:	ff 75 d0             	pushl  -0x30(%ebp)
f0114cca:	e8 54 41 ff ff       	call   f0108e23 <allocate_chunk>
f0114ccf:	83 c4 10             	add    $0x10,%esp
f0114cd2:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114cd5:	e8 7f 83 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0114cda:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0114cdd:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0114ce1:	75 36                	jne    f0114d19 <test_allocate_chunk+0x4ad>
f0114ce3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114ce6:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114ce9:	89 c1                	mov    %eax,%ecx
f0114ceb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114cee:	c1 e0 06             	shl    $0x6,%eax
f0114cf1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114cf4:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114cfb:	99                   	cltd   
f0114cfc:	f7 ff                	idiv   %edi
f0114cfe:	89 c3                	mov    %eax,%ebx
f0114d00:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114d03:	c1 e0 06             	shl    $0x6,%eax
f0114d06:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114d09:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114d10:	99                   	cltd   
f0114d11:	f7 fe                	idiv   %esi
f0114d13:	01 d8                	add    %ebx,%eax
f0114d15:	39 c1                	cmp    %eax,%ecx
f0114d17:	74 54                	je     f0114d6d <test_allocate_chunk+0x501>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f0114d19:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114d1c:	c1 e0 06             	shl    $0x6,%eax
f0114d1f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114d22:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114d29:	99                   	cltd   
f0114d2a:	f7 fb                	idiv   %ebx
f0114d2c:	89 c1                	mov    %eax,%ecx
f0114d2e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114d31:	c1 e0 06             	shl    $0x6,%eax
f0114d34:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114d37:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114d3e:	99                   	cltd   
f0114d3f:	f7 ff                	idiv   %edi
f0114d41:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114d44:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114d47:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114d4a:	83 ec 08             	sub    $0x8,%esp
f0114d4d:	52                   	push   %edx
f0114d4e:	50                   	push   %eax
f0114d4f:	ff 75 a4             	pushl  -0x5c(%ebp)
f0114d52:	68 6c a7 13 f0       	push   $0xf013a76c
f0114d57:	68 23 05 00 00       	push   $0x523
f0114d5c:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0114d61:	e8 ad b6 fe ff       	call   f0100413 <_warn>
f0114d66:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114d69:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114d6d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114d71:	74 04                	je     f0114d77 <test_allocate_chunk+0x50b>
f0114d73:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114d77:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114d7b:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114d82:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114d85:	c1 e0 06             	shl    $0x6,%eax
f0114d88:	89 c2                	mov    %eax,%edx
f0114d8a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114d8d:	c1 e0 05             	shl    $0x5,%eax
f0114d90:	83 ec 08             	sub    $0x8,%esp
f0114d93:	6a 03                	push   $0x3
f0114d95:	6a 00                	push   $0x0
f0114d97:	6a 00                	push   $0x0
f0114d99:	68 07 0e 00 00       	push   $0xe07
f0114d9e:	6a 01                	push   $0x1
f0114da0:	6a 01                	push   $0x1
f0114da2:	52                   	push   %edx
f0114da3:	50                   	push   %eax
f0114da4:	6a 00                	push   $0x0
f0114da6:	ff 75 d0             	pushl  -0x30(%ebp)
f0114da9:	e8 94 1b 00 00       	call   f0116942 <CCP>
f0114dae:	83 c4 30             	add    $0x30,%esp
f0114db1:	85 c0                	test   %eax,%eax
f0114db3:	75 25                	jne    f0114dda <test_allocate_chunk+0x56e>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114db5:	83 ec 04             	sub    $0x4,%esp
f0114db8:	68 a8 a6 13 f0       	push   $0xf013a6a8
f0114dbd:	68 2c 05 00 00       	push   $0x52c
f0114dc2:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0114dc7:	e8 47 b6 fe ff       	call   f0100413 <_warn>
f0114dcc:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114dcf:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114dd3:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f0114dda:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114dde:	74 04                	je     f0114de4 <test_allocate_chunk+0x578>
f0114de0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114de4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f0114de8:	83 ec 0c             	sub    $0xc,%esp
f0114deb:	68 c6 9a 13 f0       	push   $0xf0139ac6
f0114df0:	e8 19 bf fe ff       	call   f0100d0e <cprintf>
f0114df5:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f0114df8:	83 ec 0c             	sub    $0xc,%esp
f0114dfb:	68 0c a8 13 f0       	push   $0xf013a80c
f0114e00:	e8 09 bf fe ff       	call   f0100d0e <cprintf>
f0114e05:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114e08:	e8 4c 82 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0114e0d:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f0114e10:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114e13:	c1 e0 06             	shl    $0x6,%eax
f0114e16:	68 06 0e 00 00       	push   $0xe06
f0114e1b:	50                   	push   %eax
f0114e1c:	68 00 00 00 80       	push   $0x80000000
f0114e21:	ff 75 d0             	pushl  -0x30(%ebp)
f0114e24:	e8 fa 3f ff ff       	call   f0108e23 <allocate_chunk>
f0114e29:	83 c4 10             	add    $0x10,%esp
f0114e2c:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114e2f:	e8 25 82 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0114e34:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f0114e37:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0114e3b:	75 36                	jne    f0114e73 <test_allocate_chunk+0x607>
f0114e3d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114e40:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114e43:	89 c1                	mov    %eax,%ecx
f0114e45:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114e48:	c1 e0 06             	shl    $0x6,%eax
f0114e4b:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114e4e:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114e55:	99                   	cltd   
f0114e56:	f7 fb                	idiv   %ebx
f0114e58:	89 c3                	mov    %eax,%ebx
f0114e5a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114e5d:	c1 e0 06             	shl    $0x6,%eax
f0114e60:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114e63:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114e6a:	99                   	cltd   
f0114e6b:	f7 fe                	idiv   %esi
f0114e6d:	01 d8                	add    %ebx,%eax
f0114e6f:	39 c1                	cmp    %eax,%ecx
f0114e71:	74 54                	je     f0114ec7 <test_allocate_chunk+0x65b>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f0114e73:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114e76:	c1 e0 06             	shl    $0x6,%eax
f0114e79:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114e7c:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114e83:	99                   	cltd   
f0114e84:	f7 ff                	idiv   %edi
f0114e86:	89 c1                	mov    %eax,%ecx
f0114e88:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114e8b:	c1 e0 06             	shl    $0x6,%eax
f0114e8e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114e91:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114e98:	99                   	cltd   
f0114e99:	f7 fb                	idiv   %ebx
f0114e9b:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114e9e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114ea1:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114ea4:	83 ec 08             	sub    $0x8,%esp
f0114ea7:	52                   	push   %edx
f0114ea8:	50                   	push   %eax
f0114ea9:	ff 75 9c             	pushl  -0x64(%ebp)
f0114eac:	68 6c a7 13 f0       	push   $0xf013a76c
f0114eb1:	68 42 05 00 00       	push   $0x542
f0114eb6:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0114ebb:	e8 53 b5 fe ff       	call   f0100413 <_warn>
f0114ec0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114ec3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114ec7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ecb:	74 04                	je     f0114ed1 <test_allocate_chunk+0x665>
f0114ecd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114ed1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114ed5:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114edc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114edf:	c1 e0 06             	shl    $0x6,%eax
f0114ee2:	83 ec 08             	sub    $0x8,%esp
f0114ee5:	6a 03                	push   $0x3
f0114ee7:	6a 00                	push   $0x0
f0114ee9:	6a 00                	push   $0x0
f0114eeb:	68 07 0e 00 00       	push   $0xe07
f0114ef0:	68 07 0e 00 00       	push   $0xe07
f0114ef5:	6a 01                	push   $0x1
f0114ef7:	50                   	push   %eax
f0114ef8:	68 00 00 00 80       	push   $0x80000000
f0114efd:	6a 00                	push   $0x0
f0114eff:	ff 75 d0             	pushl  -0x30(%ebp)
f0114f02:	e8 3b 1a 00 00       	call   f0116942 <CCP>
f0114f07:	83 c4 30             	add    $0x30,%esp
f0114f0a:	85 c0                	test   %eax,%eax
f0114f0c:	75 25                	jne    f0114f33 <test_allocate_chunk+0x6c7>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114f0e:	83 ec 04             	sub    $0x4,%esp
f0114f11:	68 a8 a6 13 f0       	push   $0xf013a6a8
f0114f16:	68 4b 05 00 00       	push   $0x54b
f0114f1b:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0114f20:	e8 ee b4 fe ff       	call   f0100413 <_warn>
f0114f25:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114f28:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114f2c:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f0114f33:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114f37:	74 04                	je     f0114f3d <test_allocate_chunk+0x6d1>
f0114f39:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114f3d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114f41:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0114f45:	74 6f                	je     f0114fb6 <test_allocate_chunk+0x74a>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f0114f47:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114f4a:	01 c0                	add    %eax,%eax
f0114f4c:	05 00 00 00 80       	add    $0x80000000,%eax
f0114f51:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114f54:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114f57:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f0114f5a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114f5d:	89 d0                	mov    %edx,%eax
f0114f5f:	c1 e0 02             	shl    $0x2,%eax
f0114f62:	01 d0                	add    %edx,%eax
f0114f64:	01 c0                	add    %eax,%eax
f0114f66:	01 d0                	add    %edx,%eax
f0114f68:	01 c0                	add    %eax,%eax
f0114f6a:	05 00 00 00 80       	add    $0x80000000,%eax
f0114f6f:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114f72:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114f75:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114f78:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114f7b:	8a 00                	mov    (%eax),%al
f0114f7d:	3c 4b                	cmp    $0x4b,%al
f0114f7f:	75 09                	jne    f0114f8a <test_allocate_chunk+0x71e>
f0114f81:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114f84:	8a 00                	mov    (%eax),%al
f0114f86:	3c 4d                	cmp    $0x4d,%al
f0114f88:	74 1e                	je     f0114fa8 <test_allocate_chunk+0x73c>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114f8a:	83 ec 04             	sub    $0x4,%esp
f0114f8d:	68 f4 a6 13 f0       	push   $0xf013a6f4
f0114f92:	68 59 05 00 00       	push   $0x559
f0114f97:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0114f9c:	e8 72 b4 fe ff       	call   f0100413 <_warn>
f0114fa1:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114fa4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114fa8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114fac:	74 04                	je     f0114fb2 <test_allocate_chunk+0x746>
f0114fae:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114fb2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f0114fb6:	83 ec 0c             	sub    $0xc,%esp
f0114fb9:	68 98 a5 13 f0       	push   $0xf013a598
f0114fbe:	e8 4b bd fe ff       	call   f0100d0e <cprintf>
f0114fc3:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f0114fc6:	83 ec 0c             	sub    $0xc,%esp
f0114fc9:	68 48 a8 13 f0       	push   $0xf013a848
f0114fce:	e8 3b bd fe ff       	call   f0100d0e <cprintf>
f0114fd3:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114fd6:	e8 7e 80 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0114fdb:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0114fde:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114fe1:	89 d0                	mov    %edx,%eax
f0114fe3:	01 c0                	add    %eax,%eax
f0114fe5:	01 d0                	add    %edx,%eax
f0114fe7:	01 c0                	add    %eax,%eax
f0114fe9:	01 d0                	add    %edx,%eax
f0114feb:	68 04 0e 00 00       	push   $0xe04
f0114ff0:	50                   	push   %eax
f0114ff1:	68 00 fc 3f 40       	push   $0x403ffc00
f0114ff6:	ff 75 d0             	pushl  -0x30(%ebp)
f0114ff9:	e8 25 3e ff ff       	call   f0108e23 <allocate_chunk>
f0114ffe:	83 c4 10             	add    $0x10,%esp
f0115001:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0115004:	e8 50 80 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0115009:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f011500c:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0115010:	75 0b                	jne    f011501d <test_allocate_chunk+0x7b1>
f0115012:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115015:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0115018:	83 f8 05             	cmp    $0x5,%eax
f011501b:	74 2a                	je     f0115047 <test_allocate_chunk+0x7db>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f011501d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115020:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0115023:	83 ec 08             	sub    $0x8,%esp
f0115026:	6a 05                	push   $0x5
f0115028:	50                   	push   %eax
f0115029:	ff 75 98             	pushl  -0x68(%ebp)
f011502c:	68 6c a7 13 f0       	push   $0xf013a76c
f0115031:	68 70 05 00 00       	push   $0x570
f0115036:	68 3e 8d 13 f0       	push   $0xf0138d3e
f011503b:	e8 d3 b3 fe ff       	call   f0100413 <_warn>
f0115040:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115043:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115047:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011504b:	74 04                	je     f0115051 <test_allocate_chunk+0x7e5>
f011504d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115051:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0115055:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f011505c:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011505f:	89 d0                	mov    %edx,%eax
f0115061:	01 c0                	add    %eax,%eax
f0115063:	01 d0                	add    %edx,%eax
f0115065:	c1 e0 02             	shl    $0x2,%eax
f0115068:	83 ec 08             	sub    $0x8,%esp
f011506b:	6a 03                	push   $0x3
f011506d:	6a 00                	push   $0x0
f011506f:	6a 00                	push   $0x0
f0115071:	68 07 0e 00 00       	push   $0xe07
f0115076:	68 05 0e 00 00       	push   $0xe05
f011507b:	6a 01                	push   $0x1
f011507d:	50                   	push   %eax
f011507e:	68 00 f0 3f 40       	push   $0x403ff000
f0115083:	6a 00                	push   $0x0
f0115085:	ff 75 d0             	pushl  -0x30(%ebp)
f0115088:	e8 b5 18 00 00       	call   f0116942 <CCP>
f011508d:	83 c4 30             	add    $0x30,%esp
f0115090:	85 c0                	test   %eax,%eax
f0115092:	75 25                	jne    f01150b9 <test_allocate_chunk+0x84d>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0115094:	83 ec 04             	sub    $0x4,%esp
f0115097:	68 a8 a6 13 f0       	push   $0xf013a6a8
f011509c:	68 79 05 00 00       	push   $0x579
f01150a1:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01150a6:	e8 68 b3 fe ff       	call   f0100413 <_warn>
f01150ab:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01150ae:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01150b2:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f01150b9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01150bd:	74 04                	je     f01150c3 <test_allocate_chunk+0x857>
f01150bf:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01150c3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f01150c7:	83 ec 0c             	sub    $0xc,%esp
f01150ca:	68 7f a8 13 f0       	push   $0xf013a87f
f01150cf:	e8 3a bc fe ff       	call   f0100d0e <cprintf>
f01150d4:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f01150d7:	83 ec 08             	sub    $0x8,%esp
f01150da:	ff 75 e4             	pushl  -0x1c(%ebp)
f01150dd:	68 90 a8 13 f0       	push   $0xf013a890
f01150e2:	e8 27 bc fe ff       	call   f0100d0e <cprintf>
f01150e7:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01150ea:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01150ee:	75 10                	jne    f0115100 <test_allocate_chunk+0x894>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f01150f0:	83 ec 0c             	sub    $0xc,%esp
f01150f3:	68 c4 a8 13 f0       	push   $0xf013a8c4
f01150f8:	e8 11 bc fe ff       	call   f0100d0e <cprintf>
f01150fd:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0115100:	a1 28 b9 85 f0       	mov    0xf085b928,%eax
f0115105:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0115108:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011510b:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011510e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0115113:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0115116:	5b                   	pop    %ebx
f0115117:	5e                   	pop    %esi
f0115118:	5f                   	pop    %edi
f0115119:	5d                   	pop    %ebp
f011511a:	c3                   	ret    

f011511b <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f011511b:	55                   	push   %ebp
f011511c:	89 e5                	mov    %esp,%ebp
f011511e:	57                   	push   %edi
f011511f:	56                   	push   %esi
f0115120:	53                   	push   %ebx
f0115121:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0115127:	8d 45 8e             	lea    -0x72(%ebp),%eax
f011512a:	bb d8 97 13 f0       	mov    $0xf01397d8,%ebx
f011512f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115134:	89 c7                	mov    %eax,%edi
f0115136:	89 de                	mov    %ebx,%esi
f0115138:	89 d1                	mov    %edx,%ecx
f011513a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011513c:	8d 55 9d             	lea    -0x63(%ebp),%edx
f011513f:	b9 23 00 00 00       	mov    $0x23,%ecx
f0115144:	b0 00                	mov    $0x0,%al
f0115146:	89 d7                	mov    %edx,%edi
f0115148:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011514a:	6a 00                	push   $0x0
f011514c:	6a 0a                	push   $0xa
f011514e:	6a 14                	push   $0x14
f0115150:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115153:	50                   	push   %eax
f0115154:	e8 c6 41 ff ff       	call   f010931f <env_create>
f0115159:	83 c4 10             	add    $0x10,%esp
f011515c:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f011515f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115162:	8b 40 5c             	mov    0x5c(%eax),%eax
f0115165:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0115168:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011516b:	8b 40 60             	mov    0x60(%eax),%eax
f011516e:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0115171:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115174:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0115177:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f011517e:	75 70 20 
f0115181:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0115188:	00 00 00 
f011518b:	8d 55 82             	lea    -0x7e(%ebp),%edx
f011518e:	b9 03 00 00 00       	mov    $0x3,%ecx
f0115193:	b8 00 00 00 00       	mov    $0x0,%eax
f0115198:	89 d7                	mov    %edx,%edi
f011519a:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011519c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011519f:	8b 40 4c             	mov    0x4c(%eax),%eax
f01151a2:	83 ec 08             	sub    $0x8,%esp
f01151a5:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f01151ab:	52                   	push   %edx
f01151ac:	50                   	push   %eax
f01151ad:	e8 5b cd 01 00       	call   f0131f0d <ltostr>
f01151b2:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01151b5:	83 ec 04             	sub    $0x4,%esp
f01151b8:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01151be:	50                   	push   %eax
f01151bf:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f01151c5:	50                   	push   %eax
f01151c6:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f01151cc:	50                   	push   %eax
f01151cd:	e8 33 ce 01 00       	call   f0132005 <strcconcat>
f01151d2:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01151d5:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f01151dc:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f01151e3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f01151ea:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f01151f1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f01151f5:	83 ec 0c             	sub    $0xc,%esp
f01151f8:	ff 75 d8             	pushl  -0x28(%ebp)
f01151fb:	e8 0e 17 00 00       	call   f011690e <ClearUserSpace>
f0115200:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0115203:	83 ec 0c             	sub    $0xc,%esp
f0115206:	68 04 a9 13 f0       	push   $0xf013a904
f011520b:	e8 fe ba fe ff       	call   f0100d0e <cprintf>
f0115210:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0115213:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115216:	c1 e0 03             	shl    $0x3,%eax
f0115219:	83 ec 04             	sub    $0x4,%esp
f011521c:	50                   	push   %eax
f011521d:	6a 00                	push   $0x0
f011521f:	ff 75 d8             	pushl  -0x28(%ebp)
f0115222:	e8 f9 3d ff ff       	call   f0109020 <calculate_required_frames>
f0115227:	83 c4 10             	add    $0x10,%esp
f011522a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f011522d:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0115231:	74 23                	je     f0115256 <test_calculate_required_frames+0x13b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0115233:	83 ec 0c             	sub    $0xc,%esp
f0115236:	6a 03                	push   $0x3
f0115238:	ff 75 c8             	pushl  -0x38(%ebp)
f011523b:	68 38 a9 13 f0       	push   $0xf013a938
f0115240:	68 b2 05 00 00       	push   $0x5b2
f0115245:	68 3e 8d 13 f0       	push   $0xf0138d3e
f011524a:	e8 c4 b1 fe ff       	call   f0100413 <_warn>
f011524f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115252:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115256:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011525a:	74 04                	je     f0115260 <test_calculate_required_frames+0x145>
f011525c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115260:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f0115264:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115267:	c1 e0 02             	shl    $0x2,%eax
f011526a:	83 ec 04             	sub    $0x4,%esp
f011526d:	50                   	push   %eax
f011526e:	6a 00                	push   $0x0
f0115270:	ff 75 d8             	pushl  -0x28(%ebp)
f0115273:	e8 a8 3d ff ff       	call   f0109020 <calculate_required_frames>
f0115278:	83 c4 10             	add    $0x10,%esp
f011527b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f011527e:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f0115285:	74 26                	je     f01152ad <test_calculate_required_frames+0x192>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f0115287:	83 ec 0c             	sub    $0xc,%esp
f011528a:	68 01 04 00 00       	push   $0x401
f011528f:	ff 75 c8             	pushl  -0x38(%ebp)
f0115292:	68 38 a9 13 f0       	push   $0xf013a938
f0115297:	68 bc 05 00 00       	push   $0x5bc
f011529c:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01152a1:	e8 6d b1 fe ff       	call   f0100413 <_warn>
f01152a6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01152a9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01152ad:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01152b1:	74 04                	je     f01152b7 <test_calculate_required_frames+0x19c>
f01152b3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01152b7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f01152bb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01152be:	c1 e0 0a             	shl    $0xa,%eax
f01152c1:	83 ec 04             	sub    $0x4,%esp
f01152c4:	50                   	push   %eax
f01152c5:	6a 00                	push   $0x0
f01152c7:	ff 75 d8             	pushl  -0x28(%ebp)
f01152ca:	e8 51 3d ff ff       	call   f0109020 <calculate_required_frames>
f01152cf:	83 c4 10             	add    $0x10,%esp
f01152d2:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f01152d5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01152d8:	c1 e0 0a             	shl    $0xa,%eax
f01152db:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01152de:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01152e5:	99                   	cltd   
f01152e6:	f7 fb                	idiv   %ebx
f01152e8:	89 c1                	mov    %eax,%ecx
f01152ea:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01152ed:	c1 e0 0a             	shl    $0xa,%eax
f01152f0:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01152f3:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01152fa:	99                   	cltd   
f01152fb:	f7 fe                	idiv   %esi
f01152fd:	01 c8                	add    %ecx,%eax
f01152ff:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115302:	74 4c                	je     f0115350 <test_calculate_required_frames+0x235>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f0115304:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115307:	c1 e0 0a             	shl    $0xa,%eax
f011530a:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011530d:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115314:	99                   	cltd   
f0115315:	f7 fb                	idiv   %ebx
f0115317:	89 c1                	mov    %eax,%ecx
f0115319:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011531c:	c1 e0 0a             	shl    $0xa,%eax
f011531f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115322:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0115329:	99                   	cltd   
f011532a:	f7 fe                	idiv   %esi
f011532c:	01 c8                	add    %ecx,%eax
f011532e:	83 ec 0c             	sub    $0xc,%esp
f0115331:	50                   	push   %eax
f0115332:	ff 75 c8             	pushl  -0x38(%ebp)
f0115335:	68 38 a9 13 f0       	push   $0xf013a938
f011533a:	68 c6 05 00 00       	push   $0x5c6
f011533f:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0115344:	e8 ca b0 fe ff       	call   f0100413 <_warn>
f0115349:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011534c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115350:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115354:	74 04                	je     f011535a <test_calculate_required_frames+0x23f>
f0115356:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011535a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f011535e:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115361:	89 d0                	mov    %edx,%eax
f0115363:	01 c0                	add    %eax,%eax
f0115365:	01 d0                	add    %edx,%eax
f0115367:	01 c0                	add    %eax,%eax
f0115369:	83 ec 04             	sub    $0x4,%esp
f011536c:	50                   	push   %eax
f011536d:	68 00 10 00 00       	push   $0x1000
f0115372:	ff 75 d8             	pushl  -0x28(%ebp)
f0115375:	e8 a6 3c ff ff       	call   f0109020 <calculate_required_frames>
f011537a:	83 c4 10             	add    $0x10,%esp
f011537d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0115380:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0115384:	74 23                	je     f01153a9 <test_calculate_required_frames+0x28e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0115386:	83 ec 0c             	sub    $0xc,%esp
f0115389:	6a 03                	push   $0x3
f011538b:	ff 75 c8             	pushl  -0x38(%ebp)
f011538e:	68 38 a9 13 f0       	push   $0xf013a938
f0115393:	68 d2 05 00 00       	push   $0x5d2
f0115398:	68 3e 8d 13 f0       	push   $0xf0138d3e
f011539d:	e8 71 b0 fe ff       	call   f0100413 <_warn>
f01153a2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01153a5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01153a9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01153ad:	74 04                	je     f01153b3 <test_calculate_required_frames+0x298>
f01153af:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01153b3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f01153b7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01153ba:	89 c2                	mov    %eax,%edx
f01153bc:	01 d2                	add    %edx,%edx
f01153be:	01 d0                	add    %edx,%eax
f01153c0:	83 ec 04             	sub    $0x4,%esp
f01153c3:	50                   	push   %eax
f01153c4:	68 00 18 00 00       	push   $0x1800
f01153c9:	ff 75 d8             	pushl  -0x28(%ebp)
f01153cc:	e8 4f 3c ff ff       	call   f0109020 <calculate_required_frames>
f01153d1:	83 c4 10             	add    $0x10,%esp
f01153d4:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01153d7:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f01153db:	74 23                	je     f0115400 <test_calculate_required_frames+0x2e5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f01153dd:	83 ec 0c             	sub    $0xc,%esp
f01153e0:	6a 03                	push   $0x3
f01153e2:	ff 75 c8             	pushl  -0x38(%ebp)
f01153e5:	68 38 a9 13 f0       	push   $0xf013a938
f01153ea:	68 dc 05 00 00       	push   $0x5dc
f01153ef:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01153f4:	e8 1a b0 fe ff       	call   f0100413 <_warn>
f01153f9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01153fc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115400:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115404:	74 04                	je     f011540a <test_calculate_required_frames+0x2ef>
f0115406:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011540a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f011540e:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115411:	89 d0                	mov    %edx,%eax
f0115413:	c1 e0 02             	shl    $0x2,%eax
f0115416:	01 d0                	add    %edx,%eax
f0115418:	01 c0                	add    %eax,%eax
f011541a:	83 ec 04             	sub    $0x4,%esp
f011541d:	50                   	push   %eax
f011541e:	68 00 00 40 00       	push   $0x400000
f0115423:	ff 75 d8             	pushl  -0x28(%ebp)
f0115426:	e8 f5 3b ff ff       	call   f0109020 <calculate_required_frames>
f011542b:	83 c4 10             	add    $0x10,%esp
f011542e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f0115431:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f0115438:	74 26                	je     f0115460 <test_calculate_required_frames+0x345>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f011543a:	83 ec 0c             	sub    $0xc,%esp
f011543d:	68 03 0a 00 00       	push   $0xa03
f0115442:	ff 75 c8             	pushl  -0x38(%ebp)
f0115445:	68 38 a9 13 f0       	push   $0xf013a938
f011544a:	68 e6 05 00 00       	push   $0x5e6
f011544f:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0115454:	e8 ba af fe ff       	call   f0100413 <_warn>
f0115459:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011545c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115460:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115464:	74 04                	je     f011546a <test_calculate_required_frames+0x34f>
f0115466:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011546a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f011546e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115471:	01 c0                	add    %eax,%eax
f0115473:	83 ec 04             	sub    $0x4,%esp
f0115476:	50                   	push   %eax
f0115477:	68 00 00 70 00       	push   $0x700000
f011547c:	ff 75 d8             	pushl  -0x28(%ebp)
f011547f:	e8 9c 3b ff ff       	call   f0109020 <calculate_required_frames>
f0115484:	83 c4 10             	add    $0x10,%esp
f0115487:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f011548a:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f0115491:	74 26                	je     f01154b9 <test_calculate_required_frames+0x39e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f0115493:	83 ec 0c             	sub    $0xc,%esp
f0115496:	68 02 02 00 00       	push   $0x202
f011549b:	ff 75 c8             	pushl  -0x38(%ebp)
f011549e:	68 38 a9 13 f0       	push   $0xf013a938
f01154a3:	68 f2 05 00 00       	push   $0x5f2
f01154a8:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01154ad:	e8 61 af fe ff       	call   f0100413 <_warn>
f01154b2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01154b5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01154b9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01154bd:	74 04                	je     f01154c3 <test_calculate_required_frames+0x3a8>
f01154bf:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01154c3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f01154c7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01154ca:	83 ec 04             	sub    $0x4,%esp
f01154cd:	50                   	push   %eax
f01154ce:	68 ff ff 3f 00       	push   $0x3fffff
f01154d3:	ff 75 d8             	pushl  -0x28(%ebp)
f01154d6:	e8 45 3b ff ff       	call   f0109020 <calculate_required_frames>
f01154db:	83 c4 10             	add    $0x10,%esp
f01154de:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f01154e1:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f01154e5:	74 23                	je     f011550a <test_calculate_required_frames+0x3ef>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f01154e7:	83 ec 0c             	sub    $0xc,%esp
f01154ea:	6a 04                	push   $0x4
f01154ec:	ff 75 c8             	pushl  -0x38(%ebp)
f01154ef:	68 38 a9 13 f0       	push   $0xf013a938
f01154f4:	68 fc 05 00 00       	push   $0x5fc
f01154f9:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01154fe:	e8 10 af fe ff       	call   f0100413 <_warn>
f0115503:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115506:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011550a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011550e:	74 04                	je     f0115514 <test_calculate_required_frames+0x3f9>
f0115510:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115514:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0115518:	83 ec 0c             	sub    $0xc,%esp
f011551b:	68 89 a4 13 f0       	push   $0xf013a489
f0115520:	e8 e9 b7 fe ff       	call   f0100d0e <cprintf>
f0115525:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0115528:	83 ec 0c             	sub    $0xc,%esp
f011552b:	68 90 a9 13 f0       	push   $0xf013a990
f0115530:	e8 d9 b7 fe ff       	call   f0100d0e <cprintf>
f0115535:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0115538:	83 ec 04             	sub    $0x4,%esp
f011553b:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0115541:	50                   	push   %eax
f0115542:	68 42 98 13 f0       	push   $0xf0139842
f0115547:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011554d:	50                   	push   %eax
f011554e:	e8 b2 ca 01 00       	call   f0132005 <strcconcat>
f0115553:	83 c4 10             	add    $0x10,%esp
f0115556:	83 ec 0c             	sub    $0xc,%esp
f0115559:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f011555f:	50                   	push   %eax
f0115560:	e8 0b b8 fe ff       	call   f0100d70 <execute_command>
f0115565:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0115568:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011556b:	c1 e0 03             	shl    $0x3,%eax
f011556e:	83 ec 04             	sub    $0x4,%esp
f0115571:	50                   	push   %eax
f0115572:	6a 00                	push   $0x0
f0115574:	ff 75 d8             	pushl  -0x28(%ebp)
f0115577:	e8 a4 3a ff ff       	call   f0109020 <calculate_required_frames>
f011557c:	83 c4 10             	add    $0x10,%esp
f011557f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0115582:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0115589:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011558c:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011558f:	74 24                	je     f01155b5 <test_calculate_required_frames+0x49a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115591:	83 ec 0c             	sub    $0xc,%esp
f0115594:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115597:	ff 75 c8             	pushl  -0x38(%ebp)
f011559a:	68 38 a9 13 f0       	push   $0xf013a938
f011559f:	68 10 06 00 00       	push   $0x610
f01155a4:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01155a9:	e8 65 ae fe ff       	call   f0100413 <_warn>
f01155ae:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01155b1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01155b5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01155b9:	74 04                	je     f01155bf <test_calculate_required_frames+0x4a4>
f01155bb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01155bf:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f01155c3:	83 ec 04             	sub    $0x4,%esp
f01155c6:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01155cc:	50                   	push   %eax
f01155cd:	68 4f 98 13 f0       	push   $0xf013984f
f01155d2:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01155d8:	50                   	push   %eax
f01155d9:	e8 27 ca 01 00       	call   f0132005 <strcconcat>
f01155de:	83 c4 10             	add    $0x10,%esp
f01155e1:	83 ec 0c             	sub    $0xc,%esp
f01155e4:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01155ea:	50                   	push   %eax
f01155eb:	e8 80 b7 fe ff       	call   f0100d70 <execute_command>
f01155f0:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f01155f3:	83 ec 04             	sub    $0x4,%esp
f01155f6:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01155fc:	50                   	push   %eax
f01155fd:	68 c4 a9 13 f0       	push   $0xf013a9c4
f0115602:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115608:	50                   	push   %eax
f0115609:	e8 f7 c9 01 00       	call   f0132005 <strcconcat>
f011560e:	83 c4 10             	add    $0x10,%esp
f0115611:	83 ec 0c             	sub    $0xc,%esp
f0115614:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011561a:	50                   	push   %eax
f011561b:	e8 50 b7 fe ff       	call   f0100d70 <execute_command>
f0115620:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f0115623:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115626:	c1 e0 03             	shl    $0x3,%eax
f0115629:	83 ec 04             	sub    $0x4,%esp
f011562c:	50                   	push   %eax
f011562d:	6a 00                	push   $0x0
f011562f:	ff 75 d8             	pushl  -0x28(%ebp)
f0115632:	e8 e9 39 ff ff       	call   f0109020 <calculate_required_frames>
f0115637:	83 c4 10             	add    $0x10,%esp
f011563a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f011563d:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f0115644:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115647:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011564a:	74 24                	je     f0115670 <test_calculate_required_frames+0x555>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011564c:	83 ec 0c             	sub    $0xc,%esp
f011564f:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115652:	ff 75 c8             	pushl  -0x38(%ebp)
f0115655:	68 38 a9 13 f0       	push   $0xf013a938
f011565a:	68 1e 06 00 00       	push   $0x61e
f011565f:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0115664:	e8 aa ad fe ff       	call   f0100413 <_warn>
f0115669:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011566c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115670:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115674:	74 04                	je     f011567a <test_calculate_required_frames+0x55f>
f0115676:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011567a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f011567e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115681:	c1 e0 0a             	shl    $0xa,%eax
f0115684:	83 ec 04             	sub    $0x4,%esp
f0115687:	50                   	push   %eax
f0115688:	6a 00                	push   $0x0
f011568a:	ff 75 d8             	pushl  -0x28(%ebp)
f011568d:	e8 8e 39 ff ff       	call   f0109020 <calculate_required_frames>
f0115692:	83 c4 10             	add    $0x10,%esp
f0115695:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f0115698:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011569b:	c1 e0 0a             	shl    $0xa,%eax
f011569e:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01156a1:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01156a8:	99                   	cltd   
f01156a9:	f7 fb                	idiv   %ebx
f01156ab:	89 c1                	mov    %eax,%ecx
f01156ad:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01156b0:	c1 e0 0a             	shl    $0xa,%eax
f01156b3:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01156b6:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01156bd:	99                   	cltd   
f01156be:	f7 fe                	idiv   %esi
f01156c0:	01 c8                	add    %ecx,%eax
f01156c2:	83 e8 05             	sub    $0x5,%eax
f01156c5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f01156c8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01156cb:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01156ce:	74 24                	je     f01156f4 <test_calculate_required_frames+0x5d9>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01156d0:	83 ec 0c             	sub    $0xc,%esp
f01156d3:	ff 75 c4             	pushl  -0x3c(%ebp)
f01156d6:	ff 75 c8             	pushl  -0x38(%ebp)
f01156d9:	68 38 a9 13 f0       	push   $0xf013a938
f01156de:	68 29 06 00 00       	push   $0x629
f01156e3:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01156e8:	e8 26 ad fe ff       	call   f0100413 <_warn>
f01156ed:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01156f0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01156f4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01156f8:	74 04                	je     f01156fe <test_calculate_required_frames+0x5e3>
f01156fa:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01156fe:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0115702:	83 ec 04             	sub    $0x4,%esp
f0115705:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011570b:	50                   	push   %eax
f011570c:	68 d0 a9 13 f0       	push   $0xf013a9d0
f0115711:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115717:	50                   	push   %eax
f0115718:	e8 e8 c8 01 00       	call   f0132005 <strcconcat>
f011571d:	83 c4 10             	add    $0x10,%esp
f0115720:	83 ec 0c             	sub    $0xc,%esp
f0115723:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115729:	50                   	push   %eax
f011572a:	e8 41 b6 fe ff       	call   f0100d70 <execute_command>
f011572f:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0115732:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115735:	89 c2                	mov    %eax,%edx
f0115737:	01 d2                	add    %edx,%edx
f0115739:	01 d0                	add    %edx,%eax
f011573b:	83 ec 04             	sub    $0x4,%esp
f011573e:	50                   	push   %eax
f011573f:	68 00 18 00 00       	push   $0x1800
f0115744:	ff 75 d8             	pushl  -0x28(%ebp)
f0115747:	e8 d4 38 ff ff       	call   f0109020 <calculate_required_frames>
f011574c:	83 c4 10             	add    $0x10,%esp
f011574f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0115752:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0115759:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011575c:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011575f:	74 24                	je     f0115785 <test_calculate_required_frames+0x66a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115761:	83 ec 0c             	sub    $0xc,%esp
f0115764:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115767:	ff 75 c8             	pushl  -0x38(%ebp)
f011576a:	68 38 a9 13 f0       	push   $0xf013a938
f011576f:	68 38 06 00 00       	push   $0x638
f0115774:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0115779:	e8 95 ac fe ff       	call   f0100413 <_warn>
f011577e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115781:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115785:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115789:	74 04                	je     f011578f <test_calculate_required_frames+0x674>
f011578b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011578f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0115793:	83 ec 04             	sub    $0x4,%esp
f0115796:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011579c:	50                   	push   %eax
f011579d:	68 a8 9a 13 f0       	push   $0xf0139aa8
f01157a2:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01157a8:	50                   	push   %eax
f01157a9:	e8 57 c8 01 00       	call   f0132005 <strcconcat>
f01157ae:	83 c4 10             	add    $0x10,%esp
f01157b1:	83 ec 0c             	sub    $0xc,%esp
f01157b4:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01157ba:	50                   	push   %eax
f01157bb:	e8 b0 b5 fe ff       	call   f0100d70 <execute_command>
f01157c0:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f01157c3:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01157c6:	89 d0                	mov    %edx,%eax
f01157c8:	c1 e0 02             	shl    $0x2,%eax
f01157cb:	01 d0                	add    %edx,%eax
f01157cd:	01 c0                	add    %eax,%eax
f01157cf:	83 ec 04             	sub    $0x4,%esp
f01157d2:	50                   	push   %eax
f01157d3:	68 00 00 40 00       	push   $0x400000
f01157d8:	ff 75 d8             	pushl  -0x28(%ebp)
f01157db:	e8 40 38 ff ff       	call   f0109020 <calculate_required_frames>
f01157e0:	83 c4 10             	add    $0x10,%esp
f01157e3:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f01157e6:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f01157ed:	74 26                	je     f0115815 <test_calculate_required_frames+0x6fa>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f01157ef:	83 ec 0c             	sub    $0xc,%esp
f01157f2:	68 03 0a 00 00       	push   $0xa03
f01157f7:	ff 75 c8             	pushl  -0x38(%ebp)
f01157fa:	68 38 a9 13 f0       	push   $0xf013a938
f01157ff:	68 44 06 00 00       	push   $0x644
f0115804:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0115809:	e8 05 ac fe ff       	call   f0100413 <_warn>
f011580e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115811:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115815:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115819:	74 04                	je     f011581f <test_calculate_required_frames+0x704>
f011581b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011581f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0115823:	83 ec 04             	sub    $0x4,%esp
f0115826:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011582c:	50                   	push   %eax
f011582d:	68 b2 9a 13 f0       	push   $0xf0139ab2
f0115832:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115838:	50                   	push   %eax
f0115839:	e8 c7 c7 01 00       	call   f0132005 <strcconcat>
f011583e:	83 c4 10             	add    $0x10,%esp
f0115841:	83 ec 0c             	sub    $0xc,%esp
f0115844:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011584a:	50                   	push   %eax
f011584b:	e8 20 b5 fe ff       	call   f0100d70 <execute_command>
f0115850:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0115853:	83 ec 04             	sub    $0x4,%esp
f0115856:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011585c:	50                   	push   %eax
f011585d:	68 d8 a9 13 f0       	push   $0xf013a9d8
f0115862:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115868:	50                   	push   %eax
f0115869:	e8 97 c7 01 00       	call   f0132005 <strcconcat>
f011586e:	83 c4 10             	add    $0x10,%esp
f0115871:	83 ec 0c             	sub    $0xc,%esp
f0115874:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011587a:	50                   	push   %eax
f011587b:	e8 f0 b4 fe ff       	call   f0100d70 <execute_command>
f0115880:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0115883:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115886:	01 c0                	add    %eax,%eax
f0115888:	83 ec 04             	sub    $0x4,%esp
f011588b:	50                   	push   %eax
f011588c:	68 00 00 70 00       	push   $0x700000
f0115891:	ff 75 d8             	pushl  -0x28(%ebp)
f0115894:	e8 87 37 ff ff       	call   f0109020 <calculate_required_frames>
f0115899:	83 c4 10             	add    $0x10,%esp
f011589c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f011589f:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f01158a6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01158a9:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01158ac:	74 24                	je     f01158d2 <test_calculate_required_frames+0x7b7>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01158ae:	83 ec 0c             	sub    $0xc,%esp
f01158b1:	ff 75 c4             	pushl  -0x3c(%ebp)
f01158b4:	ff 75 c8             	pushl  -0x38(%ebp)
f01158b7:	68 38 a9 13 f0       	push   $0xf013a938
f01158bc:	68 54 06 00 00       	push   $0x654
f01158c1:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01158c6:	e8 48 ab fe ff       	call   f0100413 <_warn>
f01158cb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01158ce:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01158d2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01158d6:	74 04                	je     f01158dc <test_calculate_required_frames+0x7c1>
f01158d8:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01158dc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f01158e0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01158e3:	83 ec 04             	sub    $0x4,%esp
f01158e6:	50                   	push   %eax
f01158e7:	68 ff ff 3f 00       	push   $0x3fffff
f01158ec:	ff 75 d8             	pushl  -0x28(%ebp)
f01158ef:	e8 2c 37 ff ff       	call   f0109020 <calculate_required_frames>
f01158f4:	83 c4 10             	add    $0x10,%esp
f01158f7:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f01158fa:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f0115901:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115904:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115907:	74 24                	je     f011592d <test_calculate_required_frames+0x812>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115909:	83 ec 0c             	sub    $0xc,%esp
f011590c:	ff 75 c4             	pushl  -0x3c(%ebp)
f011590f:	ff 75 c8             	pushl  -0x38(%ebp)
f0115912:	68 38 a9 13 f0       	push   $0xf013a938
f0115917:	68 5f 06 00 00       	push   $0x65f
f011591c:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0115921:	e8 ed aa fe ff       	call   f0100413 <_warn>
f0115926:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115929:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011592d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115931:	74 04                	je     f0115937 <test_calculate_required_frames+0x81c>
f0115933:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115937:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f011593b:	83 ec 0c             	sub    $0xc,%esp
f011593e:	68 63 9a 13 f0       	push   $0xf0139a63
f0115943:	e8 c6 b3 fe ff       	call   f0100d0e <cprintf>
f0115948:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f011594b:	83 ec 08             	sub    $0x8,%esp
f011594e:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115951:	68 e4 a9 13 f0       	push   $0xf013a9e4
f0115956:	e8 b3 b3 fe ff       	call   f0100d0e <cprintf>
f011595b:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f011595e:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0115962:	75 10                	jne    f0115974 <test_calculate_required_frames+0x859>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f0115964:	83 ec 0c             	sub    $0xc,%esp
f0115967:	68 24 aa 13 f0       	push   $0xf013aa24
f011596c:	e8 9d b3 fe ff       	call   f0100d0e <cprintf>
f0115971:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0115974:	a1 28 b9 85 f0       	mov    0xf085b928,%eax
f0115979:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f011597c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011597f:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0115982:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0115987:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011598a:	5b                   	pop    %ebx
f011598b:	5e                   	pop    %esi
f011598c:	5f                   	pop    %edi
f011598d:	5d                   	pop    %ebp
f011598e:	c3                   	ret    

f011598f <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f011598f:	55                   	push   %ebp
f0115990:	89 e5                	mov    %esp,%ebp
f0115992:	57                   	push   %edi
f0115993:	56                   	push   %esi
f0115994:	53                   	push   %ebx
f0115995:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f011599b:	8d 45 8e             	lea    -0x72(%ebp),%eax
f011599e:	bb d8 97 13 f0       	mov    $0xf01397d8,%ebx
f01159a3:	ba 0f 00 00 00       	mov    $0xf,%edx
f01159a8:	89 c7                	mov    %eax,%edi
f01159aa:	89 de                	mov    %ebx,%esi
f01159ac:	89 d1                	mov    %edx,%ecx
f01159ae:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01159b0:	8d 55 9d             	lea    -0x63(%ebp),%edx
f01159b3:	b9 23 00 00 00       	mov    $0x23,%ecx
f01159b8:	b0 00                	mov    $0x0,%al
f01159ba:	89 d7                	mov    %edx,%edi
f01159bc:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01159be:	6a 00                	push   $0x0
f01159c0:	6a 0a                	push   $0xa
f01159c2:	6a 14                	push   $0x14
f01159c4:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01159c7:	50                   	push   %eax
f01159c8:	e8 52 39 ff ff       	call   f010931f <env_create>
f01159cd:	83 c4 10             	add    $0x10,%esp
f01159d0:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01159d3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01159d6:	8b 40 5c             	mov    0x5c(%eax),%eax
f01159d9:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f01159dc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01159df:	8b 40 60             	mov    0x60(%eax),%eax
f01159e2:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01159e5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01159e8:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f01159eb:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f01159f2:	75 70 20 
f01159f5:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f01159fc:	00 00 00 
f01159ff:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0115a02:	b9 03 00 00 00       	mov    $0x3,%ecx
f0115a07:	b8 00 00 00 00       	mov    $0x0,%eax
f0115a0c:	89 d7                	mov    %edx,%edi
f0115a0e:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0115a10:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115a13:	8b 40 4c             	mov    0x4c(%eax),%eax
f0115a16:	83 ec 08             	sub    $0x8,%esp
f0115a19:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0115a1f:	52                   	push   %edx
f0115a20:	50                   	push   %eax
f0115a21:	e8 e7 c4 01 00       	call   f0131f0d <ltostr>
f0115a26:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0115a29:	83 ec 04             	sub    $0x4,%esp
f0115a2c:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115a32:	50                   	push   %eax
f0115a33:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0115a39:	50                   	push   %eax
f0115a3a:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0115a40:	50                   	push   %eax
f0115a41:	e8 bf c5 01 00       	call   f0132005 <strcconcat>
f0115a46:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0115a49:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0115a50:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0115a57:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f0115a5e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f0115a62:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115a69:	00 00 00 
	uint32 num_tables = 0;
f0115a6c:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115a73:	00 00 00 
	ClearUserSpace(proc_directory);
f0115a76:	83 ec 0c             	sub    $0xc,%esp
f0115a79:	ff 75 d8             	pushl  -0x28(%ebp)
f0115a7c:	e8 8d 0e 00 00       	call   f011690e <ClearUserSpace>
f0115a81:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0115a84:	83 ec 0c             	sub    $0xc,%esp
f0115a87:	68 04 a9 13 f0       	push   $0xf013a904
f0115a8c:	e8 7d b2 fe ff       	call   f0100d0e <cprintf>
f0115a91:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0115a94:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115a97:	c1 e0 03             	shl    $0x3,%eax
f0115a9a:	89 c2                	mov    %eax,%edx
f0115a9c:	83 ec 0c             	sub    $0xc,%esp
f0115a9f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115aa5:	50                   	push   %eax
f0115aa6:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115aac:	50                   	push   %eax
f0115aad:	52                   	push   %edx
f0115aae:	6a 00                	push   $0x0
f0115ab0:	ff 75 d8             	pushl  -0x28(%ebp)
f0115ab3:	e8 7c 34 ff ff       	call   f0108f34 <calculate_allocated_space>
f0115ab8:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115abb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ac1:	85 c0                	test   %eax,%eax
f0115ac3:	74 27                	je     f0115aec <test_calculate_allocated_space+0x15d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115ac5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115acb:	83 ec 0c             	sub    $0xc,%esp
f0115ace:	6a 00                	push   $0x0
f0115ad0:	50                   	push   %eax
f0115ad1:	68 70 aa 13 f0       	push   $0xf013aa70
f0115ad6:	68 94 06 00 00       	push   $0x694
f0115adb:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0115ae0:	e8 2e a9 fe ff       	call   f0100413 <_warn>
f0115ae5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ae8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115aec:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115af2:	85 c0                	test   %eax,%eax
f0115af4:	74 27                	je     f0115b1d <test_calculate_allocated_space+0x18e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115af6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115afc:	83 ec 0c             	sub    $0xc,%esp
f0115aff:	6a 00                	push   $0x0
f0115b01:	50                   	push   %eax
f0115b02:	68 d0 aa 13 f0       	push   $0xf013aad0
f0115b07:	68 99 06 00 00       	push   $0x699
f0115b0c:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0115b11:	e8 fd a8 fe ff       	call   f0100413 <_warn>
f0115b16:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b19:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115b1d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115b21:	74 04                	je     f0115b27 <test_calculate_allocated_space+0x198>
f0115b23:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115b27:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f0115b2b:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115b32:	00 00 00 
		num_pages = 0;
f0115b35:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115b3c:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f0115b3f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115b42:	c1 e0 02             	shl    $0x2,%eax
f0115b45:	89 c2                	mov    %eax,%edx
f0115b47:	83 ec 0c             	sub    $0xc,%esp
f0115b4a:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115b50:	50                   	push   %eax
f0115b51:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115b57:	50                   	push   %eax
f0115b58:	52                   	push   %edx
f0115b59:	6a 00                	push   $0x0
f0115b5b:	ff 75 d8             	pushl  -0x28(%ebp)
f0115b5e:	e8 d1 33 ff ff       	call   f0108f34 <calculate_allocated_space>
f0115b63:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115b66:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115b6c:	85 c0                	test   %eax,%eax
f0115b6e:	74 27                	je     f0115b97 <test_calculate_allocated_space+0x208>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115b70:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115b76:	83 ec 0c             	sub    $0xc,%esp
f0115b79:	6a 00                	push   $0x0
f0115b7b:	50                   	push   %eax
f0115b7c:	68 70 aa 13 f0       	push   $0xf013aa70
f0115b81:	68 a5 06 00 00       	push   $0x6a5
f0115b86:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0115b8b:	e8 83 a8 fe ff       	call   f0100413 <_warn>
f0115b90:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b93:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115b97:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b9d:	85 c0                	test   %eax,%eax
f0115b9f:	74 27                	je     f0115bc8 <test_calculate_allocated_space+0x239>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115ba1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ba7:	83 ec 0c             	sub    $0xc,%esp
f0115baa:	6a 00                	push   $0x0
f0115bac:	50                   	push   %eax
f0115bad:	68 d0 aa 13 f0       	push   $0xf013aad0
f0115bb2:	68 aa 06 00 00       	push   $0x6aa
f0115bb7:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0115bbc:	e8 52 a8 fe ff       	call   f0100413 <_warn>
f0115bc1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115bc4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115bc8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115bcc:	74 04                	je     f0115bd2 <test_calculate_allocated_space+0x243>
f0115bce:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115bd2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0115bd6:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115bdd:	00 00 00 
		num_pages = 0;
f0115be0:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115be7:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0115bea:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115bed:	c1 e0 0a             	shl    $0xa,%eax
f0115bf0:	89 c2                	mov    %eax,%edx
f0115bf2:	83 ec 0c             	sub    $0xc,%esp
f0115bf5:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115bfb:	50                   	push   %eax
f0115bfc:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115c02:	50                   	push   %eax
f0115c03:	52                   	push   %edx
f0115c04:	6a 00                	push   $0x0
f0115c06:	ff 75 d8             	pushl  -0x28(%ebp)
f0115c09:	e8 26 33 ff ff       	call   f0108f34 <calculate_allocated_space>
f0115c0e:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115c11:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115c17:	85 c0                	test   %eax,%eax
f0115c19:	74 27                	je     f0115c42 <test_calculate_allocated_space+0x2b3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115c1b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115c21:	83 ec 0c             	sub    $0xc,%esp
f0115c24:	6a 00                	push   $0x0
f0115c26:	50                   	push   %eax
f0115c27:	68 70 aa 13 f0       	push   $0xf013aa70
f0115c2c:	68 b6 06 00 00       	push   $0x6b6
f0115c31:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0115c36:	e8 d8 a7 fe ff       	call   f0100413 <_warn>
f0115c3b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c3e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115c42:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c48:	85 c0                	test   %eax,%eax
f0115c4a:	74 27                	je     f0115c73 <test_calculate_allocated_space+0x2e4>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115c4c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c52:	83 ec 0c             	sub    $0xc,%esp
f0115c55:	6a 00                	push   $0x0
f0115c57:	50                   	push   %eax
f0115c58:	68 d0 aa 13 f0       	push   $0xf013aad0
f0115c5d:	68 bb 06 00 00       	push   $0x6bb
f0115c62:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0115c67:	e8 a7 a7 fe ff       	call   f0100413 <_warn>
f0115c6c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c6f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115c73:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115c77:	74 04                	je     f0115c7d <test_calculate_allocated_space+0x2ee>
f0115c79:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115c7d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f0115c81:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115c88:	00 00 00 
		num_pages = 0;
f0115c8b:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115c92:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f0115c95:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115c98:	89 d0                	mov    %edx,%eax
f0115c9a:	01 c0                	add    %eax,%eax
f0115c9c:	01 d0                	add    %edx,%eax
f0115c9e:	01 c0                	add    %eax,%eax
f0115ca0:	05 00 10 00 00       	add    $0x1000,%eax
f0115ca5:	89 c2                	mov    %eax,%edx
f0115ca7:	83 ec 0c             	sub    $0xc,%esp
f0115caa:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115cb0:	50                   	push   %eax
f0115cb1:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115cb7:	50                   	push   %eax
f0115cb8:	52                   	push   %edx
f0115cb9:	68 00 10 00 00       	push   $0x1000
f0115cbe:	ff 75 d8             	pushl  -0x28(%ebp)
f0115cc1:	e8 6e 32 ff ff       	call   f0108f34 <calculate_allocated_space>
f0115cc6:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115cc9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ccf:	85 c0                	test   %eax,%eax
f0115cd1:	74 27                	je     f0115cfa <test_calculate_allocated_space+0x36b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115cd3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115cd9:	83 ec 0c             	sub    $0xc,%esp
f0115cdc:	6a 00                	push   $0x0
f0115cde:	50                   	push   %eax
f0115cdf:	68 70 aa 13 f0       	push   $0xf013aa70
f0115ce4:	68 c8 06 00 00       	push   $0x6c8
f0115ce9:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0115cee:	e8 20 a7 fe ff       	call   f0100413 <_warn>
f0115cf3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115cf6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115cfa:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d00:	85 c0                	test   %eax,%eax
f0115d02:	74 27                	je     f0115d2b <test_calculate_allocated_space+0x39c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115d04:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d0a:	83 ec 0c             	sub    $0xc,%esp
f0115d0d:	6a 00                	push   $0x0
f0115d0f:	50                   	push   %eax
f0115d10:	68 d0 aa 13 f0       	push   $0xf013aad0
f0115d15:	68 cd 06 00 00       	push   $0x6cd
f0115d1a:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0115d1f:	e8 ef a6 fe ff       	call   f0100413 <_warn>
f0115d24:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d27:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115d2b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115d2f:	74 04                	je     f0115d35 <test_calculate_allocated_space+0x3a6>
f0115d31:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115d35:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f0115d39:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115d40:	00 00 00 
		num_pages = 0;
f0115d43:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115d4a:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0115d4d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115d50:	89 c2                	mov    %eax,%edx
f0115d52:	01 d2                	add    %edx,%edx
f0115d54:	01 d0                	add    %edx,%eax
f0115d56:	05 00 18 00 00       	add    $0x1800,%eax
f0115d5b:	89 c2                	mov    %eax,%edx
f0115d5d:	83 ec 0c             	sub    $0xc,%esp
f0115d60:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115d66:	50                   	push   %eax
f0115d67:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115d6d:	50                   	push   %eax
f0115d6e:	52                   	push   %edx
f0115d6f:	68 00 18 00 00       	push   $0x1800
f0115d74:	ff 75 d8             	pushl  -0x28(%ebp)
f0115d77:	e8 b8 31 ff ff       	call   f0108f34 <calculate_allocated_space>
f0115d7c:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115d7f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d85:	85 c0                	test   %eax,%eax
f0115d87:	74 27                	je     f0115db0 <test_calculate_allocated_space+0x421>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115d89:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d8f:	83 ec 0c             	sub    $0xc,%esp
f0115d92:	6a 00                	push   $0x0
f0115d94:	50                   	push   %eax
f0115d95:	68 70 aa 13 f0       	push   $0xf013aa70
f0115d9a:	68 d9 06 00 00       	push   $0x6d9
f0115d9f:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0115da4:	e8 6a a6 fe ff       	call   f0100413 <_warn>
f0115da9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115dac:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115db0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115db6:	85 c0                	test   %eax,%eax
f0115db8:	74 27                	je     f0115de1 <test_calculate_allocated_space+0x452>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115dba:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115dc0:	83 ec 0c             	sub    $0xc,%esp
f0115dc3:	6a 00                	push   $0x0
f0115dc5:	50                   	push   %eax
f0115dc6:	68 d0 aa 13 f0       	push   $0xf013aad0
f0115dcb:	68 de 06 00 00       	push   $0x6de
f0115dd0:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0115dd5:	e8 39 a6 fe ff       	call   f0100413 <_warn>
f0115dda:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ddd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115de1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115de5:	74 04                	je     f0115deb <test_calculate_allocated_space+0x45c>
f0115de7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115deb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0115def:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115df6:	00 00 00 
		num_pages = 0;
f0115df9:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115e00:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0115e03:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115e06:	89 d0                	mov    %edx,%eax
f0115e08:	c1 e0 02             	shl    $0x2,%eax
f0115e0b:	01 d0                	add    %edx,%eax
f0115e0d:	01 c0                	add    %eax,%eax
f0115e0f:	05 00 00 40 00       	add    $0x400000,%eax
f0115e14:	89 c2                	mov    %eax,%edx
f0115e16:	83 ec 0c             	sub    $0xc,%esp
f0115e19:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115e1f:	50                   	push   %eax
f0115e20:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115e26:	50                   	push   %eax
f0115e27:	52                   	push   %edx
f0115e28:	68 00 00 40 00       	push   $0x400000
f0115e2d:	ff 75 d8             	pushl  -0x28(%ebp)
f0115e30:	e8 ff 30 ff ff       	call   f0108f34 <calculate_allocated_space>
f0115e35:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115e38:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e3e:	85 c0                	test   %eax,%eax
f0115e40:	74 27                	je     f0115e69 <test_calculate_allocated_space+0x4da>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115e42:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e48:	83 ec 0c             	sub    $0xc,%esp
f0115e4b:	6a 00                	push   $0x0
f0115e4d:	50                   	push   %eax
f0115e4e:	68 70 aa 13 f0       	push   $0xf013aa70
f0115e53:	68 ea 06 00 00       	push   $0x6ea
f0115e58:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0115e5d:	e8 b1 a5 fe ff       	call   f0100413 <_warn>
f0115e62:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e65:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115e69:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e6f:	85 c0                	test   %eax,%eax
f0115e71:	74 27                	je     f0115e9a <test_calculate_allocated_space+0x50b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115e73:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e79:	83 ec 0c             	sub    $0xc,%esp
f0115e7c:	6a 00                	push   $0x0
f0115e7e:	50                   	push   %eax
f0115e7f:	68 d0 aa 13 f0       	push   $0xf013aad0
f0115e84:	68 ef 06 00 00       	push   $0x6ef
f0115e89:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0115e8e:	e8 80 a5 fe ff       	call   f0100413 <_warn>
f0115e93:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e96:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115e9a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115e9e:	74 04                	je     f0115ea4 <test_calculate_allocated_space+0x515>
f0115ea0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115ea4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f0115ea8:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115eaf:	00 00 00 
		num_pages = 0;
f0115eb2:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115eb9:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0115ebc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115ebf:	05 00 00 38 00       	add    $0x380000,%eax
f0115ec4:	01 c0                	add    %eax,%eax
f0115ec6:	89 c2                	mov    %eax,%edx
f0115ec8:	83 ec 0c             	sub    $0xc,%esp
f0115ecb:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115ed1:	50                   	push   %eax
f0115ed2:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115ed8:	50                   	push   %eax
f0115ed9:	52                   	push   %edx
f0115eda:	68 00 00 70 00       	push   $0x700000
f0115edf:	ff 75 d8             	pushl  -0x28(%ebp)
f0115ee2:	e8 4d 30 ff ff       	call   f0108f34 <calculate_allocated_space>
f0115ee7:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115eea:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ef0:	85 c0                	test   %eax,%eax
f0115ef2:	74 27                	je     f0115f1b <test_calculate_allocated_space+0x58c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115ef4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115efa:	83 ec 0c             	sub    $0xc,%esp
f0115efd:	6a 00                	push   $0x0
f0115eff:	50                   	push   %eax
f0115f00:	68 70 aa 13 f0       	push   $0xf013aa70
f0115f05:	68 fc 06 00 00       	push   $0x6fc
f0115f0a:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0115f0f:	e8 ff a4 fe ff       	call   f0100413 <_warn>
f0115f14:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f17:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115f1b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115f21:	85 c0                	test   %eax,%eax
f0115f23:	74 27                	je     f0115f4c <test_calculate_allocated_space+0x5bd>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115f25:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115f2b:	83 ec 0c             	sub    $0xc,%esp
f0115f2e:	6a 00                	push   $0x0
f0115f30:	50                   	push   %eax
f0115f31:	68 d0 aa 13 f0       	push   $0xf013aad0
f0115f36:	68 01 07 00 00       	push   $0x701
f0115f3b:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0115f40:	e8 ce a4 fe ff       	call   f0100413 <_warn>
f0115f45:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f48:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115f4c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115f50:	74 04                	je     f0115f56 <test_calculate_allocated_space+0x5c7>
f0115f52:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115f56:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f0115f5a:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115f61:	00 00 00 
		num_pages = 0;
f0115f64:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115f6b:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0115f6e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115f71:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0115f76:	89 c2                	mov    %eax,%edx
f0115f78:	83 ec 0c             	sub    $0xc,%esp
f0115f7b:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115f81:	50                   	push   %eax
f0115f82:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115f88:	50                   	push   %eax
f0115f89:	52                   	push   %edx
f0115f8a:	68 ff ff 3f 00       	push   $0x3fffff
f0115f8f:	ff 75 d8             	pushl  -0x28(%ebp)
f0115f92:	e8 9d 2f ff ff       	call   f0108f34 <calculate_allocated_space>
f0115f97:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115f9a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115fa0:	85 c0                	test   %eax,%eax
f0115fa2:	74 27                	je     f0115fcb <test_calculate_allocated_space+0x63c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115fa4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115faa:	83 ec 0c             	sub    $0xc,%esp
f0115fad:	6a 00                	push   $0x0
f0115faf:	50                   	push   %eax
f0115fb0:	68 70 aa 13 f0       	push   $0xf013aa70
f0115fb5:	68 0d 07 00 00       	push   $0x70d
f0115fba:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0115fbf:	e8 4f a4 fe ff       	call   f0100413 <_warn>
f0115fc4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115fc7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115fcb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115fd1:	85 c0                	test   %eax,%eax
f0115fd3:	74 27                	je     f0115ffc <test_calculate_allocated_space+0x66d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115fd5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115fdb:	83 ec 0c             	sub    $0xc,%esp
f0115fde:	6a 00                	push   $0x0
f0115fe0:	50                   	push   %eax
f0115fe1:	68 d0 aa 13 f0       	push   $0xf013aad0
f0115fe6:	68 12 07 00 00       	push   $0x712
f0115feb:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0115ff0:	e8 1e a4 fe ff       	call   f0100413 <_warn>
f0115ff5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ff8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115ffc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116000:	74 04                	je     f0116006 <test_calculate_allocated_space+0x677>
f0116002:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116006:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f011600a:	83 ec 0c             	sub    $0xc,%esp
f011600d:	68 89 a4 13 f0       	push   $0xf013a489
f0116012:	e8 f7 ac fe ff       	call   f0100d0e <cprintf>
f0116017:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f011601a:	83 ec 0c             	sub    $0xc,%esp
f011601d:	68 90 a9 13 f0       	push   $0xf013a990
f0116022:	e8 e7 ac fe ff       	call   f0100d0e <cprintf>
f0116027:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f011602a:	83 ec 04             	sub    $0x4,%esp
f011602d:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0116033:	50                   	push   %eax
f0116034:	68 42 98 13 f0       	push   $0xf0139842
f0116039:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011603f:	50                   	push   %eax
f0116040:	e8 c0 bf 01 00       	call   f0132005 <strcconcat>
f0116045:	83 c4 10             	add    $0x10,%esp
f0116048:	83 ec 0c             	sub    $0xc,%esp
f011604b:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0116051:	50                   	push   %eax
f0116052:	e8 19 ad fe ff       	call   f0100d70 <execute_command>
f0116057:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f011605a:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116061:	00 00 00 
		num_pages = 0;
f0116064:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011606b:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f011606e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116071:	c1 e0 03             	shl    $0x3,%eax
f0116074:	89 c2                	mov    %eax,%edx
f0116076:	83 ec 0c             	sub    $0xc,%esp
f0116079:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011607f:	50                   	push   %eax
f0116080:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116086:	50                   	push   %eax
f0116087:	52                   	push   %edx
f0116088:	6a 00                	push   $0x0
f011608a:	ff 75 d8             	pushl  -0x28(%ebp)
f011608d:	e8 a2 2e ff ff       	call   f0108f34 <calculate_allocated_space>
f0116092:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0116095:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f011609c:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01160a3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01160a9:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01160ac:	74 28                	je     f01160d6 <test_calculate_allocated_space+0x747>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01160ae:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01160b4:	83 ec 0c             	sub    $0xc,%esp
f01160b7:	ff 75 c8             	pushl  -0x38(%ebp)
f01160ba:	50                   	push   %eax
f01160bb:	68 70 aa 13 f0       	push   $0xf013aa70
f01160c0:	68 29 07 00 00       	push   $0x729
f01160c5:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01160ca:	e8 44 a3 fe ff       	call   f0100413 <_warn>
f01160cf:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01160d2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01160d6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01160dc:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01160df:	74 28                	je     f0116109 <test_calculate_allocated_space+0x77a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01160e1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01160e7:	83 ec 0c             	sub    $0xc,%esp
f01160ea:	ff 75 c4             	pushl  -0x3c(%ebp)
f01160ed:	50                   	push   %eax
f01160ee:	68 d0 aa 13 f0       	push   $0xf013aad0
f01160f3:	68 2e 07 00 00       	push   $0x72e
f01160f8:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01160fd:	e8 11 a3 fe ff       	call   f0100413 <_warn>
f0116102:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116105:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116109:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011610d:	74 04                	je     f0116113 <test_calculate_allocated_space+0x784>
f011610f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116113:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0116117:	83 ec 04             	sub    $0x4,%esp
f011611a:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116120:	50                   	push   %eax
f0116121:	68 4f 98 13 f0       	push   $0xf013984f
f0116126:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011612c:	50                   	push   %eax
f011612d:	e8 d3 be 01 00       	call   f0132005 <strcconcat>
f0116132:	83 c4 10             	add    $0x10,%esp
f0116135:	83 ec 0c             	sub    $0xc,%esp
f0116138:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f011613e:	50                   	push   %eax
f011613f:	e8 2c ac fe ff       	call   f0100d70 <execute_command>
f0116144:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0116147:	83 ec 04             	sub    $0x4,%esp
f011614a:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116150:	50                   	push   %eax
f0116151:	68 c4 a9 13 f0       	push   $0xf013a9c4
f0116156:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011615c:	50                   	push   %eax
f011615d:	e8 a3 be 01 00       	call   f0132005 <strcconcat>
f0116162:	83 c4 10             	add    $0x10,%esp
f0116165:	83 ec 0c             	sub    $0xc,%esp
f0116168:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f011616e:	50                   	push   %eax
f011616f:	e8 fc ab fe ff       	call   f0100d70 <execute_command>
f0116174:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f0116177:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011617e:	00 00 00 
		num_pages = 0;
f0116181:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116188:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f011618b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011618e:	c1 e0 03             	shl    $0x3,%eax
f0116191:	89 c2                	mov    %eax,%edx
f0116193:	83 ec 0c             	sub    $0xc,%esp
f0116196:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011619c:	50                   	push   %eax
f011619d:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01161a3:	50                   	push   %eax
f01161a4:	52                   	push   %edx
f01161a5:	6a 00                	push   $0x0
f01161a7:	ff 75 d8             	pushl  -0x28(%ebp)
f01161aa:	e8 85 2d ff ff       	call   f0108f34 <calculate_allocated_space>
f01161af:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f01161b2:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f01161b9:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01161c0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01161c6:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01161c9:	74 28                	je     f01161f3 <test_calculate_allocated_space+0x864>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01161cb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01161d1:	83 ec 0c             	sub    $0xc,%esp
f01161d4:	ff 75 c8             	pushl  -0x38(%ebp)
f01161d7:	50                   	push   %eax
f01161d8:	68 70 aa 13 f0       	push   $0xf013aa70
f01161dd:	68 3f 07 00 00       	push   $0x73f
f01161e2:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01161e7:	e8 27 a2 fe ff       	call   f0100413 <_warn>
f01161ec:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01161ef:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01161f3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01161f9:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01161fc:	74 28                	je     f0116226 <test_calculate_allocated_space+0x897>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01161fe:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116204:	83 ec 0c             	sub    $0xc,%esp
f0116207:	ff 75 c4             	pushl  -0x3c(%ebp)
f011620a:	50                   	push   %eax
f011620b:	68 d0 aa 13 f0       	push   $0xf013aad0
f0116210:	68 44 07 00 00       	push   $0x744
f0116215:	68 3e 8d 13 f0       	push   $0xf0138d3e
f011621a:	e8 f4 a1 fe ff       	call   f0100413 <_warn>
f011621f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116222:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116226:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011622a:	74 04                	je     f0116230 <test_calculate_allocated_space+0x8a1>
f011622c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116230:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0116234:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011623b:	00 00 00 
		num_pages = 0;
f011623e:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116245:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0116248:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011624b:	c1 e0 0a             	shl    $0xa,%eax
f011624e:	89 c2                	mov    %eax,%edx
f0116250:	83 ec 0c             	sub    $0xc,%esp
f0116253:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116259:	50                   	push   %eax
f011625a:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116260:	50                   	push   %eax
f0116261:	52                   	push   %edx
f0116262:	6a 00                	push   $0x0
f0116264:	ff 75 d8             	pushl  -0x28(%ebp)
f0116267:	e8 c8 2c ff ff       	call   f0108f34 <calculate_allocated_space>
f011626c:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f011626f:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f0116276:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011627d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116283:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116286:	74 28                	je     f01162b0 <test_calculate_allocated_space+0x921>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116288:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011628e:	83 ec 0c             	sub    $0xc,%esp
f0116291:	ff 75 c8             	pushl  -0x38(%ebp)
f0116294:	50                   	push   %eax
f0116295:	68 70 aa 13 f0       	push   $0xf013aa70
f011629a:	68 52 07 00 00       	push   $0x752
f011629f:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01162a4:	e8 6a a1 fe ff       	call   f0100413 <_warn>
f01162a9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01162ac:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01162b0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01162b6:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01162b9:	74 28                	je     f01162e3 <test_calculate_allocated_space+0x954>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01162bb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01162c1:	83 ec 0c             	sub    $0xc,%esp
f01162c4:	ff 75 c4             	pushl  -0x3c(%ebp)
f01162c7:	50                   	push   %eax
f01162c8:	68 d0 aa 13 f0       	push   $0xf013aad0
f01162cd:	68 57 07 00 00       	push   $0x757
f01162d2:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01162d7:	e8 37 a1 fe ff       	call   f0100413 <_warn>
f01162dc:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01162df:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01162e3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01162e7:	74 04                	je     f01162ed <test_calculate_allocated_space+0x95e>
f01162e9:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01162ed:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f01162f1:	83 ec 04             	sub    $0x4,%esp
f01162f4:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01162fa:	50                   	push   %eax
f01162fb:	68 d0 a9 13 f0       	push   $0xf013a9d0
f0116300:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116306:	50                   	push   %eax
f0116307:	e8 f9 bc 01 00       	call   f0132005 <strcconcat>
f011630c:	83 c4 10             	add    $0x10,%esp
f011630f:	83 ec 0c             	sub    $0xc,%esp
f0116312:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116318:	50                   	push   %eax
f0116319:	e8 52 aa fe ff       	call   f0100d70 <execute_command>
f011631e:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f0116321:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116328:	00 00 00 
		num_pages = 0;
f011632b:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116332:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0116335:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116338:	89 c2                	mov    %eax,%edx
f011633a:	01 d2                	add    %edx,%edx
f011633c:	01 d0                	add    %edx,%eax
f011633e:	05 00 18 00 00       	add    $0x1800,%eax
f0116343:	89 c2                	mov    %eax,%edx
f0116345:	83 ec 0c             	sub    $0xc,%esp
f0116348:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011634e:	50                   	push   %eax
f011634f:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116355:	50                   	push   %eax
f0116356:	52                   	push   %edx
f0116357:	68 00 18 00 00       	push   $0x1800
f011635c:	ff 75 d8             	pushl  -0x28(%ebp)
f011635f:	e8 d0 2b ff ff       	call   f0108f34 <calculate_allocated_space>
f0116364:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0116367:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f011636e:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116375:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011637b:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011637e:	74 28                	je     f01163a8 <test_calculate_allocated_space+0xa19>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116380:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116386:	83 ec 0c             	sub    $0xc,%esp
f0116389:	ff 75 c8             	pushl  -0x38(%ebp)
f011638c:	50                   	push   %eax
f011638d:	68 70 aa 13 f0       	push   $0xf013aa70
f0116392:	68 68 07 00 00       	push   $0x768
f0116397:	68 3e 8d 13 f0       	push   $0xf0138d3e
f011639c:	e8 72 a0 fe ff       	call   f0100413 <_warn>
f01163a1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01163a4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01163a8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01163ae:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01163b1:	74 28                	je     f01163db <test_calculate_allocated_space+0xa4c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01163b3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01163b9:	83 ec 0c             	sub    $0xc,%esp
f01163bc:	ff 75 c4             	pushl  -0x3c(%ebp)
f01163bf:	50                   	push   %eax
f01163c0:	68 d0 aa 13 f0       	push   $0xf013aad0
f01163c5:	68 6d 07 00 00       	push   $0x76d
f01163ca:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01163cf:	e8 3f a0 fe ff       	call   f0100413 <_warn>
f01163d4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01163d7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01163db:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01163df:	74 04                	je     f01163e5 <test_calculate_allocated_space+0xa56>
f01163e1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01163e5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f01163e9:	83 ec 04             	sub    $0x4,%esp
f01163ec:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01163f2:	50                   	push   %eax
f01163f3:	68 a8 9a 13 f0       	push   $0xf0139aa8
f01163f8:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01163fe:	50                   	push   %eax
f01163ff:	e8 01 bc 01 00       	call   f0132005 <strcconcat>
f0116404:	83 c4 10             	add    $0x10,%esp
f0116407:	83 ec 0c             	sub    $0xc,%esp
f011640a:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116410:	50                   	push   %eax
f0116411:	e8 5a a9 fe ff       	call   f0100d70 <execute_command>
f0116416:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f0116419:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116420:	00 00 00 
		num_pages = 0;
f0116423:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011642a:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f011642d:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116430:	89 d0                	mov    %edx,%eax
f0116432:	c1 e0 02             	shl    $0x2,%eax
f0116435:	01 d0                	add    %edx,%eax
f0116437:	01 c0                	add    %eax,%eax
f0116439:	05 00 00 40 00       	add    $0x400000,%eax
f011643e:	89 c2                	mov    %eax,%edx
f0116440:	83 ec 0c             	sub    $0xc,%esp
f0116443:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116449:	50                   	push   %eax
f011644a:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116450:	50                   	push   %eax
f0116451:	52                   	push   %edx
f0116452:	68 00 00 40 00       	push   $0x400000
f0116457:	ff 75 d8             	pushl  -0x28(%ebp)
f011645a:	e8 d5 2a ff ff       	call   f0108f34 <calculate_allocated_space>
f011645f:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0116462:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0116469:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116470:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116476:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116479:	74 28                	je     f01164a3 <test_calculate_allocated_space+0xb14>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011647b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116481:	83 ec 0c             	sub    $0xc,%esp
f0116484:	ff 75 c8             	pushl  -0x38(%ebp)
f0116487:	50                   	push   %eax
f0116488:	68 70 aa 13 f0       	push   $0xf013aa70
f011648d:	68 7d 07 00 00       	push   $0x77d
f0116492:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0116497:	e8 77 9f fe ff       	call   f0100413 <_warn>
f011649c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011649f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01164a3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01164a9:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01164ac:	74 28                	je     f01164d6 <test_calculate_allocated_space+0xb47>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01164ae:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01164b4:	83 ec 0c             	sub    $0xc,%esp
f01164b7:	ff 75 c4             	pushl  -0x3c(%ebp)
f01164ba:	50                   	push   %eax
f01164bb:	68 d0 aa 13 f0       	push   $0xf013aad0
f01164c0:	68 82 07 00 00       	push   $0x782
f01164c5:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01164ca:	e8 44 9f fe ff       	call   f0100413 <_warn>
f01164cf:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01164d2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01164d6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01164da:	74 04                	je     f01164e0 <test_calculate_allocated_space+0xb51>
f01164dc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01164e0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f01164e4:	83 ec 04             	sub    $0x4,%esp
f01164e7:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01164ed:	50                   	push   %eax
f01164ee:	68 b2 9a 13 f0       	push   $0xf0139ab2
f01164f3:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01164f9:	50                   	push   %eax
f01164fa:	e8 06 bb 01 00       	call   f0132005 <strcconcat>
f01164ff:	83 c4 10             	add    $0x10,%esp
f0116502:	83 ec 0c             	sub    $0xc,%esp
f0116505:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f011650b:	50                   	push   %eax
f011650c:	e8 5f a8 fe ff       	call   f0100d70 <execute_command>
f0116511:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0116514:	83 ec 04             	sub    $0x4,%esp
f0116517:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f011651d:	50                   	push   %eax
f011651e:	68 d8 a9 13 f0       	push   $0xf013a9d8
f0116523:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116529:	50                   	push   %eax
f011652a:	e8 d6 ba 01 00       	call   f0132005 <strcconcat>
f011652f:	83 c4 10             	add    $0x10,%esp
f0116532:	83 ec 0c             	sub    $0xc,%esp
f0116535:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f011653b:	50                   	push   %eax
f011653c:	e8 2f a8 fe ff       	call   f0100d70 <execute_command>
f0116541:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f0116544:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011654b:	00 00 00 
		num_pages = 0;
f011654e:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116555:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0116558:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011655b:	05 00 00 38 00       	add    $0x380000,%eax
f0116560:	01 c0                	add    %eax,%eax
f0116562:	89 c2                	mov    %eax,%edx
f0116564:	83 ec 0c             	sub    $0xc,%esp
f0116567:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011656d:	50                   	push   %eax
f011656e:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116574:	50                   	push   %eax
f0116575:	52                   	push   %edx
f0116576:	68 00 00 70 00       	push   $0x700000
f011657b:	ff 75 d8             	pushl  -0x28(%ebp)
f011657e:	e8 b1 29 ff ff       	call   f0108f34 <calculate_allocated_space>
f0116583:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0116586:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f011658d:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116594:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011659a:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011659d:	74 28                	je     f01165c7 <test_calculate_allocated_space+0xc38>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011659f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01165a5:	83 ec 0c             	sub    $0xc,%esp
f01165a8:	ff 75 c8             	pushl  -0x38(%ebp)
f01165ab:	50                   	push   %eax
f01165ac:	68 70 aa 13 f0       	push   $0xf013aa70
f01165b1:	68 94 07 00 00       	push   $0x794
f01165b6:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01165bb:	e8 53 9e fe ff       	call   f0100413 <_warn>
f01165c0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01165c3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01165c7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01165cd:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01165d0:	74 28                	je     f01165fa <test_calculate_allocated_space+0xc6b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01165d2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01165d8:	83 ec 0c             	sub    $0xc,%esp
f01165db:	ff 75 c4             	pushl  -0x3c(%ebp)
f01165de:	50                   	push   %eax
f01165df:	68 d0 aa 13 f0       	push   $0xf013aad0
f01165e4:	68 99 07 00 00       	push   $0x799
f01165e9:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01165ee:	e8 20 9e fe ff       	call   f0100413 <_warn>
f01165f3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01165f6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01165fa:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01165fe:	74 04                	je     f0116604 <test_calculate_allocated_space+0xc75>
f0116600:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116604:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f0116608:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011660f:	00 00 00 
		num_pages = 0;
f0116612:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116619:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f011661c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011661f:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0116624:	89 c2                	mov    %eax,%edx
f0116626:	83 ec 0c             	sub    $0xc,%esp
f0116629:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011662f:	50                   	push   %eax
f0116630:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116636:	50                   	push   %eax
f0116637:	52                   	push   %edx
f0116638:	68 ff ff 3f 00       	push   $0x3fffff
f011663d:	ff 75 d8             	pushl  -0x28(%ebp)
f0116640:	e8 ef 28 ff ff       	call   f0108f34 <calculate_allocated_space>
f0116645:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0116648:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f011664f:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116656:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011665c:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011665f:	74 28                	je     f0116689 <test_calculate_allocated_space+0xcfa>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116661:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116667:	83 ec 0c             	sub    $0xc,%esp
f011666a:	ff 75 c8             	pushl  -0x38(%ebp)
f011666d:	50                   	push   %eax
f011666e:	68 70 aa 13 f0       	push   $0xf013aa70
f0116673:	68 a7 07 00 00       	push   $0x7a7
f0116678:	68 3e 8d 13 f0       	push   $0xf0138d3e
f011667d:	e8 91 9d fe ff       	call   f0100413 <_warn>
f0116682:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116685:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116689:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011668f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116692:	74 28                	je     f01166bc <test_calculate_allocated_space+0xd2d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116694:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011669a:	83 ec 0c             	sub    $0xc,%esp
f011669d:	ff 75 c4             	pushl  -0x3c(%ebp)
f01166a0:	50                   	push   %eax
f01166a1:	68 d0 aa 13 f0       	push   $0xf013aad0
f01166a6:	68 ac 07 00 00       	push   $0x7ac
f01166ab:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01166b0:	e8 5e 9d fe ff       	call   f0100413 <_warn>
f01166b5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01166b8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01166bc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01166c0:	74 04                	je     f01166c6 <test_calculate_allocated_space+0xd37>
f01166c2:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01166c6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f01166ca:	83 ec 0c             	sub    $0xc,%esp
f01166cd:	68 63 9a 13 f0       	push   $0xf0139a63
f01166d2:	e8 37 a6 fe ff       	call   f0100d0e <cprintf>
f01166d7:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f01166da:	83 ec 08             	sub    $0x8,%esp
f01166dd:	ff 75 e4             	pushl  -0x1c(%ebp)
f01166e0:	68 2c ab 13 f0       	push   $0xf013ab2c
f01166e5:	e8 24 a6 fe ff       	call   f0100d0e <cprintf>
f01166ea:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01166ed:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01166f1:	75 10                	jne    f0116703 <test_calculate_allocated_space+0xd74>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f01166f3:	83 ec 0c             	sub    $0xc,%esp
f01166f6:	68 6c ab 13 f0       	push   $0xf013ab6c
f01166fb:	e8 0e a6 fe ff       	call   f0100d0e <cprintf>
f0116700:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0116703:	a1 28 b9 85 f0       	mov    0xf085b928,%eax
f0116708:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f011670b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011670e:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0116711:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0116716:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116719:	5b                   	pop    %ebx
f011671a:	5e                   	pop    %esi
f011671b:	5f                   	pop    %edi
f011671c:	5d                   	pop    %ebp
f011671d:	c3                   	ret    

f011671e <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f011671e:	55                   	push   %ebp
f011671f:	89 e5                	mov    %esp,%ebp
f0116721:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f0116724:	8b 45 10             	mov    0x10(%ebp),%eax
f0116727:	ba 01 00 00 00       	mov    $0x1,%edx
f011672c:	88 c1                	mov    %al,%cl
f011672e:	d3 e2                	shl    %cl,%edx
f0116730:	89 d0                	mov    %edx,%eax
f0116732:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116735:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116738:	c1 e8 16             	shr    $0x16,%eax
f011673b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116742:	8b 45 08             	mov    0x8(%ebp),%eax
f0116745:	01 d0                	add    %edx,%eax
f0116747:	8b 00                	mov    (%eax),%eax
f0116749:	83 e0 01             	and    $0x1,%eax
f011674c:	85 c0                	test   %eax,%eax
f011674e:	75 07                	jne    f0116757 <CB+0x39>
f0116750:	b8 00 00 00 00       	mov    $0x0,%eax
f0116755:	eb 76                	jmp    f01167cd <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116757:	8b 45 0c             	mov    0xc(%ebp),%eax
f011675a:	c1 e8 16             	shr    $0x16,%eax
f011675d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116764:	8b 45 08             	mov    0x8(%ebp),%eax
f0116767:	01 d0                	add    %edx,%eax
f0116769:	8b 00                	mov    (%eax),%eax
f011676b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116770:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116773:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116776:	c1 e8 0c             	shr    $0xc,%eax
f0116779:	89 45 ec             	mov    %eax,-0x14(%ebp)
f011677c:	a1 8c b8 85 f0       	mov    0xf085b88c,%eax
f0116781:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0116784:	72 17                	jb     f011679d <CB+0x7f>
f0116786:	ff 75 f0             	pushl  -0x10(%ebp)
f0116789:	68 b8 ab 13 f0       	push   $0xf013abb8
f011678e:	68 c7 07 00 00       	push   $0x7c7
f0116793:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0116798:	e8 68 9a fe ff       	call   f0100205 <_panic>
f011679d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01167a0:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01167a5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f01167a8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01167ab:	c1 e8 0c             	shr    $0xc,%eax
f01167ae:	25 ff 03 00 00       	and    $0x3ff,%eax
f01167b3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01167ba:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01167bd:	01 d0                	add    %edx,%eax
f01167bf:	8b 00                	mov    (%eax),%eax
f01167c1:	23 45 f4             	and    -0xc(%ebp),%eax
f01167c4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01167c7:	0f 94 c0             	sete   %al
f01167ca:	0f b6 c0             	movzbl %al,%eax
}
f01167cd:	c9                   	leave  
f01167ce:	c3                   	ret    

f01167cf <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f01167cf:	55                   	push   %ebp
f01167d0:	89 e5                	mov    %esp,%ebp
f01167d2:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f01167d5:	68 e7 ab 13 f0       	push   $0xf013abe7
f01167da:	68 f6 ab 13 f0       	push   $0xf013abf6
f01167df:	68 cc 07 00 00       	push   $0x7cc
f01167e4:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01167e9:	e8 17 9a fe ff       	call   f0100205 <_panic>

f01167ee <CPs>:
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
	return 0;
}
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f01167ee:	55                   	push   %ebp
f01167ef:	89 e5                	mov    %esp,%ebp
f01167f1:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f01167f4:	68 e7 ab 13 f0       	push   $0xf013abe7
f01167f9:	68 f6 ab 13 f0       	push   $0xf013abf6
f01167fe:	68 d6 07 00 00       	push   $0x7d6
f0116803:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0116808:	e8 f8 99 fe ff       	call   f0100205 <_panic>

f011680d <CA>:
	}
	return 1;
}

int CA(uint32 *ptr_dir, uint32 va)
{
f011680d:	55                   	push   %ebp
f011680e:	89 e5                	mov    %esp,%ebp
f0116810:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116813:	68 e7 ab 13 f0       	push   $0xf013abe7
f0116818:	68 f6 ab 13 f0       	push   $0xf013abf6
f011681d:	68 e5 07 00 00       	push   $0x7e5
f0116822:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0116827:	e8 d9 99 fe ff       	call   f0100205 <_panic>

f011682c <CE>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
}

int CE(uint32 *_d, uint32 va)
{
f011682c:	55                   	push   %ebp
f011682d:	89 e5                	mov    %esp,%ebp
f011682f:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116832:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116835:	c1 e8 16             	shr    $0x16,%eax
f0116838:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011683f:	8b 45 08             	mov    0x8(%ebp),%eax
f0116842:	01 d0                	add    %edx,%eax
f0116844:	8b 00                	mov    (%eax),%eax
f0116846:	83 e0 01             	and    $0x1,%eax
f0116849:	85 c0                	test   %eax,%eax
f011684b:	75 07                	jne    f0116854 <CE+0x28>
f011684d:	b8 00 00 00 00       	mov    $0x0,%eax
f0116852:	eb 7a                	jmp    f01168ce <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116854:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116857:	c1 e8 16             	shr    $0x16,%eax
f011685a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116861:	8b 45 08             	mov    0x8(%ebp),%eax
f0116864:	01 d0                	add    %edx,%eax
f0116866:	8b 00                	mov    (%eax),%eax
f0116868:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011686d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0116870:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116873:	c1 e8 0c             	shr    $0xc,%eax
f0116876:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116879:	a1 8c b8 85 f0       	mov    0xf085b88c,%eax
f011687e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0116881:	72 17                	jb     f011689a <CE+0x6e>
f0116883:	ff 75 f4             	pushl  -0xc(%ebp)
f0116886:	68 b8 ab 13 f0       	push   $0xf013abb8
f011688b:	68 ee 07 00 00       	push   $0x7ee
f0116890:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0116895:	e8 6b 99 fe ff       	call   f0100205 <_panic>
f011689a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011689d:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01168a2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f01168a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01168a8:	c1 e8 0c             	shr    $0xc,%eax
f01168ab:	25 ff 03 00 00       	and    $0x3ff,%eax
f01168b0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01168b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01168ba:	01 d0                	add    %edx,%eax
f01168bc:	8b 00                	mov    (%eax),%eax
f01168be:	85 c0                	test   %eax,%eax
f01168c0:	74 07                	je     f01168c9 <CE+0x9d>
f01168c2:	b8 00 00 00 00       	mov    $0x0,%eax
f01168c7:	eb 05                	jmp    f01168ce <CE+0xa2>
	return 1;
f01168c9:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01168ce:	c9                   	leave  
f01168cf:	c3                   	ret    

f01168d0 <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f01168d0:	55                   	push   %ebp
f01168d1:	89 e5                	mov    %esp,%ebp
f01168d3:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f01168d6:	68 e7 ab 13 f0       	push   $0xf013abe7
f01168db:	68 f6 ab 13 f0       	push   $0xf013abf6
f01168e0:	68 f5 07 00 00       	push   $0x7f5
f01168e5:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01168ea:	e8 16 99 fe ff       	call   f0100205 <_panic>

f01168ef <GP>:
	}
	return 0;
}

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f01168ef:	55                   	push   %ebp
f01168f0:	89 e5                	mov    %esp,%ebp
f01168f2:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f01168f5:	68 e7 ab 13 f0       	push   $0xf013abe7
f01168fa:	68 f6 ab 13 f0       	push   $0xf013abf6
f01168ff:	68 05 08 00 00       	push   $0x805
f0116904:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0116909:	e8 f7 98 fe ff       	call   f0100205 <_panic>

f011690e <ClearUserSpace>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
f011690e:	55                   	push   %ebp
f011690f:	89 e5                	mov    %esp,%ebp
f0116911:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0116914:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f011691b:	eb 18                	jmp    f0116935 <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f011691d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0116920:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116927:	8b 45 08             	mov    0x8(%ebp),%eax
f011692a:	01 d0                	add    %edx,%eax
f011692c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0116932:	ff 45 fc             	incl   -0x4(%ebp)
f0116935:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0116938:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f011693d:	76 de                	jbe    f011691d <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f011693f:	90                   	nop
f0116940:	c9                   	leave  
f0116941:	c3                   	ret    

f0116942 <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f0116942:	55                   	push   %ebp
f0116943:	89 e5                	mov    %esp,%ebp
f0116945:	83 ec 38             	sub    $0x38,%esp
f0116948:	8b 45 2c             	mov    0x2c(%ebp),%eax
f011694b:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f011694e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116951:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116956:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f0116959:	8b 45 10             	mov    0x10(%ebp),%eax
f011695c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116961:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0116964:	e9 ea 01 00 00       	jmp    f0116b53 <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f0116969:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f011696d:	74 44                	je     f01169b3 <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f011696f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116972:	83 ec 04             	sub    $0x4,%esp
f0116975:	8d 55 dc             	lea    -0x24(%ebp),%edx
f0116978:	52                   	push   %edx
f0116979:	50                   	push   %eax
f011697a:	ff 75 08             	pushl  0x8(%ebp)
f011697d:	e8 9f 04 ff ff       	call   f0106e21 <get_frame_info>
f0116982:	83 c4 10             	add    $0x10,%esp
f0116985:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f0116988:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011698b:	85 c0                	test   %eax,%eax
f011698d:	75 24                	jne    f01169b3 <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f011698f:	83 ec 04             	sub    $0x4,%esp
f0116992:	68 0c ac 13 f0       	push   $0xf013ac0c
f0116997:	68 22 08 00 00       	push   $0x822
f011699c:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01169a1:	e8 6d 9a fe ff       	call   f0100413 <_warn>
f01169a6:	83 c4 10             	add    $0x10,%esp
				return 0;
f01169a9:	b8 00 00 00 00       	mov    $0x0,%eax
f01169ae:	e9 b6 01 00 00       	jmp    f0116b69 <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f01169b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01169b6:	83 ec 04             	sub    $0x4,%esp
f01169b9:	8d 55 d8             	lea    -0x28(%ebp),%edx
f01169bc:	52                   	push   %edx
f01169bd:	50                   	push   %eax
f01169be:	ff 75 08             	pushl  0x8(%ebp)
f01169c1:	e8 5b 04 ff ff       	call   f0106e21 <get_frame_info>
f01169c6:	83 c4 10             	add    $0x10,%esp
f01169c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f01169cc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01169cf:	85 c0                	test   %eax,%eax
f01169d1:	75 24                	jne    f01169f7 <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f01169d3:	83 ec 04             	sub    $0x4,%esp
f01169d6:	68 38 ac 13 f0       	push   $0xf013ac38
f01169db:	68 29 08 00 00       	push   $0x829
f01169e0:	68 3e 8d 13 f0       	push   $0xf0138d3e
f01169e5:	e8 29 9a fe ff       	call   f0100413 <_warn>
f01169ea:	83 c4 10             	add    $0x10,%esp
			return 0;
f01169ed:	b8 00 00 00 00       	mov    $0x0,%eax
f01169f2:	e9 72 01 00 00       	jmp    f0116b69 <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f01169f7:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f01169fb:	75 70                	jne    f0116a6d <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f01169fd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116a00:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116a03:	c1 ea 0c             	shr    $0xc,%edx
f0116a06:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116a0c:	c1 e2 02             	shl    $0x2,%edx
f0116a0f:	01 d0                	add    %edx,%eax
f0116a11:	8b 00                	mov    (%eax),%eax
f0116a13:	c1 e8 0c             	shr    $0xc,%eax
f0116a16:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f0116a19:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116a1c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0116a1f:	c1 ea 0c             	shr    $0xc,%edx
f0116a22:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116a28:	c1 e2 02             	shl    $0x2,%edx
f0116a2b:	01 d0                	add    %edx,%eax
f0116a2d:	8b 00                	mov    (%eax),%eax
f0116a2f:	c1 e8 0c             	shr    $0xc,%eax
f0116a32:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f0116a35:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116a38:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0116a3b:	74 30                	je     f0116a6d <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f0116a3d:	83 ec 04             	sub    $0x4,%esp
f0116a40:	ff 75 e4             	pushl  -0x1c(%ebp)
f0116a43:	ff 75 e8             	pushl  -0x18(%ebp)
f0116a46:	ff 75 f0             	pushl  -0x10(%ebp)
f0116a49:	ff 75 f4             	pushl  -0xc(%ebp)
f0116a4c:	68 64 ac 13 f0       	push   $0xf013ac64
f0116a51:	68 33 08 00 00       	push   $0x833
f0116a56:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0116a5b:	e8 b3 99 fe ff       	call   f0100413 <_warn>
f0116a60:	83 c4 20             	add    $0x20,%esp
				return 0;
f0116a63:	b8 00 00 00 00       	mov    $0x0,%eax
f0116a68:	e9 fc 00 00 00       	jmp    f0116b69 <CCP+0x227>
			}
		}
		if (ref != -1)
f0116a6d:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f0116a71:	74 52                	je     f0116ac5 <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f0116a73:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0116a77:	74 0e                	je     f0116a87 <CCP+0x145>
f0116a79:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116a7c:	8b 40 08             	mov    0x8(%eax),%eax
f0116a7f:	0f b7 c0             	movzwl %ax,%eax
f0116a82:	3b 45 18             	cmp    0x18(%ebp),%eax
f0116a85:	74 3e                	je     f0116ac5 <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f0116a87:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0116a8b:	74 0b                	je     f0116a98 <CCP+0x156>
f0116a8d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116a90:	8b 40 08             	mov    0x8(%eax),%eax
f0116a93:	0f b7 c0             	movzwl %ax,%eax
f0116a96:	eb 05                	jmp    f0116a9d <CCP+0x15b>
f0116a98:	b8 00 00 00 00       	mov    $0x0,%eax
f0116a9d:	83 ec 0c             	sub    $0xc,%esp
f0116aa0:	50                   	push   %eax
f0116aa1:	ff 75 f0             	pushl  -0x10(%ebp)
f0116aa4:	68 c0 ac 13 f0       	push   $0xf013acc0
f0116aa9:	68 3b 08 00 00       	push   $0x83b
f0116aae:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0116ab3:	e8 5b 99 fe ff       	call   f0100413 <_warn>
f0116ab8:	83 c4 20             	add    $0x20,%esp
				return 0;
f0116abb:	b8 00 00 00 00       	mov    $0x0,%eax
f0116ac0:	e9 a4 00 00 00       	jmp    f0116b69 <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f0116ac5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116ac8:	ff 75 20             	pushl  0x20(%ebp)
f0116acb:	ff 75 1c             	pushl  0x1c(%ebp)
f0116ace:	50                   	push   %eax
f0116acf:	ff 75 08             	pushl  0x8(%ebp)
f0116ad2:	e8 17 fd ff ff       	call   f01167ee <CPs>
f0116ad7:	83 c4 10             	add    $0x10,%esp
f0116ada:	85 c0                	test   %eax,%eax
f0116adc:	7f 21                	jg     f0116aff <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0116ade:	83 ec 04             	sub    $0x4,%esp
f0116ae1:	68 30 ad 13 f0       	push   $0xf013ad30
f0116ae6:	68 41 08 00 00       	push   $0x841
f0116aeb:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0116af0:	e8 1e 99 fe ff       	call   f0100413 <_warn>
f0116af5:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116af8:	b8 00 00 00 00       	mov    $0x0,%eax
f0116afd:	eb 6a                	jmp    f0116b69 <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f0116aff:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116b03:	74 3a                	je     f0116b3f <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f0116b05:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116b08:	ff 75 28             	pushl  0x28(%ebp)
f0116b0b:	ff 75 24             	pushl  0x24(%ebp)
f0116b0e:	50                   	push   %eax
f0116b0f:	ff 75 08             	pushl  0x8(%ebp)
f0116b12:	e8 d7 fc ff ff       	call   f01167ee <CPs>
f0116b17:	83 c4 10             	add    $0x10,%esp
f0116b1a:	85 c0                	test   %eax,%eax
f0116b1c:	7f 21                	jg     f0116b3f <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0116b1e:	83 ec 04             	sub    $0x4,%esp
f0116b21:	68 78 ad 13 f0       	push   $0xf013ad78
f0116b26:	68 48 08 00 00       	push   $0x848
f0116b2b:	68 3e 8d 13 f0       	push   $0xf0138d3e
f0116b30:	e8 de 98 fe ff       	call   f0100413 <_warn>
f0116b35:	83 c4 10             	add    $0x10,%esp
				return 0;
f0116b38:	b8 00 00 00 00       	mov    $0x0,%eax
f0116b3d:	eb 2a                	jmp    f0116b69 <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0116b3f:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116b43:	74 07                	je     f0116b4c <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f0116b45:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0116b4c:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0116b53:	8b 55 10             	mov    0x10(%ebp),%edx
f0116b56:	8b 45 14             	mov    0x14(%ebp),%eax
f0116b59:	01 d0                	add    %edx,%eax
f0116b5b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0116b5e:	0f 87 05 fe ff ff    	ja     f0116969 <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f0116b64:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116b69:	c9                   	leave  
f0116b6a:	c3                   	ret    

f0116b6b <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f0116b6b:	55                   	push   %ebp
f0116b6c:	89 e5                	mov    %esp,%ebp
f0116b6e:	57                   	push   %edi
f0116b6f:	56                   	push   %esi
f0116b70:	53                   	push   %ebx
f0116b71:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f0116b77:	a0 22 3d 19 f0       	mov    0xf0193d22,%al
f0116b7c:	84 c0                	test   %al,%al
f0116b7e:	0f 84 b4 09 00 00    	je     f0117538 <test_priority_normal_and_higher+0x9cd>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f0116b84:	c6 05 22 3d 19 f0 00 	movb   $0x0,0xf0193d22
		char command[100] = "load fos_add 20";
f0116b8b:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116b91:	bb 18 b0 13 f0       	mov    $0xf013b018,%ebx
f0116b96:	ba 04 00 00 00       	mov    $0x4,%edx
f0116b9b:	89 c7                	mov    %eax,%edi
f0116b9d:	89 de                	mov    %ebx,%esi
f0116b9f:	89 d1                	mov    %edx,%ecx
f0116ba1:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0116ba3:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f0116ba9:	b9 15 00 00 00       	mov    $0x15,%ecx
f0116bae:	b8 00 00 00 00       	mov    $0x0,%eax
f0116bb3:	89 d7                	mov    %edx,%edi
f0116bb5:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0116bb7:	83 ec 0c             	sub    $0xc,%esp
f0116bba:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116bc0:	50                   	push   %eax
f0116bc1:	e8 aa a1 fe ff       	call   f0100d70 <execute_command>
f0116bc6:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0116bc9:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116bcf:	bb 7c b0 13 f0       	mov    $0xf013b07c,%ebx
f0116bd4:	ba 0d 00 00 00       	mov    $0xd,%edx
f0116bd9:	89 c7                	mov    %eax,%edi
f0116bdb:	89 de                	mov    %ebx,%esi
f0116bdd:	89 d1                	mov    %edx,%ecx
f0116bdf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116be1:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0116be7:	b9 57 00 00 00       	mov    $0x57,%ecx
f0116bec:	b0 00                	mov    $0x0,%al
f0116bee:	89 d7                	mov    %edx,%edi
f0116bf0:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0116bf2:	83 ec 0c             	sub    $0xc,%esp
f0116bf5:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116bfb:	50                   	push   %eax
f0116bfc:	e8 6f a1 fe ff       	call   f0100d70 <execute_command>
f0116c01:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f0116c04:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0116c0a:	bb e0 b0 13 f0       	mov    $0xf013b0e0,%ebx
f0116c0f:	ba 17 00 00 00       	mov    $0x17,%edx
f0116c14:	89 c7                	mov    %eax,%edi
f0116c16:	89 de                	mov    %ebx,%esi
f0116c18:	89 d1                	mov    %edx,%ecx
f0116c1a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116c1c:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0116c22:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0116c27:	b0 00                	mov    $0x0,%al
f0116c29:	89 d7                	mov    %edx,%edi
f0116c2b:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0116c2d:	83 ec 0c             	sub    $0xc,%esp
f0116c30:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0116c36:	50                   	push   %eax
f0116c37:	e8 34 a1 fe ff       	call   f0100d70 <execute_command>
f0116c3c:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0116c3f:	83 ec 04             	sub    $0x4,%esp
f0116c42:	6a 00                	push   $0x0
f0116c44:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0116c47:	50                   	push   %eax
f0116c48:	68 00 10 00 00       	push   $0x1000
f0116c4d:	e8 74 33 ff ff       	call   f0109fc6 <envid2env>
f0116c52:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0116c55:	83 ec 04             	sub    $0x4,%esp
f0116c58:	6a 00                	push   $0x0
f0116c5a:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0116c5d:	50                   	push   %eax
f0116c5e:	68 01 10 00 00       	push   $0x1001
f0116c63:	e8 5e 33 ff ff       	call   f0109fc6 <envid2env>
f0116c68:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0116c6b:	83 ec 04             	sub    $0x4,%esp
f0116c6e:	6a 00                	push   $0x0
f0116c70:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f0116c73:	50                   	push   %eax
f0116c74:	68 02 10 00 00       	push   $0x1002
f0116c79:	e8 48 33 ff ff       	call   f0109fc6 <envid2env>
f0116c7e:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0116c81:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116c84:	85 c0                	test   %eax,%eax
f0116c86:	74 0e                	je     f0116c96 <test_priority_normal_and_higher+0x12b>
f0116c88:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116c8b:	85 c0                	test   %eax,%eax
f0116c8d:	74 07                	je     f0116c96 <test_priority_normal_and_higher+0x12b>
f0116c8f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116c92:	85 c0                	test   %eax,%eax
f0116c94:	75 14                	jne    f0116caa <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f0116c96:	83 ec 04             	sub    $0x4,%esp
f0116c99:	68 b8 ad 13 f0       	push   $0xf013adb8
f0116c9e:	6a 26                	push   $0x26
f0116ca0:	68 d1 ad 13 f0       	push   $0xf013add1
f0116ca5:	e8 5b 95 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116caa:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116cad:	8b 40 74             	mov    0x74(%eax),%eax
f0116cb0:	83 f8 14             	cmp    $0x14,%eax
f0116cb3:	75 16                	jne    f0116ccb <test_priority_normal_and_higher+0x160>
f0116cb5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116cb8:	8b 40 74             	mov    0x74(%eax),%eax
f0116cbb:	83 f8 0f             	cmp    $0xf,%eax
f0116cbe:	75 0b                	jne    f0116ccb <test_priority_normal_and_higher+0x160>
f0116cc0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116cc3:	8b 40 74             	mov    0x74(%eax),%eax
f0116cc6:	83 f8 0a             	cmp    $0xa,%eax
f0116cc9:	74 14                	je     f0116cdf <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f0116ccb:	83 ec 04             	sub    $0x4,%esp
f0116cce:	68 ec ad 13 f0       	push   $0xf013adec
f0116cd3:	6a 29                	push   $0x29
f0116cd5:	68 d1 ad 13 f0       	push   $0xf013add1
f0116cda:	e8 26 95 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 20; i++)
f0116cdf:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0116ce6:	eb 44                	jmp    f0116d2c <test_priority_normal_and_higher+0x1c1>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0116ce8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116ceb:	8b 48 78             	mov    0x78(%eax),%ecx
f0116cee:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116cf1:	89 d0                	mov    %edx,%eax
f0116cf3:	01 c0                	add    %eax,%eax
f0116cf5:	01 d0                	add    %edx,%eax
f0116cf7:	c1 e0 03             	shl    $0x3,%eax
f0116cfa:	01 c8                	add    %ecx,%eax
f0116cfc:	8b 10                	mov    (%eax),%edx
f0116cfe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116d01:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0116d08:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116d0b:	8b 48 78             	mov    0x78(%eax),%ecx
f0116d0e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116d11:	89 d0                	mov    %edx,%eax
f0116d13:	01 c0                	add    %eax,%eax
f0116d15:	01 d0                	add    %edx,%eax
f0116d17:	c1 e0 03             	shl    $0x3,%eax
f0116d1a:	01 c8                	add    %ecx,%eax
f0116d1c:	8b 50 08             	mov    0x8(%eax),%edx
f0116d1f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116d22:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0116d29:	ff 45 e4             	incl   -0x1c(%ebp)
f0116d2c:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0116d30:	7e b6                	jle    f0116ce8 <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0116d32:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0116d39:	eb 44                	jmp    f0116d7f <test_priority_normal_and_higher+0x214>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0116d3b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116d3e:	8b 48 78             	mov    0x78(%eax),%ecx
f0116d41:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116d44:	89 d0                	mov    %edx,%eax
f0116d46:	01 c0                	add    %eax,%eax
f0116d48:	01 d0                	add    %edx,%eax
f0116d4a:	c1 e0 03             	shl    $0x3,%eax
f0116d4d:	01 c8                	add    %ecx,%eax
f0116d4f:	8b 10                	mov    (%eax),%edx
f0116d51:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116d54:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0116d5b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116d5e:	8b 48 78             	mov    0x78(%eax),%ecx
f0116d61:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116d64:	89 d0                	mov    %edx,%eax
f0116d66:	01 c0                	add    %eax,%eax
f0116d68:	01 d0                	add    %edx,%eax
f0116d6a:	c1 e0 03             	shl    $0x3,%eax
f0116d6d:	01 c8                	add    %ecx,%eax
f0116d6f:	8b 50 08             	mov    0x8(%eax),%edx
f0116d72:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116d75:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0116d7c:	ff 45 e0             	incl   -0x20(%ebp)
f0116d7f:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f0116d83:	7e b6                	jle    f0116d3b <test_priority_normal_and_higher+0x1d0>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0116d85:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0116d8c:	eb 44                	jmp    f0116dd2 <test_priority_normal_and_higher+0x267>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0116d8e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116d91:	8b 48 78             	mov    0x78(%eax),%ecx
f0116d94:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116d97:	89 d0                	mov    %edx,%eax
f0116d99:	01 c0                	add    %eax,%eax
f0116d9b:	01 d0                	add    %edx,%eax
f0116d9d:	c1 e0 03             	shl    $0x3,%eax
f0116da0:	01 c8                	add    %ecx,%eax
f0116da2:	8b 10                	mov    (%eax),%edx
f0116da4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116da7:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0116dae:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116db1:	8b 48 78             	mov    0x78(%eax),%ecx
f0116db4:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116db7:	89 d0                	mov    %edx,%eax
f0116db9:	01 c0                	add    %eax,%eax
f0116dbb:	01 d0                	add    %edx,%eax
f0116dbd:	c1 e0 03             	shl    $0x3,%eax
f0116dc0:	01 c8                	add    %ecx,%eax
f0116dc2:	8b 50 08             	mov    0x8(%eax),%edx
f0116dc5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116dc8:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0116dcf:	ff 45 dc             	incl   -0x24(%ebp)
f0116dd2:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f0116dd6:	7e b6                	jle    f0116d8e <test_priority_normal_and_higher+0x223>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0116dd8:	e8 7c 62 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0116ddd:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0116de0:	e8 fe cf fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0116de5:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0116de8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116deb:	83 ec 08             	sub    $0x8,%esp
f0116dee:	6a 03                	push   $0x3
f0116df0:	50                   	push   %eax
f0116df1:	e8 ae 46 ff ff       	call   f010b4a4 <set_program_priority>
f0116df6:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0116df9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116dfc:	83 ec 08             	sub    $0x8,%esp
f0116dff:	6a 03                	push   $0x3
f0116e01:	50                   	push   %eax
f0116e02:	e8 9d 46 ff ff       	call   f010b4a4 <set_program_priority>
f0116e07:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0116e0a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116e0d:	83 ec 08             	sub    $0x8,%esp
f0116e10:	6a 03                	push   $0x3
f0116e12:	50                   	push   %eax
f0116e13:	e8 8c 46 ff ff       	call   f010b4a4 <set_program_priority>
f0116e18:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116e1b:	e8 c3 cf fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0116e20:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116e23:	74 14                	je     f0116e39 <test_priority_normal_and_higher+0x2ce>
f0116e25:	83 ec 04             	sub    $0x4,%esp
f0116e28:	68 38 ae 13 f0       	push   $0xf013ae38
f0116e2d:	6a 45                	push   $0x45
f0116e2f:	68 d1 ad 13 f0       	push   $0xf013add1
f0116e34:	e8 cc 93 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116e39:	e8 1b 62 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0116e3e:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116e41:	74 14                	je     f0116e57 <test_priority_normal_and_higher+0x2ec>
f0116e43:	83 ec 04             	sub    $0x4,%esp
f0116e46:	68 38 ae 13 f0       	push   $0xf013ae38
f0116e4b:	6a 46                	push   $0x46
f0116e4d:	68 d1 ad 13 f0       	push   $0xf013add1
f0116e52:	e8 ae 93 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116e57:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116e5a:	8b 40 74             	mov    0x74(%eax),%eax
f0116e5d:	83 f8 14             	cmp    $0x14,%eax
f0116e60:	75 16                	jne    f0116e78 <test_priority_normal_and_higher+0x30d>
f0116e62:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116e65:	8b 40 74             	mov    0x74(%eax),%eax
f0116e68:	83 f8 0f             	cmp    $0xf,%eax
f0116e6b:	75 0b                	jne    f0116e78 <test_priority_normal_and_higher+0x30d>
f0116e6d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116e70:	8b 40 74             	mov    0x74(%eax),%eax
f0116e73:	83 f8 0a             	cmp    $0xa,%eax
f0116e76:	74 14                	je     f0116e8c <test_priority_normal_and_higher+0x321>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0116e78:	83 ec 04             	sub    $0x4,%esp
f0116e7b:	68 64 ae 13 f0       	push   $0xf013ae64
f0116e80:	6a 49                	push   $0x49
f0116e82:	68 d1 ad 13 f0       	push   $0xf013add1
f0116e87:	e8 79 93 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116e8c:	e8 c8 61 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0116e91:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116e94:	e8 4a cf fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0116e99:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f0116e9c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116e9f:	83 ec 08             	sub    $0x8,%esp
f0116ea2:	6a 04                	push   $0x4
f0116ea4:	50                   	push   %eax
f0116ea5:	e8 fa 45 ff ff       	call   f010b4a4 <set_program_priority>
f0116eaa:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f0116ead:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116eb0:	83 ec 08             	sub    $0x8,%esp
f0116eb3:	6a 04                	push   $0x4
f0116eb5:	50                   	push   %eax
f0116eb6:	e8 e9 45 ff ff       	call   f010b4a4 <set_program_priority>
f0116ebb:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116ebe:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116ec1:	83 ec 08             	sub    $0x8,%esp
f0116ec4:	6a 04                	push   $0x4
f0116ec6:	50                   	push   %eax
f0116ec7:	e8 d8 45 ff ff       	call   f010b4a4 <set_program_priority>
f0116ecc:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116ecf:	e8 0f cf fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0116ed4:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116ed7:	74 14                	je     f0116eed <test_priority_normal_and_higher+0x382>
f0116ed9:	83 ec 04             	sub    $0x4,%esp
f0116edc:	68 38 ae 13 f0       	push   $0xf013ae38
f0116ee1:	6a 53                	push   $0x53
f0116ee3:	68 d1 ad 13 f0       	push   $0xf013add1
f0116ee8:	e8 18 93 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0116eed:	e8 67 61 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0116ef2:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116ef5:	74 14                	je     f0116f0b <test_priority_normal_and_higher+0x3a0>
f0116ef7:	83 ec 04             	sub    $0x4,%esp
f0116efa:	68 b8 ae 13 f0       	push   $0xf013aeb8
f0116eff:	6a 54                	push   $0x54
f0116f01:	68 d1 ad 13 f0       	push   $0xf013add1
f0116f06:	e8 fa 92 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116f0b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116f0e:	8b 40 74             	mov    0x74(%eax),%eax
f0116f11:	83 f8 14             	cmp    $0x14,%eax
f0116f14:	75 16                	jne    f0116f2c <test_priority_normal_and_higher+0x3c1>
f0116f16:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116f19:	8b 40 74             	mov    0x74(%eax),%eax
f0116f1c:	83 f8 0f             	cmp    $0xf,%eax
f0116f1f:	75 0b                	jne    f0116f2c <test_priority_normal_and_higher+0x3c1>
f0116f21:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116f24:	8b 40 74             	mov    0x74(%eax),%eax
f0116f27:	83 f8 14             	cmp    $0x14,%eax
f0116f2a:	74 14                	je     f0116f40 <test_priority_normal_and_higher+0x3d5>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116f2c:	83 ec 04             	sub    $0x4,%esp
f0116f2f:	68 e8 ae 13 f0       	push   $0xf013aee8
f0116f34:	6a 57                	push   $0x57
f0116f36:	68 d1 ad 13 f0       	push   $0xf013add1
f0116f3b:	e8 c5 92 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116f40:	e8 14 61 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0116f45:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116f48:	e8 96 ce fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0116f4d:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f0116f50:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116f53:	83 ec 08             	sub    $0x8,%esp
f0116f56:	6a 04                	push   $0x4
f0116f58:	50                   	push   %eax
f0116f59:	e8 46 45 ff ff       	call   f010b4a4 <set_program_priority>
f0116f5e:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116f61:	e8 7d ce fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0116f66:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116f69:	74 14                	je     f0116f7f <test_priority_normal_and_higher+0x414>
f0116f6b:	83 ec 04             	sub    $0x4,%esp
f0116f6e:	68 38 ae 13 f0       	push   $0xf013ae38
f0116f73:	6a 5f                	push   $0x5f
f0116f75:	68 d1 ad 13 f0       	push   $0xf013add1
f0116f7a:	e8 86 92 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116f7f:	e8 d5 60 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0116f84:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116f87:	74 14                	je     f0116f9d <test_priority_normal_and_higher+0x432>
f0116f89:	83 ec 04             	sub    $0x4,%esp
f0116f8c:	68 38 ae 13 f0       	push   $0xf013ae38
f0116f91:	6a 60                	push   $0x60
f0116f93:	68 d1 ad 13 f0       	push   $0xf013add1
f0116f98:	e8 68 92 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116f9d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116fa0:	8b 40 74             	mov    0x74(%eax),%eax
f0116fa3:	83 f8 14             	cmp    $0x14,%eax
f0116fa6:	75 16                	jne    f0116fbe <test_priority_normal_and_higher+0x453>
f0116fa8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116fab:	8b 40 74             	mov    0x74(%eax),%eax
f0116fae:	83 f8 0f             	cmp    $0xf,%eax
f0116fb1:	75 0b                	jne    f0116fbe <test_priority_normal_and_higher+0x453>
f0116fb3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116fb6:	8b 40 74             	mov    0x74(%eax),%eax
f0116fb9:	83 f8 14             	cmp    $0x14,%eax
f0116fbc:	74 14                	je     f0116fd2 <test_priority_normal_and_higher+0x467>
			panic("The programs' working set size should be doubled only once\n");
f0116fbe:	83 ec 04             	sub    $0x4,%esp
f0116fc1:	68 30 af 13 f0       	push   $0xf013af30
f0116fc6:	6a 63                	push   $0x63
f0116fc8:	68 d1 ad 13 f0       	push   $0xf013add1
f0116fcd:	e8 33 92 fe ff       	call   f0100205 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116fd2:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f0116fd9:	eb 1b                	jmp    f0116ff6 <test_priority_normal_and_higher+0x48b>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0116fdb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116fde:	8b 48 78             	mov    0x78(%eax),%ecx
f0116fe1:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116fe4:	89 d0                	mov    %edx,%eax
f0116fe6:	01 c0                	add    %eax,%eax
f0116fe8:	01 d0                	add    %edx,%eax
f0116fea:	c1 e0 03             	shl    $0x3,%eax
f0116fed:	01 c8                	add    %ecx,%eax
f0116fef:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116ff3:	ff 45 d8             	incl   -0x28(%ebp)
f0116ff6:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f0116ffa:	7e df                	jle    f0116fdb <test_priority_normal_and_higher+0x470>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116ffc:	e8 58 60 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0117001:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117004:	e8 da cd fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0117009:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f011700c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011700f:	83 ec 08             	sub    $0x8,%esp
f0117012:	6a 04                	push   $0x4
f0117014:	50                   	push   %eax
f0117015:	e8 8a 44 ff ff       	call   f010b4a4 <set_program_priority>
f011701a:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011701d:	e8 c1 cd fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0117022:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117025:	74 14                	je     f011703b <test_priority_normal_and_higher+0x4d0>
f0117027:	83 ec 04             	sub    $0x4,%esp
f011702a:	68 38 ae 13 f0       	push   $0xf013ae38
f011702f:	6a 70                	push   $0x70
f0117031:	68 d1 ad 13 f0       	push   $0xf013add1
f0117036:	e8 ca 91 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011703b:	e8 19 60 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0117040:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117043:	74 14                	je     f0117059 <test_priority_normal_and_higher+0x4ee>
f0117045:	83 ec 04             	sub    $0x4,%esp
f0117048:	68 38 ae 13 f0       	push   $0xf013ae38
f011704d:	6a 71                	push   $0x71
f011704f:	68 d1 ad 13 f0       	push   $0xf013add1
f0117054:	e8 ac 91 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0117059:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011705c:	8b 40 74             	mov    0x74(%eax),%eax
f011705f:	83 f8 14             	cmp    $0x14,%eax
f0117062:	75 16                	jne    f011707a <test_priority_normal_and_higher+0x50f>
f0117064:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117067:	8b 40 74             	mov    0x74(%eax),%eax
f011706a:	83 f8 0f             	cmp    $0xf,%eax
f011706d:	75 0b                	jne    f011707a <test_priority_normal_and_higher+0x50f>
f011706f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117072:	8b 40 74             	mov    0x74(%eax),%eax
f0117075:	83 f8 14             	cmp    $0x14,%eax
f0117078:	74 14                	je     f011708e <test_priority_normal_and_higher+0x523>
			panic("The programs' working set size should be doubled only once\n");
f011707a:	83 ec 04             	sub    $0x4,%esp
f011707d:	68 30 af 13 f0       	push   $0xf013af30
f0117082:	6a 74                	push   $0x74
f0117084:	68 d1 ad 13 f0       	push   $0xf013add1
f0117089:	e8 77 91 fe ff       	call   f0100205 <_panic>

		for(int i = 10; i < 15; i++)
f011708e:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f0117095:	eb 1b                	jmp    f01170b2 <test_priority_normal_and_higher+0x547>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0117097:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011709a:	8b 48 78             	mov    0x78(%eax),%ecx
f011709d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01170a0:	89 d0                	mov    %edx,%eax
f01170a2:	01 c0                	add    %eax,%eax
f01170a4:	01 d0                	add    %edx,%eax
f01170a6:	c1 e0 03             	shl    $0x3,%eax
f01170a9:	01 c8                	add    %ecx,%eax
f01170ab:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f01170af:	ff 45 d4             	incl   -0x2c(%ebp)
f01170b2:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f01170b6:	7e df                	jle    f0117097 <test_priority_normal_and_higher+0x52c>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01170b8:	e8 9c 5f ff ff       	call   f010d059 <sys_calculate_free_frames>
f01170bd:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01170c0:	e8 1e cd fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01170c5:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01170c8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01170cb:	83 ec 08             	sub    $0x8,%esp
f01170ce:	6a 05                	push   $0x5
f01170d0:	50                   	push   %eax
f01170d1:	e8 ce 43 ff ff       	call   f010b4a4 <set_program_priority>
f01170d6:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f01170d9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01170dc:	83 ec 08             	sub    $0x8,%esp
f01170df:	6a 05                	push   $0x5
f01170e1:	50                   	push   %eax
f01170e2:	e8 bd 43 ff ff       	call   f010b4a4 <set_program_priority>
f01170e7:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01170ea:	e8 f4 cc fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01170ef:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01170f2:	74 14                	je     f0117108 <test_priority_normal_and_higher+0x59d>
f01170f4:	83 ec 04             	sub    $0x4,%esp
f01170f7:	68 38 ae 13 f0       	push   $0xf013ae38
f01170fc:	6a 7f                	push   $0x7f
f01170fe:	68 d1 ad 13 f0       	push   $0xf013add1
f0117103:	e8 fd 90 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117108:	e8 4c 5f ff ff       	call   f010d059 <sys_calculate_free_frames>
f011710d:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117110:	74 17                	je     f0117129 <test_priority_normal_and_higher+0x5be>
f0117112:	83 ec 04             	sub    $0x4,%esp
f0117115:	68 38 ae 13 f0       	push   $0xf013ae38
f011711a:	68 80 00 00 00       	push   $0x80
f011711f:	68 d1 ad 13 f0       	push   $0xf013add1
f0117124:	e8 dc 90 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117129:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011712c:	8b 40 74             	mov    0x74(%eax),%eax
f011712f:	83 f8 14             	cmp    $0x14,%eax
f0117132:	75 16                	jne    f011714a <test_priority_normal_and_higher+0x5df>
f0117134:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117137:	8b 40 74             	mov    0x74(%eax),%eax
f011713a:	83 f8 1e             	cmp    $0x1e,%eax
f011713d:	75 0b                	jne    f011714a <test_priority_normal_and_higher+0x5df>
f011713f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117142:	8b 40 74             	mov    0x74(%eax),%eax
f0117145:	83 f8 28             	cmp    $0x28,%eax
f0117148:	74 17                	je     f0117161 <test_priority_normal_and_higher+0x5f6>
			panic("The programs' working set size should be doubled if full\n");
f011714a:	83 ec 04             	sub    $0x4,%esp
f011714d:	68 6c af 13 f0       	push   $0xf013af6c
f0117152:	68 83 00 00 00       	push   $0x83
f0117157:	68 d1 ad 13 f0       	push   $0xf013add1
f011715c:	e8 a4 90 fe ff       	call   f0100205 <_panic>

		for(int i = 20; i < 40; i++)
f0117161:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f0117168:	eb 1b                	jmp    f0117185 <test_priority_normal_and_higher+0x61a>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f011716a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011716d:	8b 48 78             	mov    0x78(%eax),%ecx
f0117170:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117173:	89 d0                	mov    %edx,%eax
f0117175:	01 c0                	add    %eax,%eax
f0117177:	01 d0                	add    %edx,%eax
f0117179:	c1 e0 03             	shl    $0x3,%eax
f011717c:	01 c8                	add    %ecx,%eax
f011717e:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f0117182:	ff 45 d0             	incl   -0x30(%ebp)
f0117185:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f0117189:	7e df                	jle    f011716a <test_priority_normal_and_higher+0x5ff>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f011718b:	e8 c9 5e ff ff       	call   f010d059 <sys_calculate_free_frames>
f0117190:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117193:	e8 4b cc fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0117198:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f011719b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011719e:	83 ec 08             	sub    $0x8,%esp
f01171a1:	6a 05                	push   $0x5
f01171a3:	50                   	push   %eax
f01171a4:	e8 fb 42 ff ff       	call   f010b4a4 <set_program_priority>
f01171a9:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01171ac:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01171af:	83 ec 08             	sub    $0x8,%esp
f01171b2:	6a 04                	push   $0x4
f01171b4:	50                   	push   %eax
f01171b5:	e8 ea 42 ff ff       	call   f010b4a4 <set_program_priority>
f01171ba:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01171bd:	e8 21 cc fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01171c2:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01171c5:	74 17                	je     f01171de <test_priority_normal_and_higher+0x673>
f01171c7:	83 ec 04             	sub    $0x4,%esp
f01171ca:	68 38 ae 13 f0       	push   $0xf013ae38
f01171cf:	68 8e 00 00 00       	push   $0x8e
f01171d4:	68 d1 ad 13 f0       	push   $0xf013add1
f01171d9:	e8 27 90 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01171de:	e8 76 5e ff ff       	call   f010d059 <sys_calculate_free_frames>
f01171e3:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01171e6:	74 17                	je     f01171ff <test_priority_normal_and_higher+0x694>
f01171e8:	83 ec 04             	sub    $0x4,%esp
f01171eb:	68 38 ae 13 f0       	push   $0xf013ae38
f01171f0:	68 8f 00 00 00       	push   $0x8f
f01171f5:	68 d1 ad 13 f0       	push   $0xf013add1
f01171fa:	e8 06 90 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01171ff:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117202:	8b 40 74             	mov    0x74(%eax),%eax
f0117205:	83 f8 14             	cmp    $0x14,%eax
f0117208:	75 16                	jne    f0117220 <test_priority_normal_and_higher+0x6b5>
f011720a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011720d:	8b 40 74             	mov    0x74(%eax),%eax
f0117210:	83 f8 1e             	cmp    $0x1e,%eax
f0117213:	75 0b                	jne    f0117220 <test_priority_normal_and_higher+0x6b5>
f0117215:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117218:	8b 40 74             	mov    0x74(%eax),%eax
f011721b:	83 f8 28             	cmp    $0x28,%eax
f011721e:	74 17                	je     f0117237 <test_priority_normal_and_higher+0x6cc>
			panic("The programs' working set size should be doubled if full\n");
f0117220:	83 ec 04             	sub    $0x4,%esp
f0117223:	68 6c af 13 f0       	push   $0xf013af6c
f0117228:	68 92 00 00 00       	push   $0x92
f011722d:	68 d1 ad 13 f0       	push   $0xf013add1
f0117232:	e8 ce 8f fe ff       	call   f0100205 <_panic>

		for(int i = 15; i < 30; i++)
f0117237:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f011723e:	eb 1b                	jmp    f011725b <test_priority_normal_and_higher+0x6f0>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0117240:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117243:	8b 48 78             	mov    0x78(%eax),%ecx
f0117246:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117249:	89 d0                	mov    %edx,%eax
f011724b:	01 c0                	add    %eax,%eax
f011724d:	01 d0                	add    %edx,%eax
f011724f:	c1 e0 03             	shl    $0x3,%eax
f0117252:	01 c8                	add    %ecx,%eax
f0117254:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f0117258:	ff 45 cc             	incl   -0x34(%ebp)
f011725b:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f011725f:	7e df                	jle    f0117240 <test_priority_normal_and_higher+0x6d5>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117261:	e8 f3 5d ff ff       	call   f010d059 <sys_calculate_free_frames>
f0117266:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117269:	e8 75 cb fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011726e:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117271:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117274:	83 ec 08             	sub    $0x8,%esp
f0117277:	6a 05                	push   $0x5
f0117279:	50                   	push   %eax
f011727a:	e8 25 42 ff ff       	call   f010b4a4 <set_program_priority>
f011727f:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0117282:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117285:	83 ec 08             	sub    $0x8,%esp
f0117288:	6a 04                	push   $0x4
f011728a:	50                   	push   %eax
f011728b:	e8 14 42 ff ff       	call   f010b4a4 <set_program_priority>
f0117290:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117293:	e8 4b cb fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0117298:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011729b:	74 17                	je     f01172b4 <test_priority_normal_and_higher+0x749>
f011729d:	83 ec 04             	sub    $0x4,%esp
f01172a0:	68 38 ae 13 f0       	push   $0xf013ae38
f01172a5:	68 9d 00 00 00       	push   $0x9d
f01172aa:	68 d1 ad 13 f0       	push   $0xf013add1
f01172af:	e8 51 8f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01172b4:	e8 a0 5d ff ff       	call   f010d059 <sys_calculate_free_frames>
f01172b9:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01172bc:	74 17                	je     f01172d5 <test_priority_normal_and_higher+0x76a>
f01172be:	83 ec 04             	sub    $0x4,%esp
f01172c1:	68 38 ae 13 f0       	push   $0xf013ae38
f01172c6:	68 9e 00 00 00       	push   $0x9e
f01172cb:	68 d1 ad 13 f0       	push   $0xf013add1
f01172d0:	e8 30 8f fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f01172d5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01172d8:	8b 40 74             	mov    0x74(%eax),%eax
f01172db:	83 f8 14             	cmp    $0x14,%eax
f01172de:	75 16                	jne    f01172f6 <test_priority_normal_and_higher+0x78b>
f01172e0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01172e3:	8b 40 74             	mov    0x74(%eax),%eax
f01172e6:	83 f8 3c             	cmp    $0x3c,%eax
f01172e9:	75 0b                	jne    f01172f6 <test_priority_normal_and_higher+0x78b>
f01172eb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01172ee:	8b 40 74             	mov    0x74(%eax),%eax
f01172f1:	83 f8 28             	cmp    $0x28,%eax
f01172f4:	74 17                	je     f011730d <test_priority_normal_and_higher+0x7a2>
			panic("The programs' working set size should be doubled if full\n");
f01172f6:	83 ec 04             	sub    $0x4,%esp
f01172f9:	68 6c af 13 f0       	push   $0xf013af6c
f01172fe:	68 a1 00 00 00       	push   $0xa1
f0117303:	68 d1 ad 13 f0       	push   $0xf013add1
f0117308:	e8 f8 8e fe ff       	call   f0100205 <_panic>

		for(int i = 15; i < 60; i++)
f011730d:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0117314:	eb 1b                	jmp    f0117331 <test_priority_normal_and_higher+0x7c6>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f0117316:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117319:	8b 48 78             	mov    0x78(%eax),%ecx
f011731c:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011731f:	89 d0                	mov    %edx,%eax
f0117321:	01 c0                	add    %eax,%eax
f0117323:	01 d0                	add    %edx,%eax
f0117325:	c1 e0 03             	shl    $0x3,%eax
f0117328:	01 c8                	add    %ecx,%eax
f011732a:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f011732e:	ff 45 c8             	incl   -0x38(%ebp)
f0117331:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f0117335:	7e df                	jle    f0117316 <test_priority_normal_and_higher+0x7ab>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0117337:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f011733e:	eb 1b                	jmp    f011735b <test_priority_normal_and_higher+0x7f0>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f0117340:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117343:	8b 48 78             	mov    0x78(%eax),%ecx
f0117346:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117349:	89 d0                	mov    %edx,%eax
f011734b:	01 c0                	add    %eax,%eax
f011734d:	01 d0                	add    %edx,%eax
f011734f:	c1 e0 03             	shl    $0x3,%eax
f0117352:	01 c8                	add    %ecx,%eax
f0117354:	c6 40 04 01          	movb   $0x1,0x4(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0117358:	ff 45 c4             	incl   -0x3c(%ebp)
f011735b:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f011735f:	7e df                	jle    f0117340 <test_priority_normal_and_higher+0x7d5>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0117361:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0117368:	eb 7a                	jmp    f01173e4 <test_priority_normal_and_higher+0x879>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f011736a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011736d:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f0117374:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117377:	8b 58 78             	mov    0x78(%eax),%ebx
f011737a:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011737d:	89 d0                	mov    %edx,%eax
f011737f:	01 c0                	add    %eax,%eax
f0117381:	01 d0                	add    %edx,%eax
f0117383:	c1 e0 03             	shl    $0x3,%eax
f0117386:	01 d8                	add    %ebx,%eax
f0117388:	8b 00                	mov    (%eax),%eax
f011738a:	39 c1                	cmp    %eax,%ecx
f011738c:	74 17                	je     f01173a5 <test_priority_normal_and_higher+0x83a>
				panic("Working set should be moved properly to the new one");
f011738e:	83 ec 04             	sub    $0x4,%esp
f0117391:	68 a8 af 13 f0       	push   $0xf013afa8
f0117396:	68 af 00 00 00       	push   $0xaf
f011739b:	68 d1 ad 13 f0       	push   $0xf013add1
f01173a0:	e8 60 8e fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f01173a5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01173a8:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f01173af:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01173b2:	8b 58 78             	mov    0x78(%eax),%ebx
f01173b5:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01173b8:	89 d0                	mov    %edx,%eax
f01173ba:	01 c0                	add    %eax,%eax
f01173bc:	01 d0                	add    %edx,%eax
f01173be:	c1 e0 03             	shl    $0x3,%eax
f01173c1:	01 d8                	add    %ebx,%eax
f01173c3:	8b 40 08             	mov    0x8(%eax),%eax
f01173c6:	39 c1                	cmp    %eax,%ecx
f01173c8:	74 17                	je     f01173e1 <test_priority_normal_and_higher+0x876>
				panic("Working set should be moved properly to the new one");
f01173ca:	83 ec 04             	sub    $0x4,%esp
f01173cd:	68 a8 af 13 f0       	push   $0xf013afa8
f01173d2:	68 b2 00 00 00       	push   $0xb2
f01173d7:	68 d1 ad 13 f0       	push   $0xf013add1
f01173dc:	e8 24 8e fe ff       	call   f0100205 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f01173e1:	ff 45 c0             	incl   -0x40(%ebp)
f01173e4:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f01173e8:	7e 80                	jle    f011736a <test_priority_normal_and_higher+0x7ff>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01173ea:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f01173f1:	eb 7a                	jmp    f011746d <test_priority_normal_and_higher+0x902>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01173f3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01173f6:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f01173fd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117400:	8b 58 78             	mov    0x78(%eax),%ebx
f0117403:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0117406:	89 d0                	mov    %edx,%eax
f0117408:	01 c0                	add    %eax,%eax
f011740a:	01 d0                	add    %edx,%eax
f011740c:	c1 e0 03             	shl    $0x3,%eax
f011740f:	01 d8                	add    %ebx,%eax
f0117411:	8b 00                	mov    (%eax),%eax
f0117413:	39 c1                	cmp    %eax,%ecx
f0117415:	74 17                	je     f011742e <test_priority_normal_and_higher+0x8c3>
				panic("Working set should be moved properly to the new one");
f0117417:	83 ec 04             	sub    $0x4,%esp
f011741a:	68 a8 af 13 f0       	push   $0xf013afa8
f011741f:	68 b8 00 00 00       	push   $0xb8
f0117424:	68 d1 ad 13 f0       	push   $0xf013add1
f0117429:	e8 d7 8d fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f011742e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0117431:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f0117438:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011743b:	8b 58 78             	mov    0x78(%eax),%ebx
f011743e:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0117441:	89 d0                	mov    %edx,%eax
f0117443:	01 c0                	add    %eax,%eax
f0117445:	01 d0                	add    %edx,%eax
f0117447:	c1 e0 03             	shl    $0x3,%eax
f011744a:	01 d8                	add    %ebx,%eax
f011744c:	8b 40 08             	mov    0x8(%eax),%eax
f011744f:	39 c1                	cmp    %eax,%ecx
f0117451:	74 17                	je     f011746a <test_priority_normal_and_higher+0x8ff>
				panic("Working set should be moved properly to the new one");
f0117453:	83 ec 04             	sub    $0x4,%esp
f0117456:	68 a8 af 13 f0       	push   $0xf013afa8
f011745b:	68 bb 00 00 00       	push   $0xbb
f0117460:	68 d1 ad 13 f0       	push   $0xf013add1
f0117465:	e8 9b 8d fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f011746a:	ff 45 bc             	incl   -0x44(%ebp)
f011746d:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f0117471:	7e 80                	jle    f01173f3 <test_priority_normal_and_higher+0x888>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117473:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f011747a:	eb 7a                	jmp    f01174f6 <test_priority_normal_and_higher+0x98b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f011747c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011747f:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f0117486:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117489:	8b 58 78             	mov    0x78(%eax),%ebx
f011748c:	8b 55 b8             	mov    -0x48(%ebp),%edx
f011748f:	89 d0                	mov    %edx,%eax
f0117491:	01 c0                	add    %eax,%eax
f0117493:	01 d0                	add    %edx,%eax
f0117495:	c1 e0 03             	shl    $0x3,%eax
f0117498:	01 d8                	add    %ebx,%eax
f011749a:	8b 00                	mov    (%eax),%eax
f011749c:	39 c1                	cmp    %eax,%ecx
f011749e:	74 17                	je     f01174b7 <test_priority_normal_and_higher+0x94c>
				panic("Working set should be moved properly to the new one");
f01174a0:	83 ec 04             	sub    $0x4,%esp
f01174a3:	68 a8 af 13 f0       	push   $0xf013afa8
f01174a8:	68 c1 00 00 00       	push   $0xc1
f01174ad:	68 d1 ad 13 f0       	push   $0xf013add1
f01174b2:	e8 4e 8d fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01174b7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01174ba:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f01174c1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01174c4:	8b 58 78             	mov    0x78(%eax),%ebx
f01174c7:	8b 55 b8             	mov    -0x48(%ebp),%edx
f01174ca:	89 d0                	mov    %edx,%eax
f01174cc:	01 c0                	add    %eax,%eax
f01174ce:	01 d0                	add    %edx,%eax
f01174d0:	c1 e0 03             	shl    $0x3,%eax
f01174d3:	01 d8                	add    %ebx,%eax
f01174d5:	8b 40 08             	mov    0x8(%eax),%eax
f01174d8:	39 c1                	cmp    %eax,%ecx
f01174da:	74 17                	je     f01174f3 <test_priority_normal_and_higher+0x988>
				panic("Working set should be moved properly to the new one");
f01174dc:	83 ec 04             	sub    $0x4,%esp
f01174df:	68 a8 af 13 f0       	push   $0xf013afa8
f01174e4:	68 c4 00 00 00       	push   $0xc4
f01174e9:	68 d1 ad 13 f0       	push   $0xf013add1
f01174ee:	e8 12 8d fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01174f3:	ff 45 b8             	incl   -0x48(%ebp)
f01174f6:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f01174fa:	7e 80                	jle    f011747c <test_priority_normal_and_higher+0x911>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f01174fc:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f0117503:	75 6e 61 
f0117506:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f011750d:	6c 00 00 
f0117510:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0117516:	b9 17 00 00 00       	mov    $0x17,%ecx
f011751b:	b8 00 00 00 00       	mov    $0x0,%eax
f0117520:	89 d7                	mov    %edx,%edi
f0117522:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0117524:	83 ec 0c             	sub    $0xc,%esp
f0117527:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f011752d:	50                   	push   %eax
f011752e:	e8 3d 98 fe ff       	call   f0100d70 <execute_command>
f0117533:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f0117536:	eb 10                	jmp    f0117548 <test_priority_normal_and_higher+0x9dd>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f0117538:	83 ec 0c             	sub    $0xc,%esp
f011753b:	68 dc af 13 f0       	push   $0xf013afdc
f0117540:	e8 c9 97 fe ff       	call   f0100d0e <cprintf>
f0117545:	83 c4 10             	add    $0x10,%esp
	}
}
f0117548:	90                   	nop
f0117549:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011754c:	5b                   	pop    %ebx
f011754d:	5e                   	pop    %esi
f011754e:	5f                   	pop    %edi
f011754f:	5d                   	pop    %ebp
f0117550:	c3                   	ret    

f0117551 <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f0117551:	55                   	push   %ebp
f0117552:	89 e5                	mov    %esp,%ebp
f0117554:	57                   	push   %edi
f0117555:	56                   	push   %esi
f0117556:	53                   	push   %ebx
f0117557:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f011755d:	a0 22 3d 19 f0       	mov    0xf0193d22,%al
f0117562:	84 c0                	test   %al,%al
f0117564:	0f 84 be 09 00 00    	je     f0117f28 <test_priority_normal_and_lower+0x9d7>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f011756a:	c6 05 22 3d 19 f0 00 	movb   $0x0,0xf0193d22
		char command[100] = "load fos_add 20";
f0117571:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0117577:	bb 18 b0 13 f0       	mov    $0xf013b018,%ebx
f011757c:	ba 04 00 00 00       	mov    $0x4,%edx
f0117581:	89 c7                	mov    %eax,%edi
f0117583:	89 de                	mov    %ebx,%esi
f0117585:	89 d1                	mov    %edx,%ecx
f0117587:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0117589:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f011758f:	b9 15 00 00 00       	mov    $0x15,%ecx
f0117594:	b8 00 00 00 00       	mov    $0x0,%eax
f0117599:	89 d7                	mov    %edx,%edi
f011759b:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f011759d:	83 ec 0c             	sub    $0xc,%esp
f01175a0:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f01175a6:	50                   	push   %eax
f01175a7:	e8 c4 97 fe ff       	call   f0100d70 <execute_command>
f01175ac:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f01175af:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f01175b5:	bb d4 b2 13 f0       	mov    $0xf013b2d4,%ebx
f01175ba:	ba 0d 00 00 00       	mov    $0xd,%edx
f01175bf:	89 c7                	mov    %eax,%edi
f01175c1:	89 de                	mov    %ebx,%esi
f01175c3:	89 d1                	mov    %edx,%ecx
f01175c5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01175c7:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f01175cd:	b9 57 00 00 00       	mov    $0x57,%ecx
f01175d2:	b0 00                	mov    $0x0,%al
f01175d4:	89 d7                	mov    %edx,%edi
f01175d6:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f01175d8:	83 ec 0c             	sub    $0xc,%esp
f01175db:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f01175e1:	50                   	push   %eax
f01175e2:	e8 89 97 fe ff       	call   f0100d70 <execute_command>
f01175e7:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f01175ea:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f01175f0:	bb 38 b3 13 f0       	mov    $0xf013b338,%ebx
f01175f5:	ba 17 00 00 00       	mov    $0x17,%edx
f01175fa:	89 c7                	mov    %eax,%edi
f01175fc:	89 de                	mov    %ebx,%esi
f01175fe:	89 d1                	mov    %edx,%ecx
f0117600:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0117602:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f0117608:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f011760d:	b0 00                	mov    $0x0,%al
f011760f:	89 d7                	mov    %edx,%edi
f0117611:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0117613:	83 ec 0c             	sub    $0xc,%esp
f0117616:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f011761c:	50                   	push   %eax
f011761d:	e8 4e 97 fe ff       	call   f0100d70 <execute_command>
f0117622:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0117625:	83 ec 04             	sub    $0x4,%esp
f0117628:	6a 00                	push   $0x0
f011762a:	8d 45 b8             	lea    -0x48(%ebp),%eax
f011762d:	50                   	push   %eax
f011762e:	68 00 10 00 00       	push   $0x1000
f0117633:	e8 8e 29 ff ff       	call   f0109fc6 <envid2env>
f0117638:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f011763b:	83 ec 04             	sub    $0x4,%esp
f011763e:	6a 00                	push   $0x0
f0117640:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0117643:	50                   	push   %eax
f0117644:	68 01 10 00 00       	push   $0x1001
f0117649:	e8 78 29 ff ff       	call   f0109fc6 <envid2env>
f011764e:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0117651:	83 ec 04             	sub    $0x4,%esp
f0117654:	6a 00                	push   $0x0
f0117656:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0117659:	50                   	push   %eax
f011765a:	68 02 10 00 00       	push   $0x1002
f011765f:	e8 62 29 ff ff       	call   f0109fc6 <envid2env>
f0117664:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0117667:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011766a:	85 c0                	test   %eax,%eax
f011766c:	74 0e                	je     f011767c <test_priority_normal_and_lower+0x12b>
f011766e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117671:	85 c0                	test   %eax,%eax
f0117673:	74 07                	je     f011767c <test_priority_normal_and_lower+0x12b>
f0117675:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117678:	85 c0                	test   %eax,%eax
f011767a:	75 17                	jne    f0117693 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f011767c:	83 ec 04             	sub    $0x4,%esp
f011767f:	68 b8 ad 13 f0       	push   $0xf013adb8
f0117684:	68 eb 00 00 00       	push   $0xeb
f0117689:	68 d1 ad 13 f0       	push   $0xf013add1
f011768e:	e8 72 8b fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117693:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117696:	8b 40 74             	mov    0x74(%eax),%eax
f0117699:	83 f8 14             	cmp    $0x14,%eax
f011769c:	75 16                	jne    f01176b4 <test_priority_normal_and_lower+0x163>
f011769e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01176a1:	8b 40 74             	mov    0x74(%eax),%eax
f01176a4:	83 f8 1e             	cmp    $0x1e,%eax
f01176a7:	75 0b                	jne    f01176b4 <test_priority_normal_and_lower+0x163>
f01176a9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01176ac:	8b 40 74             	mov    0x74(%eax),%eax
f01176af:	83 f8 28             	cmp    $0x28,%eax
f01176b2:	74 17                	je     f01176cb <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f01176b4:	83 ec 04             	sub    $0x4,%esp
f01176b7:	68 ec ad 13 f0       	push   $0xf013adec
f01176bc:	68 ee 00 00 00       	push   $0xee
f01176c1:	68 d1 ad 13 f0       	push   $0xf013add1
f01176c6:	e8 3a 8b fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 20; i++)
f01176cb:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01176d2:	eb 44                	jmp    f0117718 <test_priority_normal_and_lower+0x1c7>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f01176d4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01176d7:	8b 48 78             	mov    0x78(%eax),%ecx
f01176da:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01176dd:	89 d0                	mov    %edx,%eax
f01176df:	01 c0                	add    %eax,%eax
f01176e1:	01 d0                	add    %edx,%eax
f01176e3:	c1 e0 03             	shl    $0x3,%eax
f01176e6:	01 c8                	add    %ecx,%eax
f01176e8:	8b 10                	mov    (%eax),%edx
f01176ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01176ed:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f01176f4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01176f7:	8b 48 78             	mov    0x78(%eax),%ecx
f01176fa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01176fd:	89 d0                	mov    %edx,%eax
f01176ff:	01 c0                	add    %eax,%eax
f0117701:	01 d0                	add    %edx,%eax
f0117703:	c1 e0 03             	shl    $0x3,%eax
f0117706:	01 c8                	add    %ecx,%eax
f0117708:	8b 50 08             	mov    0x8(%eax),%edx
f011770b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011770e:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0117715:	ff 45 e4             	incl   -0x1c(%ebp)
f0117718:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f011771c:	7e b6                	jle    f01176d4 <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f011771e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0117725:	eb 44                	jmp    f011776b <test_priority_normal_and_lower+0x21a>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0117727:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011772a:	8b 48 78             	mov    0x78(%eax),%ecx
f011772d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117730:	89 d0                	mov    %edx,%eax
f0117732:	01 c0                	add    %eax,%eax
f0117734:	01 d0                	add    %edx,%eax
f0117736:	c1 e0 03             	shl    $0x3,%eax
f0117739:	01 c8                	add    %ecx,%eax
f011773b:	8b 10                	mov    (%eax),%edx
f011773d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117740:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0117747:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011774a:	8b 48 78             	mov    0x78(%eax),%ecx
f011774d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117750:	89 d0                	mov    %edx,%eax
f0117752:	01 c0                	add    %eax,%eax
f0117754:	01 d0                	add    %edx,%eax
f0117756:	c1 e0 03             	shl    $0x3,%eax
f0117759:	01 c8                	add    %ecx,%eax
f011775b:	8b 50 08             	mov    0x8(%eax),%edx
f011775e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117761:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0117768:	ff 45 e0             	incl   -0x20(%ebp)
f011776b:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f011776f:	7e b6                	jle    f0117727 <test_priority_normal_and_lower+0x1d6>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0117771:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0117778:	eb 44                	jmp    f01177be <test_priority_normal_and_lower+0x26d>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f011777a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011777d:	8b 48 78             	mov    0x78(%eax),%ecx
f0117780:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117783:	89 d0                	mov    %edx,%eax
f0117785:	01 c0                	add    %eax,%eax
f0117787:	01 d0                	add    %edx,%eax
f0117789:	c1 e0 03             	shl    $0x3,%eax
f011778c:	01 c8                	add    %ecx,%eax
f011778e:	8b 10                	mov    (%eax),%edx
f0117790:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117793:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f011779a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011779d:	8b 48 78             	mov    0x78(%eax),%ecx
f01177a0:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01177a3:	89 d0                	mov    %edx,%eax
f01177a5:	01 c0                	add    %eax,%eax
f01177a7:	01 d0                	add    %edx,%eax
f01177a9:	c1 e0 03             	shl    $0x3,%eax
f01177ac:	01 c8                	add    %ecx,%eax
f01177ae:	8b 50 08             	mov    0x8(%eax),%edx
f01177b1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01177b4:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f01177bb:	ff 45 dc             	incl   -0x24(%ebp)
f01177be:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f01177c2:	7e b6                	jle    f011777a <test_priority_normal_and_lower+0x229>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f01177c4:	e8 90 58 ff ff       	call   f010d059 <sys_calculate_free_frames>
f01177c9:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01177cc:	e8 12 c6 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01177d1:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f01177d4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01177d7:	83 ec 08             	sub    $0x8,%esp
f01177da:	6a 03                	push   $0x3
f01177dc:	50                   	push   %eax
f01177dd:	e8 c2 3c ff ff       	call   f010b4a4 <set_program_priority>
f01177e2:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f01177e5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01177e8:	83 ec 08             	sub    $0x8,%esp
f01177eb:	6a 03                	push   $0x3
f01177ed:	50                   	push   %eax
f01177ee:	e8 b1 3c ff ff       	call   f010b4a4 <set_program_priority>
f01177f3:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f01177f6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01177f9:	83 ec 08             	sub    $0x8,%esp
f01177fc:	6a 03                	push   $0x3
f01177fe:	50                   	push   %eax
f01177ff:	e8 a0 3c ff ff       	call   f010b4a4 <set_program_priority>
f0117804:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117807:	e8 d7 c5 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011780c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011780f:	74 17                	je     f0117828 <test_priority_normal_and_lower+0x2d7>
f0117811:	83 ec 04             	sub    $0x4,%esp
f0117814:	68 38 ae 13 f0       	push   $0xf013ae38
f0117819:	68 0a 01 00 00       	push   $0x10a
f011781e:	68 d1 ad 13 f0       	push   $0xf013add1
f0117823:	e8 dd 89 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117828:	e8 2c 58 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011782d:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117830:	74 17                	je     f0117849 <test_priority_normal_and_lower+0x2f8>
f0117832:	83 ec 04             	sub    $0x4,%esp
f0117835:	68 38 ae 13 f0       	push   $0xf013ae38
f011783a:	68 0b 01 00 00       	push   $0x10b
f011783f:	68 d1 ad 13 f0       	push   $0xf013add1
f0117844:	e8 bc 89 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117849:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011784c:	8b 40 74             	mov    0x74(%eax),%eax
f011784f:	83 f8 14             	cmp    $0x14,%eax
f0117852:	75 16                	jne    f011786a <test_priority_normal_and_lower+0x319>
f0117854:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117857:	8b 40 74             	mov    0x74(%eax),%eax
f011785a:	83 f8 1e             	cmp    $0x1e,%eax
f011785d:	75 0b                	jne    f011786a <test_priority_normal_and_lower+0x319>
f011785f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117862:	8b 40 74             	mov    0x74(%eax),%eax
f0117865:	83 f8 28             	cmp    $0x28,%eax
f0117868:	74 17                	je     f0117881 <test_priority_normal_and_lower+0x330>
			panic("The programs' working set size should not change after setting priority to normal\n");
f011786a:	83 ec 04             	sub    $0x4,%esp
f011786d:	68 64 ae 13 f0       	push   $0xf013ae64
f0117872:	68 0e 01 00 00       	push   $0x10e
f0117877:	68 d1 ad 13 f0       	push   $0xf013add1
f011787c:	e8 84 89 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f0117881:	e8 d3 57 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0117886:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117889:	e8 55 c5 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011788e:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0117891:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117894:	83 ec 08             	sub    $0x8,%esp
f0117897:	6a 02                	push   $0x2
f0117899:	50                   	push   %eax
f011789a:	e8 05 3c ff ff       	call   f010b4a4 <set_program_priority>
f011789f:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f01178a2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01178a5:	83 ec 08             	sub    $0x8,%esp
f01178a8:	6a 02                	push   $0x2
f01178aa:	50                   	push   %eax
f01178ab:	e8 f4 3b ff ff       	call   f010b4a4 <set_program_priority>
f01178b0:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f01178b3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01178b6:	83 ec 08             	sub    $0x8,%esp
f01178b9:	6a 02                	push   $0x2
f01178bb:	50                   	push   %eax
f01178bc:	e8 e3 3b ff ff       	call   f010b4a4 <set_program_priority>
f01178c1:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01178c4:	e8 1a c5 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01178c9:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01178cc:	74 17                	je     f01178e5 <test_priority_normal_and_lower+0x394>
f01178ce:	83 ec 04             	sub    $0x4,%esp
f01178d1:	68 38 ae 13 f0       	push   $0xf013ae38
f01178d6:	68 18 01 00 00       	push   $0x118
f01178db:	68 d1 ad 13 f0       	push   $0xf013add1
f01178e0:	e8 20 89 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f01178e5:	e8 6f 57 ff ff       	call   f010d059 <sys_calculate_free_frames>
f01178ea:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01178ed:	74 21                	je     f0117910 <test_priority_normal_and_lower+0x3bf>
f01178ef:	e8 65 57 ff ff       	call   f010d059 <sys_calculate_free_frames>
f01178f4:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01178f7:	29 c2                	sub    %eax,%edx
f01178f9:	89 d0                	mov    %edx,%eax
f01178fb:	50                   	push   %eax
f01178fc:	68 b8 ae 13 f0       	push   $0xf013aeb8
f0117901:	68 19 01 00 00       	push   $0x119
f0117906:	68 d1 ad 13 f0       	push   $0xf013add1
f011790b:	e8 f5 88 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0117910:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117913:	8b 40 74             	mov    0x74(%eax),%eax
f0117916:	83 f8 0a             	cmp    $0xa,%eax
f0117919:	75 16                	jne    f0117931 <test_priority_normal_and_lower+0x3e0>
f011791b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011791e:	8b 40 74             	mov    0x74(%eax),%eax
f0117921:	83 f8 0f             	cmp    $0xf,%eax
f0117924:	75 0b                	jne    f0117931 <test_priority_normal_and_lower+0x3e0>
f0117926:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117929:	8b 40 74             	mov    0x74(%eax),%eax
f011792c:	83 f8 14             	cmp    $0x14,%eax
f011792f:	74 17                	je     f0117948 <test_priority_normal_and_lower+0x3f7>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117931:	83 ec 04             	sub    $0x4,%esp
f0117934:	68 e8 ae 13 f0       	push   $0xf013aee8
f0117939:	68 1c 01 00 00       	push   $0x11c
f011793e:	68 d1 ad 13 f0       	push   $0xf013add1
f0117943:	e8 bd 88 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f0117948:	e8 0c 57 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011794d:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117950:	e8 8e c4 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0117955:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0117958:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011795b:	83 ec 08             	sub    $0x8,%esp
f011795e:	6a 02                	push   $0x2
f0117960:	50                   	push   %eax
f0117961:	e8 3e 3b ff ff       	call   f010b4a4 <set_program_priority>
f0117966:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0117969:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011796c:	83 ec 08             	sub    $0x8,%esp
f011796f:	6a 02                	push   $0x2
f0117971:	50                   	push   %eax
f0117972:	e8 2d 3b ff ff       	call   f010b4a4 <set_program_priority>
f0117977:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f011797a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011797d:	83 ec 08             	sub    $0x8,%esp
f0117980:	6a 02                	push   $0x2
f0117982:	50                   	push   %eax
f0117983:	e8 1c 3b ff ff       	call   f010b4a4 <set_program_priority>
f0117988:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011798b:	e8 53 c4 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0117990:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117993:	74 17                	je     f01179ac <test_priority_normal_and_lower+0x45b>
f0117995:	83 ec 04             	sub    $0x4,%esp
f0117998:	68 38 ae 13 f0       	push   $0xf013ae38
f011799d:	68 26 01 00 00       	push   $0x126
f01179a2:	68 d1 ad 13 f0       	push   $0xf013add1
f01179a7:	e8 59 88 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f01179ac:	e8 a8 56 ff ff       	call   f010d059 <sys_calculate_free_frames>
f01179b1:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01179b4:	74 21                	je     f01179d7 <test_priority_normal_and_lower+0x486>
f01179b6:	e8 9e 56 ff ff       	call   f010d059 <sys_calculate_free_frames>
f01179bb:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01179be:	29 c2                	sub    %eax,%edx
f01179c0:	89 d0                	mov    %edx,%eax
f01179c2:	50                   	push   %eax
f01179c3:	68 b8 ae 13 f0       	push   $0xf013aeb8
f01179c8:	68 27 01 00 00       	push   $0x127
f01179cd:	68 d1 ad 13 f0       	push   $0xf013add1
f01179d2:	e8 2e 88 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f01179d7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01179da:	8b 40 74             	mov    0x74(%eax),%eax
f01179dd:	83 f8 0a             	cmp    $0xa,%eax
f01179e0:	75 16                	jne    f01179f8 <test_priority_normal_and_lower+0x4a7>
f01179e2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01179e5:	8b 40 74             	mov    0x74(%eax),%eax
f01179e8:	83 f8 0f             	cmp    $0xf,%eax
f01179eb:	75 0b                	jne    f01179f8 <test_priority_normal_and_lower+0x4a7>
f01179ed:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01179f0:	8b 40 74             	mov    0x74(%eax),%eax
f01179f3:	83 f8 0a             	cmp    $0xa,%eax
f01179f6:	74 17                	je     f0117a0f <test_priority_normal_and_lower+0x4be>
			panic("The programs' working set size should be doubled only if it is full\n");
f01179f8:	83 ec 04             	sub    $0x4,%esp
f01179fb:	68 e8 ae 13 f0       	push   $0xf013aee8
f0117a00:	68 2a 01 00 00       	push   $0x12a
f0117a05:	68 d1 ad 13 f0       	push   $0xf013add1
f0117a0a:	e8 f6 87 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 10; i++)
f0117a0f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0117a16:	eb 7a                	jmp    f0117a92 <test_priority_normal_and_lower+0x541>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0117a18:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117a1b:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0117a22:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117a25:	8b 58 78             	mov    0x78(%eax),%ebx
f0117a28:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117a2b:	89 d0                	mov    %edx,%eax
f0117a2d:	01 c0                	add    %eax,%eax
f0117a2f:	01 d0                	add    %edx,%eax
f0117a31:	c1 e0 03             	shl    $0x3,%eax
f0117a34:	01 d8                	add    %ebx,%eax
f0117a36:	8b 00                	mov    (%eax),%eax
f0117a38:	39 c1                	cmp    %eax,%ecx
f0117a3a:	74 17                	je     f0117a53 <test_priority_normal_and_lower+0x502>
				panic("Working set should be moved properly to the new one");
f0117a3c:	83 ec 04             	sub    $0x4,%esp
f0117a3f:	68 a8 af 13 f0       	push   $0xf013afa8
f0117a44:	68 2f 01 00 00       	push   $0x12f
f0117a49:	68 d1 ad 13 f0       	push   $0xf013add1
f0117a4e:	e8 b2 87 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117a53:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117a56:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0117a5d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117a60:	8b 58 78             	mov    0x78(%eax),%ebx
f0117a63:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117a66:	89 d0                	mov    %edx,%eax
f0117a68:	01 c0                	add    %eax,%eax
f0117a6a:	01 d0                	add    %edx,%eax
f0117a6c:	c1 e0 03             	shl    $0x3,%eax
f0117a6f:	01 d8                	add    %ebx,%eax
f0117a71:	8b 40 08             	mov    0x8(%eax),%eax
f0117a74:	39 c1                	cmp    %eax,%ecx
f0117a76:	74 17                	je     f0117a8f <test_priority_normal_and_lower+0x53e>
				panic("Working set should be moved properly to the new one");
f0117a78:	83 ec 04             	sub    $0x4,%esp
f0117a7b:	68 a8 af 13 f0       	push   $0xf013afa8
f0117a80:	68 32 01 00 00       	push   $0x132
f0117a85:	68 d1 ad 13 f0       	push   $0xf013add1
f0117a8a:	e8 76 87 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f0117a8f:	ff 45 d8             	incl   -0x28(%ebp)
f0117a92:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f0117a96:	7e 80                	jle    f0117a18 <test_priority_normal_and_lower+0x4c7>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117a98:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0117a9f:	eb 7a                	jmp    f0117b1b <test_priority_normal_and_lower+0x5ca>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0117aa1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117aa4:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0117aab:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117aae:	8b 58 78             	mov    0x78(%eax),%ebx
f0117ab1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117ab4:	89 d0                	mov    %edx,%eax
f0117ab6:	01 c0                	add    %eax,%eax
f0117ab8:	01 d0                	add    %edx,%eax
f0117aba:	c1 e0 03             	shl    $0x3,%eax
f0117abd:	01 d8                	add    %ebx,%eax
f0117abf:	8b 00                	mov    (%eax),%eax
f0117ac1:	39 c1                	cmp    %eax,%ecx
f0117ac3:	74 17                	je     f0117adc <test_priority_normal_and_lower+0x58b>
				panic("Working set should be moved properly to the new one");
f0117ac5:	83 ec 04             	sub    $0x4,%esp
f0117ac8:	68 a8 af 13 f0       	push   $0xf013afa8
f0117acd:	68 38 01 00 00       	push   $0x138
f0117ad2:	68 d1 ad 13 f0       	push   $0xf013add1
f0117ad7:	e8 29 87 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117adc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117adf:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117ae6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117ae9:	8b 58 78             	mov    0x78(%eax),%ebx
f0117aec:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117aef:	89 d0                	mov    %edx,%eax
f0117af1:	01 c0                	add    %eax,%eax
f0117af3:	01 d0                	add    %edx,%eax
f0117af5:	c1 e0 03             	shl    $0x3,%eax
f0117af8:	01 d8                	add    %ebx,%eax
f0117afa:	8b 40 08             	mov    0x8(%eax),%eax
f0117afd:	39 c1                	cmp    %eax,%ecx
f0117aff:	74 17                	je     f0117b18 <test_priority_normal_and_lower+0x5c7>
				panic("Working set should be moved properly to the new one");
f0117b01:	83 ec 04             	sub    $0x4,%esp
f0117b04:	68 a8 af 13 f0       	push   $0xf013afa8
f0117b09:	68 3b 01 00 00       	push   $0x13b
f0117b0e:	68 d1 ad 13 f0       	push   $0xf013add1
f0117b13:	e8 ed 86 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117b18:	ff 45 d4             	incl   -0x2c(%ebp)
f0117b1b:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0117b1f:	7e 80                	jle    f0117aa1 <test_priority_normal_and_lower+0x550>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117b21:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0117b28:	eb 7a                	jmp    f0117ba4 <test_priority_normal_and_lower+0x653>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117b2a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117b2d:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0117b34:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117b37:	8b 58 78             	mov    0x78(%eax),%ebx
f0117b3a:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117b3d:	89 d0                	mov    %edx,%eax
f0117b3f:	01 c0                	add    %eax,%eax
f0117b41:	01 d0                	add    %edx,%eax
f0117b43:	c1 e0 03             	shl    $0x3,%eax
f0117b46:	01 d8                	add    %ebx,%eax
f0117b48:	8b 00                	mov    (%eax),%eax
f0117b4a:	39 c1                	cmp    %eax,%ecx
f0117b4c:	74 17                	je     f0117b65 <test_priority_normal_and_lower+0x614>
				panic("Working set should be moved properly to the new one");
f0117b4e:	83 ec 04             	sub    $0x4,%esp
f0117b51:	68 a8 af 13 f0       	push   $0xf013afa8
f0117b56:	68 41 01 00 00       	push   $0x141
f0117b5b:	68 d1 ad 13 f0       	push   $0xf013add1
f0117b60:	e8 a0 86 fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117b65:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117b68:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0117b6f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117b72:	8b 58 78             	mov    0x78(%eax),%ebx
f0117b75:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117b78:	89 d0                	mov    %edx,%eax
f0117b7a:	01 c0                	add    %eax,%eax
f0117b7c:	01 d0                	add    %edx,%eax
f0117b7e:	c1 e0 03             	shl    $0x3,%eax
f0117b81:	01 d8                	add    %ebx,%eax
f0117b83:	8b 40 08             	mov    0x8(%eax),%eax
f0117b86:	39 c1                	cmp    %eax,%ecx
f0117b88:	74 17                	je     f0117ba1 <test_priority_normal_and_lower+0x650>
				panic("Working set should be moved properly to the new one");
f0117b8a:	83 ec 04             	sub    $0x4,%esp
f0117b8d:	68 a8 af 13 f0       	push   $0xf013afa8
f0117b92:	68 44 01 00 00       	push   $0x144
f0117b97:	68 d1 ad 13 f0       	push   $0xf013add1
f0117b9c:	e8 64 86 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117ba1:	ff 45 d0             	incl   -0x30(%ebp)
f0117ba4:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f0117ba8:	7e 80                	jle    f0117b2a <test_priority_normal_and_lower+0x5d9>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f0117baa:	e8 aa 54 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0117baf:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117bb2:	e8 2c c2 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0117bb7:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0117bba:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117bbd:	83 ec 08             	sub    $0x8,%esp
f0117bc0:	6a 01                	push   $0x1
f0117bc2:	50                   	push   %eax
f0117bc3:	e8 dc 38 ff ff       	call   f010b4a4 <set_program_priority>
f0117bc8:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0117bcb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117bce:	83 ec 08             	sub    $0x8,%esp
f0117bd1:	6a 01                	push   $0x1
f0117bd3:	50                   	push   %eax
f0117bd4:	e8 cb 38 ff ff       	call   f010b4a4 <set_program_priority>
f0117bd9:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0117bdc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117bdf:	83 ec 08             	sub    $0x8,%esp
f0117be2:	6a 01                	push   $0x1
f0117be4:	50                   	push   %eax
f0117be5:	e8 ba 38 ff ff       	call   f010b4a4 <set_program_priority>
f0117bea:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117bed:	e8 f1 c1 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0117bf2:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117bf5:	74 17                	je     f0117c0e <test_priority_normal_and_lower+0x6bd>
f0117bf7:	83 ec 04             	sub    $0x4,%esp
f0117bfa:	68 38 ae 13 f0       	push   $0xf013ae38
f0117bff:	68 4d 01 00 00       	push   $0x14d
f0117c04:	68 d1 ad 13 f0       	push   $0xf013add1
f0117c09:	e8 f7 85 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0117c0e:	e8 46 54 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0117c13:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0117c16:	83 f8 0d             	cmp    $0xd,%eax
f0117c19:	74 17                	je     f0117c32 <test_priority_normal_and_lower+0x6e1>
f0117c1b:	83 ec 04             	sub    $0x4,%esp
f0117c1e:	68 44 b1 13 f0       	push   $0xf013b144
f0117c23:	68 4e 01 00 00       	push   $0x14e
f0117c28:	68 d1 ad 13 f0       	push   $0xf013add1
f0117c2d:	e8 d3 85 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0117c32:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117c35:	8b 40 74             	mov    0x74(%eax),%eax
f0117c38:	83 f8 05             	cmp    $0x5,%eax
f0117c3b:	75 16                	jne    f0117c53 <test_priority_normal_and_lower+0x702>
f0117c3d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117c40:	8b 40 74             	mov    0x74(%eax),%eax
f0117c43:	83 f8 07             	cmp    $0x7,%eax
f0117c46:	75 0b                	jne    f0117c53 <test_priority_normal_and_lower+0x702>
f0117c48:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117c4b:	8b 40 74             	mov    0x74(%eax),%eax
f0117c4e:	83 f8 05             	cmp    $0x5,%eax
f0117c51:	74 17                	je     f0117c6a <test_priority_normal_and_lower+0x719>
			panic("The programs' working set size should be half\n");
f0117c53:	83 ec 04             	sub    $0x4,%esp
f0117c56:	68 8c b1 13 f0       	push   $0xf013b18c
f0117c5b:	68 51 01 00 00       	push   $0x151
f0117c60:	68 d1 ad 13 f0       	push   $0xf013add1
f0117c65:	e8 9b 85 fe ff       	call   f0100205 <_panic>


		freeFrames = sys_calculate_free_frames();
f0117c6a:	e8 ea 53 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0117c6f:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117c72:	e8 6c c1 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0117c77:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0117c7a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117c7d:	83 ec 08             	sub    $0x8,%esp
f0117c80:	6a 01                	push   $0x1
f0117c82:	50                   	push   %eax
f0117c83:	e8 1c 38 ff ff       	call   f010b4a4 <set_program_priority>
f0117c88:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117c8b:	e8 53 c1 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0117c90:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117c93:	74 17                	je     f0117cac <test_priority_normal_and_lower+0x75b>
f0117c95:	83 ec 04             	sub    $0x4,%esp
f0117c98:	68 38 ae 13 f0       	push   $0xf013ae38
f0117c9d:	68 57 01 00 00       	push   $0x157
f0117ca2:	68 d1 ad 13 f0       	push   $0xf013add1
f0117ca7:	e8 59 85 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f0117cac:	e8 a8 53 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0117cb1:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0117cb4:	83 f8 03             	cmp    $0x3,%eax
f0117cb7:	74 17                	je     f0117cd0 <test_priority_normal_and_lower+0x77f>
f0117cb9:	83 ec 04             	sub    $0x4,%esp
f0117cbc:	68 38 ae 13 f0       	push   $0xf013ae38
f0117cc1:	68 58 01 00 00       	push   $0x158
f0117cc6:	68 d1 ad 13 f0       	push   $0xf013add1
f0117ccb:	e8 35 85 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0117cd0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117cd3:	8b 40 74             	mov    0x74(%eax),%eax
f0117cd6:	83 f8 02             	cmp    $0x2,%eax
f0117cd9:	75 16                	jne    f0117cf1 <test_priority_normal_and_lower+0x7a0>
f0117cdb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117cde:	8b 40 74             	mov    0x74(%eax),%eax
f0117ce1:	83 f8 07             	cmp    $0x7,%eax
f0117ce4:	75 0b                	jne    f0117cf1 <test_priority_normal_and_lower+0x7a0>
f0117ce6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117ce9:	8b 40 74             	mov    0x74(%eax),%eax
f0117cec:	83 f8 05             	cmp    $0x5,%eax
f0117cef:	74 17                	je     f0117d08 <test_priority_normal_and_lower+0x7b7>
			panic("The programs' working set size should be doubled if full\n");
f0117cf1:	83 ec 04             	sub    $0x4,%esp
f0117cf4:	68 6c af 13 f0       	push   $0xf013af6c
f0117cf9:	68 5b 01 00 00       	push   $0x15b
f0117cfe:	68 d1 ad 13 f0       	push   $0xf013add1
f0117d03:	e8 fd 84 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 2; i++)
f0117d08:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0117d0f:	e9 80 00 00 00       	jmp    f0117d94 <test_priority_normal_and_lower+0x843>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0117d14:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117d17:	83 c0 08             	add    $0x8,%eax
f0117d1a:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0117d21:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117d24:	8b 58 78             	mov    0x78(%eax),%ebx
f0117d27:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117d2a:	89 d0                	mov    %edx,%eax
f0117d2c:	01 c0                	add    %eax,%eax
f0117d2e:	01 d0                	add    %edx,%eax
f0117d30:	c1 e0 03             	shl    $0x3,%eax
f0117d33:	01 d8                	add    %ebx,%eax
f0117d35:	8b 00                	mov    (%eax),%eax
f0117d37:	39 c1                	cmp    %eax,%ecx
f0117d39:	74 17                	je     f0117d52 <test_priority_normal_and_lower+0x801>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117d3b:	83 ec 04             	sub    $0x4,%esp
f0117d3e:	68 bc b1 13 f0       	push   $0xf013b1bc
f0117d43:	68 60 01 00 00       	push   $0x160
f0117d48:	68 d1 ad 13 f0       	push   $0xf013add1
f0117d4d:	e8 b3 84 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117d52:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117d55:	83 c0 08             	add    $0x8,%eax
f0117d58:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0117d5f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117d62:	8b 58 78             	mov    0x78(%eax),%ebx
f0117d65:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117d68:	89 d0                	mov    %edx,%eax
f0117d6a:	01 c0                	add    %eax,%eax
f0117d6c:	01 d0                	add    %edx,%eax
f0117d6e:	c1 e0 03             	shl    $0x3,%eax
f0117d71:	01 d8                	add    %ebx,%eax
f0117d73:	8b 40 08             	mov    0x8(%eax),%eax
f0117d76:	39 c1                	cmp    %eax,%ecx
f0117d78:	74 17                	je     f0117d91 <test_priority_normal_and_lower+0x840>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117d7a:	83 ec 04             	sub    $0x4,%esp
f0117d7d:	68 bc b1 13 f0       	push   $0xf013b1bc
f0117d82:	68 63 01 00 00       	push   $0x163
f0117d87:	68 d1 ad 13 f0       	push   $0xf013add1
f0117d8c:	e8 74 84 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f0117d91:	ff 45 cc             	incl   -0x34(%ebp)
f0117d94:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f0117d98:	0f 8e 76 ff ff ff    	jle    f0117d14 <test_priority_normal_and_lower+0x7c3>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0117d9e:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f0117da5:	e9 80 00 00 00       	jmp    f0117e2a <test_priority_normal_and_lower+0x8d9>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0117daa:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117dad:	83 c0 03             	add    $0x3,%eax
f0117db0:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0117db7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117dba:	8b 58 78             	mov    0x78(%eax),%ebx
f0117dbd:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117dc0:	89 d0                	mov    %edx,%eax
f0117dc2:	01 c0                	add    %eax,%eax
f0117dc4:	01 d0                	add    %edx,%eax
f0117dc6:	c1 e0 03             	shl    $0x3,%eax
f0117dc9:	01 d8                	add    %ebx,%eax
f0117dcb:	8b 00                	mov    (%eax),%eax
f0117dcd:	39 c1                	cmp    %eax,%ecx
f0117dcf:	74 17                	je     f0117de8 <test_priority_normal_and_lower+0x897>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f0117dd1:	ff 75 c8             	pushl  -0x38(%ebp)
f0117dd4:	68 28 b2 13 f0       	push   $0xf013b228
f0117dd9:	68 69 01 00 00       	push   $0x169
f0117dde:	68 d1 ad 13 f0       	push   $0xf013add1
f0117de3:	e8 1d 84 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117de8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117deb:	83 c0 03             	add    $0x3,%eax
f0117dee:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117df5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117df8:	8b 58 78             	mov    0x78(%eax),%ebx
f0117dfb:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117dfe:	89 d0                	mov    %edx,%eax
f0117e00:	01 c0                	add    %eax,%eax
f0117e02:	01 d0                	add    %edx,%eax
f0117e04:	c1 e0 03             	shl    $0x3,%eax
f0117e07:	01 d8                	add    %ebx,%eax
f0117e09:	8b 40 08             	mov    0x8(%eax),%eax
f0117e0c:	39 c1                	cmp    %eax,%ecx
f0117e0e:	74 17                	je     f0117e27 <test_priority_normal_and_lower+0x8d6>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117e10:	83 ec 04             	sub    $0x4,%esp
f0117e13:	68 bc b1 13 f0       	push   $0xf013b1bc
f0117e18:	68 6c 01 00 00       	push   $0x16c
f0117e1d:	68 d1 ad 13 f0       	push   $0xf013add1
f0117e22:	e8 de 83 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0117e27:	ff 45 c8             	incl   -0x38(%ebp)
f0117e2a:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f0117e2e:	0f 8e 76 ff ff ff    	jle    f0117daa <test_priority_normal_and_lower+0x859>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0117e34:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0117e3b:	e9 80 00 00 00       	jmp    f0117ec0 <test_priority_normal_and_lower+0x96f>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117e40:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117e43:	83 c0 05             	add    $0x5,%eax
f0117e46:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0117e4d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117e50:	8b 58 78             	mov    0x78(%eax),%ebx
f0117e53:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117e56:	89 d0                	mov    %edx,%eax
f0117e58:	01 c0                	add    %eax,%eax
f0117e5a:	01 d0                	add    %edx,%eax
f0117e5c:	c1 e0 03             	shl    $0x3,%eax
f0117e5f:	01 d8                	add    %ebx,%eax
f0117e61:	8b 00                	mov    (%eax),%eax
f0117e63:	39 c1                	cmp    %eax,%ecx
f0117e65:	74 17                	je     f0117e7e <test_priority_normal_and_lower+0x92d>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117e67:	83 ec 04             	sub    $0x4,%esp
f0117e6a:	68 bc b1 13 f0       	push   $0xf013b1bc
f0117e6f:	68 72 01 00 00       	push   $0x172
f0117e74:	68 d1 ad 13 f0       	push   $0xf013add1
f0117e79:	e8 87 83 fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117e7e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117e81:	83 c0 05             	add    $0x5,%eax
f0117e84:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0117e8b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117e8e:	8b 58 78             	mov    0x78(%eax),%ebx
f0117e91:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117e94:	89 d0                	mov    %edx,%eax
f0117e96:	01 c0                	add    %eax,%eax
f0117e98:	01 d0                	add    %edx,%eax
f0117e9a:	c1 e0 03             	shl    $0x3,%eax
f0117e9d:	01 d8                	add    %ebx,%eax
f0117e9f:	8b 40 08             	mov    0x8(%eax),%eax
f0117ea2:	39 c1                	cmp    %eax,%ecx
f0117ea4:	74 17                	je     f0117ebd <test_priority_normal_and_lower+0x96c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117ea6:	83 ec 04             	sub    $0x4,%esp
f0117ea9:	68 bc b1 13 f0       	push   $0xf013b1bc
f0117eae:	68 75 01 00 00       	push   $0x175
f0117eb3:	68 d1 ad 13 f0       	push   $0xf013add1
f0117eb8:	e8 48 83 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0117ebd:	ff 45 c4             	incl   -0x3c(%ebp)
f0117ec0:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f0117ec4:	0f 8e 76 ff ff ff    	jle    f0117e40 <test_priority_normal_and_lower+0x8ef>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f0117eca:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117ecd:	83 ec 08             	sub    $0x8,%esp
f0117ed0:	6a 05                	push   $0x5
f0117ed2:	50                   	push   %eax
f0117ed3:	e8 cc 35 ff ff       	call   f010b4a4 <set_program_priority>
f0117ed8:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f0117edb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117ede:	83 ec 08             	sub    $0x8,%esp
f0117ee1:	6a 05                	push   $0x5
f0117ee3:	50                   	push   %eax
f0117ee4:	e8 bb 35 ff ff       	call   f010b4a4 <set_program_priority>
f0117ee9:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f0117eec:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0117ef3:	75 6e 61 
f0117ef6:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0117efd:	6c 00 00 
f0117f00:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0117f06:	b9 17 00 00 00       	mov    $0x17,%ecx
f0117f0b:	b8 00 00 00 00       	mov    $0x0,%eax
f0117f10:	89 d7                	mov    %edx,%edi
f0117f12:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0117f14:	83 ec 0c             	sub    $0xc,%esp
f0117f17:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f0117f1d:	50                   	push   %eax
f0117f1e:	e8 4d 8e fe ff       	call   f0100d70 <execute_command>
f0117f23:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f0117f26:	eb 10                	jmp    f0117f38 <test_priority_normal_and_lower+0x9e7>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f0117f28:	83 ec 0c             	sub    $0xc,%esp
f0117f2b:	68 98 b2 13 f0       	push   $0xf013b298
f0117f30:	e8 d9 8d fe ff       	call   f0100d0e <cprintf>
f0117f35:	83 c4 10             	add    $0x10,%esp
	}
}
f0117f38:	90                   	nop
f0117f39:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0117f3c:	5b                   	pop    %ebx
f0117f3d:	5e                   	pop    %esi
f0117f3e:	5f                   	pop    %edi
f0117f3f:	5d                   	pop    %ebp
f0117f40:	c3                   	ret    

f0117f41 <isKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0117f41:	55                   	push   %ebp
f0117f42:	89 e5                	mov    %esp,%ebp
f0117f44:	a1 d8 b8 85 f0       	mov    0xf085b8d8,%eax
f0117f49:	83 f8 03             	cmp    $0x3,%eax
f0117f4c:	75 04                	jne    f0117f52 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0117f4e:	b0 01                	mov    $0x1,%al
f0117f50:	eb 02                	jmp    f0117f54 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0117f52:	b0 00                	mov    $0x0,%al
f0117f54:	5d                   	pop    %ebp
f0117f55:	c3                   	ret    

f0117f56 <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f0117f56:	55                   	push   %ebp
f0117f57:	89 e5                	mov    %esp,%ebp
f0117f59:	57                   	push   %edi
f0117f5a:	53                   	push   %ebx
f0117f5b:	81 ec c0 01 00 00    	sub    $0x1c0,%esp
	cprintf("==============================================\n");
f0117f61:	83 ec 0c             	sub    $0xc,%esp
f0117f64:	68 9c b3 13 f0       	push   $0xf013b39c
f0117f69:	e8 a0 8d fe ff       	call   f0100d0e <cprintf>
f0117f6e:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0117f71:	83 ec 0c             	sub    $0xc,%esp
f0117f74:	68 cc b3 13 f0       	push   $0xf013b3cc
f0117f79:	e8 90 8d fe ff       	call   f0100d0e <cprintf>
f0117f7e:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0117f81:	83 ec 0c             	sub    $0xc,%esp
f0117f84:	68 9c b3 13 f0       	push   $0xf013b39c
f0117f89:	e8 80 8d fe ff       	call   f0100d0e <cprintf>
f0117f8e:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0117f91:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0117f95:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0117f99:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0117f9f:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0117fa5:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0117fac:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0117fb3:	e8 a1 50 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0117fb8:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f0117fbb:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f0117fc1:	b9 14 00 00 00       	mov    $0x14,%ecx
f0117fc6:	b8 00 00 00 00       	mov    $0x0,%eax
f0117fcb:	89 d7                	mov    %edx,%edi
f0117fcd:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f0117fcf:	e8 85 50 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0117fd4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0117fd7:	e8 07 be fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0117fdc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f0117fdf:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0117fe6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117fe9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117fee:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0117ff1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117ff4:	ba 00 00 00 00       	mov    $0x0,%edx
f0117ff9:	f7 75 d4             	divl   -0x2c(%ebp)
f0117ffc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117fff:	29 d0                	sub    %edx,%eax
f0118001:	89 c1                	mov    %eax,%ecx
f0118003:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011800a:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011800f:	0f b6 d0             	movzbl %al,%edx
f0118012:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118015:	01 d0                	add    %edx,%eax
f0118017:	48                   	dec    %eax
f0118018:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011801b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011801e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118023:	f7 75 cc             	divl   -0x34(%ebp)
f0118026:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0118029:	29 d0                	sub    %edx,%eax
f011802b:	01 c1                	add    %eax,%ecx
f011802d:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0118034:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0118039:	0f b6 c0             	movzbl %al,%eax
f011803c:	c1 e0 04             	shl    $0x4,%eax
f011803f:	89 c2                	mov    %eax,%edx
f0118041:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118044:	01 d0                	add    %edx,%eax
f0118046:	48                   	dec    %eax
f0118047:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011804a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011804d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118052:	f7 75 c4             	divl   -0x3c(%ebp)
f0118055:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0118058:	29 d0                	sub    %edx,%eax
f011805a:	01 c8                	add    %ecx,%eax
f011805c:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f0118061:	29 c2                	sub    %eax,%edx
f0118063:	89 d0                	mov    %edx,%eax
f0118065:	89 45 bc             	mov    %eax,-0x44(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f0118068:	83 ec 0c             	sub    $0xc,%esp
f011806b:	ff 75 bc             	pushl  -0x44(%ebp)
f011806e:	e8 bd f9 fe ff       	call   f0107a30 <kmalloc>
f0118073:	83 c4 10             	add    $0x10,%esp
f0118076:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f011807c:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0118082:	85 c0                	test   %eax,%eax
f0118084:	74 14                	je     f011809a <test_kmalloc+0x144>
f0118086:	83 ec 04             	sub    $0x4,%esp
f0118089:	68 28 b4 13 f0       	push   $0xf013b428
f011808e:	6a 40                	push   $0x40
f0118090:	68 5a b4 13 f0       	push   $0xf013b45a
f0118095:	e8 6b 81 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011809a:	e8 44 bd fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011809f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01180a2:	74 14                	je     f01180b8 <test_kmalloc+0x162>
f01180a4:	83 ec 04             	sub    $0x4,%esp
f01180a7:	68 74 b4 13 f0       	push   $0xf013b474
f01180ac:	6a 41                	push   $0x41
f01180ae:	68 5a b4 13 f0       	push   $0xf013b45a
f01180b3:	e8 4d 81 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f01180b8:	e8 9c 4f ff ff       	call   f010d059 <sys_calculate_free_frames>
f01180bd:	89 c2                	mov    %eax,%edx
f01180bf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01180c2:	39 c2                	cmp    %eax,%edx
f01180c4:	74 14                	je     f01180da <test_kmalloc+0x184>
f01180c6:	83 ec 04             	sub    $0x4,%esp
f01180c9:	68 dc b4 13 f0       	push   $0xf013b4dc
f01180ce:	6a 42                	push   $0x42
f01180d0:	68 5a b4 13 f0       	push   $0xf013b45a
f01180d5:	e8 2b 81 fe ff       	call   f0100205 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f01180da:	83 ec 0c             	sub    $0xc,%esp
f01180dd:	68 1c b5 13 f0       	push   $0xf013b51c
f01180e2:	e8 27 8c fe ff       	call   f0100d0e <cprintf>
f01180e7:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01180ea:	e8 6a 4f ff ff       	call   f010d059 <sys_calculate_free_frames>
f01180ef:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01180f2:	e8 ec bc fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01180f7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01180fa:	83 ec 0c             	sub    $0xc,%esp
f01180fd:	68 00 fc 1f 00       	push   $0x1ffc00
f0118102:	e8 29 f9 fe ff       	call   f0107a30 <kmalloc>
f0118107:	83 c4 10             	add    $0x10,%esp
f011810a:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118110:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0118116:	89 c1                	mov    %eax,%ecx
f0118118:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011811f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118122:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118127:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011812a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011812d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118132:	f7 75 b8             	divl   -0x48(%ebp)
f0118135:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118138:	29 d0                	sub    %edx,%eax
f011813a:	89 c3                	mov    %eax,%ebx
f011813c:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0118143:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0118148:	0f b6 d0             	movzbl %al,%edx
f011814b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011814e:	01 d0                	add    %edx,%eax
f0118150:	48                   	dec    %eax
f0118151:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0118154:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118157:	ba 00 00 00 00       	mov    $0x0,%edx
f011815c:	f7 75 b0             	divl   -0x50(%ebp)
f011815f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118162:	29 d0                	sub    %edx,%eax
f0118164:	01 c3                	add    %eax,%ebx
f0118166:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011816d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0118172:	0f b6 c0             	movzbl %al,%eax
f0118175:	c1 e0 04             	shl    $0x4,%eax
f0118178:	89 c2                	mov    %eax,%edx
f011817a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011817d:	01 d0                	add    %edx,%eax
f011817f:	48                   	dec    %eax
f0118180:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0118183:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118186:	ba 00 00 00 00       	mov    $0x0,%edx
f011818b:	f7 75 a8             	divl   -0x58(%ebp)
f011818e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118191:	29 d0                	sub    %edx,%eax
f0118193:	01 d8                	add    %ebx,%eax
f0118195:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011819a:	39 c1                	cmp    %eax,%ecx
f011819c:	74 14                	je     f01181b2 <test_kmalloc+0x25c>
f011819e:	83 ec 04             	sub    $0x4,%esp
f01181a1:	68 40 b5 13 f0       	push   $0xf013b540
f01181a6:	6a 49                	push   $0x49
f01181a8:	68 5a b4 13 f0       	push   $0xf013b45a
f01181ad:	e8 53 80 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01181b2:	e8 2c bc fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01181b7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01181ba:	74 14                	je     f01181d0 <test_kmalloc+0x27a>
f01181bc:	83 ec 04             	sub    $0x4,%esp
f01181bf:	68 74 b4 13 f0       	push   $0xf013b474
f01181c4:	6a 4a                	push   $0x4a
f01181c6:	68 5a b4 13 f0       	push   $0xf013b45a
f01181cb:	e8 35 80 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01181d0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01181d3:	e8 81 4e ff ff       	call   f010d059 <sys_calculate_free_frames>
f01181d8:	29 c3                	sub    %eax,%ebx
f01181da:	89 d8                	mov    %ebx,%eax
f01181dc:	3d 00 02 00 00       	cmp    $0x200,%eax
f01181e1:	74 14                	je     f01181f7 <test_kmalloc+0x2a1>
f01181e3:	83 ec 04             	sub    $0x4,%esp
f01181e6:	68 dc b4 13 f0       	push   $0xf013b4dc
f01181eb:	6a 4b                	push   $0x4b
f01181ed:	68 5a b4 13 f0       	push   $0xf013b45a
f01181f2:	e8 0e 80 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01181f7:	e8 5d 4e ff ff       	call   f010d059 <sys_calculate_free_frames>
f01181fc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01181ff:	e8 df bb fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0118204:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0118207:	83 ec 0c             	sub    $0xc,%esp
f011820a:	68 00 fc 1f 00       	push   $0x1ffc00
f011820f:	e8 1c f8 fe ff       	call   f0107a30 <kmalloc>
f0118214:	83 c4 10             	add    $0x10,%esp
f0118217:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011821d:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0118223:	89 c1                	mov    %eax,%ecx
f0118225:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011822c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011822f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118234:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0118237:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011823a:	ba 00 00 00 00       	mov    $0x0,%edx
f011823f:	f7 75 a0             	divl   -0x60(%ebp)
f0118242:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118245:	29 d0                	sub    %edx,%eax
f0118247:	89 c3                	mov    %eax,%ebx
f0118249:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0118250:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0118255:	0f b6 d0             	movzbl %al,%edx
f0118258:	8b 45 98             	mov    -0x68(%ebp),%eax
f011825b:	01 d0                	add    %edx,%eax
f011825d:	48                   	dec    %eax
f011825e:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0118261:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118264:	ba 00 00 00 00       	mov    $0x0,%edx
f0118269:	f7 75 98             	divl   -0x68(%ebp)
f011826c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011826f:	29 d0                	sub    %edx,%eax
f0118271:	01 c3                	add    %eax,%ebx
f0118273:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f011827a:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011827f:	0f b6 c0             	movzbl %al,%eax
f0118282:	c1 e0 04             	shl    $0x4,%eax
f0118285:	89 c2                	mov    %eax,%edx
f0118287:	8b 45 90             	mov    -0x70(%ebp),%eax
f011828a:	01 d0                	add    %edx,%eax
f011828c:	48                   	dec    %eax
f011828d:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0118290:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118293:	ba 00 00 00 00       	mov    $0x0,%edx
f0118298:	f7 75 90             	divl   -0x70(%ebp)
f011829b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011829e:	29 d0                	sub    %edx,%eax
f01182a0:	01 d8                	add    %ebx,%eax
f01182a2:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01182a7:	39 c1                	cmp    %eax,%ecx
f01182a9:	74 14                	je     f01182bf <test_kmalloc+0x369>
f01182ab:	83 ec 04             	sub    $0x4,%esp
f01182ae:	68 40 b5 13 f0       	push   $0xf013b540
f01182b3:	6a 51                	push   $0x51
f01182b5:	68 5a b4 13 f0       	push   $0xf013b45a
f01182ba:	e8 46 7f fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01182bf:	e8 1f bb fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01182c4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01182c7:	74 14                	je     f01182dd <test_kmalloc+0x387>
f01182c9:	83 ec 04             	sub    $0x4,%esp
f01182cc:	68 74 b4 13 f0       	push   $0xf013b474
f01182d1:	6a 52                	push   $0x52
f01182d3:	68 5a b4 13 f0       	push   $0xf013b45a
f01182d8:	e8 28 7f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01182dd:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01182e0:	e8 74 4d ff ff       	call   f010d059 <sys_calculate_free_frames>
f01182e5:	29 c3                	sub    %eax,%ebx
f01182e7:	89 d8                	mov    %ebx,%eax
f01182e9:	3d 00 02 00 00       	cmp    $0x200,%eax
f01182ee:	74 14                	je     f0118304 <test_kmalloc+0x3ae>
f01182f0:	83 ec 04             	sub    $0x4,%esp
f01182f3:	68 dc b4 13 f0       	push   $0xf013b4dc
f01182f8:	6a 53                	push   $0x53
f01182fa:	68 5a b4 13 f0       	push   $0xf013b45a
f01182ff:	e8 01 7f fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0118304:	e8 50 4d ff ff       	call   f010d059 <sys_calculate_free_frames>
f0118309:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011830c:	e8 d2 ba fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0118311:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0118314:	83 ec 0c             	sub    $0xc,%esp
f0118317:	68 00 08 00 00       	push   $0x800
f011831c:	e8 0f f7 fe ff       	call   f0107a30 <kmalloc>
f0118321:	83 c4 10             	add    $0x10,%esp
f0118324:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011832a:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0118330:	89 c1                	mov    %eax,%ecx
f0118332:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0118339:	8b 45 88             	mov    -0x78(%ebp),%eax
f011833c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118341:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0118344:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118347:	ba 00 00 00 00       	mov    $0x0,%edx
f011834c:	f7 75 88             	divl   -0x78(%ebp)
f011834f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118352:	29 d0                	sub    %edx,%eax
f0118354:	89 c3                	mov    %eax,%ebx
f0118356:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f011835d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0118362:	0f b6 d0             	movzbl %al,%edx
f0118365:	8b 45 80             	mov    -0x80(%ebp),%eax
f0118368:	01 d0                	add    %edx,%eax
f011836a:	48                   	dec    %eax
f011836b:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0118371:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118377:	ba 00 00 00 00       	mov    $0x0,%edx
f011837c:	f7 75 80             	divl   -0x80(%ebp)
f011837f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118385:	29 d0                	sub    %edx,%eax
f0118387:	01 c3                	add    %eax,%ebx
f0118389:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0118390:	10 00 00 
f0118393:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0118398:	0f b6 c0             	movzbl %al,%eax
f011839b:	c1 e0 04             	shl    $0x4,%eax
f011839e:	89 c2                	mov    %eax,%edx
f01183a0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01183a6:	01 d0                	add    %edx,%eax
f01183a8:	48                   	dec    %eax
f01183a9:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01183af:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01183b5:	ba 00 00 00 00       	mov    $0x0,%edx
f01183ba:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01183c0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01183c6:	29 d0                	sub    %edx,%eax
f01183c8:	01 d8                	add    %ebx,%eax
f01183ca:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01183cf:	39 c1                	cmp    %eax,%ecx
f01183d1:	74 14                	je     f01183e7 <test_kmalloc+0x491>
f01183d3:	83 ec 04             	sub    $0x4,%esp
f01183d6:	68 40 b5 13 f0       	push   $0xf013b540
f01183db:	6a 59                	push   $0x59
f01183dd:	68 5a b4 13 f0       	push   $0xf013b45a
f01183e2:	e8 1e 7e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01183e7:	e8 f7 b9 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01183ec:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01183ef:	74 14                	je     f0118405 <test_kmalloc+0x4af>
f01183f1:	83 ec 04             	sub    $0x4,%esp
f01183f4:	68 74 b4 13 f0       	push   $0xf013b474
f01183f9:	6a 5a                	push   $0x5a
f01183fb:	68 5a b4 13 f0       	push   $0xf013b45a
f0118400:	e8 00 7e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118405:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118408:	e8 4c 4c ff ff       	call   f010d059 <sys_calculate_free_frames>
f011840d:	29 c3                	sub    %eax,%ebx
f011840f:	89 d8                	mov    %ebx,%eax
f0118411:	83 f8 01             	cmp    $0x1,%eax
f0118414:	74 14                	je     f011842a <test_kmalloc+0x4d4>
f0118416:	83 ec 04             	sub    $0x4,%esp
f0118419:	68 dc b4 13 f0       	push   $0xf013b4dc
f011841e:	6a 5b                	push   $0x5b
f0118420:	68 5a b4 13 f0       	push   $0xf013b45a
f0118425:	e8 db 7d fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011842a:	e8 2a 4c ff ff       	call   f010d059 <sys_calculate_free_frames>
f011842f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118432:	e8 ac b9 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0118437:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011843a:	83 ec 0c             	sub    $0xc,%esp
f011843d:	68 00 08 00 00       	push   $0x800
f0118442:	e8 e9 f5 fe ff       	call   f0107a30 <kmalloc>
f0118447:	83 c4 10             	add    $0x10,%esp
f011844a:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118450:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0118456:	89 c1                	mov    %eax,%ecx
f0118458:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f011845f:	10 00 00 
f0118462:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0118468:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011846d:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0118473:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118479:	ba 00 00 00 00       	mov    $0x0,%edx
f011847e:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0118484:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011848a:	29 d0                	sub    %edx,%eax
f011848c:	89 c3                	mov    %eax,%ebx
f011848e:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0118495:	10 00 00 
f0118498:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011849d:	0f b6 d0             	movzbl %al,%edx
f01184a0:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01184a6:	01 d0                	add    %edx,%eax
f01184a8:	48                   	dec    %eax
f01184a9:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01184af:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01184b5:	ba 00 00 00 00       	mov    $0x0,%edx
f01184ba:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01184c0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01184c6:	29 d0                	sub    %edx,%eax
f01184c8:	01 c3                	add    %eax,%ebx
f01184ca:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01184d1:	10 00 00 
f01184d4:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01184d9:	0f b6 c0             	movzbl %al,%eax
f01184dc:	c1 e0 04             	shl    $0x4,%eax
f01184df:	89 c2                	mov    %eax,%edx
f01184e1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01184e7:	01 d0                	add    %edx,%eax
f01184e9:	48                   	dec    %eax
f01184ea:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01184f0:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01184f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01184fb:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0118501:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118507:	29 d0                	sub    %edx,%eax
f0118509:	01 d8                	add    %ebx,%eax
f011850b:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0118510:	39 c1                	cmp    %eax,%ecx
f0118512:	74 14                	je     f0118528 <test_kmalloc+0x5d2>
f0118514:	83 ec 04             	sub    $0x4,%esp
f0118517:	68 40 b5 13 f0       	push   $0xf013b540
f011851c:	6a 61                	push   $0x61
f011851e:	68 5a b4 13 f0       	push   $0xf013b45a
f0118523:	e8 dd 7c fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118528:	e8 b6 b8 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011852d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118530:	74 14                	je     f0118546 <test_kmalloc+0x5f0>
f0118532:	83 ec 04             	sub    $0x4,%esp
f0118535:	68 74 b4 13 f0       	push   $0xf013b474
f011853a:	6a 62                	push   $0x62
f011853c:	68 5a b4 13 f0       	push   $0xf013b45a
f0118541:	e8 bf 7c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118546:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118549:	e8 0b 4b ff ff       	call   f010d059 <sys_calculate_free_frames>
f011854e:	29 c3                	sub    %eax,%ebx
f0118550:	89 d8                	mov    %ebx,%eax
f0118552:	83 f8 01             	cmp    $0x1,%eax
f0118555:	74 14                	je     f011856b <test_kmalloc+0x615>
f0118557:	83 ec 04             	sub    $0x4,%esp
f011855a:	68 dc b4 13 f0       	push   $0xf013b4dc
f011855f:	6a 63                	push   $0x63
f0118561:	68 5a b4 13 f0       	push   $0xf013b45a
f0118566:	e8 9a 7c fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011856b:	e8 e9 4a ff ff       	call   f010d059 <sys_calculate_free_frames>
f0118570:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118573:	e8 6b b8 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0118578:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011857b:	83 ec 0c             	sub    $0xc,%esp
f011857e:	68 00 1c 00 00       	push   $0x1c00
f0118583:	e8 a8 f4 fe ff       	call   f0107a30 <kmalloc>
f0118588:	83 c4 10             	add    $0x10,%esp
f011858b:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118591:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0118597:	89 c1                	mov    %eax,%ecx
f0118599:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01185a0:	10 00 00 
f01185a3:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01185a9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01185ae:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01185b4:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01185ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01185bf:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01185c5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01185cb:	29 d0                	sub    %edx,%eax
f01185cd:	89 c3                	mov    %eax,%ebx
f01185cf:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01185d6:	10 00 00 
f01185d9:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01185de:	0f b6 d0             	movzbl %al,%edx
f01185e1:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01185e7:	01 d0                	add    %edx,%eax
f01185e9:	48                   	dec    %eax
f01185ea:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01185f0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01185f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01185fb:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0118601:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118607:	29 d0                	sub    %edx,%eax
f0118609:	01 c3                	add    %eax,%ebx
f011860b:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0118612:	10 00 00 
f0118615:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011861a:	0f b6 c0             	movzbl %al,%eax
f011861d:	c1 e0 04             	shl    $0x4,%eax
f0118620:	89 c2                	mov    %eax,%edx
f0118622:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0118628:	01 d0                	add    %edx,%eax
f011862a:	48                   	dec    %eax
f011862b:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0118631:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118637:	ba 00 00 00 00       	mov    $0x0,%edx
f011863c:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0118642:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118648:	29 d0                	sub    %edx,%eax
f011864a:	01 d8                	add    %ebx,%eax
f011864c:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0118651:	39 c1                	cmp    %eax,%ecx
f0118653:	74 14                	je     f0118669 <test_kmalloc+0x713>
f0118655:	83 ec 04             	sub    $0x4,%esp
f0118658:	68 40 b5 13 f0       	push   $0xf013b540
f011865d:	6a 69                	push   $0x69
f011865f:	68 5a b4 13 f0       	push   $0xf013b45a
f0118664:	e8 9c 7b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118669:	e8 75 b7 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011866e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118671:	74 14                	je     f0118687 <test_kmalloc+0x731>
f0118673:	83 ec 04             	sub    $0x4,%esp
f0118676:	68 74 b4 13 f0       	push   $0xf013b474
f011867b:	6a 6a                	push   $0x6a
f011867d:	68 5a b4 13 f0       	push   $0xf013b45a
f0118682:	e8 7e 7b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118687:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011868a:	e8 ca 49 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011868f:	29 c3                	sub    %eax,%ebx
f0118691:	89 d8                	mov    %ebx,%eax
f0118693:	83 f8 02             	cmp    $0x2,%eax
f0118696:	74 14                	je     f01186ac <test_kmalloc+0x756>
f0118698:	83 ec 04             	sub    $0x4,%esp
f011869b:	68 dc b4 13 f0       	push   $0xf013b4dc
f01186a0:	6a 6b                	push   $0x6b
f01186a2:	68 5a b4 13 f0       	push   $0xf013b45a
f01186a7:	e8 59 7b fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01186ac:	e8 a8 49 ff ff       	call   f010d059 <sys_calculate_free_frames>
f01186b1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01186b4:	e8 2a b7 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01186b9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01186bc:	83 ec 0c             	sub    $0xc,%esp
f01186bf:	68 00 fc 2f 00       	push   $0x2ffc00
f01186c4:	e8 67 f3 fe ff       	call   f0107a30 <kmalloc>
f01186c9:	83 c4 10             	add    $0x10,%esp
f01186cc:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01186d2:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01186d8:	89 c1                	mov    %eax,%ecx
f01186da:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01186e1:	10 00 00 
f01186e4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01186ea:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01186ef:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01186f5:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01186fb:	ba 00 00 00 00       	mov    $0x0,%edx
f0118700:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0118706:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011870c:	29 d0                	sub    %edx,%eax
f011870e:	89 c3                	mov    %eax,%ebx
f0118710:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0118717:	10 00 00 
f011871a:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011871f:	0f b6 d0             	movzbl %al,%edx
f0118722:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118728:	01 d0                	add    %edx,%eax
f011872a:	48                   	dec    %eax
f011872b:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0118731:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118737:	ba 00 00 00 00       	mov    $0x0,%edx
f011873c:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0118742:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118748:	29 d0                	sub    %edx,%eax
f011874a:	01 c3                	add    %eax,%ebx
f011874c:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0118753:	10 00 00 
f0118756:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011875b:	0f b6 c0             	movzbl %al,%eax
f011875e:	c1 e0 04             	shl    $0x4,%eax
f0118761:	89 c2                	mov    %eax,%edx
f0118763:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118769:	01 d0                	add    %edx,%eax
f011876b:	48                   	dec    %eax
f011876c:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0118772:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118778:	ba 00 00 00 00       	mov    $0x0,%edx
f011877d:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0118783:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118789:	29 d0                	sub    %edx,%eax
f011878b:	01 d8                	add    %ebx,%eax
f011878d:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0118792:	39 c1                	cmp    %eax,%ecx
f0118794:	74 14                	je     f01187aa <test_kmalloc+0x854>
f0118796:	83 ec 04             	sub    $0x4,%esp
f0118799:	68 40 b5 13 f0       	push   $0xf013b540
f011879e:	6a 71                	push   $0x71
f01187a0:	68 5a b4 13 f0       	push   $0xf013b45a
f01187a5:	e8 5b 7a fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01187aa:	e8 34 b6 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01187af:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01187b2:	74 14                	je     f01187c8 <test_kmalloc+0x872>
f01187b4:	83 ec 04             	sub    $0x4,%esp
f01187b7:	68 74 b4 13 f0       	push   $0xf013b474
f01187bc:	6a 72                	push   $0x72
f01187be:	68 5a b4 13 f0       	push   $0xf013b45a
f01187c3:	e8 3d 7a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01187c8:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01187cb:	e8 89 48 ff ff       	call   f010d059 <sys_calculate_free_frames>
f01187d0:	29 c3                	sub    %eax,%ebx
f01187d2:	89 d8                	mov    %ebx,%eax
f01187d4:	3d 00 03 00 00       	cmp    $0x300,%eax
f01187d9:	74 14                	je     f01187ef <test_kmalloc+0x899>
f01187db:	83 ec 04             	sub    $0x4,%esp
f01187de:	68 dc b4 13 f0       	push   $0xf013b4dc
f01187e3:	6a 73                	push   $0x73
f01187e5:	68 5a b4 13 f0       	push   $0xf013b45a
f01187ea:	e8 16 7a fe ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01187ef:	e8 65 48 ff ff       	call   f010d059 <sys_calculate_free_frames>
f01187f4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01187f7:	e8 e7 b5 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01187fc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01187ff:	83 ec 0c             	sub    $0xc,%esp
f0118802:	68 00 fc 5f 00       	push   $0x5ffc00
f0118807:	e8 24 f2 fe ff       	call   f0107a30 <kmalloc>
f011880c:	83 c4 10             	add    $0x10,%esp
f011880f:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118815:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011881b:	89 c1                	mov    %eax,%ecx
f011881d:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0118824:	10 00 00 
f0118827:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011882d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118832:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0118838:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011883e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118843:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0118849:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011884f:	29 d0                	sub    %edx,%eax
f0118851:	89 c3                	mov    %eax,%ebx
f0118853:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011885a:	10 00 00 
f011885d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0118862:	0f b6 d0             	movzbl %al,%edx
f0118865:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011886b:	01 d0                	add    %edx,%eax
f011886d:	48                   	dec    %eax
f011886e:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0118874:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011887a:	ba 00 00 00 00       	mov    $0x0,%edx
f011887f:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0118885:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011888b:	29 d0                	sub    %edx,%eax
f011888d:	01 c3                	add    %eax,%ebx
f011888f:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0118896:	10 00 00 
f0118899:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011889e:	0f b6 c0             	movzbl %al,%eax
f01188a1:	c1 e0 04             	shl    $0x4,%eax
f01188a4:	89 c2                	mov    %eax,%edx
f01188a6:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01188ac:	01 d0                	add    %edx,%eax
f01188ae:	48                   	dec    %eax
f01188af:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01188b5:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01188bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01188c0:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01188c6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01188cc:	29 d0                	sub    %edx,%eax
f01188ce:	01 d8                	add    %ebx,%eax
f01188d0:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01188d5:	39 c1                	cmp    %eax,%ecx
f01188d7:	74 14                	je     f01188ed <test_kmalloc+0x997>
f01188d9:	83 ec 04             	sub    $0x4,%esp
f01188dc:	68 40 b5 13 f0       	push   $0xf013b540
f01188e1:	6a 79                	push   $0x79
f01188e3:	68 5a b4 13 f0       	push   $0xf013b45a
f01188e8:	e8 18 79 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01188ed:	e8 f1 b4 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01188f2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01188f5:	74 14                	je     f011890b <test_kmalloc+0x9b5>
f01188f7:	83 ec 04             	sub    $0x4,%esp
f01188fa:	68 74 b4 13 f0       	push   $0xf013b474
f01188ff:	6a 7a                	push   $0x7a
f0118901:	68 5a b4 13 f0       	push   $0xf013b45a
f0118906:	e8 fa 78 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f011890b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011890e:	e8 46 47 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0118913:	29 c3                	sub    %eax,%ebx
f0118915:	89 d8                	mov    %ebx,%eax
f0118917:	3d 00 06 00 00       	cmp    $0x600,%eax
f011891c:	74 14                	je     f0118932 <test_kmalloc+0x9dc>
f011891e:	83 ec 04             	sub    $0x4,%esp
f0118921:	68 dc b4 13 f0       	push   $0xf013b4dc
f0118926:	6a 7b                	push   $0x7b
f0118928:	68 5a b4 13 f0       	push   $0xf013b45a
f011892d:	e8 d3 78 fe ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0118932:	e8 22 47 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0118937:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011893a:	e8 a4 b4 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011893f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0118942:	83 ec 0c             	sub    $0xc,%esp
f0118945:	68 00 38 00 00       	push   $0x3800
f011894a:	e8 e1 f0 fe ff       	call   f0107a30 <kmalloc>
f011894f:	83 c4 10             	add    $0x10,%esp
f0118952:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118958:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011895e:	89 c1                	mov    %eax,%ecx
f0118960:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0118967:	10 00 00 
f011896a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0118970:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118975:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011897b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0118981:	ba 00 00 00 00       	mov    $0x0,%edx
f0118986:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011898c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0118992:	29 d0                	sub    %edx,%eax
f0118994:	89 c3                	mov    %eax,%ebx
f0118996:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011899d:	10 00 00 
f01189a0:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01189a5:	0f b6 d0             	movzbl %al,%edx
f01189a8:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01189ae:	01 d0                	add    %edx,%eax
f01189b0:	48                   	dec    %eax
f01189b1:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01189b7:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01189bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01189c2:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01189c8:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01189ce:	29 d0                	sub    %edx,%eax
f01189d0:	01 c3                	add    %eax,%ebx
f01189d2:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01189d9:	10 00 00 
f01189dc:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01189e1:	0f b6 c0             	movzbl %al,%eax
f01189e4:	c1 e0 04             	shl    $0x4,%eax
f01189e7:	89 c2                	mov    %eax,%edx
f01189e9:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01189ef:	01 d0                	add    %edx,%eax
f01189f1:	48                   	dec    %eax
f01189f2:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01189f8:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01189fe:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a03:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0118a09:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118a0f:	29 d0                	sub    %edx,%eax
f0118a11:	01 d8                	add    %ebx,%eax
f0118a13:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0118a18:	39 c1                	cmp    %eax,%ecx
f0118a1a:	74 17                	je     f0118a33 <test_kmalloc+0xadd>
f0118a1c:	83 ec 04             	sub    $0x4,%esp
f0118a1f:	68 40 b5 13 f0       	push   $0xf013b540
f0118a24:	68 81 00 00 00       	push   $0x81
f0118a29:	68 5a b4 13 f0       	push   $0xf013b45a
f0118a2e:	e8 d2 77 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118a33:	e8 ab b3 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0118a38:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118a3b:	74 17                	je     f0118a54 <test_kmalloc+0xafe>
f0118a3d:	83 ec 04             	sub    $0x4,%esp
f0118a40:	68 74 b4 13 f0       	push   $0xf013b474
f0118a45:	68 82 00 00 00       	push   $0x82
f0118a4a:	68 5a b4 13 f0       	push   $0xf013b45a
f0118a4f:	e8 b1 77 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118a54:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118a57:	e8 fd 45 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0118a5c:	29 c3                	sub    %eax,%ebx
f0118a5e:	89 d8                	mov    %ebx,%eax
f0118a60:	83 f8 04             	cmp    $0x4,%eax
f0118a63:	74 17                	je     f0118a7c <test_kmalloc+0xb26>
f0118a65:	83 ec 04             	sub    $0x4,%esp
f0118a68:	68 dc b4 13 f0       	push   $0xf013b4dc
f0118a6d:	68 83 00 00 00       	push   $0x83
f0118a72:	68 5a b4 13 f0       	push   $0xf013b45a
f0118a77:	e8 89 77 fe ff       	call   f0100205 <_panic>

		cprintf("\b\b\b50%");
f0118a7c:	83 ec 0c             	sub    $0xc,%esp
f0118a7f:	68 a6 b5 13 f0       	push   $0xf013b5a6
f0118a84:	e8 85 82 fe ff       	call   f0100d0e <cprintf>
f0118a89:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f0118a8c:	e8 c8 45 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0118a91:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0118a94:	e8 4a b3 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0118a99:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f0118a9c:	c7 85 f8 fe ff ff ff 	movl   $0x1ffbff,-0x108(%ebp)
f0118aa3:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f0118aa6:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0118aac:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
			byteArr[0] = minByte ;
f0118ab2:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118ab8:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118abb:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f0118abd:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0118ac3:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118ac9:	01 c2                	add    %eax,%edx
f0118acb:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118ace:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f0118ad0:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0118ad6:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f0118adc:	c7 85 ec fe ff ff ff 	movl   $0xffdff,-0x114(%ebp)
f0118ae3:	fd 0f 00 
			shortArr[0] = minShort;
f0118ae6:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
f0118aec:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118aef:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f0118af2:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118af8:	01 c0                	add    %eax,%eax
f0118afa:	89 c2                	mov    %eax,%edx
f0118afc:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118b02:	01 c2                	add    %eax,%edx
f0118b04:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118b08:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f0118b0b:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0118b11:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f0118b17:	c7 85 e4 fe ff ff ff 	movl   $0x1ff,-0x11c(%ebp)
f0118b1e:	01 00 00 
			intArr[0] = minInt;
f0118b21:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118b27:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0118b2a:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f0118b2c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118b32:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118b39:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118b3f:	01 c2                	add    %eax,%edx
f0118b41:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118b44:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f0118b46:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0118b4c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f0118b52:	c7 85 dc fe ff ff 7f 	movl   $0x37f,-0x124(%ebp)
f0118b59:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f0118b5c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118b62:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118b65:	88 10                	mov    %dl,(%eax)
f0118b67:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f0118b6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118b70:	66 89 42 02          	mov    %ax,0x2(%edx)
f0118b74:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118b7a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0118b7d:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f0118b80:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118b86:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118b8d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118b93:	01 c2                	add    %eax,%edx
f0118b95:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118b98:	88 02                	mov    %al,(%edx)
f0118b9a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118ba0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118ba7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118bad:	01 c2                	add    %eax,%edx
f0118baf:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118bb3:	66 89 42 02          	mov    %ax,0x2(%edx)
f0118bb7:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118bbd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118bc4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118bca:	01 c2                	add    %eax,%edx
f0118bcc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118bcf:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f0118bd2:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f0118bd9:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f0118bdc:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0118be2:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			byteArr2[0] = minByte ;
f0118be8:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118bee:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118bf1:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f0118bf3:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118bf9:	89 c2                	mov    %eax,%edx
f0118bfb:	c1 ea 1f             	shr    $0x1f,%edx
f0118bfe:	01 d0                	add    %edx,%eax
f0118c00:	d1 f8                	sar    %eax
f0118c02:	89 c2                	mov    %eax,%edx
f0118c04:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118c0a:	01 c2                	add    %eax,%edx
f0118c0c:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118c0f:	88 c1                	mov    %al,%cl
f0118c11:	c0 e9 07             	shr    $0x7,%cl
f0118c14:	01 c8                	add    %ecx,%eax
f0118c16:	d0 f8                	sar    %al
f0118c18:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f0118c1a:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0118c20:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118c26:	01 c2                	add    %eax,%edx
f0118c28:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118c2b:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f0118c2d:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118c33:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f0118c39:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0118c40:	1b 00 00 
			shortArr2[0] = minShort;
f0118c43:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0118c49:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118c4c:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f0118c4f:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0118c55:	01 c0                	add    %eax,%eax
f0118c57:	89 c2                	mov    %eax,%edx
f0118c59:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118c5f:	01 c2                	add    %eax,%edx
f0118c61:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118c65:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0118c68:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118c6e:	8a 00                	mov    (%eax),%al
f0118c70:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118c73:	75 15                	jne    f0118c8a <test_kmalloc+0xd34>
f0118c75:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0118c7b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118c81:	01 d0                	add    %edx,%eax
f0118c83:	8a 00                	mov    (%eax),%al
f0118c85:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118c88:	74 17                	je     f0118ca1 <test_kmalloc+0xd4b>
f0118c8a:	83 ec 04             	sub    $0x4,%esp
f0118c8d:	68 b0 b5 13 f0       	push   $0xf013b5b0
f0118c92:	68 b2 00 00 00       	push   $0xb2
f0118c97:	68 5a b4 13 f0       	push   $0xf013b45a
f0118c9c:	e8 64 75 fe ff       	call   f0100205 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0118ca1:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118ca7:	66 8b 00             	mov    (%eax),%ax
f0118caa:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118cae:	75 1b                	jne    f0118ccb <test_kmalloc+0xd75>
f0118cb0:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118cb6:	01 c0                	add    %eax,%eax
f0118cb8:	89 c2                	mov    %eax,%edx
f0118cba:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118cc0:	01 d0                	add    %edx,%eax
f0118cc2:	66 8b 00             	mov    (%eax),%ax
f0118cc5:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118cc9:	74 17                	je     f0118ce2 <test_kmalloc+0xd8c>
f0118ccb:	83 ec 04             	sub    $0x4,%esp
f0118cce:	68 b0 b5 13 f0       	push   $0xf013b5b0
f0118cd3:	68 b3 00 00 00       	push   $0xb3
f0118cd8:	68 5a b4 13 f0       	push   $0xf013b45a
f0118cdd:	e8 23 75 fe ff       	call   f0100205 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f0118ce2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118ce8:	8b 00                	mov    (%eax),%eax
f0118cea:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0118ced:	75 1c                	jne    f0118d0b <test_kmalloc+0xdb5>
f0118cef:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118cf5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118cfc:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118d02:	01 d0                	add    %edx,%eax
f0118d04:	8b 00                	mov    (%eax),%eax
f0118d06:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0118d09:	74 17                	je     f0118d22 <test_kmalloc+0xdcc>
f0118d0b:	83 ec 04             	sub    $0x4,%esp
f0118d0e:	68 b0 b5 13 f0       	push   $0xf013b5b0
f0118d13:	68 b4 00 00 00       	push   $0xb4
f0118d18:	68 5a b4 13 f0       	push   $0xf013b45a
f0118d1d:	e8 e3 74 fe ff       	call   f0100205 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118d22:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118d28:	8a 00                	mov    (%eax),%al
f0118d2a:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118d2d:	75 1c                	jne    f0118d4b <test_kmalloc+0xdf5>
f0118d2f:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118d35:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118d3c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118d42:	01 d0                	add    %edx,%eax
f0118d44:	8a 00                	mov    (%eax),%al
f0118d46:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118d49:	74 17                	je     f0118d62 <test_kmalloc+0xe0c>
f0118d4b:	83 ec 04             	sub    $0x4,%esp
f0118d4e:	68 b0 b5 13 f0       	push   $0xf013b5b0
f0118d53:	68 b6 00 00 00       	push   $0xb6
f0118d58:	68 5a b4 13 f0       	push   $0xf013b45a
f0118d5d:	e8 a3 74 fe ff       	call   f0100205 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118d62:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118d68:	66 8b 40 02          	mov    0x2(%eax),%ax
f0118d6c:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118d70:	75 1f                	jne    f0118d91 <test_kmalloc+0xe3b>
f0118d72:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118d78:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118d7f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118d85:	01 d0                	add    %edx,%eax
f0118d87:	66 8b 40 02          	mov    0x2(%eax),%ax
f0118d8b:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118d8f:	74 17                	je     f0118da8 <test_kmalloc+0xe52>
f0118d91:	83 ec 04             	sub    $0x4,%esp
f0118d94:	68 b0 b5 13 f0       	push   $0xf013b5b0
f0118d99:	68 b7 00 00 00       	push   $0xb7
f0118d9e:	68 5a b4 13 f0       	push   $0xf013b45a
f0118da3:	e8 5d 74 fe ff       	call   f0100205 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118da8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118dae:	8b 40 04             	mov    0x4(%eax),%eax
f0118db1:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0118db4:	75 1d                	jne    f0118dd3 <test_kmalloc+0xe7d>
f0118db6:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118dbc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118dc3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118dc9:	01 d0                	add    %edx,%eax
f0118dcb:	8b 40 04             	mov    0x4(%eax),%eax
f0118dce:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0118dd1:	74 17                	je     f0118dea <test_kmalloc+0xe94>
f0118dd3:	83 ec 04             	sub    $0x4,%esp
f0118dd6:	68 b0 b5 13 f0       	push   $0xf013b5b0
f0118ddb:	68 b8 00 00 00       	push   $0xb8
f0118de0:	68 5a b4 13 f0       	push   $0xf013b45a
f0118de5:	e8 1b 74 fe ff       	call   f0100205 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0118dea:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118df0:	8a 00                	mov    (%eax),%al
f0118df2:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118df5:	75 40                	jne    f0118e37 <test_kmalloc+0xee1>
f0118df7:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118dfd:	89 c2                	mov    %eax,%edx
f0118dff:	c1 ea 1f             	shr    $0x1f,%edx
f0118e02:	01 d0                	add    %edx,%eax
f0118e04:	d1 f8                	sar    %eax
f0118e06:	89 c2                	mov    %eax,%edx
f0118e08:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118e0e:	01 d0                	add    %edx,%eax
f0118e10:	8a 10                	mov    (%eax),%dl
f0118e12:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118e15:	88 c1                	mov    %al,%cl
f0118e17:	c0 e9 07             	shr    $0x7,%cl
f0118e1a:	01 c8                	add    %ecx,%eax
f0118e1c:	d0 f8                	sar    %al
f0118e1e:	38 c2                	cmp    %al,%dl
f0118e20:	75 15                	jne    f0118e37 <test_kmalloc+0xee1>
f0118e22:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0118e28:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118e2e:	01 d0                	add    %edx,%eax
f0118e30:	8a 00                	mov    (%eax),%al
f0118e32:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118e35:	74 17                	je     f0118e4e <test_kmalloc+0xef8>
f0118e37:	83 ec 04             	sub    $0x4,%esp
f0118e3a:	68 b0 b5 13 f0       	push   $0xf013b5b0
f0118e3f:	68 ba 00 00 00       	push   $0xba
f0118e44:	68 5a b4 13 f0       	push   $0xf013b45a
f0118e49:	e8 b7 73 fe ff       	call   f0100205 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0118e4e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118e54:	66 8b 00             	mov    (%eax),%ax
f0118e57:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118e5b:	75 1b                	jne    f0118e78 <test_kmalloc+0xf22>
f0118e5d:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0118e63:	01 c0                	add    %eax,%eax
f0118e65:	89 c2                	mov    %eax,%edx
f0118e67:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118e6d:	01 d0                	add    %edx,%eax
f0118e6f:	66 8b 00             	mov    (%eax),%ax
f0118e72:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118e76:	74 17                	je     f0118e8f <test_kmalloc+0xf39>
f0118e78:	83 ec 04             	sub    $0x4,%esp
f0118e7b:	68 b0 b5 13 f0       	push   $0xf013b5b0
f0118e80:	68 bb 00 00 00       	push   $0xbb
f0118e85:	68 5a b4 13 f0       	push   $0xf013b45a
f0118e8a:	e8 76 73 fe ff       	call   f0100205 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118e8f:	e8 c5 41 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0118e94:	89 c2                	mov    %eax,%edx
f0118e96:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118e99:	39 c2                	cmp    %eax,%edx
f0118e9b:	74 17                	je     f0118eb4 <test_kmalloc+0xf5e>
f0118e9d:	83 ec 04             	sub    $0x4,%esp
f0118ea0:	68 dc b4 13 f0       	push   $0xf013b4dc
f0118ea5:	68 bd 00 00 00       	push   $0xbd
f0118eaa:	68 5a b4 13 f0       	push   $0xf013b45a
f0118eaf:	e8 51 73 fe ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118eb4:	e8 2a af fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0118eb9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118ebc:	74 17                	je     f0118ed5 <test_kmalloc+0xf7f>
f0118ebe:	83 ec 04             	sub    $0x4,%esp
f0118ec1:	68 74 b4 13 f0       	push   $0xf013b474
f0118ec6:	68 be 00 00 00       	push   $0xbe
f0118ecb:	68 5a b4 13 f0       	push   $0xf013b45a
f0118ed0:	e8 30 73 fe ff       	call   f0100205 <_panic>
		}

		cprintf("\b\b\b80%");
f0118ed5:	83 ec 0c             	sub    $0xc,%esp
f0118ed8:	68 e5 b5 13 f0       	push   $0xf013b5e5
f0118edd:	e8 2c 7e fe ff       	call   f0100d0e <cprintf>
f0118ee2:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f0118ee5:	e8 6f 41 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0118eea:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118eed:	e8 f1 ae fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0118ef2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f0118ef5:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0118efc:	10 00 00 
f0118eff:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118f05:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118f0a:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0118f10:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118f16:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f1b:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0118f21:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118f27:	29 d0                	sub    %edx,%eax
f0118f29:	89 c1                	mov    %eax,%ecx
f0118f2b:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0118f32:	10 00 00 
f0118f35:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0118f3a:	0f b6 d0             	movzbl %al,%edx
f0118f3d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0118f43:	01 d0                	add    %edx,%eax
f0118f45:	48                   	dec    %eax
f0118f46:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0118f4c:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118f52:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f57:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0118f5d:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118f63:	29 d0                	sub    %edx,%eax
f0118f65:	01 c1                	add    %eax,%ecx
f0118f67:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0118f6e:	10 00 00 
f0118f71:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0118f76:	0f b6 c0             	movzbl %al,%eax
f0118f79:	c1 e0 04             	shl    $0x4,%eax
f0118f7c:	89 c2                	mov    %eax,%edx
f0118f7e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0118f84:	01 d0                	add    %edx,%eax
f0118f86:	48                   	dec    %eax
f0118f87:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0118f8d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118f93:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f98:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0118f9e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118fa4:	29 d0                	sub    %edx,%eax
f0118fa6:	01 c8                	add    %ecx,%eax
f0118fa8:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f0118fad:	29 c2                	sub    %eax,%edx
f0118faf:	89 d0                	mov    %edx,%eax
f0118fb1:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f0118fb7:	83 ec 0c             	sub    $0xc,%esp
f0118fba:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f0118fc0:	e8 6b ea fe ff       	call   f0107a30 <kmalloc>
f0118fc5:	83 c4 10             	add    $0x10,%esp
f0118fc8:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f0118fce:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0118fd4:	85 c0                	test   %eax,%eax
f0118fd6:	74 17                	je     f0118fef <test_kmalloc+0x1099>
f0118fd8:	83 ec 04             	sub    $0x4,%esp
f0118fdb:	68 28 b4 13 f0       	push   $0xf013b428
f0118fe0:	68 c8 00 00 00       	push   $0xc8
f0118fe5:	68 5a b4 13 f0       	push   $0xf013b45a
f0118fea:	e8 16 72 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118fef:	e8 ef ad fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0118ff4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118ff7:	74 17                	je     f0119010 <test_kmalloc+0x10ba>
f0118ff9:	83 ec 04             	sub    $0x4,%esp
f0118ffc:	68 74 b4 13 f0       	push   $0xf013b474
f0119001:	68 c9 00 00 00       	push   $0xc9
f0119006:	68 5a b4 13 f0       	push   $0xf013b45a
f011900b:	e8 f5 71 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0119010:	e8 44 40 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0119015:	89 c2                	mov    %eax,%edx
f0119017:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011901a:	39 c2                	cmp    %eax,%edx
f011901c:	74 17                	je     f0119035 <test_kmalloc+0x10df>
f011901e:	83 ec 04             	sub    $0x4,%esp
f0119021:	68 dc b4 13 f0       	push   $0xf013b4dc
f0119026:	68 ca 00 00 00       	push   $0xca
f011902b:	68 5a b4 13 f0       	push   $0xf013b45a
f0119030:	e8 d0 71 fe ff       	call   f0100205 <_panic>

		cprintf("\b\b\b90%");
f0119035:	83 ec 0c             	sub    $0xc,%esp
f0119038:	68 ec b5 13 f0       	push   $0xf013b5ec
f011903d:	e8 cc 7c fe ff       	call   f0100d0e <cprintf>
f0119042:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f0119045:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011904b:	05 00 40 00 00       	add    $0x4000,%eax
f0119050:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0119056:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f011905d:	10 00 00 
f0119060:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0119066:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011906b:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0119071:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0119077:	ba 00 00 00 00       	mov    $0x0,%edx
f011907c:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0119082:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0119088:	29 d0                	sub    %edx,%eax
f011908a:	89 c1                	mov    %eax,%ecx
f011908c:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0119093:	10 00 00 
f0119096:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011909b:	0f b6 d0             	movzbl %al,%edx
f011909e:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01190a4:	01 d0                	add    %edx,%eax
f01190a6:	48                   	dec    %eax
f01190a7:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f01190ad:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01190b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01190b8:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f01190be:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01190c4:	29 d0                	sub    %edx,%eax
f01190c6:	01 c1                	add    %eax,%ecx
f01190c8:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f01190cf:	10 00 00 
f01190d2:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01190d7:	0f b6 c0             	movzbl %al,%eax
f01190da:	c1 e0 04             	shl    $0x4,%eax
f01190dd:	89 c2                	mov    %eax,%edx
f01190df:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01190e5:	01 d0                	add    %edx,%eax
f01190e7:	48                   	dec    %eax
f01190e8:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f01190ee:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01190f4:	ba 00 00 00 00       	mov    $0x0,%edx
f01190f9:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f01190ff:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0119105:	29 d0                	sub    %edx,%eax
f0119107:	01 c8                	add    %ecx,%eax
f0119109:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011910e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0119111:	eb 6a                	jmp    f011917d <test_kmalloc+0x1227>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f0119113:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0119118:	83 ec 04             	sub    $0x4,%esp
f011911b:	8d 95 3c fe ff ff    	lea    -0x1c4(%ebp),%edx
f0119121:	52                   	push   %edx
f0119122:	ff 75 f4             	pushl  -0xc(%ebp)
f0119125:	50                   	push   %eax
f0119126:	e8 a1 d9 fe ff       	call   f0106acc <get_page_table>
f011912b:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f011912e:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0119134:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119137:	c1 ea 0c             	shr    $0xc,%edx
f011913a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0119140:	c1 e2 02             	shl    $0x2,%edx
f0119143:	01 d0                	add    %edx,%eax
f0119145:	8b 00                	mov    (%eax),%eax
f0119147:	25 ff 0f 00 00       	and    $0xfff,%eax
f011914c:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f0119152:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0119158:	83 e0 04             	and    $0x4,%eax
f011915b:	85 c0                	test   %eax,%eax
f011915d:	74 17                	je     f0119176 <test_kmalloc+0x1220>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f011915f:	83 ec 04             	sub    $0x4,%esp
f0119162:	68 f4 b5 13 f0       	push   $0xf013b5f4
f0119167:	68 d7 00 00 00       	push   $0xd7
f011916c:	68 5a b4 13 f0       	push   $0xf013b45a
f0119171:	e8 8f 70 fe ff       	call   f0100205 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0119176:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f011917d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0119180:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0119186:	72 8b                	jb     f0119113 <test_kmalloc+0x11bd>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f0119188:	83 ec 0c             	sub    $0xc,%esp
f011918b:	68 3e b6 13 f0       	push   $0xf013b63e
f0119190:	e8 79 7b fe ff       	call   f0100d0e <cprintf>
f0119195:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f0119198:	83 ec 0c             	sub    $0xc,%esp
f011919b:	68 48 b6 13 f0       	push   $0xf013b648
f01191a0:	e8 69 7b fe ff       	call   f0100d0e <cprintf>
f01191a5:	83 c4 10             	add    $0x10,%esp

	return 1;
f01191a8:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01191ad:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01191b0:	5b                   	pop    %ebx
f01191b1:	5f                   	pop    %edi
f01191b2:	5d                   	pop    %ebp
f01191b3:	c3                   	ret    

f01191b4 <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f01191b4:	55                   	push   %ebp
f01191b5:	89 e5                	mov    %esp,%ebp
f01191b7:	57                   	push   %edi
f01191b8:	53                   	push   %ebx
f01191b9:	81 ec 70 04 00 00    	sub    $0x470,%esp
	cprintf("==============================================\n");
f01191bf:	83 ec 0c             	sub    $0xc,%esp
f01191c2:	68 9c b3 13 f0       	push   $0xf013b39c
f01191c7:	e8 42 7b fe ff       	call   f0100d0e <cprintf>
f01191cc:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01191cf:	83 ec 0c             	sub    $0xc,%esp
f01191d2:	68 cc b3 13 f0       	push   $0xf013b3cc
f01191d7:	e8 32 7b fe ff       	call   f0100d0e <cprintf>
f01191dc:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01191df:	83 ec 0c             	sub    $0xc,%esp
f01191e2:	68 9c b3 13 f0       	push   $0xf013b39c
f01191e7:	e8 22 7b fe ff       	call   f0100d0e <cprintf>
f01191ec:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f01191ef:	8d 95 88 fb ff ff    	lea    -0x478(%ebp),%edx
f01191f5:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f01191fa:	b8 00 00 00 00       	mov    $0x0,%eax
f01191ff:	89 d7                	mov    %edx,%edi
f0119201:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f0119203:	83 ec 0c             	sub    $0xc,%esp
f0119206:	68 84 b6 13 f0       	push   $0xf013b684
f011920b:	e8 fe 7a fe ff       	call   f0100d0e <cprintf>
f0119210:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f0119213:	e8 41 3e ff ff       	call   f010d059 <sys_calculate_free_frames>
f0119218:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011921b:	e8 c3 ab fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0119220:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0119223:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011922a:	eb 1f                	jmp    f011924b <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011922c:	83 ec 0c             	sub    $0xc,%esp
f011922f:	68 00 00 20 00       	push   $0x200000
f0119234:	e8 f7 e7 fe ff       	call   f0107a30 <kmalloc>
f0119239:	83 c4 10             	add    $0x10,%esp
f011923c:	89 c2                	mov    %eax,%edx
f011923e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0119241:	89 94 85 88 fb ff ff 	mov    %edx,-0x478(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0119248:	ff 45 f4             	incl   -0xc(%ebp)
f011924b:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011924f:	7e db                	jle    f011922c <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f0119251:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0119258:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011925b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119260:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0119263:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119266:	ba 00 00 00 00       	mov    $0x0,%edx
f011926b:	f7 75 e8             	divl   -0x18(%ebp)
f011926e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119271:	29 d0                	sub    %edx,%eax
f0119273:	89 c1                	mov    %eax,%ecx
f0119275:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f011927c:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0119281:	0f b6 d0             	movzbl %al,%edx
f0119284:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119287:	01 d0                	add    %edx,%eax
f0119289:	48                   	dec    %eax
f011928a:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011928d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119290:	ba 00 00 00 00       	mov    $0x0,%edx
f0119295:	f7 75 e0             	divl   -0x20(%ebp)
f0119298:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011929b:	29 d0                	sub    %edx,%eax
f011929d:	01 c1                	add    %eax,%ecx
f011929f:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f01192a6:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01192ab:	0f b6 c0             	movzbl %al,%eax
f01192ae:	c1 e0 04             	shl    $0x4,%eax
f01192b1:	89 c2                	mov    %eax,%edx
f01192b3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01192b6:	01 d0                	add    %edx,%eax
f01192b8:	48                   	dec    %eax
f01192b9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01192bc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01192bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01192c4:	f7 75 d8             	divl   -0x28(%ebp)
f01192c7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01192ca:	29 d0                	sub    %edx,%eax
f01192cc:	01 c8                	add    %ecx,%eax
f01192ce:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f01192d3:	29 c2                	sub    %eax,%edx
f01192d5:	89 d0                	mov    %edx,%eax
f01192d7:	83 ec 0c             	sub    $0xc,%esp
f01192da:	50                   	push   %eax
f01192db:	e8 50 e7 fe ff       	call   f0107a30 <kmalloc>
f01192e0:	83 c4 10             	add    $0x10,%esp
f01192e3:	89 85 c4 fc ff ff    	mov    %eax,-0x33c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f01192e9:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f01192ef:	89 c1                	mov    %eax,%ecx
f01192f1:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f01192f8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01192fb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119300:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0119303:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119306:	ba 00 00 00 00       	mov    $0x0,%edx
f011930b:	f7 75 d0             	divl   -0x30(%ebp)
f011930e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119311:	29 d0                	sub    %edx,%eax
f0119313:	89 c3                	mov    %eax,%ebx
f0119315:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011931c:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0119321:	0f b6 d0             	movzbl %al,%edx
f0119324:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119327:	01 d0                	add    %edx,%eax
f0119329:	48                   	dec    %eax
f011932a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011932d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0119330:	ba 00 00 00 00       	mov    $0x0,%edx
f0119335:	f7 75 c8             	divl   -0x38(%ebp)
f0119338:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011933b:	29 d0                	sub    %edx,%eax
f011933d:	01 c3                	add    %eax,%ebx
f011933f:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0119346:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011934b:	0f b6 c0             	movzbl %al,%eax
f011934e:	c1 e0 04             	shl    $0x4,%eax
f0119351:	89 c2                	mov    %eax,%edx
f0119353:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0119356:	01 d0                	add    %edx,%eax
f0119358:	48                   	dec    %eax
f0119359:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011935c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011935f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119364:	f7 75 c0             	divl   -0x40(%ebp)
f0119367:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011936a:	29 d0                	sub    %edx,%eax
f011936c:	01 d8                	add    %ebx,%eax
f011936e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0119373:	39 c1                	cmp    %eax,%ecx
f0119375:	0f 85 ed 04 00 00    	jne    f0119868 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011937b:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f0119381:	89 c1                	mov    %eax,%ecx
f0119383:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011938a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011938d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119392:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0119395:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119398:	ba 00 00 00 00       	mov    $0x0,%edx
f011939d:	f7 75 b8             	divl   -0x48(%ebp)
f01193a0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01193a3:	29 d0                	sub    %edx,%eax
f01193a5:	89 c3                	mov    %eax,%ebx
f01193a7:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01193ae:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01193b3:	0f b6 d0             	movzbl %al,%edx
f01193b6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01193b9:	01 d0                	add    %edx,%eax
f01193bb:	48                   	dec    %eax
f01193bc:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01193bf:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01193c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01193c7:	f7 75 b0             	divl   -0x50(%ebp)
f01193ca:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01193cd:	29 d0                	sub    %edx,%eax
f01193cf:	01 c3                	add    %eax,%ebx
f01193d1:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01193d8:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01193dd:	0f b6 c0             	movzbl %al,%eax
f01193e0:	c1 e0 04             	shl    $0x4,%eax
f01193e3:	89 c2                	mov    %eax,%edx
f01193e5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01193e8:	01 d0                	add    %edx,%eax
f01193ea:	48                   	dec    %eax
f01193eb:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01193ee:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01193f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01193f6:	f7 75 a8             	divl   -0x58(%ebp)
f01193f9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01193fc:	29 d0                	sub    %edx,%eax
f01193fe:	01 d8                	add    %ebx,%eax
f0119400:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0119405:	39 c1                	cmp    %eax,%ecx
f0119407:	0f 85 5b 04 00 00    	jne    f0119868 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011940d:	8b 85 a8 fb ff ff    	mov    -0x458(%ebp),%eax
f0119413:	89 c1                	mov    %eax,%ecx
f0119415:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011941c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011941f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119424:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0119427:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011942a:	ba 00 00 00 00       	mov    $0x0,%edx
f011942f:	f7 75 a0             	divl   -0x60(%ebp)
f0119432:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0119435:	29 d0                	sub    %edx,%eax
f0119437:	89 c3                	mov    %eax,%ebx
f0119439:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0119440:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0119445:	0f b6 d0             	movzbl %al,%edx
f0119448:	8b 45 98             	mov    -0x68(%ebp),%eax
f011944b:	01 d0                	add    %edx,%eax
f011944d:	48                   	dec    %eax
f011944e:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0119451:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0119454:	ba 00 00 00 00       	mov    $0x0,%edx
f0119459:	f7 75 98             	divl   -0x68(%ebp)
f011945c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011945f:	29 d0                	sub    %edx,%eax
f0119461:	01 c3                	add    %eax,%ebx
f0119463:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f011946a:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011946f:	0f b6 c0             	movzbl %al,%eax
f0119472:	c1 e0 04             	shl    $0x4,%eax
f0119475:	89 c2                	mov    %eax,%edx
f0119477:	8b 45 90             	mov    -0x70(%ebp),%eax
f011947a:	01 d0                	add    %edx,%eax
f011947c:	48                   	dec    %eax
f011947d:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0119480:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0119483:	ba 00 00 00 00       	mov    $0x0,%edx
f0119488:	f7 75 90             	divl   -0x70(%ebp)
f011948b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011948e:	29 d0                	sub    %edx,%eax
f0119490:	01 d8                	add    %ebx,%eax
f0119492:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0119497:	39 c1                	cmp    %eax,%ecx
f0119499:	0f 85 c9 03 00 00    	jne    f0119868 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011949f:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f01194a5:	89 c1                	mov    %eax,%ecx
f01194a7:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01194ae:	8b 45 88             	mov    -0x78(%ebp),%eax
f01194b1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01194b6:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01194b9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01194bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01194c1:	f7 75 88             	divl   -0x78(%ebp)
f01194c4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01194c7:	29 d0                	sub    %edx,%eax
f01194c9:	89 c3                	mov    %eax,%ebx
f01194cb:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01194d2:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01194d7:	0f b6 d0             	movzbl %al,%edx
f01194da:	8b 45 80             	mov    -0x80(%ebp),%eax
f01194dd:	01 d0                	add    %edx,%eax
f01194df:	48                   	dec    %eax
f01194e0:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01194e6:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01194ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01194f1:	f7 75 80             	divl   -0x80(%ebp)
f01194f4:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01194fa:	29 d0                	sub    %edx,%eax
f01194fc:	01 c3                	add    %eax,%ebx
f01194fe:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0119505:	10 00 00 
f0119508:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011950d:	0f b6 c0             	movzbl %al,%eax
f0119510:	c1 e0 04             	shl    $0x4,%eax
f0119513:	89 c2                	mov    %eax,%edx
f0119515:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011951b:	01 d0                	add    %edx,%eax
f011951d:	48                   	dec    %eax
f011951e:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0119524:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011952a:	ba 00 00 00 00       	mov    $0x0,%edx
f011952f:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0119535:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011953b:	29 d0                	sub    %edx,%eax
f011953d:	01 d8                	add    %ebx,%eax
f011953f:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0119544:	39 c1                	cmp    %eax,%ecx
f0119546:	0f 85 1c 03 00 00    	jne    f0119868 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011954c:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f0119552:	89 c1                	mov    %eax,%ecx
f0119554:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f011955b:	10 00 00 
f011955e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0119564:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119569:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f011956f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119575:	ba 00 00 00 00       	mov    $0x0,%edx
f011957a:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0119580:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119586:	29 d0                	sub    %edx,%eax
f0119588:	89 c3                	mov    %eax,%ebx
f011958a:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0119591:	10 00 00 
f0119594:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0119599:	0f b6 d0             	movzbl %al,%edx
f011959c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01195a2:	01 d0                	add    %edx,%eax
f01195a4:	48                   	dec    %eax
f01195a5:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01195ab:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01195b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01195b6:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01195bc:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01195c2:	29 d0                	sub    %edx,%eax
f01195c4:	01 c3                	add    %eax,%ebx
f01195c6:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01195cd:	10 00 00 
f01195d0:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01195d5:	0f b6 c0             	movzbl %al,%eax
f01195d8:	c1 e0 04             	shl    $0x4,%eax
f01195db:	89 c2                	mov    %eax,%edx
f01195dd:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01195e3:	01 d0                	add    %edx,%eax
f01195e5:	48                   	dec    %eax
f01195e6:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01195ec:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01195f2:	ba 00 00 00 00       	mov    $0x0,%edx
f01195f7:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01195fd:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119603:	29 d0                	sub    %edx,%eax
f0119605:	01 d8                	add    %ebx,%eax
f0119607:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011960c:	39 c1                	cmp    %eax,%ecx
f011960e:	0f 85 54 02 00 00    	jne    f0119868 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0119614:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f011961a:	89 c1                	mov    %eax,%ecx
f011961c:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0119623:	10 00 00 
f0119626:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011962c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119631:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0119637:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011963d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119642:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0119648:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011964e:	29 d0                	sub    %edx,%eax
f0119650:	89 c3                	mov    %eax,%ebx
f0119652:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0119659:	10 00 00 
f011965c:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0119661:	0f b6 d0             	movzbl %al,%edx
f0119664:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011966a:	01 d0                	add    %edx,%eax
f011966c:	48                   	dec    %eax
f011966d:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0119673:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0119679:	ba 00 00 00 00       	mov    $0x0,%edx
f011967e:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0119684:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011968a:	29 d0                	sub    %edx,%eax
f011968c:	01 c3                	add    %eax,%ebx
f011968e:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0119695:	10 00 00 
f0119698:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011969d:	0f b6 c0             	movzbl %al,%eax
f01196a0:	c1 e0 04             	shl    $0x4,%eax
f01196a3:	89 c2                	mov    %eax,%edx
f01196a5:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01196ab:	01 d0                	add    %edx,%eax
f01196ad:	48                   	dec    %eax
f01196ae:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01196b4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01196ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01196bf:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01196c5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01196cb:	29 d0                	sub    %edx,%eax
f01196cd:	01 d8                	add    %ebx,%eax
f01196cf:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f01196d4:	39 c1                	cmp    %eax,%ecx
f01196d6:	0f 85 8c 01 00 00    	jne    f0119868 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f01196dc:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f01196e2:	89 c1                	mov    %eax,%ecx
f01196e4:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01196eb:	10 00 00 
f01196ee:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01196f4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01196f9:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01196ff:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0119705:	ba 00 00 00 00       	mov    $0x0,%edx
f011970a:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0119710:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0119716:	29 d0                	sub    %edx,%eax
f0119718:	89 c3                	mov    %eax,%ebx
f011971a:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0119721:	10 00 00 
f0119724:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0119729:	0f b6 d0             	movzbl %al,%edx
f011972c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119732:	01 d0                	add    %edx,%eax
f0119734:	48                   	dec    %eax
f0119735:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f011973b:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0119741:	ba 00 00 00 00       	mov    $0x0,%edx
f0119746:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f011974c:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0119752:	29 d0                	sub    %edx,%eax
f0119754:	01 c3                	add    %eax,%ebx
f0119756:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f011975d:	10 00 00 
f0119760:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0119765:	0f b6 c0             	movzbl %al,%eax
f0119768:	c1 e0 04             	shl    $0x4,%eax
f011976b:	89 c2                	mov    %eax,%edx
f011976d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119773:	01 d0                	add    %edx,%eax
f0119775:	48                   	dec    %eax
f0119776:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f011977c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0119782:	ba 00 00 00 00       	mov    $0x0,%edx
f0119787:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f011978d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0119793:	29 d0                	sub    %edx,%eax
f0119795:	01 d8                	add    %ebx,%eax
f0119797:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011979c:	39 c1                	cmp    %eax,%ecx
f011979e:	0f 85 c4 00 00 00    	jne    f0119868 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f01197a4:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f01197aa:	89 c1                	mov    %eax,%ecx
f01197ac:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01197b3:	10 00 00 
f01197b6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01197bc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01197c1:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01197c7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01197cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01197d2:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f01197d8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01197de:	29 d0                	sub    %edx,%eax
f01197e0:	89 c3                	mov    %eax,%ebx
f01197e2:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01197e9:	10 00 00 
f01197ec:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01197f1:	0f b6 d0             	movzbl %al,%edx
f01197f4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01197fa:	01 d0                	add    %edx,%eax
f01197fc:	48                   	dec    %eax
f01197fd:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0119803:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119809:	ba 00 00 00 00       	mov    $0x0,%edx
f011980e:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0119814:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011981a:	29 d0                	sub    %edx,%eax
f011981c:	01 c3                	add    %eax,%ebx
f011981e:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0119825:	10 00 00 
f0119828:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011982d:	0f b6 c0             	movzbl %al,%eax
f0119830:	c1 e0 04             	shl    $0x4,%eax
f0119833:	89 c2                	mov    %eax,%edx
f0119835:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011983b:	01 d0                	add    %edx,%eax
f011983d:	48                   	dec    %eax
f011983e:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0119844:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011984a:	ba 00 00 00 00       	mov    $0x0,%edx
f011984f:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0119855:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011985b:	29 d0                	sub    %edx,%eax
f011985d:	01 d8                	add    %ebx,%eax
f011985f:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0119864:	39 c1                	cmp    %eax,%ecx
f0119866:	74 17                	je     f011987f <test_kmalloc_nextfit+0x6cb>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f0119868:	83 ec 04             	sub    $0x4,%esp
f011986b:	68 d4 b6 13 f0       	push   $0xf013b6d4
f0119870:	68 03 01 00 00       	push   $0x103
f0119875:	68 5a b4 13 f0       	push   $0xf013b45a
f011987a:	e8 86 69 fe ff       	call   f0100205 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011987f:	e8 5f a5 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0119884:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119887:	74 17                	je     f01198a0 <test_kmalloc_nextfit+0x6ec>
f0119889:	83 ec 04             	sub    $0x4,%esp
f011988c:	68 74 b4 13 f0       	push   $0xf013b474
f0119891:	68 05 01 00 00       	push   $0x105
f0119896:	68 5a b4 13 f0       	push   $0xf013b45a
f011989b:	e8 65 69 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f01198a0:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01198a3:	e8 b1 37 ff ff       	call   f010d059 <sys_calculate_free_frames>
f01198a8:	29 c3                	sub    %eax,%ebx
f01198aa:	89 d9                	mov    %ebx,%ecx
f01198ac:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01198b3:	10 00 00 
f01198b6:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01198bc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01198c1:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01198c7:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01198cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01198d2:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01198d8:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01198de:	29 d0                	sub    %edx,%eax
f01198e0:	89 c3                	mov    %eax,%ebx
f01198e2:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01198e9:	10 00 00 
f01198ec:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01198f1:	0f b6 d0             	movzbl %al,%edx
f01198f4:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01198fa:	01 d0                	add    %edx,%eax
f01198fc:	48                   	dec    %eax
f01198fd:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0119903:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119909:	ba 00 00 00 00       	mov    $0x0,%edx
f011990e:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0119914:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011991a:	29 d0                	sub    %edx,%eax
f011991c:	01 c3                	add    %eax,%ebx
f011991e:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0119925:	10 00 00 
f0119928:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011992d:	0f b6 c0             	movzbl %al,%eax
f0119930:	c1 e0 04             	shl    $0x4,%eax
f0119933:	89 c2                	mov    %eax,%edx
f0119935:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011993b:	01 d0                	add    %edx,%eax
f011993d:	48                   	dec    %eax
f011993e:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0119944:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011994a:	ba 00 00 00 00       	mov    $0x0,%edx
f011994f:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0119955:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011995b:	29 d0                	sub    %edx,%eax
f011995d:	01 d8                	add    %ebx,%eax
f011995f:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f0119964:	29 c2                	sub    %eax,%edx
f0119966:	89 d0                	mov    %edx,%eax
f0119968:	c1 e8 0c             	shr    $0xc,%eax
f011996b:	39 c1                	cmp    %eax,%ecx
f011996d:	74 17                	je     f0119986 <test_kmalloc_nextfit+0x7d2>
f011996f:	83 ec 04             	sub    $0x4,%esp
f0119972:	68 17 b7 13 f0       	push   $0xf013b717
f0119977:	68 06 01 00 00       	push   $0x106
f011997c:	68 5a b4 13 f0       	push   $0xf013b45a
f0119981:	e8 7f 68 fe ff       	call   f0100205 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f0119986:	e8 58 a4 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011998b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011998e:	e8 c6 36 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0119993:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f0119996:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f011999c:	83 ec 0c             	sub    $0xc,%esp
f011999f:	50                   	push   %eax
f01199a0:	e8 74 e1 fe ff       	call   f0107b19 <kfree>
f01199a5:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f01199a8:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f01199ae:	83 ec 0c             	sub    $0xc,%esp
f01199b1:	50                   	push   %eax
f01199b2:	e8 62 e1 fe ff       	call   f0107b19 <kfree>
f01199b7:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f01199ba:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
f01199c0:	83 ec 0c             	sub    $0xc,%esp
f01199c3:	50                   	push   %eax
f01199c4:	e8 50 e1 fe ff       	call   f0107b19 <kfree>
f01199c9:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f01199cc:	8b 85 9c fb ff ff    	mov    -0x464(%ebp),%eax
f01199d2:	83 ec 0c             	sub    $0xc,%esp
f01199d5:	50                   	push   %eax
f01199d6:	e8 3e e1 fe ff       	call   f0107b19 <kfree>
f01199db:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f01199de:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f01199e4:	83 ec 0c             	sub    $0xc,%esp
f01199e7:	50                   	push   %eax
f01199e8:	e8 2c e1 fe ff       	call   f0107b19 <kfree>
f01199ed:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f01199f0:	8b 85 b8 fb ff ff    	mov    -0x448(%ebp),%eax
f01199f6:	83 ec 0c             	sub    $0xc,%esp
f01199f9:	50                   	push   %eax
f01199fa:	e8 1a e1 fe ff       	call   f0107b19 <kfree>
f01199ff:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f0119a02:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f0119a08:	83 ec 0c             	sub    $0xc,%esp
f0119a0b:	50                   	push   %eax
f0119a0c:	e8 08 e1 fe ff       	call   f0107b19 <kfree>
f0119a11:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f0119a14:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f0119a1a:	83 ec 0c             	sub    $0xc,%esp
f0119a1d:	50                   	push   %eax
f0119a1e:	e8 f6 e0 fe ff       	call   f0107b19 <kfree>
f0119a23:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f0119a26:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0119a2c:	83 ec 0c             	sub    $0xc,%esp
f0119a2f:	50                   	push   %eax
f0119a30:	e8 e4 e0 fe ff       	call   f0107b19 <kfree>
f0119a35:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f0119a38:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f0119a3e:	83 ec 0c             	sub    $0xc,%esp
f0119a41:	50                   	push   %eax
f0119a42:	e8 d2 e0 fe ff       	call   f0107b19 <kfree>
f0119a47:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119a4a:	e8 94 a3 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0119a4f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119a52:	74 17                	je     f0119a6b <test_kmalloc_nextfit+0x8b7>
f0119a54:	83 ec 04             	sub    $0x4,%esp
f0119a57:	68 74 b4 13 f0       	push   $0xf013b474
f0119a5c:	68 17 01 00 00       	push   $0x117
f0119a61:	68 5a b4 13 f0       	push   $0xf013b45a
f0119a66:	e8 9a 67 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119a6b:	e8 e9 35 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0119a70:	89 c2                	mov    %eax,%edx
f0119a72:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119a75:	89 d1                	mov    %edx,%ecx
f0119a77:	29 c1                	sub    %eax,%ecx
f0119a79:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0119a80:	10 00 00 
f0119a83:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0119a89:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119a8e:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0119a94:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0119a9a:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a9f:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0119aa5:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0119aab:	29 d0                	sub    %edx,%eax
f0119aad:	89 c3                	mov    %eax,%ebx
f0119aaf:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0119ab6:	10 00 00 
f0119ab9:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0119abe:	0f b6 d0             	movzbl %al,%edx
f0119ac1:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0119ac7:	01 d0                	add    %edx,%eax
f0119ac9:	48                   	dec    %eax
f0119aca:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0119ad0:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119ad6:	ba 00 00 00 00       	mov    $0x0,%edx
f0119adb:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0119ae1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119ae7:	29 d0                	sub    %edx,%eax
f0119ae9:	01 c3                	add    %eax,%ebx
f0119aeb:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0119af2:	10 00 00 
f0119af5:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0119afa:	0f b6 c0             	movzbl %al,%eax
f0119afd:	c1 e0 04             	shl    $0x4,%eax
f0119b00:	89 c2                	mov    %eax,%edx
f0119b02:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0119b08:	01 d0                	add    %edx,%eax
f0119b0a:	48                   	dec    %eax
f0119b0b:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0119b11:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0119b17:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b1c:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0119b22:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0119b28:	29 d0                	sub    %edx,%eax
f0119b2a:	01 d8                	add    %ebx,%eax
f0119b2c:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f0119b31:	29 c2                	sub    %eax,%edx
f0119b33:	89 d0                	mov    %edx,%eax
f0119b35:	c1 e8 0c             	shr    $0xc,%eax
f0119b38:	39 c1                	cmp    %eax,%ecx
f0119b3a:	74 17                	je     f0119b53 <test_kmalloc_nextfit+0x99f>
f0119b3c:	83 ec 04             	sub    $0x4,%esp
f0119b3f:	68 28 b7 13 f0       	push   $0xf013b728
f0119b44:	68 18 01 00 00       	push   $0x118
f0119b49:	68 5a b4 13 f0       	push   $0xf013b45a
f0119b4e:	e8 b2 66 fe ff       	call   f0100205 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f0119b53:	e8 8b a2 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0119b58:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119b5b:	e8 f9 34 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0119b60:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f0119b63:	83 ec 0c             	sub    $0xc,%esp
f0119b66:	68 00 fc 0f 00       	push   $0xffc00
f0119b6b:	e8 c0 de fe ff       	call   f0107a30 <kmalloc>
f0119b70:	83 c4 10             	add    $0x10,%esp
f0119b73:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f0119b79:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0119b80:	10 00 00 
f0119b83:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0119b89:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119b8e:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0119b94:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0119b9a:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b9f:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0119ba5:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0119bab:	29 d0                	sub    %edx,%eax
f0119bad:	89 c1                	mov    %eax,%ecx
f0119baf:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0119bb6:	10 00 00 
f0119bb9:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0119bbe:	0f b6 d0             	movzbl %al,%edx
f0119bc1:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0119bc7:	01 d0                	add    %edx,%eax
f0119bc9:	48                   	dec    %eax
f0119bca:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0119bd0:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0119bd6:	ba 00 00 00 00       	mov    $0x0,%edx
f0119bdb:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0119be1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0119be7:	29 d0                	sub    %edx,%eax
f0119be9:	01 c1                	add    %eax,%ecx
f0119beb:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0119bf2:	10 00 00 
f0119bf5:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0119bfa:	0f b6 c0             	movzbl %al,%eax
f0119bfd:	c1 e0 04             	shl    $0x4,%eax
f0119c00:	89 c2                	mov    %eax,%edx
f0119c02:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0119c08:	01 d0                	add    %edx,%eax
f0119c0a:	48                   	dec    %eax
f0119c0b:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0119c11:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0119c17:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c1c:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0119c22:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0119c28:	29 d0                	sub    %edx,%eax
f0119c2a:	01 c8                	add    %ecx,%eax
f0119c2c:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0119c32:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119c38:	39 c2                	cmp    %eax,%edx
f0119c3a:	74 17                	je     f0119c53 <test_kmalloc_nextfit+0xa9f>
		panic("Next Fit not working correctly");
f0119c3c:	83 ec 04             	sub    $0x4,%esp
f0119c3f:	68 68 b7 13 f0       	push   $0xf013b768
f0119c44:	68 1f 01 00 00       	push   $0x11f
f0119c49:	68 5a b4 13 f0       	push   $0xf013b45a
f0119c4e:	e8 b2 65 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119c53:	e8 8b a1 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0119c58:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119c5b:	74 17                	je     f0119c74 <test_kmalloc_nextfit+0xac0>
f0119c5d:	83 ec 04             	sub    $0x4,%esp
f0119c60:	68 74 b4 13 f0       	push   $0xf013b474
f0119c65:	68 20 01 00 00       	push   $0x120
f0119c6a:	68 5a b4 13 f0       	push   $0xf013b45a
f0119c6f:	e8 91 65 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119c74:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119c77:	e8 dd 33 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0119c7c:	29 c3                	sub    %eax,%ebx
f0119c7e:	89 d8                	mov    %ebx,%eax
f0119c80:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119c85:	74 17                	je     f0119c9e <test_kmalloc_nextfit+0xaea>
f0119c87:	83 ec 04             	sub    $0x4,%esp
f0119c8a:	68 17 b7 13 f0       	push   $0xf013b717
f0119c8f:	68 21 01 00 00       	push   $0x121
f0119c94:	68 5a b4 13 f0       	push   $0xf013b45a
f0119c99:	e8 67 65 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119c9e:	e8 40 a1 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0119ca3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119ca6:	e8 ae 33 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0119cab:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f0119cae:	83 ec 0c             	sub    $0xc,%esp
f0119cb1:	68 00 04 00 00       	push   $0x400
f0119cb6:	e8 75 dd fe ff       	call   f0107a30 <kmalloc>
f0119cbb:	83 c4 10             	add    $0x10,%esp
f0119cbe:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f0119cc4:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0119ccb:	10 00 00 
f0119cce:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0119cd4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119cd9:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0119cdf:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0119ce5:	ba 00 00 00 00       	mov    $0x0,%edx
f0119cea:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0119cf0:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0119cf6:	29 d0                	sub    %edx,%eax
f0119cf8:	89 c1                	mov    %eax,%ecx
f0119cfa:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0119d01:	10 00 00 
f0119d04:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0119d09:	0f b6 d0             	movzbl %al,%edx
f0119d0c:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0119d12:	01 d0                	add    %edx,%eax
f0119d14:	48                   	dec    %eax
f0119d15:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0119d1b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0119d21:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d26:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0119d2c:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0119d32:	29 d0                	sub    %edx,%eax
f0119d34:	01 c1                	add    %eax,%ecx
f0119d36:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0119d3d:	10 00 00 
f0119d40:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0119d45:	0f b6 c0             	movzbl %al,%eax
f0119d48:	c1 e0 04             	shl    $0x4,%eax
f0119d4b:	89 c2                	mov    %eax,%edx
f0119d4d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0119d53:	01 d0                	add    %edx,%eax
f0119d55:	48                   	dec    %eax
f0119d56:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0119d5c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0119d62:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d67:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0119d6d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0119d73:	29 d0                	sub    %edx,%eax
f0119d75:	01 c8                	add    %ecx,%eax
f0119d77:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f0119d7d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119d83:	39 c2                	cmp    %eax,%edx
f0119d85:	74 17                	je     f0119d9e <test_kmalloc_nextfit+0xbea>
		panic("Next Fit not working correctly");
f0119d87:	83 ec 04             	sub    $0x4,%esp
f0119d8a:	68 68 b7 13 f0       	push   $0xf013b768
f0119d8f:	68 27 01 00 00       	push   $0x127
f0119d94:	68 5a b4 13 f0       	push   $0xf013b45a
f0119d99:	e8 67 64 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119d9e:	e8 40 a0 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0119da3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119da6:	74 17                	je     f0119dbf <test_kmalloc_nextfit+0xc0b>
f0119da8:	83 ec 04             	sub    $0x4,%esp
f0119dab:	68 74 b4 13 f0       	push   $0xf013b474
f0119db0:	68 28 01 00 00       	push   $0x128
f0119db5:	68 5a b4 13 f0       	push   $0xf013b45a
f0119dba:	e8 46 64 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119dbf:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119dc2:	e8 92 32 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0119dc7:	29 c3                	sub    %eax,%ebx
f0119dc9:	89 d8                	mov    %ebx,%eax
f0119dcb:	83 f8 01             	cmp    $0x1,%eax
f0119dce:	74 17                	je     f0119de7 <test_kmalloc_nextfit+0xc33>
f0119dd0:	83 ec 04             	sub    $0x4,%esp
f0119dd3:	68 17 b7 13 f0       	push   $0xf013b717
f0119dd8:	68 29 01 00 00       	push   $0x129
f0119ddd:	68 5a b4 13 f0       	push   $0xf013b45a
f0119de2:	e8 1e 64 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119de7:	e8 f7 9f fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0119dec:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119def:	e8 65 32 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0119df4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f0119df7:	83 ec 0c             	sub    $0xc,%esp
f0119dfa:	68 00 00 50 00       	push   $0x500000
f0119dff:	e8 2c dc fe ff       	call   f0107a30 <kmalloc>
f0119e04:	83 c4 10             	add    $0x10,%esp
f0119e07:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0119e0d:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f0119e14:	10 00 00 
f0119e17:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0119e1d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119e22:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f0119e28:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0119e2e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e33:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f0119e39:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0119e3f:	29 d0                	sub    %edx,%eax
f0119e41:	89 c1                	mov    %eax,%ecx
f0119e43:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0119e4a:	10 00 00 
f0119e4d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0119e52:	0f b6 d0             	movzbl %al,%edx
f0119e55:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0119e5b:	01 d0                	add    %edx,%eax
f0119e5d:	48                   	dec    %eax
f0119e5e:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0119e64:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0119e6a:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e6f:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0119e75:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0119e7b:	29 d0                	sub    %edx,%eax
f0119e7d:	01 c1                	add    %eax,%ecx
f0119e7f:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f0119e86:	10 00 00 
f0119e89:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0119e8e:	0f b6 c0             	movzbl %al,%eax
f0119e91:	c1 e0 04             	shl    $0x4,%eax
f0119e94:	89 c2                	mov    %eax,%edx
f0119e96:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0119e9c:	01 d0                	add    %edx,%eax
f0119e9e:	48                   	dec    %eax
f0119e9f:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f0119ea5:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0119eab:	ba 00 00 00 00       	mov    $0x0,%edx
f0119eb0:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f0119eb6:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0119ebc:	29 d0                	sub    %edx,%eax
f0119ebe:	01 c8                	add    %ecx,%eax
f0119ec0:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f0119ec6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119ecc:	39 c2                	cmp    %eax,%edx
f0119ece:	74 17                	je     f0119ee7 <test_kmalloc_nextfit+0xd33>
		panic("Next Fit not working correctly");
f0119ed0:	83 ec 04             	sub    $0x4,%esp
f0119ed3:	68 68 b7 13 f0       	push   $0xf013b768
f0119ed8:	68 2f 01 00 00       	push   $0x12f
f0119edd:	68 5a b4 13 f0       	push   $0xf013b45a
f0119ee2:	e8 1e 63 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119ee7:	e8 f7 9e fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0119eec:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119eef:	74 17                	je     f0119f08 <test_kmalloc_nextfit+0xd54>
f0119ef1:	83 ec 04             	sub    $0x4,%esp
f0119ef4:	68 74 b4 13 f0       	push   $0xf013b474
f0119ef9:	68 30 01 00 00       	push   $0x130
f0119efe:	68 5a b4 13 f0       	push   $0xf013b45a
f0119f03:	e8 fd 62 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119f08:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119f0b:	e8 49 31 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0119f10:	29 c3                	sub    %eax,%ebx
f0119f12:	89 d8                	mov    %ebx,%eax
f0119f14:	3d 00 05 00 00       	cmp    $0x500,%eax
f0119f19:	74 17                	je     f0119f32 <test_kmalloc_nextfit+0xd7e>
f0119f1b:	83 ec 04             	sub    $0x4,%esp
f0119f1e:	68 17 b7 13 f0       	push   $0xf013b717
f0119f23:	68 31 01 00 00       	push   $0x131
f0119f28:	68 5a b4 13 f0       	push   $0xf013b45a
f0119f2d:	e8 d3 62 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119f32:	e8 ac 9e fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0119f37:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119f3a:	e8 1a 31 ff ff       	call   f010d059 <sys_calculate_free_frames>
f0119f3f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f0119f42:	83 ec 0c             	sub    $0xc,%esp
f0119f45:	68 00 00 10 00       	push   $0x100000
f0119f4a:	e8 e1 da fe ff       	call   f0107a30 <kmalloc>
f0119f4f:	83 c4 10             	add    $0x10,%esp
f0119f52:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f0119f58:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f0119f5f:	10 00 00 
f0119f62:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0119f68:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119f6d:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f0119f73:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0119f79:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f7e:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f0119f84:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0119f8a:	29 d0                	sub    %edx,%eax
f0119f8c:	89 c1                	mov    %eax,%ecx
f0119f8e:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0119f95:	10 00 00 
f0119f98:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0119f9d:	0f b6 d0             	movzbl %al,%edx
f0119fa0:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0119fa6:	01 d0                	add    %edx,%eax
f0119fa8:	48                   	dec    %eax
f0119fa9:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0119faf:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119fb5:	ba 00 00 00 00       	mov    $0x0,%edx
f0119fba:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0119fc0:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119fc6:	29 d0                	sub    %edx,%eax
f0119fc8:	01 c1                	add    %eax,%ecx
f0119fca:	c7 85 84 fe ff ff 00 	movl   $0x1000,-0x17c(%ebp)
f0119fd1:	10 00 00 
f0119fd4:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0119fd9:	0f b6 c0             	movzbl %al,%eax
f0119fdc:	c1 e0 04             	shl    $0x4,%eax
f0119fdf:	89 c2                	mov    %eax,%edx
f0119fe1:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0119fe7:	01 d0                	add    %edx,%eax
f0119fe9:	48                   	dec    %eax
f0119fea:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
f0119ff0:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119ff6:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ffb:	f7 b5 84 fe ff ff    	divl   -0x17c(%ebp)
f011a001:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011a007:	29 d0                	sub    %edx,%eax
f011a009:	01 c8                	add    %ecx,%eax
f011a00b:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f011a011:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a017:	39 c2                	cmp    %eax,%edx
f011a019:	74 17                	je     f011a032 <test_kmalloc_nextfit+0xe7e>
		panic("Next Fit not working correctly");
f011a01b:	83 ec 04             	sub    $0x4,%esp
f011a01e:	68 68 b7 13 f0       	push   $0xf013b768
f011a023:	68 37 01 00 00       	push   $0x137
f011a028:	68 5a b4 13 f0       	push   $0xf013b45a
f011a02d:	e8 d3 61 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a032:	e8 ac 9d fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011a037:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a03a:	74 17                	je     f011a053 <test_kmalloc_nextfit+0xe9f>
f011a03c:	83 ec 04             	sub    $0x4,%esp
f011a03f:	68 74 b4 13 f0       	push   $0xf013b474
f011a044:	68 38 01 00 00       	push   $0x138
f011a049:	68 5a b4 13 f0       	push   $0xf013b45a
f011a04e:	e8 b2 61 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011a053:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a056:	e8 fe 2f ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a05b:	29 c3                	sub    %eax,%ebx
f011a05d:	89 d8                	mov    %ebx,%eax
f011a05f:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a064:	74 17                	je     f011a07d <test_kmalloc_nextfit+0xec9>
f011a066:	83 ec 04             	sub    $0x4,%esp
f011a069:	68 17 b7 13 f0       	push   $0xf013b717
f011a06e:	68 39 01 00 00       	push   $0x139
f011a073:	68 5a b4 13 f0       	push   $0xf013b45a
f011a078:	e8 88 61 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a07d:	e8 61 9d fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011a082:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a085:	e8 cf 2f ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a08a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f011a08d:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f011a093:	83 ec 0c             	sub    $0xc,%esp
f011a096:	50                   	push   %eax
f011a097:	e8 7d da fe ff       	call   f0107b19 <kfree>
f011a09c:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a09f:	e8 3f 9d fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011a0a4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a0a7:	74 17                	je     f011a0c0 <test_kmalloc_nextfit+0xf0c>
f011a0a9:	83 ec 04             	sub    $0x4,%esp
f011a0ac:	68 74 b4 13 f0       	push   $0xf013b474
f011a0b1:	68 3e 01 00 00       	push   $0x13e
f011a0b6:	68 5a b4 13 f0       	push   $0xf013b45a
f011a0bb:	e8 45 61 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a0c0:	e8 94 2f ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a0c5:	89 c2                	mov    %eax,%edx
f011a0c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a0ca:	29 c2                	sub    %eax,%edx
f011a0cc:	89 d0                	mov    %edx,%eax
f011a0ce:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a0d3:	74 17                	je     f011a0ec <test_kmalloc_nextfit+0xf38>
f011a0d5:	83 ec 04             	sub    $0x4,%esp
f011a0d8:	68 28 b7 13 f0       	push   $0xf013b728
f011a0dd:	68 3f 01 00 00       	push   $0x13f
f011a0e2:	68 5a b4 13 f0       	push   $0xf013b45a
f011a0e7:	e8 19 61 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a0ec:	e8 f2 9c fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011a0f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a0f4:	e8 60 2f ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a0f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f011a0fc:	83 ec 0c             	sub    $0xc,%esp
f011a0ff:	68 00 04 00 00       	push   $0x400
f011a104:	e8 27 d9 fe ff       	call   f0107a30 <kmalloc>
f011a109:	83 c4 10             	add    $0x10,%esp
f011a10c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f011a112:	c7 85 7c fe ff ff 00 	movl   $0x1000,-0x184(%ebp)
f011a119:	10 00 00 
f011a11c:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011a122:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a127:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
f011a12d:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011a133:	ba 00 00 00 00       	mov    $0x0,%edx
f011a138:	f7 b5 7c fe ff ff    	divl   -0x184(%ebp)
f011a13e:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011a144:	29 d0                	sub    %edx,%eax
f011a146:	89 c1                	mov    %eax,%ecx
f011a148:	c7 85 74 fe ff ff 00 	movl   $0x1000,-0x18c(%ebp)
f011a14f:	10 00 00 
f011a152:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011a157:	0f b6 d0             	movzbl %al,%edx
f011a15a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011a160:	01 d0                	add    %edx,%eax
f011a162:	48                   	dec    %eax
f011a163:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
f011a169:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011a16f:	ba 00 00 00 00       	mov    $0x0,%edx
f011a174:	f7 b5 74 fe ff ff    	divl   -0x18c(%ebp)
f011a17a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011a180:	29 d0                	sub    %edx,%eax
f011a182:	01 c1                	add    %eax,%ecx
f011a184:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f011a18b:	10 00 00 
f011a18e:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011a193:	0f b6 c0             	movzbl %al,%eax
f011a196:	c1 e0 04             	shl    $0x4,%eax
f011a199:	89 c2                	mov    %eax,%edx
f011a19b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011a1a1:	01 d0                	add    %edx,%eax
f011a1a3:	48                   	dec    %eax
f011a1a4:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f011a1aa:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011a1b0:	ba 00 00 00 00       	mov    $0x0,%edx
f011a1b5:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f011a1bb:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011a1c1:	29 d0                	sub    %edx,%eax
f011a1c3:	01 c8                	add    %ecx,%eax
f011a1c5:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f011a1cb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a1d1:	39 c2                	cmp    %eax,%edx
f011a1d3:	74 17                	je     f011a1ec <test_kmalloc_nextfit+0x1038>
		panic("Next Fit not working correctly");
f011a1d5:	83 ec 04             	sub    $0x4,%esp
f011a1d8:	68 68 b7 13 f0       	push   $0xf013b768
f011a1dd:	68 45 01 00 00       	push   $0x145
f011a1e2:	68 5a b4 13 f0       	push   $0xf013b45a
f011a1e7:	e8 19 60 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a1ec:	e8 f2 9b fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011a1f1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a1f4:	74 17                	je     f011a20d <test_kmalloc_nextfit+0x1059>
f011a1f6:	83 ec 04             	sub    $0x4,%esp
f011a1f9:	68 74 b4 13 f0       	push   $0xf013b474
f011a1fe:	68 46 01 00 00       	push   $0x146
f011a203:	68 5a b4 13 f0       	push   $0xf013b45a
f011a208:	e8 f8 5f fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f011a20d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a210:	e8 44 2e ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a215:	29 c3                	sub    %eax,%ebx
f011a217:	89 d8                	mov    %ebx,%eax
f011a219:	83 f8 01             	cmp    $0x1,%eax
f011a21c:	74 17                	je     f011a235 <test_kmalloc_nextfit+0x1081>
f011a21e:	83 ec 04             	sub    $0x4,%esp
f011a221:	68 17 b7 13 f0       	push   $0xf013b717
f011a226:	68 47 01 00 00       	push   $0x147
f011a22b:	68 5a b4 13 f0       	push   $0xf013b45a
f011a230:	e8 d0 5f fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a235:	e8 a9 9b fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011a23a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a23d:	e8 17 2e ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a242:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f011a245:	83 ec 0c             	sub    $0xc,%esp
f011a248:	68 00 e0 1f 00       	push   $0x1fe000
f011a24d:	e8 de d7 fe ff       	call   f0107a30 <kmalloc>
f011a252:	83 c4 10             	add    $0x10,%esp
f011a255:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f011a25b:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f011a262:	10 00 00 
f011a265:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011a26b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a270:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f011a276:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011a27c:	ba 00 00 00 00       	mov    $0x0,%edx
f011a281:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f011a287:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011a28d:	29 d0                	sub    %edx,%eax
f011a28f:	89 c1                	mov    %eax,%ecx
f011a291:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f011a298:	10 00 00 
f011a29b:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011a2a0:	0f b6 d0             	movzbl %al,%edx
f011a2a3:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011a2a9:	01 d0                	add    %edx,%eax
f011a2ab:	48                   	dec    %eax
f011a2ac:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f011a2b2:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011a2b8:	ba 00 00 00 00       	mov    $0x0,%edx
f011a2bd:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f011a2c3:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011a2c9:	29 d0                	sub    %edx,%eax
f011a2cb:	01 c1                	add    %eax,%ecx
f011a2cd:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f011a2d4:	10 00 00 
f011a2d7:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011a2dc:	0f b6 c0             	movzbl %al,%eax
f011a2df:	c1 e0 04             	shl    $0x4,%eax
f011a2e2:	89 c2                	mov    %eax,%edx
f011a2e4:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011a2ea:	01 d0                	add    %edx,%eax
f011a2ec:	48                   	dec    %eax
f011a2ed:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f011a2f3:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011a2f9:	ba 00 00 00 00       	mov    $0x0,%edx
f011a2fe:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f011a304:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011a30a:	29 d0                	sub    %edx,%eax
f011a30c:	01 c8                	add    %ecx,%eax
f011a30e:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f011a314:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a31a:	39 c2                	cmp    %eax,%edx
f011a31c:	74 17                	je     f011a335 <test_kmalloc_nextfit+0x1181>
		panic("Next Fit not working correctly");
f011a31e:	83 ec 04             	sub    $0x4,%esp
f011a321:	68 68 b7 13 f0       	push   $0xf013b768
f011a326:	68 4d 01 00 00       	push   $0x14d
f011a32b:	68 5a b4 13 f0       	push   $0xf013b45a
f011a330:	e8 d0 5e fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a335:	e8 a9 9a fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011a33a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a33d:	74 17                	je     f011a356 <test_kmalloc_nextfit+0x11a2>
f011a33f:	83 ec 04             	sub    $0x4,%esp
f011a342:	68 74 b4 13 f0       	push   $0xf013b474
f011a347:	68 4e 01 00 00       	push   $0x14e
f011a34c:	68 5a b4 13 f0       	push   $0xf013b45a
f011a351:	e8 af 5e fe ff       	call   f0100205 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a356:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a359:	e8 fb 2c ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a35e:	29 c3                	sub    %eax,%ebx
f011a360:	89 d8                	mov    %ebx,%eax
f011a362:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f011a367:	74 17                	je     f011a380 <test_kmalloc_nextfit+0x11cc>
f011a369:	83 ec 04             	sub    $0x4,%esp
f011a36c:	68 17 b7 13 f0       	push   $0xf013b717
f011a371:	68 50 01 00 00       	push   $0x150
f011a376:	68 5a b4 13 f0       	push   $0xf013b45a
f011a37b:	e8 85 5e fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a380:	e8 5e 9a fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011a385:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a388:	e8 cc 2c ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a38d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f011a390:	83 ec 0c             	sub    $0xc,%esp
f011a393:	68 00 00 08 00       	push   $0x80000
f011a398:	e8 93 d6 fe ff       	call   f0107a30 <kmalloc>
f011a39d:	83 c4 10             	add    $0x10,%esp
f011a3a0:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f011a3a6:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f011a3ad:	10 00 00 
f011a3b0:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011a3b6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a3bb:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f011a3c1:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011a3c7:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3cc:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f011a3d2:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011a3d8:	29 d0                	sub    %edx,%eax
f011a3da:	89 c1                	mov    %eax,%ecx
f011a3dc:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f011a3e3:	10 00 00 
f011a3e6:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011a3eb:	0f b6 d0             	movzbl %al,%edx
f011a3ee:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011a3f4:	01 d0                	add    %edx,%eax
f011a3f6:	48                   	dec    %eax
f011a3f7:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f011a3fd:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011a403:	ba 00 00 00 00       	mov    $0x0,%edx
f011a408:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f011a40e:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011a414:	29 d0                	sub    %edx,%eax
f011a416:	01 c1                	add    %eax,%ecx
f011a418:	c7 85 3c fe ff ff 00 	movl   $0x1000,-0x1c4(%ebp)
f011a41f:	10 00 00 
f011a422:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011a427:	0f b6 c0             	movzbl %al,%eax
f011a42a:	c1 e0 04             	shl    $0x4,%eax
f011a42d:	89 c2                	mov    %eax,%edx
f011a42f:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011a435:	01 d0                	add    %edx,%eax
f011a437:	48                   	dec    %eax
f011a438:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
f011a43e:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011a444:	ba 00 00 00 00       	mov    $0x0,%edx
f011a449:	f7 b5 3c fe ff ff    	divl   -0x1c4(%ebp)
f011a44f:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011a455:	29 d0                	sub    %edx,%eax
f011a457:	01 c8                	add    %ecx,%eax
f011a459:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f011a45f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a465:	39 c2                	cmp    %eax,%edx
f011a467:	74 17                	je     f011a480 <test_kmalloc_nextfit+0x12cc>
		panic("Next Fit not working correctly");
f011a469:	83 ec 04             	sub    $0x4,%esp
f011a46c:	68 68 b7 13 f0       	push   $0xf013b768
f011a471:	68 56 01 00 00       	push   $0x156
f011a476:	68 5a b4 13 f0       	push   $0xf013b45a
f011a47b:	e8 85 5d fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a480:	e8 5e 99 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011a485:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a488:	74 17                	je     f011a4a1 <test_kmalloc_nextfit+0x12ed>
f011a48a:	83 ec 04             	sub    $0x4,%esp
f011a48d:	68 74 b4 13 f0       	push   $0xf013b474
f011a492:	68 57 01 00 00       	push   $0x157
f011a497:	68 5a b4 13 f0       	push   $0xf013b45a
f011a49c:	e8 64 5d fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a4a1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a4a4:	e8 b0 2b ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a4a9:	29 c3                	sub    %eax,%ebx
f011a4ab:	89 d8                	mov    %ebx,%eax
f011a4ad:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a4b2:	74 17                	je     f011a4cb <test_kmalloc_nextfit+0x1317>
f011a4b4:	83 ec 04             	sub    $0x4,%esp
f011a4b7:	68 17 b7 13 f0       	push   $0xf013b717
f011a4bc:	68 58 01 00 00       	push   $0x158
f011a4c1:	68 5a b4 13 f0       	push   $0xf013b45a
f011a4c6:	e8 3a 5d fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f011a4cb:	83 ec 0c             	sub    $0xc,%esp
f011a4ce:	68 88 b7 13 f0       	push   $0xf013b788
f011a4d3:	e8 36 68 fe ff       	call   f0100d0e <cprintf>
f011a4d8:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f011a4db:	e8 03 99 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011a4e0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a4e3:	e8 71 2b ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a4e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f011a4eb:	83 ec 0c             	sub    $0xc,%esp
f011a4ee:	68 00 00 38 00       	push   $0x380000
f011a4f3:	e8 38 d5 fe ff       	call   f0107a30 <kmalloc>
f011a4f8:	83 c4 10             	add    $0x10,%esp
f011a4fb:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011a501:	c7 85 34 fe ff ff 00 	movl   $0x1000,-0x1cc(%ebp)
f011a508:	10 00 00 
f011a50b:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011a511:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a516:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
f011a51c:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011a522:	ba 00 00 00 00       	mov    $0x0,%edx
f011a527:	f7 b5 34 fe ff ff    	divl   -0x1cc(%ebp)
f011a52d:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011a533:	29 d0                	sub    %edx,%eax
f011a535:	89 c1                	mov    %eax,%ecx
f011a537:	c7 85 2c fe ff ff 00 	movl   $0x1000,-0x1d4(%ebp)
f011a53e:	10 00 00 
f011a541:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011a546:	0f b6 d0             	movzbl %al,%edx
f011a549:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f011a54f:	01 d0                	add    %edx,%eax
f011a551:	48                   	dec    %eax
f011a552:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
f011a558:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f011a55e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a563:	f7 b5 2c fe ff ff    	divl   -0x1d4(%ebp)
f011a569:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f011a56f:	29 d0                	sub    %edx,%eax
f011a571:	01 c1                	add    %eax,%ecx
f011a573:	c7 85 24 fe ff ff 00 	movl   $0x1000,-0x1dc(%ebp)
f011a57a:	10 00 00 
f011a57d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011a582:	0f b6 c0             	movzbl %al,%eax
f011a585:	c1 e0 04             	shl    $0x4,%eax
f011a588:	89 c2                	mov    %eax,%edx
f011a58a:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f011a590:	01 d0                	add    %edx,%eax
f011a592:	48                   	dec    %eax
f011a593:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
f011a599:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f011a59f:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5a4:	f7 b5 24 fe ff ff    	divl   -0x1dc(%ebp)
f011a5aa:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f011a5b0:	29 d0                	sub    %edx,%eax
f011a5b2:	01 c8                	add    %ecx,%eax
f011a5b4:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011a5ba:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a5c0:	39 c2                	cmp    %eax,%edx
f011a5c2:	74 17                	je     f011a5db <test_kmalloc_nextfit+0x1427>
		panic("Next Fit not working correctly");
f011a5c4:	83 ec 04             	sub    $0x4,%esp
f011a5c7:	68 68 b7 13 f0       	push   $0xf013b768
f011a5cc:	68 62 01 00 00       	push   $0x162
f011a5d1:	68 5a b4 13 f0       	push   $0xf013b45a
f011a5d6:	e8 2a 5c fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a5db:	e8 03 98 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011a5e0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a5e3:	74 17                	je     f011a5fc <test_kmalloc_nextfit+0x1448>
f011a5e5:	83 ec 04             	sub    $0x4,%esp
f011a5e8:	68 74 b4 13 f0       	push   $0xf013b474
f011a5ed:	68 63 01 00 00       	push   $0x163
f011a5f2:	68 5a b4 13 f0       	push   $0xf013b45a
f011a5f7:	e8 09 5c fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a5fc:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a5ff:	e8 55 2a ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a604:	29 c3                	sub    %eax,%ebx
f011a606:	89 d8                	mov    %ebx,%eax
f011a608:	3d 80 03 00 00       	cmp    $0x380,%eax
f011a60d:	74 17                	je     f011a626 <test_kmalloc_nextfit+0x1472>
f011a60f:	83 ec 04             	sub    $0x4,%esp
f011a612:	68 17 b7 13 f0       	push   $0xf013b717
f011a617:	68 64 01 00 00       	push   $0x164
f011a61c:	68 5a b4 13 f0       	push   $0xf013b45a
f011a621:	e8 df 5b fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a626:	e8 b8 97 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011a62b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a62e:	e8 26 2a ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a633:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f011a636:	8b 85 e8 fb ff ff    	mov    -0x418(%ebp),%eax
f011a63c:	83 ec 0c             	sub    $0xc,%esp
f011a63f:	50                   	push   %eax
f011a640:	e8 d4 d4 fe ff       	call   f0107b19 <kfree>
f011a645:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a648:	e8 96 97 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011a64d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a650:	74 17                	je     f011a669 <test_kmalloc_nextfit+0x14b5>
f011a652:	83 ec 04             	sub    $0x4,%esp
f011a655:	68 74 b4 13 f0       	push   $0xf013b474
f011a65a:	68 69 01 00 00       	push   $0x169
f011a65f:	68 5a b4 13 f0       	push   $0xf013b45a
f011a664:	e8 9c 5b fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a669:	e8 eb 29 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a66e:	89 c2                	mov    %eax,%edx
f011a670:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a673:	29 c2                	sub    %eax,%edx
f011a675:	89 d0                	mov    %edx,%eax
f011a677:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a67c:	74 17                	je     f011a695 <test_kmalloc_nextfit+0x14e1>
f011a67e:	83 ec 04             	sub    $0x4,%esp
f011a681:	68 28 b7 13 f0       	push   $0xf013b728
f011a686:	68 6a 01 00 00       	push   $0x16a
f011a68b:	68 5a b4 13 f0       	push   $0xf013b45a
f011a690:	e8 70 5b fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a695:	e8 49 97 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011a69a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a69d:	e8 b7 29 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a6a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f011a6a5:	83 ec 0c             	sub    $0xc,%esp
f011a6a8:	68 00 fc 3f 00       	push   $0x3ffc00
f011a6ad:	e8 7e d3 fe ff       	call   f0107a30 <kmalloc>
f011a6b2:	83 c4 10             	add    $0x10,%esp
f011a6b5:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f011a6bb:	c7 85 1c fe ff ff 00 	movl   $0x1000,-0x1e4(%ebp)
f011a6c2:	10 00 00 
f011a6c5:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f011a6cb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a6d0:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
f011a6d6:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f011a6dc:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6e1:	f7 b5 1c fe ff ff    	divl   -0x1e4(%ebp)
f011a6e7:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f011a6ed:	29 d0                	sub    %edx,%eax
f011a6ef:	89 c1                	mov    %eax,%ecx
f011a6f1:	c7 85 14 fe ff ff 00 	movl   $0x1000,-0x1ec(%ebp)
f011a6f8:	10 00 00 
f011a6fb:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011a700:	0f b6 d0             	movzbl %al,%edx
f011a703:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f011a709:	01 d0                	add    %edx,%eax
f011a70b:	48                   	dec    %eax
f011a70c:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
f011a712:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f011a718:	ba 00 00 00 00       	mov    $0x0,%edx
f011a71d:	f7 b5 14 fe ff ff    	divl   -0x1ec(%ebp)
f011a723:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f011a729:	29 d0                	sub    %edx,%eax
f011a72b:	01 c1                	add    %eax,%ecx
f011a72d:	c7 85 0c fe ff ff 00 	movl   $0x1000,-0x1f4(%ebp)
f011a734:	10 00 00 
f011a737:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011a73c:	0f b6 c0             	movzbl %al,%eax
f011a73f:	c1 e0 04             	shl    $0x4,%eax
f011a742:	89 c2                	mov    %eax,%edx
f011a744:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f011a74a:	01 d0                	add    %edx,%eax
f011a74c:	48                   	dec    %eax
f011a74d:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
f011a753:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011a759:	ba 00 00 00 00       	mov    $0x0,%edx
f011a75e:	f7 b5 0c fe ff ff    	divl   -0x1f4(%ebp)
f011a764:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011a76a:	29 d0                	sub    %edx,%eax
f011a76c:	01 c8                	add    %ecx,%eax
f011a76e:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f011a774:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a77a:	39 c2                	cmp    %eax,%edx
f011a77c:	74 17                	je     f011a795 <test_kmalloc_nextfit+0x15e1>
		panic("Next Fit not working correctly");
f011a77e:	83 ec 04             	sub    $0x4,%esp
f011a781:	68 68 b7 13 f0       	push   $0xf013b768
f011a786:	68 70 01 00 00       	push   $0x170
f011a78b:	68 5a b4 13 f0       	push   $0xf013b45a
f011a790:	e8 70 5a fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a795:	e8 49 96 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011a79a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a79d:	74 17                	je     f011a7b6 <test_kmalloc_nextfit+0x1602>
f011a79f:	83 ec 04             	sub    $0x4,%esp
f011a7a2:	68 74 b4 13 f0       	push   $0xf013b474
f011a7a7:	68 71 01 00 00       	push   $0x171
f011a7ac:	68 5a b4 13 f0       	push   $0xf013b45a
f011a7b1:	e8 4f 5a fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011a7b6:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a7b9:	e8 9b 28 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a7be:	29 c3                	sub    %eax,%ebx
f011a7c0:	89 d8                	mov    %ebx,%eax
f011a7c2:	3d 00 04 00 00       	cmp    $0x400,%eax
f011a7c7:	74 17                	je     f011a7e0 <test_kmalloc_nextfit+0x162c>
f011a7c9:	83 ec 04             	sub    $0x4,%esp
f011a7cc:	68 17 b7 13 f0       	push   $0xf013b717
f011a7d1:	68 72 01 00 00       	push   $0x172
f011a7d6:	68 5a b4 13 f0       	push   $0xf013b45a
f011a7db:	e8 25 5a fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f011a7e0:	83 ec 0c             	sub    $0xc,%esp
f011a7e3:	68 c4 b7 13 f0       	push   $0xf013b7c4
f011a7e8:	e8 21 65 fe ff       	call   f0100d0e <cprintf>
f011a7ed:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f011a7f0:	e8 ee 95 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011a7f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a7f8:	e8 5c 28 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a7fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f011a800:	83 ec 0c             	sub    $0xc,%esp
f011a803:	68 00 00 60 00       	push   $0x600000
f011a808:	e8 23 d2 fe ff       	call   f0107a30 <kmalloc>
f011a80d:	83 c4 10             	add    $0x10,%esp
f011a810:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != 0x0)
f011a816:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a81c:	85 c0                	test   %eax,%eax
f011a81e:	74 17                	je     f011a837 <test_kmalloc_nextfit+0x1683>
		panic("Next Fit not working correctly");
f011a820:	83 ec 04             	sub    $0x4,%esp
f011a823:	68 68 b7 13 f0       	push   $0xf013b768
f011a828:	68 7c 01 00 00       	push   $0x17c
f011a82d:	68 5a b4 13 f0       	push   $0xf013b45a
f011a832:	e8 ce 59 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a837:	e8 a7 95 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011a83c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a83f:	74 17                	je     f011a858 <test_kmalloc_nextfit+0x16a4>
f011a841:	83 ec 04             	sub    $0x4,%esp
f011a844:	68 74 b4 13 f0       	push   $0xf013b474
f011a849:	68 7d 01 00 00       	push   $0x17d
f011a84e:	68 5a b4 13 f0       	push   $0xf013b45a
f011a853:	e8 ad 59 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f011a858:	e8 fc 27 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a85d:	89 c2                	mov    %eax,%edx
f011a85f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a862:	39 c2                	cmp    %eax,%edx
f011a864:	74 17                	je     f011a87d <test_kmalloc_nextfit+0x16c9>
f011a866:	83 ec 04             	sub    $0x4,%esp
f011a869:	68 17 b7 13 f0       	push   $0xf013b717
f011a86e:	68 7e 01 00 00       	push   $0x17e
f011a873:	68 5a b4 13 f0       	push   $0xf013b45a
f011a878:	e8 88 59 fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f011a87d:	83 ec 0c             	sub    $0xc,%esp
f011a880:	68 fc b7 13 f0       	push   $0xf013b7fc
f011a885:	e8 84 64 fe ff       	call   f0100d0e <cprintf>
f011a88a:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f011a88d:	83 ec 0c             	sub    $0xc,%esp
f011a890:	68 38 b8 13 f0       	push   $0xf013b838
f011a895:	e8 74 64 fe ff       	call   f0100d0e <cprintf>
f011a89a:	83 c4 10             	add    $0x10,%esp
	return 1;
f011a89d:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011a8a2:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a8a5:	5b                   	pop    %ebx
f011a8a6:	5f                   	pop    %edi
f011a8a7:	5d                   	pop    %ebp
f011a8a8:	c3                   	ret    

f011a8a9 <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f011a8a9:	55                   	push   %ebp
f011a8aa:	89 e5                	mov    %esp,%ebp
f011a8ac:	57                   	push   %edi
f011a8ad:	53                   	push   %ebx
f011a8ae:	81 ec 90 01 00 00    	sub    $0x190,%esp
	cprintf("==============================================\n");
f011a8b4:	83 ec 0c             	sub    $0xc,%esp
f011a8b7:	68 9c b3 13 f0       	push   $0xf013b39c
f011a8bc:	e8 4d 64 fe ff       	call   f0100d0e <cprintf>
f011a8c1:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011a8c4:	83 ec 0c             	sub    $0xc,%esp
f011a8c7:	68 cc b3 13 f0       	push   $0xf013b3cc
f011a8cc:	e8 3d 64 fe ff       	call   f0100d0e <cprintf>
f011a8d1:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011a8d4:	83 ec 0c             	sub    $0xc,%esp
f011a8d7:	68 9c b3 13 f0       	push   $0xf013b39c
f011a8dc:	e8 2d 64 fe ff       	call   f0100d0e <cprintf>
f011a8e1:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011a8e4:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011a8ea:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a8ef:	b8 00 00 00 00       	mov    $0x0,%eax
f011a8f4:	89 d7                	mov    %edx,%edi
f011a8f6:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a8f8:	e8 5c 27 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a8fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a900:	e8 de 94 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011a905:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f011a908:	83 ec 0c             	sub    $0xc,%esp
f011a90b:	68 00 fc 2f 00       	push   $0x2ffc00
f011a910:	e8 1b d1 fe ff       	call   f0107a30 <kmalloc>
f011a915:	83 c4 10             	add    $0x10,%esp
f011a918:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011a91e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011a924:	89 c1                	mov    %eax,%ecx
f011a926:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011a92d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011a930:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a935:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011a938:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a93b:	ba 00 00 00 00       	mov    $0x0,%edx
f011a940:	f7 75 ec             	divl   -0x14(%ebp)
f011a943:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a946:	29 d0                	sub    %edx,%eax
f011a948:	89 c3                	mov    %eax,%ebx
f011a94a:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011a951:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011a956:	0f b6 d0             	movzbl %al,%edx
f011a959:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a95c:	01 d0                	add    %edx,%eax
f011a95e:	48                   	dec    %eax
f011a95f:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011a962:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a965:	ba 00 00 00 00       	mov    $0x0,%edx
f011a96a:	f7 75 e4             	divl   -0x1c(%ebp)
f011a96d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a970:	29 d0                	sub    %edx,%eax
f011a972:	01 c3                	add    %eax,%ebx
f011a974:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011a97b:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011a980:	0f b6 c0             	movzbl %al,%eax
f011a983:	c1 e0 04             	shl    $0x4,%eax
f011a986:	89 c2                	mov    %eax,%edx
f011a988:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a98b:	01 d0                	add    %edx,%eax
f011a98d:	48                   	dec    %eax
f011a98e:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011a991:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a994:	ba 00 00 00 00       	mov    $0x0,%edx
f011a999:	f7 75 dc             	divl   -0x24(%ebp)
f011a99c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a99f:	29 d0                	sub    %edx,%eax
f011a9a1:	01 d8                	add    %ebx,%eax
f011a9a3:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011a9a8:	39 c1                	cmp    %eax,%ecx
f011a9aa:	74 17                	je     f011a9c3 <test_kmalloc_bestfit1+0x11a>
f011a9ac:	83 ec 04             	sub    $0x4,%esp
f011a9af:	68 74 b8 13 f0       	push   $0xf013b874
f011a9b4:	68 98 01 00 00       	push   $0x198
f011a9b9:	68 5a b4 13 f0       	push   $0xf013b45a
f011a9be:	e8 42 58 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a9c3:	e8 1b 94 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011a9c8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a9cb:	74 17                	je     f011a9e4 <test_kmalloc_bestfit1+0x13b>
f011a9cd:	83 ec 04             	sub    $0x4,%esp
f011a9d0:	68 74 b4 13 f0       	push   $0xf013b474
f011a9d5:	68 99 01 00 00       	push   $0x199
f011a9da:	68 5a b4 13 f0       	push   $0xf013b45a
f011a9df:	e8 21 58 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a9e4:	e8 70 26 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011a9e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a9ec:	29 c2                	sub    %eax,%edx
f011a9ee:	89 d0                	mov    %edx,%eax
f011a9f0:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a9f5:	74 17                	je     f011aa0e <test_kmalloc_bestfit1+0x165>
f011a9f7:	83 ec 04             	sub    $0x4,%esp
f011a9fa:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011a9ff:	68 9a 01 00 00       	push   $0x19a
f011aa04:	68 5a b4 13 f0       	push   $0xf013b45a
f011aa09:	e8 f7 57 fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011aa0e:	e8 46 26 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011aa13:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aa16:	e8 c8 93 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011aa1b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f011aa1e:	83 ec 0c             	sub    $0xc,%esp
f011aa21:	68 00 fc 2f 00       	push   $0x2ffc00
f011aa26:	e8 05 d0 fe ff       	call   f0107a30 <kmalloc>
f011aa2b:	83 c4 10             	add    $0x10,%esp
f011aa2e:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011aa34:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011aa3a:	89 c1                	mov    %eax,%ecx
f011aa3c:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011aa43:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011aa46:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011aa4b:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011aa4e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011aa51:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa56:	f7 75 d4             	divl   -0x2c(%ebp)
f011aa59:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011aa5c:	29 d0                	sub    %edx,%eax
f011aa5e:	89 c3                	mov    %eax,%ebx
f011aa60:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011aa67:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011aa6c:	0f b6 d0             	movzbl %al,%edx
f011aa6f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011aa72:	01 d0                	add    %edx,%eax
f011aa74:	48                   	dec    %eax
f011aa75:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011aa78:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011aa7b:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa80:	f7 75 cc             	divl   -0x34(%ebp)
f011aa83:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011aa86:	29 d0                	sub    %edx,%eax
f011aa88:	01 c3                	add    %eax,%ebx
f011aa8a:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011aa91:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011aa96:	0f b6 c0             	movzbl %al,%eax
f011aa99:	c1 e0 04             	shl    $0x4,%eax
f011aa9c:	89 c2                	mov    %eax,%edx
f011aa9e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011aaa1:	01 d0                	add    %edx,%eax
f011aaa3:	48                   	dec    %eax
f011aaa4:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011aaa7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011aaaa:	ba 00 00 00 00       	mov    $0x0,%edx
f011aaaf:	f7 75 c4             	divl   -0x3c(%ebp)
f011aab2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011aab5:	29 d0                	sub    %edx,%eax
f011aab7:	01 d8                	add    %ebx,%eax
f011aab9:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011aabe:	39 c1                	cmp    %eax,%ecx
f011aac0:	74 17                	je     f011aad9 <test_kmalloc_bestfit1+0x230>
f011aac2:	83 ec 04             	sub    $0x4,%esp
f011aac5:	68 74 b8 13 f0       	push   $0xf013b874
f011aaca:	68 a0 01 00 00       	push   $0x1a0
f011aacf:	68 5a b4 13 f0       	push   $0xf013b45a
f011aad4:	e8 2c 57 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aad9:	e8 05 93 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011aade:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aae1:	74 17                	je     f011aafa <test_kmalloc_bestfit1+0x251>
f011aae3:	83 ec 04             	sub    $0x4,%esp
f011aae6:	68 74 b4 13 f0       	push   $0xf013b474
f011aaeb:	68 a1 01 00 00       	push   $0x1a1
f011aaf0:	68 5a b4 13 f0       	push   $0xf013b45a
f011aaf5:	e8 0b 57 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011aafa:	e8 5a 25 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011aaff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ab02:	29 c2                	sub    %eax,%edx
f011ab04:	89 d0                	mov    %edx,%eax
f011ab06:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ab0b:	74 17                	je     f011ab24 <test_kmalloc_bestfit1+0x27b>
f011ab0d:	83 ec 04             	sub    $0x4,%esp
f011ab10:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011ab15:	68 a2 01 00 00       	push   $0x1a2
f011ab1a:	68 5a b4 13 f0       	push   $0xf013b45a
f011ab1f:	e8 e1 56 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ab24:	e8 30 25 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011ab29:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ab2c:	e8 b2 92 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011ab31:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f011ab34:	83 ec 0c             	sub    $0xc,%esp
f011ab37:	68 00 fc 1f 00       	push   $0x1ffc00
f011ab3c:	e8 ef ce fe ff       	call   f0107a30 <kmalloc>
f011ab41:	83 c4 10             	add    $0x10,%esp
f011ab44:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011ab4a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011ab50:	89 c1                	mov    %eax,%ecx
f011ab52:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011ab59:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011ab5c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ab61:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011ab64:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ab67:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab6c:	f7 75 bc             	divl   -0x44(%ebp)
f011ab6f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ab72:	29 d0                	sub    %edx,%eax
f011ab74:	89 c3                	mov    %eax,%ebx
f011ab76:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011ab7d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011ab82:	0f b6 d0             	movzbl %al,%edx
f011ab85:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011ab88:	01 d0                	add    %edx,%eax
f011ab8a:	48                   	dec    %eax
f011ab8b:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011ab8e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ab91:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab96:	f7 75 b4             	divl   -0x4c(%ebp)
f011ab99:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ab9c:	29 d0                	sub    %edx,%eax
f011ab9e:	01 c3                	add    %eax,%ebx
f011aba0:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011aba7:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011abac:	0f b6 c0             	movzbl %al,%eax
f011abaf:	c1 e0 04             	shl    $0x4,%eax
f011abb2:	89 c2                	mov    %eax,%edx
f011abb4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011abb7:	01 d0                	add    %edx,%eax
f011abb9:	48                   	dec    %eax
f011abba:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011abbd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011abc0:	ba 00 00 00 00       	mov    $0x0,%edx
f011abc5:	f7 75 ac             	divl   -0x54(%ebp)
f011abc8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011abcb:	29 d0                	sub    %edx,%eax
f011abcd:	01 d8                	add    %ebx,%eax
f011abcf:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011abd4:	39 c1                	cmp    %eax,%ecx
f011abd6:	74 17                	je     f011abef <test_kmalloc_bestfit1+0x346>
f011abd8:	83 ec 04             	sub    $0x4,%esp
f011abdb:	68 74 b8 13 f0       	push   $0xf013b874
f011abe0:	68 a8 01 00 00       	push   $0x1a8
f011abe5:	68 5a b4 13 f0       	push   $0xf013b45a
f011abea:	e8 16 56 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011abef:	e8 ef 91 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011abf4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011abf7:	74 17                	je     f011ac10 <test_kmalloc_bestfit1+0x367>
f011abf9:	83 ec 04             	sub    $0x4,%esp
f011abfc:	68 74 b4 13 f0       	push   $0xf013b474
f011ac01:	68 a9 01 00 00       	push   $0x1a9
f011ac06:	68 5a b4 13 f0       	push   $0xf013b45a
f011ac0b:	e8 f5 55 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011ac10:	e8 44 24 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011ac15:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ac18:	29 c2                	sub    %eax,%edx
f011ac1a:	89 d0                	mov    %edx,%eax
f011ac1c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ac21:	74 17                	je     f011ac3a <test_kmalloc_bestfit1+0x391>
f011ac23:	83 ec 04             	sub    $0x4,%esp
f011ac26:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011ac2b:	68 aa 01 00 00       	push   $0x1aa
f011ac30:	68 5a b4 13 f0       	push   $0xf013b45a
f011ac35:	e8 cb 55 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ac3a:	e8 1a 24 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011ac3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ac42:	e8 9c 91 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011ac47:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f011ac4a:	83 ec 0c             	sub    $0xc,%esp
f011ac4d:	68 00 fc 1f 00       	push   $0x1ffc00
f011ac52:	e8 d9 cd fe ff       	call   f0107a30 <kmalloc>
f011ac57:	83 c4 10             	add    $0x10,%esp
f011ac5a:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011ac60:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011ac66:	89 c1                	mov    %eax,%ecx
f011ac68:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011ac6f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ac72:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ac77:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011ac7a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ac7d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac82:	f7 75 a4             	divl   -0x5c(%ebp)
f011ac85:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ac88:	29 d0                	sub    %edx,%eax
f011ac8a:	89 c3                	mov    %eax,%ebx
f011ac8c:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011ac93:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011ac98:	0f b6 d0             	movzbl %al,%edx
f011ac9b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011ac9e:	01 d0                	add    %edx,%eax
f011aca0:	48                   	dec    %eax
f011aca1:	89 45 98             	mov    %eax,-0x68(%ebp)
f011aca4:	8b 45 98             	mov    -0x68(%ebp),%eax
f011aca7:	ba 00 00 00 00       	mov    $0x0,%edx
f011acac:	f7 75 9c             	divl   -0x64(%ebp)
f011acaf:	8b 45 98             	mov    -0x68(%ebp),%eax
f011acb2:	29 d0                	sub    %edx,%eax
f011acb4:	01 c3                	add    %eax,%ebx
f011acb6:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011acbd:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011acc2:	0f b6 c0             	movzbl %al,%eax
f011acc5:	c1 e0 04             	shl    $0x4,%eax
f011acc8:	89 c2                	mov    %eax,%edx
f011acca:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011accd:	01 d0                	add    %edx,%eax
f011accf:	48                   	dec    %eax
f011acd0:	89 45 90             	mov    %eax,-0x70(%ebp)
f011acd3:	8b 45 90             	mov    -0x70(%ebp),%eax
f011acd6:	ba 00 00 00 00       	mov    $0x0,%edx
f011acdb:	f7 75 94             	divl   -0x6c(%ebp)
f011acde:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ace1:	29 d0                	sub    %edx,%eax
f011ace3:	01 d8                	add    %ebx,%eax
f011ace5:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011acea:	39 c1                	cmp    %eax,%ecx
f011acec:	74 17                	je     f011ad05 <test_kmalloc_bestfit1+0x45c>
f011acee:	83 ec 04             	sub    $0x4,%esp
f011acf1:	68 74 b8 13 f0       	push   $0xf013b874
f011acf6:	68 b0 01 00 00       	push   $0x1b0
f011acfb:	68 5a b4 13 f0       	push   $0xf013b45a
f011ad00:	e8 00 55 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ad05:	e8 d9 90 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011ad0a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ad0d:	74 17                	je     f011ad26 <test_kmalloc_bestfit1+0x47d>
f011ad0f:	83 ec 04             	sub    $0x4,%esp
f011ad12:	68 74 b4 13 f0       	push   $0xf013b474
f011ad17:	68 b1 01 00 00       	push   $0x1b1
f011ad1c:	68 5a b4 13 f0       	push   $0xf013b45a
f011ad21:	e8 df 54 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011ad26:	e8 2e 23 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011ad2b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ad2e:	29 c2                	sub    %eax,%edx
f011ad30:	89 d0                	mov    %edx,%eax
f011ad32:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ad37:	74 17                	je     f011ad50 <test_kmalloc_bestfit1+0x4a7>
f011ad39:	83 ec 04             	sub    $0x4,%esp
f011ad3c:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011ad41:	68 b2 01 00 00       	push   $0x1b2
f011ad46:	68 5a b4 13 f0       	push   $0xf013b45a
f011ad4b:	e8 b5 54 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ad50:	e8 04 23 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011ad55:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ad58:	e8 86 90 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011ad5d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f011ad60:	83 ec 0c             	sub    $0xc,%esp
f011ad63:	68 00 fc 0f 00       	push   $0xffc00
f011ad68:	e8 c3 cc fe ff       	call   f0107a30 <kmalloc>
f011ad6d:	83 c4 10             	add    $0x10,%esp
f011ad70:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f011ad76:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011ad7c:	89 c1                	mov    %eax,%ecx
f011ad7e:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011ad85:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ad88:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ad8d:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ad90:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ad93:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad98:	f7 75 8c             	divl   -0x74(%ebp)
f011ad9b:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ad9e:	29 d0                	sub    %edx,%eax
f011ada0:	89 c3                	mov    %eax,%ebx
f011ada2:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011ada9:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011adae:	0f b6 d0             	movzbl %al,%edx
f011adb1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011adb4:	01 d0                	add    %edx,%eax
f011adb6:	48                   	dec    %eax
f011adb7:	89 45 80             	mov    %eax,-0x80(%ebp)
f011adba:	8b 45 80             	mov    -0x80(%ebp),%eax
f011adbd:	ba 00 00 00 00       	mov    $0x0,%edx
f011adc2:	f7 75 84             	divl   -0x7c(%ebp)
f011adc5:	8b 45 80             	mov    -0x80(%ebp),%eax
f011adc8:	29 d0                	sub    %edx,%eax
f011adca:	01 c3                	add    %eax,%ebx
f011adcc:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011add3:	10 00 00 
f011add6:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011addb:	0f b6 c0             	movzbl %al,%eax
f011adde:	c1 e0 04             	shl    $0x4,%eax
f011ade1:	89 c2                	mov    %eax,%edx
f011ade3:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ade9:	01 d0                	add    %edx,%eax
f011adeb:	48                   	dec    %eax
f011adec:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011adf2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011adf8:	ba 00 00 00 00       	mov    $0x0,%edx
f011adfd:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011ae03:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ae09:	29 d0                	sub    %edx,%eax
f011ae0b:	01 d8                	add    %ebx,%eax
f011ae0d:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f011ae12:	39 c1                	cmp    %eax,%ecx
f011ae14:	74 17                	je     f011ae2d <test_kmalloc_bestfit1+0x584>
f011ae16:	83 ec 04             	sub    $0x4,%esp
f011ae19:	68 74 b8 13 f0       	push   $0xf013b874
f011ae1e:	68 b8 01 00 00       	push   $0x1b8
f011ae23:	68 5a b4 13 f0       	push   $0xf013b45a
f011ae28:	e8 d8 53 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ae2d:	e8 b1 8f fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011ae32:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ae35:	74 17                	je     f011ae4e <test_kmalloc_bestfit1+0x5a5>
f011ae37:	83 ec 04             	sub    $0x4,%esp
f011ae3a:	68 74 b4 13 f0       	push   $0xf013b474
f011ae3f:	68 b9 01 00 00       	push   $0x1b9
f011ae44:	68 5a b4 13 f0       	push   $0xf013b45a
f011ae49:	e8 b7 53 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ae4e:	e8 06 22 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011ae53:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ae56:	29 c2                	sub    %eax,%edx
f011ae58:	89 d0                	mov    %edx,%eax
f011ae5a:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ae5f:	74 17                	je     f011ae78 <test_kmalloc_bestfit1+0x5cf>
f011ae61:	83 ec 04             	sub    $0x4,%esp
f011ae64:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011ae69:	68 ba 01 00 00       	push   $0x1ba
f011ae6e:	68 5a b4 13 f0       	push   $0xf013b45a
f011ae73:	e8 8d 53 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ae78:	e8 dc 21 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011ae7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ae80:	e8 5e 8f fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011ae85:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f011ae88:	83 ec 0c             	sub    $0xc,%esp
f011ae8b:	68 00 fc 0f 00       	push   $0xffc00
f011ae90:	e8 9b cb fe ff       	call   f0107a30 <kmalloc>
f011ae95:	83 c4 10             	add    $0x10,%esp
f011ae98:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011ae9e:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011aea4:	89 c1                	mov    %eax,%ecx
f011aea6:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011aead:	10 00 00 
f011aeb0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011aeb6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011aebb:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011aec1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011aec7:	ba 00 00 00 00       	mov    $0x0,%edx
f011aecc:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011aed2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011aed8:	29 d0                	sub    %edx,%eax
f011aeda:	89 c3                	mov    %eax,%ebx
f011aedc:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011aee3:	10 00 00 
f011aee6:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011aeeb:	0f b6 d0             	movzbl %al,%edx
f011aeee:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011aef4:	01 d0                	add    %edx,%eax
f011aef6:	48                   	dec    %eax
f011aef7:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011aefd:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011af03:	ba 00 00 00 00       	mov    $0x0,%edx
f011af08:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011af0e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011af14:	29 d0                	sub    %edx,%eax
f011af16:	01 c3                	add    %eax,%ebx
f011af18:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011af1f:	10 00 00 
f011af22:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011af27:	0f b6 c0             	movzbl %al,%eax
f011af2a:	c1 e0 04             	shl    $0x4,%eax
f011af2d:	89 c2                	mov    %eax,%edx
f011af2f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011af35:	01 d0                	add    %edx,%eax
f011af37:	48                   	dec    %eax
f011af38:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011af3e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011af44:	ba 00 00 00 00       	mov    $0x0,%edx
f011af49:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011af4f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011af55:	29 d0                	sub    %edx,%eax
f011af57:	01 d8                	add    %ebx,%eax
f011af59:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011af5e:	39 c1                	cmp    %eax,%ecx
f011af60:	74 17                	je     f011af79 <test_kmalloc_bestfit1+0x6d0>
f011af62:	83 ec 04             	sub    $0x4,%esp
f011af65:	68 74 b8 13 f0       	push   $0xf013b874
f011af6a:	68 c0 01 00 00       	push   $0x1c0
f011af6f:	68 5a b4 13 f0       	push   $0xf013b45a
f011af74:	e8 8c 52 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af79:	e8 65 8e fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011af7e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011af81:	74 17                	je     f011af9a <test_kmalloc_bestfit1+0x6f1>
f011af83:	83 ec 04             	sub    $0x4,%esp
f011af86:	68 74 b4 13 f0       	push   $0xf013b474
f011af8b:	68 c1 01 00 00       	push   $0x1c1
f011af90:	68 5a b4 13 f0       	push   $0xf013b45a
f011af95:	e8 6b 52 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011af9a:	e8 ba 20 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011af9f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011afa2:	29 c2                	sub    %eax,%edx
f011afa4:	89 d0                	mov    %edx,%eax
f011afa6:	3d 00 01 00 00       	cmp    $0x100,%eax
f011afab:	74 17                	je     f011afc4 <test_kmalloc_bestfit1+0x71b>
f011afad:	83 ec 04             	sub    $0x4,%esp
f011afb0:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011afb5:	68 c2 01 00 00       	push   $0x1c2
f011afba:	68 5a b4 13 f0       	push   $0xf013b45a
f011afbf:	e8 41 52 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011afc4:	e8 90 20 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011afc9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011afcc:	e8 12 8e fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011afd1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f011afd4:	83 ec 0c             	sub    $0xc,%esp
f011afd7:	68 00 fc 0f 00       	push   $0xffc00
f011afdc:	e8 4f ca fe ff       	call   f0107a30 <kmalloc>
f011afe1:	83 c4 10             	add    $0x10,%esp
f011afe4:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f011afea:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011aff0:	89 c1                	mov    %eax,%ecx
f011aff2:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011aff9:	10 00 00 
f011affc:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011b002:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b007:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011b00d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b013:	ba 00 00 00 00       	mov    $0x0,%edx
f011b018:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011b01e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b024:	29 d0                	sub    %edx,%eax
f011b026:	89 c3                	mov    %eax,%ebx
f011b028:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011b02f:	10 00 00 
f011b032:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011b037:	0f b6 d0             	movzbl %al,%edx
f011b03a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011b040:	01 d0                	add    %edx,%eax
f011b042:	48                   	dec    %eax
f011b043:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011b049:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b04f:	ba 00 00 00 00       	mov    $0x0,%edx
f011b054:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011b05a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b060:	29 d0                	sub    %edx,%eax
f011b062:	01 c3                	add    %eax,%ebx
f011b064:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011b06b:	10 00 00 
f011b06e:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011b073:	0f b6 c0             	movzbl %al,%eax
f011b076:	c1 e0 04             	shl    $0x4,%eax
f011b079:	89 c2                	mov    %eax,%edx
f011b07b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011b081:	01 d0                	add    %edx,%eax
f011b083:	48                   	dec    %eax
f011b084:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011b08a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b090:	ba 00 00 00 00       	mov    $0x0,%edx
f011b095:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011b09b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b0a1:	29 d0                	sub    %edx,%eax
f011b0a3:	01 d8                	add    %ebx,%eax
f011b0a5:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f011b0aa:	39 c1                	cmp    %eax,%ecx
f011b0ac:	74 17                	je     f011b0c5 <test_kmalloc_bestfit1+0x81c>
f011b0ae:	83 ec 04             	sub    $0x4,%esp
f011b0b1:	68 74 b8 13 f0       	push   $0xf013b874
f011b0b6:	68 c8 01 00 00       	push   $0x1c8
f011b0bb:	68 5a b4 13 f0       	push   $0xf013b45a
f011b0c0:	e8 40 51 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b0c5:	e8 19 8d fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011b0ca:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b0cd:	74 17                	je     f011b0e6 <test_kmalloc_bestfit1+0x83d>
f011b0cf:	83 ec 04             	sub    $0x4,%esp
f011b0d2:	68 74 b4 13 f0       	push   $0xf013b474
f011b0d7:	68 c9 01 00 00       	push   $0x1c9
f011b0dc:	68 5a b4 13 f0       	push   $0xf013b45a
f011b0e1:	e8 1f 51 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b0e6:	e8 6e 1f ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b0eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b0ee:	29 c2                	sub    %eax,%edx
f011b0f0:	89 d0                	mov    %edx,%eax
f011b0f2:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b0f7:	74 17                	je     f011b110 <test_kmalloc_bestfit1+0x867>
f011b0f9:	83 ec 04             	sub    $0x4,%esp
f011b0fc:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011b101:	68 ca 01 00 00       	push   $0x1ca
f011b106:	68 5a b4 13 f0       	push   $0xf013b45a
f011b10b:	e8 f5 50 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011b110:	e8 44 1f ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b115:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b118:	e8 c6 8c fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011b11d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011b120:	83 ec 0c             	sub    $0xc,%esp
f011b123:	68 00 fc 0f 00       	push   $0xffc00
f011b128:	e8 03 c9 fe ff       	call   f0107a30 <kmalloc>
f011b12d:	83 c4 10             	add    $0x10,%esp
f011b130:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011b136:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011b13c:	89 c1                	mov    %eax,%ecx
f011b13e:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011b145:	10 00 00 
f011b148:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011b14e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b153:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011b159:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b15f:	ba 00 00 00 00       	mov    $0x0,%edx
f011b164:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011b16a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b170:	29 d0                	sub    %edx,%eax
f011b172:	89 c3                	mov    %eax,%ebx
f011b174:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011b17b:	10 00 00 
f011b17e:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011b183:	0f b6 d0             	movzbl %al,%edx
f011b186:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011b18c:	01 d0                	add    %edx,%eax
f011b18e:	48                   	dec    %eax
f011b18f:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011b195:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b19b:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1a0:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011b1a6:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b1ac:	29 d0                	sub    %edx,%eax
f011b1ae:	01 c3                	add    %eax,%ebx
f011b1b0:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011b1b7:	10 00 00 
f011b1ba:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011b1bf:	0f b6 c0             	movzbl %al,%eax
f011b1c2:	c1 e0 04             	shl    $0x4,%eax
f011b1c5:	89 c2                	mov    %eax,%edx
f011b1c7:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011b1cd:	01 d0                	add    %edx,%eax
f011b1cf:	48                   	dec    %eax
f011b1d0:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011b1d6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b1dc:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1e1:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011b1e7:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b1ed:	29 d0                	sub    %edx,%eax
f011b1ef:	01 d8                	add    %ebx,%eax
f011b1f1:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011b1f6:	39 c1                	cmp    %eax,%ecx
f011b1f8:	74 17                	je     f011b211 <test_kmalloc_bestfit1+0x968>
f011b1fa:	83 ec 04             	sub    $0x4,%esp
f011b1fd:	68 74 b8 13 f0       	push   $0xf013b874
f011b202:	68 d0 01 00 00       	push   $0x1d0
f011b207:	68 5a b4 13 f0       	push   $0xf013b45a
f011b20c:	e8 f4 4f fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b211:	e8 cd 8b fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011b216:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b219:	74 17                	je     f011b232 <test_kmalloc_bestfit1+0x989>
f011b21b:	83 ec 04             	sub    $0x4,%esp
f011b21e:	68 74 b4 13 f0       	push   $0xf013b474
f011b223:	68 d1 01 00 00       	push   $0x1d1
f011b228:	68 5a b4 13 f0       	push   $0xf013b45a
f011b22d:	e8 d3 4f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b232:	e8 22 1e ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b237:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b23a:	29 c2                	sub    %eax,%edx
f011b23c:	89 d0                	mov    %edx,%eax
f011b23e:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b243:	74 17                	je     f011b25c <test_kmalloc_bestfit1+0x9b3>
f011b245:	83 ec 04             	sub    $0x4,%esp
f011b248:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011b24d:	68 d2 01 00 00       	push   $0x1d2
f011b252:	68 5a b4 13 f0       	push   $0xf013b45a
f011b257:	e8 a9 4f fe ff       	call   f0100205 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b25c:	e8 f8 1d ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b261:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b264:	e8 7a 8b fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011b269:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011b26c:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011b272:	83 ec 0c             	sub    $0xc,%esp
f011b275:	50                   	push   %eax
f011b276:	e8 9e c8 fe ff       	call   f0107b19 <kfree>
f011b27b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b27e:	e8 60 8b fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011b283:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b286:	74 17                	je     f011b29f <test_kmalloc_bestfit1+0x9f6>
f011b288:	83 ec 04             	sub    $0x4,%esp
f011b28b:	68 74 b4 13 f0       	push   $0xf013b474
f011b290:	68 db 01 00 00       	push   $0x1db
f011b295:	68 5a b4 13 f0       	push   $0xf013b45a
f011b29a:	e8 66 4f fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011b29f:	e8 b5 1d ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b2a4:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b2a7:	3d 00 03 00 00       	cmp    $0x300,%eax
f011b2ac:	74 17                	je     f011b2c5 <test_kmalloc_bestfit1+0xa1c>
f011b2ae:	83 ec 04             	sub    $0x4,%esp
f011b2b1:	68 b7 b8 13 f0       	push   $0xf013b8b7
f011b2b6:	68 dc 01 00 00       	push   $0x1dc
f011b2bb:	68 5a b4 13 f0       	push   $0xf013b45a
f011b2c0:	e8 40 4f fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b2c5:	e8 8f 1d ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b2ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b2cd:	e8 11 8b fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011b2d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011b2d5:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011b2db:	83 ec 0c             	sub    $0xc,%esp
f011b2de:	50                   	push   %eax
f011b2df:	e8 35 c8 fe ff       	call   f0107b19 <kfree>
f011b2e4:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b2e7:	e8 f7 8a fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011b2ec:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b2ef:	74 17                	je     f011b308 <test_kmalloc_bestfit1+0xa5f>
f011b2f1:	83 ec 04             	sub    $0x4,%esp
f011b2f4:	68 74 b4 13 f0       	push   $0xf013b474
f011b2f9:	68 e2 01 00 00       	push   $0x1e2
f011b2fe:	68 5a b4 13 f0       	push   $0xf013b45a
f011b303:	e8 fd 4e fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011b308:	e8 4c 1d ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b30d:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b310:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b315:	74 17                	je     f011b32e <test_kmalloc_bestfit1+0xa85>
f011b317:	83 ec 04             	sub    $0x4,%esp
f011b31a:	68 b7 b8 13 f0       	push   $0xf013b8b7
f011b31f:	68 e3 01 00 00       	push   $0x1e3
f011b324:	68 5a b4 13 f0       	push   $0xf013b45a
f011b329:	e8 d7 4e fe ff       	call   f0100205 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b32e:	e8 26 1d ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b333:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b336:	e8 a8 8a fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011b33b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011b33e:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011b344:	83 ec 0c             	sub    $0xc,%esp
f011b347:	50                   	push   %eax
f011b348:	e8 cc c7 fe ff       	call   f0107b19 <kfree>
f011b34d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b350:	e8 8e 8a fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011b355:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b358:	74 17                	je     f011b371 <test_kmalloc_bestfit1+0xac8>
f011b35a:	83 ec 04             	sub    $0x4,%esp
f011b35d:	68 74 b4 13 f0       	push   $0xf013b474
f011b362:	68 e9 01 00 00       	push   $0x1e9
f011b367:	68 5a b4 13 f0       	push   $0xf013b45a
f011b36c:	e8 94 4e fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b371:	e8 e3 1c ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b376:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b379:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b37e:	74 17                	je     f011b397 <test_kmalloc_bestfit1+0xaee>
f011b380:	83 ec 04             	sub    $0x4,%esp
f011b383:	68 b7 b8 13 f0       	push   $0xf013b8b7
f011b388:	68 ea 01 00 00       	push   $0x1ea
f011b38d:	68 5a b4 13 f0       	push   $0xf013b45a
f011b392:	e8 6e 4e fe ff       	call   f0100205 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011b397:	e8 bd 1c ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b39c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b39f:	e8 3f 8a fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011b3a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011b3a7:	83 ec 0c             	sub    $0xc,%esp
f011b3aa:	68 00 00 08 00       	push   $0x80000
f011b3af:	e8 7c c6 fe ff       	call   f0107a30 <kmalloc>
f011b3b4:	83 c4 10             	add    $0x10,%esp
f011b3b7:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011b3bd:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011b3c3:	89 c1                	mov    %eax,%ecx
f011b3c5:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011b3cc:	10 00 00 
f011b3cf:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011b3d5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b3da:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011b3e0:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b3e6:	ba 00 00 00 00       	mov    $0x0,%edx
f011b3eb:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011b3f1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b3f7:	29 d0                	sub    %edx,%eax
f011b3f9:	89 c3                	mov    %eax,%ebx
f011b3fb:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011b402:	10 00 00 
f011b405:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011b40a:	0f b6 d0             	movzbl %al,%edx
f011b40d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011b413:	01 d0                	add    %edx,%eax
f011b415:	48                   	dec    %eax
f011b416:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011b41c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b422:	ba 00 00 00 00       	mov    $0x0,%edx
f011b427:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011b42d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b433:	29 d0                	sub    %edx,%eax
f011b435:	01 c3                	add    %eax,%ebx
f011b437:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011b43e:	10 00 00 
f011b441:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011b446:	0f b6 c0             	movzbl %al,%eax
f011b449:	c1 e0 04             	shl    $0x4,%eax
f011b44c:	89 c2                	mov    %eax,%edx
f011b44e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011b454:	01 d0                	add    %edx,%eax
f011b456:	48                   	dec    %eax
f011b457:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011b45d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b463:	ba 00 00 00 00       	mov    $0x0,%edx
f011b468:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011b46e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b474:	29 d0                	sub    %edx,%eax
f011b476:	01 d8                	add    %ebx,%eax
f011b478:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011b47d:	39 c1                	cmp    %eax,%ecx
f011b47f:	74 17                	je     f011b498 <test_kmalloc_bestfit1+0xbef>
f011b481:	83 ec 04             	sub    $0x4,%esp
f011b484:	68 74 b8 13 f0       	push   $0xf013b874
f011b489:	68 f3 01 00 00       	push   $0x1f3
f011b48e:	68 5a b4 13 f0       	push   $0xf013b45a
f011b493:	e8 6d 4d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b498:	e8 46 89 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011b49d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b4a0:	74 17                	je     f011b4b9 <test_kmalloc_bestfit1+0xc10>
f011b4a2:	83 ec 04             	sub    $0x4,%esp
f011b4a5:	68 74 b4 13 f0       	push   $0xf013b474
f011b4aa:	68 f4 01 00 00       	push   $0x1f4
f011b4af:	68 5a b4 13 f0       	push   $0xf013b45a
f011b4b4:	e8 4c 4d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011b4b9:	e8 9b 1b ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b4be:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b4c1:	29 c2                	sub    %eax,%edx
f011b4c3:	89 d0                	mov    %edx,%eax
f011b4c5:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b4ca:	74 17                	je     f011b4e3 <test_kmalloc_bestfit1+0xc3a>
f011b4cc:	83 ec 04             	sub    $0x4,%esp
f011b4cf:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011b4d4:	68 f5 01 00 00       	push   $0x1f5
f011b4d9:	68 5a b4 13 f0       	push   $0xf013b45a
f011b4de:	e8 22 4d fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011b4e3:	e8 71 1b ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b4e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b4eb:	e8 f3 88 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011b4f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011b4f3:	83 ec 0c             	sub    $0xc,%esp
f011b4f6:	68 00 fc 0f 00       	push   $0xffc00
f011b4fb:	e8 30 c5 fe ff       	call   f0107a30 <kmalloc>
f011b500:	83 c4 10             	add    $0x10,%esp
f011b503:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011b509:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011b50f:	89 c1                	mov    %eax,%ecx
f011b511:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011b518:	10 00 00 
f011b51b:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011b521:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b526:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011b52c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b532:	ba 00 00 00 00       	mov    $0x0,%edx
f011b537:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011b53d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b543:	29 d0                	sub    %edx,%eax
f011b545:	89 c3                	mov    %eax,%ebx
f011b547:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011b54e:	10 00 00 
f011b551:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011b556:	0f b6 d0             	movzbl %al,%edx
f011b559:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011b55f:	01 d0                	add    %edx,%eax
f011b561:	48                   	dec    %eax
f011b562:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011b568:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b56e:	ba 00 00 00 00       	mov    $0x0,%edx
f011b573:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011b579:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b57f:	29 d0                	sub    %edx,%eax
f011b581:	01 c3                	add    %eax,%ebx
f011b583:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011b58a:	10 00 00 
f011b58d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011b592:	0f b6 c0             	movzbl %al,%eax
f011b595:	c1 e0 04             	shl    $0x4,%eax
f011b598:	89 c2                	mov    %eax,%edx
f011b59a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011b5a0:	01 d0                	add    %edx,%eax
f011b5a2:	48                   	dec    %eax
f011b5a3:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011b5a9:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b5af:	ba 00 00 00 00       	mov    $0x0,%edx
f011b5b4:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011b5ba:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b5c0:	29 d0                	sub    %edx,%eax
f011b5c2:	01 d8                	add    %ebx,%eax
f011b5c4:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011b5c9:	39 c1                	cmp    %eax,%ecx
f011b5cb:	74 17                	je     f011b5e4 <test_kmalloc_bestfit1+0xd3b>
f011b5cd:	83 ec 04             	sub    $0x4,%esp
f011b5d0:	68 74 b8 13 f0       	push   $0xf013b874
f011b5d5:	68 fb 01 00 00       	push   $0x1fb
f011b5da:	68 5a b4 13 f0       	push   $0xf013b45a
f011b5df:	e8 21 4c fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b5e4:	e8 fa 87 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011b5e9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b5ec:	74 17                	je     f011b605 <test_kmalloc_bestfit1+0xd5c>
f011b5ee:	83 ec 04             	sub    $0x4,%esp
f011b5f1:	68 74 b4 13 f0       	push   $0xf013b474
f011b5f6:	68 fc 01 00 00       	push   $0x1fc
f011b5fb:	68 5a b4 13 f0       	push   $0xf013b45a
f011b600:	e8 00 4c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b605:	e8 4f 1a ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b60a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b60d:	29 c2                	sub    %eax,%edx
f011b60f:	89 d0                	mov    %edx,%eax
f011b611:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b616:	74 17                	je     f011b62f <test_kmalloc_bestfit1+0xd86>
f011b618:	83 ec 04             	sub    $0x4,%esp
f011b61b:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011b620:	68 fd 01 00 00       	push   $0x1fd
f011b625:	68 5a b4 13 f0       	push   $0xf013b45a
f011b62a:	e8 d6 4b fe ff       	call   f0100205 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011b62f:	e8 25 1a ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b634:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b637:	e8 a7 87 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011b63c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011b63f:	83 ec 0c             	sub    $0xc,%esp
f011b642:	68 00 fc 03 00       	push   $0x3fc00
f011b647:	e8 e4 c3 fe ff       	call   f0107a30 <kmalloc>
f011b64c:	83 c4 10             	add    $0x10,%esp
f011b64f:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011b655:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011b65b:	89 c1                	mov    %eax,%ecx
f011b65d:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011b664:	10 00 00 
f011b667:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011b66d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b672:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011b678:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b67e:	ba 00 00 00 00       	mov    $0x0,%edx
f011b683:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011b689:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b68f:	29 d0                	sub    %edx,%eax
f011b691:	89 c3                	mov    %eax,%ebx
f011b693:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011b69a:	10 00 00 
f011b69d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011b6a2:	0f b6 d0             	movzbl %al,%edx
f011b6a5:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011b6ab:	01 d0                	add    %edx,%eax
f011b6ad:	48                   	dec    %eax
f011b6ae:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011b6b4:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b6ba:	ba 00 00 00 00       	mov    $0x0,%edx
f011b6bf:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011b6c5:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b6cb:	29 d0                	sub    %edx,%eax
f011b6cd:	01 c3                	add    %eax,%ebx
f011b6cf:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011b6d6:	10 00 00 
f011b6d9:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011b6de:	0f b6 c0             	movzbl %al,%eax
f011b6e1:	c1 e0 04             	shl    $0x4,%eax
f011b6e4:	89 c2                	mov    %eax,%edx
f011b6e6:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011b6ec:	01 d0                	add    %edx,%eax
f011b6ee:	48                   	dec    %eax
f011b6ef:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011b6f5:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b6fb:	ba 00 00 00 00       	mov    $0x0,%edx
f011b700:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011b706:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b70c:	29 d0                	sub    %edx,%eax
f011b70e:	01 d8                	add    %ebx,%eax
f011b710:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011b715:	39 c1                	cmp    %eax,%ecx
f011b717:	74 17                	je     f011b730 <test_kmalloc_bestfit1+0xe87>
f011b719:	83 ec 04             	sub    $0x4,%esp
f011b71c:	68 74 b8 13 f0       	push   $0xf013b874
f011b721:	68 03 02 00 00       	push   $0x203
f011b726:	68 5a b4 13 f0       	push   $0xf013b45a
f011b72b:	e8 d5 4a fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b730:	e8 ae 86 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011b735:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b738:	74 17                	je     f011b751 <test_kmalloc_bestfit1+0xea8>
f011b73a:	83 ec 04             	sub    $0x4,%esp
f011b73d:	68 74 b4 13 f0       	push   $0xf013b474
f011b742:	68 04 02 00 00       	push   $0x204
f011b747:	68 5a b4 13 f0       	push   $0xf013b45a
f011b74c:	e8 b4 4a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011b751:	e8 03 19 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b756:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b759:	29 c2                	sub    %eax,%edx
f011b75b:	89 d0                	mov    %edx,%eax
f011b75d:	83 f8 40             	cmp    $0x40,%eax
f011b760:	74 17                	je     f011b779 <test_kmalloc_bestfit1+0xed0>
f011b762:	83 ec 04             	sub    $0x4,%esp
f011b765:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011b76a:	68 05 02 00 00       	push   $0x205
f011b76f:	68 5a b4 13 f0       	push   $0xf013b45a
f011b774:	e8 8c 4a fe ff       	call   f0100205 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011b779:	e8 db 18 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b77e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b781:	e8 5d 86 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011b786:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011b789:	83 ec 0c             	sub    $0xc,%esp
f011b78c:	68 00 fc 3f 00       	push   $0x3ffc00
f011b791:	e8 9a c2 fe ff       	call   f0107a30 <kmalloc>
f011b796:	83 c4 10             	add    $0x10,%esp
f011b799:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011b79f:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011b7a5:	89 c1                	mov    %eax,%ecx
f011b7a7:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011b7ae:	10 00 00 
f011b7b1:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011b7b7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b7bc:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011b7c2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b7c8:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7cd:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011b7d3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b7d9:	29 d0                	sub    %edx,%eax
f011b7db:	89 c3                	mov    %eax,%ebx
f011b7dd:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011b7e4:	10 00 00 
f011b7e7:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011b7ec:	0f b6 d0             	movzbl %al,%edx
f011b7ef:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011b7f5:	01 d0                	add    %edx,%eax
f011b7f7:	48                   	dec    %eax
f011b7f8:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011b7fe:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b804:	ba 00 00 00 00       	mov    $0x0,%edx
f011b809:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011b80f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b815:	29 d0                	sub    %edx,%eax
f011b817:	01 c3                	add    %eax,%ebx
f011b819:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011b820:	10 00 00 
f011b823:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011b828:	0f b6 c0             	movzbl %al,%eax
f011b82b:	c1 e0 04             	shl    $0x4,%eax
f011b82e:	89 c2                	mov    %eax,%edx
f011b830:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011b836:	01 d0                	add    %edx,%eax
f011b838:	48                   	dec    %eax
f011b839:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011b83f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b845:	ba 00 00 00 00       	mov    $0x0,%edx
f011b84a:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011b850:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b856:	29 d0                	sub    %edx,%eax
f011b858:	01 d8                	add    %ebx,%eax
f011b85a:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011b85f:	39 c1                	cmp    %eax,%ecx
f011b861:	74 17                	je     f011b87a <test_kmalloc_bestfit1+0xfd1>
f011b863:	83 ec 04             	sub    $0x4,%esp
f011b866:	68 74 b8 13 f0       	push   $0xf013b874
f011b86b:	68 0b 02 00 00       	push   $0x20b
f011b870:	68 5a b4 13 f0       	push   $0xf013b45a
f011b875:	e8 8b 49 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b87a:	e8 64 85 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011b87f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b882:	74 17                	je     f011b89b <test_kmalloc_bestfit1+0xff2>
f011b884:	83 ec 04             	sub    $0x4,%esp
f011b887:	68 74 b4 13 f0       	push   $0xf013b474
f011b88c:	68 0c 02 00 00       	push   $0x20c
f011b891:	68 5a b4 13 f0       	push   $0xf013b45a
f011b896:	e8 6a 49 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011b89b:	e8 b9 17 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b8a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b8a3:	29 c2                	sub    %eax,%edx
f011b8a5:	89 d0                	mov    %edx,%eax
f011b8a7:	3d 00 04 00 00       	cmp    $0x400,%eax
f011b8ac:	74 17                	je     f011b8c5 <test_kmalloc_bestfit1+0x101c>
f011b8ae:	83 ec 04             	sub    $0x4,%esp
f011b8b1:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011b8b6:	68 0d 02 00 00       	push   $0x20d
f011b8bb:	68 5a b4 13 f0       	push   $0xf013b45a
f011b8c0:	e8 40 49 fe ff       	call   f0100205 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011b8c5:	e8 8f 17 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b8ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b8cd:	e8 11 85 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011b8d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011b8d5:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011b8db:	83 ec 0c             	sub    $0xc,%esp
f011b8de:	50                   	push   %eax
f011b8df:	e8 35 c2 fe ff       	call   f0107b19 <kfree>
f011b8e4:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b8e7:	e8 f7 84 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011b8ec:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b8ef:	74 17                	je     f011b908 <test_kmalloc_bestfit1+0x105f>
f011b8f1:	83 ec 04             	sub    $0x4,%esp
f011b8f4:	68 74 b4 13 f0       	push   $0xf013b474
f011b8f9:	68 16 02 00 00       	push   $0x216
f011b8fe:	68 5a b4 13 f0       	push   $0xf013b45a
f011b903:	e8 fd 48 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b908:	e8 4c 17 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b90d:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b910:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b915:	74 17                	je     f011b92e <test_kmalloc_bestfit1+0x1085>
f011b917:	83 ec 04             	sub    $0x4,%esp
f011b91a:	68 b7 b8 13 f0       	push   $0xf013b8b7
f011b91f:	68 17 02 00 00       	push   $0x217
f011b924:	68 5a b4 13 f0       	push   $0xf013b45a
f011b929:	e8 d7 48 fe ff       	call   f0100205 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011b92e:	e8 26 17 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b933:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b936:	e8 a8 84 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011b93b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011b93e:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011b944:	83 ec 0c             	sub    $0xc,%esp
f011b947:	50                   	push   %eax
f011b948:	e8 cc c1 fe ff       	call   f0107b19 <kfree>
f011b94d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b950:	e8 8e 84 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011b955:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b958:	74 17                	je     f011b971 <test_kmalloc_bestfit1+0x10c8>
f011b95a:	83 ec 04             	sub    $0x4,%esp
f011b95d:	68 74 b4 13 f0       	push   $0xf013b474
f011b962:	68 1d 02 00 00       	push   $0x21d
f011b967:	68 5a b4 13 f0       	push   $0xf013b45a
f011b96c:	e8 94 48 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011b971:	e8 e3 16 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b976:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b979:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b97e:	74 17                	je     f011b997 <test_kmalloc_bestfit1+0x10ee>
f011b980:	83 ec 04             	sub    $0x4,%esp
f011b983:	68 b7 b8 13 f0       	push   $0xf013b8b7
f011b988:	68 1e 02 00 00       	push   $0x21e
f011b98d:	68 5a b4 13 f0       	push   $0xf013b45a
f011b992:	e8 6e 48 fe ff       	call   f0100205 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011b997:	e8 bd 16 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011b99c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b99f:	e8 3f 84 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011b9a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011b9a7:	83 ec 0c             	sub    $0xc,%esp
f011b9aa:	68 00 fc 1f 00       	push   $0x1ffc00
f011b9af:	e8 7c c0 fe ff       	call   f0107a30 <kmalloc>
f011b9b4:	83 c4 10             	add    $0x10,%esp
f011b9b7:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011b9bd:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011b9c3:	89 c1                	mov    %eax,%ecx
f011b9c5:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011b9cc:	10 00 00 
f011b9cf:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011b9d5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b9da:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011b9e0:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b9e6:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9eb:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011b9f1:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b9f7:	29 d0                	sub    %edx,%eax
f011b9f9:	89 c3                	mov    %eax,%ebx
f011b9fb:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011ba02:	10 00 00 
f011ba05:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011ba0a:	0f b6 d0             	movzbl %al,%edx
f011ba0d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011ba13:	01 d0                	add    %edx,%eax
f011ba15:	48                   	dec    %eax
f011ba16:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011ba1c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011ba22:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba27:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011ba2d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011ba33:	29 d0                	sub    %edx,%eax
f011ba35:	01 c3                	add    %eax,%ebx
f011ba37:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011ba3e:	10 00 00 
f011ba41:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011ba46:	0f b6 c0             	movzbl %al,%eax
f011ba49:	c1 e0 04             	shl    $0x4,%eax
f011ba4c:	89 c2                	mov    %eax,%edx
f011ba4e:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011ba54:	01 d0                	add    %edx,%eax
f011ba56:	48                   	dec    %eax
f011ba57:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011ba5d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011ba63:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba68:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011ba6e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011ba74:	29 d0                	sub    %edx,%eax
f011ba76:	01 d8                	add    %ebx,%eax
f011ba78:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011ba7d:	39 c1                	cmp    %eax,%ecx
f011ba7f:	74 17                	je     f011ba98 <test_kmalloc_bestfit1+0x11ef>
f011ba81:	83 ec 04             	sub    $0x4,%esp
f011ba84:	68 74 b8 13 f0       	push   $0xf013b874
f011ba89:	68 27 02 00 00       	push   $0x227
f011ba8e:	68 5a b4 13 f0       	push   $0xf013b45a
f011ba93:	e8 6d 47 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ba98:	e8 46 83 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011ba9d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011baa0:	74 17                	je     f011bab9 <test_kmalloc_bestfit1+0x1210>
f011baa2:	83 ec 04             	sub    $0x4,%esp
f011baa5:	68 74 b4 13 f0       	push   $0xf013b474
f011baaa:	68 28 02 00 00       	push   $0x228
f011baaf:	68 5a b4 13 f0       	push   $0xf013b45a
f011bab4:	e8 4c 47 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011bab9:	e8 9b 15 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011babe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011bac1:	29 c2                	sub    %eax,%edx
f011bac3:	89 d0                	mov    %edx,%eax
f011bac5:	3d 00 02 00 00       	cmp    $0x200,%eax
f011baca:	74 17                	je     f011bae3 <test_kmalloc_bestfit1+0x123a>
f011bacc:	83 ec 04             	sub    $0x4,%esp
f011bacf:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011bad4:	68 29 02 00 00       	push   $0x229
f011bad9:	68 5a b4 13 f0       	push   $0xf013b45a
f011bade:	e8 22 47 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011bae3:	83 ec 0c             	sub    $0xc,%esp
f011bae6:	68 c4 b8 13 f0       	push   $0xf013b8c4
f011baeb:	e8 1e 52 fe ff       	call   f0100d0e <cprintf>
f011baf0:	83 c4 10             	add    $0x10,%esp

	return 1;
f011baf3:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011baf8:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011bafb:	5b                   	pop    %ebx
f011bafc:	5f                   	pop    %edi
f011bafd:	5d                   	pop    %ebp
f011bafe:	c3                   	ret    

f011baff <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011baff:	55                   	push   %ebp
f011bb00:	89 e5                	mov    %esp,%ebp
f011bb02:	57                   	push   %edi
f011bb03:	53                   	push   %ebx
f011bb04:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011bb0a:	83 ec 0c             	sub    $0xc,%esp
f011bb0d:	68 9c b3 13 f0       	push   $0xf013b39c
f011bb12:	e8 f7 51 fe ff       	call   f0100d0e <cprintf>
f011bb17:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011bb1a:	83 ec 0c             	sub    $0xc,%esp
f011bb1d:	68 cc b3 13 f0       	push   $0xf013b3cc
f011bb22:	e8 e7 51 fe ff       	call   f0100d0e <cprintf>
f011bb27:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011bb2a:	83 ec 0c             	sub    $0xc,%esp
f011bb2d:	68 9c b3 13 f0       	push   $0xf013b39c
f011bb32:	e8 d7 51 fe ff       	call   f0100d0e <cprintf>
f011bb37:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011bb3a:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011bb40:	b9 14 00 00 00       	mov    $0x14,%ecx
f011bb45:	b8 00 00 00 00       	mov    $0x0,%eax
f011bb4a:	89 d7                	mov    %edx,%edi
f011bb4c:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011bb4e:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011bb55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011bb58:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bb5d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011bb60:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011bb63:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb68:	f7 75 f4             	divl   -0xc(%ebp)
f011bb6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011bb6e:	29 d0                	sub    %edx,%eax
f011bb70:	89 c1                	mov    %eax,%ecx
f011bb72:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011bb79:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011bb7e:	0f b6 d0             	movzbl %al,%edx
f011bb81:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011bb84:	01 d0                	add    %edx,%eax
f011bb86:	48                   	dec    %eax
f011bb87:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011bb8a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011bb8d:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb92:	f7 75 ec             	divl   -0x14(%ebp)
f011bb95:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011bb98:	29 d0                	sub    %edx,%eax
f011bb9a:	01 c1                	add    %eax,%ecx
f011bb9c:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011bba3:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011bba8:	0f b6 c0             	movzbl %al,%eax
f011bbab:	c1 e0 04             	shl    $0x4,%eax
f011bbae:	89 c2                	mov    %eax,%edx
f011bbb0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011bbb3:	01 d0                	add    %edx,%eax
f011bbb5:	48                   	dec    %eax
f011bbb6:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011bbb9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011bbbc:	ba 00 00 00 00       	mov    $0x0,%edx
f011bbc1:	f7 75 e4             	divl   -0x1c(%ebp)
f011bbc4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011bbc7:	29 d0                	sub    %edx,%eax
f011bbc9:	01 c8                	add    %ecx,%eax
f011bbcb:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011bbd0:	29 c2                	sub    %eax,%edx
f011bbd2:	89 d0                	mov    %edx,%eax
f011bbd4:	83 ec 0c             	sub    $0xc,%esp
f011bbd7:	50                   	push   %eax
f011bbd8:	e8 53 be fe ff       	call   f0107a30 <kmalloc>
f011bbdd:	83 c4 10             	add    $0x10,%esp
f011bbe0:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011bbe6:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011bbec:	85 c0                	test   %eax,%eax
f011bbee:	74 17                	je     f011bc07 <test_kmalloc_bestfit2+0x108>
f011bbf0:	83 ec 04             	sub    $0x4,%esp
f011bbf3:	68 0c b9 13 f0       	push   $0xf013b90c
f011bbf8:	68 3f 02 00 00       	push   $0x23f
f011bbfd:	68 5a b4 13 f0       	push   $0xf013b45a
f011bc02:	e8 fe 45 fe ff       	call   f0100205 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011bc07:	e8 4d 14 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011bc0c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bc0f:	e8 cf 81 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011bc14:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011bc17:	83 ec 0c             	sub    $0xc,%esp
f011bc1a:	68 00 fc 1f 00       	push   $0x1ffc00
f011bc1f:	e8 0c be fe ff       	call   f0107a30 <kmalloc>
f011bc24:	83 c4 10             	add    $0x10,%esp
f011bc27:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011bc2d:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011bc33:	89 c1                	mov    %eax,%ecx
f011bc35:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011bc3c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011bc3f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bc44:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011bc47:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011bc4a:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc4f:	f7 75 d4             	divl   -0x2c(%ebp)
f011bc52:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011bc55:	29 d0                	sub    %edx,%eax
f011bc57:	89 c3                	mov    %eax,%ebx
f011bc59:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011bc60:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011bc65:	0f b6 d0             	movzbl %al,%edx
f011bc68:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011bc6b:	01 d0                	add    %edx,%eax
f011bc6d:	48                   	dec    %eax
f011bc6e:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011bc71:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011bc74:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc79:	f7 75 cc             	divl   -0x34(%ebp)
f011bc7c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011bc7f:	29 d0                	sub    %edx,%eax
f011bc81:	01 c3                	add    %eax,%ebx
f011bc83:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011bc8a:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011bc8f:	0f b6 c0             	movzbl %al,%eax
f011bc92:	c1 e0 04             	shl    $0x4,%eax
f011bc95:	89 c2                	mov    %eax,%edx
f011bc97:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011bc9a:	01 d0                	add    %edx,%eax
f011bc9c:	48                   	dec    %eax
f011bc9d:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011bca0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011bca3:	ba 00 00 00 00       	mov    $0x0,%edx
f011bca8:	f7 75 c4             	divl   -0x3c(%ebp)
f011bcab:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011bcae:	29 d0                	sub    %edx,%eax
f011bcb0:	01 d8                	add    %ebx,%eax
f011bcb2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011bcb7:	39 c1                	cmp    %eax,%ecx
f011bcb9:	74 17                	je     f011bcd2 <test_kmalloc_bestfit2+0x1d3>
f011bcbb:	83 ec 04             	sub    $0x4,%esp
f011bcbe:	68 74 b8 13 f0       	push   $0xf013b874
f011bcc3:	68 49 02 00 00       	push   $0x249
f011bcc8:	68 5a b4 13 f0       	push   $0xf013b45a
f011bccd:	e8 33 45 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bcd2:	e8 0c 81 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011bcd7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bcda:	74 17                	je     f011bcf3 <test_kmalloc_bestfit2+0x1f4>
f011bcdc:	83 ec 04             	sub    $0x4,%esp
f011bcdf:	68 74 b4 13 f0       	push   $0xf013b474
f011bce4:	68 4a 02 00 00       	push   $0x24a
f011bce9:	68 5a b4 13 f0       	push   $0xf013b45a
f011bcee:	e8 12 45 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011bcf3:	e8 61 13 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011bcf8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bcfb:	29 c2                	sub    %eax,%edx
f011bcfd:	89 d0                	mov    %edx,%eax
f011bcff:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bd04:	74 17                	je     f011bd1d <test_kmalloc_bestfit2+0x21e>
f011bd06:	83 ec 04             	sub    $0x4,%esp
f011bd09:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011bd0e:	68 4b 02 00 00       	push   $0x24b
f011bd13:	68 5a b4 13 f0       	push   $0xf013b45a
f011bd18:	e8 e8 44 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011bd1d:	e8 37 13 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011bd22:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bd25:	e8 b9 80 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011bd2a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011bd2d:	83 ec 0c             	sub    $0xc,%esp
f011bd30:	68 00 fc 1f 00       	push   $0x1ffc00
f011bd35:	e8 f6 bc fe ff       	call   f0107a30 <kmalloc>
f011bd3a:	83 c4 10             	add    $0x10,%esp
f011bd3d:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011bd43:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011bd49:	89 c1                	mov    %eax,%ecx
f011bd4b:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011bd52:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011bd55:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bd5a:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011bd5d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bd60:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd65:	f7 75 bc             	divl   -0x44(%ebp)
f011bd68:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bd6b:	29 d0                	sub    %edx,%eax
f011bd6d:	89 c3                	mov    %eax,%ebx
f011bd6f:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011bd76:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011bd7b:	0f b6 d0             	movzbl %al,%edx
f011bd7e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011bd81:	01 d0                	add    %edx,%eax
f011bd83:	48                   	dec    %eax
f011bd84:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011bd87:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bd8a:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd8f:	f7 75 b4             	divl   -0x4c(%ebp)
f011bd92:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bd95:	29 d0                	sub    %edx,%eax
f011bd97:	01 c3                	add    %eax,%ebx
f011bd99:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011bda0:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011bda5:	0f b6 c0             	movzbl %al,%eax
f011bda8:	c1 e0 04             	shl    $0x4,%eax
f011bdab:	89 c2                	mov    %eax,%edx
f011bdad:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011bdb0:	01 d0                	add    %edx,%eax
f011bdb2:	48                   	dec    %eax
f011bdb3:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011bdb6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011bdb9:	ba 00 00 00 00       	mov    $0x0,%edx
f011bdbe:	f7 75 ac             	divl   -0x54(%ebp)
f011bdc1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011bdc4:	29 d0                	sub    %edx,%eax
f011bdc6:	01 d8                	add    %ebx,%eax
f011bdc8:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011bdcd:	39 c1                	cmp    %eax,%ecx
f011bdcf:	74 17                	je     f011bde8 <test_kmalloc_bestfit2+0x2e9>
f011bdd1:	83 ec 04             	sub    $0x4,%esp
f011bdd4:	68 74 b8 13 f0       	push   $0xf013b874
f011bdd9:	68 51 02 00 00       	push   $0x251
f011bdde:	68 5a b4 13 f0       	push   $0xf013b45a
f011bde3:	e8 1d 44 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bde8:	e8 f6 7f fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011bded:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bdf0:	74 17                	je     f011be09 <test_kmalloc_bestfit2+0x30a>
f011bdf2:	83 ec 04             	sub    $0x4,%esp
f011bdf5:	68 74 b4 13 f0       	push   $0xf013b474
f011bdfa:	68 52 02 00 00       	push   $0x252
f011bdff:	68 5a b4 13 f0       	push   $0xf013b45a
f011be04:	e8 fc 43 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011be09:	e8 4b 12 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011be0e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011be11:	29 c2                	sub    %eax,%edx
f011be13:	89 d0                	mov    %edx,%eax
f011be15:	3d 00 02 00 00       	cmp    $0x200,%eax
f011be1a:	74 17                	je     f011be33 <test_kmalloc_bestfit2+0x334>
f011be1c:	83 ec 04             	sub    $0x4,%esp
f011be1f:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011be24:	68 53 02 00 00       	push   $0x253
f011be29:	68 5a b4 13 f0       	push   $0xf013b45a
f011be2e:	e8 d2 43 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011be33:	e8 21 12 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011be38:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011be3b:	e8 a3 7f fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011be40:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011be43:	83 ec 0c             	sub    $0xc,%esp
f011be46:	68 00 08 00 00       	push   $0x800
f011be4b:	e8 e0 bb fe ff       	call   f0107a30 <kmalloc>
f011be50:	83 c4 10             	add    $0x10,%esp
f011be53:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011be59:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011be5f:	89 c1                	mov    %eax,%ecx
f011be61:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011be68:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011be6b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011be70:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011be73:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011be76:	ba 00 00 00 00       	mov    $0x0,%edx
f011be7b:	f7 75 a4             	divl   -0x5c(%ebp)
f011be7e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011be81:	29 d0                	sub    %edx,%eax
f011be83:	89 c3                	mov    %eax,%ebx
f011be85:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011be8c:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011be91:	0f b6 d0             	movzbl %al,%edx
f011be94:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011be97:	01 d0                	add    %edx,%eax
f011be99:	48                   	dec    %eax
f011be9a:	89 45 98             	mov    %eax,-0x68(%ebp)
f011be9d:	8b 45 98             	mov    -0x68(%ebp),%eax
f011bea0:	ba 00 00 00 00       	mov    $0x0,%edx
f011bea5:	f7 75 9c             	divl   -0x64(%ebp)
f011bea8:	8b 45 98             	mov    -0x68(%ebp),%eax
f011beab:	29 d0                	sub    %edx,%eax
f011bead:	01 c3                	add    %eax,%ebx
f011beaf:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011beb6:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011bebb:	0f b6 c0             	movzbl %al,%eax
f011bebe:	c1 e0 04             	shl    $0x4,%eax
f011bec1:	89 c2                	mov    %eax,%edx
f011bec3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011bec6:	01 d0                	add    %edx,%eax
f011bec8:	48                   	dec    %eax
f011bec9:	89 45 90             	mov    %eax,-0x70(%ebp)
f011becc:	8b 45 90             	mov    -0x70(%ebp),%eax
f011becf:	ba 00 00 00 00       	mov    $0x0,%edx
f011bed4:	f7 75 94             	divl   -0x6c(%ebp)
f011bed7:	8b 45 90             	mov    -0x70(%ebp),%eax
f011beda:	29 d0                	sub    %edx,%eax
f011bedc:	01 d8                	add    %ebx,%eax
f011bede:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011bee3:	39 c1                	cmp    %eax,%ecx
f011bee5:	74 17                	je     f011befe <test_kmalloc_bestfit2+0x3ff>
f011bee7:	83 ec 04             	sub    $0x4,%esp
f011beea:	68 74 b8 13 f0       	push   $0xf013b874
f011beef:	68 59 02 00 00       	push   $0x259
f011bef4:	68 5a b4 13 f0       	push   $0xf013b45a
f011bef9:	e8 07 43 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011befe:	e8 e0 7e fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011bf03:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bf06:	74 17                	je     f011bf1f <test_kmalloc_bestfit2+0x420>
f011bf08:	83 ec 04             	sub    $0x4,%esp
f011bf0b:	68 74 b4 13 f0       	push   $0xf013b474
f011bf10:	68 5a 02 00 00       	push   $0x25a
f011bf15:	68 5a b4 13 f0       	push   $0xf013b45a
f011bf1a:	e8 e6 42 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011bf1f:	e8 35 11 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011bf24:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bf27:	29 c2                	sub    %eax,%edx
f011bf29:	89 d0                	mov    %edx,%eax
f011bf2b:	83 f8 01             	cmp    $0x1,%eax
f011bf2e:	74 17                	je     f011bf47 <test_kmalloc_bestfit2+0x448>
f011bf30:	83 ec 04             	sub    $0x4,%esp
f011bf33:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011bf38:	68 5b 02 00 00       	push   $0x25b
f011bf3d:	68 5a b4 13 f0       	push   $0xf013b45a
f011bf42:	e8 be 42 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011bf47:	e8 0d 11 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011bf4c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bf4f:	e8 8f 7e fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011bf54:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011bf57:	83 ec 0c             	sub    $0xc,%esp
f011bf5a:	68 00 08 00 00       	push   $0x800
f011bf5f:	e8 cc ba fe ff       	call   f0107a30 <kmalloc>
f011bf64:	83 c4 10             	add    $0x10,%esp
f011bf67:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011bf6d:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011bf73:	89 c1                	mov    %eax,%ecx
f011bf75:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011bf7c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011bf7f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bf84:	89 45 88             	mov    %eax,-0x78(%ebp)
f011bf87:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bf8a:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf8f:	f7 75 8c             	divl   -0x74(%ebp)
f011bf92:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bf95:	29 d0                	sub    %edx,%eax
f011bf97:	89 c3                	mov    %eax,%ebx
f011bf99:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011bfa0:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011bfa5:	0f b6 d0             	movzbl %al,%edx
f011bfa8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011bfab:	01 d0                	add    %edx,%eax
f011bfad:	48                   	dec    %eax
f011bfae:	89 45 80             	mov    %eax,-0x80(%ebp)
f011bfb1:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bfb4:	ba 00 00 00 00       	mov    $0x0,%edx
f011bfb9:	f7 75 84             	divl   -0x7c(%ebp)
f011bfbc:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bfbf:	29 d0                	sub    %edx,%eax
f011bfc1:	01 c3                	add    %eax,%ebx
f011bfc3:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011bfca:	10 00 00 
f011bfcd:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011bfd2:	0f b6 c0             	movzbl %al,%eax
f011bfd5:	c1 e0 04             	shl    $0x4,%eax
f011bfd8:	89 c2                	mov    %eax,%edx
f011bfda:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011bfe0:	01 d0                	add    %edx,%eax
f011bfe2:	48                   	dec    %eax
f011bfe3:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011bfe9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011bfef:	ba 00 00 00 00       	mov    $0x0,%edx
f011bff4:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011bffa:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c000:	29 d0                	sub    %edx,%eax
f011c002:	01 d8                	add    %ebx,%eax
f011c004:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011c009:	39 c1                	cmp    %eax,%ecx
f011c00b:	74 17                	je     f011c024 <test_kmalloc_bestfit2+0x525>
f011c00d:	83 ec 04             	sub    $0x4,%esp
f011c010:	68 74 b8 13 f0       	push   $0xf013b874
f011c015:	68 61 02 00 00       	push   $0x261
f011c01a:	68 5a b4 13 f0       	push   $0xf013b45a
f011c01f:	e8 e1 41 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c024:	e8 ba 7d fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011c029:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c02c:	74 17                	je     f011c045 <test_kmalloc_bestfit2+0x546>
f011c02e:	83 ec 04             	sub    $0x4,%esp
f011c031:	68 74 b4 13 f0       	push   $0xf013b474
f011c036:	68 62 02 00 00       	push   $0x262
f011c03b:	68 5a b4 13 f0       	push   $0xf013b45a
f011c040:	e8 c0 41 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011c045:	e8 0f 10 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c04a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c04d:	29 c2                	sub    %eax,%edx
f011c04f:	89 d0                	mov    %edx,%eax
f011c051:	83 f8 01             	cmp    $0x1,%eax
f011c054:	74 17                	je     f011c06d <test_kmalloc_bestfit2+0x56e>
f011c056:	83 ec 04             	sub    $0x4,%esp
f011c059:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011c05e:	68 63 02 00 00       	push   $0x263
f011c063:	68 5a b4 13 f0       	push   $0xf013b45a
f011c068:	e8 98 41 fe ff       	call   f0100205 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c06d:	e8 e7 0f ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c072:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c075:	e8 69 7d fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011c07a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011c07d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011c083:	83 ec 0c             	sub    $0xc,%esp
f011c086:	50                   	push   %eax
f011c087:	e8 8d ba fe ff       	call   f0107b19 <kfree>
f011c08c:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c08f:	e8 4f 7d fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011c094:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c097:	74 17                	je     f011c0b0 <test_kmalloc_bestfit2+0x5b1>
f011c099:	83 ec 04             	sub    $0x4,%esp
f011c09c:	68 74 b4 13 f0       	push   $0xf013b474
f011c0a1:	68 69 02 00 00       	push   $0x269
f011c0a6:	68 5a b4 13 f0       	push   $0xf013b45a
f011c0ab:	e8 55 41 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011c0b0:	e8 a4 0f ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c0b5:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c0b8:	83 f8 01             	cmp    $0x1,%eax
f011c0bb:	74 17                	je     f011c0d4 <test_kmalloc_bestfit2+0x5d5>
f011c0bd:	83 ec 04             	sub    $0x4,%esp
f011c0c0:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011c0c5:	68 6a 02 00 00       	push   $0x26a
f011c0ca:	68 5a b4 13 f0       	push   $0xf013b45a
f011c0cf:	e8 31 41 fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011c0d4:	e8 80 0f ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c0d9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c0dc:	e8 02 7d fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011c0e1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011c0e4:	83 ec 0c             	sub    $0xc,%esp
f011c0e7:	68 00 1c 00 00       	push   $0x1c00
f011c0ec:	e8 3f b9 fe ff       	call   f0107a30 <kmalloc>
f011c0f1:	83 c4 10             	add    $0x10,%esp
f011c0f4:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011c0fa:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011c100:	89 c1                	mov    %eax,%ecx
f011c102:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011c109:	10 00 00 
f011c10c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011c112:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c117:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011c11d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c123:	ba 00 00 00 00       	mov    $0x0,%edx
f011c128:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011c12e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c134:	29 d0                	sub    %edx,%eax
f011c136:	89 c3                	mov    %eax,%ebx
f011c138:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011c13f:	10 00 00 
f011c142:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011c147:	0f b6 d0             	movzbl %al,%edx
f011c14a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011c150:	01 d0                	add    %edx,%eax
f011c152:	48                   	dec    %eax
f011c153:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011c159:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c15f:	ba 00 00 00 00       	mov    $0x0,%edx
f011c164:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011c16a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c170:	29 d0                	sub    %edx,%eax
f011c172:	01 c3                	add    %eax,%ebx
f011c174:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011c17b:	10 00 00 
f011c17e:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011c183:	0f b6 c0             	movzbl %al,%eax
f011c186:	c1 e0 04             	shl    $0x4,%eax
f011c189:	89 c2                	mov    %eax,%edx
f011c18b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011c191:	01 d0                	add    %edx,%eax
f011c193:	48                   	dec    %eax
f011c194:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011c19a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c1a0:	ba 00 00 00 00       	mov    $0x0,%edx
f011c1a5:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011c1ab:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c1b1:	29 d0                	sub    %edx,%eax
f011c1b3:	01 d8                	add    %ebx,%eax
f011c1b5:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011c1ba:	39 c1                	cmp    %eax,%ecx
f011c1bc:	74 17                	je     f011c1d5 <test_kmalloc_bestfit2+0x6d6>
f011c1be:	83 ec 04             	sub    $0x4,%esp
f011c1c1:	68 74 b8 13 f0       	push   $0xf013b874
f011c1c6:	68 70 02 00 00       	push   $0x270
f011c1cb:	68 5a b4 13 f0       	push   $0xf013b45a
f011c1d0:	e8 30 40 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c1d5:	e8 09 7c fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011c1da:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c1dd:	74 17                	je     f011c1f6 <test_kmalloc_bestfit2+0x6f7>
f011c1df:	83 ec 04             	sub    $0x4,%esp
f011c1e2:	68 74 b4 13 f0       	push   $0xf013b474
f011c1e7:	68 71 02 00 00       	push   $0x271
f011c1ec:	68 5a b4 13 f0       	push   $0xf013b45a
f011c1f1:	e8 0f 40 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011c1f6:	e8 5e 0e ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c1fb:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c1fe:	29 c2                	sub    %eax,%edx
f011c200:	89 d0                	mov    %edx,%eax
f011c202:	83 f8 02             	cmp    $0x2,%eax
f011c205:	74 17                	je     f011c21e <test_kmalloc_bestfit2+0x71f>
f011c207:	83 ec 04             	sub    $0x4,%esp
f011c20a:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011c20f:	68 72 02 00 00       	push   $0x272
f011c214:	68 5a b4 13 f0       	push   $0xf013b45a
f011c219:	e8 e7 3f fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c21e:	e8 36 0e ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c223:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c226:	e8 b8 7b fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011c22b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011c22e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011c234:	83 ec 0c             	sub    $0xc,%esp
f011c237:	50                   	push   %eax
f011c238:	e8 dc b8 fe ff       	call   f0107b19 <kfree>
f011c23d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c240:	e8 9e 7b fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011c245:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c248:	74 17                	je     f011c261 <test_kmalloc_bestfit2+0x762>
f011c24a:	83 ec 04             	sub    $0x4,%esp
f011c24d:	68 74 b4 13 f0       	push   $0xf013b474
f011c252:	68 78 02 00 00       	push   $0x278
f011c257:	68 5a b4 13 f0       	push   $0xf013b45a
f011c25c:	e8 a4 3f fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011c261:	e8 f3 0d ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c266:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c269:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c26e:	74 17                	je     f011c287 <test_kmalloc_bestfit2+0x788>
f011c270:	83 ec 04             	sub    $0x4,%esp
f011c273:	68 28 b7 13 f0       	push   $0xf013b728
f011c278:	68 79 02 00 00       	push   $0x279
f011c27d:	68 5a b4 13 f0       	push   $0xf013b45a
f011c282:	e8 7e 3f fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c287:	e8 cd 0d ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c28c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c28f:	e8 4f 7b fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011c294:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011c297:	83 ec 0c             	sub    $0xc,%esp
f011c29a:	68 00 fc 2f 00       	push   $0x2ffc00
f011c29f:	e8 8c b7 fe ff       	call   f0107a30 <kmalloc>
f011c2a4:	83 c4 10             	add    $0x10,%esp
f011c2a7:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c2ad:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011c2b3:	89 c1                	mov    %eax,%ecx
f011c2b5:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011c2bc:	10 00 00 
f011c2bf:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011c2c5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c2ca:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011c2d0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c2d6:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2db:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011c2e1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c2e7:	29 d0                	sub    %edx,%eax
f011c2e9:	89 c3                	mov    %eax,%ebx
f011c2eb:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011c2f2:	10 00 00 
f011c2f5:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011c2fa:	0f b6 d0             	movzbl %al,%edx
f011c2fd:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011c303:	01 d0                	add    %edx,%eax
f011c305:	48                   	dec    %eax
f011c306:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011c30c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c312:	ba 00 00 00 00       	mov    $0x0,%edx
f011c317:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011c31d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c323:	29 d0                	sub    %edx,%eax
f011c325:	01 c3                	add    %eax,%ebx
f011c327:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011c32e:	10 00 00 
f011c331:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011c336:	0f b6 c0             	movzbl %al,%eax
f011c339:	c1 e0 04             	shl    $0x4,%eax
f011c33c:	89 c2                	mov    %eax,%edx
f011c33e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011c344:	01 d0                	add    %edx,%eax
f011c346:	48                   	dec    %eax
f011c347:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011c34d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c353:	ba 00 00 00 00       	mov    $0x0,%edx
f011c358:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011c35e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c364:	29 d0                	sub    %edx,%eax
f011c366:	01 d8                	add    %ebx,%eax
f011c368:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011c36d:	39 c1                	cmp    %eax,%ecx
f011c36f:	74 17                	je     f011c388 <test_kmalloc_bestfit2+0x889>
f011c371:	83 ec 04             	sub    $0x4,%esp
f011c374:	68 74 b8 13 f0       	push   $0xf013b874
f011c379:	68 7f 02 00 00       	push   $0x27f
f011c37e:	68 5a b4 13 f0       	push   $0xf013b45a
f011c383:	e8 7d 3e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c388:	e8 56 7a fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011c38d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c390:	74 17                	je     f011c3a9 <test_kmalloc_bestfit2+0x8aa>
f011c392:	83 ec 04             	sub    $0x4,%esp
f011c395:	68 74 b4 13 f0       	push   $0xf013b474
f011c39a:	68 80 02 00 00       	push   $0x280
f011c39f:	68 5a b4 13 f0       	push   $0xf013b45a
f011c3a4:	e8 5c 3e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011c3a9:	e8 ab 0c ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c3ae:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c3b1:	29 c2                	sub    %eax,%edx
f011c3b3:	89 d0                	mov    %edx,%eax
f011c3b5:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c3ba:	74 17                	je     f011c3d3 <test_kmalloc_bestfit2+0x8d4>
f011c3bc:	83 ec 04             	sub    $0x4,%esp
f011c3bf:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011c3c4:	68 81 02 00 00       	push   $0x281
f011c3c9:	68 5a b4 13 f0       	push   $0xf013b45a
f011c3ce:	e8 32 3e fe ff       	call   f0100205 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011c3d3:	e8 81 0c ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c3d8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c3db:	e8 03 7a fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011c3e0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011c3e3:	83 ec 0c             	sub    $0xc,%esp
f011c3e6:	68 00 18 20 00       	push   $0x201800
f011c3eb:	e8 40 b6 fe ff       	call   f0107a30 <kmalloc>
f011c3f0:	83 c4 10             	add    $0x10,%esp
f011c3f3:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c3f9:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c3ff:	89 c1                	mov    %eax,%ecx
f011c401:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011c408:	10 00 00 
f011c40b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011c411:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c416:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011c41c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c422:	ba 00 00 00 00       	mov    $0x0,%edx
f011c427:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011c42d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c433:	29 d0                	sub    %edx,%eax
f011c435:	89 c3                	mov    %eax,%ebx
f011c437:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011c43e:	10 00 00 
f011c441:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011c446:	0f b6 d0             	movzbl %al,%edx
f011c449:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011c44f:	01 d0                	add    %edx,%eax
f011c451:	48                   	dec    %eax
f011c452:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011c458:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c45e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c463:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011c469:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c46f:	29 d0                	sub    %edx,%eax
f011c471:	01 c3                	add    %eax,%ebx
f011c473:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011c47a:	10 00 00 
f011c47d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011c482:	0f b6 c0             	movzbl %al,%eax
f011c485:	c1 e0 04             	shl    $0x4,%eax
f011c488:	89 c2                	mov    %eax,%edx
f011c48a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011c490:	01 d0                	add    %edx,%eax
f011c492:	48                   	dec    %eax
f011c493:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011c499:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c49f:	ba 00 00 00 00       	mov    $0x0,%edx
f011c4a4:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011c4aa:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c4b0:	29 d0                	sub    %edx,%eax
f011c4b2:	01 d8                	add    %ebx,%eax
f011c4b4:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c4b9:	39 c1                	cmp    %eax,%ecx
f011c4bb:	74 17                	je     f011c4d4 <test_kmalloc_bestfit2+0x9d5>
f011c4bd:	83 ec 04             	sub    $0x4,%esp
f011c4c0:	68 74 b8 13 f0       	push   $0xf013b874
f011c4c5:	68 87 02 00 00       	push   $0x287
f011c4ca:	68 5a b4 13 f0       	push   $0xf013b45a
f011c4cf:	e8 31 3d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c4d4:	e8 0a 79 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011c4d9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c4dc:	74 17                	je     f011c4f5 <test_kmalloc_bestfit2+0x9f6>
f011c4de:	83 ec 04             	sub    $0x4,%esp
f011c4e1:	68 74 b4 13 f0       	push   $0xf013b474
f011c4e6:	68 88 02 00 00       	push   $0x288
f011c4eb:	68 5a b4 13 f0       	push   $0xf013b45a
f011c4f0:	e8 10 3d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011c4f5:	e8 5f 0b ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c4fa:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c4fd:	29 c2                	sub    %eax,%edx
f011c4ff:	89 d0                	mov    %edx,%eax
f011c501:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c506:	74 17                	je     f011c51f <test_kmalloc_bestfit2+0xa20>
f011c508:	83 ec 04             	sub    $0x4,%esp
f011c50b:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011c510:	68 89 02 00 00       	push   $0x289
f011c515:	68 5a b4 13 f0       	push   $0xf013b45a
f011c51a:	e8 e6 3c fe ff       	call   f0100205 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011c51f:	e8 35 0b ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c524:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c527:	e8 b7 78 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011c52c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011c52f:	83 ec 0c             	sub    $0xc,%esp
f011c532:	68 00 fc 4f 00       	push   $0x4ffc00
f011c537:	e8 f4 b4 fe ff       	call   f0107a30 <kmalloc>
f011c53c:	83 c4 10             	add    $0x10,%esp
f011c53f:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011c545:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011c54b:	89 c1                	mov    %eax,%ecx
f011c54d:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011c554:	10 00 00 
f011c557:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011c55d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c562:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011c568:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c56e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c573:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011c579:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c57f:	29 d0                	sub    %edx,%eax
f011c581:	89 c3                	mov    %eax,%ebx
f011c583:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011c58a:	10 00 00 
f011c58d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011c592:	0f b6 d0             	movzbl %al,%edx
f011c595:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011c59b:	01 d0                	add    %edx,%eax
f011c59d:	48                   	dec    %eax
f011c59e:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011c5a4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c5aa:	ba 00 00 00 00       	mov    $0x0,%edx
f011c5af:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011c5b5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c5bb:	29 d0                	sub    %edx,%eax
f011c5bd:	01 c3                	add    %eax,%ebx
f011c5bf:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011c5c6:	10 00 00 
f011c5c9:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011c5ce:	0f b6 c0             	movzbl %al,%eax
f011c5d1:	c1 e0 04             	shl    $0x4,%eax
f011c5d4:	89 c2                	mov    %eax,%edx
f011c5d6:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011c5dc:	01 d0                	add    %edx,%eax
f011c5de:	48                   	dec    %eax
f011c5df:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011c5e5:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c5eb:	ba 00 00 00 00       	mov    $0x0,%edx
f011c5f0:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011c5f6:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c5fc:	29 d0                	sub    %edx,%eax
f011c5fe:	01 d8                	add    %ebx,%eax
f011c600:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011c605:	39 c1                	cmp    %eax,%ecx
f011c607:	74 17                	je     f011c620 <test_kmalloc_bestfit2+0xb21>
f011c609:	83 ec 04             	sub    $0x4,%esp
f011c60c:	68 74 b8 13 f0       	push   $0xf013b874
f011c611:	68 8f 02 00 00       	push   $0x28f
f011c616:	68 5a b4 13 f0       	push   $0xf013b45a
f011c61b:	e8 e5 3b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c620:	e8 be 77 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011c625:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c628:	74 17                	je     f011c641 <test_kmalloc_bestfit2+0xb42>
f011c62a:	83 ec 04             	sub    $0x4,%esp
f011c62d:	68 74 b4 13 f0       	push   $0xf013b474
f011c632:	68 90 02 00 00       	push   $0x290
f011c637:	68 5a b4 13 f0       	push   $0xf013b45a
f011c63c:	e8 c4 3b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011c641:	e8 13 0a ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c646:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c649:	29 c2                	sub    %eax,%edx
f011c64b:	89 d0                	mov    %edx,%eax
f011c64d:	3d 00 05 00 00       	cmp    $0x500,%eax
f011c652:	74 17                	je     f011c66b <test_kmalloc_bestfit2+0xb6c>
f011c654:	83 ec 04             	sub    $0x4,%esp
f011c657:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011c65c:	68 91 02 00 00       	push   $0x291
f011c661:	68 5a b4 13 f0       	push   $0xf013b45a
f011c666:	e8 9a 3b fe ff       	call   f0100205 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c66b:	e8 e9 09 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c670:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c673:	e8 6b 77 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011c678:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f011c67b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c681:	83 ec 0c             	sub    $0xc,%esp
f011c684:	50                   	push   %eax
f011c685:	e8 8f b4 fe ff       	call   f0107b19 <kfree>
f011c68a:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c68d:	e8 51 77 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011c692:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c695:	74 17                	je     f011c6ae <test_kmalloc_bestfit2+0xbaf>
f011c697:	83 ec 04             	sub    $0x4,%esp
f011c69a:	68 74 b4 13 f0       	push   $0xf013b474
f011c69f:	68 97 02 00 00       	push   $0x297
f011c6a4:	68 5a b4 13 f0       	push   $0xf013b45a
f011c6a9:	e8 57 3b fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011c6ae:	e8 a6 09 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c6b3:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c6b6:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c6bb:	74 17                	je     f011c6d4 <test_kmalloc_bestfit2+0xbd5>
f011c6bd:	83 ec 04             	sub    $0x4,%esp
f011c6c0:	68 28 b7 13 f0       	push   $0xf013b728
f011c6c5:	68 98 02 00 00       	push   $0x298
f011c6ca:	68 5a b4 13 f0       	push   $0xf013b45a
f011c6cf:	e8 31 3b fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c6d4:	e8 80 09 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c6d9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c6dc:	e8 02 77 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011c6e1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011c6e4:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011c6ea:	83 ec 0c             	sub    $0xc,%esp
f011c6ed:	50                   	push   %eax
f011c6ee:	e8 26 b4 fe ff       	call   f0107b19 <kfree>
f011c6f3:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c6f6:	e8 e8 76 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011c6fb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c6fe:	74 17                	je     f011c717 <test_kmalloc_bestfit2+0xc18>
f011c700:	83 ec 04             	sub    $0x4,%esp
f011c703:	68 74 b4 13 f0       	push   $0xf013b474
f011c708:	68 9e 02 00 00       	push   $0x29e
f011c70d:	68 5a b4 13 f0       	push   $0xf013b45a
f011c712:	e8 ee 3a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c717:	e8 3d 09 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c71c:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c71f:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c724:	74 17                	je     f011c73d <test_kmalloc_bestfit2+0xc3e>
f011c726:	83 ec 04             	sub    $0x4,%esp
f011c729:	68 54 b9 13 f0       	push   $0xf013b954
f011c72e:	68 9f 02 00 00       	push   $0x29f
f011c733:	68 5a b4 13 f0       	push   $0xf013b45a
f011c738:	e8 c8 3a fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c73d:	e8 17 09 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c742:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c745:	e8 99 76 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011c74a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011c74d:	83 ec 0c             	sub    $0xc,%esp
f011c750:	68 00 fc 1f 00       	push   $0x1ffc00
f011c755:	e8 d6 b2 fe ff       	call   f0107a30 <kmalloc>
f011c75a:	83 c4 10             	add    $0x10,%esp
f011c75d:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c763:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011c769:	89 c1                	mov    %eax,%ecx
f011c76b:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011c772:	10 00 00 
f011c775:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011c77b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c780:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011c786:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c78c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c791:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011c797:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c79d:	29 d0                	sub    %edx,%eax
f011c79f:	89 c3                	mov    %eax,%ebx
f011c7a1:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011c7a8:	10 00 00 
f011c7ab:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011c7b0:	0f b6 d0             	movzbl %al,%edx
f011c7b3:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011c7b9:	01 d0                	add    %edx,%eax
f011c7bb:	48                   	dec    %eax
f011c7bc:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011c7c2:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c7c8:	ba 00 00 00 00       	mov    $0x0,%edx
f011c7cd:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011c7d3:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c7d9:	29 d0                	sub    %edx,%eax
f011c7db:	01 c3                	add    %eax,%ebx
f011c7dd:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011c7e4:	10 00 00 
f011c7e7:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011c7ec:	0f b6 c0             	movzbl %al,%eax
f011c7ef:	c1 e0 04             	shl    $0x4,%eax
f011c7f2:	89 c2                	mov    %eax,%edx
f011c7f4:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011c7fa:	01 d0                	add    %edx,%eax
f011c7fc:	48                   	dec    %eax
f011c7fd:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011c803:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c809:	ba 00 00 00 00       	mov    $0x0,%edx
f011c80e:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011c814:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c81a:	29 d0                	sub    %edx,%eax
f011c81c:	01 d8                	add    %ebx,%eax
f011c81e:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c823:	39 c1                	cmp    %eax,%ecx
f011c825:	74 17                	je     f011c83e <test_kmalloc_bestfit2+0xd3f>
f011c827:	83 ec 04             	sub    $0x4,%esp
f011c82a:	68 74 b8 13 f0       	push   $0xf013b874
f011c82f:	68 a5 02 00 00       	push   $0x2a5
f011c834:	68 5a b4 13 f0       	push   $0xf013b45a
f011c839:	e8 c7 39 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c83e:	e8 a0 75 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011c843:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c846:	74 17                	je     f011c85f <test_kmalloc_bestfit2+0xd60>
f011c848:	83 ec 04             	sub    $0x4,%esp
f011c84b:	68 74 b4 13 f0       	push   $0xf013b474
f011c850:	68 a6 02 00 00       	push   $0x2a6
f011c855:	68 5a b4 13 f0       	push   $0xf013b45a
f011c85a:	e8 a6 39 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011c85f:	e8 f5 07 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c864:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c867:	29 c2                	sub    %eax,%edx
f011c869:	89 d0                	mov    %edx,%eax
f011c86b:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c870:	74 17                	je     f011c889 <test_kmalloc_bestfit2+0xd8a>
f011c872:	83 ec 04             	sub    $0x4,%esp
f011c875:	68 92 b9 13 f0       	push   $0xf013b992
f011c87a:	68 a7 02 00 00       	push   $0x2a7
f011c87f:	68 5a b4 13 f0       	push   $0xf013b45a
f011c884:	e8 7c 39 fe ff       	call   f0100205 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011c889:	e8 cb 07 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c88e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c891:	e8 4d 75 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011c896:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011c899:	83 ec 0c             	sub    $0xc,%esp
f011c89c:	68 00 18 00 00       	push   $0x1800
f011c8a1:	e8 8a b1 fe ff       	call   f0107a30 <kmalloc>
f011c8a6:	83 c4 10             	add    $0x10,%esp
f011c8a9:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c8af:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011c8b5:	89 c1                	mov    %eax,%ecx
f011c8b7:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011c8be:	10 00 00 
f011c8c1:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011c8c7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c8cc:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011c8d2:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c8d8:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8dd:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011c8e3:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c8e9:	29 d0                	sub    %edx,%eax
f011c8eb:	89 c3                	mov    %eax,%ebx
f011c8ed:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011c8f4:	10 00 00 
f011c8f7:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011c8fc:	0f b6 d0             	movzbl %al,%edx
f011c8ff:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011c905:	01 d0                	add    %edx,%eax
f011c907:	48                   	dec    %eax
f011c908:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011c90e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c914:	ba 00 00 00 00       	mov    $0x0,%edx
f011c919:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011c91f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c925:	29 d0                	sub    %edx,%eax
f011c927:	01 c3                	add    %eax,%ebx
f011c929:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011c930:	10 00 00 
f011c933:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011c938:	0f b6 c0             	movzbl %al,%eax
f011c93b:	c1 e0 04             	shl    $0x4,%eax
f011c93e:	89 c2                	mov    %eax,%edx
f011c940:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011c946:	01 d0                	add    %edx,%eax
f011c948:	48                   	dec    %eax
f011c949:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011c94f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c955:	ba 00 00 00 00       	mov    $0x0,%edx
f011c95a:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011c960:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c966:	29 d0                	sub    %edx,%eax
f011c968:	01 d8                	add    %ebx,%eax
f011c96a:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011c96f:	39 c1                	cmp    %eax,%ecx
f011c971:	74 17                	je     f011c98a <test_kmalloc_bestfit2+0xe8b>
f011c973:	83 ec 04             	sub    $0x4,%esp
f011c976:	68 74 b8 13 f0       	push   $0xf013b874
f011c97b:	68 ad 02 00 00       	push   $0x2ad
f011c980:	68 5a b4 13 f0       	push   $0xf013b45a
f011c985:	e8 7b 38 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c98a:	e8 54 74 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011c98f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c992:	74 17                	je     f011c9ab <test_kmalloc_bestfit2+0xeac>
f011c994:	83 ec 04             	sub    $0x4,%esp
f011c997:	68 74 b4 13 f0       	push   $0xf013b474
f011c99c:	68 ae 02 00 00       	push   $0x2ae
f011c9a1:	68 5a b4 13 f0       	push   $0xf013b45a
f011c9a6:	e8 5a 38 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011c9ab:	e8 a9 06 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c9b0:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c9b3:	29 c2                	sub    %eax,%edx
f011c9b5:	89 d0                	mov    %edx,%eax
f011c9b7:	83 f8 02             	cmp    $0x2,%eax
f011c9ba:	74 17                	je     f011c9d3 <test_kmalloc_bestfit2+0xed4>
f011c9bc:	83 ec 04             	sub    $0x4,%esp
f011c9bf:	68 92 b9 13 f0       	push   $0xf013b992
f011c9c4:	68 af 02 00 00       	push   $0x2af
f011c9c9:	68 5a b4 13 f0       	push   $0xf013b45a
f011c9ce:	e8 32 38 fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c9d3:	e8 81 06 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011c9d8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c9db:	e8 03 74 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011c9e0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011c9e3:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011c9e9:	83 ec 0c             	sub    $0xc,%esp
f011c9ec:	50                   	push   %eax
f011c9ed:	e8 27 b1 fe ff       	call   f0107b19 <kfree>
f011c9f2:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c9f5:	e8 e9 73 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011c9fa:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c9fd:	74 17                	je     f011ca16 <test_kmalloc_bestfit2+0xf17>
f011c9ff:	83 ec 04             	sub    $0x4,%esp
f011ca02:	68 74 b4 13 f0       	push   $0xf013b474
f011ca07:	68 b5 02 00 00       	push   $0x2b5
f011ca0c:	68 5a b4 13 f0       	push   $0xf013b45a
f011ca11:	e8 ef 37 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011ca16:	e8 3e 06 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011ca1b:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011ca1e:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ca23:	74 17                	je     f011ca3c <test_kmalloc_bestfit2+0xf3d>
f011ca25:	83 ec 04             	sub    $0x4,%esp
f011ca28:	68 54 b9 13 f0       	push   $0xf013b954
f011ca2d:	68 b6 02 00 00       	push   $0x2b6
f011ca32:	68 5a b4 13 f0       	push   $0xf013b45a
f011ca37:	e8 c9 37 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011ca3c:	e8 18 06 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011ca41:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ca44:	e8 9a 73 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011ca49:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011ca4c:	83 ec 0c             	sub    $0xc,%esp
f011ca4f:	68 00 fc 2f 00       	push   $0x2ffc00
f011ca54:	e8 d7 af fe ff       	call   f0107a30 <kmalloc>
f011ca59:	83 c4 10             	add    $0x10,%esp
f011ca5c:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011ca62:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011ca68:	89 c1                	mov    %eax,%ecx
f011ca6a:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011ca71:	10 00 00 
f011ca74:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ca7a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ca7f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011ca85:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ca8b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca90:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011ca96:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ca9c:	29 d0                	sub    %edx,%eax
f011ca9e:	89 c3                	mov    %eax,%ebx
f011caa0:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011caa7:	10 00 00 
f011caaa:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011caaf:	0f b6 d0             	movzbl %al,%edx
f011cab2:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011cab8:	01 d0                	add    %edx,%eax
f011caba:	48                   	dec    %eax
f011cabb:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011cac1:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011cac7:	ba 00 00 00 00       	mov    $0x0,%edx
f011cacc:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011cad2:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011cad8:	29 d0                	sub    %edx,%eax
f011cada:	01 c3                	add    %eax,%ebx
f011cadc:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011cae3:	10 00 00 
f011cae6:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011caeb:	0f b6 c0             	movzbl %al,%eax
f011caee:	c1 e0 04             	shl    $0x4,%eax
f011caf1:	89 c2                	mov    %eax,%edx
f011caf3:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011caf9:	01 d0                	add    %edx,%eax
f011cafb:	48                   	dec    %eax
f011cafc:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011cb02:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011cb08:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb0d:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011cb13:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011cb19:	29 d0                	sub    %edx,%eax
f011cb1b:	01 d8                	add    %ebx,%eax
f011cb1d:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011cb22:	39 c1                	cmp    %eax,%ecx
f011cb24:	74 17                	je     f011cb3d <test_kmalloc_bestfit2+0x103e>
f011cb26:	83 ec 04             	sub    $0x4,%esp
f011cb29:	68 74 b8 13 f0       	push   $0xf013b874
f011cb2e:	68 bc 02 00 00       	push   $0x2bc
f011cb33:	68 5a b4 13 f0       	push   $0xf013b45a
f011cb38:	e8 c8 36 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cb3d:	e8 a1 72 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011cb42:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011cb45:	74 17                	je     f011cb5e <test_kmalloc_bestfit2+0x105f>
f011cb47:	83 ec 04             	sub    $0x4,%esp
f011cb4a:	68 74 b4 13 f0       	push   $0xf013b474
f011cb4f:	68 bd 02 00 00       	push   $0x2bd
f011cb54:	68 5a b4 13 f0       	push   $0xf013b45a
f011cb59:	e8 a7 36 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011cb5e:	e8 f6 04 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011cb63:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011cb66:	29 c2                	sub    %eax,%edx
f011cb68:	89 d0                	mov    %edx,%eax
f011cb6a:	3d 00 03 00 00       	cmp    $0x300,%eax
f011cb6f:	74 17                	je     f011cb88 <test_kmalloc_bestfit2+0x1089>
f011cb71:	83 ec 04             	sub    $0x4,%esp
f011cb74:	68 54 b9 13 f0       	push   $0xf013b954
f011cb79:	68 be 02 00 00       	push   $0x2be
f011cb7e:	68 5a b4 13 f0       	push   $0xf013b45a
f011cb83:	e8 7d 36 fe ff       	call   f0100205 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011cb88:	e8 cc 04 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011cb8d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011cb90:	e8 4e 72 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011cb95:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011cb98:	83 ec 0c             	sub    $0xc,%esp
f011cb9b:	68 00 fc 3f 00       	push   $0x3ffc00
f011cba0:	e8 8b ae fe ff       	call   f0107a30 <kmalloc>
f011cba5:	83 c4 10             	add    $0x10,%esp
f011cba8:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011cbae:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011cbb4:	89 c1                	mov    %eax,%ecx
f011cbb6:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011cbbd:	10 00 00 
f011cbc0:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011cbc6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cbcb:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011cbd1:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011cbd7:	ba 00 00 00 00       	mov    $0x0,%edx
f011cbdc:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011cbe2:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011cbe8:	29 d0                	sub    %edx,%eax
f011cbea:	89 c3                	mov    %eax,%ebx
f011cbec:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011cbf3:	10 00 00 
f011cbf6:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011cbfb:	0f b6 d0             	movzbl %al,%edx
f011cbfe:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011cc04:	01 d0                	add    %edx,%eax
f011cc06:	48                   	dec    %eax
f011cc07:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011cc0d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011cc13:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc18:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011cc1e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011cc24:	29 d0                	sub    %edx,%eax
f011cc26:	01 c3                	add    %eax,%ebx
f011cc28:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011cc2f:	10 00 00 
f011cc32:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011cc37:	0f b6 c0             	movzbl %al,%eax
f011cc3a:	c1 e0 04             	shl    $0x4,%eax
f011cc3d:	89 c2                	mov    %eax,%edx
f011cc3f:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011cc45:	01 d0                	add    %edx,%eax
f011cc47:	48                   	dec    %eax
f011cc48:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011cc4e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011cc54:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc59:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011cc5f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011cc65:	29 d0                	sub    %edx,%eax
f011cc67:	01 d8                	add    %ebx,%eax
f011cc69:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011cc6e:	39 c1                	cmp    %eax,%ecx
f011cc70:	74 17                	je     f011cc89 <test_kmalloc_bestfit2+0x118a>
f011cc72:	83 ec 04             	sub    $0x4,%esp
f011cc75:	68 74 b8 13 f0       	push   $0xf013b874
f011cc7a:	68 c4 02 00 00       	push   $0x2c4
f011cc7f:	68 5a b4 13 f0       	push   $0xf013b45a
f011cc84:	e8 7c 35 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cc89:	e8 55 71 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011cc8e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011cc91:	74 17                	je     f011ccaa <test_kmalloc_bestfit2+0x11ab>
f011cc93:	83 ec 04             	sub    $0x4,%esp
f011cc96:	68 74 b4 13 f0       	push   $0xf013b474
f011cc9b:	68 c5 02 00 00       	push   $0x2c5
f011cca0:	68 5a b4 13 f0       	push   $0xf013b45a
f011cca5:	e8 5b 35 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011ccaa:	e8 aa 03 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011ccaf:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ccb2:	29 c2                	sub    %eax,%edx
f011ccb4:	89 d0                	mov    %edx,%eax
f011ccb6:	3d 00 04 00 00       	cmp    $0x400,%eax
f011ccbb:	74 17                	je     f011ccd4 <test_kmalloc_bestfit2+0x11d5>
f011ccbd:	83 ec 04             	sub    $0x4,%esp
f011ccc0:	68 54 b9 13 f0       	push   $0xf013b954
f011ccc5:	68 c6 02 00 00       	push   $0x2c6
f011ccca:	68 5a b4 13 f0       	push   $0xf013b45a
f011cccf:	e8 31 35 fe ff       	call   f0100205 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011ccd4:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011ccdb:	10 00 00 
f011ccde:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011cce4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cce9:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011ccef:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011ccf5:	ba 00 00 00 00       	mov    $0x0,%edx
f011ccfa:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011cd00:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011cd06:	29 d0                	sub    %edx,%eax
f011cd08:	89 c1                	mov    %eax,%ecx
f011cd0a:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011cd11:	10 00 00 
f011cd14:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011cd19:	0f b6 d0             	movzbl %al,%edx
f011cd1c:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011cd22:	01 d0                	add    %edx,%eax
f011cd24:	48                   	dec    %eax
f011cd25:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011cd2b:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011cd31:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd36:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011cd3c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011cd42:	29 d0                	sub    %edx,%eax
f011cd44:	01 c1                	add    %eax,%ecx
f011cd46:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011cd4d:	10 00 00 
f011cd50:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011cd55:	0f b6 c0             	movzbl %al,%eax
f011cd58:	c1 e0 04             	shl    $0x4,%eax
f011cd5b:	89 c2                	mov    %eax,%edx
f011cd5d:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011cd63:	01 d0                	add    %edx,%eax
f011cd65:	48                   	dec    %eax
f011cd66:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011cd6c:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011cd72:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd77:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011cd7d:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011cd83:	29 d0                	sub    %edx,%eax
f011cd85:	01 c8                	add    %ecx,%eax
f011cd87:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011cd8c:	29 c2                	sub    %eax,%edx
f011cd8e:	89 d0                	mov    %edx,%eax
f011cd90:	83 ec 0c             	sub    $0xc,%esp
f011cd93:	50                   	push   %eax
f011cd94:	e8 97 ac fe ff       	call   f0107a30 <kmalloc>
f011cd99:	83 c4 10             	add    $0x10,%esp
f011cd9c:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011cda2:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011cda8:	85 c0                	test   %eax,%eax
f011cdaa:	74 17                	je     f011cdc3 <test_kmalloc_bestfit2+0x12c4>
f011cdac:	83 ec 04             	sub    $0x4,%esp
f011cdaf:	68 a4 b9 13 f0       	push   $0xf013b9a4
f011cdb4:	68 ce 02 00 00       	push   $0x2ce
f011cdb9:	68 5a b4 13 f0       	push   $0xf013b45a
f011cdbe:	e8 42 34 fe ff       	call   f0100205 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011cdc3:	83 ec 0c             	sub    $0xc,%esp
f011cdc6:	68 08 ba 13 f0       	push   $0xf013ba08
f011cdcb:	e8 3e 3f fe ff       	call   f0100d0e <cprintf>
f011cdd0:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011cdd3:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011cdd8:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011cddb:	5b                   	pop    %ebx
f011cddc:	5f                   	pop    %edi
f011cddd:	5d                   	pop    %ebp
f011cdde:	c3                   	ret    

f011cddf <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011cddf:	55                   	push   %ebp
f011cde0:	89 e5                	mov    %esp,%ebp
f011cde2:	57                   	push   %edi
f011cde3:	53                   	push   %ebx
f011cde4:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011cdea:	83 ec 0c             	sub    $0xc,%esp
f011cded:	68 9c b3 13 f0       	push   $0xf013b39c
f011cdf2:	e8 17 3f fe ff       	call   f0100d0e <cprintf>
f011cdf7:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011cdfa:	83 ec 0c             	sub    $0xc,%esp
f011cdfd:	68 cc b3 13 f0       	push   $0xf013b3cc
f011ce02:	e8 07 3f fe ff       	call   f0100d0e <cprintf>
f011ce07:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011ce0a:	83 ec 0c             	sub    $0xc,%esp
f011ce0d:	68 9c b3 13 f0       	push   $0xf013b39c
f011ce12:	e8 f7 3e fe ff       	call   f0100d0e <cprintf>
f011ce17:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011ce1a:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011ce20:	b9 14 00 00 00       	mov    $0x14,%ecx
f011ce25:	b8 00 00 00 00       	mov    $0x0,%eax
f011ce2a:	89 d7                	mov    %edx,%edi
f011ce2c:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ce2e:	e8 26 02 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011ce33:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce36:	e8 a8 6f fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011ce3b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011ce3e:	83 ec 0c             	sub    $0xc,%esp
f011ce41:	68 00 fc 0f 00       	push   $0xffc00
f011ce46:	e8 e5 ab fe ff       	call   f0107a30 <kmalloc>
f011ce4b:	83 c4 10             	add    $0x10,%esp
f011ce4e:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011ce54:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011ce5a:	89 c1                	mov    %eax,%ecx
f011ce5c:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011ce63:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011ce66:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ce6b:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011ce6e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ce71:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce76:	f7 75 ec             	divl   -0x14(%ebp)
f011ce79:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ce7c:	29 d0                	sub    %edx,%eax
f011ce7e:	89 c3                	mov    %eax,%ebx
f011ce80:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011ce87:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011ce8c:	0f b6 d0             	movzbl %al,%edx
f011ce8f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011ce92:	01 d0                	add    %edx,%eax
f011ce94:	48                   	dec    %eax
f011ce95:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011ce98:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ce9b:	ba 00 00 00 00       	mov    $0x0,%edx
f011cea0:	f7 75 e4             	divl   -0x1c(%ebp)
f011cea3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011cea6:	29 d0                	sub    %edx,%eax
f011cea8:	01 c3                	add    %eax,%ebx
f011ceaa:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011ceb1:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011ceb6:	0f b6 c0             	movzbl %al,%eax
f011ceb9:	c1 e0 04             	shl    $0x4,%eax
f011cebc:	89 c2                	mov    %eax,%edx
f011cebe:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011cec1:	01 d0                	add    %edx,%eax
f011cec3:	48                   	dec    %eax
f011cec4:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011cec7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ceca:	ba 00 00 00 00       	mov    $0x0,%edx
f011cecf:	f7 75 dc             	divl   -0x24(%ebp)
f011ced2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ced5:	29 d0                	sub    %edx,%eax
f011ced7:	01 d8                	add    %ebx,%eax
f011ced9:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011cede:	39 c1                	cmp    %eax,%ecx
f011cee0:	74 17                	je     f011cef9 <test_kmalloc_firstfit1+0x11a>
f011cee2:	83 ec 04             	sub    $0x4,%esp
f011cee5:	68 74 b8 13 f0       	push   $0xf013b874
f011ceea:	68 e6 02 00 00       	push   $0x2e6
f011ceef:	68 5a b4 13 f0       	push   $0xf013b45a
f011cef4:	e8 0c 33 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cef9:	e8 e5 6e fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011cefe:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cf01:	74 17                	je     f011cf1a <test_kmalloc_firstfit1+0x13b>
f011cf03:	83 ec 04             	sub    $0x4,%esp
f011cf06:	68 74 b4 13 f0       	push   $0xf013b474
f011cf0b:	68 e7 02 00 00       	push   $0x2e7
f011cf10:	68 5a b4 13 f0       	push   $0xf013b45a
f011cf15:	e8 eb 32 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cf1a:	e8 3a 01 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011cf1f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cf22:	29 c2                	sub    %eax,%edx
f011cf24:	89 d0                	mov    %edx,%eax
f011cf26:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cf2b:	74 17                	je     f011cf44 <test_kmalloc_firstfit1+0x165>
f011cf2d:	83 ec 04             	sub    $0x4,%esp
f011cf30:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011cf35:	68 e8 02 00 00       	push   $0x2e8
f011cf3a:	68 5a b4 13 f0       	push   $0xf013b45a
f011cf3f:	e8 c1 32 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011cf44:	e8 10 01 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011cf49:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf4c:	e8 92 6e fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011cf51:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011cf54:	83 ec 0c             	sub    $0xc,%esp
f011cf57:	68 00 fc 0f 00       	push   $0xffc00
f011cf5c:	e8 cf aa fe ff       	call   f0107a30 <kmalloc>
f011cf61:	83 c4 10             	add    $0x10,%esp
f011cf64:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011cf6a:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011cf70:	89 c1                	mov    %eax,%ecx
f011cf72:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011cf79:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011cf7c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cf81:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011cf84:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011cf87:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf8c:	f7 75 d4             	divl   -0x2c(%ebp)
f011cf8f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011cf92:	29 d0                	sub    %edx,%eax
f011cf94:	89 c3                	mov    %eax,%ebx
f011cf96:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011cf9d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011cfa2:	0f b6 d0             	movzbl %al,%edx
f011cfa5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011cfa8:	01 d0                	add    %edx,%eax
f011cfaa:	48                   	dec    %eax
f011cfab:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011cfae:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cfb1:	ba 00 00 00 00       	mov    $0x0,%edx
f011cfb6:	f7 75 cc             	divl   -0x34(%ebp)
f011cfb9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cfbc:	29 d0                	sub    %edx,%eax
f011cfbe:	01 c3                	add    %eax,%ebx
f011cfc0:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011cfc7:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011cfcc:	0f b6 c0             	movzbl %al,%eax
f011cfcf:	c1 e0 04             	shl    $0x4,%eax
f011cfd2:	89 c2                	mov    %eax,%edx
f011cfd4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011cfd7:	01 d0                	add    %edx,%eax
f011cfd9:	48                   	dec    %eax
f011cfda:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011cfdd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cfe0:	ba 00 00 00 00       	mov    $0x0,%edx
f011cfe5:	f7 75 c4             	divl   -0x3c(%ebp)
f011cfe8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cfeb:	29 d0                	sub    %edx,%eax
f011cfed:	01 d8                	add    %ebx,%eax
f011cfef:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011cff4:	39 c1                	cmp    %eax,%ecx
f011cff6:	74 17                	je     f011d00f <test_kmalloc_firstfit1+0x230>
f011cff8:	83 ec 04             	sub    $0x4,%esp
f011cffb:	68 74 b8 13 f0       	push   $0xf013b874
f011d000:	68 ee 02 00 00       	push   $0x2ee
f011d005:	68 5a b4 13 f0       	push   $0xf013b45a
f011d00a:	e8 f6 31 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d00f:	e8 cf 6d fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011d014:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d017:	74 17                	je     f011d030 <test_kmalloc_firstfit1+0x251>
f011d019:	83 ec 04             	sub    $0x4,%esp
f011d01c:	68 74 b4 13 f0       	push   $0xf013b474
f011d021:	68 ef 02 00 00       	push   $0x2ef
f011d026:	68 5a b4 13 f0       	push   $0xf013b45a
f011d02b:	e8 d5 31 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d030:	e8 24 00 ff ff       	call   f010d059 <sys_calculate_free_frames>
f011d035:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d038:	29 c2                	sub    %eax,%edx
f011d03a:	89 d0                	mov    %edx,%eax
f011d03c:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d041:	74 17                	je     f011d05a <test_kmalloc_firstfit1+0x27b>
f011d043:	83 ec 04             	sub    $0x4,%esp
f011d046:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011d04b:	68 f0 02 00 00       	push   $0x2f0
f011d050:	68 5a b4 13 f0       	push   $0xf013b45a
f011d055:	e8 ab 31 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011d05a:	e8 fa ff fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d05f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d062:	e8 7c 6d fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011d067:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011d06a:	83 ec 0c             	sub    $0xc,%esp
f011d06d:	68 00 fc 0f 00       	push   $0xffc00
f011d072:	e8 b9 a9 fe ff       	call   f0107a30 <kmalloc>
f011d077:	83 c4 10             	add    $0x10,%esp
f011d07a:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011d080:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011d086:	89 c1                	mov    %eax,%ecx
f011d088:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011d08f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011d092:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d097:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011d09a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d09d:	ba 00 00 00 00       	mov    $0x0,%edx
f011d0a2:	f7 75 bc             	divl   -0x44(%ebp)
f011d0a5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d0a8:	29 d0                	sub    %edx,%eax
f011d0aa:	89 c3                	mov    %eax,%ebx
f011d0ac:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011d0b3:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011d0b8:	0f b6 d0             	movzbl %al,%edx
f011d0bb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011d0be:	01 d0                	add    %edx,%eax
f011d0c0:	48                   	dec    %eax
f011d0c1:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011d0c4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d0c7:	ba 00 00 00 00       	mov    $0x0,%edx
f011d0cc:	f7 75 b4             	divl   -0x4c(%ebp)
f011d0cf:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d0d2:	29 d0                	sub    %edx,%eax
f011d0d4:	01 c3                	add    %eax,%ebx
f011d0d6:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011d0dd:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011d0e2:	0f b6 c0             	movzbl %al,%eax
f011d0e5:	c1 e0 04             	shl    $0x4,%eax
f011d0e8:	89 c2                	mov    %eax,%edx
f011d0ea:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011d0ed:	01 d0                	add    %edx,%eax
f011d0ef:	48                   	dec    %eax
f011d0f0:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011d0f3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d0f6:	ba 00 00 00 00       	mov    $0x0,%edx
f011d0fb:	f7 75 ac             	divl   -0x54(%ebp)
f011d0fe:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d101:	29 d0                	sub    %edx,%eax
f011d103:	01 d8                	add    %ebx,%eax
f011d105:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011d10a:	39 c1                	cmp    %eax,%ecx
f011d10c:	74 17                	je     f011d125 <test_kmalloc_firstfit1+0x346>
f011d10e:	83 ec 04             	sub    $0x4,%esp
f011d111:	68 74 b8 13 f0       	push   $0xf013b874
f011d116:	68 f6 02 00 00       	push   $0x2f6
f011d11b:	68 5a b4 13 f0       	push   $0xf013b45a
f011d120:	e8 e0 30 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d125:	e8 b9 6c fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011d12a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d12d:	74 17                	je     f011d146 <test_kmalloc_firstfit1+0x367>
f011d12f:	83 ec 04             	sub    $0x4,%esp
f011d132:	68 74 b4 13 f0       	push   $0xf013b474
f011d137:	68 f7 02 00 00       	push   $0x2f7
f011d13c:	68 5a b4 13 f0       	push   $0xf013b45a
f011d141:	e8 bf 30 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d146:	e8 0e ff fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d14b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d14e:	29 c2                	sub    %eax,%edx
f011d150:	89 d0                	mov    %edx,%eax
f011d152:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d157:	74 17                	je     f011d170 <test_kmalloc_firstfit1+0x391>
f011d159:	83 ec 04             	sub    $0x4,%esp
f011d15c:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011d161:	68 f8 02 00 00       	push   $0x2f8
f011d166:	68 5a b4 13 f0       	push   $0xf013b45a
f011d16b:	e8 95 30 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011d170:	e8 e4 fe fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d175:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d178:	e8 66 6c fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011d17d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011d180:	83 ec 0c             	sub    $0xc,%esp
f011d183:	68 00 fc 0f 00       	push   $0xffc00
f011d188:	e8 a3 a8 fe ff       	call   f0107a30 <kmalloc>
f011d18d:	83 c4 10             	add    $0x10,%esp
f011d190:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011d196:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011d19c:	89 c1                	mov    %eax,%ecx
f011d19e:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011d1a5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011d1a8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d1ad:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011d1b0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d1b3:	ba 00 00 00 00       	mov    $0x0,%edx
f011d1b8:	f7 75 a4             	divl   -0x5c(%ebp)
f011d1bb:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d1be:	29 d0                	sub    %edx,%eax
f011d1c0:	89 c3                	mov    %eax,%ebx
f011d1c2:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011d1c9:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011d1ce:	0f b6 d0             	movzbl %al,%edx
f011d1d1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011d1d4:	01 d0                	add    %edx,%eax
f011d1d6:	48                   	dec    %eax
f011d1d7:	89 45 98             	mov    %eax,-0x68(%ebp)
f011d1da:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d1dd:	ba 00 00 00 00       	mov    $0x0,%edx
f011d1e2:	f7 75 9c             	divl   -0x64(%ebp)
f011d1e5:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d1e8:	29 d0                	sub    %edx,%eax
f011d1ea:	01 c3                	add    %eax,%ebx
f011d1ec:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011d1f3:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011d1f8:	0f b6 c0             	movzbl %al,%eax
f011d1fb:	c1 e0 04             	shl    $0x4,%eax
f011d1fe:	89 c2                	mov    %eax,%edx
f011d200:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011d203:	01 d0                	add    %edx,%eax
f011d205:	48                   	dec    %eax
f011d206:	89 45 90             	mov    %eax,-0x70(%ebp)
f011d209:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d20c:	ba 00 00 00 00       	mov    $0x0,%edx
f011d211:	f7 75 94             	divl   -0x6c(%ebp)
f011d214:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d217:	29 d0                	sub    %edx,%eax
f011d219:	01 d8                	add    %ebx,%eax
f011d21b:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011d220:	39 c1                	cmp    %eax,%ecx
f011d222:	74 17                	je     f011d23b <test_kmalloc_firstfit1+0x45c>
f011d224:	83 ec 04             	sub    $0x4,%esp
f011d227:	68 74 b8 13 f0       	push   $0xf013b874
f011d22c:	68 fe 02 00 00       	push   $0x2fe
f011d231:	68 5a b4 13 f0       	push   $0xf013b45a
f011d236:	e8 ca 2f fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d23b:	e8 a3 6b fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011d240:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d243:	74 17                	je     f011d25c <test_kmalloc_firstfit1+0x47d>
f011d245:	83 ec 04             	sub    $0x4,%esp
f011d248:	68 74 b4 13 f0       	push   $0xf013b474
f011d24d:	68 ff 02 00 00       	push   $0x2ff
f011d252:	68 5a b4 13 f0       	push   $0xf013b45a
f011d257:	e8 a9 2f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d25c:	e8 f8 fd fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d261:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d264:	29 c2                	sub    %eax,%edx
f011d266:	89 d0                	mov    %edx,%eax
f011d268:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d26d:	74 17                	je     f011d286 <test_kmalloc_firstfit1+0x4a7>
f011d26f:	83 ec 04             	sub    $0x4,%esp
f011d272:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011d277:	68 00 03 00 00       	push   $0x300
f011d27c:	68 5a b4 13 f0       	push   $0xf013b45a
f011d281:	e8 7f 2f fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d286:	e8 ce fd fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d28b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d28e:	e8 50 6b fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011d293:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011d296:	83 ec 0c             	sub    $0xc,%esp
f011d299:	68 00 fc 1f 00       	push   $0x1ffc00
f011d29e:	e8 8d a7 fe ff       	call   f0107a30 <kmalloc>
f011d2a3:	83 c4 10             	add    $0x10,%esp
f011d2a6:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d2ac:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011d2b2:	89 c1                	mov    %eax,%ecx
f011d2b4:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011d2bb:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011d2be:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d2c3:	89 45 88             	mov    %eax,-0x78(%ebp)
f011d2c6:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d2c9:	ba 00 00 00 00       	mov    $0x0,%edx
f011d2ce:	f7 75 8c             	divl   -0x74(%ebp)
f011d2d1:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d2d4:	29 d0                	sub    %edx,%eax
f011d2d6:	89 c3                	mov    %eax,%ebx
f011d2d8:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011d2df:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011d2e4:	0f b6 d0             	movzbl %al,%edx
f011d2e7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011d2ea:	01 d0                	add    %edx,%eax
f011d2ec:	48                   	dec    %eax
f011d2ed:	89 45 80             	mov    %eax,-0x80(%ebp)
f011d2f0:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d2f3:	ba 00 00 00 00       	mov    $0x0,%edx
f011d2f8:	f7 75 84             	divl   -0x7c(%ebp)
f011d2fb:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d2fe:	29 d0                	sub    %edx,%eax
f011d300:	01 c3                	add    %eax,%ebx
f011d302:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011d309:	10 00 00 
f011d30c:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011d311:	0f b6 c0             	movzbl %al,%eax
f011d314:	c1 e0 04             	shl    $0x4,%eax
f011d317:	89 c2                	mov    %eax,%edx
f011d319:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011d31f:	01 d0                	add    %edx,%eax
f011d321:	48                   	dec    %eax
f011d322:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011d328:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d32e:	ba 00 00 00 00       	mov    $0x0,%edx
f011d333:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011d339:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d33f:	29 d0                	sub    %edx,%eax
f011d341:	01 d8                	add    %ebx,%eax
f011d343:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d348:	39 c1                	cmp    %eax,%ecx
f011d34a:	74 17                	je     f011d363 <test_kmalloc_firstfit1+0x584>
f011d34c:	83 ec 04             	sub    $0x4,%esp
f011d34f:	68 74 b8 13 f0       	push   $0xf013b874
f011d354:	68 06 03 00 00       	push   $0x306
f011d359:	68 5a b4 13 f0       	push   $0xf013b45a
f011d35e:	e8 a2 2e fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d363:	e8 7b 6a fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011d368:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d36b:	74 17                	je     f011d384 <test_kmalloc_firstfit1+0x5a5>
f011d36d:	83 ec 04             	sub    $0x4,%esp
f011d370:	68 74 b4 13 f0       	push   $0xf013b474
f011d375:	68 07 03 00 00       	push   $0x307
f011d37a:	68 5a b4 13 f0       	push   $0xf013b45a
f011d37f:	e8 81 2e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d384:	e8 d0 fc fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d389:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d38c:	29 c2                	sub    %eax,%edx
f011d38e:	89 d0                	mov    %edx,%eax
f011d390:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d395:	74 17                	je     f011d3ae <test_kmalloc_firstfit1+0x5cf>
f011d397:	83 ec 04             	sub    $0x4,%esp
f011d39a:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011d39f:	68 08 03 00 00       	push   $0x308
f011d3a4:	68 5a b4 13 f0       	push   $0xf013b45a
f011d3a9:	e8 57 2e fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d3ae:	e8 a6 fc fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d3b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d3b6:	e8 28 6a fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011d3bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011d3be:	83 ec 0c             	sub    $0xc,%esp
f011d3c1:	68 00 fc 1f 00       	push   $0x1ffc00
f011d3c6:	e8 65 a6 fe ff       	call   f0107a30 <kmalloc>
f011d3cb:	83 c4 10             	add    $0x10,%esp
f011d3ce:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011d3d4:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011d3da:	89 c1                	mov    %eax,%ecx
f011d3dc:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011d3e3:	10 00 00 
f011d3e6:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011d3ec:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d3f1:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011d3f7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d3fd:	ba 00 00 00 00       	mov    $0x0,%edx
f011d402:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011d408:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d40e:	29 d0                	sub    %edx,%eax
f011d410:	89 c3                	mov    %eax,%ebx
f011d412:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011d419:	10 00 00 
f011d41c:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011d421:	0f b6 d0             	movzbl %al,%edx
f011d424:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011d42a:	01 d0                	add    %edx,%eax
f011d42c:	48                   	dec    %eax
f011d42d:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011d433:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d439:	ba 00 00 00 00       	mov    $0x0,%edx
f011d43e:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011d444:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d44a:	29 d0                	sub    %edx,%eax
f011d44c:	01 c3                	add    %eax,%ebx
f011d44e:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011d455:	10 00 00 
f011d458:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011d45d:	0f b6 c0             	movzbl %al,%eax
f011d460:	c1 e0 04             	shl    $0x4,%eax
f011d463:	89 c2                	mov    %eax,%edx
f011d465:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011d46b:	01 d0                	add    %edx,%eax
f011d46d:	48                   	dec    %eax
f011d46e:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011d474:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d47a:	ba 00 00 00 00       	mov    $0x0,%edx
f011d47f:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011d485:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d48b:	29 d0                	sub    %edx,%eax
f011d48d:	01 d8                	add    %ebx,%eax
f011d48f:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011d494:	39 c1                	cmp    %eax,%ecx
f011d496:	74 17                	je     f011d4af <test_kmalloc_firstfit1+0x6d0>
f011d498:	83 ec 04             	sub    $0x4,%esp
f011d49b:	68 74 b8 13 f0       	push   $0xf013b874
f011d4a0:	68 0e 03 00 00       	push   $0x30e
f011d4a5:	68 5a b4 13 f0       	push   $0xf013b45a
f011d4aa:	e8 56 2d fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d4af:	e8 2f 69 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011d4b4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d4b7:	74 17                	je     f011d4d0 <test_kmalloc_firstfit1+0x6f1>
f011d4b9:	83 ec 04             	sub    $0x4,%esp
f011d4bc:	68 74 b4 13 f0       	push   $0xf013b474
f011d4c1:	68 0f 03 00 00       	push   $0x30f
f011d4c6:	68 5a b4 13 f0       	push   $0xf013b45a
f011d4cb:	e8 35 2d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d4d0:	e8 84 fb fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d4d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d4d8:	29 c2                	sub    %eax,%edx
f011d4da:	89 d0                	mov    %edx,%eax
f011d4dc:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d4e1:	74 17                	je     f011d4fa <test_kmalloc_firstfit1+0x71b>
f011d4e3:	83 ec 04             	sub    $0x4,%esp
f011d4e6:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011d4eb:	68 10 03 00 00       	push   $0x310
f011d4f0:	68 5a b4 13 f0       	push   $0xf013b45a
f011d4f5:	e8 0b 2d fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d4fa:	e8 5a fb fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d4ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d502:	e8 dc 68 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011d507:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011d50a:	83 ec 0c             	sub    $0xc,%esp
f011d50d:	68 00 fc 2f 00       	push   $0x2ffc00
f011d512:	e8 19 a5 fe ff       	call   f0107a30 <kmalloc>
f011d517:	83 c4 10             	add    $0x10,%esp
f011d51a:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011d520:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011d526:	89 c1                	mov    %eax,%ecx
f011d528:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011d52f:	10 00 00 
f011d532:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011d538:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d53d:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011d543:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d549:	ba 00 00 00 00       	mov    $0x0,%edx
f011d54e:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011d554:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d55a:	29 d0                	sub    %edx,%eax
f011d55c:	89 c3                	mov    %eax,%ebx
f011d55e:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011d565:	10 00 00 
f011d568:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011d56d:	0f b6 d0             	movzbl %al,%edx
f011d570:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011d576:	01 d0                	add    %edx,%eax
f011d578:	48                   	dec    %eax
f011d579:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011d57f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d585:	ba 00 00 00 00       	mov    $0x0,%edx
f011d58a:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011d590:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d596:	29 d0                	sub    %edx,%eax
f011d598:	01 c3                	add    %eax,%ebx
f011d59a:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011d5a1:	10 00 00 
f011d5a4:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011d5a9:	0f b6 c0             	movzbl %al,%eax
f011d5ac:	c1 e0 04             	shl    $0x4,%eax
f011d5af:	89 c2                	mov    %eax,%edx
f011d5b1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011d5b7:	01 d0                	add    %edx,%eax
f011d5b9:	48                   	dec    %eax
f011d5ba:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011d5c0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d5c6:	ba 00 00 00 00       	mov    $0x0,%edx
f011d5cb:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011d5d1:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d5d7:	29 d0                	sub    %edx,%eax
f011d5d9:	01 d8                	add    %ebx,%eax
f011d5db:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011d5e0:	39 c1                	cmp    %eax,%ecx
f011d5e2:	74 17                	je     f011d5fb <test_kmalloc_firstfit1+0x81c>
f011d5e4:	83 ec 04             	sub    $0x4,%esp
f011d5e7:	68 74 b8 13 f0       	push   $0xf013b874
f011d5ec:	68 16 03 00 00       	push   $0x316
f011d5f1:	68 5a b4 13 f0       	push   $0xf013b45a
f011d5f6:	e8 0a 2c fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d5fb:	e8 e3 67 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011d600:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d603:	74 17                	je     f011d61c <test_kmalloc_firstfit1+0x83d>
f011d605:	83 ec 04             	sub    $0x4,%esp
f011d608:	68 74 b4 13 f0       	push   $0xf013b474
f011d60d:	68 17 03 00 00       	push   $0x317
f011d612:	68 5a b4 13 f0       	push   $0xf013b45a
f011d617:	e8 e9 2b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011d61c:	e8 38 fa fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d621:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d624:	29 c2                	sub    %eax,%edx
f011d626:	89 d0                	mov    %edx,%eax
f011d628:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d62d:	74 17                	je     f011d646 <test_kmalloc_firstfit1+0x867>
f011d62f:	83 ec 04             	sub    $0x4,%esp
f011d632:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011d637:	68 18 03 00 00       	push   $0x318
f011d63c:	68 5a b4 13 f0       	push   $0xf013b45a
f011d641:	e8 bf 2b fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d646:	e8 0e fa fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d64b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d64e:	e8 90 67 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011d653:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011d656:	83 ec 0c             	sub    $0xc,%esp
f011d659:	68 00 fc 2f 00       	push   $0x2ffc00
f011d65e:	e8 cd a3 fe ff       	call   f0107a30 <kmalloc>
f011d663:	83 c4 10             	add    $0x10,%esp
f011d666:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011d66c:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011d672:	89 c1                	mov    %eax,%ecx
f011d674:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011d67b:	10 00 00 
f011d67e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011d684:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d689:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011d68f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d695:	ba 00 00 00 00       	mov    $0x0,%edx
f011d69a:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011d6a0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d6a6:	29 d0                	sub    %edx,%eax
f011d6a8:	89 c3                	mov    %eax,%ebx
f011d6aa:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011d6b1:	10 00 00 
f011d6b4:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011d6b9:	0f b6 d0             	movzbl %al,%edx
f011d6bc:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011d6c2:	01 d0                	add    %edx,%eax
f011d6c4:	48                   	dec    %eax
f011d6c5:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011d6cb:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d6d1:	ba 00 00 00 00       	mov    $0x0,%edx
f011d6d6:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011d6dc:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d6e2:	29 d0                	sub    %edx,%eax
f011d6e4:	01 c3                	add    %eax,%ebx
f011d6e6:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011d6ed:	10 00 00 
f011d6f0:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011d6f5:	0f b6 c0             	movzbl %al,%eax
f011d6f8:	c1 e0 04             	shl    $0x4,%eax
f011d6fb:	89 c2                	mov    %eax,%edx
f011d6fd:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011d703:	01 d0                	add    %edx,%eax
f011d705:	48                   	dec    %eax
f011d706:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011d70c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d712:	ba 00 00 00 00       	mov    $0x0,%edx
f011d717:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011d71d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d723:	29 d0                	sub    %edx,%eax
f011d725:	01 d8                	add    %ebx,%eax
f011d727:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011d72c:	39 c1                	cmp    %eax,%ecx
f011d72e:	74 17                	je     f011d747 <test_kmalloc_firstfit1+0x968>
f011d730:	83 ec 04             	sub    $0x4,%esp
f011d733:	68 74 b8 13 f0       	push   $0xf013b874
f011d738:	68 1e 03 00 00       	push   $0x31e
f011d73d:	68 5a b4 13 f0       	push   $0xf013b45a
f011d742:	e8 be 2a fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d747:	e8 97 66 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011d74c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d74f:	74 17                	je     f011d768 <test_kmalloc_firstfit1+0x989>
f011d751:	83 ec 04             	sub    $0x4,%esp
f011d754:	68 74 b4 13 f0       	push   $0xf013b474
f011d759:	68 1f 03 00 00       	push   $0x31f
f011d75e:	68 5a b4 13 f0       	push   $0xf013b45a
f011d763:	e8 9d 2a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011d768:	e8 ec f8 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d76d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d770:	29 c2                	sub    %eax,%edx
f011d772:	89 d0                	mov    %edx,%eax
f011d774:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d779:	74 17                	je     f011d792 <test_kmalloc_firstfit1+0x9b3>
f011d77b:	83 ec 04             	sub    $0x4,%esp
f011d77e:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011d783:	68 20 03 00 00       	push   $0x320
f011d788:	68 5a b4 13 f0       	push   $0xf013b45a
f011d78d:	e8 73 2a fe ff       	call   f0100205 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d792:	e8 c2 f8 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d797:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d79a:	e8 44 66 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011d79f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011d7a2:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011d7a8:	83 ec 0c             	sub    $0xc,%esp
f011d7ab:	50                   	push   %eax
f011d7ac:	e8 68 a3 fe ff       	call   f0107b19 <kfree>
f011d7b1:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d7b4:	e8 2a 66 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011d7b9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d7bc:	74 17                	je     f011d7d5 <test_kmalloc_firstfit1+0x9f6>
f011d7be:	83 ec 04             	sub    $0x4,%esp
f011d7c1:	68 74 b4 13 f0       	push   $0xf013b474
f011d7c6:	68 29 03 00 00       	push   $0x329
f011d7cb:	68 5a b4 13 f0       	push   $0xf013b45a
f011d7d0:	e8 30 2a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d7d5:	e8 7f f8 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d7da:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d7dd:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d7e2:	74 17                	je     f011d7fb <test_kmalloc_firstfit1+0xa1c>
f011d7e4:	83 ec 04             	sub    $0x4,%esp
f011d7e7:	68 b7 b8 13 f0       	push   $0xf013b8b7
f011d7ec:	68 2a 03 00 00       	push   $0x32a
f011d7f1:	68 5a b4 13 f0       	push   $0xf013b45a
f011d7f6:	e8 0a 2a fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d7fb:	e8 59 f8 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d800:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d803:	e8 db 65 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011d808:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011d80b:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011d811:	83 ec 0c             	sub    $0xc,%esp
f011d814:	50                   	push   %eax
f011d815:	e8 ff a2 fe ff       	call   f0107b19 <kfree>
f011d81a:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d81d:	e8 c1 65 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011d822:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d825:	74 17                	je     f011d83e <test_kmalloc_firstfit1+0xa5f>
f011d827:	83 ec 04             	sub    $0x4,%esp
f011d82a:	68 74 b4 13 f0       	push   $0xf013b474
f011d82f:	68 30 03 00 00       	push   $0x330
f011d834:	68 5a b4 13 f0       	push   $0xf013b45a
f011d839:	e8 c7 29 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011d83e:	e8 16 f8 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d843:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d846:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d84b:	74 17                	je     f011d864 <test_kmalloc_firstfit1+0xa85>
f011d84d:	83 ec 04             	sub    $0x4,%esp
f011d850:	68 b7 b8 13 f0       	push   $0xf013b8b7
f011d855:	68 31 03 00 00       	push   $0x331
f011d85a:	68 5a b4 13 f0       	push   $0xf013b45a
f011d85f:	e8 a1 29 fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d864:	e8 f0 f7 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d869:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d86c:	e8 72 65 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011d871:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011d874:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011d87a:	83 ec 0c             	sub    $0xc,%esp
f011d87d:	50                   	push   %eax
f011d87e:	e8 96 a2 fe ff       	call   f0107b19 <kfree>
f011d883:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d886:	e8 58 65 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011d88b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d88e:	74 17                	je     f011d8a7 <test_kmalloc_firstfit1+0xac8>
f011d890:	83 ec 04             	sub    $0x4,%esp
f011d893:	68 74 b4 13 f0       	push   $0xf013b474
f011d898:	68 37 03 00 00       	push   $0x337
f011d89d:	68 5a b4 13 f0       	push   $0xf013b45a
f011d8a2:	e8 5e 29 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011d8a7:	e8 ad f7 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d8ac:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d8af:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d8b4:	74 17                	je     f011d8cd <test_kmalloc_firstfit1+0xaee>
f011d8b6:	83 ec 04             	sub    $0x4,%esp
f011d8b9:	68 b7 b8 13 f0       	push   $0xf013b8b7
f011d8be:	68 38 03 00 00       	push   $0x338
f011d8c3:	68 5a b4 13 f0       	push   $0xf013b45a
f011d8c8:	e8 38 29 fe ff       	call   f0100205 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d8cd:	e8 87 f7 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d8d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d8d5:	e8 09 65 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011d8da:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011d8dd:	83 ec 0c             	sub    $0xc,%esp
f011d8e0:	68 00 fc 07 00       	push   $0x7fc00
f011d8e5:	e8 46 a1 fe ff       	call   f0107a30 <kmalloc>
f011d8ea:	83 c4 10             	add    $0x10,%esp
f011d8ed:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011d8f3:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011d8f9:	89 c1                	mov    %eax,%ecx
f011d8fb:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011d902:	10 00 00 
f011d905:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011d90b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d910:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011d916:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d91c:	ba 00 00 00 00       	mov    $0x0,%edx
f011d921:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011d927:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d92d:	29 d0                	sub    %edx,%eax
f011d92f:	89 c3                	mov    %eax,%ebx
f011d931:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011d938:	10 00 00 
f011d93b:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011d940:	0f b6 d0             	movzbl %al,%edx
f011d943:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011d949:	01 d0                	add    %edx,%eax
f011d94b:	48                   	dec    %eax
f011d94c:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011d952:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d958:	ba 00 00 00 00       	mov    $0x0,%edx
f011d95d:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011d963:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d969:	29 d0                	sub    %edx,%eax
f011d96b:	01 c3                	add    %eax,%ebx
f011d96d:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011d974:	10 00 00 
f011d977:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011d97c:	0f b6 c0             	movzbl %al,%eax
f011d97f:	c1 e0 04             	shl    $0x4,%eax
f011d982:	89 c2                	mov    %eax,%edx
f011d984:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011d98a:	01 d0                	add    %edx,%eax
f011d98c:	48                   	dec    %eax
f011d98d:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011d993:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d999:	ba 00 00 00 00       	mov    $0x0,%edx
f011d99e:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011d9a4:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d9aa:	29 d0                	sub    %edx,%eax
f011d9ac:	01 d8                	add    %ebx,%eax
f011d9ae:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011d9b3:	39 c1                	cmp    %eax,%ecx
f011d9b5:	74 17                	je     f011d9ce <test_kmalloc_firstfit1+0xbef>
f011d9b7:	83 ec 04             	sub    $0x4,%esp
f011d9ba:	68 74 b8 13 f0       	push   $0xf013b874
f011d9bf:	68 41 03 00 00       	push   $0x341
f011d9c4:	68 5a b4 13 f0       	push   $0xf013b45a
f011d9c9:	e8 37 28 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d9ce:	e8 10 64 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011d9d3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d9d6:	74 17                	je     f011d9ef <test_kmalloc_firstfit1+0xc10>
f011d9d8:	83 ec 04             	sub    $0x4,%esp
f011d9db:	68 74 b4 13 f0       	push   $0xf013b474
f011d9e0:	68 42 03 00 00       	push   $0x342
f011d9e5:	68 5a b4 13 f0       	push   $0xf013b45a
f011d9ea:	e8 16 28 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011d9ef:	e8 65 f6 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011d9f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d9f7:	29 c2                	sub    %eax,%edx
f011d9f9:	89 d0                	mov    %edx,%eax
f011d9fb:	3d 80 00 00 00       	cmp    $0x80,%eax
f011da00:	74 17                	je     f011da19 <test_kmalloc_firstfit1+0xc3a>
f011da02:	83 ec 04             	sub    $0x4,%esp
f011da05:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011da0a:	68 43 03 00 00       	push   $0x343
f011da0f:	68 5a b4 13 f0       	push   $0xf013b45a
f011da14:	e8 ec 27 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011da19:	e8 3b f6 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011da1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011da21:	e8 bd 63 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011da26:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011da29:	83 ec 0c             	sub    $0xc,%esp
f011da2c:	68 00 fc 0f 00       	push   $0xffc00
f011da31:	e8 fa 9f fe ff       	call   f0107a30 <kmalloc>
f011da36:	83 c4 10             	add    $0x10,%esp
f011da39:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011da3f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011da45:	89 c1                	mov    %eax,%ecx
f011da47:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011da4e:	10 00 00 
f011da51:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011da57:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011da5c:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011da62:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011da68:	ba 00 00 00 00       	mov    $0x0,%edx
f011da6d:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011da73:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011da79:	29 d0                	sub    %edx,%eax
f011da7b:	89 c3                	mov    %eax,%ebx
f011da7d:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011da84:	10 00 00 
f011da87:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011da8c:	0f b6 d0             	movzbl %al,%edx
f011da8f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011da95:	01 d0                	add    %edx,%eax
f011da97:	48                   	dec    %eax
f011da98:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011da9e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011daa4:	ba 00 00 00 00       	mov    $0x0,%edx
f011daa9:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011daaf:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011dab5:	29 d0                	sub    %edx,%eax
f011dab7:	01 c3                	add    %eax,%ebx
f011dab9:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011dac0:	10 00 00 
f011dac3:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011dac8:	0f b6 c0             	movzbl %al,%eax
f011dacb:	c1 e0 04             	shl    $0x4,%eax
f011dace:	89 c2                	mov    %eax,%edx
f011dad0:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011dad6:	01 d0                	add    %edx,%eax
f011dad8:	48                   	dec    %eax
f011dad9:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011dadf:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011dae5:	ba 00 00 00 00       	mov    $0x0,%edx
f011daea:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011daf0:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011daf6:	29 d0                	sub    %edx,%eax
f011daf8:	01 d8                	add    %ebx,%eax
f011dafa:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011daff:	39 c1                	cmp    %eax,%ecx
f011db01:	74 17                	je     f011db1a <test_kmalloc_firstfit1+0xd3b>
f011db03:	83 ec 04             	sub    $0x4,%esp
f011db06:	68 74 b8 13 f0       	push   $0xf013b874
f011db0b:	68 49 03 00 00       	push   $0x349
f011db10:	68 5a b4 13 f0       	push   $0xf013b45a
f011db15:	e8 eb 26 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011db1a:	e8 c4 62 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011db1f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011db22:	74 17                	je     f011db3b <test_kmalloc_firstfit1+0xd5c>
f011db24:	83 ec 04             	sub    $0x4,%esp
f011db27:	68 74 b4 13 f0       	push   $0xf013b474
f011db2c:	68 4a 03 00 00       	push   $0x34a
f011db31:	68 5a b4 13 f0       	push   $0xf013b45a
f011db36:	e8 ca 26 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011db3b:	e8 19 f5 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011db40:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011db43:	29 c2                	sub    %eax,%edx
f011db45:	89 d0                	mov    %edx,%eax
f011db47:	3d 00 01 00 00       	cmp    $0x100,%eax
f011db4c:	74 17                	je     f011db65 <test_kmalloc_firstfit1+0xd86>
f011db4e:	83 ec 04             	sub    $0x4,%esp
f011db51:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011db56:	68 4b 03 00 00       	push   $0x34b
f011db5b:	68 5a b4 13 f0       	push   $0xf013b45a
f011db60:	e8 a0 26 fe ff       	call   f0100205 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011db65:	e8 ef f4 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011db6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011db6d:	e8 71 62 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011db72:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011db75:	83 ec 0c             	sub    $0xc,%esp
f011db78:	68 00 fc 03 00       	push   $0x3fc00
f011db7d:	e8 ae 9e fe ff       	call   f0107a30 <kmalloc>
f011db82:	83 c4 10             	add    $0x10,%esp
f011db85:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011db8b:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011db91:	89 c1                	mov    %eax,%ecx
f011db93:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011db9a:	10 00 00 
f011db9d:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011dba3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dba8:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011dbae:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011dbb4:	ba 00 00 00 00       	mov    $0x0,%edx
f011dbb9:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011dbbf:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011dbc5:	29 d0                	sub    %edx,%eax
f011dbc7:	89 c3                	mov    %eax,%ebx
f011dbc9:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011dbd0:	10 00 00 
f011dbd3:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011dbd8:	0f b6 d0             	movzbl %al,%edx
f011dbdb:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011dbe1:	01 d0                	add    %edx,%eax
f011dbe3:	48                   	dec    %eax
f011dbe4:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011dbea:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011dbf0:	ba 00 00 00 00       	mov    $0x0,%edx
f011dbf5:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011dbfb:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011dc01:	29 d0                	sub    %edx,%eax
f011dc03:	01 c3                	add    %eax,%ebx
f011dc05:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011dc0c:	10 00 00 
f011dc0f:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011dc14:	0f b6 c0             	movzbl %al,%eax
f011dc17:	c1 e0 04             	shl    $0x4,%eax
f011dc1a:	89 c2                	mov    %eax,%edx
f011dc1c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011dc22:	01 d0                	add    %edx,%eax
f011dc24:	48                   	dec    %eax
f011dc25:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011dc2b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011dc31:	ba 00 00 00 00       	mov    $0x0,%edx
f011dc36:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011dc3c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011dc42:	29 d0                	sub    %edx,%eax
f011dc44:	01 d8                	add    %ebx,%eax
f011dc46:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011dc4b:	39 c1                	cmp    %eax,%ecx
f011dc4d:	74 17                	je     f011dc66 <test_kmalloc_firstfit1+0xe87>
f011dc4f:	83 ec 04             	sub    $0x4,%esp
f011dc52:	68 74 b8 13 f0       	push   $0xf013b874
f011dc57:	68 52 03 00 00       	push   $0x352
f011dc5c:	68 5a b4 13 f0       	push   $0xf013b45a
f011dc61:	e8 9f 25 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dc66:	e8 78 61 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011dc6b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011dc6e:	74 17                	je     f011dc87 <test_kmalloc_firstfit1+0xea8>
f011dc70:	83 ec 04             	sub    $0x4,%esp
f011dc73:	68 74 b4 13 f0       	push   $0xf013b474
f011dc78:	68 53 03 00 00       	push   $0x353
f011dc7d:	68 5a b4 13 f0       	push   $0xf013b45a
f011dc82:	e8 7e 25 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011dc87:	e8 cd f3 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011dc8c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011dc8f:	29 c2                	sub    %eax,%edx
f011dc91:	89 d0                	mov    %edx,%eax
f011dc93:	83 f8 40             	cmp    $0x40,%eax
f011dc96:	74 17                	je     f011dcaf <test_kmalloc_firstfit1+0xed0>
f011dc98:	83 ec 04             	sub    $0x4,%esp
f011dc9b:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011dca0:	68 54 03 00 00       	push   $0x354
f011dca5:	68 5a b4 13 f0       	push   $0xf013b45a
f011dcaa:	e8 56 25 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011dcaf:	e8 a5 f3 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011dcb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dcb7:	e8 27 61 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011dcbc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011dcbf:	83 ec 0c             	sub    $0xc,%esp
f011dcc2:	68 00 00 20 00       	push   $0x200000
f011dcc7:	e8 64 9d fe ff       	call   f0107a30 <kmalloc>
f011dccc:	83 c4 10             	add    $0x10,%esp
f011dccf:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011dcd5:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011dcdb:	89 c1                	mov    %eax,%ecx
f011dcdd:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011dce4:	10 00 00 
f011dce7:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011dced:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dcf2:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011dcf8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011dcfe:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd03:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011dd09:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011dd0f:	29 d0                	sub    %edx,%eax
f011dd11:	89 c3                	mov    %eax,%ebx
f011dd13:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011dd1a:	10 00 00 
f011dd1d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011dd22:	0f b6 d0             	movzbl %al,%edx
f011dd25:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011dd2b:	01 d0                	add    %edx,%eax
f011dd2d:	48                   	dec    %eax
f011dd2e:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011dd34:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011dd3a:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd3f:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011dd45:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011dd4b:	29 d0                	sub    %edx,%eax
f011dd4d:	01 c3                	add    %eax,%ebx
f011dd4f:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011dd56:	10 00 00 
f011dd59:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011dd5e:	0f b6 c0             	movzbl %al,%eax
f011dd61:	c1 e0 04             	shl    $0x4,%eax
f011dd64:	89 c2                	mov    %eax,%edx
f011dd66:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011dd6c:	01 d0                	add    %edx,%eax
f011dd6e:	48                   	dec    %eax
f011dd6f:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011dd75:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011dd7b:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd80:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011dd86:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011dd8c:	29 d0                	sub    %edx,%eax
f011dd8e:	01 d8                	add    %ebx,%eax
f011dd90:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011dd95:	39 c1                	cmp    %eax,%ecx
f011dd97:	74 17                	je     f011ddb0 <test_kmalloc_firstfit1+0xfd1>
f011dd99:	83 ec 04             	sub    $0x4,%esp
f011dd9c:	68 74 b8 13 f0       	push   $0xf013b874
f011dda1:	68 5a 03 00 00       	push   $0x35a
f011dda6:	68 5a b4 13 f0       	push   $0xf013b45a
f011ddab:	e8 55 24 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011ddb0:	e8 a4 f2 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011ddb5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ddb8:	29 c2                	sub    %eax,%edx
f011ddba:	89 d0                	mov    %edx,%eax
f011ddbc:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ddc1:	74 17                	je     f011ddda <test_kmalloc_firstfit1+0xffb>
f011ddc3:	83 ec 04             	sub    $0x4,%esp
f011ddc6:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011ddcb:	68 5b 03 00 00       	push   $0x35b
f011ddd0:	68 5a b4 13 f0       	push   $0xf013b45a
f011ddd5:	e8 2b 24 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ddda:	e8 04 60 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011dddf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011dde2:	74 17                	je     f011ddfb <test_kmalloc_firstfit1+0x101c>
f011dde4:	83 ec 04             	sub    $0x4,%esp
f011dde7:	68 74 b4 13 f0       	push   $0xf013b474
f011ddec:	68 5c 03 00 00       	push   $0x35c
f011ddf1:	68 5a b4 13 f0       	push   $0xf013b45a
f011ddf6:	e8 0a 24 fe ff       	call   f0100205 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011ddfb:	e8 59 f2 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011de00:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011de03:	e8 db 5f fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011de08:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011de0b:	83 ec 0c             	sub    $0xc,%esp
f011de0e:	68 00 fc 3f 00       	push   $0x3ffc00
f011de13:	e8 18 9c fe ff       	call   f0107a30 <kmalloc>
f011de18:	83 c4 10             	add    $0x10,%esp
f011de1b:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011de21:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011de27:	89 c1                	mov    %eax,%ecx
f011de29:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011de30:	10 00 00 
f011de33:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011de39:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011de3e:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011de44:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011de4a:	ba 00 00 00 00       	mov    $0x0,%edx
f011de4f:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011de55:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011de5b:	29 d0                	sub    %edx,%eax
f011de5d:	89 c3                	mov    %eax,%ebx
f011de5f:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011de66:	10 00 00 
f011de69:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011de6e:	0f b6 d0             	movzbl %al,%edx
f011de71:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011de77:	01 d0                	add    %edx,%eax
f011de79:	48                   	dec    %eax
f011de7a:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011de80:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011de86:	ba 00 00 00 00       	mov    $0x0,%edx
f011de8b:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011de91:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011de97:	29 d0                	sub    %edx,%eax
f011de99:	01 c3                	add    %eax,%ebx
f011de9b:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011dea2:	10 00 00 
f011dea5:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011deaa:	0f b6 c0             	movzbl %al,%eax
f011dead:	c1 e0 04             	shl    $0x4,%eax
f011deb0:	89 c2                	mov    %eax,%edx
f011deb2:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011deb8:	01 d0                	add    %edx,%eax
f011deba:	48                   	dec    %eax
f011debb:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011dec1:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011dec7:	ba 00 00 00 00       	mov    $0x0,%edx
f011decc:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011ded2:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011ded8:	29 d0                	sub    %edx,%eax
f011deda:	01 d8                	add    %ebx,%eax
f011dedc:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011dee1:	39 c1                	cmp    %eax,%ecx
f011dee3:	74 17                	je     f011defc <test_kmalloc_firstfit1+0x111d>
f011dee5:	83 ec 04             	sub    $0x4,%esp
f011dee8:	68 74 b8 13 f0       	push   $0xf013b874
f011deed:	68 63 03 00 00       	push   $0x363
f011def2:	68 5a b4 13 f0       	push   $0xf013b45a
f011def7:	e8 09 23 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011defc:	e8 e2 5e fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011df01:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011df04:	74 17                	je     f011df1d <test_kmalloc_firstfit1+0x113e>
f011df06:	83 ec 04             	sub    $0x4,%esp
f011df09:	68 74 b4 13 f0       	push   $0xf013b474
f011df0e:	68 64 03 00 00       	push   $0x364
f011df13:	68 5a b4 13 f0       	push   $0xf013b45a
f011df18:	e8 e8 22 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011df1d:	e8 37 f1 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011df22:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011df25:	29 c2                	sub    %eax,%edx
f011df27:	89 d0                	mov    %edx,%eax
f011df29:	3d 00 04 00 00       	cmp    $0x400,%eax
f011df2e:	74 17                	je     f011df47 <test_kmalloc_firstfit1+0x1168>
f011df30:	83 ec 04             	sub    $0x4,%esp
f011df33:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011df38:	68 65 03 00 00       	push   $0x365
f011df3d:	68 5a b4 13 f0       	push   $0xf013b45a
f011df42:	e8 be 22 fe ff       	call   f0100205 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011df47:	e8 0d f1 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011df4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011df4f:	e8 8f 5e fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011df54:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011df57:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011df5d:	83 ec 0c             	sub    $0xc,%esp
f011df60:	50                   	push   %eax
f011df61:	e8 b3 9b fe ff       	call   f0107b19 <kfree>
f011df66:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011df69:	e8 75 5e fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011df6e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011df71:	74 17                	je     f011df8a <test_kmalloc_firstfit1+0x11ab>
f011df73:	83 ec 04             	sub    $0x4,%esp
f011df76:	68 74 b4 13 f0       	push   $0xf013b474
f011df7b:	68 6e 03 00 00       	push   $0x36e
f011df80:	68 5a b4 13 f0       	push   $0xf013b45a
f011df85:	e8 7b 22 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011df8a:	e8 ca f0 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011df8f:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011df92:	3d 00 01 00 00       	cmp    $0x100,%eax
f011df97:	74 17                	je     f011dfb0 <test_kmalloc_firstfit1+0x11d1>
f011df99:	83 ec 04             	sub    $0x4,%esp
f011df9c:	68 b7 b8 13 f0       	push   $0xf013b8b7
f011dfa1:	68 6f 03 00 00       	push   $0x36f
f011dfa6:	68 5a b4 13 f0       	push   $0xf013b45a
f011dfab:	e8 55 22 fe ff       	call   f0100205 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011dfb0:	e8 a4 f0 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011dfb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dfb8:	e8 26 5e fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011dfbd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011dfc0:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011dfc6:	83 ec 0c             	sub    $0xc,%esp
f011dfc9:	50                   	push   %eax
f011dfca:	e8 4a 9b fe ff       	call   f0107b19 <kfree>
f011dfcf:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dfd2:	e8 0c 5e fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011dfd7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011dfda:	74 17                	je     f011dff3 <test_kmalloc_firstfit1+0x1214>
f011dfdc:	83 ec 04             	sub    $0x4,%esp
f011dfdf:	68 74 b4 13 f0       	push   $0xf013b474
f011dfe4:	68 75 03 00 00       	push   $0x375
f011dfe9:	68 5a b4 13 f0       	push   $0xf013b45a
f011dfee:	e8 12 22 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011dff3:	e8 61 f0 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011dff8:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011dffb:	3d 00 01 00 00       	cmp    $0x100,%eax
f011e000:	74 17                	je     f011e019 <test_kmalloc_firstfit1+0x123a>
f011e002:	83 ec 04             	sub    $0x4,%esp
f011e005:	68 b7 b8 13 f0       	push   $0xf013b8b7
f011e00a:	68 76 03 00 00       	push   $0x376
f011e00f:	68 5a b4 13 f0       	push   $0xf013b45a
f011e014:	e8 ec 21 fe ff       	call   f0100205 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011e019:	e8 3b f0 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e01e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e021:	e8 bd 5d fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011e026:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011e029:	83 ec 0c             	sub    $0xc,%esp
f011e02c:	68 00 00 10 00       	push   $0x100000
f011e031:	e8 fa 99 fe ff       	call   f0107a30 <kmalloc>
f011e036:	83 c4 10             	add    $0x10,%esp
f011e039:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011e03f:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011e045:	89 c1                	mov    %eax,%ecx
f011e047:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011e04e:	10 00 00 
f011e051:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011e057:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e05c:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011e062:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011e068:	ba 00 00 00 00       	mov    $0x0,%edx
f011e06d:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011e073:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011e079:	29 d0                	sub    %edx,%eax
f011e07b:	89 c3                	mov    %eax,%ebx
f011e07d:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011e084:	10 00 00 
f011e087:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011e08c:	0f b6 d0             	movzbl %al,%edx
f011e08f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e095:	01 d0                	add    %edx,%eax
f011e097:	48                   	dec    %eax
f011e098:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011e09e:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011e0a4:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0a9:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011e0af:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011e0b5:	29 d0                	sub    %edx,%eax
f011e0b7:	01 c3                	add    %eax,%ebx
f011e0b9:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011e0c0:	10 00 00 
f011e0c3:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011e0c8:	0f b6 c0             	movzbl %al,%eax
f011e0cb:	c1 e0 04             	shl    $0x4,%eax
f011e0ce:	89 c2                	mov    %eax,%edx
f011e0d0:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011e0d6:	01 d0                	add    %edx,%eax
f011e0d8:	48                   	dec    %eax
f011e0d9:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011e0df:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e0e5:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0ea:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011e0f0:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e0f6:	29 d0                	sub    %edx,%eax
f011e0f8:	01 d8                	add    %ebx,%eax
f011e0fa:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011e0ff:	39 c1                	cmp    %eax,%ecx
f011e101:	74 17                	je     f011e11a <test_kmalloc_firstfit1+0x133b>
f011e103:	83 ec 04             	sub    $0x4,%esp
f011e106:	68 74 b8 13 f0       	push   $0xf013b874
f011e10b:	68 80 03 00 00       	push   $0x380
f011e110:	68 5a b4 13 f0       	push   $0xf013b45a
f011e115:	e8 eb 20 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e11a:	e8 c4 5c fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011e11f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011e122:	74 17                	je     f011e13b <test_kmalloc_firstfit1+0x135c>
f011e124:	83 ec 04             	sub    $0x4,%esp
f011e127:	68 74 b4 13 f0       	push   $0xf013b474
f011e12c:	68 81 03 00 00       	push   $0x381
f011e131:	68 5a b4 13 f0       	push   $0xf013b45a
f011e136:	e8 ca 20 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011e13b:	e8 19 ef fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e140:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011e143:	29 c2                	sub    %eax,%edx
f011e145:	89 d0                	mov    %edx,%eax
f011e147:	3d 00 01 00 00       	cmp    $0x100,%eax
f011e14c:	74 17                	je     f011e165 <test_kmalloc_firstfit1+0x1386>
f011e14e:	83 ec 04             	sub    $0x4,%esp
f011e151:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011e156:	68 82 03 00 00       	push   $0x382
f011e15b:	68 5a b4 13 f0       	push   $0xf013b45a
f011e160:	e8 a0 20 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011e165:	83 ec 0c             	sub    $0xc,%esp
f011e168:	68 50 ba 13 f0       	push   $0xf013ba50
f011e16d:	e8 9c 2b fe ff       	call   f0100d0e <cprintf>
f011e172:	83 c4 10             	add    $0x10,%esp

	return 1;
f011e175:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011e17a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011e17d:	5b                   	pop    %ebx
f011e17e:	5f                   	pop    %edi
f011e17f:	5d                   	pop    %ebp
f011e180:	c3                   	ret    

f011e181 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011e181:	55                   	push   %ebp
f011e182:	89 e5                	mov    %esp,%ebp
f011e184:	57                   	push   %edi
f011e185:	53                   	push   %ebx
f011e186:	81 ec 60 01 00 00    	sub    $0x160,%esp
	cprintf("==============================================\n");
f011e18c:	83 ec 0c             	sub    $0xc,%esp
f011e18f:	68 9c b3 13 f0       	push   $0xf013b39c
f011e194:	e8 75 2b fe ff       	call   f0100d0e <cprintf>
f011e199:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011e19c:	83 ec 0c             	sub    $0xc,%esp
f011e19f:	68 cc b3 13 f0       	push   $0xf013b3cc
f011e1a4:	e8 65 2b fe ff       	call   f0100d0e <cprintf>
f011e1a9:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011e1ac:	83 ec 0c             	sub    $0xc,%esp
f011e1af:	68 9c b3 13 f0       	push   $0xf013b39c
f011e1b4:	e8 55 2b fe ff       	call   f0100d0e <cprintf>
f011e1b9:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011e1bc:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f011e1c2:	b9 14 00 00 00       	mov    $0x14,%ecx
f011e1c7:	b8 00 00 00 00       	mov    $0x0,%eax
f011e1cc:	89 d7                	mov    %edx,%edi
f011e1ce:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011e1d0:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011e1d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e1da:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e1df:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011e1e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011e1e5:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1ea:	f7 75 f4             	divl   -0xc(%ebp)
f011e1ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011e1f0:	29 d0                	sub    %edx,%eax
f011e1f2:	89 c1                	mov    %eax,%ecx
f011e1f4:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011e1fb:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011e200:	0f b6 d0             	movzbl %al,%edx
f011e203:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011e206:	01 d0                	add    %edx,%eax
f011e208:	48                   	dec    %eax
f011e209:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011e20c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011e20f:	ba 00 00 00 00       	mov    $0x0,%edx
f011e214:	f7 75 ec             	divl   -0x14(%ebp)
f011e217:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011e21a:	29 d0                	sub    %edx,%eax
f011e21c:	01 c1                	add    %eax,%ecx
f011e21e:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011e225:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011e22a:	0f b6 c0             	movzbl %al,%eax
f011e22d:	c1 e0 04             	shl    $0x4,%eax
f011e230:	89 c2                	mov    %eax,%edx
f011e232:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011e235:	01 d0                	add    %edx,%eax
f011e237:	48                   	dec    %eax
f011e238:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011e23b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e23e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e243:	f7 75 e4             	divl   -0x1c(%ebp)
f011e246:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e249:	29 d0                	sub    %edx,%eax
f011e24b:	01 c8                	add    %ecx,%eax
f011e24d:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011e252:	29 c2                	sub    %eax,%edx
f011e254:	89 d0                	mov    %edx,%eax
f011e256:	83 ec 0c             	sub    $0xc,%esp
f011e259:	50                   	push   %eax
f011e25a:	e8 d1 97 fe ff       	call   f0107a30 <kmalloc>
f011e25f:	83 c4 10             	add    $0x10,%esp
f011e262:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011e268:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011e26e:	85 c0                	test   %eax,%eax
f011e270:	74 17                	je     f011e289 <test_kmalloc_firstfit2+0x108>
f011e272:	83 ec 04             	sub    $0x4,%esp
f011e275:	68 9c ba 13 f0       	push   $0xf013ba9c
f011e27a:	68 97 03 00 00       	push   $0x397
f011e27f:	68 5a b4 13 f0       	push   $0xf013b45a
f011e284:	e8 7c 1f fe ff       	call   f0100205 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011e289:	e8 cb ed fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e28e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e291:	e8 4d 5b fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011e296:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011e299:	83 ec 0c             	sub    $0xc,%esp
f011e29c:	68 00 fc 1f 00       	push   $0x1ffc00
f011e2a1:	e8 8a 97 fe ff       	call   f0107a30 <kmalloc>
f011e2a6:	83 c4 10             	add    $0x10,%esp
f011e2a9:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011e2af:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011e2b5:	89 c1                	mov    %eax,%ecx
f011e2b7:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011e2be:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011e2c1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e2c6:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011e2c9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e2cc:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2d1:	f7 75 d4             	divl   -0x2c(%ebp)
f011e2d4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e2d7:	29 d0                	sub    %edx,%eax
f011e2d9:	89 c3                	mov    %eax,%ebx
f011e2db:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011e2e2:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011e2e7:	0f b6 d0             	movzbl %al,%edx
f011e2ea:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011e2ed:	01 d0                	add    %edx,%eax
f011e2ef:	48                   	dec    %eax
f011e2f0:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011e2f3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e2f6:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2fb:	f7 75 cc             	divl   -0x34(%ebp)
f011e2fe:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e301:	29 d0                	sub    %edx,%eax
f011e303:	01 c3                	add    %eax,%ebx
f011e305:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011e30c:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011e311:	0f b6 c0             	movzbl %al,%eax
f011e314:	c1 e0 04             	shl    $0x4,%eax
f011e317:	89 c2                	mov    %eax,%edx
f011e319:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011e31c:	01 d0                	add    %edx,%eax
f011e31e:	48                   	dec    %eax
f011e31f:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011e322:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e325:	ba 00 00 00 00       	mov    $0x0,%edx
f011e32a:	f7 75 c4             	divl   -0x3c(%ebp)
f011e32d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e330:	29 d0                	sub    %edx,%eax
f011e332:	01 d8                	add    %ebx,%eax
f011e334:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e339:	39 c1                	cmp    %eax,%ecx
f011e33b:	74 17                	je     f011e354 <test_kmalloc_firstfit2+0x1d3>
f011e33d:	83 ec 04             	sub    $0x4,%esp
f011e340:	68 74 b8 13 f0       	push   $0xf013b874
f011e345:	68 a1 03 00 00       	push   $0x3a1
f011e34a:	68 5a b4 13 f0       	push   $0xf013b45a
f011e34f:	e8 b1 1e fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e354:	e8 8a 5a fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011e359:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e35c:	74 17                	je     f011e375 <test_kmalloc_firstfit2+0x1f4>
f011e35e:	83 ec 04             	sub    $0x4,%esp
f011e361:	68 74 b4 13 f0       	push   $0xf013b474
f011e366:	68 a2 03 00 00       	push   $0x3a2
f011e36b:	68 5a b4 13 f0       	push   $0xf013b45a
f011e370:	e8 90 1e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011e375:	e8 df ec fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e37a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e37d:	29 c2                	sub    %eax,%edx
f011e37f:	89 d0                	mov    %edx,%eax
f011e381:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e386:	74 17                	je     f011e39f <test_kmalloc_firstfit2+0x21e>
f011e388:	83 ec 04             	sub    $0x4,%esp
f011e38b:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011e390:	68 a3 03 00 00       	push   $0x3a3
f011e395:	68 5a b4 13 f0       	push   $0xf013b45a
f011e39a:	e8 66 1e fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011e39f:	e8 b5 ec fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e3a4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e3a7:	e8 37 5a fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011e3ac:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011e3af:	83 ec 0c             	sub    $0xc,%esp
f011e3b2:	68 00 fc 1f 00       	push   $0x1ffc00
f011e3b7:	e8 74 96 fe ff       	call   f0107a30 <kmalloc>
f011e3bc:	83 c4 10             	add    $0x10,%esp
f011e3bf:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011e3c5:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011e3cb:	89 c1                	mov    %eax,%ecx
f011e3cd:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011e3d4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e3d7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e3dc:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011e3df:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e3e2:	ba 00 00 00 00       	mov    $0x0,%edx
f011e3e7:	f7 75 bc             	divl   -0x44(%ebp)
f011e3ea:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e3ed:	29 d0                	sub    %edx,%eax
f011e3ef:	89 c3                	mov    %eax,%ebx
f011e3f1:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011e3f8:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011e3fd:	0f b6 d0             	movzbl %al,%edx
f011e400:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011e403:	01 d0                	add    %edx,%eax
f011e405:	48                   	dec    %eax
f011e406:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011e409:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e40c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e411:	f7 75 b4             	divl   -0x4c(%ebp)
f011e414:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e417:	29 d0                	sub    %edx,%eax
f011e419:	01 c3                	add    %eax,%ebx
f011e41b:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011e422:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011e427:	0f b6 c0             	movzbl %al,%eax
f011e42a:	c1 e0 04             	shl    $0x4,%eax
f011e42d:	89 c2                	mov    %eax,%edx
f011e42f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011e432:	01 d0                	add    %edx,%eax
f011e434:	48                   	dec    %eax
f011e435:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011e438:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e43b:	ba 00 00 00 00       	mov    $0x0,%edx
f011e440:	f7 75 ac             	divl   -0x54(%ebp)
f011e443:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e446:	29 d0                	sub    %edx,%eax
f011e448:	01 d8                	add    %ebx,%eax
f011e44a:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011e44f:	39 c1                	cmp    %eax,%ecx
f011e451:	74 17                	je     f011e46a <test_kmalloc_firstfit2+0x2e9>
f011e453:	83 ec 04             	sub    $0x4,%esp
f011e456:	68 74 b8 13 f0       	push   $0xf013b874
f011e45b:	68 a9 03 00 00       	push   $0x3a9
f011e460:	68 5a b4 13 f0       	push   $0xf013b45a
f011e465:	e8 9b 1d fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e46a:	e8 74 59 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011e46f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e472:	74 17                	je     f011e48b <test_kmalloc_firstfit2+0x30a>
f011e474:	83 ec 04             	sub    $0x4,%esp
f011e477:	68 74 b4 13 f0       	push   $0xf013b474
f011e47c:	68 aa 03 00 00       	push   $0x3aa
f011e481:	68 5a b4 13 f0       	push   $0xf013b45a
f011e486:	e8 7a 1d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011e48b:	e8 c9 eb fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e490:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e493:	29 c2                	sub    %eax,%edx
f011e495:	89 d0                	mov    %edx,%eax
f011e497:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e49c:	74 17                	je     f011e4b5 <test_kmalloc_firstfit2+0x334>
f011e49e:	83 ec 04             	sub    $0x4,%esp
f011e4a1:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011e4a6:	68 ab 03 00 00       	push   $0x3ab
f011e4ab:	68 5a b4 13 f0       	push   $0xf013b45a
f011e4b0:	e8 50 1d fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011e4b5:	e8 9f eb fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e4ba:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e4bd:	e8 21 59 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011e4c2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011e4c5:	83 ec 0c             	sub    $0xc,%esp
f011e4c8:	68 00 08 00 00       	push   $0x800
f011e4cd:	e8 5e 95 fe ff       	call   f0107a30 <kmalloc>
f011e4d2:	83 c4 10             	add    $0x10,%esp
f011e4d5:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011e4db:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e4e1:	89 c1                	mov    %eax,%ecx
f011e4e3:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011e4ea:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011e4ed:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e4f2:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011e4f5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e4f8:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4fd:	f7 75 a4             	divl   -0x5c(%ebp)
f011e500:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e503:	29 d0                	sub    %edx,%eax
f011e505:	89 c3                	mov    %eax,%ebx
f011e507:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011e50e:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011e513:	0f b6 d0             	movzbl %al,%edx
f011e516:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011e519:	01 d0                	add    %edx,%eax
f011e51b:	48                   	dec    %eax
f011e51c:	89 45 98             	mov    %eax,-0x68(%ebp)
f011e51f:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e522:	ba 00 00 00 00       	mov    $0x0,%edx
f011e527:	f7 75 9c             	divl   -0x64(%ebp)
f011e52a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e52d:	29 d0                	sub    %edx,%eax
f011e52f:	01 c3                	add    %eax,%ebx
f011e531:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011e538:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011e53d:	0f b6 c0             	movzbl %al,%eax
f011e540:	c1 e0 04             	shl    $0x4,%eax
f011e543:	89 c2                	mov    %eax,%edx
f011e545:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011e548:	01 d0                	add    %edx,%eax
f011e54a:	48                   	dec    %eax
f011e54b:	89 45 90             	mov    %eax,-0x70(%ebp)
f011e54e:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e551:	ba 00 00 00 00       	mov    $0x0,%edx
f011e556:	f7 75 94             	divl   -0x6c(%ebp)
f011e559:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e55c:	29 d0                	sub    %edx,%eax
f011e55e:	01 d8                	add    %ebx,%eax
f011e560:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011e565:	39 c1                	cmp    %eax,%ecx
f011e567:	73 17                	jae    f011e580 <test_kmalloc_firstfit2+0x3ff>
f011e569:	83 ec 04             	sub    $0x4,%esp
f011e56c:	68 74 b8 13 f0       	push   $0xf013b874
f011e571:	68 b1 03 00 00       	push   $0x3b1
f011e576:	68 5a b4 13 f0       	push   $0xf013b45a
f011e57b:	e8 85 1c fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e580:	e8 5e 58 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011e585:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e588:	74 17                	je     f011e5a1 <test_kmalloc_firstfit2+0x420>
f011e58a:	83 ec 04             	sub    $0x4,%esp
f011e58d:	68 74 b4 13 f0       	push   $0xf013b474
f011e592:	68 b2 03 00 00       	push   $0x3b2
f011e597:	68 5a b4 13 f0       	push   $0xf013b45a
f011e59c:	e8 64 1c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011e5a1:	e8 b3 ea fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e5a6:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e5a9:	29 c2                	sub    %eax,%edx
f011e5ab:	89 d0                	mov    %edx,%eax
f011e5ad:	83 f8 01             	cmp    $0x1,%eax
f011e5b0:	74 17                	je     f011e5c9 <test_kmalloc_firstfit2+0x448>
f011e5b2:	83 ec 04             	sub    $0x4,%esp
f011e5b5:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011e5ba:	68 b3 03 00 00       	push   $0x3b3
f011e5bf:	68 5a b4 13 f0       	push   $0xf013b45a
f011e5c4:	e8 3c 1c fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011e5c9:	e8 8b ea fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e5ce:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e5d1:	e8 0d 58 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011e5d6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011e5d9:	83 ec 0c             	sub    $0xc,%esp
f011e5dc:	68 00 08 00 00       	push   $0x800
f011e5e1:	e8 4a 94 fe ff       	call   f0107a30 <kmalloc>
f011e5e6:	83 c4 10             	add    $0x10,%esp
f011e5e9:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011e5ef:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011e5f5:	89 c1                	mov    %eax,%ecx
f011e5f7:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011e5fe:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011e601:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e606:	89 45 88             	mov    %eax,-0x78(%ebp)
f011e609:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e60c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e611:	f7 75 8c             	divl   -0x74(%ebp)
f011e614:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e617:	29 d0                	sub    %edx,%eax
f011e619:	89 c3                	mov    %eax,%ebx
f011e61b:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011e622:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011e627:	0f b6 d0             	movzbl %al,%edx
f011e62a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011e62d:	01 d0                	add    %edx,%eax
f011e62f:	48                   	dec    %eax
f011e630:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e633:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e636:	ba 00 00 00 00       	mov    $0x0,%edx
f011e63b:	f7 75 84             	divl   -0x7c(%ebp)
f011e63e:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e641:	29 d0                	sub    %edx,%eax
f011e643:	01 c3                	add    %eax,%ebx
f011e645:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e64c:	10 00 00 
f011e64f:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011e654:	0f b6 c0             	movzbl %al,%eax
f011e657:	c1 e0 04             	shl    $0x4,%eax
f011e65a:	89 c2                	mov    %eax,%edx
f011e65c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e662:	01 d0                	add    %edx,%eax
f011e664:	48                   	dec    %eax
f011e665:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011e66b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e671:	ba 00 00 00 00       	mov    $0x0,%edx
f011e676:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011e67c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e682:	29 d0                	sub    %edx,%eax
f011e684:	01 d8                	add    %ebx,%eax
f011e686:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011e68b:	39 c1                	cmp    %eax,%ecx
f011e68d:	74 17                	je     f011e6a6 <test_kmalloc_firstfit2+0x525>
f011e68f:	83 ec 04             	sub    $0x4,%esp
f011e692:	68 74 b8 13 f0       	push   $0xf013b874
f011e697:	68 b9 03 00 00       	push   $0x3b9
f011e69c:	68 5a b4 13 f0       	push   $0xf013b45a
f011e6a1:	e8 5f 1b fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e6a6:	e8 38 57 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011e6ab:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e6ae:	74 17                	je     f011e6c7 <test_kmalloc_firstfit2+0x546>
f011e6b0:	83 ec 04             	sub    $0x4,%esp
f011e6b3:	68 74 b4 13 f0       	push   $0xf013b474
f011e6b8:	68 ba 03 00 00       	push   $0x3ba
f011e6bd:	68 5a b4 13 f0       	push   $0xf013b45a
f011e6c2:	e8 3e 1b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011e6c7:	e8 8d e9 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e6cc:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e6cf:	29 c2                	sub    %eax,%edx
f011e6d1:	89 d0                	mov    %edx,%eax
f011e6d3:	83 f8 01             	cmp    $0x1,%eax
f011e6d6:	74 17                	je     f011e6ef <test_kmalloc_firstfit2+0x56e>
f011e6d8:	83 ec 04             	sub    $0x4,%esp
f011e6db:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011e6e0:	68 bb 03 00 00       	push   $0x3bb
f011e6e5:	68 5a b4 13 f0       	push   $0xf013b45a
f011e6ea:	e8 16 1b fe ff       	call   f0100205 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e6ef:	e8 65 e9 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e6f4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e6f7:	e8 e7 56 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011e6fc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011e6ff:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e705:	83 ec 0c             	sub    $0xc,%esp
f011e708:	50                   	push   %eax
f011e709:	e8 0b 94 fe ff       	call   f0107b19 <kfree>
f011e70e:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e711:	e8 cd 56 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011e716:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e719:	74 17                	je     f011e732 <test_kmalloc_firstfit2+0x5b1>
f011e71b:	83 ec 04             	sub    $0x4,%esp
f011e71e:	68 74 b4 13 f0       	push   $0xf013b474
f011e723:	68 c1 03 00 00       	push   $0x3c1
f011e728:	68 5a b4 13 f0       	push   $0xf013b45a
f011e72d:	e8 d3 1a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011e732:	e8 22 e9 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e737:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e73a:	83 f8 01             	cmp    $0x1,%eax
f011e73d:	74 17                	je     f011e756 <test_kmalloc_firstfit2+0x5d5>
f011e73f:	83 ec 04             	sub    $0x4,%esp
f011e742:	68 b7 b8 13 f0       	push   $0xf013b8b7
f011e747:	68 c2 03 00 00       	push   $0x3c2
f011e74c:	68 5a b4 13 f0       	push   $0xf013b45a
f011e751:	e8 af 1a fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011e756:	e8 fe e8 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e75b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e75e:	e8 80 56 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011e763:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011e766:	83 ec 0c             	sub    $0xc,%esp
f011e769:	68 00 1c 00 00       	push   $0x1c00
f011e76e:	e8 bd 92 fe ff       	call   f0107a30 <kmalloc>
f011e773:	83 c4 10             	add    $0x10,%esp
f011e776:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011e77c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011e782:	89 c1                	mov    %eax,%ecx
f011e784:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011e78b:	10 00 00 
f011e78e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011e794:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e799:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011e79f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e7a5:	ba 00 00 00 00       	mov    $0x0,%edx
f011e7aa:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011e7b0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e7b6:	29 d0                	sub    %edx,%eax
f011e7b8:	89 c3                	mov    %eax,%ebx
f011e7ba:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e7c1:	10 00 00 
f011e7c4:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011e7c9:	0f b6 d0             	movzbl %al,%edx
f011e7cc:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e7d2:	01 d0                	add    %edx,%eax
f011e7d4:	48                   	dec    %eax
f011e7d5:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e7db:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e7e1:	ba 00 00 00 00       	mov    $0x0,%edx
f011e7e6:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e7ec:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e7f2:	29 d0                	sub    %edx,%eax
f011e7f4:	01 c3                	add    %eax,%ebx
f011e7f6:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011e7fd:	10 00 00 
f011e800:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011e805:	0f b6 c0             	movzbl %al,%eax
f011e808:	c1 e0 04             	shl    $0x4,%eax
f011e80b:	89 c2                	mov    %eax,%edx
f011e80d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e813:	01 d0                	add    %edx,%eax
f011e815:	48                   	dec    %eax
f011e816:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011e81c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e822:	ba 00 00 00 00       	mov    $0x0,%edx
f011e827:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011e82d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e833:	29 d0                	sub    %edx,%eax
f011e835:	01 d8                	add    %ebx,%eax
f011e837:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011e83c:	39 c1                	cmp    %eax,%ecx
f011e83e:	74 17                	je     f011e857 <test_kmalloc_firstfit2+0x6d6>
f011e840:	83 ec 04             	sub    $0x4,%esp
f011e843:	68 74 b8 13 f0       	push   $0xf013b874
f011e848:	68 c8 03 00 00       	push   $0x3c8
f011e84d:	68 5a b4 13 f0       	push   $0xf013b45a
f011e852:	e8 ae 19 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e857:	e8 87 55 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011e85c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e85f:	74 17                	je     f011e878 <test_kmalloc_firstfit2+0x6f7>
f011e861:	83 ec 04             	sub    $0x4,%esp
f011e864:	68 74 b4 13 f0       	push   $0xf013b474
f011e869:	68 c9 03 00 00       	push   $0x3c9
f011e86e:	68 5a b4 13 f0       	push   $0xf013b45a
f011e873:	e8 8d 19 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011e878:	e8 dc e7 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e87d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e880:	29 c2                	sub    %eax,%edx
f011e882:	89 d0                	mov    %edx,%eax
f011e884:	83 f8 02             	cmp    $0x2,%eax
f011e887:	74 17                	je     f011e8a0 <test_kmalloc_firstfit2+0x71f>
f011e889:	83 ec 04             	sub    $0x4,%esp
f011e88c:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011e891:	68 ca 03 00 00       	push   $0x3ca
f011e896:	68 5a b4 13 f0       	push   $0xf013b45a
f011e89b:	e8 65 19 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e8a0:	e8 b4 e7 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e8a5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e8a8:	e8 36 55 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011e8ad:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011e8b0:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011e8b6:	83 ec 0c             	sub    $0xc,%esp
f011e8b9:	50                   	push   %eax
f011e8ba:	e8 5a 92 fe ff       	call   f0107b19 <kfree>
f011e8bf:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e8c2:	e8 1c 55 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011e8c7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e8ca:	74 17                	je     f011e8e3 <test_kmalloc_firstfit2+0x762>
f011e8cc:	83 ec 04             	sub    $0x4,%esp
f011e8cf:	68 74 b4 13 f0       	push   $0xf013b474
f011e8d4:	68 d0 03 00 00       	push   $0x3d0
f011e8d9:	68 5a b4 13 f0       	push   $0xf013b45a
f011e8de:	e8 22 19 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e8e3:	e8 71 e7 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e8e8:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e8eb:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e8f0:	74 17                	je     f011e909 <test_kmalloc_firstfit2+0x788>
f011e8f2:	83 ec 04             	sub    $0x4,%esp
f011e8f5:	68 b7 b8 13 f0       	push   $0xf013b8b7
f011e8fa:	68 d1 03 00 00       	push   $0x3d1
f011e8ff:	68 5a b4 13 f0       	push   $0xf013b45a
f011e904:	e8 fc 18 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e909:	e8 4b e7 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011e90e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e911:	e8 cd 54 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011e916:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011e919:	83 ec 0c             	sub    $0xc,%esp
f011e91c:	68 00 fc 2f 00       	push   $0x2ffc00
f011e921:	e8 0a 91 fe ff       	call   f0107a30 <kmalloc>
f011e926:	83 c4 10             	add    $0x10,%esp
f011e929:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011e92f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e935:	89 c1                	mov    %eax,%ecx
f011e937:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011e93e:	10 00 00 
f011e941:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e947:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e94c:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e952:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e958:	ba 00 00 00 00       	mov    $0x0,%edx
f011e95d:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e963:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e969:	29 d0                	sub    %edx,%eax
f011e96b:	89 c3                	mov    %eax,%ebx
f011e96d:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e974:	10 00 00 
f011e977:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011e97c:	0f b6 d0             	movzbl %al,%edx
f011e97f:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e985:	01 d0                	add    %edx,%eax
f011e987:	48                   	dec    %eax
f011e988:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e98e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e994:	ba 00 00 00 00       	mov    $0x0,%edx
f011e999:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e99f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e9a5:	29 d0                	sub    %edx,%eax
f011e9a7:	01 c3                	add    %eax,%ebx
f011e9a9:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e9b0:	10 00 00 
f011e9b3:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011e9b8:	0f b6 c0             	movzbl %al,%eax
f011e9bb:	c1 e0 04             	shl    $0x4,%eax
f011e9be:	89 c2                	mov    %eax,%edx
f011e9c0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e9c6:	01 d0                	add    %edx,%eax
f011e9c8:	48                   	dec    %eax
f011e9c9:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e9cf:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e9d5:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9da:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e9e0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e9e6:	29 d0                	sub    %edx,%eax
f011e9e8:	01 d8                	add    %ebx,%eax
f011e9ea:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011e9ef:	39 c1                	cmp    %eax,%ecx
f011e9f1:	74 17                	je     f011ea0a <test_kmalloc_firstfit2+0x889>
f011e9f3:	83 ec 04             	sub    $0x4,%esp
f011e9f6:	68 74 b8 13 f0       	push   $0xf013b874
f011e9fb:	68 d7 03 00 00       	push   $0x3d7
f011ea00:	68 5a b4 13 f0       	push   $0xf013b45a
f011ea05:	e8 fb 17 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ea0a:	e8 d4 53 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011ea0f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ea12:	74 17                	je     f011ea2b <test_kmalloc_firstfit2+0x8aa>
f011ea14:	83 ec 04             	sub    $0x4,%esp
f011ea17:	68 74 b4 13 f0       	push   $0xf013b474
f011ea1c:	68 d8 03 00 00       	push   $0x3d8
f011ea21:	68 5a b4 13 f0       	push   $0xf013b45a
f011ea26:	e8 da 17 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011ea2b:	e8 29 e6 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011ea30:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ea33:	29 c2                	sub    %eax,%edx
f011ea35:	89 d0                	mov    %edx,%eax
f011ea37:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ea3c:	74 17                	je     f011ea55 <test_kmalloc_firstfit2+0x8d4>
f011ea3e:	83 ec 04             	sub    $0x4,%esp
f011ea41:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011ea46:	68 d9 03 00 00       	push   $0x3d9
f011ea4b:	68 5a b4 13 f0       	push   $0xf013b45a
f011ea50:	e8 b0 17 fe ff       	call   f0100205 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011ea55:	e8 ff e5 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011ea5a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ea5d:	e8 81 53 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011ea62:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011ea65:	83 ec 0c             	sub    $0xc,%esp
f011ea68:	68 00 18 20 00       	push   $0x201800
f011ea6d:	e8 be 8f fe ff       	call   f0107a30 <kmalloc>
f011ea72:	83 c4 10             	add    $0x10,%esp
f011ea75:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011ea7b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011ea81:	89 c1                	mov    %eax,%ecx
f011ea83:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011ea8a:	10 00 00 
f011ea8d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011ea93:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ea98:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011ea9e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011eaa4:	ba 00 00 00 00       	mov    $0x0,%edx
f011eaa9:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011eaaf:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011eab5:	29 d0                	sub    %edx,%eax
f011eab7:	89 c3                	mov    %eax,%ebx
f011eab9:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011eac0:	10 00 00 
f011eac3:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011eac8:	0f b6 d0             	movzbl %al,%edx
f011eacb:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ead1:	01 d0                	add    %edx,%eax
f011ead3:	48                   	dec    %eax
f011ead4:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011eada:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011eae0:	ba 00 00 00 00       	mov    $0x0,%edx
f011eae5:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011eaeb:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011eaf1:	29 d0                	sub    %edx,%eax
f011eaf3:	01 c3                	add    %eax,%ebx
f011eaf5:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011eafc:	10 00 00 
f011eaff:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011eb04:	0f b6 c0             	movzbl %al,%eax
f011eb07:	c1 e0 04             	shl    $0x4,%eax
f011eb0a:	89 c2                	mov    %eax,%edx
f011eb0c:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011eb12:	01 d0                	add    %edx,%eax
f011eb14:	48                   	dec    %eax
f011eb15:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011eb1b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011eb21:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb26:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011eb2c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011eb32:	29 d0                	sub    %edx,%eax
f011eb34:	01 d8                	add    %ebx,%eax
f011eb36:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011eb3b:	39 c1                	cmp    %eax,%ecx
f011eb3d:	74 17                	je     f011eb56 <test_kmalloc_firstfit2+0x9d5>
f011eb3f:	83 ec 04             	sub    $0x4,%esp
f011eb42:	68 74 b8 13 f0       	push   $0xf013b874
f011eb47:	68 df 03 00 00       	push   $0x3df
f011eb4c:	68 5a b4 13 f0       	push   $0xf013b45a
f011eb51:	e8 af 16 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011eb56:	e8 88 52 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011eb5b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011eb5e:	74 17                	je     f011eb77 <test_kmalloc_firstfit2+0x9f6>
f011eb60:	83 ec 04             	sub    $0x4,%esp
f011eb63:	68 74 b4 13 f0       	push   $0xf013b474
f011eb68:	68 e0 03 00 00       	push   $0x3e0
f011eb6d:	68 5a b4 13 f0       	push   $0xf013b45a
f011eb72:	e8 8e 16 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011eb77:	e8 dd e4 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011eb7c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011eb7f:	29 c2                	sub    %eax,%edx
f011eb81:	89 d0                	mov    %edx,%eax
f011eb83:	3d 02 02 00 00       	cmp    $0x202,%eax
f011eb88:	74 17                	je     f011eba1 <test_kmalloc_firstfit2+0xa20>
f011eb8a:	83 ec 04             	sub    $0x4,%esp
f011eb8d:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011eb92:	68 e1 03 00 00       	push   $0x3e1
f011eb97:	68 5a b4 13 f0       	push   $0xf013b45a
f011eb9c:	e8 64 16 fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011eba1:	e8 b3 e4 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011eba6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011eba9:	e8 35 52 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011ebae:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011ebb1:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011ebb7:	83 ec 0c             	sub    $0xc,%esp
f011ebba:	50                   	push   %eax
f011ebbb:	e8 59 8f fe ff       	call   f0107b19 <kfree>
f011ebc0:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ebc3:	e8 1b 52 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011ebc8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ebcb:	74 17                	je     f011ebe4 <test_kmalloc_firstfit2+0xa63>
f011ebcd:	83 ec 04             	sub    $0x4,%esp
f011ebd0:	68 74 b4 13 f0       	push   $0xf013b474
f011ebd5:	68 e7 03 00 00       	push   $0x3e7
f011ebda:	68 5a b4 13 f0       	push   $0xf013b45a
f011ebdf:	e8 21 16 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011ebe4:	e8 70 e4 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011ebe9:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011ebec:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ebf1:	74 17                	je     f011ec0a <test_kmalloc_firstfit2+0xa89>
f011ebf3:	83 ec 04             	sub    $0x4,%esp
f011ebf6:	68 b7 b8 13 f0       	push   $0xf013b8b7
f011ebfb:	68 e8 03 00 00       	push   $0x3e8
f011ec00:	68 5a b4 13 f0       	push   $0xf013b45a
f011ec05:	e8 fb 15 fe ff       	call   f0100205 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011ec0a:	e8 4a e4 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011ec0f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ec12:	e8 cc 51 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011ec17:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011ec1a:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011ec20:	83 ec 0c             	sub    $0xc,%esp
f011ec23:	50                   	push   %eax
f011ec24:	e8 f0 8e fe ff       	call   f0107b19 <kfree>
f011ec29:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011ec2c:	e8 28 e4 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011ec31:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011ec34:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ec39:	74 17                	je     f011ec52 <test_kmalloc_firstfit2+0xad1>
f011ec3b:	83 ec 04             	sub    $0x4,%esp
f011ec3e:	68 b7 b8 13 f0       	push   $0xf013b8b7
f011ec43:	68 ee 03 00 00       	push   $0x3ee
f011ec48:	68 5a b4 13 f0       	push   $0xf013b45a
f011ec4d:	e8 b3 15 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ec52:	e8 8c 51 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011ec57:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ec5a:	74 17                	je     f011ec73 <test_kmalloc_firstfit2+0xaf2>
f011ec5c:	83 ec 04             	sub    $0x4,%esp
f011ec5f:	68 74 b4 13 f0       	push   $0xf013b474
f011ec64:	68 ef 03 00 00       	push   $0x3ef
f011ec69:	68 5a b4 13 f0       	push   $0xf013b45a
f011ec6e:	e8 92 15 fe ff       	call   f0100205 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011ec73:	e8 e1 e3 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011ec78:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ec7b:	e8 63 51 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011ec80:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011ec83:	83 ec 0c             	sub    $0xc,%esp
f011ec86:	68 00 fc 4f 00       	push   $0x4ffc00
f011ec8b:	e8 a0 8d fe ff       	call   f0107a30 <kmalloc>
f011ec90:	83 c4 10             	add    $0x10,%esp
f011ec93:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011ec99:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011ec9f:	89 c1                	mov    %eax,%ecx
f011eca1:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011eca8:	10 00 00 
f011ecab:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011ecb1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ecb6:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011ecbc:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ecc2:	ba 00 00 00 00       	mov    $0x0,%edx
f011ecc7:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011eccd:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ecd3:	29 d0                	sub    %edx,%eax
f011ecd5:	89 c3                	mov    %eax,%ebx
f011ecd7:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011ecde:	10 00 00 
f011ece1:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011ece6:	0f b6 d0             	movzbl %al,%edx
f011ece9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ecef:	01 d0                	add    %edx,%eax
f011ecf1:	48                   	dec    %eax
f011ecf2:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011ecf8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011ecfe:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed03:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011ed09:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011ed0f:	29 d0                	sub    %edx,%eax
f011ed11:	01 c3                	add    %eax,%ebx
f011ed13:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011ed1a:	10 00 00 
f011ed1d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011ed22:	0f b6 c0             	movzbl %al,%eax
f011ed25:	c1 e0 04             	shl    $0x4,%eax
f011ed28:	89 c2                	mov    %eax,%edx
f011ed2a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011ed30:	01 d0                	add    %edx,%eax
f011ed32:	48                   	dec    %eax
f011ed33:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011ed39:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ed3f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed44:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011ed4a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ed50:	29 d0                	sub    %edx,%eax
f011ed52:	01 d8                	add    %ebx,%eax
f011ed54:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011ed59:	39 c1                	cmp    %eax,%ecx
f011ed5b:	74 17                	je     f011ed74 <test_kmalloc_firstfit2+0xbf3>
f011ed5d:	83 ec 04             	sub    $0x4,%esp
f011ed60:	68 74 b8 13 f0       	push   $0xf013b874
f011ed65:	68 f5 03 00 00       	push   $0x3f5
f011ed6a:	68 5a b4 13 f0       	push   $0xf013b45a
f011ed6f:	e8 91 14 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ed74:	e8 6a 50 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011ed79:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ed7c:	74 17                	je     f011ed95 <test_kmalloc_firstfit2+0xc14>
f011ed7e:	83 ec 04             	sub    $0x4,%esp
f011ed81:	68 74 b4 13 f0       	push   $0xf013b474
f011ed86:	68 f6 03 00 00       	push   $0x3f6
f011ed8b:	68 5a b4 13 f0       	push   $0xf013b45a
f011ed90:	e8 70 14 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011ed95:	e8 bf e2 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011ed9a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ed9d:	29 c2                	sub    %eax,%edx
f011ed9f:	89 d0                	mov    %edx,%eax
f011eda1:	3d 00 05 00 00       	cmp    $0x500,%eax
f011eda6:	74 17                	je     f011edbf <test_kmalloc_firstfit2+0xc3e>
f011eda8:	83 ec 04             	sub    $0x4,%esp
f011edab:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011edb0:	68 f7 03 00 00       	push   $0x3f7
f011edb5:	68 5a b4 13 f0       	push   $0xf013b45a
f011edba:	e8 46 14 fe ff       	call   f0100205 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011edbf:	e8 95 e2 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011edc4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011edc7:	e8 17 50 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011edcc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011edcf:	83 ec 0c             	sub    $0xc,%esp
f011edd2:	68 00 fc 2f 00       	push   $0x2ffc00
f011edd7:	e8 54 8c fe ff       	call   f0107a30 <kmalloc>
f011eddc:	83 c4 10             	add    $0x10,%esp
f011eddf:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011ede5:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011edeb:	89 c1                	mov    %eax,%ecx
f011eded:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011edf4:	10 00 00 
f011edf7:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011edfd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ee02:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011ee08:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ee0e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee13:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011ee19:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011ee1f:	29 d0                	sub    %edx,%eax
f011ee21:	89 c3                	mov    %eax,%ebx
f011ee23:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011ee2a:	10 00 00 
f011ee2d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011ee32:	0f b6 d0             	movzbl %al,%edx
f011ee35:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011ee3b:	01 d0                	add    %edx,%eax
f011ee3d:	48                   	dec    %eax
f011ee3e:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011ee44:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011ee4a:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee4f:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011ee55:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011ee5b:	29 d0                	sub    %edx,%eax
f011ee5d:	01 c3                	add    %eax,%ebx
f011ee5f:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011ee66:	10 00 00 
f011ee69:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011ee6e:	0f b6 c0             	movzbl %al,%eax
f011ee71:	c1 e0 04             	shl    $0x4,%eax
f011ee74:	89 c2                	mov    %eax,%edx
f011ee76:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011ee7c:	01 d0                	add    %edx,%eax
f011ee7e:	48                   	dec    %eax
f011ee7f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011ee85:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011ee8b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee90:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011ee96:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011ee9c:	29 d0                	sub    %edx,%eax
f011ee9e:	01 d8                	add    %ebx,%eax
f011eea0:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011eea5:	39 c1                	cmp    %eax,%ecx
f011eea7:	74 17                	je     f011eec0 <test_kmalloc_firstfit2+0xd3f>
f011eea9:	83 ec 04             	sub    $0x4,%esp
f011eeac:	68 74 b8 13 f0       	push   $0xf013b874
f011eeb1:	68 05 04 00 00       	push   $0x405
f011eeb6:	68 5a b4 13 f0       	push   $0xf013b45a
f011eebb:	e8 45 13 fe ff       	call   f0100205 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011eec0:	e8 1e 4f fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011eec5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011eec8:	74 17                	je     f011eee1 <test_kmalloc_firstfit2+0xd60>
f011eeca:	83 ec 04             	sub    $0x4,%esp
f011eecd:	68 74 b4 13 f0       	push   $0xf013b474
f011eed2:	68 06 04 00 00       	push   $0x406
f011eed7:	68 5a b4 13 f0       	push   $0xf013b45a
f011eedc:	e8 24 13 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011eee1:	e8 73 e1 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011eee6:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011eee9:	29 c2                	sub    %eax,%edx
f011eeeb:	89 d0                	mov    %edx,%eax
f011eeed:	3d 00 03 00 00       	cmp    $0x300,%eax
f011eef2:	74 17                	je     f011ef0b <test_kmalloc_firstfit2+0xd8a>
f011eef4:	83 ec 04             	sub    $0x4,%esp
f011eef7:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011eefc:	68 07 04 00 00       	push   $0x407
f011ef01:	68 5a b4 13 f0       	push   $0xf013b45a
f011ef06:	e8 fa 12 fe ff       	call   f0100205 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011ef0b:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011ef12:	10 00 00 
f011ef15:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011ef1b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ef20:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011ef26:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011ef2c:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef31:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011ef37:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011ef3d:	29 d0                	sub    %edx,%eax
f011ef3f:	89 c1                	mov    %eax,%ecx
f011ef41:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011ef48:	10 00 00 
f011ef4b:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011ef50:	0f b6 d0             	movzbl %al,%edx
f011ef53:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011ef59:	01 d0                	add    %edx,%eax
f011ef5b:	48                   	dec    %eax
f011ef5c:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011ef62:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011ef68:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef6d:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011ef73:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011ef79:	29 d0                	sub    %edx,%eax
f011ef7b:	01 c1                	add    %eax,%ecx
f011ef7d:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011ef84:	10 00 00 
f011ef87:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011ef8c:	0f b6 c0             	movzbl %al,%eax
f011ef8f:	c1 e0 04             	shl    $0x4,%eax
f011ef92:	89 c2                	mov    %eax,%edx
f011ef94:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011ef9a:	01 d0                	add    %edx,%eax
f011ef9c:	48                   	dec    %eax
f011ef9d:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011efa3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011efa9:	ba 00 00 00 00       	mov    $0x0,%edx
f011efae:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011efb4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011efba:	29 d0                	sub    %edx,%eax
f011efbc:	01 c8                	add    %ecx,%eax
f011efbe:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011efc3:	29 c2                	sub    %eax,%edx
f011efc5:	89 d0                	mov    %edx,%eax
f011efc7:	83 ec 0c             	sub    $0xc,%esp
f011efca:	50                   	push   %eax
f011efcb:	e8 60 8a fe ff       	call   f0107a30 <kmalloc>
f011efd0:	83 c4 10             	add    $0x10,%esp
f011efd3:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011efd9:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011efdf:	85 c0                	test   %eax,%eax
f011efe1:	74 17                	je     f011effa <test_kmalloc_firstfit2+0xe79>
f011efe3:	83 ec 04             	sub    $0x4,%esp
f011efe6:	68 a4 b9 13 f0       	push   $0xf013b9a4
f011efeb:	68 0d 04 00 00       	push   $0x40d
f011eff0:	68 5a b4 13 f0       	push   $0xf013b45a
f011eff5:	e8 0b 12 fe ff       	call   f0100205 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011effa:	83 ec 0c             	sub    $0xc,%esp
f011effd:	68 e4 ba 13 f0       	push   $0xf013bae4
f011f002:	e8 07 1d fe ff       	call   f0100d0e <cprintf>
f011f007:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011f00a:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011f00f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011f012:	5b                   	pop    %ebx
f011f013:	5f                   	pop    %edi
f011f014:	5d                   	pop    %ebp
f011f015:	c3                   	ret    

f011f016 <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011f016:	55                   	push   %ebp
f011f017:	89 e5                	mov    %esp,%ebp
f011f019:	57                   	push   %edi
f011f01a:	53                   	push   %ebx
f011f01b:	81 ec 50 04 00 00    	sub    $0x450,%esp
	cprintf("==============================================\n");
f011f021:	83 ec 0c             	sub    $0xc,%esp
f011f024:	68 9c b3 13 f0       	push   $0xf013b39c
f011f029:	e8 e0 1c fe ff       	call   f0100d0e <cprintf>
f011f02e:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011f031:	83 ec 0c             	sub    $0xc,%esp
f011f034:	68 cc b3 13 f0       	push   $0xf013b3cc
f011f039:	e8 d0 1c fe ff       	call   f0100d0e <cprintf>
f011f03e:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011f041:	83 ec 0c             	sub    $0xc,%esp
f011f044:	68 9c b3 13 f0       	push   $0xf013b39c
f011f049:	e8 c0 1c fe ff       	call   f0100d0e <cprintf>
f011f04e:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011f051:	8d 95 b4 fb ff ff    	lea    -0x44c(%ebp),%edx
f011f057:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011f05c:	b8 00 00 00 00       	mov    $0x0,%eax
f011f061:	89 d7                	mov    %edx,%edi
f011f063:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011f065:	e8 ef df fe ff       	call   f010d059 <sys_calculate_free_frames>
f011f06a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011f06d:	e8 71 4d fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011f072:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011f075:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011f07c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f083:	eb 1f                	jmp    f011f0a4 <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011f085:	83 ec 0c             	sub    $0xc,%esp
f011f088:	68 00 00 20 00       	push   $0x200000
f011f08d:	e8 9e 89 fe ff       	call   f0107a30 <kmalloc>
f011f092:	83 c4 10             	add    $0x10,%esp
f011f095:	89 c2                	mov    %eax,%edx
f011f097:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011f09a:	89 94 85 b4 fb ff ff 	mov    %edx,-0x44c(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011f0a1:	ff 45 f4             	incl   -0xc(%ebp)
f011f0a4:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011f0a8:	7e db                	jle    f011f085 <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011f0aa:	83 ec 0c             	sub    $0xc,%esp
f011f0ad:	68 00 b0 1f 00       	push   $0x1fb000
f011f0b2:	e8 79 89 fe ff       	call   f0107a30 <kmalloc>
f011f0b7:	83 c4 10             	add    $0x10,%esp
f011f0ba:	89 85 f0 fc ff ff    	mov    %eax,-0x310(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011f0c0:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011f0c6:	89 c1                	mov    %eax,%ecx
f011f0c8:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011f0cf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011f0d2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f0d7:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011f0da:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011f0dd:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0e2:	f7 75 e4             	divl   -0x1c(%ebp)
f011f0e5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011f0e8:	29 d0                	sub    %edx,%eax
f011f0ea:	89 c3                	mov    %eax,%ebx
f011f0ec:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011f0f3:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011f0f8:	0f b6 d0             	movzbl %al,%edx
f011f0fb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011f0fe:	01 d0                	add    %edx,%eax
f011f100:	48                   	dec    %eax
f011f101:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011f104:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011f107:	ba 00 00 00 00       	mov    $0x0,%edx
f011f10c:	f7 75 dc             	divl   -0x24(%ebp)
f011f10f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011f112:	29 d0                	sub    %edx,%eax
f011f114:	01 c3                	add    %eax,%ebx
f011f116:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011f11d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011f122:	0f b6 c0             	movzbl %al,%eax
f011f125:	c1 e0 04             	shl    $0x4,%eax
f011f128:	89 c2                	mov    %eax,%edx
f011f12a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011f12d:	01 d0                	add    %edx,%eax
f011f12f:	48                   	dec    %eax
f011f130:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011f133:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011f136:	ba 00 00 00 00       	mov    $0x0,%edx
f011f13b:	f7 75 d4             	divl   -0x2c(%ebp)
f011f13e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011f141:	29 d0                	sub    %edx,%eax
f011f143:	01 d8                	add    %ebx,%eax
f011f145:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011f14a:	39 c1                	cmp    %eax,%ecx
f011f14c:	0f 85 c0 04 00 00    	jne    f011f612 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011f152:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011f158:	89 c1                	mov    %eax,%ecx
f011f15a:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011f161:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011f164:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f169:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011f16c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011f16f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f174:	f7 75 cc             	divl   -0x34(%ebp)
f011f177:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011f17a:	29 d0                	sub    %edx,%eax
f011f17c:	89 c3                	mov    %eax,%ebx
f011f17e:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011f185:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011f18a:	0f b6 d0             	movzbl %al,%edx
f011f18d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f190:	01 d0                	add    %edx,%eax
f011f192:	48                   	dec    %eax
f011f193:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011f196:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011f199:	ba 00 00 00 00       	mov    $0x0,%edx
f011f19e:	f7 75 c4             	divl   -0x3c(%ebp)
f011f1a1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011f1a4:	29 d0                	sub    %edx,%eax
f011f1a6:	01 c3                	add    %eax,%ebx
f011f1a8:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011f1af:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011f1b4:	0f b6 c0             	movzbl %al,%eax
f011f1b7:	c1 e0 04             	shl    $0x4,%eax
f011f1ba:	89 c2                	mov    %eax,%edx
f011f1bc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f1bf:	01 d0                	add    %edx,%eax
f011f1c1:	48                   	dec    %eax
f011f1c2:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011f1c5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011f1c8:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1cd:	f7 75 bc             	divl   -0x44(%ebp)
f011f1d0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011f1d3:	29 d0                	sub    %edx,%eax
f011f1d5:	01 d8                	add    %ebx,%eax
f011f1d7:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011f1dc:	39 c1                	cmp    %eax,%ecx
f011f1de:	0f 85 2e 04 00 00    	jne    f011f612 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011f1e4:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
f011f1ea:	89 c1                	mov    %eax,%ecx
f011f1ec:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011f1f3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f1f6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f1fb:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011f1fe:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f201:	ba 00 00 00 00       	mov    $0x0,%edx
f011f206:	f7 75 b4             	divl   -0x4c(%ebp)
f011f209:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f20c:	29 d0                	sub    %edx,%eax
f011f20e:	89 c3                	mov    %eax,%ebx
f011f210:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011f217:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011f21c:	0f b6 d0             	movzbl %al,%edx
f011f21f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f222:	01 d0                	add    %edx,%eax
f011f224:	48                   	dec    %eax
f011f225:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011f228:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f22b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f230:	f7 75 ac             	divl   -0x54(%ebp)
f011f233:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f236:	29 d0                	sub    %edx,%eax
f011f238:	01 c3                	add    %eax,%ebx
f011f23a:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011f241:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011f246:	0f b6 c0             	movzbl %al,%eax
f011f249:	c1 e0 04             	shl    $0x4,%eax
f011f24c:	89 c2                	mov    %eax,%edx
f011f24e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f251:	01 d0                	add    %edx,%eax
f011f253:	48                   	dec    %eax
f011f254:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011f257:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f25a:	ba 00 00 00 00       	mov    $0x0,%edx
f011f25f:	f7 75 a4             	divl   -0x5c(%ebp)
f011f262:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f265:	29 d0                	sub    %edx,%eax
f011f267:	01 d8                	add    %ebx,%eax
f011f269:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011f26e:	39 c1                	cmp    %eax,%ecx
f011f270:	0f 85 9c 03 00 00    	jne    f011f612 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011f276:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011f27c:	89 c1                	mov    %eax,%ecx
f011f27e:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011f285:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f288:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f28d:	89 45 98             	mov    %eax,-0x68(%ebp)
f011f290:	8b 45 98             	mov    -0x68(%ebp),%eax
f011f293:	ba 00 00 00 00       	mov    $0x0,%edx
f011f298:	f7 75 9c             	divl   -0x64(%ebp)
f011f29b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011f29e:	29 d0                	sub    %edx,%eax
f011f2a0:	89 c3                	mov    %eax,%ebx
f011f2a2:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011f2a9:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011f2ae:	0f b6 d0             	movzbl %al,%edx
f011f2b1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011f2b4:	01 d0                	add    %edx,%eax
f011f2b6:	48                   	dec    %eax
f011f2b7:	89 45 90             	mov    %eax,-0x70(%ebp)
f011f2ba:	8b 45 90             	mov    -0x70(%ebp),%eax
f011f2bd:	ba 00 00 00 00       	mov    $0x0,%edx
f011f2c2:	f7 75 94             	divl   -0x6c(%ebp)
f011f2c5:	8b 45 90             	mov    -0x70(%ebp),%eax
f011f2c8:	29 d0                	sub    %edx,%eax
f011f2ca:	01 c3                	add    %eax,%ebx
f011f2cc:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011f2d3:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011f2d8:	0f b6 c0             	movzbl %al,%eax
f011f2db:	c1 e0 04             	shl    $0x4,%eax
f011f2de:	89 c2                	mov    %eax,%edx
f011f2e0:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011f2e3:	01 d0                	add    %edx,%eax
f011f2e5:	48                   	dec    %eax
f011f2e6:	89 45 88             	mov    %eax,-0x78(%ebp)
f011f2e9:	8b 45 88             	mov    -0x78(%ebp),%eax
f011f2ec:	ba 00 00 00 00       	mov    $0x0,%edx
f011f2f1:	f7 75 8c             	divl   -0x74(%ebp)
f011f2f4:	8b 45 88             	mov    -0x78(%ebp),%eax
f011f2f7:	29 d0                	sub    %edx,%eax
f011f2f9:	01 d8                	add    %ebx,%eax
f011f2fb:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011f300:	39 c1                	cmp    %eax,%ecx
f011f302:	0f 85 0a 03 00 00    	jne    f011f612 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011f308:	8b 85 f0 fb ff ff    	mov    -0x410(%ebp),%eax
f011f30e:	89 c1                	mov    %eax,%ecx
f011f310:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011f317:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011f31a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f31f:	89 45 80             	mov    %eax,-0x80(%ebp)
f011f322:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f325:	ba 00 00 00 00       	mov    $0x0,%edx
f011f32a:	f7 75 84             	divl   -0x7c(%ebp)
f011f32d:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f330:	29 d0                	sub    %edx,%eax
f011f332:	89 c3                	mov    %eax,%ebx
f011f334:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011f33b:	10 00 00 
f011f33e:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011f343:	0f b6 d0             	movzbl %al,%edx
f011f346:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011f34c:	01 d0                	add    %edx,%eax
f011f34e:	48                   	dec    %eax
f011f34f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011f355:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011f35b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f360:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011f366:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011f36c:	29 d0                	sub    %edx,%eax
f011f36e:	01 c3                	add    %eax,%ebx
f011f370:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011f377:	10 00 00 
f011f37a:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011f37f:	0f b6 c0             	movzbl %al,%eax
f011f382:	c1 e0 04             	shl    $0x4,%eax
f011f385:	89 c2                	mov    %eax,%edx
f011f387:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011f38d:	01 d0                	add    %edx,%eax
f011f38f:	48                   	dec    %eax
f011f390:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011f396:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011f39c:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3a1:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011f3a7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011f3ad:	29 d0                	sub    %edx,%eax
f011f3af:	01 d8                	add    %ebx,%eax
f011f3b1:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011f3b6:	39 c1                	cmp    %eax,%ecx
f011f3b8:	0f 85 54 02 00 00    	jne    f011f612 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011f3be:	8b 85 04 fc ff ff    	mov    -0x3fc(%ebp),%eax
f011f3c4:	89 c1                	mov    %eax,%ecx
f011f3c6:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011f3cd:	10 00 00 
f011f3d0:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011f3d6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f3db:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011f3e1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011f3e7:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3ec:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011f3f2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011f3f8:	29 d0                	sub    %edx,%eax
f011f3fa:	89 c3                	mov    %eax,%ebx
f011f3fc:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011f403:	10 00 00 
f011f406:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011f40b:	0f b6 d0             	movzbl %al,%edx
f011f40e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f414:	01 d0                	add    %edx,%eax
f011f416:	48                   	dec    %eax
f011f417:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011f41d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f423:	ba 00 00 00 00       	mov    $0x0,%edx
f011f428:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011f42e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f434:	29 d0                	sub    %edx,%eax
f011f436:	01 c3                	add    %eax,%ebx
f011f438:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011f43f:	10 00 00 
f011f442:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011f447:	0f b6 c0             	movzbl %al,%eax
f011f44a:	c1 e0 04             	shl    $0x4,%eax
f011f44d:	89 c2                	mov    %eax,%edx
f011f44f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011f455:	01 d0                	add    %edx,%eax
f011f457:	48                   	dec    %eax
f011f458:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011f45e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f464:	ba 00 00 00 00       	mov    $0x0,%edx
f011f469:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011f46f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f475:	29 d0                	sub    %edx,%eax
f011f477:	01 d8                	add    %ebx,%eax
f011f479:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011f47e:	39 c1                	cmp    %eax,%ecx
f011f480:	0f 85 8c 01 00 00    	jne    f011f612 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011f486:	8b 85 7c fc ff ff    	mov    -0x384(%ebp),%eax
f011f48c:	89 c1                	mov    %eax,%ecx
f011f48e:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011f495:	10 00 00 
f011f498:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011f49e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f4a3:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011f4a9:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f4af:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4b4:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011f4ba:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f4c0:	29 d0                	sub    %edx,%eax
f011f4c2:	89 c3                	mov    %eax,%ebx
f011f4c4:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011f4cb:	10 00 00 
f011f4ce:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011f4d3:	0f b6 d0             	movzbl %al,%edx
f011f4d6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011f4dc:	01 d0                	add    %edx,%eax
f011f4de:	48                   	dec    %eax
f011f4df:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011f4e5:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f4eb:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4f0:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011f4f6:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f4fc:	29 d0                	sub    %edx,%eax
f011f4fe:	01 c3                	add    %eax,%ebx
f011f500:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011f507:	10 00 00 
f011f50a:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011f50f:	0f b6 c0             	movzbl %al,%eax
f011f512:	c1 e0 04             	shl    $0x4,%eax
f011f515:	89 c2                	mov    %eax,%edx
f011f517:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011f51d:	01 d0                	add    %edx,%eax
f011f51f:	48                   	dec    %eax
f011f520:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011f526:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f52c:	ba 00 00 00 00       	mov    $0x0,%edx
f011f531:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011f537:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f53d:	29 d0                	sub    %edx,%eax
f011f53f:	01 d8                	add    %ebx,%eax
f011f541:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011f546:	39 c1                	cmp    %eax,%ecx
f011f548:	0f 85 c4 00 00 00    	jne    f011f612 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011f54e:	8b 85 f0 fc ff ff    	mov    -0x310(%ebp),%eax
f011f554:	89 c1                	mov    %eax,%ecx
f011f556:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011f55d:	10 00 00 
f011f560:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011f566:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f56b:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011f571:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011f577:	ba 00 00 00 00       	mov    $0x0,%edx
f011f57c:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011f582:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011f588:	29 d0                	sub    %edx,%eax
f011f58a:	89 c3                	mov    %eax,%ebx
f011f58c:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011f593:	10 00 00 
f011f596:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011f59b:	0f b6 d0             	movzbl %al,%edx
f011f59e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011f5a4:	01 d0                	add    %edx,%eax
f011f5a6:	48                   	dec    %eax
f011f5a7:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011f5ad:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011f5b3:	ba 00 00 00 00       	mov    $0x0,%edx
f011f5b8:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011f5be:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011f5c4:	29 d0                	sub    %edx,%eax
f011f5c6:	01 c3                	add    %eax,%ebx
f011f5c8:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011f5cf:	10 00 00 
f011f5d2:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011f5d7:	0f b6 c0             	movzbl %al,%eax
f011f5da:	c1 e0 04             	shl    $0x4,%eax
f011f5dd:	89 c2                	mov    %eax,%edx
f011f5df:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011f5e5:	01 d0                	add    %edx,%eax
f011f5e7:	48                   	dec    %eax
f011f5e8:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011f5ee:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011f5f4:	ba 00 00 00 00       	mov    $0x0,%edx
f011f5f9:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011f5ff:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011f605:	29 d0                	sub    %edx,%eax
f011f607:	01 d8                	add    %ebx,%eax
f011f609:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011f60e:	39 c1                	cmp    %eax,%ecx
f011f610:	74 17                	je     f011f629 <test_kmalloc_worstfit+0x613>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011f612:	83 ec 04             	sub    $0x4,%esp
f011f615:	68 30 bb 13 f0       	push   $0xf013bb30
f011f61a:	68 31 04 00 00       	push   $0x431
f011f61f:	68 5a b4 13 f0       	push   $0xf013b45a
f011f624:	e8 dc 0b fe ff       	call   f0100205 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f629:	e8 b5 47 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011f62e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f631:	74 17                	je     f011f64a <test_kmalloc_worstfit+0x634>
f011f633:	83 ec 04             	sub    $0x4,%esp
f011f636:	68 74 b4 13 f0       	push   $0xf013b474
f011f63b:	68 33 04 00 00       	push   $0x433
f011f640:	68 5a b4 13 f0       	push   $0xf013b45a
f011f645:	e8 bb 0b fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011f64a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f64d:	e8 07 da fe ff       	call   f010d059 <sys_calculate_free_frames>
f011f652:	29 c3                	sub    %eax,%ebx
f011f654:	89 d8                	mov    %ebx,%eax
f011f656:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011f65b:	74 17                	je     f011f674 <test_kmalloc_worstfit+0x65e>
f011f65d:	83 ec 04             	sub    $0x4,%esp
f011f660:	68 17 b7 13 f0       	push   $0xf013b717
f011f665:	68 34 04 00 00       	push   $0x434
f011f66a:	68 5a b4 13 f0       	push   $0xf013b45a
f011f66f:	e8 91 0b fe ff       	call   f0100205 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011f674:	e8 e0 d9 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011f679:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011f67c:	e8 62 47 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011f681:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011f684:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011f68a:	83 ec 0c             	sub    $0xc,%esp
f011f68d:	50                   	push   %eax
f011f68e:	e8 86 84 fe ff       	call   f0107b19 <kfree>
f011f693:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011f696:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011f69c:	83 ec 0c             	sub    $0xc,%esp
f011f69f:	50                   	push   %eax
f011f6a0:	e8 74 84 fe ff       	call   f0107b19 <kfree>
f011f6a5:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011f6a8:	8b 85 c0 fb ff ff    	mov    -0x440(%ebp),%eax
f011f6ae:	83 ec 0c             	sub    $0xc,%esp
f011f6b1:	50                   	push   %eax
f011f6b2:	e8 62 84 fe ff       	call   f0107b19 <kfree>
f011f6b7:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011f6ba:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011f6c0:	83 ec 0c             	sub    $0xc,%esp
f011f6c3:	50                   	push   %eax
f011f6c4:	e8 50 84 fe ff       	call   f0107b19 <kfree>
f011f6c9:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011f6cc:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
f011f6d2:	83 ec 0c             	sub    $0xc,%esp
f011f6d5:	50                   	push   %eax
f011f6d6:	e8 3e 84 fe ff       	call   f0107b19 <kfree>
f011f6db:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011f6de:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
f011f6e4:	83 ec 0c             	sub    $0xc,%esp
f011f6e7:	50                   	push   %eax
f011f6e8:	e8 2c 84 fe ff       	call   f0107b19 <kfree>
f011f6ed:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011f6f0:	8b 85 2c fc ff ff    	mov    -0x3d4(%ebp),%eax
f011f6f6:	83 ec 0c             	sub    $0xc,%esp
f011f6f9:	50                   	push   %eax
f011f6fa:	e8 1a 84 fe ff       	call   f0107b19 <kfree>
f011f6ff:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011f702:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f011f708:	83 ec 0c             	sub    $0xc,%esp
f011f70b:	50                   	push   %eax
f011f70c:	e8 08 84 fe ff       	call   f0107b19 <kfree>
f011f711:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011f714:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f011f71a:	83 ec 0c             	sub    $0xc,%esp
f011f71d:	50                   	push   %eax
f011f71e:	e8 f6 83 fe ff       	call   f0107b19 <kfree>
f011f723:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011f726:	8b 85 38 fc ff ff    	mov    -0x3c8(%ebp),%eax
f011f72c:	83 ec 0c             	sub    $0xc,%esp
f011f72f:	50                   	push   %eax
f011f730:	e8 e4 83 fe ff       	call   f0107b19 <kfree>
f011f735:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011f738:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f011f73e:	83 ec 0c             	sub    $0xc,%esp
f011f741:	50                   	push   %eax
f011f742:	e8 d2 83 fe ff       	call   f0107b19 <kfree>
f011f747:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011f74a:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011f750:	83 ec 0c             	sub    $0xc,%esp
f011f753:	50                   	push   %eax
f011f754:	e8 c0 83 fe ff       	call   f0107b19 <kfree>
f011f759:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011f75c:	8b 85 d0 fc ff ff    	mov    -0x330(%ebp),%eax
f011f762:	83 ec 0c             	sub    $0xc,%esp
f011f765:	50                   	push   %eax
f011f766:	e8 ae 83 fe ff       	call   f0107b19 <kfree>
f011f76b:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011f76e:	8b 85 d4 fc ff ff    	mov    -0x32c(%ebp),%eax
f011f774:	83 ec 0c             	sub    $0xc,%esp
f011f777:	50                   	push   %eax
f011f778:	e8 9c 83 fe ff       	call   f0107b19 <kfree>
f011f77d:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011f780:	8b 85 d8 fc ff ff    	mov    -0x328(%ebp),%eax
f011f786:	83 ec 0c             	sub    $0xc,%esp
f011f789:	50                   	push   %eax
f011f78a:	e8 8a 83 fe ff       	call   f0107b19 <kfree>
f011f78f:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f792:	e8 4c 46 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011f797:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f79a:	74 17                	je     f011f7b3 <test_kmalloc_worstfit+0x79d>
f011f79c:	83 ec 04             	sub    $0x4,%esp
f011f79f:	68 74 b4 13 f0       	push   $0xf013b474
f011f7a4:	68 4a 04 00 00       	push   $0x44a
f011f7a9:	68 5a b4 13 f0       	push   $0xf013b45a
f011f7ae:	e8 52 0a fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011f7b3:	e8 a1 d8 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011f7b8:	89 c2                	mov    %eax,%edx
f011f7ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f7bd:	29 c2                	sub    %eax,%edx
f011f7bf:	89 d0                	mov    %edx,%eax
f011f7c1:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011f7c6:	74 17                	je     f011f7df <test_kmalloc_worstfit+0x7c9>
f011f7c8:	83 ec 04             	sub    $0x4,%esp
f011f7cb:	68 28 b7 13 f0       	push   $0xf013b728
f011f7d0:	68 4b 04 00 00       	push   $0x44b
f011f7d5:	68 5a b4 13 f0       	push   $0xf013b45a
f011f7da:	e8 26 0a fe ff       	call   f0100205 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011f7df:	e8 75 d8 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011f7e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f7e7:	e8 f7 45 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011f7ec:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011f7ef:	83 ec 0c             	sub    $0xc,%esp
f011f7f2:	68 00 00 10 00       	push   $0x100000
f011f7f7:	e8 34 82 fe ff       	call   f0107a30 <kmalloc>
f011f7fc:	83 c4 10             	add    $0x10,%esp
f011f7ff:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011f805:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011f80c:	10 00 00 
f011f80f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011f815:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f81a:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011f820:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f826:	ba 00 00 00 00       	mov    $0x0,%edx
f011f82b:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011f831:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f837:	29 d0                	sub    %edx,%eax
f011f839:	89 c1                	mov    %eax,%ecx
f011f83b:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011f842:	10 00 00 
f011f845:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011f84a:	0f b6 d0             	movzbl %al,%edx
f011f84d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011f853:	01 d0                	add    %edx,%eax
f011f855:	48                   	dec    %eax
f011f856:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011f85c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f862:	ba 00 00 00 00       	mov    $0x0,%edx
f011f867:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011f86d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f873:	29 d0                	sub    %edx,%eax
f011f875:	01 c1                	add    %eax,%ecx
f011f877:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011f87e:	10 00 00 
f011f881:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011f886:	0f b6 c0             	movzbl %al,%eax
f011f889:	c1 e0 04             	shl    $0x4,%eax
f011f88c:	89 c2                	mov    %eax,%edx
f011f88e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f894:	01 d0                	add    %edx,%eax
f011f896:	48                   	dec    %eax
f011f897:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011f89d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f8a3:	ba 00 00 00 00       	mov    $0x0,%edx
f011f8a8:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011f8ae:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f8b4:	29 d0                	sub    %edx,%eax
f011f8b6:	01 c8                	add    %ecx,%eax
f011f8b8:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011f8be:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f8c4:	39 c2                	cmp    %eax,%edx
f011f8c6:	74 17                	je     f011f8df <test_kmalloc_worstfit+0x8c9>
		panic("Worst Fit not working correctly");
f011f8c8:	83 ec 04             	sub    $0x4,%esp
f011f8cb:	68 74 bb 13 f0       	push   $0xf013bb74
f011f8d0:	68 52 04 00 00       	push   $0x452
f011f8d5:	68 5a b4 13 f0       	push   $0xf013b45a
f011f8da:	e8 26 09 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f8df:	e8 ff 44 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011f8e4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f8e7:	74 17                	je     f011f900 <test_kmalloc_worstfit+0x8ea>
f011f8e9:	83 ec 04             	sub    $0x4,%esp
f011f8ec:	68 74 b4 13 f0       	push   $0xf013b474
f011f8f1:	68 53 04 00 00       	push   $0x453
f011f8f6:	68 5a b4 13 f0       	push   $0xf013b45a
f011f8fb:	e8 05 09 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f900:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f903:	e8 51 d7 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011f908:	29 c3                	sub    %eax,%ebx
f011f90a:	89 d8                	mov    %ebx,%eax
f011f90c:	3d 00 01 00 00       	cmp    $0x100,%eax
f011f911:	74 17                	je     f011f92a <test_kmalloc_worstfit+0x914>
f011f913:	83 ec 04             	sub    $0x4,%esp
f011f916:	68 92 b9 13 f0       	push   $0xf013b992
f011f91b:	68 54 04 00 00       	push   $0x454
f011f920:	68 5a b4 13 f0       	push   $0xf013b45a
f011f925:	e8 db 08 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f92a:	ff 45 e8             	incl   -0x18(%ebp)
f011f92d:	83 ec 08             	sub    $0x8,%esp
f011f930:	ff 75 e8             	pushl  -0x18(%ebp)
f011f933:	68 94 bb 13 f0       	push   $0xf013bb94
f011f938:	e8 d1 13 fe ff       	call   f0100d0e <cprintf>
f011f93d:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f940:	e8 14 d7 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011f945:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f948:	e8 96 44 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011f94d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011f950:	83 ec 0c             	sub    $0xc,%esp
f011f953:	68 00 00 40 00       	push   $0x400000
f011f958:	e8 d3 80 fe ff       	call   f0107a30 <kmalloc>
f011f95d:	83 c4 10             	add    $0x10,%esp
f011f960:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011f966:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011f96d:	10 00 00 
f011f970:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f976:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f97b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011f981:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f987:	ba 00 00 00 00       	mov    $0x0,%edx
f011f98c:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011f992:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f998:	29 d0                	sub    %edx,%eax
f011f99a:	89 c1                	mov    %eax,%ecx
f011f99c:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011f9a3:	10 00 00 
f011f9a6:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011f9ab:	0f b6 d0             	movzbl %al,%edx
f011f9ae:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011f9b4:	01 d0                	add    %edx,%eax
f011f9b6:	48                   	dec    %eax
f011f9b7:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011f9bd:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f9c3:	ba 00 00 00 00       	mov    $0x0,%edx
f011f9c8:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011f9ce:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f9d4:	29 d0                	sub    %edx,%eax
f011f9d6:	01 c1                	add    %eax,%ecx
f011f9d8:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011f9df:	10 00 00 
f011f9e2:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011f9e7:	0f b6 c0             	movzbl %al,%eax
f011f9ea:	c1 e0 04             	shl    $0x4,%eax
f011f9ed:	89 c2                	mov    %eax,%edx
f011f9ef:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011f9f5:	01 d0                	add    %edx,%eax
f011f9f7:	48                   	dec    %eax
f011f9f8:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011f9fe:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011fa04:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa09:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011fa0f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011fa15:	29 d0                	sub    %edx,%eax
f011fa17:	01 c8                	add    %ecx,%eax
f011fa19:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011fa1f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fa25:	39 c2                	cmp    %eax,%edx
f011fa27:	74 17                	je     f011fa40 <test_kmalloc_worstfit+0xa2a>
		panic("Worst Fit not working correctly");
f011fa29:	83 ec 04             	sub    $0x4,%esp
f011fa2c:	68 74 bb 13 f0       	push   $0xf013bb74
f011fa31:	68 5b 04 00 00       	push   $0x45b
f011fa36:	68 5a b4 13 f0       	push   $0xf013b45a
f011fa3b:	e8 c5 07 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fa40:	e8 9e 43 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011fa45:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fa48:	74 17                	je     f011fa61 <test_kmalloc_worstfit+0xa4b>
f011fa4a:	83 ec 04             	sub    $0x4,%esp
f011fa4d:	68 74 b4 13 f0       	push   $0xf013b474
f011fa52:	68 5c 04 00 00       	push   $0x45c
f011fa57:	68 5a b4 13 f0       	push   $0xf013b45a
f011fa5c:	e8 a4 07 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011fa61:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fa64:	e8 f0 d5 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011fa69:	29 c3                	sub    %eax,%ebx
f011fa6b:	89 d8                	mov    %ebx,%eax
f011fa6d:	3d 00 04 00 00       	cmp    $0x400,%eax
f011fa72:	74 17                	je     f011fa8b <test_kmalloc_worstfit+0xa75>
f011fa74:	83 ec 04             	sub    $0x4,%esp
f011fa77:	68 92 b9 13 f0       	push   $0xf013b992
f011fa7c:	68 5d 04 00 00       	push   $0x45d
f011fa81:	68 5a b4 13 f0       	push   $0xf013b45a
f011fa86:	e8 7a 07 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fa8b:	ff 45 e8             	incl   -0x18(%ebp)
f011fa8e:	83 ec 08             	sub    $0x8,%esp
f011fa91:	ff 75 e8             	pushl  -0x18(%ebp)
f011fa94:	68 94 bb 13 f0       	push   $0xf013bb94
f011fa99:	e8 70 12 fe ff       	call   f0100d0e <cprintf>
f011fa9e:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011faa1:	e8 b3 d5 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011faa6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011faa9:	e8 35 43 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011faae:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011fab1:	83 ec 0c             	sub    $0xc,%esp
f011fab4:	68 00 00 60 00       	push   $0x600000
f011fab9:	e8 72 7f fe ff       	call   f0107a30 <kmalloc>
f011fabe:	83 c4 10             	add    $0x10,%esp
f011fac1:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011fac7:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011face:	10 00 00 
f011fad1:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011fad7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fadc:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011fae2:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011fae8:	ba 00 00 00 00       	mov    $0x0,%edx
f011faed:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011faf3:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011faf9:	29 d0                	sub    %edx,%eax
f011fafb:	89 c1                	mov    %eax,%ecx
f011fafd:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011fb04:	10 00 00 
f011fb07:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011fb0c:	0f b6 d0             	movzbl %al,%edx
f011fb0f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011fb15:	01 d0                	add    %edx,%eax
f011fb17:	48                   	dec    %eax
f011fb18:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011fb1e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011fb24:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb29:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011fb2f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011fb35:	29 d0                	sub    %edx,%eax
f011fb37:	01 c1                	add    %eax,%ecx
f011fb39:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011fb40:	10 00 00 
f011fb43:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011fb48:	0f b6 c0             	movzbl %al,%eax
f011fb4b:	c1 e0 04             	shl    $0x4,%eax
f011fb4e:	89 c2                	mov    %eax,%edx
f011fb50:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011fb56:	01 d0                	add    %edx,%eax
f011fb58:	48                   	dec    %eax
f011fb59:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011fb5f:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011fb65:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb6a:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011fb70:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011fb76:	29 d0                	sub    %edx,%eax
f011fb78:	01 c8                	add    %ecx,%eax
f011fb7a:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011fb80:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fb86:	39 c2                	cmp    %eax,%edx
f011fb88:	74 17                	je     f011fba1 <test_kmalloc_worstfit+0xb8b>
		panic("Worst Fit not working correctly");
f011fb8a:	83 ec 04             	sub    $0x4,%esp
f011fb8d:	68 74 bb 13 f0       	push   $0xf013bb74
f011fb92:	68 64 04 00 00       	push   $0x464
f011fb97:	68 5a b4 13 f0       	push   $0xf013b45a
f011fb9c:	e8 64 06 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fba1:	e8 3d 42 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011fba6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fba9:	74 17                	je     f011fbc2 <test_kmalloc_worstfit+0xbac>
f011fbab:	83 ec 04             	sub    $0x4,%esp
f011fbae:	68 74 b4 13 f0       	push   $0xf013b474
f011fbb3:	68 65 04 00 00       	push   $0x465
f011fbb8:	68 5a b4 13 f0       	push   $0xf013b45a
f011fbbd:	e8 43 06 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011fbc2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fbc5:	e8 8f d4 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011fbca:	29 c3                	sub    %eax,%ebx
f011fbcc:	89 d8                	mov    %ebx,%eax
f011fbce:	3d 00 06 00 00       	cmp    $0x600,%eax
f011fbd3:	74 17                	je     f011fbec <test_kmalloc_worstfit+0xbd6>
f011fbd5:	83 ec 04             	sub    $0x4,%esp
f011fbd8:	68 92 b9 13 f0       	push   $0xf013b992
f011fbdd:	68 66 04 00 00       	push   $0x466
f011fbe2:	68 5a b4 13 f0       	push   $0xf013b45a
f011fbe7:	e8 19 06 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fbec:	ff 45 e8             	incl   -0x18(%ebp)
f011fbef:	83 ec 08             	sub    $0x8,%esp
f011fbf2:	ff 75 e8             	pushl  -0x18(%ebp)
f011fbf5:	68 94 bb 13 f0       	push   $0xf013bb94
f011fbfa:	e8 0f 11 fe ff       	call   f0100d0e <cprintf>
f011fbff:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fc02:	e8 52 d4 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011fc07:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fc0a:	e8 d4 41 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011fc0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011fc12:	83 ec 0c             	sub    $0xc,%esp
f011fc15:	68 00 00 50 00       	push   $0x500000
f011fc1a:	e8 11 7e fe ff       	call   f0107a30 <kmalloc>
f011fc1f:	83 c4 10             	add    $0x10,%esp
f011fc22:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011fc28:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011fc2f:	10 00 00 
f011fc32:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011fc38:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fc3d:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011fc43:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011fc49:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc4e:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011fc54:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011fc5a:	29 d0                	sub    %edx,%eax
f011fc5c:	89 c1                	mov    %eax,%ecx
f011fc5e:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011fc65:	10 00 00 
f011fc68:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011fc6d:	0f b6 d0             	movzbl %al,%edx
f011fc70:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011fc76:	01 d0                	add    %edx,%eax
f011fc78:	48                   	dec    %eax
f011fc79:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011fc7f:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011fc85:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc8a:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011fc90:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011fc96:	29 d0                	sub    %edx,%eax
f011fc98:	01 c1                	add    %eax,%ecx
f011fc9a:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011fca1:	10 00 00 
f011fca4:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011fca9:	0f b6 c0             	movzbl %al,%eax
f011fcac:	c1 e0 04             	shl    $0x4,%eax
f011fcaf:	89 c2                	mov    %eax,%edx
f011fcb1:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011fcb7:	01 d0                	add    %edx,%eax
f011fcb9:	48                   	dec    %eax
f011fcba:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011fcc0:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011fcc6:	ba 00 00 00 00       	mov    $0x0,%edx
f011fccb:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011fcd1:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011fcd7:	29 d0                	sub    %edx,%eax
f011fcd9:	01 c8                	add    %ecx,%eax
f011fcdb:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011fce1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fce7:	39 c2                	cmp    %eax,%edx
f011fce9:	74 17                	je     f011fd02 <test_kmalloc_worstfit+0xcec>
		panic("Worst Fit not working correctly");
f011fceb:	83 ec 04             	sub    $0x4,%esp
f011fcee:	68 74 bb 13 f0       	push   $0xf013bb74
f011fcf3:	68 6d 04 00 00       	push   $0x46d
f011fcf8:	68 5a b4 13 f0       	push   $0xf013b45a
f011fcfd:	e8 03 05 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fd02:	e8 dc 40 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011fd07:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fd0a:	74 17                	je     f011fd23 <test_kmalloc_worstfit+0xd0d>
f011fd0c:	83 ec 04             	sub    $0x4,%esp
f011fd0f:	68 74 b4 13 f0       	push   $0xf013b474
f011fd14:	68 6e 04 00 00       	push   $0x46e
f011fd19:	68 5a b4 13 f0       	push   $0xf013b45a
f011fd1e:	e8 e2 04 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011fd23:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fd26:	e8 2e d3 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011fd2b:	29 c3                	sub    %eax,%ebx
f011fd2d:	89 d8                	mov    %ebx,%eax
f011fd2f:	3d 00 05 00 00       	cmp    $0x500,%eax
f011fd34:	74 17                	je     f011fd4d <test_kmalloc_worstfit+0xd37>
f011fd36:	83 ec 04             	sub    $0x4,%esp
f011fd39:	68 92 b9 13 f0       	push   $0xf013b992
f011fd3e:	68 6f 04 00 00       	push   $0x46f
f011fd43:	68 5a b4 13 f0       	push   $0xf013b45a
f011fd48:	e8 b8 04 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fd4d:	ff 45 e8             	incl   -0x18(%ebp)
f011fd50:	83 ec 08             	sub    $0x8,%esp
f011fd53:	ff 75 e8             	pushl  -0x18(%ebp)
f011fd56:	68 94 bb 13 f0       	push   $0xf013bb94
f011fd5b:	e8 ae 0f fe ff       	call   f0100d0e <cprintf>
f011fd60:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fd63:	e8 f1 d2 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011fd68:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fd6b:	e8 73 40 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011fd70:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011fd73:	83 ec 0c             	sub    $0xc,%esp
f011fd76:	68 00 00 40 00       	push   $0x400000
f011fd7b:	e8 b0 7c fe ff       	call   f0107a30 <kmalloc>
f011fd80:	83 c4 10             	add    $0x10,%esp
f011fd83:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011fd89:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f011fd90:	10 00 00 
f011fd93:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011fd99:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fd9e:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f011fda4:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011fdaa:	ba 00 00 00 00       	mov    $0x0,%edx
f011fdaf:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f011fdb5:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011fdbb:	29 d0                	sub    %edx,%eax
f011fdbd:	89 c1                	mov    %eax,%ecx
f011fdbf:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f011fdc6:	10 00 00 
f011fdc9:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011fdce:	0f b6 d0             	movzbl %al,%edx
f011fdd1:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011fdd7:	01 d0                	add    %edx,%eax
f011fdd9:	48                   	dec    %eax
f011fdda:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f011fde0:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011fde6:	ba 00 00 00 00       	mov    $0x0,%edx
f011fdeb:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f011fdf1:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011fdf7:	29 d0                	sub    %edx,%eax
f011fdf9:	01 c1                	add    %eax,%ecx
f011fdfb:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f011fe02:	10 00 00 
f011fe05:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011fe0a:	0f b6 c0             	movzbl %al,%eax
f011fe0d:	c1 e0 04             	shl    $0x4,%eax
f011fe10:	89 c2                	mov    %eax,%edx
f011fe12:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011fe18:	01 d0                	add    %edx,%eax
f011fe1a:	48                   	dec    %eax
f011fe1b:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f011fe21:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011fe27:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe2c:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f011fe32:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011fe38:	29 d0                	sub    %edx,%eax
f011fe3a:	01 c8                	add    %ecx,%eax
f011fe3c:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011fe42:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fe48:	39 c2                	cmp    %eax,%edx
f011fe4a:	74 17                	je     f011fe63 <test_kmalloc_worstfit+0xe4d>
		panic("Worst Fit not working correctly");
f011fe4c:	83 ec 04             	sub    $0x4,%esp
f011fe4f:	68 74 bb 13 f0       	push   $0xf013bb74
f011fe54:	68 76 04 00 00       	push   $0x476
f011fe59:	68 5a b4 13 f0       	push   $0xf013b45a
f011fe5e:	e8 a2 03 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fe63:	e8 7b 3f fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011fe68:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fe6b:	74 17                	je     f011fe84 <test_kmalloc_worstfit+0xe6e>
f011fe6d:	83 ec 04             	sub    $0x4,%esp
f011fe70:	68 74 b4 13 f0       	push   $0xf013b474
f011fe75:	68 77 04 00 00       	push   $0x477
f011fe7a:	68 5a b4 13 f0       	push   $0xf013b45a
f011fe7f:	e8 81 03 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011fe84:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fe87:	e8 cd d1 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011fe8c:	29 c3                	sub    %eax,%ebx
f011fe8e:	89 d8                	mov    %ebx,%eax
f011fe90:	3d 00 04 00 00       	cmp    $0x400,%eax
f011fe95:	74 17                	je     f011feae <test_kmalloc_worstfit+0xe98>
f011fe97:	83 ec 04             	sub    $0x4,%esp
f011fe9a:	68 92 b9 13 f0       	push   $0xf013b992
f011fe9f:	68 78 04 00 00       	push   $0x478
f011fea4:	68 5a b4 13 f0       	push   $0xf013b45a
f011fea9:	e8 57 03 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011feae:	ff 45 e8             	incl   -0x18(%ebp)
f011feb1:	83 ec 08             	sub    $0x8,%esp
f011feb4:	ff 75 e8             	pushl  -0x18(%ebp)
f011feb7:	68 94 bb 13 f0       	push   $0xf013bb94
f011febc:	e8 4d 0e fe ff       	call   f0100d0e <cprintf>
f011fec1:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fec4:	e8 90 d1 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011fec9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fecc:	e8 12 3f fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011fed1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011fed4:	83 ec 0c             	sub    $0xc,%esp
f011fed7:	68 00 00 20 00       	push   $0x200000
f011fedc:	e8 4f 7b fe ff       	call   f0107a30 <kmalloc>
f011fee1:	83 c4 10             	add    $0x10,%esp
f011fee4:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011feea:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f011fef1:	10 00 00 
f011fef4:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011fefa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011feff:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011ff05:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011ff0b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff10:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011ff16:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011ff1c:	29 d0                	sub    %edx,%eax
f011ff1e:	89 c1                	mov    %eax,%ecx
f011ff20:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f011ff27:	10 00 00 
f011ff2a:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011ff2f:	0f b6 d0             	movzbl %al,%edx
f011ff32:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011ff38:	01 d0                	add    %edx,%eax
f011ff3a:	48                   	dec    %eax
f011ff3b:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f011ff41:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011ff47:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff4c:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f011ff52:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011ff58:	29 d0                	sub    %edx,%eax
f011ff5a:	01 c1                	add    %eax,%ecx
f011ff5c:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011ff63:	10 00 00 
f011ff66:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f011ff6b:	0f b6 c0             	movzbl %al,%eax
f011ff6e:	c1 e0 04             	shl    $0x4,%eax
f011ff71:	89 c2                	mov    %eax,%edx
f011ff73:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011ff79:	01 d0                	add    %edx,%eax
f011ff7b:	48                   	dec    %eax
f011ff7c:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011ff82:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011ff88:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff8d:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011ff93:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011ff99:	29 d0                	sub    %edx,%eax
f011ff9b:	01 c8                	add    %ecx,%eax
f011ff9d:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011ffa3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ffa9:	39 c2                	cmp    %eax,%edx
f011ffab:	74 17                	je     f011ffc4 <test_kmalloc_worstfit+0xfae>
		panic("Worst Fit not working correctly");
f011ffad:	83 ec 04             	sub    $0x4,%esp
f011ffb0:	68 74 bb 13 f0       	push   $0xf013bb74
f011ffb5:	68 7f 04 00 00       	push   $0x47f
f011ffba:	68 5a b4 13 f0       	push   $0xf013b45a
f011ffbf:	e8 41 02 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ffc4:	e8 1a 3e fe ff       	call   f0103de3 <pf_calculate_free_frames>
f011ffc9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ffcc:	74 17                	je     f011ffe5 <test_kmalloc_worstfit+0xfcf>
f011ffce:	83 ec 04             	sub    $0x4,%esp
f011ffd1:	68 74 b4 13 f0       	push   $0xf013b474
f011ffd6:	68 80 04 00 00       	push   $0x480
f011ffdb:	68 5a b4 13 f0       	push   $0xf013b45a
f011ffe0:	e8 20 02 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ffe5:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ffe8:	e8 6c d0 fe ff       	call   f010d059 <sys_calculate_free_frames>
f011ffed:	29 c3                	sub    %eax,%ebx
f011ffef:	89 d8                	mov    %ebx,%eax
f011fff1:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fff6:	74 17                	je     f012000f <test_kmalloc_worstfit+0xff9>
f011fff8:	83 ec 04             	sub    $0x4,%esp
f011fffb:	68 92 b9 13 f0       	push   $0xf013b992
f0120000:	68 81 04 00 00       	push   $0x481
f0120005:	68 5a b4 13 f0       	push   $0xf013b45a
f012000a:	e8 f6 01 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f012000f:	ff 45 e8             	incl   -0x18(%ebp)
f0120012:	83 ec 08             	sub    $0x8,%esp
f0120015:	ff 75 e8             	pushl  -0x18(%ebp)
f0120018:	68 94 bb 13 f0       	push   $0xf013bb94
f012001d:	e8 ec 0c fe ff       	call   f0100d0e <cprintf>
f0120022:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0120025:	e8 2f d0 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012002a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f012002d:	e8 b1 3d fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0120032:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f0120035:	83 ec 0c             	sub    $0xc,%esp
f0120038:	68 00 00 18 00       	push   $0x180000
f012003d:	e8 ee 79 fe ff       	call   f0107a30 <kmalloc>
f0120042:	83 c4 10             	add    $0x10,%esp
f0120045:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f012004b:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f0120052:	10 00 00 
f0120055:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012005b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120060:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f0120066:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012006c:	ba 00 00 00 00       	mov    $0x0,%edx
f0120071:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f0120077:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012007d:	29 d0                	sub    %edx,%eax
f012007f:	89 c1                	mov    %eax,%ecx
f0120081:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0120088:	10 00 00 
f012008b:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0120090:	0f b6 d0             	movzbl %al,%edx
f0120093:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0120099:	01 d0                	add    %edx,%eax
f012009b:	48                   	dec    %eax
f012009c:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f01200a2:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01200a8:	ba 00 00 00 00       	mov    $0x0,%edx
f01200ad:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f01200b3:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01200b9:	29 d0                	sub    %edx,%eax
f01200bb:	01 c1                	add    %eax,%ecx
f01200bd:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f01200c4:	10 00 00 
f01200c7:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01200cc:	0f b6 c0             	movzbl %al,%eax
f01200cf:	c1 e0 04             	shl    $0x4,%eax
f01200d2:	89 c2                	mov    %eax,%edx
f01200d4:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01200da:	01 d0                	add    %edx,%eax
f01200dc:	48                   	dec    %eax
f01200dd:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f01200e3:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01200e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01200ee:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f01200f4:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01200fa:	29 d0                	sub    %edx,%eax
f01200fc:	01 c8                	add    %ecx,%eax
f01200fe:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0120104:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012010a:	39 c2                	cmp    %eax,%edx
f012010c:	74 17                	je     f0120125 <test_kmalloc_worstfit+0x110f>
		panic("Worst Fit not working correctly");
f012010e:	83 ec 04             	sub    $0x4,%esp
f0120111:	68 74 bb 13 f0       	push   $0xf013bb74
f0120116:	68 88 04 00 00       	push   $0x488
f012011b:	68 5a b4 13 f0       	push   $0xf013b45a
f0120120:	e8 e0 00 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120125:	e8 b9 3c fe ff       	call   f0103de3 <pf_calculate_free_frames>
f012012a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012012d:	74 17                	je     f0120146 <test_kmalloc_worstfit+0x1130>
f012012f:	83 ec 04             	sub    $0x4,%esp
f0120132:	68 74 b4 13 f0       	push   $0xf013b474
f0120137:	68 89 04 00 00       	push   $0x489
f012013c:	68 5a b4 13 f0       	push   $0xf013b45a
f0120141:	e8 bf 00 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f0120146:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0120149:	e8 0b cf fe ff       	call   f010d059 <sys_calculate_free_frames>
f012014e:	29 c3                	sub    %eax,%ebx
f0120150:	89 d8                	mov    %ebx,%eax
f0120152:	3d 80 01 00 00       	cmp    $0x180,%eax
f0120157:	74 17                	je     f0120170 <test_kmalloc_worstfit+0x115a>
f0120159:	83 ec 04             	sub    $0x4,%esp
f012015c:	68 92 b9 13 f0       	push   $0xf013b992
f0120161:	68 8a 04 00 00       	push   $0x48a
f0120166:	68 5a b4 13 f0       	push   $0xf013b45a
f012016b:	e8 95 00 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f0120170:	ff 45 e8             	incl   -0x18(%ebp)
f0120173:	83 ec 08             	sub    $0x8,%esp
f0120176:	ff 75 e8             	pushl  -0x18(%ebp)
f0120179:	68 94 bb 13 f0       	push   $0xf013bb94
f012017e:	e8 8b 0b fe ff       	call   f0100d0e <cprintf>
f0120183:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0120186:	e8 ce ce fe ff       	call   f010d059 <sys_calculate_free_frames>
f012018b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f012018e:	e8 50 3c fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0120193:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f0120196:	83 ec 0c             	sub    $0xc,%esp
f0120199:	68 00 00 08 00       	push   $0x80000
f012019e:	e8 8d 78 fe ff       	call   f0107a30 <kmalloc>
f01201a3:	83 c4 10             	add    $0x10,%esp
f01201a6:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f01201ac:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f01201b3:	10 00 00 
f01201b6:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01201bc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01201c1:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f01201c7:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01201cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01201d2:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f01201d8:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01201de:	29 d0                	sub    %edx,%eax
f01201e0:	89 c1                	mov    %eax,%ecx
f01201e2:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f01201e9:	10 00 00 
f01201ec:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01201f1:	0f b6 d0             	movzbl %al,%edx
f01201f4:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01201fa:	01 d0                	add    %edx,%eax
f01201fc:	48                   	dec    %eax
f01201fd:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0120203:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0120209:	ba 00 00 00 00       	mov    $0x0,%edx
f012020e:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0120214:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012021a:	29 d0                	sub    %edx,%eax
f012021c:	01 c1                	add    %eax,%ecx
f012021e:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0120225:	10 00 00 
f0120228:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012022d:	0f b6 c0             	movzbl %al,%eax
f0120230:	c1 e0 04             	shl    $0x4,%eax
f0120233:	89 c2                	mov    %eax,%edx
f0120235:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012023b:	01 d0                	add    %edx,%eax
f012023d:	48                   	dec    %eax
f012023e:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0120244:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012024a:	ba 00 00 00 00       	mov    $0x0,%edx
f012024f:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0120255:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012025b:	29 d0                	sub    %edx,%eax
f012025d:	01 c8                	add    %ecx,%eax
f012025f:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f0120265:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012026b:	39 c2                	cmp    %eax,%edx
f012026d:	74 17                	je     f0120286 <test_kmalloc_worstfit+0x1270>
		panic("Worst Fit not working correctly");
f012026f:	83 ec 04             	sub    $0x4,%esp
f0120272:	68 74 bb 13 f0       	push   $0xf013bb74
f0120277:	68 91 04 00 00       	push   $0x491
f012027c:	68 5a b4 13 f0       	push   $0xf013b45a
f0120281:	e8 7f ff fd ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120286:	e8 58 3b fe ff       	call   f0103de3 <pf_calculate_free_frames>
f012028b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012028e:	74 17                	je     f01202a7 <test_kmalloc_worstfit+0x1291>
f0120290:	83 ec 04             	sub    $0x4,%esp
f0120293:	68 74 b4 13 f0       	push   $0xf013b474
f0120298:	68 92 04 00 00       	push   $0x492
f012029d:	68 5a b4 13 f0       	push   $0xf013b45a
f01202a2:	e8 5e ff fd ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f01202a7:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01202aa:	e8 aa cd fe ff       	call   f010d059 <sys_calculate_free_frames>
f01202af:	29 c3                	sub    %eax,%ebx
f01202b1:	89 d8                	mov    %ebx,%eax
f01202b3:	3d 80 00 00 00       	cmp    $0x80,%eax
f01202b8:	74 17                	je     f01202d1 <test_kmalloc_worstfit+0x12bb>
f01202ba:	83 ec 04             	sub    $0x4,%esp
f01202bd:	68 92 b9 13 f0       	push   $0xf013b992
f01202c2:	68 93 04 00 00       	push   $0x493
f01202c7:	68 5a b4 13 f0       	push   $0xf013b45a
f01202cc:	e8 34 ff fd ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f01202d1:	ff 45 e8             	incl   -0x18(%ebp)
f01202d4:	83 ec 08             	sub    $0x8,%esp
f01202d7:	ff 75 e8             	pushl  -0x18(%ebp)
f01202da:	68 94 bb 13 f0       	push   $0xf013bb94
f01202df:	e8 2a 0a fe ff       	call   f0100d0e <cprintf>
f01202e4:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f01202e7:	e8 6d cd fe ff       	call   f010d059 <sys_calculate_free_frames>
f01202ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f01202ef:	e8 ef 3a fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01202f4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f01202f7:	83 ec 0c             	sub    $0xc,%esp
f01202fa:	68 00 04 00 00       	push   $0x400
f01202ff:	e8 2c 77 fe ff       	call   f0107a30 <kmalloc>
f0120304:	83 c4 10             	add    $0x10,%esp
f0120307:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f012030d:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f0120314:	10 00 00 
f0120317:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012031d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120322:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f0120328:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012032e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120333:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f0120339:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012033f:	29 d0                	sub    %edx,%eax
f0120341:	89 c1                	mov    %eax,%ecx
f0120343:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f012034a:	10 00 00 
f012034d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0120352:	0f b6 d0             	movzbl %al,%edx
f0120355:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012035b:	01 d0                	add    %edx,%eax
f012035d:	48                   	dec    %eax
f012035e:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f0120364:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012036a:	ba 00 00 00 00       	mov    $0x0,%edx
f012036f:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f0120375:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012037b:	29 d0                	sub    %edx,%eax
f012037d:	01 c1                	add    %eax,%ecx
f012037f:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f0120386:	10 00 00 
f0120389:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012038e:	0f b6 c0             	movzbl %al,%eax
f0120391:	c1 e0 04             	shl    $0x4,%eax
f0120394:	89 c2                	mov    %eax,%edx
f0120396:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012039c:	01 d0                	add    %edx,%eax
f012039e:	48                   	dec    %eax
f012039f:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f01203a5:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01203ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01203b0:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f01203b6:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01203bc:	29 d0                	sub    %edx,%eax
f01203be:	01 c8                	add    %ecx,%eax
f01203c0:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f01203c6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01203cc:	39 c2                	cmp    %eax,%edx
f01203ce:	74 17                	je     f01203e7 <test_kmalloc_worstfit+0x13d1>
		panic("Worst Fit not working correctly");
f01203d0:	83 ec 04             	sub    $0x4,%esp
f01203d3:	68 74 bb 13 f0       	push   $0xf013bb74
f01203d8:	68 9a 04 00 00       	push   $0x49a
f01203dd:	68 5a b4 13 f0       	push   $0xf013b45a
f01203e2:	e8 1e fe fd ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01203e7:	e8 f7 39 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01203ec:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01203ef:	74 17                	je     f0120408 <test_kmalloc_worstfit+0x13f2>
f01203f1:	83 ec 04             	sub    $0x4,%esp
f01203f4:	68 74 b4 13 f0       	push   $0xf013b474
f01203f9:	68 9b 04 00 00       	push   $0x49b
f01203fe:	68 5a b4 13 f0       	push   $0xf013b45a
f0120403:	e8 fd fd fd ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f0120408:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f012040b:	e8 49 cc fe ff       	call   f010d059 <sys_calculate_free_frames>
f0120410:	29 c3                	sub    %eax,%ebx
f0120412:	89 d8                	mov    %ebx,%eax
f0120414:	83 f8 01             	cmp    $0x1,%eax
f0120417:	74 17                	je     f0120430 <test_kmalloc_worstfit+0x141a>
f0120419:	83 ec 04             	sub    $0x4,%esp
f012041c:	68 92 b9 13 f0       	push   $0xf013b992
f0120421:	68 9c 04 00 00       	push   $0x49c
f0120426:	68 5a b4 13 f0       	push   $0xf013b45a
f012042b:	e8 d5 fd fd ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f0120430:	ff 45 e8             	incl   -0x18(%ebp)
f0120433:	83 ec 08             	sub    $0x8,%esp
f0120436:	ff 75 e8             	pushl  -0x18(%ebp)
f0120439:	68 94 bb 13 f0       	push   $0xf013bb94
f012043e:	e8 cb 08 fe ff       	call   f0100d0e <cprintf>
f0120443:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0120446:	e8 0e cc fe ff       	call   f010d059 <sys_calculate_free_frames>
f012044b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f012044e:	e8 90 39 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0120453:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f0120456:	83 ec 0c             	sub    $0xc,%esp
f0120459:	68 00 f0 1f 00       	push   $0x1ff000
f012045e:	e8 cd 75 fe ff       	call   f0107a30 <kmalloc>
f0120463:	83 c4 10             	add    $0x10,%esp
f0120466:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f012046c:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f0120473:	10 00 00 
f0120476:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012047c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120481:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f0120487:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012048d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120492:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f0120498:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012049e:	29 d0                	sub    %edx,%eax
f01204a0:	89 c1                	mov    %eax,%ecx
f01204a2:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f01204a9:	10 00 00 
f01204ac:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01204b1:	0f b6 d0             	movzbl %al,%edx
f01204b4:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01204ba:	01 d0                	add    %edx,%eax
f01204bc:	48                   	dec    %eax
f01204bd:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f01204c3:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01204c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01204ce:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f01204d4:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01204da:	29 d0                	sub    %edx,%eax
f01204dc:	01 c1                	add    %eax,%ecx
f01204de:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f01204e5:	10 00 00 
f01204e8:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01204ed:	0f b6 c0             	movzbl %al,%eax
f01204f0:	c1 e0 04             	shl    $0x4,%eax
f01204f3:	89 c2                	mov    %eax,%edx
f01204f5:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01204fb:	01 d0                	add    %edx,%eax
f01204fd:	48                   	dec    %eax
f01204fe:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f0120504:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012050a:	ba 00 00 00 00       	mov    $0x0,%edx
f012050f:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f0120515:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012051b:	29 d0                	sub    %edx,%eax
f012051d:	01 c8                	add    %ecx,%eax
f012051f:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f0120525:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012052b:	39 c2                	cmp    %eax,%edx
f012052d:	74 17                	je     f0120546 <test_kmalloc_worstfit+0x1530>
		panic("Worst Fit not working correctly");
f012052f:	83 ec 04             	sub    $0x4,%esp
f0120532:	68 74 bb 13 f0       	push   $0xf013bb74
f0120537:	68 a3 04 00 00       	push   $0x4a3
f012053c:	68 5a b4 13 f0       	push   $0xf013b45a
f0120541:	e8 bf fc fd ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120546:	e8 98 38 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f012054b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012054e:	74 17                	je     f0120567 <test_kmalloc_worstfit+0x1551>
f0120550:	83 ec 04             	sub    $0x4,%esp
f0120553:	68 74 b4 13 f0       	push   $0xf013b474
f0120558:	68 a4 04 00 00       	push   $0x4a4
f012055d:	68 5a b4 13 f0       	push   $0xf013b45a
f0120562:	e8 9e fc fd ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f0120567:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f012056a:	e8 ea ca fe ff       	call   f010d059 <sys_calculate_free_frames>
f012056f:	29 c3                	sub    %eax,%ebx
f0120571:	89 d8                	mov    %ebx,%eax
f0120573:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f0120578:	74 17                	je     f0120591 <test_kmalloc_worstfit+0x157b>
f012057a:	83 ec 04             	sub    $0x4,%esp
f012057d:	68 92 b9 13 f0       	push   $0xf013b992
f0120582:	68 a5 04 00 00       	push   $0x4a5
f0120587:	68 5a b4 13 f0       	push   $0xf013b45a
f012058c:	e8 74 fc fd ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f0120591:	ff 45 e8             	incl   -0x18(%ebp)
f0120594:	83 ec 08             	sub    $0x8,%esp
f0120597:	ff 75 e8             	pushl  -0x18(%ebp)
f012059a:	68 94 bb 13 f0       	push   $0xf013bb94
f012059f:	e8 6a 07 fe ff       	call   f0100d0e <cprintf>
f01205a4:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f01205a7:	e8 ad ca fe ff       	call   f010d059 <sys_calculate_free_frames>
f01205ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f01205af:	e8 2f 38 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01205b4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f01205b7:	83 ec 0c             	sub    $0xc,%esp
f01205ba:	68 00 00 40 00       	push   $0x400000
f01205bf:	e8 6c 74 fe ff       	call   f0107a30 <kmalloc>
f01205c4:	83 c4 10             	add    $0x10,%esp
f01205c7:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != 0x0)
f01205cd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01205d3:	85 c0                	test   %eax,%eax
f01205d5:	74 17                	je     f01205ee <test_kmalloc_worstfit+0x15d8>
		panic("Worst Fit not working correctly");
f01205d7:	83 ec 04             	sub    $0x4,%esp
f01205da:	68 74 bb 13 f0       	push   $0xf013bb74
f01205df:	68 ad 04 00 00       	push   $0x4ad
f01205e4:	68 5a b4 13 f0       	push   $0xf013b45a
f01205e9:	e8 17 fc fd ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01205ee:	e8 f0 37 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01205f3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01205f6:	74 17                	je     f012060f <test_kmalloc_worstfit+0x15f9>
f01205f8:	83 ec 04             	sub    $0x4,%esp
f01205fb:	68 74 b4 13 f0       	push   $0xf013b474
f0120600:	68 ae 04 00 00       	push   $0x4ae
f0120605:	68 5a b4 13 f0       	push   $0xf013b45a
f012060a:	e8 f6 fb fd ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f012060f:	e8 45 ca fe ff       	call   f010d059 <sys_calculate_free_frames>
f0120614:	89 c2                	mov    %eax,%edx
f0120616:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0120619:	39 c2                	cmp    %eax,%edx
f012061b:	74 17                	je     f0120634 <test_kmalloc_worstfit+0x161e>
f012061d:	83 ec 04             	sub    $0x4,%esp
f0120620:	68 92 b9 13 f0       	push   $0xf013b992
f0120625:	68 af 04 00 00       	push   $0x4af
f012062a:	68 5a b4 13 f0       	push   $0xf013b45a
f012062f:	e8 d1 fb fd ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f0120634:	ff 45 e8             	incl   -0x18(%ebp)
f0120637:	83 ec 08             	sub    $0x8,%esp
f012063a:	ff 75 e8             	pushl  -0x18(%ebp)
f012063d:	68 94 bb 13 f0       	push   $0xf013bb94
f0120642:	e8 c7 06 fe ff       	call   f0100d0e <cprintf>
f0120647:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f012064a:	83 ec 0c             	sub    $0xc,%esp
f012064d:	68 a8 bb 13 f0       	push   $0xf013bba8
f0120652:	e8 b7 06 fe ff       	call   f0100d0e <cprintf>
f0120657:	83 c4 10             	add    $0x10,%esp


	return 1;
f012065a:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012065f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0120662:	5b                   	pop    %ebx
f0120663:	5f                   	pop    %edi
f0120664:	5d                   	pop    %ebp
f0120665:	c3                   	ret    

f0120666 <test_kfree>:

int test_kfree()
{
f0120666:	55                   	push   %ebp
f0120667:	89 e5                	mov    %esp,%ebp
f0120669:	57                   	push   %edi
f012066a:	53                   	push   %ebx
f012066b:	81 ec c0 02 00 00    	sub    $0x2c0,%esp
	cprintf("==============================================\n");
f0120671:	83 ec 0c             	sub    $0xc,%esp
f0120674:	68 9c b3 13 f0       	push   $0xf013b39c
f0120679:	e8 90 06 fe ff       	call   f0100d0e <cprintf>
f012067e:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0120681:	83 ec 0c             	sub    $0xc,%esp
f0120684:	68 cc b3 13 f0       	push   $0xf013b3cc
f0120689:	e8 80 06 fe ff       	call   f0100d0e <cprintf>
f012068e:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0120691:	83 ec 0c             	sub    $0xc,%esp
f0120694:	68 9c b3 13 f0       	push   $0xf013b39c
f0120699:	e8 70 06 fe ff       	call   f0100d0e <cprintf>
f012069e:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01206a1:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f01206a5:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f01206a9:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f01206af:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f01206b5:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f01206bc:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01206c3:	e8 91 c9 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01206c8:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01206cb:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
f01206d1:	b9 14 00 00 00       	mov    $0x14,%ecx
f01206d6:	b8 00 00 00 00       	mov    $0x0,%eax
f01206db:	89 d7                	mov    %edx,%edi
f01206dd:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01206df:	8d 95 98 fd ff ff    	lea    -0x268(%ebp),%edx
f01206e5:	b9 14 00 00 00       	mov    $0x14,%ecx
f01206ea:	b8 00 00 00 00       	mov    $0x0,%eax
f01206ef:	89 d7                	mov    %edx,%edi
f01206f1:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01206f3:	8d 95 48 fd ff ff    	lea    -0x2b8(%ebp),%edx
f01206f9:	b9 14 00 00 00       	mov    $0x14,%ecx
f01206fe:	b8 00 00 00 00       	mov    $0x0,%eax
f0120703:	89 d7                	mov    %edx,%edi
f0120705:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0120707:	e8 4d c9 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012070c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012070f:	e8 cf 36 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0120714:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0120717:	83 ec 0c             	sub    $0xc,%esp
f012071a:	68 00 fc 1f 00       	push   $0x1ffc00
f012071f:	e8 0c 73 fe ff       	call   f0107a30 <kmalloc>
f0120724:	83 c4 10             	add    $0x10,%esp
f0120727:	89 85 48 fd ff ff    	mov    %eax,-0x2b8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012072d:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0120733:	89 c1                	mov    %eax,%ecx
f0120735:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f012073c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012073f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120744:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0120747:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012074a:	ba 00 00 00 00       	mov    $0x0,%edx
f012074f:	f7 75 c8             	divl   -0x38(%ebp)
f0120752:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0120755:	29 d0                	sub    %edx,%eax
f0120757:	89 c3                	mov    %eax,%ebx
f0120759:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0120760:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0120765:	0f b6 d0             	movzbl %al,%edx
f0120768:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012076b:	01 d0                	add    %edx,%eax
f012076d:	48                   	dec    %eax
f012076e:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0120771:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0120774:	ba 00 00 00 00       	mov    $0x0,%edx
f0120779:	f7 75 c0             	divl   -0x40(%ebp)
f012077c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012077f:	29 d0                	sub    %edx,%eax
f0120781:	01 c3                	add    %eax,%ebx
f0120783:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f012078a:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012078f:	0f b6 c0             	movzbl %al,%eax
f0120792:	c1 e0 04             	shl    $0x4,%eax
f0120795:	89 c2                	mov    %eax,%edx
f0120797:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012079a:	01 d0                	add    %edx,%eax
f012079c:	48                   	dec    %eax
f012079d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01207a0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01207a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01207a8:	f7 75 b8             	divl   -0x48(%ebp)
f01207ab:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01207ae:	29 d0                	sub    %edx,%eax
f01207b0:	01 d8                	add    %ebx,%eax
f01207b2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01207b7:	39 c1                	cmp    %eax,%ecx
f01207b9:	74 17                	je     f01207d2 <test_kfree+0x16c>
f01207bb:	83 ec 04             	sub    $0x4,%esp
f01207be:	68 40 b5 13 f0       	push   $0xf013b540
f01207c3:	68 d7 04 00 00       	push   $0x4d7
f01207c8:	68 5a b4 13 f0       	push   $0xf013b45a
f01207cd:	e8 33 fa fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01207d2:	e8 0c 36 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01207d7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01207da:	74 17                	je     f01207f3 <test_kfree+0x18d>
f01207dc:	83 ec 04             	sub    $0x4,%esp
f01207df:	68 74 b4 13 f0       	push   $0xf013b474
f01207e4:	68 d8 04 00 00       	push   $0x4d8
f01207e9:	68 5a b4 13 f0       	push   $0xf013b45a
f01207ee:	e8 12 fa fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01207f3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01207f6:	e8 5e c8 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01207fb:	29 c3                	sub    %eax,%ebx
f01207fd:	89 d8                	mov    %ebx,%eax
f01207ff:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120804:	74 17                	je     f012081d <test_kfree+0x1b7>
f0120806:	83 ec 04             	sub    $0x4,%esp
f0120809:	68 dc b4 13 f0       	push   $0xf013b4dc
f012080e:	68 d9 04 00 00       	push   $0x4d9
f0120813:	68 5a b4 13 f0       	push   $0xf013b45a
f0120818:	e8 e8 f9 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012081d:	c7 85 e8 fd ff ff ff 	movl   $0x1ffbff,-0x218(%ebp)
f0120824:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0120827:	e8 2d c8 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012082c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012082f:	e8 af 35 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0120834:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0120837:	83 ec 0c             	sub    $0xc,%esp
f012083a:	68 00 fc 1f 00       	push   $0x1ffc00
f012083f:	e8 ec 71 fe ff       	call   f0107a30 <kmalloc>
f0120844:	83 c4 10             	add    $0x10,%esp
f0120847:	89 85 4c fd ff ff    	mov    %eax,-0x2b4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012084d:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f0120853:	89 c1                	mov    %eax,%ecx
f0120855:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f012085c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012085f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120864:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0120867:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012086a:	ba 00 00 00 00       	mov    $0x0,%edx
f012086f:	f7 75 b0             	divl   -0x50(%ebp)
f0120872:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0120875:	29 d0                	sub    %edx,%eax
f0120877:	89 c3                	mov    %eax,%ebx
f0120879:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0120880:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0120885:	0f b6 d0             	movzbl %al,%edx
f0120888:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012088b:	01 d0                	add    %edx,%eax
f012088d:	48                   	dec    %eax
f012088e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0120891:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0120894:	ba 00 00 00 00       	mov    $0x0,%edx
f0120899:	f7 75 a8             	divl   -0x58(%ebp)
f012089c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012089f:	29 d0                	sub    %edx,%eax
f01208a1:	01 c3                	add    %eax,%ebx
f01208a3:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01208aa:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01208af:	0f b6 c0             	movzbl %al,%eax
f01208b2:	c1 e0 04             	shl    $0x4,%eax
f01208b5:	89 c2                	mov    %eax,%edx
f01208b7:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01208ba:	01 d0                	add    %edx,%eax
f01208bc:	48                   	dec    %eax
f01208bd:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01208c0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01208c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01208c8:	f7 75 a0             	divl   -0x60(%ebp)
f01208cb:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01208ce:	29 d0                	sub    %edx,%eax
f01208d0:	01 d8                	add    %ebx,%eax
f01208d2:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01208d7:	39 c1                	cmp    %eax,%ecx
f01208d9:	74 17                	je     f01208f2 <test_kfree+0x28c>
f01208db:	83 ec 04             	sub    $0x4,%esp
f01208de:	68 40 b5 13 f0       	push   $0xf013b540
f01208e3:	68 e0 04 00 00       	push   $0x4e0
f01208e8:	68 5a b4 13 f0       	push   $0xf013b45a
f01208ed:	e8 13 f9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01208f2:	e8 ec 34 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01208f7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01208fa:	74 17                	je     f0120913 <test_kfree+0x2ad>
f01208fc:	83 ec 04             	sub    $0x4,%esp
f01208ff:	68 74 b4 13 f0       	push   $0xf013b474
f0120904:	68 e1 04 00 00       	push   $0x4e1
f0120909:	68 5a b4 13 f0       	push   $0xf013b45a
f012090e:	e8 f2 f8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120913:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120916:	e8 3e c7 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012091b:	29 c3                	sub    %eax,%ebx
f012091d:	89 d8                	mov    %ebx,%eax
f012091f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120924:	74 17                	je     f012093d <test_kfree+0x2d7>
f0120926:	83 ec 04             	sub    $0x4,%esp
f0120929:	68 dc b4 13 f0       	push   $0xf013b4dc
f012092e:	68 e2 04 00 00       	push   $0x4e2
f0120933:	68 5a b4 13 f0       	push   $0xf013b45a
f0120938:	e8 c8 f8 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012093d:	c7 85 ec fd ff ff ff 	movl   $0x1ffbff,-0x214(%ebp)
f0120944:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120947:	e8 0d c7 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012094c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012094f:	e8 8f 34 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0120954:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0120957:	83 ec 0c             	sub    $0xc,%esp
f012095a:	68 00 08 00 00       	push   $0x800
f012095f:	e8 cc 70 fe ff       	call   f0107a30 <kmalloc>
f0120964:	83 c4 10             	add    $0x10,%esp
f0120967:	89 85 50 fd ff ff    	mov    %eax,-0x2b0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012096d:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0120973:	89 c1                	mov    %eax,%ecx
f0120975:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f012097c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012097f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120984:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0120987:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012098a:	ba 00 00 00 00       	mov    $0x0,%edx
f012098f:	f7 75 98             	divl   -0x68(%ebp)
f0120992:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0120995:	29 d0                	sub    %edx,%eax
f0120997:	89 c3                	mov    %eax,%ebx
f0120999:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01209a0:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01209a5:	0f b6 d0             	movzbl %al,%edx
f01209a8:	8b 45 90             	mov    -0x70(%ebp),%eax
f01209ab:	01 d0                	add    %edx,%eax
f01209ad:	48                   	dec    %eax
f01209ae:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01209b1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01209b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01209b9:	f7 75 90             	divl   -0x70(%ebp)
f01209bc:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01209bf:	29 d0                	sub    %edx,%eax
f01209c1:	01 c3                	add    %eax,%ebx
f01209c3:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01209ca:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01209cf:	0f b6 c0             	movzbl %al,%eax
f01209d2:	c1 e0 04             	shl    $0x4,%eax
f01209d5:	89 c2                	mov    %eax,%edx
f01209d7:	8b 45 88             	mov    -0x78(%ebp),%eax
f01209da:	01 d0                	add    %edx,%eax
f01209dc:	48                   	dec    %eax
f01209dd:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01209e0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01209e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01209e8:	f7 75 88             	divl   -0x78(%ebp)
f01209eb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01209ee:	29 d0                	sub    %edx,%eax
f01209f0:	01 d8                	add    %ebx,%eax
f01209f2:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01209f7:	39 c1                	cmp    %eax,%ecx
f01209f9:	74 17                	je     f0120a12 <test_kfree+0x3ac>
f01209fb:	83 ec 04             	sub    $0x4,%esp
f01209fe:	68 40 b5 13 f0       	push   $0xf013b540
f0120a03:	68 e9 04 00 00       	push   $0x4e9
f0120a08:	68 5a b4 13 f0       	push   $0xf013b45a
f0120a0d:	e8 f3 f7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120a12:	e8 cc 33 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0120a17:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120a1a:	74 17                	je     f0120a33 <test_kfree+0x3cd>
f0120a1c:	83 ec 04             	sub    $0x4,%esp
f0120a1f:	68 74 b4 13 f0       	push   $0xf013b474
f0120a24:	68 ea 04 00 00       	push   $0x4ea
f0120a29:	68 5a b4 13 f0       	push   $0xf013b45a
f0120a2e:	e8 d2 f7 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120a33:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120a36:	e8 1e c6 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0120a3b:	29 c3                	sub    %eax,%ebx
f0120a3d:	89 d8                	mov    %ebx,%eax
f0120a3f:	83 f8 01             	cmp    $0x1,%eax
f0120a42:	74 17                	je     f0120a5b <test_kfree+0x3f5>
f0120a44:	83 ec 04             	sub    $0x4,%esp
f0120a47:	68 dc b4 13 f0       	push   $0xf013b4dc
f0120a4c:	68 eb 04 00 00       	push   $0x4eb
f0120a51:	68 5a b4 13 f0       	push   $0xf013b45a
f0120a56:	e8 aa f7 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0120a5b:	c7 85 f0 fd ff ff ff 	movl   $0x7ff,-0x210(%ebp)
f0120a62:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0120a65:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0120a6b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0120a6e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120a75:	eb 0e                	jmp    f0120a85 <test_kfree+0x41f>
		{
			ptr[i] = 2 ;
f0120a77:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120a7a:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120a7d:	01 d0                	add    %edx,%eax
f0120a7f:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0120a82:	ff 45 f4             	incl   -0xc(%ebp)
f0120a85:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0120a8b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120a8e:	7f e7                	jg     f0120a77 <test_kfree+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120a90:	e8 c4 c5 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0120a95:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120a98:	e8 46 33 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0120a9d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0120aa0:	83 ec 0c             	sub    $0xc,%esp
f0120aa3:	68 00 08 00 00       	push   $0x800
f0120aa8:	e8 83 6f fe ff       	call   f0107a30 <kmalloc>
f0120aad:	83 c4 10             	add    $0x10,%esp
f0120ab0:	89 85 54 fd ff ff    	mov    %eax,-0x2ac(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120ab6:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120abc:	89 c1                	mov    %eax,%ecx
f0120abe:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0120ac5:	10 00 00 
f0120ac8:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0120ace:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120ad3:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0120ad9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0120adf:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ae4:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0120aea:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0120af0:	29 d0                	sub    %edx,%eax
f0120af2:	89 c3                	mov    %eax,%ebx
f0120af4:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0120afb:	10 00 00 
f0120afe:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0120b03:	0f b6 d0             	movzbl %al,%edx
f0120b06:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0120b0c:	01 d0                	add    %edx,%eax
f0120b0e:	48                   	dec    %eax
f0120b0f:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0120b15:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0120b1b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b20:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0120b26:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0120b2c:	29 d0                	sub    %edx,%eax
f0120b2e:	01 c3                	add    %eax,%ebx
f0120b30:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0120b37:	10 00 00 
f0120b3a:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0120b3f:	0f b6 c0             	movzbl %al,%eax
f0120b42:	c1 e0 04             	shl    $0x4,%eax
f0120b45:	89 c2                	mov    %eax,%edx
f0120b47:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0120b4d:	01 d0                	add    %edx,%eax
f0120b4f:	48                   	dec    %eax
f0120b50:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0120b56:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0120b5c:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b61:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0120b67:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0120b6d:	29 d0                	sub    %edx,%eax
f0120b6f:	01 d8                	add    %ebx,%eax
f0120b71:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0120b76:	39 c1                	cmp    %eax,%ecx
f0120b78:	74 17                	je     f0120b91 <test_kfree+0x52b>
f0120b7a:	83 ec 04             	sub    $0x4,%esp
f0120b7d:	68 40 b5 13 f0       	push   $0xf013b540
f0120b82:	68 f7 04 00 00       	push   $0x4f7
f0120b87:	68 5a b4 13 f0       	push   $0xf013b45a
f0120b8c:	e8 74 f6 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120b91:	e8 4d 32 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0120b96:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120b99:	74 17                	je     f0120bb2 <test_kfree+0x54c>
f0120b9b:	83 ec 04             	sub    $0x4,%esp
f0120b9e:	68 74 b4 13 f0       	push   $0xf013b474
f0120ba3:	68 f8 04 00 00       	push   $0x4f8
f0120ba8:	68 5a b4 13 f0       	push   $0xf013b45a
f0120bad:	e8 53 f6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120bb2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120bb5:	e8 9f c4 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0120bba:	29 c3                	sub    %eax,%ebx
f0120bbc:	89 d8                	mov    %ebx,%eax
f0120bbe:	83 f8 01             	cmp    $0x1,%eax
f0120bc1:	74 17                	je     f0120bda <test_kfree+0x574>
f0120bc3:	83 ec 04             	sub    $0x4,%esp
f0120bc6:	68 dc b4 13 f0       	push   $0xf013b4dc
f0120bcb:	68 f9 04 00 00       	push   $0x4f9
f0120bd0:	68 5a b4 13 f0       	push   $0xf013b45a
f0120bd5:	e8 2b f6 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0120bda:	c7 85 f4 fd ff ff ff 	movl   $0x7ff,-0x20c(%ebp)
f0120be1:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0120be4:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120bea:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0120bed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120bf4:	eb 0e                	jmp    f0120c04 <test_kfree+0x59e>
		{
			ptr[i] = 3 ;
f0120bf6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120bf9:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120bfc:	01 d0                	add    %edx,%eax
f0120bfe:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0120c01:	ff 45 f4             	incl   -0xc(%ebp)
f0120c04:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120c0a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120c0d:	7f e7                	jg     f0120bf6 <test_kfree+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0120c0f:	e8 45 c4 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0120c14:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120c17:	e8 c7 31 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0120c1c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0120c1f:	83 ec 0c             	sub    $0xc,%esp
f0120c22:	68 00 1c 00 00       	push   $0x1c00
f0120c27:	e8 04 6e fe ff       	call   f0107a30 <kmalloc>
f0120c2c:	83 c4 10             	add    $0x10,%esp
f0120c2f:	89 85 58 fd ff ff    	mov    %eax,-0x2a8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120c35:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120c3b:	89 c1                	mov    %eax,%ecx
f0120c3d:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0120c44:	10 00 00 
f0120c47:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0120c4d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120c52:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0120c58:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0120c5e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120c63:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0120c69:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0120c6f:	29 d0                	sub    %edx,%eax
f0120c71:	89 c3                	mov    %eax,%ebx
f0120c73:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0120c7a:	10 00 00 
f0120c7d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0120c82:	0f b6 d0             	movzbl %al,%edx
f0120c85:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0120c8b:	01 d0                	add    %edx,%eax
f0120c8d:	48                   	dec    %eax
f0120c8e:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0120c94:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0120c9a:	ba 00 00 00 00       	mov    $0x0,%edx
f0120c9f:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0120ca5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0120cab:	29 d0                	sub    %edx,%eax
f0120cad:	01 c3                	add    %eax,%ebx
f0120caf:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0120cb6:	10 00 00 
f0120cb9:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0120cbe:	0f b6 c0             	movzbl %al,%eax
f0120cc1:	c1 e0 04             	shl    $0x4,%eax
f0120cc4:	89 c2                	mov    %eax,%edx
f0120cc6:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0120ccc:	01 d0                	add    %edx,%eax
f0120cce:	48                   	dec    %eax
f0120ccf:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0120cd5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0120cdb:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ce0:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0120ce6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0120cec:	29 d0                	sub    %edx,%eax
f0120cee:	01 d8                	add    %ebx,%eax
f0120cf0:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0120cf5:	39 c1                	cmp    %eax,%ecx
f0120cf7:	74 17                	je     f0120d10 <test_kfree+0x6aa>
f0120cf9:	83 ec 04             	sub    $0x4,%esp
f0120cfc:	68 40 b5 13 f0       	push   $0xf013b540
f0120d01:	68 05 05 00 00       	push   $0x505
f0120d06:	68 5a b4 13 f0       	push   $0xf013b45a
f0120d0b:	e8 f5 f4 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120d10:	e8 ce 30 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0120d15:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120d18:	74 17                	je     f0120d31 <test_kfree+0x6cb>
f0120d1a:	83 ec 04             	sub    $0x4,%esp
f0120d1d:	68 74 b4 13 f0       	push   $0xf013b474
f0120d22:	68 06 05 00 00       	push   $0x506
f0120d27:	68 5a b4 13 f0       	push   $0xf013b45a
f0120d2c:	e8 d4 f4 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120d31:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120d34:	e8 20 c3 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0120d39:	29 c3                	sub    %eax,%ebx
f0120d3b:	89 d8                	mov    %ebx,%eax
f0120d3d:	83 f8 02             	cmp    $0x2,%eax
f0120d40:	74 17                	je     f0120d59 <test_kfree+0x6f3>
f0120d42:	83 ec 04             	sub    $0x4,%esp
f0120d45:	68 dc b4 13 f0       	push   $0xf013b4dc
f0120d4a:	68 07 05 00 00       	push   $0x507
f0120d4f:	68 5a b4 13 f0       	push   $0xf013b45a
f0120d54:	e8 ac f4 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0120d59:	c7 85 f8 fd ff ff ff 	movl   $0x1bff,-0x208(%ebp)
f0120d60:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0120d63:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120d69:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0120d6c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120d73:	eb 0e                	jmp    f0120d83 <test_kfree+0x71d>
		{
			ptr[i] = 4 ;
f0120d75:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120d78:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120d7b:	01 d0                	add    %edx,%eax
f0120d7d:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0120d80:	ff 45 f4             	incl   -0xc(%ebp)
f0120d83:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120d89:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120d8c:	7f e7                	jg     f0120d75 <test_kfree+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0120d8e:	e8 c6 c2 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0120d93:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120d96:	e8 48 30 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0120d9b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0120d9e:	83 ec 0c             	sub    $0xc,%esp
f0120da1:	68 00 fc 2f 00       	push   $0x2ffc00
f0120da6:	e8 85 6c fe ff       	call   f0107a30 <kmalloc>
f0120dab:	83 c4 10             	add    $0x10,%esp
f0120dae:	89 85 5c fd ff ff    	mov    %eax,-0x2a4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120db4:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120dba:	89 c1                	mov    %eax,%ecx
f0120dbc:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0120dc3:	10 00 00 
f0120dc6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0120dcc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120dd1:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0120dd7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120ddd:	ba 00 00 00 00       	mov    $0x0,%edx
f0120de2:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0120de8:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120dee:	29 d0                	sub    %edx,%eax
f0120df0:	89 c3                	mov    %eax,%ebx
f0120df2:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0120df9:	10 00 00 
f0120dfc:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0120e01:	0f b6 d0             	movzbl %al,%edx
f0120e04:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0120e0a:	01 d0                	add    %edx,%eax
f0120e0c:	48                   	dec    %eax
f0120e0d:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0120e13:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0120e19:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e1e:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0120e24:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0120e2a:	29 d0                	sub    %edx,%eax
f0120e2c:	01 c3                	add    %eax,%ebx
f0120e2e:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0120e35:	10 00 00 
f0120e38:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0120e3d:	0f b6 c0             	movzbl %al,%eax
f0120e40:	c1 e0 04             	shl    $0x4,%eax
f0120e43:	89 c2                	mov    %eax,%edx
f0120e45:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0120e4b:	01 d0                	add    %edx,%eax
f0120e4d:	48                   	dec    %eax
f0120e4e:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0120e54:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0120e5a:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e5f:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0120e65:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0120e6b:	29 d0                	sub    %edx,%eax
f0120e6d:	01 d8                	add    %ebx,%eax
f0120e6f:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0120e74:	39 c1                	cmp    %eax,%ecx
f0120e76:	74 17                	je     f0120e8f <test_kfree+0x829>
f0120e78:	83 ec 04             	sub    $0x4,%esp
f0120e7b:	68 40 b5 13 f0       	push   $0xf013b540
f0120e80:	68 13 05 00 00       	push   $0x513
f0120e85:	68 5a b4 13 f0       	push   $0xf013b45a
f0120e8a:	e8 76 f3 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120e8f:	e8 4f 2f fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0120e94:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120e97:	74 17                	je     f0120eb0 <test_kfree+0x84a>
f0120e99:	83 ec 04             	sub    $0x4,%esp
f0120e9c:	68 74 b4 13 f0       	push   $0xf013b474
f0120ea1:	68 14 05 00 00       	push   $0x514
f0120ea6:	68 5a b4 13 f0       	push   $0xf013b45a
f0120eab:	e8 55 f3 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120eb0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120eb3:	e8 a1 c1 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0120eb8:	29 c3                	sub    %eax,%ebx
f0120eba:	89 d8                	mov    %ebx,%eax
f0120ebc:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120ec1:	74 17                	je     f0120eda <test_kfree+0x874>
f0120ec3:	83 ec 04             	sub    $0x4,%esp
f0120ec6:	68 dc b4 13 f0       	push   $0xf013b4dc
f0120ecb:	68 15 05 00 00       	push   $0x515
f0120ed0:	68 5a b4 13 f0       	push   $0xf013b45a
f0120ed5:	e8 2b f3 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0120eda:	c7 85 fc fd ff ff ff 	movl   $0x2ffbff,-0x204(%ebp)
f0120ee1:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0120ee4:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120eea:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120eed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120ef4:	eb 0e                	jmp    f0120f04 <test_kfree+0x89e>
		{
			ptr[i] = 5 ;
f0120ef6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120ef9:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120efc:	01 d0                	add    %edx,%eax
f0120efe:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0120f01:	ff 45 f4             	incl   -0xc(%ebp)
f0120f04:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120f0a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120f0d:	7f e7                	jg     f0120ef6 <test_kfree+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120f0f:	e8 45 c1 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0120f14:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120f17:	e8 c7 2e fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0120f1c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0120f1f:	83 ec 0c             	sub    $0xc,%esp
f0120f22:	68 00 fc 5f 00       	push   $0x5ffc00
f0120f27:	e8 04 6b fe ff       	call   f0107a30 <kmalloc>
f0120f2c:	83 c4 10             	add    $0x10,%esp
f0120f2f:	89 85 60 fd ff ff    	mov    %eax,-0x2a0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120f35:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f0120f3b:	89 c1                	mov    %eax,%ecx
f0120f3d:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0120f44:	10 00 00 
f0120f47:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0120f4d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120f52:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0120f58:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120f5e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120f63:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0120f69:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120f6f:	29 d0                	sub    %edx,%eax
f0120f71:	89 c3                	mov    %eax,%ebx
f0120f73:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0120f7a:	10 00 00 
f0120f7d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0120f82:	0f b6 d0             	movzbl %al,%edx
f0120f85:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0120f8b:	01 d0                	add    %edx,%eax
f0120f8d:	48                   	dec    %eax
f0120f8e:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0120f94:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120f9a:	ba 00 00 00 00       	mov    $0x0,%edx
f0120f9f:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0120fa5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120fab:	29 d0                	sub    %edx,%eax
f0120fad:	01 c3                	add    %eax,%ebx
f0120faf:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0120fb6:	10 00 00 
f0120fb9:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0120fbe:	0f b6 c0             	movzbl %al,%eax
f0120fc1:	c1 e0 04             	shl    $0x4,%eax
f0120fc4:	89 c2                	mov    %eax,%edx
f0120fc6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120fcc:	01 d0                	add    %edx,%eax
f0120fce:	48                   	dec    %eax
f0120fcf:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0120fd5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120fdb:	ba 00 00 00 00       	mov    $0x0,%edx
f0120fe0:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0120fe6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120fec:	29 d0                	sub    %edx,%eax
f0120fee:	01 d8                	add    %ebx,%eax
f0120ff0:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0120ff5:	39 c1                	cmp    %eax,%ecx
f0120ff7:	74 17                	je     f0121010 <test_kfree+0x9aa>
f0120ff9:	83 ec 04             	sub    $0x4,%esp
f0120ffc:	68 40 b5 13 f0       	push   $0xf013b540
f0121001:	68 21 05 00 00       	push   $0x521
f0121006:	68 5a b4 13 f0       	push   $0xf013b45a
f012100b:	e8 f5 f1 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121010:	e8 ce 2d fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0121015:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121018:	74 17                	je     f0121031 <test_kfree+0x9cb>
f012101a:	83 ec 04             	sub    $0x4,%esp
f012101d:	68 74 b4 13 f0       	push   $0xf013b474
f0121022:	68 22 05 00 00       	push   $0x522
f0121027:	68 5a b4 13 f0       	push   $0xf013b45a
f012102c:	e8 d4 f1 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121031:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121034:	e8 20 c0 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121039:	29 c3                	sub    %eax,%ebx
f012103b:	89 d8                	mov    %ebx,%eax
f012103d:	3d 00 06 00 00       	cmp    $0x600,%eax
f0121042:	74 17                	je     f012105b <test_kfree+0x9f5>
f0121044:	83 ec 04             	sub    $0x4,%esp
f0121047:	68 dc b4 13 f0       	push   $0xf013b4dc
f012104c:	68 23 05 00 00       	push   $0x523
f0121051:	68 5a b4 13 f0       	push   $0xf013b45a
f0121056:	e8 aa f1 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f012105b:	c7 85 00 fe ff ff ff 	movl   $0x5ffbff,-0x200(%ebp)
f0121062:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0121065:	e8 ef bf fe ff       	call   f010d059 <sys_calculate_free_frames>
f012106a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012106d:	e8 71 2d fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0121072:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0121075:	83 ec 0c             	sub    $0xc,%esp
f0121078:	68 00 38 00 00       	push   $0x3800
f012107d:	e8 ae 69 fe ff       	call   f0107a30 <kmalloc>
f0121082:	83 c4 10             	add    $0x10,%esp
f0121085:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012108b:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0121091:	89 c1                	mov    %eax,%ecx
f0121093:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012109a:	10 00 00 
f012109d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01210a3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01210a8:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01210ae:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01210b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01210b9:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01210bf:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01210c5:	29 d0                	sub    %edx,%eax
f01210c7:	89 c3                	mov    %eax,%ebx
f01210c9:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01210d0:	10 00 00 
f01210d3:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01210d8:	0f b6 d0             	movzbl %al,%edx
f01210db:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01210e1:	01 d0                	add    %edx,%eax
f01210e3:	48                   	dec    %eax
f01210e4:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01210ea:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01210f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01210f5:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01210fb:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0121101:	29 d0                	sub    %edx,%eax
f0121103:	01 c3                	add    %eax,%ebx
f0121105:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012110c:	10 00 00 
f012110f:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0121114:	0f b6 c0             	movzbl %al,%eax
f0121117:	c1 e0 04             	shl    $0x4,%eax
f012111a:	89 c2                	mov    %eax,%edx
f012111c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0121122:	01 d0                	add    %edx,%eax
f0121124:	48                   	dec    %eax
f0121125:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012112b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0121131:	ba 00 00 00 00       	mov    $0x0,%edx
f0121136:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012113c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0121142:	29 d0                	sub    %edx,%eax
f0121144:	01 d8                	add    %ebx,%eax
f0121146:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012114b:	39 c1                	cmp    %eax,%ecx
f012114d:	74 17                	je     f0121166 <test_kfree+0xb00>
f012114f:	83 ec 04             	sub    $0x4,%esp
f0121152:	68 40 b5 13 f0       	push   $0xf013b540
f0121157:	68 2a 05 00 00       	push   $0x52a
f012115c:	68 5a b4 13 f0       	push   $0xf013b45a
f0121161:	e8 9f f0 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121166:	e8 78 2c fe ff       	call   f0103de3 <pf_calculate_free_frames>
f012116b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012116e:	74 17                	je     f0121187 <test_kfree+0xb21>
f0121170:	83 ec 04             	sub    $0x4,%esp
f0121173:	68 74 b4 13 f0       	push   $0xf013b474
f0121178:	68 2b 05 00 00       	push   $0x52b
f012117d:	68 5a b4 13 f0       	push   $0xf013b45a
f0121182:	e8 7e f0 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121187:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012118a:	e8 ca be fe ff       	call   f010d059 <sys_calculate_free_frames>
f012118f:	29 c3                	sub    %eax,%ebx
f0121191:	89 d8                	mov    %ebx,%eax
f0121193:	83 f8 04             	cmp    $0x4,%eax
f0121196:	74 17                	je     f01211af <test_kfree+0xb49>
f0121198:	83 ec 04             	sub    $0x4,%esp
f012119b:	68 dc b4 13 f0       	push   $0xf013b4dc
f01211a0:	68 2c 05 00 00       	push   $0x52c
f01211a5:	68 5a b4 13 f0       	push   $0xf013b45a
f01211aa:	e8 56 f0 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01211af:	c7 85 04 fe ff ff ff 	movl   $0x37ff,-0x1fc(%ebp)
f01211b6:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f01211b9:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f01211bf:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01211c2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01211c9:	eb 0e                	jmp    f01211d9 <test_kfree+0xb73>
		{
			ptr[i] = 7 ;
f01211cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01211ce:	8b 45 80             	mov    -0x80(%ebp),%eax
f01211d1:	01 d0                	add    %edx,%eax
f01211d3:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01211d6:	ff 45 f4             	incl   -0xc(%ebp)
f01211d9:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f01211df:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01211e2:	7f e7                	jg     f01211cb <test_kfree+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01211e4:	e8 70 be fe ff       	call   f010d059 <sys_calculate_free_frames>
f01211e9:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01211ef:	e8 ef 2b fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01211f4:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f01211fa:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0121200:	83 ec 0c             	sub    $0xc,%esp
f0121203:	50                   	push   %eax
f0121204:	e8 10 69 fe ff       	call   f0107b19 <kfree>
f0121209:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012120c:	e8 d2 2b fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0121211:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0121217:	74 17                	je     f0121230 <test_kfree+0xbca>
f0121219:	83 ec 04             	sub    $0x4,%esp
f012121c:	68 74 b4 13 f0       	push   $0xf013b474
f0121221:	68 3b 05 00 00       	push   $0x53b
f0121226:	68 5a b4 13 f0       	push   $0xf013b45a
f012122b:	e8 d5 ef fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0121230:	e8 24 be fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121235:	89 c2                	mov    %eax,%edx
f0121237:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012123d:	29 c2                	sub    %eax,%edx
f012123f:	89 d0                	mov    %edx,%eax
f0121241:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121246:	74 17                	je     f012125f <test_kfree+0xbf9>
f0121248:	83 ec 04             	sub    $0x4,%esp
f012124b:	68 e4 bb 13 f0       	push   $0xf013bbe4
f0121250:	68 3c 05 00 00       	push   $0x53c
f0121255:	68 5a b4 13 f0       	push   $0xf013b45a
f012125a:	e8 a6 ef fd ff       	call   f0100205 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012125f:	e8 f5 bd fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121264:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012126a:	e8 74 2b fe ff       	call   f0103de3 <pf_calculate_free_frames>
f012126f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0121275:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f012127b:	83 ec 0c             	sub    $0xc,%esp
f012127e:	50                   	push   %eax
f012127f:	e8 95 68 fe ff       	call   f0107b19 <kfree>
f0121284:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121287:	e8 57 2b fe ff       	call   f0103de3 <pf_calculate_free_frames>
f012128c:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0121292:	74 17                	je     f01212ab <test_kfree+0xc45>
f0121294:	83 ec 04             	sub    $0x4,%esp
f0121297:	68 74 b4 13 f0       	push   $0xf013b474
f012129c:	68 42 05 00 00       	push   $0x542
f01212a1:	68 5a b4 13 f0       	push   $0xf013b45a
f01212a6:	e8 5a ef fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01212ab:	e8 a9 bd fe ff       	call   f010d059 <sys_calculate_free_frames>
f01212b0:	89 c2                	mov    %eax,%edx
f01212b2:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01212b8:	29 c2                	sub    %eax,%edx
f01212ba:	89 d0                	mov    %edx,%eax
f01212bc:	83 f8 01             	cmp    $0x1,%eax
f01212bf:	74 17                	je     f01212d8 <test_kfree+0xc72>
f01212c1:	83 ec 04             	sub    $0x4,%esp
f01212c4:	68 e4 bb 13 f0       	push   $0xf013bbe4
f01212c9:	68 43 05 00 00       	push   $0x543
f01212ce:	68 5a b4 13 f0       	push   $0xf013b45a
f01212d3:	e8 2d ef fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01212d8:	e8 7c bd fe ff       	call   f010d059 <sys_calculate_free_frames>
f01212dd:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01212e3:	e8 fb 2a fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01212e8:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f01212ee:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f01212f4:	83 ec 0c             	sub    $0xc,%esp
f01212f7:	50                   	push   %eax
f01212f8:	e8 1c 68 fe ff       	call   f0107b19 <kfree>
f01212fd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121300:	e8 de 2a fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0121305:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012130b:	74 17                	je     f0121324 <test_kfree+0xcbe>
f012130d:	83 ec 04             	sub    $0x4,%esp
f0121310:	68 74 b4 13 f0       	push   $0xf013b474
f0121315:	68 49 05 00 00       	push   $0x549
f012131a:	68 5a b4 13 f0       	push   $0xf013b45a
f012131f:	e8 e1 ee fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0121324:	e8 30 bd fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121329:	89 c2                	mov    %eax,%edx
f012132b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0121331:	29 c2                	sub    %eax,%edx
f0121333:	89 d0                	mov    %edx,%eax
f0121335:	3d 00 02 00 00       	cmp    $0x200,%eax
f012133a:	74 17                	je     f0121353 <test_kfree+0xced>
f012133c:	83 ec 04             	sub    $0x4,%esp
f012133f:	68 e4 bb 13 f0       	push   $0xf013bbe4
f0121344:	68 4a 05 00 00       	push   $0x54a
f0121349:	68 5a b4 13 f0       	push   $0xf013b45a
f012134e:	e8 b2 ee fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0121353:	e8 01 bd fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121358:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012135e:	e8 80 2a fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0121363:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0121369:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f012136f:	83 ec 0c             	sub    $0xc,%esp
f0121372:	50                   	push   %eax
f0121373:	e8 a1 67 fe ff       	call   f0107b19 <kfree>
f0121378:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012137b:	e8 63 2a fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0121380:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0121386:	74 17                	je     f012139f <test_kfree+0xd39>
f0121388:	83 ec 04             	sub    $0x4,%esp
f012138b:	68 74 b4 13 f0       	push   $0xf013b474
f0121390:	68 50 05 00 00       	push   $0x550
f0121395:	68 5a b4 13 f0       	push   $0xf013b45a
f012139a:	e8 66 ee fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012139f:	e8 b5 bc fe ff       	call   f010d059 <sys_calculate_free_frames>
f01213a4:	89 c2                	mov    %eax,%edx
f01213a6:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01213ac:	29 c2                	sub    %eax,%edx
f01213ae:	89 d0                	mov    %edx,%eax
f01213b0:	3d 00 06 00 00       	cmp    $0x600,%eax
f01213b5:	74 17                	je     f01213ce <test_kfree+0xd68>
f01213b7:	83 ec 04             	sub    $0x4,%esp
f01213ba:	68 e4 bb 13 f0       	push   $0xf013bbe4
f01213bf:	68 51 05 00 00       	push   $0x551
f01213c4:	68 5a b4 13 f0       	push   $0xf013b45a
f01213c9:	e8 37 ee fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f01213ce:	83 ec 0c             	sub    $0xc,%esp
f01213d1:	68 1c bc 13 f0       	push   $0xf013bc1c
f01213d6:	e8 33 f9 fd ff       	call   f0100d0e <cprintf>
f01213db:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f01213de:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f01213e4:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01213e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01213ee:	eb 1e                	jmp    f012140e <test_kfree+0xda8>
		{
			sums[3] += ptr[i] ;
f01213f0:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f01213f6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01213f9:	8b 45 80             	mov    -0x80(%ebp),%eax
f01213fc:	01 c8                	add    %ecx,%eax
f01213fe:	8a 00                	mov    (%eax),%al
f0121400:	0f be c0             	movsbl %al,%eax
f0121403:	01 d0                	add    %edx,%eax
f0121405:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012140b:	ff 45 f4             	incl   -0xc(%ebp)
f012140e:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0121414:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121417:	7f d7                	jg     f01213f0 <test_kfree+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0121419:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012141f:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0121425:	89 c1                	mov    %eax,%ecx
f0121427:	01 c9                	add    %ecx,%ecx
f0121429:	01 c8                	add    %ecx,%eax
f012142b:	39 c2                	cmp    %eax,%edx
f012142d:	74 17                	je     f0121446 <test_kfree+0xde0>
f012142f:	83 ec 04             	sub    $0x4,%esp
f0121432:	68 40 bc 13 f0       	push   $0xf013bc40
f0121437:	68 5e 05 00 00       	push   $0x55e
f012143c:	68 5a b4 13 f0       	push   $0xf013b45a
f0121441:	e8 bf ed fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0121446:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f012144c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012144f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121456:	eb 1e                	jmp    f0121476 <test_kfree+0xe10>
		{
			sums[4] += ptr[i] ;
f0121458:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012145e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121461:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121464:	01 c8                	add    %ecx,%eax
f0121466:	8a 00                	mov    (%eax),%al
f0121468:	0f be c0             	movsbl %al,%eax
f012146b:	01 d0                	add    %edx,%eax
f012146d:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0121473:	ff 45 f4             	incl   -0xc(%ebp)
f0121476:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012147c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012147f:	7f d7                	jg     f0121458 <test_kfree+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0121481:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f0121487:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012148d:	c1 e2 02             	shl    $0x2,%edx
f0121490:	39 d0                	cmp    %edx,%eax
f0121492:	74 17                	je     f01214ab <test_kfree+0xe45>
f0121494:	83 ec 04             	sub    $0x4,%esp
f0121497:	68 40 bc 13 f0       	push   $0xf013bc40
f012149c:	68 66 05 00 00       	push   $0x566
f01214a1:	68 5a b4 13 f0       	push   $0xf013b45a
f01214a6:	e8 5a ed fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f01214ab:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f01214b1:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01214b4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01214bb:	eb 1e                	jmp    f01214db <test_kfree+0xe75>
		{
			sums[5] += ptr[i] ;
f01214bd:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f01214c3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01214c6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01214c9:	01 c8                	add    %ecx,%eax
f01214cb:	8a 00                	mov    (%eax),%al
f01214cd:	0f be c0             	movsbl %al,%eax
f01214d0:	01 d0                	add    %edx,%eax
f01214d2:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01214d8:	ff 45 f4             	incl   -0xc(%ebp)
f01214db:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f01214e1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01214e4:	7f d7                	jg     f01214bd <test_kfree+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01214e6:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f01214ec:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f01214f2:	89 d0                	mov    %edx,%eax
f01214f4:	c1 e0 02             	shl    $0x2,%eax
f01214f7:	01 d0                	add    %edx,%eax
f01214f9:	39 c1                	cmp    %eax,%ecx
f01214fb:	74 17                	je     f0121514 <test_kfree+0xeae>
f01214fd:	83 ec 04             	sub    $0x4,%esp
f0121500:	68 40 bc 13 f0       	push   $0xf013bc40
f0121505:	68 6e 05 00 00       	push   $0x56e
f012150a:	68 5a b4 13 f0       	push   $0xf013b45a
f012150f:	e8 f1 ec fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0121514:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f012151a:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012151d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121524:	eb 1e                	jmp    f0121544 <test_kfree+0xede>
		{
			sums[7] += ptr[i] ;
f0121526:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012152c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012152f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121532:	01 c8                	add    %ecx,%eax
f0121534:	8a 00                	mov    (%eax),%al
f0121536:	0f be c0             	movsbl %al,%eax
f0121539:	01 d0                	add    %edx,%eax
f012153b:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0121541:	ff 45 f4             	incl   -0xc(%ebp)
f0121544:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012154a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012154d:	7f d7                	jg     f0121526 <test_kfree+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012154f:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f0121555:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f012155b:	89 d0                	mov    %edx,%eax
f012155d:	01 c0                	add    %eax,%eax
f012155f:	01 d0                	add    %edx,%eax
f0121561:	01 c0                	add    %eax,%eax
f0121563:	01 d0                	add    %edx,%eax
f0121565:	39 c1                	cmp    %eax,%ecx
f0121567:	74 17                	je     f0121580 <test_kfree+0xf1a>
f0121569:	83 ec 04             	sub    $0x4,%esp
f012156c:	68 40 bc 13 f0       	push   $0xf013bc40
f0121571:	68 76 05 00 00       	push   $0x576
f0121576:	68 5a b4 13 f0       	push   $0xf013b45a
f012157b:	e8 85 ec fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b30%");
f0121580:	83 ec 0c             	sub    $0xc,%esp
f0121583:	68 73 bc 13 f0       	push   $0xf013bc73
f0121588:	e8 81 f7 fd ff       	call   f0100d0e <cprintf>
f012158d:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121590:	e8 c4 ba fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121595:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121598:	e8 46 28 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f012159d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f01215a0:	83 ec 0c             	sub    $0xc,%esp
f01215a3:	68 00 50 00 00       	push   $0x5000
f01215a8:	e8 83 64 fe ff       	call   f0107a30 <kmalloc>
f01215ad:	83 c4 10             	add    $0x10,%esp
f01215b0:	89 85 68 fd ff ff    	mov    %eax,-0x298(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01215b6:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f01215bc:	89 c1                	mov    %eax,%ecx
f01215be:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f01215c5:	10 00 00 
f01215c8:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01215ce:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01215d3:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f01215d9:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01215df:	ba 00 00 00 00       	mov    $0x0,%edx
f01215e4:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f01215ea:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01215f0:	29 d0                	sub    %edx,%eax
f01215f2:	89 c3                	mov    %eax,%ebx
f01215f4:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f01215fb:	10 00 00 
f01215fe:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0121603:	0f b6 d0             	movzbl %al,%edx
f0121606:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012160c:	01 d0                	add    %edx,%eax
f012160e:	48                   	dec    %eax
f012160f:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0121615:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012161b:	ba 00 00 00 00       	mov    $0x0,%edx
f0121620:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0121626:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012162c:	29 d0                	sub    %edx,%eax
f012162e:	01 c3                	add    %eax,%ebx
f0121630:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0121637:	10 00 00 
f012163a:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012163f:	0f b6 c0             	movzbl %al,%eax
f0121642:	c1 e0 04             	shl    $0x4,%eax
f0121645:	89 c2                	mov    %eax,%edx
f0121647:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012164d:	01 d0                	add    %edx,%eax
f012164f:	48                   	dec    %eax
f0121650:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0121656:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012165c:	ba 00 00 00 00       	mov    $0x0,%edx
f0121661:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0121667:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012166d:	29 d0                	sub    %edx,%eax
f012166f:	01 d8                	add    %ebx,%eax
f0121671:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0121676:	39 c1                	cmp    %eax,%ecx
f0121678:	74 17                	je     f0121691 <test_kfree+0x102b>
f012167a:	83 ec 04             	sub    $0x4,%esp
f012167d:	68 40 b5 13 f0       	push   $0xf013b540
f0121682:	68 80 05 00 00       	push   $0x580
f0121687:	68 5a b4 13 f0       	push   $0xf013b45a
f012168c:	e8 74 eb fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121691:	e8 4d 27 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0121696:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121699:	74 17                	je     f01216b2 <test_kfree+0x104c>
f012169b:	83 ec 04             	sub    $0x4,%esp
f012169e:	68 74 b4 13 f0       	push   $0xf013b474
f01216a3:	68 81 05 00 00       	push   $0x581
f01216a8:	68 5a b4 13 f0       	push   $0xf013b45a
f01216ad:	e8 53 eb fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f01216b2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01216b5:	e8 9f b9 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01216ba:	29 c3                	sub    %eax,%ebx
f01216bc:	89 d8                	mov    %ebx,%eax
f01216be:	83 f8 05             	cmp    $0x5,%eax
f01216c1:	74 17                	je     f01216da <test_kfree+0x1074>
f01216c3:	83 ec 04             	sub    $0x4,%esp
f01216c6:	68 dc b4 13 f0       	push   $0xf013b4dc
f01216cb:	68 82 05 00 00       	push   $0x582
f01216d0:	68 5a b4 13 f0       	push   $0xf013b45a
f01216d5:	e8 2b eb fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f01216da:	c7 85 08 fe ff ff ff 	movl   $0x4fff,-0x1f8(%ebp)
f01216e1:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f01216e4:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f01216ea:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f01216ed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01216f4:	eb 0e                	jmp    f0121704 <test_kfree+0x109e>
		{
			ptr[i] = 8 ;
f01216f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01216f9:	8b 45 80             	mov    -0x80(%ebp),%eax
f01216fc:	01 d0                	add    %edx,%eax
f01216fe:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0121701:	ff 45 f4             	incl   -0xc(%ebp)
f0121704:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012170a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012170d:	7f e7                	jg     f01216f6 <test_kfree+0x1090>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012170f:	e8 45 b9 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121714:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121717:	e8 c7 26 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f012171c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012171f:	83 ec 0c             	sub    $0xc,%esp
f0121722:	68 00 00 10 00       	push   $0x100000
f0121727:	e8 04 63 fe ff       	call   f0107a30 <kmalloc>
f012172c:	83 c4 10             	add    $0x10,%esp
f012172f:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121735:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012173b:	89 c1                	mov    %eax,%ecx
f012173d:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0121744:	10 00 00 
f0121747:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012174d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121752:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0121758:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012175e:	ba 00 00 00 00       	mov    $0x0,%edx
f0121763:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0121769:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012176f:	29 d0                	sub    %edx,%eax
f0121771:	89 c3                	mov    %eax,%ebx
f0121773:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f012177a:	10 00 00 
f012177d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0121782:	0f b6 d0             	movzbl %al,%edx
f0121785:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012178b:	01 d0                	add    %edx,%eax
f012178d:	48                   	dec    %eax
f012178e:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0121794:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012179a:	ba 00 00 00 00       	mov    $0x0,%edx
f012179f:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01217a5:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01217ab:	29 d0                	sub    %edx,%eax
f01217ad:	01 c3                	add    %eax,%ebx
f01217af:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01217b6:	10 00 00 
f01217b9:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01217be:	0f b6 c0             	movzbl %al,%eax
f01217c1:	c1 e0 04             	shl    $0x4,%eax
f01217c4:	89 c2                	mov    %eax,%edx
f01217c6:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01217cc:	01 d0                	add    %edx,%eax
f01217ce:	48                   	dec    %eax
f01217cf:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01217d5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01217db:	ba 00 00 00 00       	mov    $0x0,%edx
f01217e0:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f01217e6:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01217ec:	29 d0                	sub    %edx,%eax
f01217ee:	01 d8                	add    %ebx,%eax
f01217f0:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f01217f5:	39 c1                	cmp    %eax,%ecx
f01217f7:	74 17                	je     f0121810 <test_kfree+0x11aa>
f01217f9:	83 ec 04             	sub    $0x4,%esp
f01217fc:	68 40 b5 13 f0       	push   $0xf013b540
f0121801:	68 8e 05 00 00       	push   $0x58e
f0121806:	68 5a b4 13 f0       	push   $0xf013b45a
f012180b:	e8 f5 e9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121810:	e8 ce 25 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0121815:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121818:	74 17                	je     f0121831 <test_kfree+0x11cb>
f012181a:	83 ec 04             	sub    $0x4,%esp
f012181d:	68 74 b4 13 f0       	push   $0xf013b474
f0121822:	68 8f 05 00 00       	push   $0x58f
f0121827:	68 5a b4 13 f0       	push   $0xf013b45a
f012182c:	e8 d4 e9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121831:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121834:	e8 20 b8 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121839:	29 c3                	sub    %eax,%ebx
f012183b:	89 d8                	mov    %ebx,%eax
f012183d:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121842:	74 17                	je     f012185b <test_kfree+0x11f5>
f0121844:	83 ec 04             	sub    $0x4,%esp
f0121847:	68 dc b4 13 f0       	push   $0xf013b4dc
f012184c:	68 90 05 00 00       	push   $0x590
f0121851:	68 5a b4 13 f0       	push   $0xf013b45a
f0121856:	e8 aa e9 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f012185b:	c7 85 0c fe ff ff ff 	movl   $0xfffff,-0x1f4(%ebp)
f0121862:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0121865:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012186b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012186e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121875:	eb 0e                	jmp    f0121885 <test_kfree+0x121f>
		{
			ptr[i] = 9 ;
f0121877:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012187a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012187d:	01 d0                	add    %edx,%eax
f012187f:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0121882:	ff 45 f4             	incl   -0xc(%ebp)
f0121885:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012188b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012188e:	7f e7                	jg     f0121877 <test_kfree+0x1211>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f0121890:	e8 ac 66 ff ff       	call   f0117f41 <isKHeapPlacementStrategyNEXTFIT>
f0121895:	84 c0                	test   %al,%al
f0121897:	0f 84 ac 06 00 00    	je     f0121f49 <test_kfree+0x18e3>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f012189d:	e8 b7 b7 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01218a2:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01218a5:	e8 39 25 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01218aa:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f01218ad:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01218b4:	10 00 00 
f01218b7:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01218bd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01218c2:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01218c8:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01218ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01218d3:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01218d9:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01218df:	29 d0                	sub    %edx,%eax
f01218e1:	89 c1                	mov    %eax,%ecx
f01218e3:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01218ea:	10 00 00 
f01218ed:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01218f2:	0f b6 d0             	movzbl %al,%edx
f01218f5:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01218fb:	01 d0                	add    %edx,%eax
f01218fd:	48                   	dec    %eax
f01218fe:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0121904:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012190a:	ba 00 00 00 00       	mov    $0x0,%edx
f012190f:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0121915:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012191b:	29 d0                	sub    %edx,%eax
f012191d:	01 c1                	add    %eax,%ecx
f012191f:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0121926:	10 00 00 
f0121929:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012192e:	0f b6 c0             	movzbl %al,%eax
f0121931:	c1 e0 04             	shl    $0x4,%eax
f0121934:	89 c2                	mov    %eax,%edx
f0121936:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012193c:	01 d0                	add    %edx,%eax
f012193e:	48                   	dec    %eax
f012193f:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0121945:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012194b:	ba 00 00 00 00       	mov    $0x0,%edx
f0121950:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0121956:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012195c:	29 d0                	sub    %edx,%eax
f012195e:	01 c8                	add    %ecx,%eax
f0121960:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0121965:	29 c2                	sub    %eax,%edx
f0121967:	89 d0                	mov    %edx,%eax
f0121969:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f012196f:	83 ec 0c             	sub    $0xc,%esp
f0121972:	ff b5 b4 fe ff ff    	pushl  -0x14c(%ebp)
f0121978:	e8 b3 60 fe ff       	call   f0107a30 <kmalloc>
f012197d:	83 c4 10             	add    $0x10,%esp
f0121980:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121986:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012198c:	89 c1                	mov    %eax,%ecx
f012198e:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0121995:	10 00 00 
f0121998:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012199e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01219a3:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f01219a9:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01219af:	ba 00 00 00 00       	mov    $0x0,%edx
f01219b4:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f01219ba:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01219c0:	29 d0                	sub    %edx,%eax
f01219c2:	89 c3                	mov    %eax,%ebx
f01219c4:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f01219cb:	10 00 00 
f01219ce:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01219d3:	0f b6 d0             	movzbl %al,%edx
f01219d6:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01219dc:	01 d0                	add    %edx,%eax
f01219de:	48                   	dec    %eax
f01219df:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f01219e5:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01219eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01219f0:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f01219f6:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01219fc:	29 d0                	sub    %edx,%eax
f01219fe:	01 c3                	add    %eax,%ebx
f0121a00:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0121a07:	10 00 00 
f0121a0a:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0121a0f:	0f b6 c0             	movzbl %al,%eax
f0121a12:	c1 e0 04             	shl    $0x4,%eax
f0121a15:	89 c2                	mov    %eax,%edx
f0121a17:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0121a1d:	01 d0                	add    %edx,%eax
f0121a1f:	48                   	dec    %eax
f0121a20:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0121a26:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0121a2c:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a31:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0121a37:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0121a3d:	29 d0                	sub    %edx,%eax
f0121a3f:	01 d8                	add    %ebx,%eax
f0121a41:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f0121a46:	39 c1                	cmp    %eax,%ecx
f0121a48:	74 17                	je     f0121a61 <test_kfree+0x13fb>
f0121a4a:	83 ec 04             	sub    $0x4,%esp
f0121a4d:	68 40 b5 13 f0       	push   $0xf013b540
f0121a52:	68 9f 05 00 00       	push   $0x59f
f0121a57:	68 5a b4 13 f0       	push   $0xf013b45a
f0121a5c:	e8 a4 e7 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121a61:	e8 7d 23 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0121a66:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121a69:	74 17                	je     f0121a82 <test_kfree+0x141c>
f0121a6b:	83 ec 04             	sub    $0x4,%esp
f0121a6e:	68 74 b4 13 f0       	push   $0xf013b474
f0121a73:	68 a0 05 00 00       	push   $0x5a0
f0121a78:	68 5a b4 13 f0       	push   $0xf013b45a
f0121a7d:	e8 83 e7 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121a82:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121a85:	e8 cf b5 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121a8a:	29 c3                	sub    %eax,%ebx
f0121a8c:	89 da                	mov    %ebx,%edx
f0121a8e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0121a94:	c1 e8 0c             	shr    $0xc,%eax
f0121a97:	39 c2                	cmp    %eax,%edx
f0121a99:	74 17                	je     f0121ab2 <test_kfree+0x144c>
f0121a9b:	83 ec 04             	sub    $0x4,%esp
f0121a9e:	68 dc b4 13 f0       	push   $0xf013b4dc
f0121aa3:	68 a1 05 00 00       	push   $0x5a1
f0121aa8:	68 5a b4 13 f0       	push   $0xf013b45a
f0121aad:	e8 53 e7 fd ff       	call   f0100205 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f0121ab2:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0121ab8:	48                   	dec    %eax
f0121ab9:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
			ptr = (char*)ptr_allocations[10];
f0121abf:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0121ac5:	89 45 80             	mov    %eax,-0x80(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f0121ac8:	e8 8c b5 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121acd:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121ad0:	e8 0e 23 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0121ad5:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f0121ad8:	83 ec 0c             	sub    $0xc,%esp
f0121adb:	68 00 00 30 00       	push   $0x300000
f0121ae0:	e8 4b 5f fe ff       	call   f0107a30 <kmalloc>
f0121ae5:	83 c4 10             	add    $0x10,%esp
f0121ae8:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121aee:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0121af4:	89 c1                	mov    %eax,%ecx
f0121af6:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0121afd:	10 00 00 
f0121b00:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0121b06:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121b0b:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0121b11:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0121b17:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b1c:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0121b22:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0121b28:	29 d0                	sub    %edx,%eax
f0121b2a:	89 c3                	mov    %eax,%ebx
f0121b2c:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f0121b33:	10 00 00 
f0121b36:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0121b3b:	0f b6 d0             	movzbl %al,%edx
f0121b3e:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0121b44:	01 d0                	add    %edx,%eax
f0121b46:	48                   	dec    %eax
f0121b47:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f0121b4d:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0121b53:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b58:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f0121b5e:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0121b64:	29 d0                	sub    %edx,%eax
f0121b66:	01 c3                	add    %eax,%ebx
f0121b68:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0121b6f:	10 00 00 
f0121b72:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0121b77:	0f b6 c0             	movzbl %al,%eax
f0121b7a:	c1 e0 04             	shl    $0x4,%eax
f0121b7d:	89 c2                	mov    %eax,%edx
f0121b7f:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0121b85:	01 d0                	add    %edx,%eax
f0121b87:	48                   	dec    %eax
f0121b88:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0121b8e:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0121b94:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b99:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0121b9f:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0121ba5:	29 d0                	sub    %edx,%eax
f0121ba7:	01 d8                	add    %ebx,%eax
f0121ba9:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0121bae:	39 c1                	cmp    %eax,%ecx
f0121bb0:	74 17                	je     f0121bc9 <test_kfree+0x1563>
f0121bb2:	83 ec 04             	sub    $0x4,%esp
f0121bb5:	68 40 b5 13 f0       	push   $0xf013b540
f0121bba:	68 ae 05 00 00       	push   $0x5ae
f0121bbf:	68 5a b4 13 f0       	push   $0xf013b45a
f0121bc4:	e8 3c e6 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121bc9:	e8 15 22 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0121bce:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121bd1:	74 17                	je     f0121bea <test_kfree+0x1584>
f0121bd3:	83 ec 04             	sub    $0x4,%esp
f0121bd6:	68 74 b4 13 f0       	push   $0xf013b474
f0121bdb:	68 af 05 00 00       	push   $0x5af
f0121be0:	68 5a b4 13 f0       	push   $0xf013b45a
f0121be5:	e8 1b e6 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121bea:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121bed:	e8 67 b4 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121bf2:	29 c3                	sub    %eax,%ebx
f0121bf4:	89 d8                	mov    %ebx,%eax
f0121bf6:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121bfb:	74 17                	je     f0121c14 <test_kfree+0x15ae>
f0121bfd:	83 ec 04             	sub    $0x4,%esp
f0121c00:	68 dc b4 13 f0       	push   $0xf013b4dc
f0121c05:	68 b0 05 00 00       	push   $0x5b0
f0121c0a:	68 5a b4 13 f0       	push   $0xf013b45a
f0121c0f:	e8 f1 e5 fd ff       	call   f0100205 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f0121c14:	c7 85 14 fe ff ff ff 	movl   $0x2fffff,-0x1ec(%ebp)
f0121c1b:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f0121c1e:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0121c24:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f0121c27:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121c2e:	eb 0e                	jmp    f0121c3e <test_kfree+0x15d8>
			{
				ptr[i] = 8 ;
f0121c30:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121c33:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121c36:	01 d0                	add    %edx,%eax
f0121c38:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f0121c3b:	ff 45 f4             	incl   -0xc(%ebp)
f0121c3e:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0121c44:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121c47:	7f e7                	jg     f0121c30 <test_kfree+0x15ca>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f0121c49:	e8 0b b4 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121c4e:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121c51:	e8 8d 21 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0121c56:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f0121c59:	83 ec 0c             	sub    $0xc,%esp
f0121c5c:	68 00 08 00 00       	push   $0x800
f0121c61:	e8 ca 5d fe ff       	call   f0107a30 <kmalloc>
f0121c66:	83 c4 10             	add    $0x10,%esp
f0121c69:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121c6f:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0121c75:	89 c1                	mov    %eax,%ecx
f0121c77:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0121c7e:	10 00 00 
f0121c81:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0121c87:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121c8c:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0121c92:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0121c98:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c9d:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0121ca3:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0121ca9:	29 d0                	sub    %edx,%eax
f0121cab:	89 c3                	mov    %eax,%ebx
f0121cad:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0121cb4:	10 00 00 
f0121cb7:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0121cbc:	0f b6 d0             	movzbl %al,%edx
f0121cbf:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0121cc5:	01 d0                	add    %edx,%eax
f0121cc7:	48                   	dec    %eax
f0121cc8:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0121cce:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121cd4:	ba 00 00 00 00       	mov    $0x0,%edx
f0121cd9:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0121cdf:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121ce5:	29 d0                	sub    %edx,%eax
f0121ce7:	01 c3                	add    %eax,%ebx
f0121ce9:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0121cf0:	10 00 00 
f0121cf3:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0121cf8:	0f b6 c0             	movzbl %al,%eax
f0121cfb:	c1 e0 04             	shl    $0x4,%eax
f0121cfe:	89 c2                	mov    %eax,%edx
f0121d00:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0121d06:	01 d0                	add    %edx,%eax
f0121d08:	48                   	dec    %eax
f0121d09:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0121d0f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0121d15:	ba 00 00 00 00       	mov    $0x0,%edx
f0121d1a:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0121d20:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0121d26:	29 d0                	sub    %edx,%eax
f0121d28:	01 d8                	add    %ebx,%eax
f0121d2a:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0121d2f:	39 c1                	cmp    %eax,%ecx
f0121d31:	74 17                	je     f0121d4a <test_kfree+0x16e4>
f0121d33:	83 ec 04             	sub    $0x4,%esp
f0121d36:	68 40 b5 13 f0       	push   $0xf013b540
f0121d3b:	68 bc 05 00 00       	push   $0x5bc
f0121d40:	68 5a b4 13 f0       	push   $0xf013b45a
f0121d45:	e8 bb e4 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121d4a:	e8 94 20 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0121d4f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121d52:	74 17                	je     f0121d6b <test_kfree+0x1705>
f0121d54:	83 ec 04             	sub    $0x4,%esp
f0121d57:	68 74 b4 13 f0       	push   $0xf013b474
f0121d5c:	68 bd 05 00 00       	push   $0x5bd
f0121d61:	68 5a b4 13 f0       	push   $0xf013b45a
f0121d66:	e8 9a e4 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121d6b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121d6e:	e8 e6 b2 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121d73:	29 c3                	sub    %eax,%ebx
f0121d75:	89 d8                	mov    %ebx,%eax
f0121d77:	83 f8 01             	cmp    $0x1,%eax
f0121d7a:	74 17                	je     f0121d93 <test_kfree+0x172d>
f0121d7c:	83 ec 04             	sub    $0x4,%esp
f0121d7f:	68 dc b4 13 f0       	push   $0xf013b4dc
f0121d84:	68 be 05 00 00       	push   $0x5be
f0121d89:	68 5a b4 13 f0       	push   $0xf013b45a
f0121d8e:	e8 72 e4 fd ff       	call   f0100205 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f0121d93:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f0121d9a:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f0121d9d:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0121da3:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f0121da6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121dad:	eb 0e                	jmp    f0121dbd <test_kfree+0x1757>
			{
				ptr[i] = 9 ;
f0121daf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121db2:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121db5:	01 d0                	add    %edx,%eax
f0121db7:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f0121dba:	ff 45 f4             	incl   -0xc(%ebp)
f0121dbd:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0121dc3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121dc6:	7f e7                	jg     f0121daf <test_kfree+0x1749>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f0121dc8:	e8 8c b2 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121dcd:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121dd0:	e8 0e 20 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0121dd5:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f0121dd8:	83 ec 0c             	sub    $0xc,%esp
f0121ddb:	68 00 00 10 00       	push   $0x100000
f0121de0:	e8 4b 5c fe ff       	call   f0107a30 <kmalloc>
f0121de5:	83 c4 10             	add    $0x10,%esp
f0121de8:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121dee:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121df4:	89 c1                	mov    %eax,%ecx
f0121df6:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0121dfd:	10 00 00 
f0121e00:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0121e06:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121e0b:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0121e11:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0121e17:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e1c:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0121e22:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0121e28:	29 d0                	sub    %edx,%eax
f0121e2a:	89 c3                	mov    %eax,%ebx
f0121e2c:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f0121e33:	10 00 00 
f0121e36:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0121e3b:	0f b6 d0             	movzbl %al,%edx
f0121e3e:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0121e44:	01 d0                	add    %edx,%eax
f0121e46:	48                   	dec    %eax
f0121e47:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f0121e4d:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0121e53:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e58:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f0121e5e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0121e64:	29 d0                	sub    %edx,%eax
f0121e66:	01 c3                	add    %eax,%ebx
f0121e68:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f0121e6f:	10 00 00 
f0121e72:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0121e77:	0f b6 c0             	movzbl %al,%eax
f0121e7a:	c1 e0 04             	shl    $0x4,%eax
f0121e7d:	89 c2                	mov    %eax,%edx
f0121e7f:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0121e85:	01 d0                	add    %edx,%eax
f0121e87:	48                   	dec    %eax
f0121e88:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f0121e8e:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0121e94:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e99:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f0121e9f:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0121ea5:	29 d0                	sub    %edx,%eax
f0121ea7:	01 d8                	add    %ebx,%eax
f0121ea9:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0121eae:	39 c1                	cmp    %eax,%ecx
f0121eb0:	74 17                	je     f0121ec9 <test_kfree+0x1863>
f0121eb2:	83 ec 04             	sub    $0x4,%esp
f0121eb5:	68 40 b5 13 f0       	push   $0xf013b540
f0121eba:	68 ca 05 00 00       	push   $0x5ca
f0121ebf:	68 5a b4 13 f0       	push   $0xf013b45a
f0121ec4:	e8 3c e3 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ec9:	e8 15 1f fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0121ece:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121ed1:	74 17                	je     f0121eea <test_kfree+0x1884>
f0121ed3:	83 ec 04             	sub    $0x4,%esp
f0121ed6:	68 74 b4 13 f0       	push   $0xf013b474
f0121edb:	68 cb 05 00 00       	push   $0x5cb
f0121ee0:	68 5a b4 13 f0       	push   $0xf013b45a
f0121ee5:	e8 1b e3 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121eea:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121eed:	e8 67 b1 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121ef2:	29 c3                	sub    %eax,%ebx
f0121ef4:	89 d8                	mov    %ebx,%eax
f0121ef6:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121efb:	74 17                	je     f0121f14 <test_kfree+0x18ae>
f0121efd:	83 ec 04             	sub    $0x4,%esp
f0121f00:	68 dc b4 13 f0       	push   $0xf013b4dc
f0121f05:	68 cc 05 00 00       	push   $0x5cc
f0121f0a:	68 5a b4 13 f0       	push   $0xf013b45a
f0121f0f:	e8 f1 e2 fd ff       	call   f0100205 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f0121f14:	c7 85 1c fe ff ff ff 	movl   $0xfffff,-0x1e4(%ebp)
f0121f1b:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f0121f1e:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121f24:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f0121f27:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121f2e:	eb 0e                	jmp    f0121f3e <test_kfree+0x18d8>
			{
				ptr[i] = 10 ;
f0121f30:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121f33:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121f36:	01 d0                	add    %edx,%eax
f0121f38:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f0121f3b:	ff 45 f4             	incl   -0xc(%ebp)
f0121f3e:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0121f44:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121f47:	7f e7                	jg     f0121f30 <test_kfree+0x18ca>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f0121f49:	83 ec 0c             	sub    $0xc,%esp
f0121f4c:	68 7a bc 13 f0       	push   $0xf013bc7a
f0121f51:	e8 b8 ed fd ff       	call   f0100d0e <cprintf>
f0121f56:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0121f59:	e8 fb b0 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121f5e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121f61:	e8 7d 1e fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0121f66:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0121f69:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0121f6f:	83 ec 0c             	sub    $0xc,%esp
f0121f72:	50                   	push   %eax
f0121f73:	e8 a1 5b fe ff       	call   f0107b19 <kfree>
f0121f78:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121f7b:	e8 63 1e fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0121f80:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121f83:	74 17                	je     f0121f9c <test_kfree+0x1936>
f0121f85:	83 ec 04             	sub    $0x4,%esp
f0121f88:	68 74 b4 13 f0       	push   $0xf013b474
f0121f8d:	68 dd 05 00 00       	push   $0x5dd
f0121f92:	68 5a b4 13 f0       	push   $0xf013b45a
f0121f97:	e8 69 e2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0121f9c:	e8 b8 b0 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121fa1:	89 c2                	mov    %eax,%edx
f0121fa3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121fa6:	29 c2                	sub    %eax,%edx
f0121fa8:	89 d0                	mov    %edx,%eax
f0121faa:	83 f8 02             	cmp    $0x2,%eax
f0121fad:	74 17                	je     f0121fc6 <test_kfree+0x1960>
f0121faf:	83 ec 04             	sub    $0x4,%esp
f0121fb2:	68 e4 bb 13 f0       	push   $0xf013bbe4
f0121fb7:	68 de 05 00 00       	push   $0x5de
f0121fbc:	68 5a b4 13 f0       	push   $0xf013b45a
f0121fc1:	e8 3f e2 fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0121fc6:	e8 8e b0 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0121fcb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121fce:	e8 10 1e fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0121fd3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0121fd6:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0121fdc:	83 ec 0c             	sub    $0xc,%esp
f0121fdf:	50                   	push   %eax
f0121fe0:	e8 34 5b fe ff       	call   f0107b19 <kfree>
f0121fe5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121fe8:	e8 f6 1d fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0121fed:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121ff0:	74 17                	je     f0122009 <test_kfree+0x19a3>
f0121ff2:	83 ec 04             	sub    $0x4,%esp
f0121ff5:	68 74 b4 13 f0       	push   $0xf013b474
f0121ffa:	68 e4 05 00 00       	push   $0x5e4
f0121fff:	68 5a b4 13 f0       	push   $0xf013b45a
f0122004:	e8 fc e1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122009:	e8 4b b0 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012200e:	89 c2                	mov    %eax,%edx
f0122010:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122013:	29 c2                	sub    %eax,%edx
f0122015:	89 d0                	mov    %edx,%eax
f0122017:	3d 00 03 00 00       	cmp    $0x300,%eax
f012201c:	74 17                	je     f0122035 <test_kfree+0x19cf>
f012201e:	83 ec 04             	sub    $0x4,%esp
f0122021:	68 e4 bb 13 f0       	push   $0xf013bbe4
f0122026:	68 e5 05 00 00       	push   $0x5e5
f012202b:	68 5a b4 13 f0       	push   $0xf013b45a
f0122030:	e8 d0 e1 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122035:	e8 1f b0 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012203a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012203d:	e8 a1 1d fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0122042:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0122045:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f012204b:	83 ec 0c             	sub    $0xc,%esp
f012204e:	50                   	push   %eax
f012204f:	e8 c5 5a fe ff       	call   f0107b19 <kfree>
f0122054:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122057:	e8 87 1d fe ff       	call   f0103de3 <pf_calculate_free_frames>
f012205c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012205f:	74 17                	je     f0122078 <test_kfree+0x1a12>
f0122061:	83 ec 04             	sub    $0x4,%esp
f0122064:	68 74 b4 13 f0       	push   $0xf013b474
f0122069:	68 eb 05 00 00       	push   $0x5eb
f012206e:	68 5a b4 13 f0       	push   $0xf013b45a
f0122073:	e8 8d e1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0122078:	e8 dc af fe ff       	call   f010d059 <sys_calculate_free_frames>
f012207d:	89 c2                	mov    %eax,%edx
f012207f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122082:	29 c2                	sub    %eax,%edx
f0122084:	89 d0                	mov    %edx,%eax
f0122086:	83 f8 01             	cmp    $0x1,%eax
f0122089:	74 17                	je     f01220a2 <test_kfree+0x1a3c>
f012208b:	83 ec 04             	sub    $0x4,%esp
f012208e:	68 e4 bb 13 f0       	push   $0xf013bbe4
f0122093:	68 ec 05 00 00       	push   $0x5ec
f0122098:	68 5a b4 13 f0       	push   $0xf013b45a
f012209d:	e8 63 e1 fd ff       	call   f0100205 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f01220a2:	e8 b2 af fe ff       	call   f010d059 <sys_calculate_free_frames>
f01220a7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01220aa:	e8 34 1d fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01220af:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f01220b2:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f01220b8:	83 ec 0c             	sub    $0xc,%esp
f01220bb:	50                   	push   %eax
f01220bc:	e8 58 5a fe ff       	call   f0107b19 <kfree>
f01220c1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01220c4:	e8 1a 1d fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01220c9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01220cc:	74 17                	je     f01220e5 <test_kfree+0x1a7f>
f01220ce:	83 ec 04             	sub    $0x4,%esp
f01220d1:	68 74 b4 13 f0       	push   $0xf013b474
f01220d6:	68 f2 05 00 00       	push   $0x5f2
f01220db:	68 5a b4 13 f0       	push   $0xf013b45a
f01220e0:	e8 20 e1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f01220e5:	e8 6f af fe ff       	call   f010d059 <sys_calculate_free_frames>
f01220ea:	89 c2                	mov    %eax,%edx
f01220ec:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01220ef:	29 c2                	sub    %eax,%edx
f01220f1:	89 d0                	mov    %edx,%eax
f01220f3:	83 f8 04             	cmp    $0x4,%eax
f01220f6:	74 17                	je     f012210f <test_kfree+0x1aa9>
f01220f8:	83 ec 04             	sub    $0x4,%esp
f01220fb:	68 e4 bb 13 f0       	push   $0xf013bbe4
f0122100:	68 f3 05 00 00       	push   $0x5f3
f0122105:	68 5a b4 13 f0       	push   $0xf013b45a
f012210a:	e8 f6 e0 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012210f:	e8 45 af fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122114:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122117:	e8 c7 1c fe ff       	call   f0103de3 <pf_calculate_free_frames>
f012211c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f012211f:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0122125:	83 ec 0c             	sub    $0xc,%esp
f0122128:	50                   	push   %eax
f0122129:	e8 eb 59 fe ff       	call   f0107b19 <kfree>
f012212e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122131:	e8 ad 1c fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0122136:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122139:	74 17                	je     f0122152 <test_kfree+0x1aec>
f012213b:	83 ec 04             	sub    $0x4,%esp
f012213e:	68 74 b4 13 f0       	push   $0xf013b474
f0122143:	68 f9 05 00 00       	push   $0x5f9
f0122148:	68 5a b4 13 f0       	push   $0xf013b45a
f012214d:	e8 b3 e0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0122152:	e8 02 af fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122157:	89 c2                	mov    %eax,%edx
f0122159:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012215c:	29 c2                	sub    %eax,%edx
f012215e:	89 d0                	mov    %edx,%eax
f0122160:	83 f8 05             	cmp    $0x5,%eax
f0122163:	74 17                	je     f012217c <test_kfree+0x1b16>
f0122165:	83 ec 04             	sub    $0x4,%esp
f0122168:	68 e4 bb 13 f0       	push   $0xf013bbe4
f012216d:	68 fa 05 00 00       	push   $0x5fa
f0122172:	68 5a b4 13 f0       	push   $0xf013b45a
f0122177:	e8 89 e0 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012217c:	e8 d8 ae fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122181:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122184:	e8 5a 1c fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0122189:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f012218c:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0122192:	83 ec 0c             	sub    $0xc,%esp
f0122195:	50                   	push   %eax
f0122196:	e8 7e 59 fe ff       	call   f0107b19 <kfree>
f012219b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012219e:	e8 40 1c fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01221a3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01221a6:	74 17                	je     f01221bf <test_kfree+0x1b59>
f01221a8:	83 ec 04             	sub    $0x4,%esp
f01221ab:	68 74 b4 13 f0       	push   $0xf013b474
f01221b0:	68 00 06 00 00       	push   $0x600
f01221b5:	68 5a b4 13 f0       	push   $0xf013b45a
f01221ba:	e8 46 e0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f01221bf:	e8 95 ae fe ff       	call   f010d059 <sys_calculate_free_frames>
f01221c4:	89 c2                	mov    %eax,%edx
f01221c6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01221c9:	29 c2                	sub    %eax,%edx
f01221cb:	89 d0                	mov    %edx,%eax
f01221cd:	3d 00 01 00 00       	cmp    $0x100,%eax
f01221d2:	74 17                	je     f01221eb <test_kfree+0x1b85>
f01221d4:	83 ec 04             	sub    $0x4,%esp
f01221d7:	68 e4 bb 13 f0       	push   $0xf013bbe4
f01221dc:	68 01 06 00 00       	push   $0x601
f01221e1:	68 5a b4 13 f0       	push   $0xf013b45a
f01221e6:	e8 1a e0 fd ff       	call   f0100205 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f01221eb:	e8 51 5d ff ff       	call   f0117f41 <isKHeapPlacementStrategyNEXTFIT>
f01221f0:	84 c0                	test   %al,%al
f01221f2:	0f 84 80 02 00 00    	je     f0122478 <test_kfree+0x1e12>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f01221f8:	e8 5c ae fe ff       	call   f010d059 <sys_calculate_free_frames>
f01221fd:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0122200:	e8 de 1b fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0122205:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f0122208:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012220e:	83 ec 0c             	sub    $0xc,%esp
f0122211:	50                   	push   %eax
f0122212:	e8 02 59 fe ff       	call   f0107b19 <kfree>
f0122217:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f012221a:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f0122221:	10 00 00 
f0122224:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012222a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012222f:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f0122235:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012223b:	ba 00 00 00 00       	mov    $0x0,%edx
f0122240:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f0122246:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012224c:	29 d0                	sub    %edx,%eax
f012224e:	89 c1                	mov    %eax,%ecx
f0122250:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f0122257:	10 00 00 
f012225a:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012225f:	0f b6 d0             	movzbl %al,%edx
f0122262:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0122268:	01 d0                	add    %edx,%eax
f012226a:	48                   	dec    %eax
f012226b:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f0122271:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0122277:	ba 00 00 00 00       	mov    $0x0,%edx
f012227c:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f0122282:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0122288:	29 d0                	sub    %edx,%eax
f012228a:	01 c1                	add    %eax,%ecx
f012228c:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0122293:	10 00 00 
f0122296:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012229b:	0f b6 c0             	movzbl %al,%eax
f012229e:	c1 e0 04             	shl    $0x4,%eax
f01222a1:	89 c2                	mov    %eax,%edx
f01222a3:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01222a9:	01 d0                	add    %edx,%eax
f01222ab:	48                   	dec    %eax
f01222ac:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f01222b2:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01222b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01222bd:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f01222c3:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01222c9:	29 d0                	sub    %edx,%eax
f01222cb:	01 c8                	add    %ecx,%eax
f01222cd:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f01222d2:	29 c2                	sub    %eax,%edx
f01222d4:	89 d0                	mov    %edx,%eax
f01222d6:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01222dc:	e8 02 1b fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01222e1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01222e4:	74 17                	je     f01222fd <test_kfree+0x1c97>
f01222e6:	83 ec 04             	sub    $0x4,%esp
f01222e9:	68 74 b4 13 f0       	push   $0xf013b474
f01222ee:	68 0b 06 00 00       	push   $0x60b
f01222f3:	68 5a b4 13 f0       	push   $0xf013b45a
f01222f8:	e8 08 df fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f01222fd:	e8 57 ad fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122302:	89 c2                	mov    %eax,%edx
f0122304:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122307:	29 c2                	sub    %eax,%edx
f0122309:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012230f:	c1 e8 0c             	shr    $0xc,%eax
f0122312:	39 c2                	cmp    %eax,%edx
f0122314:	74 17                	je     f012232d <test_kfree+0x1cc7>
f0122316:	83 ec 04             	sub    $0x4,%esp
f0122319:	68 e4 bb 13 f0       	push   $0xf013bbe4
f012231e:	68 0c 06 00 00       	push   $0x60c
f0122323:	68 5a b4 13 f0       	push   $0xf013b45a
f0122328:	e8 d8 de fd ff       	call   f0100205 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f012232d:	e8 27 ad fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122332:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0122335:	e8 a9 1a fe ff       	call   f0103de3 <pf_calculate_free_frames>
f012233a:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f012233d:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0122343:	83 ec 0c             	sub    $0xc,%esp
f0122346:	50                   	push   %eax
f0122347:	e8 cd 57 fe ff       	call   f0107b19 <kfree>
f012234c:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012234f:	e8 8f 1a fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0122354:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122357:	74 17                	je     f0122370 <test_kfree+0x1d0a>
f0122359:	83 ec 04             	sub    $0x4,%esp
f012235c:	68 74 b4 13 f0       	push   $0xf013b474
f0122361:	68 12 06 00 00       	push   $0x612
f0122366:	68 5a b4 13 f0       	push   $0xf013b45a
f012236b:	e8 95 de fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122370:	e8 e4 ac fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122375:	89 c2                	mov    %eax,%edx
f0122377:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012237a:	29 c2                	sub    %eax,%edx
f012237c:	89 d0                	mov    %edx,%eax
f012237e:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122383:	74 17                	je     f012239c <test_kfree+0x1d36>
f0122385:	83 ec 04             	sub    $0x4,%esp
f0122388:	68 e4 bb 13 f0       	push   $0xf013bbe4
f012238d:	68 13 06 00 00       	push   $0x613
f0122392:	68 5a b4 13 f0       	push   $0xf013b45a
f0122397:	e8 69 de fd ff       	call   f0100205 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f012239c:	e8 b8 ac fe ff       	call   f010d059 <sys_calculate_free_frames>
f01223a1:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01223a4:	e8 3a 1a fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01223a9:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f01223ac:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f01223b2:	83 ec 0c             	sub    $0xc,%esp
f01223b5:	50                   	push   %eax
f01223b6:	e8 5e 57 fe ff       	call   f0107b19 <kfree>
f01223bb:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01223be:	e8 20 1a fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01223c3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01223c6:	74 17                	je     f01223df <test_kfree+0x1d79>
f01223c8:	83 ec 04             	sub    $0x4,%esp
f01223cb:	68 74 b4 13 f0       	push   $0xf013b474
f01223d0:	68 19 06 00 00       	push   $0x619
f01223d5:	68 5a b4 13 f0       	push   $0xf013b45a
f01223da:	e8 26 de fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01223df:	e8 75 ac fe ff       	call   f010d059 <sys_calculate_free_frames>
f01223e4:	89 c2                	mov    %eax,%edx
f01223e6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01223e9:	29 c2                	sub    %eax,%edx
f01223eb:	89 d0                	mov    %edx,%eax
f01223ed:	83 f8 01             	cmp    $0x1,%eax
f01223f0:	74 17                	je     f0122409 <test_kfree+0x1da3>
f01223f2:	83 ec 04             	sub    $0x4,%esp
f01223f5:	68 e4 bb 13 f0       	push   $0xf013bbe4
f01223fa:	68 1a 06 00 00       	push   $0x61a
f01223ff:	68 5a b4 13 f0       	push   $0xf013b45a
f0122404:	e8 fc dd fd ff       	call   f0100205 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f0122409:	e8 4b ac fe ff       	call   f010d059 <sys_calculate_free_frames>
f012240e:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0122411:	e8 cd 19 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0122416:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f0122419:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012241f:	83 ec 0c             	sub    $0xc,%esp
f0122422:	50                   	push   %eax
f0122423:	e8 f1 56 fe ff       	call   f0107b19 <kfree>
f0122428:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012242b:	e8 b3 19 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0122430:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122433:	74 17                	je     f012244c <test_kfree+0x1de6>
f0122435:	83 ec 04             	sub    $0x4,%esp
f0122438:	68 74 b4 13 f0       	push   $0xf013b474
f012243d:	68 20 06 00 00       	push   $0x620
f0122442:	68 5a b4 13 f0       	push   $0xf013b45a
f0122447:	e8 b9 dd fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012244c:	e8 08 ac fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122451:	89 c2                	mov    %eax,%edx
f0122453:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122456:	29 c2                	sub    %eax,%edx
f0122458:	89 d0                	mov    %edx,%eax
f012245a:	3d 00 01 00 00       	cmp    $0x100,%eax
f012245f:	74 17                	je     f0122478 <test_kfree+0x1e12>
f0122461:	83 ec 04             	sub    $0x4,%esp
f0122464:	68 e4 bb 13 f0       	push   $0xf013bbe4
f0122469:	68 21 06 00 00       	push   $0x621
f012246e:	68 5a b4 13 f0       	push   $0xf013b45a
f0122473:	e8 8d dd fd ff       	call   f0100205 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0122478:	e8 dc ab fe ff       	call   f010d059 <sys_calculate_free_frames>
f012247d:	89 c2                	mov    %eax,%edx
f012247f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0122482:	39 c2                	cmp    %eax,%edx
f0122484:	74 17                	je     f012249d <test_kfree+0x1e37>
f0122486:	83 ec 04             	sub    $0x4,%esp
f0122489:	68 84 bc 13 f0       	push   $0xf013bc84
f012248e:	68 24 06 00 00       	push   $0x624
f0122493:	68 5a b4 13 f0       	push   $0xf013b45a
f0122498:	e8 68 dd fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b60%");
f012249d:	83 ec 0c             	sub    $0xc,%esp
f01224a0:	68 b8 bc 13 f0       	push   $0xf013bcb8
f01224a5:	e8 64 e8 fd ff       	call   f0100d0e <cprintf>
f01224aa:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01224ad:	83 ec 0c             	sub    $0xc,%esp
f01224b0:	6a 03                	push   $0x3
f01224b2:	e8 42 b0 fe ff       	call   f010d4f9 <sys_bypassPageFault>
f01224b7:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f01224ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01224c1:	e9 82 00 00 00       	jmp    f0122548 <test_kfree+0x1ee2>
		{
			ptr = (char *) ptr_allocations[i];
f01224c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01224c9:	8b 84 85 48 fd ff ff 	mov    -0x2b8(%ebp,%eax,4),%eax
f01224d0:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f01224d3:	8b 45 80             	mov    -0x80(%ebp),%eax
f01224d6:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01224d9:	e8 09 b0 fe ff       	call   f010d4e7 <sys_rcr2>
f01224de:	89 c2                	mov    %eax,%edx
f01224e0:	8b 45 80             	mov    -0x80(%ebp),%eax
f01224e3:	39 c2                	cmp    %eax,%edx
f01224e5:	74 17                	je     f01224fe <test_kfree+0x1e98>
f01224e7:	83 ec 04             	sub    $0x4,%esp
f01224ea:	68 c0 bc 13 f0       	push   $0xf013bcc0
f01224ef:	68 33 06 00 00       	push   $0x633
f01224f4:	68 5a b4 13 f0       	push   $0xf013b45a
f01224f9:	e8 07 dd fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f01224fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122501:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f0122508:	89 c2                	mov    %eax,%edx
f012250a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012250d:	01 d0                	add    %edx,%eax
f012250f:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122512:	e8 d0 af fe ff       	call   f010d4e7 <sys_rcr2>
f0122517:	89 c2                	mov    %eax,%edx
f0122519:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012251c:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f0122523:	89 c1                	mov    %eax,%ecx
f0122525:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122528:	01 c8                	add    %ecx,%eax
f012252a:	39 c2                	cmp    %eax,%edx
f012252c:	74 17                	je     f0122545 <test_kfree+0x1edf>
f012252e:	83 ec 04             	sub    $0x4,%esp
f0122531:	68 c0 bc 13 f0       	push   $0xf013bcc0
f0122536:	68 35 06 00 00       	push   $0x635
f012253b:	68 5a b4 13 f0       	push   $0xf013b45a
f0122540:	e8 c0 dc fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0122545:	ff 45 f4             	incl   -0xc(%ebp)
f0122548:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f012254c:	0f 8e 74 ff ff ff    	jle    f01224c6 <test_kfree+0x1e60>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0122552:	83 ec 0c             	sub    $0xc,%esp
f0122555:	6a 00                	push   $0x0
f0122557:	e8 9d af fe ff       	call   f010d4f9 <sys_bypassPageFault>
f012255c:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f012255f:	83 ec 0c             	sub    $0xc,%esp
f0122562:	68 05 bd 13 f0       	push   $0xf013bd05
f0122567:	e8 a2 e7 fd ff       	call   f0100d0e <cprintf>
f012256c:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012256f:	e8 e5 aa fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122574:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122577:	e8 67 18 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f012257c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f012257f:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0122585:	83 ec 0c             	sub    $0xc,%esp
f0122588:	50                   	push   %eax
f0122589:	e8 8b 55 fe ff       	call   f0107b19 <kfree>
f012258e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122591:	e8 4d 18 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0122596:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122599:	74 17                	je     f01225b2 <test_kfree+0x1f4c>
f012259b:	83 ec 04             	sub    $0x4,%esp
f012259e:	68 74 b4 13 f0       	push   $0xf013b474
f01225a3:	68 43 06 00 00       	push   $0x643
f01225a8:	68 5a b4 13 f0       	push   $0xf013b45a
f01225ad:	e8 53 dc fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01225b2:	e8 a2 aa fe ff       	call   f010d059 <sys_calculate_free_frames>
f01225b7:	89 c2                	mov    %eax,%edx
f01225b9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01225bc:	39 c2                	cmp    %eax,%edx
f01225be:	74 17                	je     f01225d7 <test_kfree+0x1f71>
f01225c0:	83 ec 04             	sub    $0x4,%esp
f01225c3:	68 0c bd 13 f0       	push   $0xf013bd0c
f01225c8:	68 44 06 00 00       	push   $0x644
f01225cd:	68 5a b4 13 f0       	push   $0xf013b45a
f01225d2:	e8 2e dc fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01225d7:	e8 7d aa fe ff       	call   f010d059 <sys_calculate_free_frames>
f01225dc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01225df:	e8 ff 17 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01225e4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f01225e7:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f01225ed:	83 ec 0c             	sub    $0xc,%esp
f01225f0:	50                   	push   %eax
f01225f1:	e8 23 55 fe ff       	call   f0107b19 <kfree>
f01225f6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01225f9:	e8 e5 17 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01225fe:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122601:	74 17                	je     f012261a <test_kfree+0x1fb4>
f0122603:	83 ec 04             	sub    $0x4,%esp
f0122606:	68 74 b4 13 f0       	push   $0xf013b474
f012260b:	68 4a 06 00 00       	push   $0x64a
f0122610:	68 5a b4 13 f0       	push   $0xf013b45a
f0122615:	e8 eb db fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012261a:	e8 3a aa fe ff       	call   f010d059 <sys_calculate_free_frames>
f012261f:	89 c2                	mov    %eax,%edx
f0122621:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122624:	39 c2                	cmp    %eax,%edx
f0122626:	74 17                	je     f012263f <test_kfree+0x1fd9>
f0122628:	83 ec 04             	sub    $0x4,%esp
f012262b:	68 0c bd 13 f0       	push   $0xf013bd0c
f0122630:	68 4b 06 00 00       	push   $0x64b
f0122635:	68 5a b4 13 f0       	push   $0xf013b45a
f012263a:	e8 c6 db fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012263f:	e8 15 aa fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122644:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122647:	e8 97 17 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f012264c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f012264f:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0122655:	83 ec 0c             	sub    $0xc,%esp
f0122658:	50                   	push   %eax
f0122659:	e8 bb 54 fe ff       	call   f0107b19 <kfree>
f012265e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122661:	e8 7d 17 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0122666:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122669:	74 17                	je     f0122682 <test_kfree+0x201c>
f012266b:	83 ec 04             	sub    $0x4,%esp
f012266e:	68 74 b4 13 f0       	push   $0xf013b474
f0122673:	68 51 06 00 00       	push   $0x651
f0122678:	68 5a b4 13 f0       	push   $0xf013b45a
f012267d:	e8 83 db fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122682:	e8 d2 a9 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122687:	89 c2                	mov    %eax,%edx
f0122689:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012268c:	39 c2                	cmp    %eax,%edx
f012268e:	74 17                	je     f01226a7 <test_kfree+0x2041>
f0122690:	83 ec 04             	sub    $0x4,%esp
f0122693:	68 0c bd 13 f0       	push   $0xf013bd0c
f0122698:	68 52 06 00 00       	push   $0x652
f012269d:	68 5a b4 13 f0       	push   $0xf013b45a
f01226a2:	e8 5e db fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01226a7:	e8 ad a9 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01226ac:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01226af:	e8 2f 17 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01226b4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01226b7:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01226bd:	83 ec 0c             	sub    $0xc,%esp
f01226c0:	50                   	push   %eax
f01226c1:	e8 53 54 fe ff       	call   f0107b19 <kfree>
f01226c6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01226c9:	e8 15 17 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01226ce:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01226d1:	74 17                	je     f01226ea <test_kfree+0x2084>
f01226d3:	83 ec 04             	sub    $0x4,%esp
f01226d6:	68 74 b4 13 f0       	push   $0xf013b474
f01226db:	68 58 06 00 00       	push   $0x658
f01226e0:	68 5a b4 13 f0       	push   $0xf013b45a
f01226e5:	e8 1b db fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01226ea:	e8 6a a9 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01226ef:	89 c2                	mov    %eax,%edx
f01226f1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01226f4:	39 c2                	cmp    %eax,%edx
f01226f6:	74 17                	je     f012270f <test_kfree+0x20a9>
f01226f8:	83 ec 04             	sub    $0x4,%esp
f01226fb:	68 0c bd 13 f0       	push   $0xf013bd0c
f0122700:	68 59 06 00 00       	push   $0x659
f0122705:	68 5a b4 13 f0       	push   $0xf013b45a
f012270a:	e8 f6 da fd ff       	call   f0100205 <_panic>

	}
	cprintf("\b\b\b85%");
f012270f:	83 ec 0c             	sub    $0xc,%esp
f0122712:	68 53 bd 13 f0       	push   $0xf013bd53
f0122717:	e8 f2 e5 fd ff       	call   f0100d0e <cprintf>
f012271c:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012271f:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0122726:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012272d:	eb 48                	jmp    f0122777 <test_kfree+0x2111>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f012272f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0122732:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0122737:	83 ec 04             	sub    $0x4,%esp
f012273a:	8d 8d 44 fd ff ff    	lea    -0x2bc(%ebp),%ecx
f0122740:	51                   	push   %ecx
f0122741:	52                   	push   %edx
f0122742:	50                   	push   %eax
f0122743:	e8 84 43 fe ff       	call   f0106acc <get_page_table>
f0122748:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012274b:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0122751:	85 c0                	test   %eax,%eax
f0122753:	75 17                	jne    f012276c <test_kfree+0x2106>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0122755:	83 ec 04             	sub    $0x4,%esp
f0122758:	68 5c bd 13 f0       	push   $0xf013bd5c
f012275d:	68 67 06 00 00       	push   $0x667
f0122762:	68 5a b4 13 f0       	push   $0xf013b45a
f0122767:	e8 99 da fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012276c:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0122773:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0122777:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012277b:	78 b2                	js     f012272f <test_kfree+0x20c9>
f012277d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122781:	7f 09                	jg     f012278c <test_kfree+0x2126>
f0122783:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f012278a:	76 a3                	jbe    f012272f <test_kfree+0x20c9>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f012278c:	83 ec 0c             	sub    $0xc,%esp
f012278f:	68 3e b6 13 f0       	push   $0xf013b63e
f0122794:	e8 75 e5 fd ff       	call   f0100d0e <cprintf>
f0122799:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f012279c:	83 ec 0c             	sub    $0xc,%esp
f012279f:	68 c4 bd 13 f0       	push   $0xf013bdc4
f01227a4:	e8 65 e5 fd ff       	call   f0100d0e <cprintf>
f01227a9:	83 c4 10             	add    $0x10,%esp

	return 1;
f01227ac:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01227b1:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01227b4:	5b                   	pop    %ebx
f01227b5:	5f                   	pop    %edi
f01227b6:	5d                   	pop    %ebp
f01227b7:	c3                   	ret    

f01227b8 <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f01227b8:	55                   	push   %ebp
f01227b9:	89 e5                	mov    %esp,%ebp
f01227bb:	57                   	push   %edi
f01227bc:	53                   	push   %ebx
f01227bd:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f01227c3:	83 ec 0c             	sub    $0xc,%esp
f01227c6:	68 9c b3 13 f0       	push   $0xf013b39c
f01227cb:	e8 3e e5 fd ff       	call   f0100d0e <cprintf>
f01227d0:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01227d3:	83 ec 0c             	sub    $0xc,%esp
f01227d6:	68 cc b3 13 f0       	push   $0xf013b3cc
f01227db:	e8 2e e5 fd ff       	call   f0100d0e <cprintf>
f01227e0:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01227e3:	83 ec 0c             	sub    $0xc,%esp
f01227e6:	68 9c b3 13 f0       	push   $0xf013b39c
f01227eb:	e8 1e e5 fd ff       	call   f0100d0e <cprintf>
f01227f0:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01227f3:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f01227f7:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f01227fb:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0122801:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0122807:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f012280e:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0122815:	e8 3f a8 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012281a:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012281d:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0122823:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122828:	b8 00 00 00 00       	mov    $0x0,%eax
f012282d:	89 d7                	mov    %edx,%edi
f012282f:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0122831:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0122837:	b9 14 00 00 00       	mov    $0x14,%ecx
f012283c:	b8 00 00 00 00       	mov    $0x0,%eax
f0122841:	89 d7                	mov    %edx,%edi
f0122843:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0122845:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f012284b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122850:	b8 00 00 00 00       	mov    $0x0,%eax
f0122855:	89 d7                	mov    %edx,%edi
f0122857:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122859:	e8 fb a7 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012285e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122861:	e8 7d 15 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0122866:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0122869:	83 ec 0c             	sub    $0xc,%esp
f012286c:	68 00 fc 1f 00       	push   $0x1ffc00
f0122871:	e8 ba 51 fe ff       	call   f0107a30 <kmalloc>
f0122876:	83 c4 10             	add    $0x10,%esp
f0122879:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012287f:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0122885:	89 c1                	mov    %eax,%ecx
f0122887:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f012288e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0122891:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122896:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0122899:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012289c:	ba 00 00 00 00       	mov    $0x0,%edx
f01228a1:	f7 75 c8             	divl   -0x38(%ebp)
f01228a4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01228a7:	29 d0                	sub    %edx,%eax
f01228a9:	89 c3                	mov    %eax,%ebx
f01228ab:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01228b2:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01228b7:	0f b6 d0             	movzbl %al,%edx
f01228ba:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01228bd:	01 d0                	add    %edx,%eax
f01228bf:	48                   	dec    %eax
f01228c0:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01228c3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01228c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01228cb:	f7 75 c0             	divl   -0x40(%ebp)
f01228ce:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01228d1:	29 d0                	sub    %edx,%eax
f01228d3:	01 c3                	add    %eax,%ebx
f01228d5:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01228dc:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01228e1:	0f b6 c0             	movzbl %al,%eax
f01228e4:	c1 e0 04             	shl    $0x4,%eax
f01228e7:	89 c2                	mov    %eax,%edx
f01228e9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01228ec:	01 d0                	add    %edx,%eax
f01228ee:	48                   	dec    %eax
f01228ef:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01228f2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01228f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01228fa:	f7 75 b8             	divl   -0x48(%ebp)
f01228fd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0122900:	29 d0                	sub    %edx,%eax
f0122902:	01 d8                	add    %ebx,%eax
f0122904:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122909:	39 c1                	cmp    %eax,%ecx
f012290b:	74 17                	je     f0122924 <test_kfree_bestfirstfit+0x16c>
f012290d:	83 ec 04             	sub    $0x4,%esp
f0122910:	68 40 b5 13 f0       	push   $0xf013b540
f0122915:	68 95 06 00 00       	push   $0x695
f012291a:	68 5a b4 13 f0       	push   $0xf013b45a
f012291f:	e8 e1 d8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122924:	e8 ba 14 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0122929:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012292c:	74 17                	je     f0122945 <test_kfree_bestfirstfit+0x18d>
f012292e:	83 ec 04             	sub    $0x4,%esp
f0122931:	68 74 b4 13 f0       	push   $0xf013b474
f0122936:	68 96 06 00 00       	push   $0x696
f012293b:	68 5a b4 13 f0       	push   $0xf013b45a
f0122940:	e8 c0 d8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122945:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122948:	e8 0c a7 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012294d:	29 c3                	sub    %eax,%ebx
f012294f:	89 d8                	mov    %ebx,%eax
f0122951:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122956:	74 17                	je     f012296f <test_kfree_bestfirstfit+0x1b7>
f0122958:	83 ec 04             	sub    $0x4,%esp
f012295b:	68 dc b4 13 f0       	push   $0xf013b4dc
f0122960:	68 97 06 00 00       	push   $0x697
f0122965:	68 5a b4 13 f0       	push   $0xf013b45a
f012296a:	e8 96 d8 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012296f:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0122976:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122979:	e8 db a6 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012297e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122981:	e8 5d 14 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0122986:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0122989:	83 ec 0c             	sub    $0xc,%esp
f012298c:	68 00 fc 1f 00       	push   $0x1ffc00
f0122991:	e8 9a 50 fe ff       	call   f0107a30 <kmalloc>
f0122996:	83 c4 10             	add    $0x10,%esp
f0122999:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012299f:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01229a5:	89 c1                	mov    %eax,%ecx
f01229a7:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01229ae:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01229b1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01229b6:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01229b9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01229bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01229c1:	f7 75 b0             	divl   -0x50(%ebp)
f01229c4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01229c7:	29 d0                	sub    %edx,%eax
f01229c9:	89 c3                	mov    %eax,%ebx
f01229cb:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01229d2:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01229d7:	0f b6 d0             	movzbl %al,%edx
f01229da:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01229dd:	01 d0                	add    %edx,%eax
f01229df:	48                   	dec    %eax
f01229e0:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01229e3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01229e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01229eb:	f7 75 a8             	divl   -0x58(%ebp)
f01229ee:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01229f1:	29 d0                	sub    %edx,%eax
f01229f3:	01 c3                	add    %eax,%ebx
f01229f5:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01229fc:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0122a01:	0f b6 c0             	movzbl %al,%eax
f0122a04:	c1 e0 04             	shl    $0x4,%eax
f0122a07:	89 c2                	mov    %eax,%edx
f0122a09:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0122a0c:	01 d0                	add    %edx,%eax
f0122a0e:	48                   	dec    %eax
f0122a0f:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0122a12:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122a15:	ba 00 00 00 00       	mov    $0x0,%edx
f0122a1a:	f7 75 a0             	divl   -0x60(%ebp)
f0122a1d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122a20:	29 d0                	sub    %edx,%eax
f0122a22:	01 d8                	add    %ebx,%eax
f0122a24:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0122a29:	39 c1                	cmp    %eax,%ecx
f0122a2b:	74 17                	je     f0122a44 <test_kfree_bestfirstfit+0x28c>
f0122a2d:	83 ec 04             	sub    $0x4,%esp
f0122a30:	68 40 b5 13 f0       	push   $0xf013b540
f0122a35:	68 9e 06 00 00       	push   $0x69e
f0122a3a:	68 5a b4 13 f0       	push   $0xf013b45a
f0122a3f:	e8 c1 d7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122a44:	e8 9a 13 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0122a49:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122a4c:	74 17                	je     f0122a65 <test_kfree_bestfirstfit+0x2ad>
f0122a4e:	83 ec 04             	sub    $0x4,%esp
f0122a51:	68 74 b4 13 f0       	push   $0xf013b474
f0122a56:	68 9f 06 00 00       	push   $0x69f
f0122a5b:	68 5a b4 13 f0       	push   $0xf013b45a
f0122a60:	e8 a0 d7 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122a65:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122a68:	e8 ec a5 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122a6d:	29 c3                	sub    %eax,%ebx
f0122a6f:	89 d8                	mov    %ebx,%eax
f0122a71:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122a76:	74 17                	je     f0122a8f <test_kfree_bestfirstfit+0x2d7>
f0122a78:	83 ec 04             	sub    $0x4,%esp
f0122a7b:	68 dc b4 13 f0       	push   $0xf013b4dc
f0122a80:	68 a0 06 00 00       	push   $0x6a0
f0122a85:	68 5a b4 13 f0       	push   $0xf013b45a
f0122a8a:	e8 76 d7 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0122a8f:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0122a96:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122a99:	e8 bb a5 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122a9e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122aa1:	e8 3d 13 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0122aa6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0122aa9:	83 ec 0c             	sub    $0xc,%esp
f0122aac:	68 00 08 00 00       	push   $0x800
f0122ab1:	e8 7a 4f fe ff       	call   f0107a30 <kmalloc>
f0122ab6:	83 c4 10             	add    $0x10,%esp
f0122ab9:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122abf:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122ac5:	89 c1                	mov    %eax,%ecx
f0122ac7:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0122ace:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122ad1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122ad6:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0122ad9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122adc:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ae1:	f7 75 98             	divl   -0x68(%ebp)
f0122ae4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122ae7:	29 d0                	sub    %edx,%eax
f0122ae9:	89 c3                	mov    %eax,%ebx
f0122aeb:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0122af2:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0122af7:	0f b6 d0             	movzbl %al,%edx
f0122afa:	8b 45 90             	mov    -0x70(%ebp),%eax
f0122afd:	01 d0                	add    %edx,%eax
f0122aff:	48                   	dec    %eax
f0122b00:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0122b03:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122b06:	ba 00 00 00 00       	mov    $0x0,%edx
f0122b0b:	f7 75 90             	divl   -0x70(%ebp)
f0122b0e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122b11:	29 d0                	sub    %edx,%eax
f0122b13:	01 c3                	add    %eax,%ebx
f0122b15:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0122b1c:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0122b21:	0f b6 c0             	movzbl %al,%eax
f0122b24:	c1 e0 04             	shl    $0x4,%eax
f0122b27:	89 c2                	mov    %eax,%edx
f0122b29:	8b 45 88             	mov    -0x78(%ebp),%eax
f0122b2c:	01 d0                	add    %edx,%eax
f0122b2e:	48                   	dec    %eax
f0122b2f:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0122b32:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122b35:	ba 00 00 00 00       	mov    $0x0,%edx
f0122b3a:	f7 75 88             	divl   -0x78(%ebp)
f0122b3d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122b40:	29 d0                	sub    %edx,%eax
f0122b42:	01 d8                	add    %ebx,%eax
f0122b44:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0122b49:	39 c1                	cmp    %eax,%ecx
f0122b4b:	74 17                	je     f0122b64 <test_kfree_bestfirstfit+0x3ac>
f0122b4d:	83 ec 04             	sub    $0x4,%esp
f0122b50:	68 40 b5 13 f0       	push   $0xf013b540
f0122b55:	68 a7 06 00 00       	push   $0x6a7
f0122b5a:	68 5a b4 13 f0       	push   $0xf013b45a
f0122b5f:	e8 a1 d6 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122b64:	e8 7a 12 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0122b69:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122b6c:	74 17                	je     f0122b85 <test_kfree_bestfirstfit+0x3cd>
f0122b6e:	83 ec 04             	sub    $0x4,%esp
f0122b71:	68 74 b4 13 f0       	push   $0xf013b474
f0122b76:	68 a8 06 00 00       	push   $0x6a8
f0122b7b:	68 5a b4 13 f0       	push   $0xf013b45a
f0122b80:	e8 80 d6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122b85:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122b88:	e8 cc a4 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122b8d:	29 c3                	sub    %eax,%ebx
f0122b8f:	89 d8                	mov    %ebx,%eax
f0122b91:	83 f8 01             	cmp    $0x1,%eax
f0122b94:	74 17                	je     f0122bad <test_kfree_bestfirstfit+0x3f5>
f0122b96:	83 ec 04             	sub    $0x4,%esp
f0122b99:	68 dc b4 13 f0       	push   $0xf013b4dc
f0122b9e:	68 a9 06 00 00       	push   $0x6a9
f0122ba3:	68 5a b4 13 f0       	push   $0xf013b45a
f0122ba8:	e8 58 d6 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0122bad:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0122bb4:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0122bb7:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122bbd:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0122bc0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122bc7:	eb 0e                	jmp    f0122bd7 <test_kfree_bestfirstfit+0x41f>
		{
			ptr[i] = 2 ;
f0122bc9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122bcc:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122bcf:	01 d0                	add    %edx,%eax
f0122bd1:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0122bd4:	ff 45 f4             	incl   -0xc(%ebp)
f0122bd7:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0122bdd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122be0:	7f e7                	jg     f0122bc9 <test_kfree_bestfirstfit+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122be2:	e8 72 a4 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122be7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122bea:	e8 f4 11 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0122bef:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0122bf2:	83 ec 0c             	sub    $0xc,%esp
f0122bf5:	68 00 08 00 00       	push   $0x800
f0122bfa:	e8 31 4e fe ff       	call   f0107a30 <kmalloc>
f0122bff:	83 c4 10             	add    $0x10,%esp
f0122c02:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122c08:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122c0e:	89 c1                	mov    %eax,%ecx
f0122c10:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0122c17:	10 00 00 
f0122c1a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122c20:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122c25:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0122c2b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0122c31:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c36:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0122c3c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0122c42:	29 d0                	sub    %edx,%eax
f0122c44:	89 c3                	mov    %eax,%ebx
f0122c46:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0122c4d:	10 00 00 
f0122c50:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0122c55:	0f b6 d0             	movzbl %al,%edx
f0122c58:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0122c5e:	01 d0                	add    %edx,%eax
f0122c60:	48                   	dec    %eax
f0122c61:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0122c67:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0122c6d:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c72:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0122c78:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0122c7e:	29 d0                	sub    %edx,%eax
f0122c80:	01 c3                	add    %eax,%ebx
f0122c82:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0122c89:	10 00 00 
f0122c8c:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0122c91:	0f b6 c0             	movzbl %al,%eax
f0122c94:	c1 e0 04             	shl    $0x4,%eax
f0122c97:	89 c2                	mov    %eax,%edx
f0122c99:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0122c9f:	01 d0                	add    %edx,%eax
f0122ca1:	48                   	dec    %eax
f0122ca2:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0122ca8:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0122cae:	ba 00 00 00 00       	mov    $0x0,%edx
f0122cb3:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0122cb9:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0122cbf:	29 d0                	sub    %edx,%eax
f0122cc1:	01 d8                	add    %ebx,%eax
f0122cc3:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0122cc8:	39 c1                	cmp    %eax,%ecx
f0122cca:	74 17                	je     f0122ce3 <test_kfree_bestfirstfit+0x52b>
f0122ccc:	83 ec 04             	sub    $0x4,%esp
f0122ccf:	68 40 b5 13 f0       	push   $0xf013b540
f0122cd4:	68 b5 06 00 00       	push   $0x6b5
f0122cd9:	68 5a b4 13 f0       	push   $0xf013b45a
f0122cde:	e8 22 d5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122ce3:	e8 fb 10 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0122ce8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122ceb:	74 17                	je     f0122d04 <test_kfree_bestfirstfit+0x54c>
f0122ced:	83 ec 04             	sub    $0x4,%esp
f0122cf0:	68 74 b4 13 f0       	push   $0xf013b474
f0122cf5:	68 b6 06 00 00       	push   $0x6b6
f0122cfa:	68 5a b4 13 f0       	push   $0xf013b45a
f0122cff:	e8 01 d5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122d04:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122d07:	e8 4d a3 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122d0c:	29 c3                	sub    %eax,%ebx
f0122d0e:	89 d8                	mov    %ebx,%eax
f0122d10:	83 f8 01             	cmp    $0x1,%eax
f0122d13:	74 17                	je     f0122d2c <test_kfree_bestfirstfit+0x574>
f0122d15:	83 ec 04             	sub    $0x4,%esp
f0122d18:	68 dc b4 13 f0       	push   $0xf013b4dc
f0122d1d:	68 b7 06 00 00       	push   $0x6b7
f0122d22:	68 5a b4 13 f0       	push   $0xf013b45a
f0122d27:	e8 d9 d4 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0122d2c:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0122d33:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0122d36:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122d3c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0122d3f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122d46:	eb 0e                	jmp    f0122d56 <test_kfree_bestfirstfit+0x59e>
		{
			ptr[i] = 3 ;
f0122d48:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122d4b:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122d4e:	01 d0                	add    %edx,%eax
f0122d50:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0122d53:	ff 45 f4             	incl   -0xc(%ebp)
f0122d56:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0122d5c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122d5f:	7f e7                	jg     f0122d48 <test_kfree_bestfirstfit+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122d61:	e8 f3 a2 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122d66:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122d69:	e8 75 10 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0122d6e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0122d71:	83 ec 0c             	sub    $0xc,%esp
f0122d74:	68 00 1c 00 00       	push   $0x1c00
f0122d79:	e8 b2 4c fe ff       	call   f0107a30 <kmalloc>
f0122d7e:	83 c4 10             	add    $0x10,%esp
f0122d81:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122d87:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122d8d:	89 c1                	mov    %eax,%ecx
f0122d8f:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0122d96:	10 00 00 
f0122d99:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0122d9f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122da4:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0122daa:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0122db0:	ba 00 00 00 00       	mov    $0x0,%edx
f0122db5:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0122dbb:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0122dc1:	29 d0                	sub    %edx,%eax
f0122dc3:	89 c3                	mov    %eax,%ebx
f0122dc5:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0122dcc:	10 00 00 
f0122dcf:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0122dd4:	0f b6 d0             	movzbl %al,%edx
f0122dd7:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0122ddd:	01 d0                	add    %edx,%eax
f0122ddf:	48                   	dec    %eax
f0122de0:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0122de6:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122dec:	ba 00 00 00 00       	mov    $0x0,%edx
f0122df1:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0122df7:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122dfd:	29 d0                	sub    %edx,%eax
f0122dff:	01 c3                	add    %eax,%ebx
f0122e01:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0122e08:	10 00 00 
f0122e0b:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0122e10:	0f b6 c0             	movzbl %al,%eax
f0122e13:	c1 e0 04             	shl    $0x4,%eax
f0122e16:	89 c2                	mov    %eax,%edx
f0122e18:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0122e1e:	01 d0                	add    %edx,%eax
f0122e20:	48                   	dec    %eax
f0122e21:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0122e27:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122e2d:	ba 00 00 00 00       	mov    $0x0,%edx
f0122e32:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0122e38:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122e3e:	29 d0                	sub    %edx,%eax
f0122e40:	01 d8                	add    %ebx,%eax
f0122e42:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0122e47:	39 c1                	cmp    %eax,%ecx
f0122e49:	74 17                	je     f0122e62 <test_kfree_bestfirstfit+0x6aa>
f0122e4b:	83 ec 04             	sub    $0x4,%esp
f0122e4e:	68 40 b5 13 f0       	push   $0xf013b540
f0122e53:	68 c3 06 00 00       	push   $0x6c3
f0122e58:	68 5a b4 13 f0       	push   $0xf013b45a
f0122e5d:	e8 a3 d3 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122e62:	e8 7c 0f fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0122e67:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122e6a:	74 17                	je     f0122e83 <test_kfree_bestfirstfit+0x6cb>
f0122e6c:	83 ec 04             	sub    $0x4,%esp
f0122e6f:	68 74 b4 13 f0       	push   $0xf013b474
f0122e74:	68 c4 06 00 00       	push   $0x6c4
f0122e79:	68 5a b4 13 f0       	push   $0xf013b45a
f0122e7e:	e8 82 d3 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122e83:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122e86:	e8 ce a1 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122e8b:	29 c3                	sub    %eax,%ebx
f0122e8d:	89 d8                	mov    %ebx,%eax
f0122e8f:	83 f8 02             	cmp    $0x2,%eax
f0122e92:	74 17                	je     f0122eab <test_kfree_bestfirstfit+0x6f3>
f0122e94:	83 ec 04             	sub    $0x4,%esp
f0122e97:	68 dc b4 13 f0       	push   $0xf013b4dc
f0122e9c:	68 c5 06 00 00       	push   $0x6c5
f0122ea1:	68 5a b4 13 f0       	push   $0xf013b45a
f0122ea6:	e8 5a d3 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0122eab:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0122eb2:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0122eb5:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122ebb:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0122ebe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122ec5:	eb 0e                	jmp    f0122ed5 <test_kfree_bestfirstfit+0x71d>
		{
			ptr[i] = 4 ;
f0122ec7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122eca:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122ecd:	01 d0                	add    %edx,%eax
f0122ecf:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0122ed2:	ff 45 f4             	incl   -0xc(%ebp)
f0122ed5:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0122edb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122ede:	7f e7                	jg     f0122ec7 <test_kfree_bestfirstfit+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122ee0:	e8 74 a1 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0122ee5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122ee8:	e8 f6 0e fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0122eed:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0122ef0:	83 ec 0c             	sub    $0xc,%esp
f0122ef3:	68 00 fc 2f 00       	push   $0x2ffc00
f0122ef8:	e8 33 4b fe ff       	call   f0107a30 <kmalloc>
f0122efd:	83 c4 10             	add    $0x10,%esp
f0122f00:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122f06:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122f0c:	89 c1                	mov    %eax,%ecx
f0122f0e:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0122f15:	10 00 00 
f0122f18:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0122f1e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122f23:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0122f29:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122f2f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122f34:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0122f3a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122f40:	29 d0                	sub    %edx,%eax
f0122f42:	89 c3                	mov    %eax,%ebx
f0122f44:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0122f4b:	10 00 00 
f0122f4e:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0122f53:	0f b6 d0             	movzbl %al,%edx
f0122f56:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0122f5c:	01 d0                	add    %edx,%eax
f0122f5e:	48                   	dec    %eax
f0122f5f:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0122f65:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0122f6b:	ba 00 00 00 00       	mov    $0x0,%edx
f0122f70:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0122f76:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0122f7c:	29 d0                	sub    %edx,%eax
f0122f7e:	01 c3                	add    %eax,%ebx
f0122f80:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0122f87:	10 00 00 
f0122f8a:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0122f8f:	0f b6 c0             	movzbl %al,%eax
f0122f92:	c1 e0 04             	shl    $0x4,%eax
f0122f95:	89 c2                	mov    %eax,%edx
f0122f97:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0122f9d:	01 d0                	add    %edx,%eax
f0122f9f:	48                   	dec    %eax
f0122fa0:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0122fa6:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122fac:	ba 00 00 00 00       	mov    $0x0,%edx
f0122fb1:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0122fb7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122fbd:	29 d0                	sub    %edx,%eax
f0122fbf:	01 d8                	add    %ebx,%eax
f0122fc1:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0122fc6:	39 c1                	cmp    %eax,%ecx
f0122fc8:	74 17                	je     f0122fe1 <test_kfree_bestfirstfit+0x829>
f0122fca:	83 ec 04             	sub    $0x4,%esp
f0122fcd:	68 40 b5 13 f0       	push   $0xf013b540
f0122fd2:	68 d1 06 00 00       	push   $0x6d1
f0122fd7:	68 5a b4 13 f0       	push   $0xf013b45a
f0122fdc:	e8 24 d2 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122fe1:	e8 fd 0d fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0122fe6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122fe9:	74 17                	je     f0123002 <test_kfree_bestfirstfit+0x84a>
f0122feb:	83 ec 04             	sub    $0x4,%esp
f0122fee:	68 74 b4 13 f0       	push   $0xf013b474
f0122ff3:	68 d2 06 00 00       	push   $0x6d2
f0122ff8:	68 5a b4 13 f0       	push   $0xf013b45a
f0122ffd:	e8 03 d2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123002:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0123005:	e8 4f a0 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012300a:	29 c3                	sub    %eax,%ebx
f012300c:	89 d8                	mov    %ebx,%eax
f012300e:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123013:	74 17                	je     f012302c <test_kfree_bestfirstfit+0x874>
f0123015:	83 ec 04             	sub    $0x4,%esp
f0123018:	68 dc b4 13 f0       	push   $0xf013b4dc
f012301d:	68 d3 06 00 00       	push   $0x6d3
f0123022:	68 5a b4 13 f0       	push   $0xf013b45a
f0123027:	e8 d9 d1 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012302c:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0123033:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0123036:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f012303c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012303f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123046:	eb 0e                	jmp    f0123056 <test_kfree_bestfirstfit+0x89e>
		{
			ptr[i] = 5 ;
f0123048:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012304b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012304e:	01 d0                	add    %edx,%eax
f0123050:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0123053:	ff 45 f4             	incl   -0xc(%ebp)
f0123056:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012305c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012305f:	7f e7                	jg     f0123048 <test_kfree_bestfirstfit+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0123061:	e8 f3 9f fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123066:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123069:	e8 75 0d fe ff       	call   f0103de3 <pf_calculate_free_frames>
f012306e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0123071:	83 ec 0c             	sub    $0xc,%esp
f0123074:	68 00 fc 5f 00       	push   $0x5ffc00
f0123079:	e8 b2 49 fe ff       	call   f0107a30 <kmalloc>
f012307e:	83 c4 10             	add    $0x10,%esp
f0123081:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123087:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f012308d:	89 c1                	mov    %eax,%ecx
f012308f:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0123096:	10 00 00 
f0123099:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012309f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01230a4:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01230aa:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01230b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01230b5:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01230bb:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01230c1:	29 d0                	sub    %edx,%eax
f01230c3:	89 c3                	mov    %eax,%ebx
f01230c5:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01230cc:	10 00 00 
f01230cf:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01230d4:	0f b6 d0             	movzbl %al,%edx
f01230d7:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01230dd:	01 d0                	add    %edx,%eax
f01230df:	48                   	dec    %eax
f01230e0:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01230e6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01230ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01230f1:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01230f7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01230fd:	29 d0                	sub    %edx,%eax
f01230ff:	01 c3                	add    %eax,%ebx
f0123101:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0123108:	10 00 00 
f012310b:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0123110:	0f b6 c0             	movzbl %al,%eax
f0123113:	c1 e0 04             	shl    $0x4,%eax
f0123116:	89 c2                	mov    %eax,%edx
f0123118:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012311e:	01 d0                	add    %edx,%eax
f0123120:	48                   	dec    %eax
f0123121:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0123127:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012312d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123132:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0123138:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012313e:	29 d0                	sub    %edx,%eax
f0123140:	01 d8                	add    %ebx,%eax
f0123142:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0123147:	39 c1                	cmp    %eax,%ecx
f0123149:	74 17                	je     f0123162 <test_kfree_bestfirstfit+0x9aa>
f012314b:	83 ec 04             	sub    $0x4,%esp
f012314e:	68 40 b5 13 f0       	push   $0xf013b540
f0123153:	68 df 06 00 00       	push   $0x6df
f0123158:	68 5a b4 13 f0       	push   $0xf013b45a
f012315d:	e8 a3 d0 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123162:	e8 7c 0c fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0123167:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012316a:	74 17                	je     f0123183 <test_kfree_bestfirstfit+0x9cb>
f012316c:	83 ec 04             	sub    $0x4,%esp
f012316f:	68 74 b4 13 f0       	push   $0xf013b474
f0123174:	68 e0 06 00 00       	push   $0x6e0
f0123179:	68 5a b4 13 f0       	push   $0xf013b45a
f012317e:	e8 82 d0 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123183:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0123186:	e8 ce 9e fe ff       	call   f010d059 <sys_calculate_free_frames>
f012318b:	29 c3                	sub    %eax,%ebx
f012318d:	89 d8                	mov    %ebx,%eax
f012318f:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123194:	74 17                	je     f01231ad <test_kfree_bestfirstfit+0x9f5>
f0123196:	83 ec 04             	sub    $0x4,%esp
f0123199:	68 dc b4 13 f0       	push   $0xf013b4dc
f012319e:	68 e1 06 00 00       	push   $0x6e1
f01231a3:	68 5a b4 13 f0       	push   $0xf013b45a
f01231a8:	e8 58 d0 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01231ad:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f01231b4:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01231b7:	e8 9d 9e fe ff       	call   f010d059 <sys_calculate_free_frames>
f01231bc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01231bf:	e8 1f 0c fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01231c4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01231c7:	83 ec 0c             	sub    $0xc,%esp
f01231ca:	68 00 38 00 00       	push   $0x3800
f01231cf:	e8 5c 48 fe ff       	call   f0107a30 <kmalloc>
f01231d4:	83 c4 10             	add    $0x10,%esp
f01231d7:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01231dd:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01231e3:	89 c1                	mov    %eax,%ecx
f01231e5:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01231ec:	10 00 00 
f01231ef:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01231f5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01231fa:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0123200:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0123206:	ba 00 00 00 00       	mov    $0x0,%edx
f012320b:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0123211:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0123217:	29 d0                	sub    %edx,%eax
f0123219:	89 c3                	mov    %eax,%ebx
f012321b:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0123222:	10 00 00 
f0123225:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012322a:	0f b6 d0             	movzbl %al,%edx
f012322d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0123233:	01 d0                	add    %edx,%eax
f0123235:	48                   	dec    %eax
f0123236:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012323c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0123242:	ba 00 00 00 00       	mov    $0x0,%edx
f0123247:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012324d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0123253:	29 d0                	sub    %edx,%eax
f0123255:	01 c3                	add    %eax,%ebx
f0123257:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012325e:	10 00 00 
f0123261:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0123266:	0f b6 c0             	movzbl %al,%eax
f0123269:	c1 e0 04             	shl    $0x4,%eax
f012326c:	89 c2                	mov    %eax,%edx
f012326e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0123274:	01 d0                	add    %edx,%eax
f0123276:	48                   	dec    %eax
f0123277:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012327d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0123283:	ba 00 00 00 00       	mov    $0x0,%edx
f0123288:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012328e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0123294:	29 d0                	sub    %edx,%eax
f0123296:	01 d8                	add    %ebx,%eax
f0123298:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012329d:	39 c1                	cmp    %eax,%ecx
f012329f:	74 17                	je     f01232b8 <test_kfree_bestfirstfit+0xb00>
f01232a1:	83 ec 04             	sub    $0x4,%esp
f01232a4:	68 40 b5 13 f0       	push   $0xf013b540
f01232a9:	68 e8 06 00 00       	push   $0x6e8
f01232ae:	68 5a b4 13 f0       	push   $0xf013b45a
f01232b3:	e8 4d cf fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01232b8:	e8 26 0b fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01232bd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01232c0:	74 17                	je     f01232d9 <test_kfree_bestfirstfit+0xb21>
f01232c2:	83 ec 04             	sub    $0x4,%esp
f01232c5:	68 74 b4 13 f0       	push   $0xf013b474
f01232ca:	68 e9 06 00 00       	push   $0x6e9
f01232cf:	68 5a b4 13 f0       	push   $0xf013b45a
f01232d4:	e8 2c cf fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01232d9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01232dc:	e8 78 9d fe ff       	call   f010d059 <sys_calculate_free_frames>
f01232e1:	29 c3                	sub    %eax,%ebx
f01232e3:	89 d8                	mov    %ebx,%eax
f01232e5:	83 f8 04             	cmp    $0x4,%eax
f01232e8:	74 17                	je     f0123301 <test_kfree_bestfirstfit+0xb49>
f01232ea:	83 ec 04             	sub    $0x4,%esp
f01232ed:	68 dc b4 13 f0       	push   $0xf013b4dc
f01232f2:	68 ea 06 00 00       	push   $0x6ea
f01232f7:	68 5a b4 13 f0       	push   $0xf013b45a
f01232fc:	e8 04 cf fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0123301:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0123308:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012330b:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0123311:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0123314:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012331b:	eb 0e                	jmp    f012332b <test_kfree_bestfirstfit+0xb73>
		{
			ptr[i] = 7 ;
f012331d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123320:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123323:	01 d0                	add    %edx,%eax
f0123325:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0123328:	ff 45 f4             	incl   -0xc(%ebp)
f012332b:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0123331:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123334:	7f e7                	jg     f012331d <test_kfree_bestfirstfit+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0123336:	e8 1e 9d fe ff       	call   f010d059 <sys_calculate_free_frames>
f012333b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0123341:	e8 9d 0a fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0123346:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f012334c:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0123352:	83 ec 0c             	sub    $0xc,%esp
f0123355:	50                   	push   %eax
f0123356:	e8 be 47 fe ff       	call   f0107b19 <kfree>
f012335b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012335e:	e8 80 0a fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0123363:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0123369:	74 17                	je     f0123382 <test_kfree_bestfirstfit+0xbca>
f012336b:	83 ec 04             	sub    $0x4,%esp
f012336e:	68 74 b4 13 f0       	push   $0xf013b474
f0123373:	68 f9 06 00 00       	push   $0x6f9
f0123378:	68 5a b4 13 f0       	push   $0xf013b45a
f012337d:	e8 83 ce fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0123382:	e8 d2 9c fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123387:	89 c2                	mov    %eax,%edx
f0123389:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012338f:	29 c2                	sub    %eax,%edx
f0123391:	89 d0                	mov    %edx,%eax
f0123393:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123398:	74 17                	je     f01233b1 <test_kfree_bestfirstfit+0xbf9>
f012339a:	83 ec 04             	sub    $0x4,%esp
f012339d:	68 e4 bb 13 f0       	push   $0xf013bbe4
f01233a2:	68 fa 06 00 00       	push   $0x6fa
f01233a7:	68 5a b4 13 f0       	push   $0xf013b45a
f01233ac:	e8 54 ce fd ff       	call   f0100205 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01233b1:	e8 a3 9c fe ff       	call   f010d059 <sys_calculate_free_frames>
f01233b6:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01233bc:	e8 22 0a fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01233c1:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f01233c7:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01233cd:	83 ec 0c             	sub    $0xc,%esp
f01233d0:	50                   	push   %eax
f01233d1:	e8 43 47 fe ff       	call   f0107b19 <kfree>
f01233d6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01233d9:	e8 05 0a fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01233de:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01233e4:	74 17                	je     f01233fd <test_kfree_bestfirstfit+0xc45>
f01233e6:	83 ec 04             	sub    $0x4,%esp
f01233e9:	68 74 b4 13 f0       	push   $0xf013b474
f01233ee:	68 00 07 00 00       	push   $0x700
f01233f3:	68 5a b4 13 f0       	push   $0xf013b45a
f01233f8:	e8 08 ce fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01233fd:	e8 57 9c fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123402:	89 c2                	mov    %eax,%edx
f0123404:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012340a:	29 c2                	sub    %eax,%edx
f012340c:	89 d0                	mov    %edx,%eax
f012340e:	83 f8 01             	cmp    $0x1,%eax
f0123411:	74 17                	je     f012342a <test_kfree_bestfirstfit+0xc72>
f0123413:	83 ec 04             	sub    $0x4,%esp
f0123416:	68 e4 bb 13 f0       	push   $0xf013bbe4
f012341b:	68 01 07 00 00       	push   $0x701
f0123420:	68 5a b4 13 f0       	push   $0xf013b45a
f0123425:	e8 db cd fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012342a:	e8 2a 9c fe ff       	call   f010d059 <sys_calculate_free_frames>
f012342f:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123435:	e8 a9 09 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f012343a:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0123440:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0123446:	83 ec 0c             	sub    $0xc,%esp
f0123449:	50                   	push   %eax
f012344a:	e8 ca 46 fe ff       	call   f0107b19 <kfree>
f012344f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123452:	e8 8c 09 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0123457:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012345d:	74 17                	je     f0123476 <test_kfree_bestfirstfit+0xcbe>
f012345f:	83 ec 04             	sub    $0x4,%esp
f0123462:	68 74 b4 13 f0       	push   $0xf013b474
f0123467:	68 07 07 00 00       	push   $0x707
f012346c:	68 5a b4 13 f0       	push   $0xf013b45a
f0123471:	e8 8f cd fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0123476:	e8 de 9b fe ff       	call   f010d059 <sys_calculate_free_frames>
f012347b:	89 c2                	mov    %eax,%edx
f012347d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123483:	29 c2                	sub    %eax,%edx
f0123485:	89 d0                	mov    %edx,%eax
f0123487:	3d 00 02 00 00       	cmp    $0x200,%eax
f012348c:	74 17                	je     f01234a5 <test_kfree_bestfirstfit+0xced>
f012348e:	83 ec 04             	sub    $0x4,%esp
f0123491:	68 e4 bb 13 f0       	push   $0xf013bbe4
f0123496:	68 08 07 00 00       	push   $0x708
f012349b:	68 5a b4 13 f0       	push   $0xf013b45a
f01234a0:	e8 60 cd fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01234a5:	e8 af 9b fe ff       	call   f010d059 <sys_calculate_free_frames>
f01234aa:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01234b0:	e8 2e 09 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01234b5:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f01234bb:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f01234c1:	83 ec 0c             	sub    $0xc,%esp
f01234c4:	50                   	push   %eax
f01234c5:	e8 4f 46 fe ff       	call   f0107b19 <kfree>
f01234ca:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01234cd:	e8 11 09 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01234d2:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01234d8:	74 17                	je     f01234f1 <test_kfree_bestfirstfit+0xd39>
f01234da:	83 ec 04             	sub    $0x4,%esp
f01234dd:	68 74 b4 13 f0       	push   $0xf013b474
f01234e2:	68 0e 07 00 00       	push   $0x70e
f01234e7:	68 5a b4 13 f0       	push   $0xf013b45a
f01234ec:	e8 14 cd fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01234f1:	e8 63 9b fe ff       	call   f010d059 <sys_calculate_free_frames>
f01234f6:	89 c2                	mov    %eax,%edx
f01234f8:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01234fe:	29 c2                	sub    %eax,%edx
f0123500:	89 d0                	mov    %edx,%eax
f0123502:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123507:	74 17                	je     f0123520 <test_kfree_bestfirstfit+0xd68>
f0123509:	83 ec 04             	sub    $0x4,%esp
f012350c:	68 e4 bb 13 f0       	push   $0xf013bbe4
f0123511:	68 0f 07 00 00       	push   $0x70f
f0123516:	68 5a b4 13 f0       	push   $0xf013b45a
f012351b:	e8 e5 cc fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0123520:	83 ec 0c             	sub    $0xc,%esp
f0123523:	68 1c bc 13 f0       	push   $0xf013bc1c
f0123528:	e8 e1 d7 fd ff       	call   f0100d0e <cprintf>
f012352d:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0123530:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0123536:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0123539:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123540:	eb 1e                	jmp    f0123560 <test_kfree_bestfirstfit+0xda8>
		{
			sums[3] += ptr[i] ;
f0123542:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0123548:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012354b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012354e:	01 c8                	add    %ecx,%eax
f0123550:	8a 00                	mov    (%eax),%al
f0123552:	0f be c0             	movsbl %al,%eax
f0123555:	01 d0                	add    %edx,%eax
f0123557:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012355d:	ff 45 f4             	incl   -0xc(%ebp)
f0123560:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0123566:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123569:	7f d7                	jg     f0123542 <test_kfree_bestfirstfit+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012356b:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0123571:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0123577:	89 c1                	mov    %eax,%ecx
f0123579:	01 c9                	add    %ecx,%ecx
f012357b:	01 c8                	add    %ecx,%eax
f012357d:	39 c2                	cmp    %eax,%edx
f012357f:	74 17                	je     f0123598 <test_kfree_bestfirstfit+0xde0>
f0123581:	83 ec 04             	sub    $0x4,%esp
f0123584:	68 40 bc 13 f0       	push   $0xf013bc40
f0123589:	68 1c 07 00 00       	push   $0x71c
f012358e:	68 5a b4 13 f0       	push   $0xf013b45a
f0123593:	e8 6d cc fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0123598:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f012359e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01235a1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01235a8:	eb 1e                	jmp    f01235c8 <test_kfree_bestfirstfit+0xe10>
		{
			sums[4] += ptr[i] ;
f01235aa:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f01235b0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01235b3:	8b 45 80             	mov    -0x80(%ebp),%eax
f01235b6:	01 c8                	add    %ecx,%eax
f01235b8:	8a 00                	mov    (%eax),%al
f01235ba:	0f be c0             	movsbl %al,%eax
f01235bd:	01 d0                	add    %edx,%eax
f01235bf:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01235c5:	ff 45 f4             	incl   -0xc(%ebp)
f01235c8:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01235ce:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01235d1:	7f d7                	jg     f01235aa <test_kfree_bestfirstfit+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f01235d3:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01235d9:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f01235df:	c1 e2 02             	shl    $0x2,%edx
f01235e2:	39 d0                	cmp    %edx,%eax
f01235e4:	74 17                	je     f01235fd <test_kfree_bestfirstfit+0xe45>
f01235e6:	83 ec 04             	sub    $0x4,%esp
f01235e9:	68 40 bc 13 f0       	push   $0xf013bc40
f01235ee:	68 24 07 00 00       	push   $0x724
f01235f3:	68 5a b4 13 f0       	push   $0xf013b45a
f01235f8:	e8 08 cc fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f01235fd:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0123603:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0123606:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012360d:	eb 1e                	jmp    f012362d <test_kfree_bestfirstfit+0xe75>
		{
			sums[5] += ptr[i] ;
f012360f:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0123615:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0123618:	8b 45 80             	mov    -0x80(%ebp),%eax
f012361b:	01 c8                	add    %ecx,%eax
f012361d:	8a 00                	mov    (%eax),%al
f012361f:	0f be c0             	movsbl %al,%eax
f0123622:	01 d0                	add    %edx,%eax
f0123624:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012362a:	ff 45 f4             	incl   -0xc(%ebp)
f012362d:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0123633:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123636:	7f d7                	jg     f012360f <test_kfree_bestfirstfit+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0123638:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f012363e:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0123644:	89 d0                	mov    %edx,%eax
f0123646:	c1 e0 02             	shl    $0x2,%eax
f0123649:	01 d0                	add    %edx,%eax
f012364b:	39 c1                	cmp    %eax,%ecx
f012364d:	74 17                	je     f0123666 <test_kfree_bestfirstfit+0xeae>
f012364f:	83 ec 04             	sub    $0x4,%esp
f0123652:	68 40 bc 13 f0       	push   $0xf013bc40
f0123657:	68 2c 07 00 00       	push   $0x72c
f012365c:	68 5a b4 13 f0       	push   $0xf013b45a
f0123661:	e8 9f cb fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0123666:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012366c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012366f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123676:	eb 1e                	jmp    f0123696 <test_kfree_bestfirstfit+0xede>
		{
			sums[7] += ptr[i] ;
f0123678:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f012367e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0123681:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123684:	01 c8                	add    %ecx,%eax
f0123686:	8a 00                	mov    (%eax),%al
f0123688:	0f be c0             	movsbl %al,%eax
f012368b:	01 d0                	add    %edx,%eax
f012368d:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0123693:	ff 45 f4             	incl   -0xc(%ebp)
f0123696:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012369c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012369f:	7f d7                	jg     f0123678 <test_kfree_bestfirstfit+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01236a1:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f01236a7:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f01236ad:	89 d0                	mov    %edx,%eax
f01236af:	01 c0                	add    %eax,%eax
f01236b1:	01 d0                	add    %edx,%eax
f01236b3:	01 c0                	add    %eax,%eax
f01236b5:	01 d0                	add    %edx,%eax
f01236b7:	39 c1                	cmp    %eax,%ecx
f01236b9:	74 17                	je     f01236d2 <test_kfree_bestfirstfit+0xf1a>
f01236bb:	83 ec 04             	sub    $0x4,%esp
f01236be:	68 40 bc 13 f0       	push   $0xf013bc40
f01236c3:	68 34 07 00 00       	push   $0x734
f01236c8:	68 5a b4 13 f0       	push   $0xf013b45a
f01236cd:	e8 33 cb fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b30%");
f01236d2:	83 ec 0c             	sub    $0xc,%esp
f01236d5:	68 73 bc 13 f0       	push   $0xf013bc73
f01236da:	e8 2f d6 fd ff       	call   f0100d0e <cprintf>
f01236df:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01236e2:	e8 72 99 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01236e7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01236ea:	e8 f4 06 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01236ef:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f01236f2:	83 ec 0c             	sub    $0xc,%esp
f01236f5:	68 00 00 30 00       	push   $0x300000
f01236fa:	e8 31 43 fe ff       	call   f0107a30 <kmalloc>
f01236ff:	83 c4 10             	add    $0x10,%esp
f0123702:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123708:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012370e:	89 c1                	mov    %eax,%ecx
f0123710:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0123717:	10 00 00 
f012371a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0123720:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123725:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012372b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0123731:	ba 00 00 00 00       	mov    $0x0,%edx
f0123736:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012373c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0123742:	29 d0                	sub    %edx,%eax
f0123744:	89 c3                	mov    %eax,%ebx
f0123746:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f012374d:	10 00 00 
f0123750:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0123755:	0f b6 d0             	movzbl %al,%edx
f0123758:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012375e:	01 d0                	add    %edx,%eax
f0123760:	48                   	dec    %eax
f0123761:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0123767:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012376d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123772:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0123778:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012377e:	29 d0                	sub    %edx,%eax
f0123780:	01 c3                	add    %eax,%ebx
f0123782:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0123789:	10 00 00 
f012378c:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0123791:	0f b6 c0             	movzbl %al,%eax
f0123794:	c1 e0 04             	shl    $0x4,%eax
f0123797:	89 c2                	mov    %eax,%edx
f0123799:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012379f:	01 d0                	add    %edx,%eax
f01237a1:	48                   	dec    %eax
f01237a2:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f01237a8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01237ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01237b3:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f01237b9:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01237bf:	29 d0                	sub    %edx,%eax
f01237c1:	01 d8                	add    %ebx,%eax
f01237c3:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01237c8:	39 c1                	cmp    %eax,%ecx
f01237ca:	74 17                	je     f01237e3 <test_kfree_bestfirstfit+0x102b>
f01237cc:	83 ec 04             	sub    $0x4,%esp
f01237cf:	68 40 b5 13 f0       	push   $0xf013b540
f01237d4:	68 3f 07 00 00       	push   $0x73f
f01237d9:	68 5a b4 13 f0       	push   $0xf013b45a
f01237de:	e8 22 ca fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01237e3:	e8 fb 05 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01237e8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01237eb:	74 17                	je     f0123804 <test_kfree_bestfirstfit+0x104c>
f01237ed:	83 ec 04             	sub    $0x4,%esp
f01237f0:	68 74 b4 13 f0       	push   $0xf013b474
f01237f5:	68 40 07 00 00       	push   $0x740
f01237fa:	68 5a b4 13 f0       	push   $0xf013b45a
f01237ff:	e8 01 ca fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123804:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0123807:	e8 4d 98 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012380c:	29 c3                	sub    %eax,%ebx
f012380e:	89 d8                	mov    %ebx,%eax
f0123810:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123815:	74 17                	je     f012382e <test_kfree_bestfirstfit+0x1076>
f0123817:	83 ec 04             	sub    $0x4,%esp
f012381a:	68 dc b4 13 f0       	push   $0xf013b4dc
f012381f:	68 41 07 00 00       	push   $0x741
f0123824:	68 5a b4 13 f0       	push   $0xf013b45a
f0123829:	e8 d7 c9 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f012382e:	c7 85 88 fe ff ff ff 	movl   $0x2fffff,-0x178(%ebp)
f0123835:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f0123838:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012383e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0123841:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123848:	eb 0e                	jmp    f0123858 <test_kfree_bestfirstfit+0x10a0>
		{
			ptr[i] = 8 ;
f012384a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012384d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123850:	01 d0                	add    %edx,%eax
f0123852:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0123855:	ff 45 f4             	incl   -0xc(%ebp)
f0123858:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012385e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123861:	7f e7                	jg     f012384a <test_kfree_bestfirstfit+0x1092>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123863:	e8 f1 97 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123868:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012386b:	e8 73 05 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0123870:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f0123873:	83 ec 0c             	sub    $0xc,%esp
f0123876:	68 00 08 00 00       	push   $0x800
f012387b:	e8 b0 41 fe ff       	call   f0107a30 <kmalloc>
f0123880:	83 c4 10             	add    $0x10,%esp
f0123883:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123889:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012388f:	89 c1                	mov    %eax,%ecx
f0123891:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0123898:	10 00 00 
f012389b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01238a1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01238a6:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01238ac:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01238b2:	ba 00 00 00 00       	mov    $0x0,%edx
f01238b7:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f01238bd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01238c3:	29 d0                	sub    %edx,%eax
f01238c5:	89 c3                	mov    %eax,%ebx
f01238c7:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01238ce:	10 00 00 
f01238d1:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01238d6:	0f b6 d0             	movzbl %al,%edx
f01238d9:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01238df:	01 d0                	add    %edx,%eax
f01238e1:	48                   	dec    %eax
f01238e2:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01238e8:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01238ee:	ba 00 00 00 00       	mov    $0x0,%edx
f01238f3:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01238f9:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01238ff:	29 d0                	sub    %edx,%eax
f0123901:	01 c3                	add    %eax,%ebx
f0123903:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012390a:	10 00 00 
f012390d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0123912:	0f b6 c0             	movzbl %al,%eax
f0123915:	c1 e0 04             	shl    $0x4,%eax
f0123918:	89 c2                	mov    %eax,%edx
f012391a:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0123920:	01 d0                	add    %edx,%eax
f0123922:	48                   	dec    %eax
f0123923:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0123929:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012392f:	ba 00 00 00 00       	mov    $0x0,%edx
f0123934:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012393a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0123940:	29 d0                	sub    %edx,%eax
f0123942:	01 d8                	add    %ebx,%eax
f0123944:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0123949:	39 c1                	cmp    %eax,%ecx
f012394b:	74 17                	je     f0123964 <test_kfree_bestfirstfit+0x11ac>
f012394d:	83 ec 04             	sub    $0x4,%esp
f0123950:	68 40 b5 13 f0       	push   $0xf013b540
f0123955:	68 4d 07 00 00       	push   $0x74d
f012395a:	68 5a b4 13 f0       	push   $0xf013b45a
f012395f:	e8 a1 c8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123964:	e8 7a 04 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0123969:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012396c:	74 17                	je     f0123985 <test_kfree_bestfirstfit+0x11cd>
f012396e:	83 ec 04             	sub    $0x4,%esp
f0123971:	68 74 b4 13 f0       	push   $0xf013b474
f0123976:	68 4e 07 00 00       	push   $0x74e
f012397b:	68 5a b4 13 f0       	push   $0xf013b45a
f0123980:	e8 80 c8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123985:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0123988:	e8 cc 96 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012398d:	29 c3                	sub    %eax,%ebx
f012398f:	89 d8                	mov    %ebx,%eax
f0123991:	83 f8 01             	cmp    $0x1,%eax
f0123994:	74 17                	je     f01239ad <test_kfree_bestfirstfit+0x11f5>
f0123996:	83 ec 04             	sub    $0x4,%esp
f0123999:	68 dc b4 13 f0       	push   $0xf013b4dc
f012399e:	68 4f 07 00 00       	push   $0x74f
f01239a3:	68 5a b4 13 f0       	push   $0xf013b45a
f01239a8:	e8 58 c8 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f01239ad:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f01239b4:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f01239b7:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01239bd:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01239c0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01239c7:	eb 0e                	jmp    f01239d7 <test_kfree_bestfirstfit+0x121f>
		{
			ptr[i] = 9 ;
f01239c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01239cc:	8b 45 80             	mov    -0x80(%ebp),%eax
f01239cf:	01 d0                	add    %edx,%eax
f01239d1:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01239d4:	ff 45 f4             	incl   -0xc(%ebp)
f01239d7:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01239dd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01239e0:	7f e7                	jg     f01239c9 <test_kfree_bestfirstfit+0x1211>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01239e2:	e8 72 96 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01239e7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01239ea:	e8 f4 03 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f01239ef:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f01239f2:	83 ec 0c             	sub    $0xc,%esp
f01239f5:	68 00 00 10 00       	push   $0x100000
f01239fa:	e8 31 40 fe ff       	call   f0107a30 <kmalloc>
f01239ff:	83 c4 10             	add    $0x10,%esp
f0123a02:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123a08:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0123a0e:	89 c1                	mov    %eax,%ecx
f0123a10:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0123a17:	10 00 00 
f0123a1a:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0123a20:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123a25:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0123a2b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0123a31:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a36:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0123a3c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0123a42:	29 d0                	sub    %edx,%eax
f0123a44:	89 c3                	mov    %eax,%ebx
f0123a46:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0123a4d:	10 00 00 
f0123a50:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0123a55:	0f b6 d0             	movzbl %al,%edx
f0123a58:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0123a5e:	01 d0                	add    %edx,%eax
f0123a60:	48                   	dec    %eax
f0123a61:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0123a67:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123a6d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a72:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0123a78:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123a7e:	29 d0                	sub    %edx,%eax
f0123a80:	01 c3                	add    %eax,%ebx
f0123a82:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0123a89:	10 00 00 
f0123a8c:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0123a91:	0f b6 c0             	movzbl %al,%eax
f0123a94:	c1 e0 04             	shl    $0x4,%eax
f0123a97:	89 c2                	mov    %eax,%edx
f0123a99:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0123a9f:	01 d0                	add    %edx,%eax
f0123aa1:	48                   	dec    %eax
f0123aa2:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0123aa8:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123aae:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ab3:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0123ab9:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123abf:	29 d0                	sub    %edx,%eax
f0123ac1:	01 d8                	add    %ebx,%eax
f0123ac3:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0123ac8:	39 c1                	cmp    %eax,%ecx
f0123aca:	74 17                	je     f0123ae3 <test_kfree_bestfirstfit+0x132b>
f0123acc:	83 ec 04             	sub    $0x4,%esp
f0123acf:	68 40 b5 13 f0       	push   $0xf013b540
f0123ad4:	68 5b 07 00 00       	push   $0x75b
f0123ad9:	68 5a b4 13 f0       	push   $0xf013b45a
f0123ade:	e8 22 c7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123ae3:	e8 fb 02 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0123ae8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123aeb:	74 17                	je     f0123b04 <test_kfree_bestfirstfit+0x134c>
f0123aed:	83 ec 04             	sub    $0x4,%esp
f0123af0:	68 74 b4 13 f0       	push   $0xf013b474
f0123af5:	68 5c 07 00 00       	push   $0x75c
f0123afa:	68 5a b4 13 f0       	push   $0xf013b45a
f0123aff:	e8 01 c7 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123b04:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0123b07:	e8 4d 95 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123b0c:	29 c3                	sub    %eax,%ebx
f0123b0e:	89 d8                	mov    %ebx,%eax
f0123b10:	3d 00 01 00 00       	cmp    $0x100,%eax
f0123b15:	74 17                	je     f0123b2e <test_kfree_bestfirstfit+0x1376>
f0123b17:	83 ec 04             	sub    $0x4,%esp
f0123b1a:	68 dc b4 13 f0       	push   $0xf013b4dc
f0123b1f:	68 5d 07 00 00       	push   $0x75d
f0123b24:	68 5a b4 13 f0       	push   $0xf013b45a
f0123b29:	e8 d7 c6 fd ff       	call   f0100205 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f0123b2e:	c7 85 90 fe ff ff ff 	movl   $0xfffff,-0x170(%ebp)
f0123b35:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f0123b38:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0123b3e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0123b41:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123b48:	eb 0e                	jmp    f0123b58 <test_kfree_bestfirstfit+0x13a0>
		{
			ptr[i] = 10 ;
f0123b4a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123b4d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123b50:	01 d0                	add    %edx,%eax
f0123b52:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0123b55:	ff 45 f4             	incl   -0xc(%ebp)
f0123b58:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0123b5e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123b61:	7f e7                	jg     f0123b4a <test_kfree_bestfirstfit+0x1392>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f0123b63:	83 ec 0c             	sub    $0xc,%esp
f0123b66:	68 7a bc 13 f0       	push   $0xf013bc7a
f0123b6b:	e8 9e d1 fd ff       	call   f0100d0e <cprintf>
f0123b70:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0123b73:	e8 e1 94 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123b78:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123b7b:	e8 63 02 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0123b80:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0123b83:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0123b89:	83 ec 0c             	sub    $0xc,%esp
f0123b8c:	50                   	push   %eax
f0123b8d:	e8 87 3f fe ff       	call   f0107b19 <kfree>
f0123b92:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123b95:	e8 49 02 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0123b9a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123b9d:	74 17                	je     f0123bb6 <test_kfree_bestfirstfit+0x13fe>
f0123b9f:	83 ec 04             	sub    $0x4,%esp
f0123ba2:	68 74 b4 13 f0       	push   $0xf013b474
f0123ba7:	68 6d 07 00 00       	push   $0x76d
f0123bac:	68 5a b4 13 f0       	push   $0xf013b45a
f0123bb1:	e8 4f c6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0123bb6:	e8 9e 94 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123bbb:	89 c2                	mov    %eax,%edx
f0123bbd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123bc0:	29 c2                	sub    %eax,%edx
f0123bc2:	89 d0                	mov    %edx,%eax
f0123bc4:	83 f8 02             	cmp    $0x2,%eax
f0123bc7:	74 17                	je     f0123be0 <test_kfree_bestfirstfit+0x1428>
f0123bc9:	83 ec 04             	sub    $0x4,%esp
f0123bcc:	68 e4 bb 13 f0       	push   $0xf013bbe4
f0123bd1:	68 6e 07 00 00       	push   $0x76e
f0123bd6:	68 5a b4 13 f0       	push   $0xf013b45a
f0123bdb:	e8 25 c6 fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123be0:	e8 74 94 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123be5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123be8:	e8 f6 01 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0123bed:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0123bf0:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0123bf6:	83 ec 0c             	sub    $0xc,%esp
f0123bf9:	50                   	push   %eax
f0123bfa:	e8 1a 3f fe ff       	call   f0107b19 <kfree>
f0123bff:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123c02:	e8 dc 01 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0123c07:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123c0a:	74 17                	je     f0123c23 <test_kfree_bestfirstfit+0x146b>
f0123c0c:	83 ec 04             	sub    $0x4,%esp
f0123c0f:	68 74 b4 13 f0       	push   $0xf013b474
f0123c14:	68 74 07 00 00       	push   $0x774
f0123c19:	68 5a b4 13 f0       	push   $0xf013b45a
f0123c1e:	e8 e2 c5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123c23:	e8 31 94 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123c28:	89 c2                	mov    %eax,%edx
f0123c2a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123c2d:	29 c2                	sub    %eax,%edx
f0123c2f:	89 d0                	mov    %edx,%eax
f0123c31:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123c36:	74 17                	je     f0123c4f <test_kfree_bestfirstfit+0x1497>
f0123c38:	83 ec 04             	sub    $0x4,%esp
f0123c3b:	68 e4 bb 13 f0       	push   $0xf013bbe4
f0123c40:	68 75 07 00 00       	push   $0x775
f0123c45:	68 5a b4 13 f0       	push   $0xf013b45a
f0123c4a:	e8 b6 c5 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123c4f:	e8 05 94 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123c54:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123c57:	e8 87 01 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0123c5c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0123c5f:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0123c65:	83 ec 0c             	sub    $0xc,%esp
f0123c68:	50                   	push   %eax
f0123c69:	e8 ab 3e fe ff       	call   f0107b19 <kfree>
f0123c6e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123c71:	e8 6d 01 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0123c76:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123c79:	74 17                	je     f0123c92 <test_kfree_bestfirstfit+0x14da>
f0123c7b:	83 ec 04             	sub    $0x4,%esp
f0123c7e:	68 74 b4 13 f0       	push   $0xf013b474
f0123c83:	68 7b 07 00 00       	push   $0x77b
f0123c88:	68 5a b4 13 f0       	push   $0xf013b45a
f0123c8d:	e8 73 c5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0123c92:	e8 c2 93 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123c97:	89 c2                	mov    %eax,%edx
f0123c99:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123c9c:	29 c2                	sub    %eax,%edx
f0123c9e:	89 d0                	mov    %edx,%eax
f0123ca0:	83 f8 01             	cmp    $0x1,%eax
f0123ca3:	74 17                	je     f0123cbc <test_kfree_bestfirstfit+0x1504>
f0123ca5:	83 ec 04             	sub    $0x4,%esp
f0123ca8:	68 e4 bb 13 f0       	push   $0xf013bbe4
f0123cad:	68 7c 07 00 00       	push   $0x77c
f0123cb2:	68 5a b4 13 f0       	push   $0xf013b45a
f0123cb7:	e8 49 c5 fd ff       	call   f0100205 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0123cbc:	e8 98 93 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123cc1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123cc4:	e8 1a 01 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0123cc9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0123ccc:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0123cd2:	83 ec 0c             	sub    $0xc,%esp
f0123cd5:	50                   	push   %eax
f0123cd6:	e8 3e 3e fe ff       	call   f0107b19 <kfree>
f0123cdb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123cde:	e8 00 01 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0123ce3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123ce6:	74 17                	je     f0123cff <test_kfree_bestfirstfit+0x1547>
f0123ce8:	83 ec 04             	sub    $0x4,%esp
f0123ceb:	68 74 b4 13 f0       	push   $0xf013b474
f0123cf0:	68 82 07 00 00       	push   $0x782
f0123cf5:	68 5a b4 13 f0       	push   $0xf013b45a
f0123cfa:	e8 06 c5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0123cff:	e8 55 93 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123d04:	89 c2                	mov    %eax,%edx
f0123d06:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123d09:	29 c2                	sub    %eax,%edx
f0123d0b:	89 d0                	mov    %edx,%eax
f0123d0d:	83 f8 04             	cmp    $0x4,%eax
f0123d10:	74 17                	je     f0123d29 <test_kfree_bestfirstfit+0x1571>
f0123d12:	83 ec 04             	sub    $0x4,%esp
f0123d15:	68 e4 bb 13 f0       	push   $0xf013bbe4
f0123d1a:	68 83 07 00 00       	push   $0x783
f0123d1f:	68 5a b4 13 f0       	push   $0xf013b45a
f0123d24:	e8 dc c4 fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123d29:	e8 2b 93 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123d2e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123d31:	e8 ad 00 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0123d36:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0123d39:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123d3f:	83 ec 0c             	sub    $0xc,%esp
f0123d42:	50                   	push   %eax
f0123d43:	e8 d1 3d fe ff       	call   f0107b19 <kfree>
f0123d48:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123d4b:	e8 93 00 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0123d50:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123d53:	74 17                	je     f0123d6c <test_kfree_bestfirstfit+0x15b4>
f0123d55:	83 ec 04             	sub    $0x4,%esp
f0123d58:	68 74 b4 13 f0       	push   $0xf013b474
f0123d5d:	68 89 07 00 00       	push   $0x789
f0123d62:	68 5a b4 13 f0       	push   $0xf013b45a
f0123d67:	e8 99 c4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123d6c:	e8 e8 92 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123d71:	89 c2                	mov    %eax,%edx
f0123d73:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123d76:	29 c2                	sub    %eax,%edx
f0123d78:	89 d0                	mov    %edx,%eax
f0123d7a:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123d7f:	74 17                	je     f0123d98 <test_kfree_bestfirstfit+0x15e0>
f0123d81:	83 ec 04             	sub    $0x4,%esp
f0123d84:	68 e4 bb 13 f0       	push   $0xf013bbe4
f0123d89:	68 8a 07 00 00       	push   $0x78a
f0123d8e:	68 5a b4 13 f0       	push   $0xf013b45a
f0123d93:	e8 6d c4 fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123d98:	e8 bc 92 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123d9d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123da0:	e8 3e 00 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0123da5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0123da8:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0123dae:	83 ec 0c             	sub    $0xc,%esp
f0123db1:	50                   	push   %eax
f0123db2:	e8 62 3d fe ff       	call   f0107b19 <kfree>
f0123db7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123dba:	e8 24 00 fe ff       	call   f0103de3 <pf_calculate_free_frames>
f0123dbf:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123dc2:	74 17                	je     f0123ddb <test_kfree_bestfirstfit+0x1623>
f0123dc4:	83 ec 04             	sub    $0x4,%esp
f0123dc7:	68 74 b4 13 f0       	push   $0xf013b474
f0123dcc:	68 90 07 00 00       	push   $0x790
f0123dd1:	68 5a b4 13 f0       	push   $0xf013b45a
f0123dd6:	e8 2a c4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0123ddb:	e8 79 92 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123de0:	89 c2                	mov    %eax,%edx
f0123de2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123de5:	29 c2                	sub    %eax,%edx
f0123de7:	89 d0                	mov    %edx,%eax
f0123de9:	83 f8 01             	cmp    $0x1,%eax
f0123dec:	74 17                	je     f0123e05 <test_kfree_bestfirstfit+0x164d>
f0123dee:	83 ec 04             	sub    $0x4,%esp
f0123df1:	68 e4 bb 13 f0       	push   $0xf013bbe4
f0123df6:	68 91 07 00 00       	push   $0x791
f0123dfb:	68 5a b4 13 f0       	push   $0xf013b45a
f0123e00:	e8 00 c4 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0123e05:	e8 4f 92 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123e0a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123e0d:	e8 d1 ff fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0123e12:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f0123e15:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0123e1b:	83 ec 0c             	sub    $0xc,%esp
f0123e1e:	50                   	push   %eax
f0123e1f:	e8 f5 3c fe ff       	call   f0107b19 <kfree>
f0123e24:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123e27:	e8 b7 ff fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0123e2c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123e2f:	74 17                	je     f0123e48 <test_kfree_bestfirstfit+0x1690>
f0123e31:	83 ec 04             	sub    $0x4,%esp
f0123e34:	68 74 b4 13 f0       	push   $0xf013b474
f0123e39:	68 97 07 00 00       	push   $0x797
f0123e3e:	68 5a b4 13 f0       	push   $0xf013b45a
f0123e43:	e8 bd c3 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123e48:	e8 0c 92 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123e4d:	89 c2                	mov    %eax,%edx
f0123e4f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123e52:	29 c2                	sub    %eax,%edx
f0123e54:	89 d0                	mov    %edx,%eax
f0123e56:	3d 00 01 00 00       	cmp    $0x100,%eax
f0123e5b:	74 17                	je     f0123e74 <test_kfree_bestfirstfit+0x16bc>
f0123e5d:	83 ec 04             	sub    $0x4,%esp
f0123e60:	68 e4 bb 13 f0       	push   $0xf013bbe4
f0123e65:	68 98 07 00 00       	push   $0x798
f0123e6a:	68 5a b4 13 f0       	push   $0xf013b45a
f0123e6f:	e8 91 c3 fd ff       	call   f0100205 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0123e74:	e8 e0 91 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123e79:	89 c2                	mov    %eax,%edx
f0123e7b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0123e7e:	39 c2                	cmp    %eax,%edx
f0123e80:	74 17                	je     f0123e99 <test_kfree_bestfirstfit+0x16e1>
f0123e82:	83 ec 04             	sub    $0x4,%esp
f0123e85:	68 84 bc 13 f0       	push   $0xf013bc84
f0123e8a:	68 9a 07 00 00       	push   $0x79a
f0123e8f:	68 5a b4 13 f0       	push   $0xf013b45a
f0123e94:	e8 6c c3 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b60%");
f0123e99:	83 ec 0c             	sub    $0xc,%esp
f0123e9c:	68 b8 bc 13 f0       	push   $0xf013bcb8
f0123ea1:	e8 68 ce fd ff       	call   f0100d0e <cprintf>
f0123ea6:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0123ea9:	83 ec 0c             	sub    $0xc,%esp
f0123eac:	6a 03                	push   $0x3
f0123eae:	e8 46 96 fe ff       	call   f010d4f9 <sys_bypassPageFault>
f0123eb3:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0123eb6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123ebd:	e9 82 00 00 00       	jmp    f0123f44 <test_kfree_bestfirstfit+0x178c>
		{
			ptr = (char *) ptr_allocations[i];
f0123ec2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123ec5:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0123ecc:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0123ecf:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123ed2:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123ed5:	e8 0d 96 fe ff       	call   f010d4e7 <sys_rcr2>
f0123eda:	89 c2                	mov    %eax,%edx
f0123edc:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123edf:	39 c2                	cmp    %eax,%edx
f0123ee1:	74 17                	je     f0123efa <test_kfree_bestfirstfit+0x1742>
f0123ee3:	83 ec 04             	sub    $0x4,%esp
f0123ee6:	68 c0 bc 13 f0       	push   $0xf013bcc0
f0123eeb:	68 a9 07 00 00       	push   $0x7a9
f0123ef0:	68 5a b4 13 f0       	push   $0xf013b45a
f0123ef5:	e8 0b c3 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0123efa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123efd:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0123f04:	89 c2                	mov    %eax,%edx
f0123f06:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123f09:	01 d0                	add    %edx,%eax
f0123f0b:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123f0e:	e8 d4 95 fe ff       	call   f010d4e7 <sys_rcr2>
f0123f13:	89 c2                	mov    %eax,%edx
f0123f15:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123f18:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0123f1f:	89 c1                	mov    %eax,%ecx
f0123f21:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123f24:	01 c8                	add    %ecx,%eax
f0123f26:	39 c2                	cmp    %eax,%edx
f0123f28:	74 17                	je     f0123f41 <test_kfree_bestfirstfit+0x1789>
f0123f2a:	83 ec 04             	sub    $0x4,%esp
f0123f2d:	68 c0 bc 13 f0       	push   $0xf013bcc0
f0123f32:	68 ab 07 00 00       	push   $0x7ab
f0123f37:	68 5a b4 13 f0       	push   $0xf013b45a
f0123f3c:	e8 c4 c2 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0123f41:	ff 45 f4             	incl   -0xc(%ebp)
f0123f44:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0123f48:	0f 8e 74 ff ff ff    	jle    f0123ec2 <test_kfree_bestfirstfit+0x170a>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0123f4e:	83 ec 0c             	sub    $0xc,%esp
f0123f51:	6a 00                	push   $0x0
f0123f53:	e8 a1 95 fe ff       	call   f010d4f9 <sys_bypassPageFault>
f0123f58:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0123f5b:	83 ec 0c             	sub    $0xc,%esp
f0123f5e:	68 05 bd 13 f0       	push   $0xf013bd05
f0123f63:	e8 a6 cd fd ff       	call   f0100d0e <cprintf>
f0123f68:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123f6b:	e8 e9 90 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123f70:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123f73:	e8 6b fe fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0123f78:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0123f7b:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0123f81:	83 ec 0c             	sub    $0xc,%esp
f0123f84:	50                   	push   %eax
f0123f85:	e8 8f 3b fe ff       	call   f0107b19 <kfree>
f0123f8a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123f8d:	e8 51 fe fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0123f92:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123f95:	74 17                	je     f0123fae <test_kfree_bestfirstfit+0x17f6>
f0123f97:	83 ec 04             	sub    $0x4,%esp
f0123f9a:	68 74 b4 13 f0       	push   $0xf013b474
f0123f9f:	68 b9 07 00 00       	push   $0x7b9
f0123fa4:	68 5a b4 13 f0       	push   $0xf013b45a
f0123fa9:	e8 57 c2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123fae:	e8 a6 90 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123fb3:	89 c2                	mov    %eax,%edx
f0123fb5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123fb8:	39 c2                	cmp    %eax,%edx
f0123fba:	74 17                	je     f0123fd3 <test_kfree_bestfirstfit+0x181b>
f0123fbc:	83 ec 04             	sub    $0x4,%esp
f0123fbf:	68 0c bd 13 f0       	push   $0xf013bd0c
f0123fc4:	68 ba 07 00 00       	push   $0x7ba
f0123fc9:	68 5a b4 13 f0       	push   $0xf013b45a
f0123fce:	e8 32 c2 fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123fd3:	e8 81 90 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0123fd8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123fdb:	e8 03 fe fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0123fe0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0123fe3:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0123fe9:	83 ec 0c             	sub    $0xc,%esp
f0123fec:	50                   	push   %eax
f0123fed:	e8 27 3b fe ff       	call   f0107b19 <kfree>
f0123ff2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123ff5:	e8 e9 fd fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0123ffa:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123ffd:	74 17                	je     f0124016 <test_kfree_bestfirstfit+0x185e>
f0123fff:	83 ec 04             	sub    $0x4,%esp
f0124002:	68 74 b4 13 f0       	push   $0xf013b474
f0124007:	68 c0 07 00 00       	push   $0x7c0
f012400c:	68 5a b4 13 f0       	push   $0xf013b45a
f0124011:	e8 ef c1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0124016:	e8 3e 90 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012401b:	89 c2                	mov    %eax,%edx
f012401d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0124020:	39 c2                	cmp    %eax,%edx
f0124022:	74 17                	je     f012403b <test_kfree_bestfirstfit+0x1883>
f0124024:	83 ec 04             	sub    $0x4,%esp
f0124027:	68 0c bd 13 f0       	push   $0xf013bd0c
f012402c:	68 c1 07 00 00       	push   $0x7c1
f0124031:	68 5a b4 13 f0       	push   $0xf013b45a
f0124036:	e8 ca c1 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012403b:	e8 19 90 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0124040:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124043:	e8 9b fd fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0124048:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f012404b:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0124051:	83 ec 0c             	sub    $0xc,%esp
f0124054:	50                   	push   %eax
f0124055:	e8 bf 3a fe ff       	call   f0107b19 <kfree>
f012405a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012405d:	e8 81 fd fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0124062:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0124065:	74 17                	je     f012407e <test_kfree_bestfirstfit+0x18c6>
f0124067:	83 ec 04             	sub    $0x4,%esp
f012406a:	68 74 b4 13 f0       	push   $0xf013b474
f012406f:	68 c7 07 00 00       	push   $0x7c7
f0124074:	68 5a b4 13 f0       	push   $0xf013b45a
f0124079:	e8 87 c1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012407e:	e8 d6 8f fe ff       	call   f010d059 <sys_calculate_free_frames>
f0124083:	89 c2                	mov    %eax,%edx
f0124085:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0124088:	39 c2                	cmp    %eax,%edx
f012408a:	74 17                	je     f01240a3 <test_kfree_bestfirstfit+0x18eb>
f012408c:	83 ec 04             	sub    $0x4,%esp
f012408f:	68 0c bd 13 f0       	push   $0xf013bd0c
f0124094:	68 c8 07 00 00       	push   $0x7c8
f0124099:	68 5a b4 13 f0       	push   $0xf013b45a
f012409e:	e8 62 c1 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01240a3:	e8 b1 8f fe ff       	call   f010d059 <sys_calculate_free_frames>
f01240a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01240ab:	e8 33 fd fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01240b0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01240b3:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01240b9:	83 ec 0c             	sub    $0xc,%esp
f01240bc:	50                   	push   %eax
f01240bd:	e8 57 3a fe ff       	call   f0107b19 <kfree>
f01240c2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01240c5:	e8 19 fd fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01240ca:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01240cd:	74 17                	je     f01240e6 <test_kfree_bestfirstfit+0x192e>
f01240cf:	83 ec 04             	sub    $0x4,%esp
f01240d2:	68 74 b4 13 f0       	push   $0xf013b474
f01240d7:	68 ce 07 00 00       	push   $0x7ce
f01240dc:	68 5a b4 13 f0       	push   $0xf013b45a
f01240e1:	e8 1f c1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01240e6:	e8 6e 8f fe ff       	call   f010d059 <sys_calculate_free_frames>
f01240eb:	89 c2                	mov    %eax,%edx
f01240ed:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01240f0:	39 c2                	cmp    %eax,%edx
f01240f2:	74 17                	je     f012410b <test_kfree_bestfirstfit+0x1953>
f01240f4:	83 ec 04             	sub    $0x4,%esp
f01240f7:	68 0c bd 13 f0       	push   $0xf013bd0c
f01240fc:	68 cf 07 00 00       	push   $0x7cf
f0124101:	68 5a b4 13 f0       	push   $0xf013b45a
f0124106:	e8 fa c0 fd ff       	call   f0100205 <_panic>

	}
	cprintf("\b\b\b85%");
f012410b:	83 ec 0c             	sub    $0xc,%esp
f012410e:	68 53 bd 13 f0       	push   $0xf013bd53
f0124113:	e8 f6 cb fd ff       	call   f0100d0e <cprintf>
f0124118:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012411b:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0124122:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0124129:	eb 48                	jmp    f0124173 <test_kfree_bestfirstfit+0x19bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f012412b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012412e:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0124133:	83 ec 04             	sub    $0x4,%esp
f0124136:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f012413c:	51                   	push   %ecx
f012413d:	52                   	push   %edx
f012413e:	50                   	push   %eax
f012413f:	e8 88 29 fe ff       	call   f0106acc <get_page_table>
f0124144:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124147:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f012414d:	85 c0                	test   %eax,%eax
f012414f:	75 17                	jne    f0124168 <test_kfree_bestfirstfit+0x19b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0124151:	83 ec 04             	sub    $0x4,%esp
f0124154:	68 5c bd 13 f0       	push   $0xf013bd5c
f0124159:	68 dd 07 00 00       	push   $0x7dd
f012415e:	68 5a b4 13 f0       	push   $0xf013b45a
f0124163:	e8 9d c0 fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0124168:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f012416f:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0124173:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0124177:	78 b2                	js     f012412b <test_kfree_bestfirstfit+0x1973>
f0124179:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012417d:	7f 09                	jg     f0124188 <test_kfree_bestfirstfit+0x19d0>
f012417f:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0124186:	76 a3                	jbe    f012412b <test_kfree_bestfirstfit+0x1973>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0124188:	83 ec 0c             	sub    $0xc,%esp
f012418b:	68 3e b6 13 f0       	push   $0xf013b63e
f0124190:	e8 79 cb fd ff       	call   f0100d0e <cprintf>
f0124195:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0124198:	83 ec 0c             	sub    $0xc,%esp
f012419b:	68 c4 bd 13 f0       	push   $0xf013bdc4
f01241a0:	e8 69 cb fd ff       	call   f0100d0e <cprintf>
f01241a5:	83 c4 10             	add    $0x10,%esp

	return 1;
f01241a8:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01241ad:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01241b0:	5b                   	pop    %ebx
f01241b1:	5f                   	pop    %edi
f01241b2:	5d                   	pop    %ebp
f01241b3:	c3                   	ret    

f01241b4 <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f01241b4:	55                   	push   %ebp
f01241b5:	89 e5                	mov    %esp,%ebp
f01241b7:	57                   	push   %edi
f01241b8:	56                   	push   %esi
f01241b9:	53                   	push   %ebx
f01241ba:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
	cprintf("==============================================\n");
f01241c0:	83 ec 0c             	sub    $0xc,%esp
f01241c3:	68 9c b3 13 f0       	push   $0xf013b39c
f01241c8:	e8 41 cb fd ff       	call   f0100d0e <cprintf>
f01241cd:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01241d0:	83 ec 0c             	sub    $0xc,%esp
f01241d3:	68 cc b3 13 f0       	push   $0xf013b3cc
f01241d8:	e8 31 cb fd ff       	call   f0100d0e <cprintf>
f01241dd:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01241e0:	83 ec 0c             	sub    $0xc,%esp
f01241e3:	68 9c b3 13 f0       	push   $0xf013b39c
f01241e8:	e8 21 cb fd ff       	call   f0100d0e <cprintf>
f01241ed:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01241f0:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f01241f4:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f01241f8:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f01241fe:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f0124204:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012420b:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0124212:	e8 42 8e fe ff       	call   f010d059 <sys_calculate_free_frames>
f0124217:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012421a:	8d 95 c4 fd ff ff    	lea    -0x23c(%ebp),%edx
f0124220:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124225:	b8 00 00 00 00       	mov    $0x0,%eax
f012422a:	89 d7                	mov    %edx,%edi
f012422c:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012422e:	8d 95 74 fd ff ff    	lea    -0x28c(%ebp),%edx
f0124234:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124239:	b8 00 00 00 00       	mov    $0x0,%eax
f012423e:	89 d7                	mov    %edx,%edi
f0124240:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0124242:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0124248:	b9 14 00 00 00       	mov    $0x14,%ecx
f012424d:	b8 00 00 00 00       	mov    $0x0,%eax
f0124252:	89 d7                	mov    %edx,%edi
f0124254:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124256:	e8 fe 8d fe ff       	call   f010d059 <sys_calculate_free_frames>
f012425b:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012425e:	e8 80 fb fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0124263:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0124266:	83 ec 0c             	sub    $0xc,%esp
f0124269:	68 00 fc 1f 00       	push   $0x1ffc00
f012426e:	e8 bd 37 fe ff       	call   f0107a30 <kmalloc>
f0124273:	83 c4 10             	add    $0x10,%esp
f0124276:	89 85 24 fd ff ff    	mov    %eax,-0x2dc(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012427c:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0124282:	89 c1                	mov    %eax,%ecx
f0124284:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f012428b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012428e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124293:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0124296:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0124299:	ba 00 00 00 00       	mov    $0x0,%edx
f012429e:	f7 75 a0             	divl   -0x60(%ebp)
f01242a1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01242a4:	29 d0                	sub    %edx,%eax
f01242a6:	89 c3                	mov    %eax,%ebx
f01242a8:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01242af:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01242b4:	0f b6 d0             	movzbl %al,%edx
f01242b7:	8b 45 98             	mov    -0x68(%ebp),%eax
f01242ba:	01 d0                	add    %edx,%eax
f01242bc:	48                   	dec    %eax
f01242bd:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01242c0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01242c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01242c8:	f7 75 98             	divl   -0x68(%ebp)
f01242cb:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01242ce:	29 d0                	sub    %edx,%eax
f01242d0:	01 c3                	add    %eax,%ebx
f01242d2:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01242d9:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01242de:	0f b6 c0             	movzbl %al,%eax
f01242e1:	c1 e0 04             	shl    $0x4,%eax
f01242e4:	89 c2                	mov    %eax,%edx
f01242e6:	8b 45 90             	mov    -0x70(%ebp),%eax
f01242e9:	01 d0                	add    %edx,%eax
f01242eb:	48                   	dec    %eax
f01242ec:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01242ef:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01242f2:	ba 00 00 00 00       	mov    $0x0,%edx
f01242f7:	f7 75 90             	divl   -0x70(%ebp)
f01242fa:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01242fd:	29 d0                	sub    %edx,%eax
f01242ff:	01 d8                	add    %ebx,%eax
f0124301:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0124306:	39 c1                	cmp    %eax,%ecx
f0124308:	74 17                	je     f0124321 <test_kheap_phys_addr+0x16d>
f012430a:	83 ec 04             	sub    $0x4,%esp
f012430d:	68 40 b5 13 f0       	push   $0xf013b540
f0124312:	68 0a 08 00 00       	push   $0x80a
f0124317:	68 5a b4 13 f0       	push   $0xf013b45a
f012431c:	e8 e4 be fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124321:	e8 bd fa fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0124326:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124329:	74 17                	je     f0124342 <test_kheap_phys_addr+0x18e>
f012432b:	83 ec 04             	sub    $0x4,%esp
f012432e:	68 74 b4 13 f0       	push   $0xf013b474
f0124333:	68 0b 08 00 00       	push   $0x80b
f0124338:	68 5a b4 13 f0       	push   $0xf013b45a
f012433d:	e8 c3 be fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124342:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124345:	e8 0f 8d fe ff       	call   f010d059 <sys_calculate_free_frames>
f012434a:	29 c3                	sub    %eax,%ebx
f012434c:	89 d8                	mov    %ebx,%eax
f012434e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124353:	74 17                	je     f012436c <test_kheap_phys_addr+0x1b8>
f0124355:	83 ec 04             	sub    $0x4,%esp
f0124358:	68 dc b4 13 f0       	push   $0xf013b4dc
f012435d:	68 0c 08 00 00       	push   $0x80c
f0124362:	68 5a b4 13 f0       	push   $0xf013b45a
f0124367:	e8 99 be fd ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012436c:	e8 e8 8c fe ff       	call   f010d059 <sys_calculate_free_frames>
f0124371:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124374:	e8 6a fa fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0124379:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012437c:	83 ec 0c             	sub    $0xc,%esp
f012437f:	68 00 fc 1f 00       	push   $0x1ffc00
f0124384:	e8 a7 36 fe ff       	call   f0107a30 <kmalloc>
f0124389:	83 c4 10             	add    $0x10,%esp
f012438c:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124392:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0124398:	89 c1                	mov    %eax,%ecx
f012439a:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01243a1:	8b 45 88             	mov    -0x78(%ebp),%eax
f01243a4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01243a9:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01243ac:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01243af:	ba 00 00 00 00       	mov    $0x0,%edx
f01243b4:	f7 75 88             	divl   -0x78(%ebp)
f01243b7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01243ba:	29 d0                	sub    %edx,%eax
f01243bc:	89 c3                	mov    %eax,%ebx
f01243be:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01243c5:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01243ca:	0f b6 d0             	movzbl %al,%edx
f01243cd:	8b 45 80             	mov    -0x80(%ebp),%eax
f01243d0:	01 d0                	add    %edx,%eax
f01243d2:	48                   	dec    %eax
f01243d3:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01243d9:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01243df:	ba 00 00 00 00       	mov    $0x0,%edx
f01243e4:	f7 75 80             	divl   -0x80(%ebp)
f01243e7:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01243ed:	29 d0                	sub    %edx,%eax
f01243ef:	01 c3                	add    %eax,%ebx
f01243f1:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01243f8:	10 00 00 
f01243fb:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0124400:	0f b6 c0             	movzbl %al,%eax
f0124403:	c1 e0 04             	shl    $0x4,%eax
f0124406:	89 c2                	mov    %eax,%edx
f0124408:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012440e:	01 d0                	add    %edx,%eax
f0124410:	48                   	dec    %eax
f0124411:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0124417:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012441d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124422:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0124428:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012442e:	29 d0                	sub    %edx,%eax
f0124430:	01 d8                	add    %ebx,%eax
f0124432:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0124437:	39 c1                	cmp    %eax,%ecx
f0124439:	74 17                	je     f0124452 <test_kheap_phys_addr+0x29e>
f012443b:	83 ec 04             	sub    $0x4,%esp
f012443e:	68 40 b5 13 f0       	push   $0xf013b540
f0124443:	68 12 08 00 00       	push   $0x812
f0124448:	68 5a b4 13 f0       	push   $0xf013b45a
f012444d:	e8 b3 bd fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124452:	e8 8c f9 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0124457:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012445a:	74 17                	je     f0124473 <test_kheap_phys_addr+0x2bf>
f012445c:	83 ec 04             	sub    $0x4,%esp
f012445f:	68 74 b4 13 f0       	push   $0xf013b474
f0124464:	68 13 08 00 00       	push   $0x813
f0124469:	68 5a b4 13 f0       	push   $0xf013b45a
f012446e:	e8 92 bd fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124473:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124476:	e8 de 8b fe ff       	call   f010d059 <sys_calculate_free_frames>
f012447b:	29 c3                	sub    %eax,%ebx
f012447d:	89 d8                	mov    %ebx,%eax
f012447f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124484:	74 17                	je     f012449d <test_kheap_phys_addr+0x2e9>
f0124486:	83 ec 04             	sub    $0x4,%esp
f0124489:	68 dc b4 13 f0       	push   $0xf013b4dc
f012448e:	68 14 08 00 00       	push   $0x814
f0124493:	68 5a b4 13 f0       	push   $0xf013b45a
f0124498:	e8 68 bd fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012449d:	e8 b7 8b fe ff       	call   f010d059 <sys_calculate_free_frames>
f01244a2:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01244a5:	e8 39 f9 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01244aa:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01244ad:	83 ec 0c             	sub    $0xc,%esp
f01244b0:	68 00 08 00 00       	push   $0x800
f01244b5:	e8 76 35 fe ff       	call   f0107a30 <kmalloc>
f01244ba:	83 c4 10             	add    $0x10,%esp
f01244bd:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01244c3:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f01244c9:	89 c1                	mov    %eax,%ecx
f01244cb:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01244d2:	10 00 00 
f01244d5:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01244db:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01244e0:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01244e6:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01244ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01244f1:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01244f7:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01244fd:	29 d0                	sub    %edx,%eax
f01244ff:	89 c3                	mov    %eax,%ebx
f0124501:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0124508:	10 00 00 
f012450b:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0124510:	0f b6 d0             	movzbl %al,%edx
f0124513:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0124519:	01 d0                	add    %edx,%eax
f012451b:	48                   	dec    %eax
f012451c:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0124522:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0124528:	ba 00 00 00 00       	mov    $0x0,%edx
f012452d:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0124533:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0124539:	29 d0                	sub    %edx,%eax
f012453b:	01 c3                	add    %eax,%ebx
f012453d:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0124544:	10 00 00 
f0124547:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012454c:	0f b6 c0             	movzbl %al,%eax
f012454f:	c1 e0 04             	shl    $0x4,%eax
f0124552:	89 c2                	mov    %eax,%edx
f0124554:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012455a:	01 d0                	add    %edx,%eax
f012455c:	48                   	dec    %eax
f012455d:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0124563:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0124569:	ba 00 00 00 00       	mov    $0x0,%edx
f012456e:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0124574:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012457a:	29 d0                	sub    %edx,%eax
f012457c:	01 d8                	add    %ebx,%eax
f012457e:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0124583:	39 c1                	cmp    %eax,%ecx
f0124585:	74 17                	je     f012459e <test_kheap_phys_addr+0x3ea>
f0124587:	83 ec 04             	sub    $0x4,%esp
f012458a:	68 40 b5 13 f0       	push   $0xf013b540
f012458f:	68 1a 08 00 00       	push   $0x81a
f0124594:	68 5a b4 13 f0       	push   $0xf013b45a
f0124599:	e8 67 bc fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012459e:	e8 40 f8 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01245a3:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01245a6:	74 17                	je     f01245bf <test_kheap_phys_addr+0x40b>
f01245a8:	83 ec 04             	sub    $0x4,%esp
f01245ab:	68 74 b4 13 f0       	push   $0xf013b474
f01245b0:	68 1b 08 00 00       	push   $0x81b
f01245b5:	68 5a b4 13 f0       	push   $0xf013b45a
f01245ba:	e8 46 bc fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01245bf:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01245c2:	e8 92 8a fe ff       	call   f010d059 <sys_calculate_free_frames>
f01245c7:	29 c3                	sub    %eax,%ebx
f01245c9:	89 d8                	mov    %ebx,%eax
f01245cb:	83 f8 01             	cmp    $0x1,%eax
f01245ce:	74 17                	je     f01245e7 <test_kheap_phys_addr+0x433>
f01245d0:	83 ec 04             	sub    $0x4,%esp
f01245d3:	68 dc b4 13 f0       	push   $0xf013b4dc
f01245d8:	68 1c 08 00 00       	push   $0x81c
f01245dd:	68 5a b4 13 f0       	push   $0xf013b45a
f01245e2:	e8 1e bc fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01245e7:	e8 6d 8a fe ff       	call   f010d059 <sys_calculate_free_frames>
f01245ec:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01245ef:	e8 ef f7 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01245f4:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01245f7:	83 ec 0c             	sub    $0xc,%esp
f01245fa:	68 00 08 00 00       	push   $0x800
f01245ff:	e8 2c 34 fe ff       	call   f0107a30 <kmalloc>
f0124604:	83 c4 10             	add    $0x10,%esp
f0124607:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012460d:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f0124613:	89 c1                	mov    %eax,%ecx
f0124615:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012461c:	10 00 00 
f012461f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0124625:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012462a:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0124630:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0124636:	ba 00 00 00 00       	mov    $0x0,%edx
f012463b:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0124641:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0124647:	29 d0                	sub    %edx,%eax
f0124649:	89 c3                	mov    %eax,%ebx
f012464b:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0124652:	10 00 00 
f0124655:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012465a:	0f b6 d0             	movzbl %al,%edx
f012465d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0124663:	01 d0                	add    %edx,%eax
f0124665:	48                   	dec    %eax
f0124666:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012466c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0124672:	ba 00 00 00 00       	mov    $0x0,%edx
f0124677:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012467d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0124683:	29 d0                	sub    %edx,%eax
f0124685:	01 c3                	add    %eax,%ebx
f0124687:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012468e:	10 00 00 
f0124691:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0124696:	0f b6 c0             	movzbl %al,%eax
f0124699:	c1 e0 04             	shl    $0x4,%eax
f012469c:	89 c2                	mov    %eax,%edx
f012469e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01246a4:	01 d0                	add    %edx,%eax
f01246a6:	48                   	dec    %eax
f01246a7:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01246ad:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01246b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01246b8:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01246be:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01246c4:	29 d0                	sub    %edx,%eax
f01246c6:	01 d8                	add    %ebx,%eax
f01246c8:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01246cd:	39 c1                	cmp    %eax,%ecx
f01246cf:	74 17                	je     f01246e8 <test_kheap_phys_addr+0x534>
f01246d1:	83 ec 04             	sub    $0x4,%esp
f01246d4:	68 40 b5 13 f0       	push   $0xf013b540
f01246d9:	68 22 08 00 00       	push   $0x822
f01246de:	68 5a b4 13 f0       	push   $0xf013b45a
f01246e3:	e8 1d bb fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01246e8:	e8 f6 f6 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01246ed:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01246f0:	74 17                	je     f0124709 <test_kheap_phys_addr+0x555>
f01246f2:	83 ec 04             	sub    $0x4,%esp
f01246f5:	68 74 b4 13 f0       	push   $0xf013b474
f01246fa:	68 23 08 00 00       	push   $0x823
f01246ff:	68 5a b4 13 f0       	push   $0xf013b45a
f0124704:	e8 fc ba fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124709:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012470c:	e8 48 89 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0124711:	29 c3                	sub    %eax,%ebx
f0124713:	89 d8                	mov    %ebx,%eax
f0124715:	83 f8 01             	cmp    $0x1,%eax
f0124718:	74 17                	je     f0124731 <test_kheap_phys_addr+0x57d>
f012471a:	83 ec 04             	sub    $0x4,%esp
f012471d:	68 dc b4 13 f0       	push   $0xf013b4dc
f0124722:	68 24 08 00 00       	push   $0x824
f0124727:	68 5a b4 13 f0       	push   $0xf013b45a
f012472c:	e8 d4 ba fd ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0124731:	e8 23 89 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0124736:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124739:	e8 a5 f6 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012473e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0124741:	83 ec 0c             	sub    $0xc,%esp
f0124744:	68 00 1c 00 00       	push   $0x1c00
f0124749:	e8 e2 32 fe ff       	call   f0107a30 <kmalloc>
f012474e:	83 c4 10             	add    $0x10,%esp
f0124751:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124757:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f012475d:	89 c1                	mov    %eax,%ecx
f012475f:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0124766:	10 00 00 
f0124769:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012476f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124774:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012477a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0124780:	ba 00 00 00 00       	mov    $0x0,%edx
f0124785:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f012478b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0124791:	29 d0                	sub    %edx,%eax
f0124793:	89 c3                	mov    %eax,%ebx
f0124795:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012479c:	10 00 00 
f012479f:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01247a4:	0f b6 d0             	movzbl %al,%edx
f01247a7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01247ad:	01 d0                	add    %edx,%eax
f01247af:	48                   	dec    %eax
f01247b0:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01247b6:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01247bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01247c1:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01247c7:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01247cd:	29 d0                	sub    %edx,%eax
f01247cf:	01 c3                	add    %eax,%ebx
f01247d1:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01247d8:	10 00 00 
f01247db:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01247e0:	0f b6 c0             	movzbl %al,%eax
f01247e3:	c1 e0 04             	shl    $0x4,%eax
f01247e6:	89 c2                	mov    %eax,%edx
f01247e8:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01247ee:	01 d0                	add    %edx,%eax
f01247f0:	48                   	dec    %eax
f01247f1:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01247f7:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01247fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0124802:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0124808:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012480e:	29 d0                	sub    %edx,%eax
f0124810:	01 d8                	add    %ebx,%eax
f0124812:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0124817:	39 c1                	cmp    %eax,%ecx
f0124819:	74 17                	je     f0124832 <test_kheap_phys_addr+0x67e>
f012481b:	83 ec 04             	sub    $0x4,%esp
f012481e:	68 40 b5 13 f0       	push   $0xf013b540
f0124823:	68 2a 08 00 00       	push   $0x82a
f0124828:	68 5a b4 13 f0       	push   $0xf013b45a
f012482d:	e8 d3 b9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124832:	e8 ac f5 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0124837:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012483a:	74 17                	je     f0124853 <test_kheap_phys_addr+0x69f>
f012483c:	83 ec 04             	sub    $0x4,%esp
f012483f:	68 74 b4 13 f0       	push   $0xf013b474
f0124844:	68 2b 08 00 00       	push   $0x82b
f0124849:	68 5a b4 13 f0       	push   $0xf013b45a
f012484e:	e8 b2 b9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124853:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124856:	e8 fe 87 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012485b:	29 c3                	sub    %eax,%ebx
f012485d:	89 d8                	mov    %ebx,%eax
f012485f:	83 f8 02             	cmp    $0x2,%eax
f0124862:	74 17                	je     f012487b <test_kheap_phys_addr+0x6c7>
f0124864:	83 ec 04             	sub    $0x4,%esp
f0124867:	68 dc b4 13 f0       	push   $0xf013b4dc
f012486c:	68 2c 08 00 00       	push   $0x82c
f0124871:	68 5a b4 13 f0       	push   $0xf013b45a
f0124876:	e8 8a b9 fd ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012487b:	e8 d9 87 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0124880:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124883:	e8 5b f5 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0124888:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012488b:	83 ec 0c             	sub    $0xc,%esp
f012488e:	68 00 fc 2f 00       	push   $0x2ffc00
f0124893:	e8 98 31 fe ff       	call   f0107a30 <kmalloc>
f0124898:	83 c4 10             	add    $0x10,%esp
f012489b:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01248a1:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f01248a7:	89 c1                	mov    %eax,%ecx
f01248a9:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01248b0:	10 00 00 
f01248b3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01248b9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01248be:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01248c4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01248ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01248cf:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f01248d5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01248db:	29 d0                	sub    %edx,%eax
f01248dd:	89 c3                	mov    %eax,%ebx
f01248df:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01248e6:	10 00 00 
f01248e9:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01248ee:	0f b6 d0             	movzbl %al,%edx
f01248f1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01248f7:	01 d0                	add    %edx,%eax
f01248f9:	48                   	dec    %eax
f01248fa:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0124900:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0124906:	ba 00 00 00 00       	mov    $0x0,%edx
f012490b:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0124911:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0124917:	29 d0                	sub    %edx,%eax
f0124919:	01 c3                	add    %eax,%ebx
f012491b:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0124922:	10 00 00 
f0124925:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012492a:	0f b6 c0             	movzbl %al,%eax
f012492d:	c1 e0 04             	shl    $0x4,%eax
f0124930:	89 c2                	mov    %eax,%edx
f0124932:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0124938:	01 d0                	add    %edx,%eax
f012493a:	48                   	dec    %eax
f012493b:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0124941:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0124947:	ba 00 00 00 00       	mov    $0x0,%edx
f012494c:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0124952:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0124958:	29 d0                	sub    %edx,%eax
f012495a:	01 d8                	add    %ebx,%eax
f012495c:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0124961:	39 c1                	cmp    %eax,%ecx
f0124963:	74 17                	je     f012497c <test_kheap_phys_addr+0x7c8>
f0124965:	83 ec 04             	sub    $0x4,%esp
f0124968:	68 40 b5 13 f0       	push   $0xf013b540
f012496d:	68 32 08 00 00       	push   $0x832
f0124972:	68 5a b4 13 f0       	push   $0xf013b45a
f0124977:	e8 89 b8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012497c:	e8 62 f4 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0124981:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124984:	74 17                	je     f012499d <test_kheap_phys_addr+0x7e9>
f0124986:	83 ec 04             	sub    $0x4,%esp
f0124989:	68 74 b4 13 f0       	push   $0xf013b474
f012498e:	68 33 08 00 00       	push   $0x833
f0124993:	68 5a b4 13 f0       	push   $0xf013b45a
f0124998:	e8 68 b8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012499d:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01249a0:	e8 b4 86 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01249a5:	29 c3                	sub    %eax,%ebx
f01249a7:	89 d8                	mov    %ebx,%eax
f01249a9:	3d 00 03 00 00       	cmp    $0x300,%eax
f01249ae:	74 17                	je     f01249c7 <test_kheap_phys_addr+0x813>
f01249b0:	83 ec 04             	sub    $0x4,%esp
f01249b3:	68 dc b4 13 f0       	push   $0xf013b4dc
f01249b8:	68 34 08 00 00       	push   $0x834
f01249bd:	68 5a b4 13 f0       	push   $0xf013b45a
f01249c2:	e8 3e b8 fd ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01249c7:	e8 8d 86 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01249cc:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01249cf:	e8 0f f4 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01249d4:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01249d7:	83 ec 0c             	sub    $0xc,%esp
f01249da:	68 00 fc 5f 00       	push   $0x5ffc00
f01249df:	e8 4c 30 fe ff       	call   f0107a30 <kmalloc>
f01249e4:	83 c4 10             	add    $0x10,%esp
f01249e7:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01249ed:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f01249f3:	89 c1                	mov    %eax,%ecx
f01249f5:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01249fc:	10 00 00 
f01249ff:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0124a05:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124a0a:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0124a10:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0124a16:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a1b:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0124a21:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0124a27:	29 d0                	sub    %edx,%eax
f0124a29:	89 c3                	mov    %eax,%ebx
f0124a2b:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0124a32:	10 00 00 
f0124a35:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0124a3a:	0f b6 d0             	movzbl %al,%edx
f0124a3d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0124a43:	01 d0                	add    %edx,%eax
f0124a45:	48                   	dec    %eax
f0124a46:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0124a4c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124a52:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a57:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0124a5d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124a63:	29 d0                	sub    %edx,%eax
f0124a65:	01 c3                	add    %eax,%ebx
f0124a67:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0124a6e:	10 00 00 
f0124a71:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0124a76:	0f b6 c0             	movzbl %al,%eax
f0124a79:	c1 e0 04             	shl    $0x4,%eax
f0124a7c:	89 c2                	mov    %eax,%edx
f0124a7e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0124a84:	01 d0                	add    %edx,%eax
f0124a86:	48                   	dec    %eax
f0124a87:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0124a8d:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124a93:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a98:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0124a9e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124aa4:	29 d0                	sub    %edx,%eax
f0124aa6:	01 d8                	add    %ebx,%eax
f0124aa8:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0124aad:	39 c1                	cmp    %eax,%ecx
f0124aaf:	74 17                	je     f0124ac8 <test_kheap_phys_addr+0x914>
f0124ab1:	83 ec 04             	sub    $0x4,%esp
f0124ab4:	68 40 b5 13 f0       	push   $0xf013b540
f0124ab9:	68 3a 08 00 00       	push   $0x83a
f0124abe:	68 5a b4 13 f0       	push   $0xf013b45a
f0124ac3:	e8 3d b7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124ac8:	e8 16 f3 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0124acd:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124ad0:	74 17                	je     f0124ae9 <test_kheap_phys_addr+0x935>
f0124ad2:	83 ec 04             	sub    $0x4,%esp
f0124ad5:	68 74 b4 13 f0       	push   $0xf013b474
f0124ada:	68 3b 08 00 00       	push   $0x83b
f0124adf:	68 5a b4 13 f0       	push   $0xf013b45a
f0124ae4:	e8 1c b7 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124ae9:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124aec:	e8 68 85 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0124af1:	29 c3                	sub    %eax,%ebx
f0124af3:	89 d8                	mov    %ebx,%eax
f0124af5:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124afa:	74 17                	je     f0124b13 <test_kheap_phys_addr+0x95f>
f0124afc:	83 ec 04             	sub    $0x4,%esp
f0124aff:	68 dc b4 13 f0       	push   $0xf013b4dc
f0124b04:	68 3c 08 00 00       	push   $0x83c
f0124b09:	68 5a b4 13 f0       	push   $0xf013b45a
f0124b0e:	e8 f2 b6 fd ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0124b13:	e8 41 85 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0124b18:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124b1b:	e8 c3 f2 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0124b20:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0124b23:	83 ec 0c             	sub    $0xc,%esp
f0124b26:	68 00 38 00 00       	push   $0x3800
f0124b2b:	e8 00 2f fe ff       	call   f0107a30 <kmalloc>
f0124b30:	83 c4 10             	add    $0x10,%esp
f0124b33:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124b39:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0124b3f:	89 c1                	mov    %eax,%ecx
f0124b41:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0124b48:	10 00 00 
f0124b4b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0124b51:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124b56:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0124b5c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0124b62:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b67:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0124b6d:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0124b73:	29 d0                	sub    %edx,%eax
f0124b75:	89 c3                	mov    %eax,%ebx
f0124b77:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0124b7e:	10 00 00 
f0124b81:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0124b86:	0f b6 d0             	movzbl %al,%edx
f0124b89:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124b8f:	01 d0                	add    %edx,%eax
f0124b91:	48                   	dec    %eax
f0124b92:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0124b98:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0124b9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ba3:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0124ba9:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0124baf:	29 d0                	sub    %edx,%eax
f0124bb1:	01 c3                	add    %eax,%ebx
f0124bb3:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0124bba:	10 00 00 
f0124bbd:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0124bc2:	0f b6 c0             	movzbl %al,%eax
f0124bc5:	c1 e0 04             	shl    $0x4,%eax
f0124bc8:	89 c2                	mov    %eax,%edx
f0124bca:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0124bd0:	01 d0                	add    %edx,%eax
f0124bd2:	48                   	dec    %eax
f0124bd3:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0124bd9:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124bdf:	ba 00 00 00 00       	mov    $0x0,%edx
f0124be4:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0124bea:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124bf0:	29 d0                	sub    %edx,%eax
f0124bf2:	01 d8                	add    %ebx,%eax
f0124bf4:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0124bf9:	39 c1                	cmp    %eax,%ecx
f0124bfb:	74 17                	je     f0124c14 <test_kheap_phys_addr+0xa60>
f0124bfd:	83 ec 04             	sub    $0x4,%esp
f0124c00:	68 40 b5 13 f0       	push   $0xf013b540
f0124c05:	68 42 08 00 00       	push   $0x842
f0124c0a:	68 5a b4 13 f0       	push   $0xf013b45a
f0124c0f:	e8 f1 b5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124c14:	e8 ca f1 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0124c19:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124c1c:	74 17                	je     f0124c35 <test_kheap_phys_addr+0xa81>
f0124c1e:	83 ec 04             	sub    $0x4,%esp
f0124c21:	68 74 b4 13 f0       	push   $0xf013b474
f0124c26:	68 43 08 00 00       	push   $0x843
f0124c2b:	68 5a b4 13 f0       	push   $0xf013b45a
f0124c30:	e8 d0 b5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124c35:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124c38:	e8 1c 84 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0124c3d:	29 c3                	sub    %eax,%ebx
f0124c3f:	89 d8                	mov    %ebx,%eax
f0124c41:	83 f8 04             	cmp    $0x4,%eax
f0124c44:	74 17                	je     f0124c5d <test_kheap_phys_addr+0xaa9>
f0124c46:	83 ec 04             	sub    $0x4,%esp
f0124c49:	68 dc b4 13 f0       	push   $0xf013b4dc
f0124c4e:	68 44 08 00 00       	push   $0x844
f0124c53:	68 5a b4 13 f0       	push   $0xf013b45a
f0124c58:	e8 a8 b5 fd ff       	call   f0100205 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f0124c5d:	89 e0                	mov    %esp,%eax
f0124c5f:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124c61:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0124c68:	10 00 00 
f0124c6b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0124c71:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124c76:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0124c7c:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124c82:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c87:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0124c8d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124c93:	29 d0                	sub    %edx,%eax
f0124c95:	89 c1                	mov    %eax,%ecx
f0124c97:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0124c9e:	10 00 00 
f0124ca1:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0124ca6:	0f b6 d0             	movzbl %al,%edx
f0124ca9:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0124caf:	01 d0                	add    %edx,%eax
f0124cb1:	48                   	dec    %eax
f0124cb2:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0124cb8:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0124cbe:	ba 00 00 00 00       	mov    $0x0,%edx
f0124cc3:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0124cc9:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0124ccf:	29 d0                	sub    %edx,%eax
f0124cd1:	01 c1                	add    %eax,%ecx
f0124cd3:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0124cda:	10 00 00 
f0124cdd:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0124ce2:	0f b6 c0             	movzbl %al,%eax
f0124ce5:	c1 e0 04             	shl    $0x4,%eax
f0124ce8:	89 c2                	mov    %eax,%edx
f0124cea:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124cf0:	01 d0                	add    %edx,%eax
f0124cf2:	48                   	dec    %eax
f0124cf3:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0124cf9:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124cff:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d04:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0124d0a:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124d10:	29 d0                	sub    %edx,%eax
f0124d12:	01 c8                	add    %ecx,%eax
f0124d14:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124d19:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0124d1f:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0124d26:	10 00 00 
f0124d29:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124d2f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124d34:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0124d3a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124d40:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d45:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0124d4b:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124d51:	29 d0                	sub    %edx,%eax
f0124d53:	89 c1                	mov    %eax,%ecx
f0124d55:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0124d5c:	10 00 00 
f0124d5f:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0124d64:	0f b6 d0             	movzbl %al,%edx
f0124d67:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0124d6d:	01 d0                	add    %edx,%eax
f0124d6f:	48                   	dec    %eax
f0124d70:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0124d76:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0124d7c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d81:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0124d87:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0124d8d:	29 d0                	sub    %edx,%eax
f0124d8f:	01 c1                	add    %eax,%ecx
f0124d91:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0124d98:	10 00 00 
f0124d9b:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0124da0:	0f b6 c0             	movzbl %al,%eax
f0124da3:	c1 e0 04             	shl    $0x4,%eax
f0124da6:	89 c2                	mov    %eax,%edx
f0124da8:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0124dae:	01 d0                	add    %edx,%eax
f0124db0:	48                   	dec    %eax
f0124db1:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0124db7:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124dbd:	ba 00 00 00 00       	mov    $0x0,%edx
f0124dc2:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0124dc8:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124dce:	29 d0                	sub    %edx,%eax
f0124dd0:	01 c8                	add    %ecx,%eax
f0124dd2:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124dd7:	c1 e8 0c             	shr    $0xc,%eax
f0124dda:	89 c2                	mov    %eax,%edx
f0124ddc:	4a                   	dec    %edx
f0124ddd:	89 95 ac fe ff ff    	mov    %edx,-0x154(%ebp)
f0124de3:	c1 e0 02             	shl    $0x2,%eax
f0124de6:	8d 50 03             	lea    0x3(%eax),%edx
f0124de9:	b8 10 00 00 00       	mov    $0x10,%eax
f0124dee:	48                   	dec    %eax
f0124def:	01 d0                	add    %edx,%eax
f0124df1:	bf 10 00 00 00       	mov    $0x10,%edi
f0124df6:	ba 00 00 00 00       	mov    $0x0,%edx
f0124dfb:	f7 f7                	div    %edi
f0124dfd:	6b c0 10             	imul   $0x10,%eax,%eax
f0124e00:	29 c4                	sub    %eax,%esp
f0124e02:	89 e0                	mov    %esp,%eax
f0124e04:	83 c0 03             	add    $0x3,%eax
f0124e07:	c1 e8 02             	shr    $0x2,%eax
f0124e0a:	c1 e0 02             	shl    $0x2,%eax
f0124e0d:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f0124e13:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124e1a:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0124e21:	10 00 00 
f0124e24:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0124e2a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124e2f:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0124e35:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0124e3b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e40:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0124e46:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0124e4c:	29 d0                	sub    %edx,%eax
f0124e4e:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124e53:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124e56:	eb 29                	jmp    f0124e81 <test_kheap_phys_addr+0xccd>
		{
			allPAs[i++] = kheap_physical_address(va);
f0124e58:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0124e5b:	8d 43 01             	lea    0x1(%ebx),%eax
f0124e5e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0124e61:	83 ec 0c             	sub    $0xc,%esp
f0124e64:	ff 75 e0             	pushl  -0x20(%ebp)
f0124e67:	e8 df 2d fe ff       	call   f0107c4b <kheap_physical_address>
f0124e6c:	83 c4 10             	add    $0x10,%esp
f0124e6f:	89 c2                	mov    %eax,%edx
f0124e71:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0124e77:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124e7a:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f0124e81:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124e84:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0124e8a:	72 cc                	jb     f0124e58 <test_kheap_phys_addr+0xca4>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0124e8c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124e8f:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		i = 0;
f0124e95:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124e9c:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0124ea3:	10 00 00 
f0124ea6:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0124eac:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124eb1:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0124eb7:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124ebd:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ec2:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0124ec8:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124ece:	29 d0                	sub    %edx,%eax
f0124ed0:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124ed5:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124ed8:	e9 ab 00 00 00       	jmp    f0124f88 <test_kheap_phys_addr+0xdd4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124edd:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0124ee2:	83 ec 04             	sub    $0x4,%esp
f0124ee5:	8d 95 20 fd ff ff    	lea    -0x2e0(%ebp),%edx
f0124eeb:	52                   	push   %edx
f0124eec:	ff 75 e0             	pushl  -0x20(%ebp)
f0124eef:	50                   	push   %eax
f0124ef0:	e8 d7 1b fe ff       	call   f0106acc <get_page_table>
f0124ef5:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124ef8:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124efe:	85 c0                	test   %eax,%eax
f0124f00:	75 17                	jne    f0124f19 <test_kheap_phys_addr+0xd65>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124f02:	83 ec 04             	sub    $0x4,%esp
f0124f05:	68 fc bd 13 f0       	push   $0xf013bdfc
f0124f0a:	68 59 08 00 00       	push   $0x859
f0124f0f:	68 5a b4 13 f0       	push   $0xf013b45a
f0124f14:	e8 ec b2 fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124f19:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124f1c:	c1 e8 0c             	shr    $0xc,%eax
f0124f1f:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124f24:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0124f27:	eb 4b                	jmp    f0124f74 <test_kheap_phys_addr+0xdc0>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0124f29:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124f2f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124f32:	c1 e2 02             	shl    $0x2,%edx
f0124f35:	01 d0                	add    %edx,%eax
f0124f37:	8b 00                	mov    (%eax),%eax
f0124f39:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124f3e:	89 c1                	mov    %eax,%ecx
f0124f40:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0124f46:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124f49:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124f4c:	39 c1                	cmp    %eax,%ecx
f0124f4e:	74 17                	je     f0124f67 <test_kheap_phys_addr+0xdb3>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124f50:	83 ec 04             	sub    $0x4,%esp
f0124f53:	68 55 be 13 f0       	push   $0xf013be55
f0124f58:	68 60 08 00 00       	push   $0x860
f0124f5d:	68 5a b4 13 f0       	push   $0xf013b45a
f0124f62:	e8 9e b2 fd ff       	call   f0100205 <_panic>
				}
				va+=PAGE_SIZE;
f0124f67:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124f6e:	ff 45 dc             	incl   -0x24(%ebp)
f0124f71:	ff 45 e4             	incl   -0x1c(%ebp)
f0124f74:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124f77:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f0124f7d:	7d 09                	jge    f0124f88 <test_kheap_phys_addr+0xdd4>
f0124f7f:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0124f86:	7e a1                	jle    f0124f29 <test_kheap_phys_addr+0xd75>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124f88:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124f8b:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0124f91:	0f 82 46 ff ff ff    	jb     f0124edd <test_kheap_phys_addr+0xd29>
f0124f97:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f0124f99:	83 ec 0c             	sub    $0xc,%esp
f0124f9c:	68 74 be 13 f0       	push   $0xf013be74
f0124fa1:	e8 68 bd fd ff       	call   f0100d0e <cprintf>
f0124fa6:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0124fa9:	e8 ab 80 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0124fae:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0124fb4:	e8 2a ee fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0124fb9:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[0]);
f0124fbf:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0124fc5:	83 ec 0c             	sub    $0xc,%esp
f0124fc8:	50                   	push   %eax
f0124fc9:	e8 4b 2b fe ff       	call   f0107b19 <kfree>
f0124fce:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124fd1:	e8 0d ee fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0124fd6:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124fdc:	74 17                	je     f0124ff5 <test_kheap_phys_addr+0xe41>
f0124fde:	83 ec 04             	sub    $0x4,%esp
f0124fe1:	68 74 b4 13 f0       	push   $0xf013b474
f0124fe6:	68 6e 08 00 00       	push   $0x86e
f0124feb:	68 5a b4 13 f0       	push   $0xf013b45a
f0124ff0:	e8 10 b2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0124ff5:	e8 5f 80 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0124ffa:	89 c2                	mov    %eax,%edx
f0124ffc:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0125002:	29 c2                	sub    %eax,%edx
f0125004:	89 d0                	mov    %edx,%eax
f0125006:	3d 00 02 00 00       	cmp    $0x200,%eax
f012500b:	74 17                	je     f0125024 <test_kheap_phys_addr+0xe70>
f012500d:	83 ec 04             	sub    $0x4,%esp
f0125010:	68 e4 bb 13 f0       	push   $0xf013bbe4
f0125015:	68 6f 08 00 00       	push   $0x86f
f012501a:	68 5a b4 13 f0       	push   $0xf013b45a
f012501f:	e8 e1 b1 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125024:	e8 30 80 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0125029:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012502f:	e8 af ed fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0125034:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[1]);
f012503a:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0125040:	83 ec 0c             	sub    $0xc,%esp
f0125043:	50                   	push   %eax
f0125044:	e8 d0 2a fe ff       	call   f0107b19 <kfree>
f0125049:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012504c:	e8 92 ed fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0125051:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0125057:	74 17                	je     f0125070 <test_kheap_phys_addr+0xebc>
f0125059:	83 ec 04             	sub    $0x4,%esp
f012505c:	68 74 b4 13 f0       	push   $0xf013b474
f0125061:	68 75 08 00 00       	push   $0x875
f0125066:	68 5a b4 13 f0       	push   $0xf013b45a
f012506b:	e8 95 b1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0125070:	e8 e4 7f fe ff       	call   f010d059 <sys_calculate_free_frames>
f0125075:	89 c2                	mov    %eax,%edx
f0125077:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012507d:	29 c2                	sub    %eax,%edx
f012507f:	89 d0                	mov    %edx,%eax
f0125081:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125086:	74 17                	je     f012509f <test_kheap_phys_addr+0xeeb>
f0125088:	83 ec 04             	sub    $0x4,%esp
f012508b:	68 e4 bb 13 f0       	push   $0xf013bbe4
f0125090:	68 76 08 00 00       	push   $0x876
f0125095:	68 5a b4 13 f0       	push   $0xf013b45a
f012509a:	e8 66 b1 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012509f:	e8 b5 7f fe ff       	call   f010d059 <sys_calculate_free_frames>
f01250a4:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01250aa:	e8 34 ed fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01250af:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[6]);
f01250b5:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f01250bb:	83 ec 0c             	sub    $0xc,%esp
f01250be:	50                   	push   %eax
f01250bf:	e8 55 2a fe ff       	call   f0107b19 <kfree>
f01250c4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01250c7:	e8 17 ed fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01250cc:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f01250d2:	74 17                	je     f01250eb <test_kheap_phys_addr+0xf37>
f01250d4:	83 ec 04             	sub    $0x4,%esp
f01250d7:	68 74 b4 13 f0       	push   $0xf013b474
f01250dc:	68 7c 08 00 00       	push   $0x87c
f01250e1:	68 5a b4 13 f0       	push   $0xf013b45a
f01250e6:	e8 1a b1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01250eb:	e8 69 7f fe ff       	call   f010d059 <sys_calculate_free_frames>
f01250f0:	89 c2                	mov    %eax,%edx
f01250f2:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01250f8:	29 c2                	sub    %eax,%edx
f01250fa:	89 d0                	mov    %edx,%eax
f01250fc:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125101:	74 17                	je     f012511a <test_kheap_phys_addr+0xf66>
f0125103:	83 ec 04             	sub    $0x4,%esp
f0125106:	68 e4 bb 13 f0       	push   $0xf013bbe4
f012510b:	68 7d 08 00 00       	push   $0x87d
f0125110:	68 5a b4 13 f0       	push   $0xf013b45a
f0125115:	e8 eb b0 fd ff       	call   f0100205 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f012511a:	89 e0                	mov    %esp,%eax
f012511c:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f012511e:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0125125:	10 00 00 
f0125128:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012512e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125133:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0125139:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012513f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125144:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012514a:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0125150:	29 d0                	sub    %edx,%eax
f0125152:	89 c1                	mov    %eax,%ecx
f0125154:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012515b:	10 00 00 
f012515e:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0125163:	0f b6 d0             	movzbl %al,%edx
f0125166:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012516c:	01 d0                	add    %edx,%eax
f012516e:	48                   	dec    %eax
f012516f:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0125175:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012517b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125180:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0125186:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012518c:	29 d0                	sub    %edx,%eax
f012518e:	01 c1                	add    %eax,%ecx
f0125190:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0125197:	10 00 00 
f012519a:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012519f:	0f b6 c0             	movzbl %al,%eax
f01251a2:	c1 e0 04             	shl    $0x4,%eax
f01251a5:	89 c2                	mov    %eax,%edx
f01251a7:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01251ad:	01 d0                	add    %edx,%eax
f01251af:	48                   	dec    %eax
f01251b0:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f01251b6:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01251bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01251c1:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f01251c7:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01251cd:	29 d0                	sub    %edx,%eax
f01251cf:	01 c8                	add    %ecx,%eax
f01251d1:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01251d6:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f01251dc:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f01251e3:	10 00 00 
f01251e6:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01251ec:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01251f1:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f01251f7:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01251fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0125202:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0125208:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012520e:	29 d0                	sub    %edx,%eax
f0125210:	89 c1                	mov    %eax,%ecx
f0125212:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0125219:	10 00 00 
f012521c:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0125221:	0f b6 d0             	movzbl %al,%edx
f0125224:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012522a:	01 d0                	add    %edx,%eax
f012522c:	48                   	dec    %eax
f012522d:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0125233:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0125239:	ba 00 00 00 00       	mov    $0x0,%edx
f012523e:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f0125244:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012524a:	29 d0                	sub    %edx,%eax
f012524c:	01 c1                	add    %eax,%ecx
f012524e:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0125255:	10 00 00 
f0125258:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012525d:	0f b6 c0             	movzbl %al,%eax
f0125260:	c1 e0 04             	shl    $0x4,%eax
f0125263:	89 c2                	mov    %eax,%edx
f0125265:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012526b:	01 d0                	add    %edx,%eax
f012526d:	48                   	dec    %eax
f012526e:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0125274:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012527a:	ba 00 00 00 00       	mov    $0x0,%edx
f012527f:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0125285:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012528b:	29 d0                	sub    %edx,%eax
f012528d:	01 c8                	add    %ecx,%eax
f012528f:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0125294:	c1 e8 0c             	shr    $0xc,%eax
f0125297:	89 c2                	mov    %eax,%edx
f0125299:	4a                   	dec    %edx
f012529a:	89 95 54 fe ff ff    	mov    %edx,-0x1ac(%ebp)
f01252a0:	c1 e0 02             	shl    $0x2,%eax
f01252a3:	8d 50 03             	lea    0x3(%eax),%edx
f01252a6:	b8 10 00 00 00       	mov    $0x10,%eax
f01252ab:	48                   	dec    %eax
f01252ac:	01 d0                	add    %edx,%eax
f01252ae:	bf 10 00 00 00       	mov    $0x10,%edi
f01252b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01252b8:	f7 f7                	div    %edi
f01252ba:	6b c0 10             	imul   $0x10,%eax,%eax
f01252bd:	29 c4                	sub    %eax,%esp
f01252bf:	89 e0                	mov    %esp,%eax
f01252c1:	83 c0 03             	add    $0x3,%eax
f01252c4:	c1 e8 02             	shr    $0x2,%eax
f01252c7:	c1 e0 02             	shl    $0x2,%eax
f01252ca:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		i = 0;
f01252d0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01252d7:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f01252de:	10 00 00 
f01252e1:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01252e7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01252ec:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f01252f2:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01252f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01252fd:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0125303:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0125309:	29 d0                	sub    %edx,%eax
f012530b:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125310:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125313:	eb 29                	jmp    f012533e <test_kheap_phys_addr+0x118a>
		{
			allPAs[i++] = kheap_physical_address(va);
f0125315:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0125318:	8d 43 01             	lea    0x1(%ebx),%eax
f012531b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012531e:	83 ec 0c             	sub    $0xc,%esp
f0125321:	ff 75 d8             	pushl  -0x28(%ebp)
f0125324:	e8 22 29 fe ff       	call   f0107c4b <kheap_physical_address>
f0125329:	83 c4 10             	add    $0x10,%esp
f012532c:	89 c2                	mov    %eax,%edx
f012532e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0125334:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0125337:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f012533e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125341:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0125347:	72 cc                	jb     f0125315 <test_kheap_phys_addr+0x1161>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0125349:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012534c:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		i = 0;
f0125352:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0125359:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0125360:	10 00 00 
f0125363:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125369:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012536e:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0125374:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012537a:	ba 00 00 00 00       	mov    $0x0,%edx
f012537f:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0125385:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012538b:	29 d0                	sub    %edx,%eax
f012538d:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125392:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125395:	e9 ab 00 00 00       	jmp    f0125445 <test_kheap_phys_addr+0x1291>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f012539a:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f012539f:	83 ec 04             	sub    $0x4,%esp
f01253a2:	8d 95 1c fd ff ff    	lea    -0x2e4(%ebp),%edx
f01253a8:	52                   	push   %edx
f01253a9:	ff 75 d8             	pushl  -0x28(%ebp)
f01253ac:	50                   	push   %eax
f01253ad:	e8 1a 17 fe ff       	call   f0106acc <get_page_table>
f01253b2:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01253b5:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f01253bb:	85 c0                	test   %eax,%eax
f01253bd:	75 17                	jne    f01253d6 <test_kheap_phys_addr+0x1222>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01253bf:	83 ec 04             	sub    $0x4,%esp
f01253c2:	68 fc bd 13 f0       	push   $0xf013bdfc
f01253c7:	68 93 08 00 00       	push   $0x893
f01253cc:	68 5a b4 13 f0       	push   $0xf013b45a
f01253d1:	e8 2f ae fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01253d6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01253d9:	c1 e8 0c             	shr    $0xc,%eax
f01253dc:	25 ff 03 00 00       	and    $0x3ff,%eax
f01253e1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01253e4:	eb 4b                	jmp    f0125431 <test_kheap_phys_addr+0x127d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f01253e6:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f01253ec:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01253ef:	c1 e2 02             	shl    $0x2,%edx
f01253f2:	01 d0                	add    %edx,%eax
f01253f4:	8b 00                	mov    (%eax),%eax
f01253f6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01253fb:	89 c1                	mov    %eax,%ecx
f01253fd:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0125403:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0125406:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125409:	39 c1                	cmp    %eax,%ecx
f012540b:	74 17                	je     f0125424 <test_kheap_phys_addr+0x1270>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f012540d:	83 ec 04             	sub    $0x4,%esp
f0125410:	68 55 be 13 f0       	push   $0xf013be55
f0125415:	68 9a 08 00 00       	push   $0x89a
f012541a:	68 5a b4 13 f0       	push   $0xf013b45a
f012541f:	e8 e1 ad fd ff       	call   f0100205 <_panic>
				}
				va += PAGE_SIZE;
f0125424:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f012542b:	ff 45 d4             	incl   -0x2c(%ebp)
f012542e:	ff 45 e4             	incl   -0x1c(%ebp)
f0125431:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125434:	3b 85 44 fe ff ff    	cmp    -0x1bc(%ebp),%eax
f012543a:	7d 09                	jge    f0125445 <test_kheap_phys_addr+0x1291>
f012543c:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f0125443:	7e a1                	jle    f01253e6 <test_kheap_phys_addr+0x1232>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0125445:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125448:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f012544e:	0f 82 46 ff ff ff    	jb     f012539a <test_kheap_phys_addr+0x11e6>
f0125454:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f0125456:	83 ec 0c             	sub    $0xc,%esp
f0125459:	68 e5 b5 13 f0       	push   $0xf013b5e5
f012545e:	e8 ab b8 fd ff       	call   f0100d0e <cprintf>
f0125463:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f0125466:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f012546d:	10 00 00 
f0125470:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0125476:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012547b:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f0125481:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0125487:	ba 00 00 00 00       	mov    $0x0,%edx
f012548c:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f0125492:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0125498:	29 d0                	sub    %edx,%eax
f012549a:	89 c1                	mov    %eax,%ecx
f012549c:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f01254a3:	10 00 00 
f01254a6:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01254ab:	0f b6 d0             	movzbl %al,%edx
f01254ae:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01254b4:	01 d0                	add    %edx,%eax
f01254b6:	48                   	dec    %eax
f01254b7:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f01254bd:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01254c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01254c8:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f01254ce:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01254d4:	29 d0                	sub    %edx,%eax
f01254d6:	01 c1                	add    %eax,%ecx
f01254d8:	c7 85 28 fe ff ff 00 	movl   $0x1000,-0x1d8(%ebp)
f01254df:	10 00 00 
f01254e2:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01254e7:	0f b6 c0             	movzbl %al,%eax
f01254ea:	c1 e0 04             	shl    $0x4,%eax
f01254ed:	89 c2                	mov    %eax,%edx
f01254ef:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01254f5:	01 d0                	add    %edx,%eax
f01254f7:	48                   	dec    %eax
f01254f8:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
f01254fe:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0125504:	ba 00 00 00 00       	mov    $0x0,%edx
f0125509:	f7 b5 28 fe ff ff    	divl   -0x1d8(%ebp)
f012550f:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0125515:	29 d0                	sub    %edx,%eax
f0125517:	01 c8                	add    %ecx,%eax
f0125519:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f012551e:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		i = 0;
f0125524:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f012552b:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125531:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0125534:	eb 0a                	jmp    f0125540 <test_kheap_phys_addr+0x138c>
		{
			i++;
f0125536:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0125539:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f0125540:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0125547:	76 ed                	jbe    f0125536 <test_kheap_phys_addr+0x1382>
		{
			i++;
		}
		int ii = i ;
f0125549:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012554c:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		i = 0;
f0125552:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0125559:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012555f:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0125562:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0125569:	e9 cc 00 00 00       	jmp    f012563a <test_kheap_phys_addr+0x1486>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f012556e:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0125571:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0125576:	83 ec 04             	sub    $0x4,%esp
f0125579:	8d 8d 18 fd ff ff    	lea    -0x2e8(%ebp),%ecx
f012557f:	51                   	push   %ecx
f0125580:	52                   	push   %edx
f0125581:	50                   	push   %eax
f0125582:	e8 45 15 fe ff       	call   f0106acc <get_page_table>
f0125587:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012558a:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f0125590:	85 c0                	test   %eax,%eax
f0125592:	75 17                	jne    f01255ab <test_kheap_phys_addr+0x13f7>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0125594:	83 ec 04             	sub    $0x4,%esp
f0125597:	68 fc bd 13 f0       	push   $0xf013bdfc
f012559c:	68 b6 08 00 00       	push   $0x8b6
f01255a1:	68 5a b4 13 f0       	push   $0xf013b45a
f01255a6:	e8 5a ac fd ff       	call   f0100205 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f01255ab:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01255b2:	eb 67                	jmp    f012561b <test_kheap_phys_addr+0x1467>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f01255b4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01255b7:	c1 e0 0c             	shl    $0xc,%eax
f01255ba:	89 c2                	mov    %eax,%edx
f01255bc:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01255c2:	01 d0                	add    %edx,%eax
f01255c4:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f01255ca:	83 ec 0c             	sub    $0xc,%esp
f01255cd:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f01255d3:	e8 73 26 fe ff       	call   f0107c4b <kheap_physical_address>
f01255d8:	83 c4 10             	add    $0x10,%esp
f01255db:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f01255e1:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f01255e7:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01255ea:	c1 e2 02             	shl    $0x2,%edx
f01255ed:	01 d0                	add    %edx,%eax
f01255ef:	8b 00                	mov    (%eax),%eax
f01255f1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01255f6:	3b 85 14 fe ff ff    	cmp    -0x1ec(%ebp),%eax
f01255fc:	74 17                	je     f0125615 <test_kheap_phys_addr+0x1461>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f01255fe:	83 ec 04             	sub    $0x4,%esp
f0125601:	68 55 be 13 f0       	push   $0xf013be55
f0125606:	68 c0 08 00 00       	push   $0x8c0
f012560b:	68 5a b4 13 f0       	push   $0xf013b45a
f0125610:	e8 f0 ab fd ff       	call   f0100205 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0125615:	ff 45 cc             	incl   -0x34(%ebp)
f0125618:	ff 45 e4             	incl   -0x1c(%ebp)
f012561b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012561e:	3b 85 1c fe ff ff    	cmp    -0x1e4(%ebp),%eax
f0125624:	7d 09                	jge    f012562f <test_kheap_phys_addr+0x147b>
f0125626:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f012562d:	7e 85                	jle    f01255b4 <test_kheap_phys_addr+0x1400>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f012562f:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f0125636:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f012563a:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f012563e:	0f 88 2a ff ff ff    	js     f012556e <test_kheap_phys_addr+0x13ba>
f0125644:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0125648:	7f 0d                	jg     f0125657 <test_kheap_phys_addr+0x14a3>
f012564a:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f0125651:	0f 86 17 ff ff ff    	jbe    f012556e <test_kheap_phys_addr+0x13ba>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0125657:	83 ec 0c             	sub    $0xc,%esp
f012565a:	68 3e b6 13 f0       	push   $0xf013b63e
f012565f:	e8 aa b6 fd ff       	call   f0100d0e <cprintf>
f0125664:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f0125667:	83 ec 0c             	sub    $0xc,%esp
f012566a:	68 a8 be 13 f0       	push   $0xf013bea8
f012566f:	e8 9a b6 fd ff       	call   f0100d0e <cprintf>
f0125674:	83 c4 10             	add    $0x10,%esp

	return 1;
f0125677:	b8 01 00 00 00       	mov    $0x1,%eax

}
f012567c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f012567f:	5b                   	pop    %ebx
f0125680:	5e                   	pop    %esi
f0125681:	5f                   	pop    %edi
f0125682:	5d                   	pop    %ebp
f0125683:	c3                   	ret    

f0125684 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f0125684:	55                   	push   %ebp
f0125685:	89 e5                	mov    %esp,%ebp
f0125687:	57                   	push   %edi
f0125688:	56                   	push   %esi
f0125689:	53                   	push   %ebx
f012568a:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
f0125690:	89 e0                	mov    %esp,%eax
f0125692:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f0125694:	83 ec 0c             	sub    $0xc,%esp
f0125697:	68 9c b3 13 f0       	push   $0xf013b39c
f012569c:	e8 6d b6 fd ff       	call   f0100d0e <cprintf>
f01256a1:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01256a4:	83 ec 0c             	sub    $0xc,%esp
f01256a7:	68 cc b3 13 f0       	push   $0xf013b3cc
f01256ac:	e8 5d b6 fd ff       	call   f0100d0e <cprintf>
f01256b1:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01256b4:	83 ec 0c             	sub    $0xc,%esp
f01256b7:	68 9c b3 13 f0       	push   $0xf013b39c
f01256bc:	e8 4d b6 fd ff       	call   f0100d0e <cprintf>
f01256c1:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01256c4:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f01256c8:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f01256cc:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f01256d2:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f01256d8:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f01256df:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01256e6:	e8 6e 79 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01256eb:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01256ee:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f01256f4:	b9 14 00 00 00       	mov    $0x14,%ecx
f01256f9:	b8 00 00 00 00       	mov    $0x0,%eax
f01256fe:	89 d7                	mov    %edx,%edi
f0125700:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0125702:	8d 95 78 fd ff ff    	lea    -0x288(%ebp),%edx
f0125708:	b9 14 00 00 00       	mov    $0x14,%ecx
f012570d:	b8 00 00 00 00       	mov    $0x0,%eax
f0125712:	89 d7                	mov    %edx,%edi
f0125714:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0125716:	8d 95 28 fd ff ff    	lea    -0x2d8(%ebp),%edx
f012571c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125721:	b8 00 00 00 00       	mov    $0x0,%eax
f0125726:	89 d7                	mov    %edx,%edi
f0125728:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012572a:	e8 2a 79 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012572f:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125732:	e8 ac e6 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0125737:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012573a:	83 ec 0c             	sub    $0xc,%esp
f012573d:	68 00 fc 1f 00       	push   $0x1ffc00
f0125742:	e8 e9 22 fe ff       	call   f0107a30 <kmalloc>
f0125747:	83 c4 10             	add    $0x10,%esp
f012574a:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125750:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0125756:	89 c1                	mov    %eax,%ecx
f0125758:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012575f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0125762:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125767:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012576a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012576d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125772:	f7 75 b4             	divl   -0x4c(%ebp)
f0125775:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0125778:	29 d0                	sub    %edx,%eax
f012577a:	89 c3                	mov    %eax,%ebx
f012577c:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0125783:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0125788:	0f b6 d0             	movzbl %al,%edx
f012578b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012578e:	01 d0                	add    %edx,%eax
f0125790:	48                   	dec    %eax
f0125791:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0125794:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0125797:	ba 00 00 00 00       	mov    $0x0,%edx
f012579c:	f7 75 ac             	divl   -0x54(%ebp)
f012579f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01257a2:	29 d0                	sub    %edx,%eax
f01257a4:	01 c3                	add    %eax,%ebx
f01257a6:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01257ad:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01257b2:	0f b6 c0             	movzbl %al,%eax
f01257b5:	c1 e0 04             	shl    $0x4,%eax
f01257b8:	89 c2                	mov    %eax,%edx
f01257ba:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01257bd:	01 d0                	add    %edx,%eax
f01257bf:	48                   	dec    %eax
f01257c0:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01257c3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01257c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01257cb:	f7 75 a4             	divl   -0x5c(%ebp)
f01257ce:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01257d1:	29 d0                	sub    %edx,%eax
f01257d3:	01 d8                	add    %ebx,%eax
f01257d5:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01257da:	39 c1                	cmp    %eax,%ecx
f01257dc:	74 17                	je     f01257f5 <test_kheap_virt_addr+0x171>
f01257de:	83 ec 04             	sub    $0x4,%esp
f01257e1:	68 40 b5 13 f0       	push   $0xf013b540
f01257e6:	68 ed 08 00 00       	push   $0x8ed
f01257eb:	68 5a b4 13 f0       	push   $0xf013b45a
f01257f0:	e8 10 aa fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01257f5:	e8 e9 e5 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01257fa:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01257fd:	74 17                	je     f0125816 <test_kheap_virt_addr+0x192>
f01257ff:	83 ec 04             	sub    $0x4,%esp
f0125802:	68 74 b4 13 f0       	push   $0xf013b474
f0125807:	68 ee 08 00 00       	push   $0x8ee
f012580c:	68 5a b4 13 f0       	push   $0xf013b45a
f0125811:	e8 ef a9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125816:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125819:	e8 3b 78 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012581e:	29 c3                	sub    %eax,%ebx
f0125820:	89 d8                	mov    %ebx,%eax
f0125822:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125827:	74 17                	je     f0125840 <test_kheap_virt_addr+0x1bc>
f0125829:	83 ec 04             	sub    $0x4,%esp
f012582c:	68 dc b4 13 f0       	push   $0xf013b4dc
f0125831:	68 ef 08 00 00       	push   $0x8ef
f0125836:	68 5a b4 13 f0       	push   $0xf013b45a
f012583b:	e8 c5 a9 fd ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125840:	e8 14 78 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0125845:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125848:	e8 96 e5 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012584d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0125850:	83 ec 0c             	sub    $0xc,%esp
f0125853:	68 00 fc 1f 00       	push   $0x1ffc00
f0125858:	e8 d3 21 fe ff       	call   f0107a30 <kmalloc>
f012585d:	83 c4 10             	add    $0x10,%esp
f0125860:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125866:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f012586c:	89 c1                	mov    %eax,%ecx
f012586e:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0125875:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0125878:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012587d:	89 45 98             	mov    %eax,-0x68(%ebp)
f0125880:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125883:	ba 00 00 00 00       	mov    $0x0,%edx
f0125888:	f7 75 9c             	divl   -0x64(%ebp)
f012588b:	8b 45 98             	mov    -0x68(%ebp),%eax
f012588e:	29 d0                	sub    %edx,%eax
f0125890:	89 c3                	mov    %eax,%ebx
f0125892:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0125899:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012589e:	0f b6 d0             	movzbl %al,%edx
f01258a1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01258a4:	01 d0                	add    %edx,%eax
f01258a6:	48                   	dec    %eax
f01258a7:	89 45 90             	mov    %eax,-0x70(%ebp)
f01258aa:	8b 45 90             	mov    -0x70(%ebp),%eax
f01258ad:	ba 00 00 00 00       	mov    $0x0,%edx
f01258b2:	f7 75 94             	divl   -0x6c(%ebp)
f01258b5:	8b 45 90             	mov    -0x70(%ebp),%eax
f01258b8:	29 d0                	sub    %edx,%eax
f01258ba:	01 c3                	add    %eax,%ebx
f01258bc:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01258c3:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01258c8:	0f b6 c0             	movzbl %al,%eax
f01258cb:	c1 e0 04             	shl    $0x4,%eax
f01258ce:	89 c2                	mov    %eax,%edx
f01258d0:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01258d3:	01 d0                	add    %edx,%eax
f01258d5:	48                   	dec    %eax
f01258d6:	89 45 88             	mov    %eax,-0x78(%ebp)
f01258d9:	8b 45 88             	mov    -0x78(%ebp),%eax
f01258dc:	ba 00 00 00 00       	mov    $0x0,%edx
f01258e1:	f7 75 8c             	divl   -0x74(%ebp)
f01258e4:	8b 45 88             	mov    -0x78(%ebp),%eax
f01258e7:	29 d0                	sub    %edx,%eax
f01258e9:	01 d8                	add    %ebx,%eax
f01258eb:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01258f0:	39 c1                	cmp    %eax,%ecx
f01258f2:	74 17                	je     f012590b <test_kheap_virt_addr+0x287>
f01258f4:	83 ec 04             	sub    $0x4,%esp
f01258f7:	68 40 b5 13 f0       	push   $0xf013b540
f01258fc:	68 f5 08 00 00       	push   $0x8f5
f0125901:	68 5a b4 13 f0       	push   $0xf013b45a
f0125906:	e8 fa a8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012590b:	e8 d3 e4 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0125910:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125913:	74 17                	je     f012592c <test_kheap_virt_addr+0x2a8>
f0125915:	83 ec 04             	sub    $0x4,%esp
f0125918:	68 74 b4 13 f0       	push   $0xf013b474
f012591d:	68 f6 08 00 00       	push   $0x8f6
f0125922:	68 5a b4 13 f0       	push   $0xf013b45a
f0125927:	e8 d9 a8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012592c:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012592f:	e8 25 77 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0125934:	29 c3                	sub    %eax,%ebx
f0125936:	89 d8                	mov    %ebx,%eax
f0125938:	3d 00 02 00 00       	cmp    $0x200,%eax
f012593d:	74 17                	je     f0125956 <test_kheap_virt_addr+0x2d2>
f012593f:	83 ec 04             	sub    $0x4,%esp
f0125942:	68 dc b4 13 f0       	push   $0xf013b4dc
f0125947:	68 f7 08 00 00       	push   $0x8f7
f012594c:	68 5a b4 13 f0       	push   $0xf013b45a
f0125951:	e8 af a8 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0125956:	e8 fe 76 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012595b:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012595e:	e8 80 e4 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0125963:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0125966:	83 ec 0c             	sub    $0xc,%esp
f0125969:	68 00 08 00 00       	push   $0x800
f012596e:	e8 bd 20 fe ff       	call   f0107a30 <kmalloc>
f0125973:	83 c4 10             	add    $0x10,%esp
f0125976:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012597c:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f0125982:	89 c1                	mov    %eax,%ecx
f0125984:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012598b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012598e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125993:	89 45 80             	mov    %eax,-0x80(%ebp)
f0125996:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125999:	ba 00 00 00 00       	mov    $0x0,%edx
f012599e:	f7 75 84             	divl   -0x7c(%ebp)
f01259a1:	8b 45 80             	mov    -0x80(%ebp),%eax
f01259a4:	29 d0                	sub    %edx,%eax
f01259a6:	89 c3                	mov    %eax,%ebx
f01259a8:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01259af:	10 00 00 
f01259b2:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01259b7:	0f b6 d0             	movzbl %al,%edx
f01259ba:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01259c0:	01 d0                	add    %edx,%eax
f01259c2:	48                   	dec    %eax
f01259c3:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01259c9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01259cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01259d4:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01259da:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01259e0:	29 d0                	sub    %edx,%eax
f01259e2:	01 c3                	add    %eax,%ebx
f01259e4:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01259eb:	10 00 00 
f01259ee:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01259f3:	0f b6 c0             	movzbl %al,%eax
f01259f6:	c1 e0 04             	shl    $0x4,%eax
f01259f9:	89 c2                	mov    %eax,%edx
f01259fb:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0125a01:	01 d0                	add    %edx,%eax
f0125a03:	48                   	dec    %eax
f0125a04:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0125a0a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0125a10:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a15:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0125a1b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0125a21:	29 d0                	sub    %edx,%eax
f0125a23:	01 d8                	add    %ebx,%eax
f0125a25:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0125a2a:	39 c1                	cmp    %eax,%ecx
f0125a2c:	74 17                	je     f0125a45 <test_kheap_virt_addr+0x3c1>
f0125a2e:	83 ec 04             	sub    $0x4,%esp
f0125a31:	68 40 b5 13 f0       	push   $0xf013b540
f0125a36:	68 fd 08 00 00       	push   $0x8fd
f0125a3b:	68 5a b4 13 f0       	push   $0xf013b45a
f0125a40:	e8 c0 a7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125a45:	e8 99 e3 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0125a4a:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125a4d:	74 17                	je     f0125a66 <test_kheap_virt_addr+0x3e2>
f0125a4f:	83 ec 04             	sub    $0x4,%esp
f0125a52:	68 74 b4 13 f0       	push   $0xf013b474
f0125a57:	68 fe 08 00 00       	push   $0x8fe
f0125a5c:	68 5a b4 13 f0       	push   $0xf013b45a
f0125a61:	e8 9f a7 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125a66:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125a69:	e8 eb 75 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0125a6e:	29 c3                	sub    %eax,%ebx
f0125a70:	89 d8                	mov    %ebx,%eax
f0125a72:	83 f8 01             	cmp    $0x1,%eax
f0125a75:	74 17                	je     f0125a8e <test_kheap_virt_addr+0x40a>
f0125a77:	83 ec 04             	sub    $0x4,%esp
f0125a7a:	68 dc b4 13 f0       	push   $0xf013b4dc
f0125a7f:	68 ff 08 00 00       	push   $0x8ff
f0125a84:	68 5a b4 13 f0       	push   $0xf013b45a
f0125a89:	e8 77 a7 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0125a8e:	e8 c6 75 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0125a93:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125a96:	e8 48 e3 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0125a9b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0125a9e:	83 ec 0c             	sub    $0xc,%esp
f0125aa1:	68 00 08 00 00       	push   $0x800
f0125aa6:	e8 85 1f fe ff       	call   f0107a30 <kmalloc>
f0125aab:	83 c4 10             	add    $0x10,%esp
f0125aae:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125ab4:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f0125aba:	89 c1                	mov    %eax,%ecx
f0125abc:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0125ac3:	10 00 00 
f0125ac6:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0125acc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125ad1:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0125ad7:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125add:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ae2:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0125ae8:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125aee:	29 d0                	sub    %edx,%eax
f0125af0:	89 c3                	mov    %eax,%ebx
f0125af2:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0125af9:	10 00 00 
f0125afc:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0125b01:	0f b6 d0             	movzbl %al,%edx
f0125b04:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0125b0a:	01 d0                	add    %edx,%eax
f0125b0c:	48                   	dec    %eax
f0125b0d:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0125b13:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125b19:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b1e:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0125b24:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125b2a:	29 d0                	sub    %edx,%eax
f0125b2c:	01 c3                	add    %eax,%ebx
f0125b2e:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0125b35:	10 00 00 
f0125b38:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0125b3d:	0f b6 c0             	movzbl %al,%eax
f0125b40:	c1 e0 04             	shl    $0x4,%eax
f0125b43:	89 c2                	mov    %eax,%edx
f0125b45:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0125b4b:	01 d0                	add    %edx,%eax
f0125b4d:	48                   	dec    %eax
f0125b4e:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0125b54:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125b5a:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b5f:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0125b65:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125b6b:	29 d0                	sub    %edx,%eax
f0125b6d:	01 d8                	add    %ebx,%eax
f0125b6f:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0125b74:	39 c1                	cmp    %eax,%ecx
f0125b76:	74 17                	je     f0125b8f <test_kheap_virt_addr+0x50b>
f0125b78:	83 ec 04             	sub    $0x4,%esp
f0125b7b:	68 40 b5 13 f0       	push   $0xf013b540
f0125b80:	68 05 09 00 00       	push   $0x905
f0125b85:	68 5a b4 13 f0       	push   $0xf013b45a
f0125b8a:	e8 76 a6 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125b8f:	e8 4f e2 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0125b94:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125b97:	74 17                	je     f0125bb0 <test_kheap_virt_addr+0x52c>
f0125b99:	83 ec 04             	sub    $0x4,%esp
f0125b9c:	68 74 b4 13 f0       	push   $0xf013b474
f0125ba1:	68 06 09 00 00       	push   $0x906
f0125ba6:	68 5a b4 13 f0       	push   $0xf013b45a
f0125bab:	e8 55 a6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125bb0:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125bb3:	e8 a1 74 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0125bb8:	29 c3                	sub    %eax,%ebx
f0125bba:	89 d8                	mov    %ebx,%eax
f0125bbc:	83 f8 01             	cmp    $0x1,%eax
f0125bbf:	74 17                	je     f0125bd8 <test_kheap_virt_addr+0x554>
f0125bc1:	83 ec 04             	sub    $0x4,%esp
f0125bc4:	68 dc b4 13 f0       	push   $0xf013b4dc
f0125bc9:	68 07 09 00 00       	push   $0x907
f0125bce:	68 5a b4 13 f0       	push   $0xf013b45a
f0125bd3:	e8 2d a6 fd ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0125bd8:	e8 7c 74 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0125bdd:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125be0:	e8 fe e1 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0125be5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0125be8:	83 ec 0c             	sub    $0xc,%esp
f0125beb:	68 00 1c 00 00       	push   $0x1c00
f0125bf0:	e8 3b 1e fe ff       	call   f0107a30 <kmalloc>
f0125bf5:	83 c4 10             	add    $0x10,%esp
f0125bf8:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125bfe:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f0125c04:	89 c1                	mov    %eax,%ecx
f0125c06:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0125c0d:	10 00 00 
f0125c10:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0125c16:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125c1b:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0125c21:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125c27:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c2c:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0125c32:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125c38:	29 d0                	sub    %edx,%eax
f0125c3a:	89 c3                	mov    %eax,%ebx
f0125c3c:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0125c43:	10 00 00 
f0125c46:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0125c4b:	0f b6 d0             	movzbl %al,%edx
f0125c4e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0125c54:	01 d0                	add    %edx,%eax
f0125c56:	48                   	dec    %eax
f0125c57:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0125c5d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125c63:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c68:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0125c6e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125c74:	29 d0                	sub    %edx,%eax
f0125c76:	01 c3                	add    %eax,%ebx
f0125c78:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0125c7f:	10 00 00 
f0125c82:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0125c87:	0f b6 c0             	movzbl %al,%eax
f0125c8a:	c1 e0 04             	shl    $0x4,%eax
f0125c8d:	89 c2                	mov    %eax,%edx
f0125c8f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0125c95:	01 d0                	add    %edx,%eax
f0125c97:	48                   	dec    %eax
f0125c98:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0125c9e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0125ca4:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ca9:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0125caf:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0125cb5:	29 d0                	sub    %edx,%eax
f0125cb7:	01 d8                	add    %ebx,%eax
f0125cb9:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0125cbe:	39 c1                	cmp    %eax,%ecx
f0125cc0:	74 17                	je     f0125cd9 <test_kheap_virt_addr+0x655>
f0125cc2:	83 ec 04             	sub    $0x4,%esp
f0125cc5:	68 40 b5 13 f0       	push   $0xf013b540
f0125cca:	68 0d 09 00 00       	push   $0x90d
f0125ccf:	68 5a b4 13 f0       	push   $0xf013b45a
f0125cd4:	e8 2c a5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125cd9:	e8 05 e1 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0125cde:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125ce1:	74 17                	je     f0125cfa <test_kheap_virt_addr+0x676>
f0125ce3:	83 ec 04             	sub    $0x4,%esp
f0125ce6:	68 74 b4 13 f0       	push   $0xf013b474
f0125ceb:	68 0e 09 00 00       	push   $0x90e
f0125cf0:	68 5a b4 13 f0       	push   $0xf013b45a
f0125cf5:	e8 0b a5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125cfa:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125cfd:	e8 57 73 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0125d02:	29 c3                	sub    %eax,%ebx
f0125d04:	89 d8                	mov    %ebx,%eax
f0125d06:	83 f8 02             	cmp    $0x2,%eax
f0125d09:	74 17                	je     f0125d22 <test_kheap_virt_addr+0x69e>
f0125d0b:	83 ec 04             	sub    $0x4,%esp
f0125d0e:	68 dc b4 13 f0       	push   $0xf013b4dc
f0125d13:	68 0f 09 00 00       	push   $0x90f
f0125d18:	68 5a b4 13 f0       	push   $0xf013b45a
f0125d1d:	e8 e3 a4 fd ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0125d22:	e8 32 73 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0125d27:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125d2a:	e8 b4 e0 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0125d2f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0125d32:	83 ec 0c             	sub    $0xc,%esp
f0125d35:	68 00 fc 2f 00       	push   $0x2ffc00
f0125d3a:	e8 f1 1c fe ff       	call   f0107a30 <kmalloc>
f0125d3f:	83 c4 10             	add    $0x10,%esp
f0125d42:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125d48:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0125d4e:	89 c1                	mov    %eax,%ecx
f0125d50:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0125d57:	10 00 00 
f0125d5a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0125d60:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125d65:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0125d6b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125d71:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d76:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0125d7c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125d82:	29 d0                	sub    %edx,%eax
f0125d84:	89 c3                	mov    %eax,%ebx
f0125d86:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0125d8d:	10 00 00 
f0125d90:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0125d95:	0f b6 d0             	movzbl %al,%edx
f0125d98:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0125d9e:	01 d0                	add    %edx,%eax
f0125da0:	48                   	dec    %eax
f0125da1:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0125da7:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125dad:	ba 00 00 00 00       	mov    $0x0,%edx
f0125db2:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0125db8:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125dbe:	29 d0                	sub    %edx,%eax
f0125dc0:	01 c3                	add    %eax,%ebx
f0125dc2:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0125dc9:	10 00 00 
f0125dcc:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0125dd1:	0f b6 c0             	movzbl %al,%eax
f0125dd4:	c1 e0 04             	shl    $0x4,%eax
f0125dd7:	89 c2                	mov    %eax,%edx
f0125dd9:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0125ddf:	01 d0                	add    %edx,%eax
f0125de1:	48                   	dec    %eax
f0125de2:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0125de8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125dee:	ba 00 00 00 00       	mov    $0x0,%edx
f0125df3:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0125df9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125dff:	29 d0                	sub    %edx,%eax
f0125e01:	01 d8                	add    %ebx,%eax
f0125e03:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0125e08:	39 c1                	cmp    %eax,%ecx
f0125e0a:	74 17                	je     f0125e23 <test_kheap_virt_addr+0x79f>
f0125e0c:	83 ec 04             	sub    $0x4,%esp
f0125e0f:	68 40 b5 13 f0       	push   $0xf013b540
f0125e14:	68 15 09 00 00       	push   $0x915
f0125e19:	68 5a b4 13 f0       	push   $0xf013b45a
f0125e1e:	e8 e2 a3 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125e23:	e8 bb df fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0125e28:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125e2b:	74 17                	je     f0125e44 <test_kheap_virt_addr+0x7c0>
f0125e2d:	83 ec 04             	sub    $0x4,%esp
f0125e30:	68 74 b4 13 f0       	push   $0xf013b474
f0125e35:	68 16 09 00 00       	push   $0x916
f0125e3a:	68 5a b4 13 f0       	push   $0xf013b45a
f0125e3f:	e8 c1 a3 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125e44:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125e47:	e8 0d 72 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0125e4c:	29 c3                	sub    %eax,%ebx
f0125e4e:	89 d8                	mov    %ebx,%eax
f0125e50:	3d 00 03 00 00       	cmp    $0x300,%eax
f0125e55:	74 17                	je     f0125e6e <test_kheap_virt_addr+0x7ea>
f0125e57:	83 ec 04             	sub    $0x4,%esp
f0125e5a:	68 dc b4 13 f0       	push   $0xf013b4dc
f0125e5f:	68 17 09 00 00       	push   $0x917
f0125e64:	68 5a b4 13 f0       	push   $0xf013b45a
f0125e69:	e8 97 a3 fd ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125e6e:	e8 e6 71 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0125e73:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125e76:	e8 68 df fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0125e7b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0125e7e:	83 ec 0c             	sub    $0xc,%esp
f0125e81:	68 00 fc 5f 00       	push   $0x5ffc00
f0125e86:	e8 a5 1b fe ff       	call   f0107a30 <kmalloc>
f0125e8b:	83 c4 10             	add    $0x10,%esp
f0125e8e:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125e94:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0125e9a:	89 c1                	mov    %eax,%ecx
f0125e9c:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0125ea3:	10 00 00 
f0125ea6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0125eac:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125eb1:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0125eb7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125ebd:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ec2:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0125ec8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125ece:	29 d0                	sub    %edx,%eax
f0125ed0:	89 c3                	mov    %eax,%ebx
f0125ed2:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0125ed9:	10 00 00 
f0125edc:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0125ee1:	0f b6 d0             	movzbl %al,%edx
f0125ee4:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0125eea:	01 d0                	add    %edx,%eax
f0125eec:	48                   	dec    %eax
f0125eed:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0125ef3:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125ef9:	ba 00 00 00 00       	mov    $0x0,%edx
f0125efe:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0125f04:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125f0a:	29 d0                	sub    %edx,%eax
f0125f0c:	01 c3                	add    %eax,%ebx
f0125f0e:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0125f15:	10 00 00 
f0125f18:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0125f1d:	0f b6 c0             	movzbl %al,%eax
f0125f20:	c1 e0 04             	shl    $0x4,%eax
f0125f23:	89 c2                	mov    %eax,%edx
f0125f25:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0125f2b:	01 d0                	add    %edx,%eax
f0125f2d:	48                   	dec    %eax
f0125f2e:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0125f34:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125f3a:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f3f:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0125f45:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125f4b:	29 d0                	sub    %edx,%eax
f0125f4d:	01 d8                	add    %ebx,%eax
f0125f4f:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0125f54:	39 c1                	cmp    %eax,%ecx
f0125f56:	74 17                	je     f0125f6f <test_kheap_virt_addr+0x8eb>
f0125f58:	83 ec 04             	sub    $0x4,%esp
f0125f5b:	68 40 b5 13 f0       	push   $0xf013b540
f0125f60:	68 1d 09 00 00       	push   $0x91d
f0125f65:	68 5a b4 13 f0       	push   $0xf013b45a
f0125f6a:	e8 96 a2 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125f6f:	e8 6f de fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0125f74:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125f77:	74 17                	je     f0125f90 <test_kheap_virt_addr+0x90c>
f0125f79:	83 ec 04             	sub    $0x4,%esp
f0125f7c:	68 74 b4 13 f0       	push   $0xf013b474
f0125f81:	68 1e 09 00 00       	push   $0x91e
f0125f86:	68 5a b4 13 f0       	push   $0xf013b45a
f0125f8b:	e8 75 a2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125f90:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125f93:	e8 c1 70 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0125f98:	29 c3                	sub    %eax,%ebx
f0125f9a:	89 d8                	mov    %ebx,%eax
f0125f9c:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125fa1:	74 17                	je     f0125fba <test_kheap_virt_addr+0x936>
f0125fa3:	83 ec 04             	sub    $0x4,%esp
f0125fa6:	68 dc b4 13 f0       	push   $0xf013b4dc
f0125fab:	68 1f 09 00 00       	push   $0x91f
f0125fb0:	68 5a b4 13 f0       	push   $0xf013b45a
f0125fb5:	e8 4b a2 fd ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0125fba:	e8 9a 70 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0125fbf:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125fc2:	e8 1c de fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0125fc7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0125fca:	83 ec 0c             	sub    $0xc,%esp
f0125fcd:	68 00 38 00 00       	push   $0x3800
f0125fd2:	e8 59 1a fe ff       	call   f0107a30 <kmalloc>
f0125fd7:	83 c4 10             	add    $0x10,%esp
f0125fda:	89 85 44 fd ff ff    	mov    %eax,-0x2bc(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125fe0:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0125fe6:	89 c1                	mov    %eax,%ecx
f0125fe8:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0125fef:	10 00 00 
f0125ff2:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0125ff8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125ffd:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0126003:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0126009:	ba 00 00 00 00       	mov    $0x0,%edx
f012600e:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0126014:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012601a:	29 d0                	sub    %edx,%eax
f012601c:	89 c3                	mov    %eax,%ebx
f012601e:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0126025:	10 00 00 
f0126028:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012602d:	0f b6 d0             	movzbl %al,%edx
f0126030:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0126036:	01 d0                	add    %edx,%eax
f0126038:	48                   	dec    %eax
f0126039:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012603f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0126045:	ba 00 00 00 00       	mov    $0x0,%edx
f012604a:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0126050:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0126056:	29 d0                	sub    %edx,%eax
f0126058:	01 c3                	add    %eax,%ebx
f012605a:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0126061:	10 00 00 
f0126064:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0126069:	0f b6 c0             	movzbl %al,%eax
f012606c:	c1 e0 04             	shl    $0x4,%eax
f012606f:	89 c2                	mov    %eax,%edx
f0126071:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0126077:	01 d0                	add    %edx,%eax
f0126079:	48                   	dec    %eax
f012607a:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0126080:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0126086:	ba 00 00 00 00       	mov    $0x0,%edx
f012608b:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0126091:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0126097:	29 d0                	sub    %edx,%eax
f0126099:	01 d8                	add    %ebx,%eax
f012609b:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01260a0:	39 c1                	cmp    %eax,%ecx
f01260a2:	74 17                	je     f01260bb <test_kheap_virt_addr+0xa37>
f01260a4:	83 ec 04             	sub    $0x4,%esp
f01260a7:	68 40 b5 13 f0       	push   $0xf013b540
f01260ac:	68 25 09 00 00       	push   $0x925
f01260b1:	68 5a b4 13 f0       	push   $0xf013b45a
f01260b6:	e8 4a a1 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01260bb:	e8 23 dd fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01260c0:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01260c3:	74 17                	je     f01260dc <test_kheap_virt_addr+0xa58>
f01260c5:	83 ec 04             	sub    $0x4,%esp
f01260c8:	68 74 b4 13 f0       	push   $0xf013b474
f01260cd:	68 26 09 00 00       	push   $0x926
f01260d2:	68 5a b4 13 f0       	push   $0xf013b45a
f01260d7:	e8 29 a1 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01260dc:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01260df:	e8 75 6f fe ff       	call   f010d059 <sys_calculate_free_frames>
f01260e4:	29 c3                	sub    %eax,%ebx
f01260e6:	89 d8                	mov    %ebx,%eax
f01260e8:	83 f8 04             	cmp    $0x4,%eax
f01260eb:	74 17                	je     f0126104 <test_kheap_virt_addr+0xa80>
f01260ed:	83 ec 04             	sub    $0x4,%esp
f01260f0:	68 dc b4 13 f0       	push   $0xf013b4dc
f01260f5:	68 27 09 00 00       	push   $0x927
f01260fa:	68 5a b4 13 f0       	push   $0xf013b45a
f01260ff:	e8 01 a1 fd ff       	call   f0100205 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f0126104:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f012610b:	10 00 00 
f012610e:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0126114:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126119:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f012611f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0126125:	ba 00 00 00 00       	mov    $0x0,%edx
f012612a:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0126130:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0126136:	29 d0                	sub    %edx,%eax
f0126138:	89 c1                	mov    %eax,%ecx
f012613a:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0126141:	10 00 00 
f0126144:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0126149:	0f b6 d0             	movzbl %al,%edx
f012614c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0126152:	01 d0                	add    %edx,%eax
f0126154:	48                   	dec    %eax
f0126155:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f012615b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0126161:	ba 00 00 00 00       	mov    $0x0,%edx
f0126166:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012616c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0126172:	29 d0                	sub    %edx,%eax
f0126174:	01 c1                	add    %eax,%ecx
f0126176:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f012617d:	10 00 00 
f0126180:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0126185:	0f b6 c0             	movzbl %al,%eax
f0126188:	c1 e0 04             	shl    $0x4,%eax
f012618b:	89 c2                	mov    %eax,%edx
f012618d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0126193:	01 d0                	add    %edx,%eax
f0126195:	48                   	dec    %eax
f0126196:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f012619c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01261a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01261a7:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f01261ad:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01261b3:	29 d0                	sub    %edx,%eax
f01261b5:	01 c1                	add    %eax,%ecx
f01261b7:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01261be:	10 00 00 
f01261c1:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01261c7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01261cc:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01261d2:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01261d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01261dd:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01261e3:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01261e9:	29 d0                	sub    %edx,%eax
f01261eb:	29 c1                	sub    %eax,%ecx
f01261ed:	89 c8                	mov    %ecx,%eax
f01261ef:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01261f4:	c1 e8 0c             	shr    $0xc,%eax
f01261f7:	89 c2                	mov    %eax,%edx
f01261f9:	4a                   	dec    %edx
f01261fa:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
f0126200:	c1 e0 02             	shl    $0x2,%eax
f0126203:	8d 50 03             	lea    0x3(%eax),%edx
f0126206:	b8 10 00 00 00       	mov    $0x10,%eax
f012620b:	48                   	dec    %eax
f012620c:	01 d0                	add    %edx,%eax
f012620e:	bf 10 00 00 00       	mov    $0x10,%edi
f0126213:	ba 00 00 00 00       	mov    $0x0,%edx
f0126218:	f7 f7                	div    %edi
f012621a:	6b c0 10             	imul   $0x10,%eax,%eax
f012621d:	29 c4                	sub    %eax,%esp
f012621f:	89 e0                	mov    %esp,%eax
f0126221:	83 c0 03             	add    $0x3,%eax
f0126224:	c1 e8 02             	shr    $0x2,%eax
f0126227:	c1 e0 02             	shl    $0x2,%eax
f012622a:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f0126230:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0126237:	10 00 00 
f012623a:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0126240:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126245:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012624b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0126251:	ba 00 00 00 00       	mov    $0x0,%edx
f0126256:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012625c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0126262:	29 d0                	sub    %edx,%eax
f0126264:	89 c1                	mov    %eax,%ecx
f0126266:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012626d:	10 00 00 
f0126270:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0126275:	0f b6 d0             	movzbl %al,%edx
f0126278:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012627e:	01 d0                	add    %edx,%eax
f0126280:	48                   	dec    %eax
f0126281:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0126287:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012628d:	ba 00 00 00 00       	mov    $0x0,%edx
f0126292:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0126298:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012629e:	29 d0                	sub    %edx,%eax
f01262a0:	01 c1                	add    %eax,%ecx
f01262a2:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01262a9:	10 00 00 
f01262ac:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01262b1:	0f b6 c0             	movzbl %al,%eax
f01262b4:	c1 e0 04             	shl    $0x4,%eax
f01262b7:	89 c2                	mov    %eax,%edx
f01262b9:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01262bf:	01 d0                	add    %edx,%eax
f01262c1:	48                   	dec    %eax
f01262c2:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01262c8:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01262ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01262d3:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01262d9:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01262df:	29 d0                	sub    %edx,%eax
f01262e1:	01 c1                	add    %eax,%ecx
f01262e3:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f01262ea:	10 00 00 
f01262ed:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01262f3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01262f8:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f01262fe:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0126304:	ba 00 00 00 00       	mov    $0x0,%edx
f0126309:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012630f:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0126315:	29 d0                	sub    %edx,%eax
f0126317:	29 c1                	sub    %eax,%ecx
f0126319:	89 c8                	mov    %ecx,%eax
f012631b:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0126320:	c1 e8 0c             	shr    $0xc,%eax
f0126323:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0126329:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0126330:	10 00 00 
f0126333:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0126339:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012633e:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0126344:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012634a:	ba 00 00 00 00       	mov    $0x0,%edx
f012634f:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0126355:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012635b:	29 d0                	sub    %edx,%eax
f012635d:	89 c1                	mov    %eax,%ecx
f012635f:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0126366:	10 00 00 
f0126369:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012636e:	0f b6 d0             	movzbl %al,%edx
f0126371:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0126377:	01 d0                	add    %edx,%eax
f0126379:	48                   	dec    %eax
f012637a:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0126380:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0126386:	ba 00 00 00 00       	mov    $0x0,%edx
f012638b:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0126391:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0126397:	29 d0                	sub    %edx,%eax
f0126399:	01 c1                	add    %eax,%ecx
f012639b:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f01263a2:	10 00 00 
f01263a5:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01263aa:	0f b6 c0             	movzbl %al,%eax
f01263ad:	c1 e0 04             	shl    $0x4,%eax
f01263b0:	89 c2                	mov    %eax,%edx
f01263b2:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01263b8:	01 d0                	add    %edx,%eax
f01263ba:	48                   	dec    %eax
f01263bb:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f01263c1:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01263c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01263cc:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f01263d2:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01263d8:	29 d0                	sub    %edx,%eax
f01263da:	01 c8                	add    %ecx,%eax
f01263dc:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01263e1:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int i = 0;
f01263e7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01263ee:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f01263f5:	10 00 00 
f01263f8:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01263fe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126403:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0126409:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012640f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126414:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f012641a:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0126420:	29 d0                	sub    %edx,%eax
f0126422:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0126427:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012642a:	e9 21 01 00 00       	jmp    f0126550 <test_kheap_virt_addr+0xecc>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f012642f:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0126434:	83 ec 04             	sub    $0x4,%esp
f0126437:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f012643d:	52                   	push   %edx
f012643e:	ff 75 e4             	pushl  -0x1c(%ebp)
f0126441:	50                   	push   %eax
f0126442:	e8 85 06 fe ff       	call   f0106acc <get_page_table>
f0126447:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012644a:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0126450:	85 c0                	test   %eax,%eax
f0126452:	75 17                	jne    f012646b <test_kheap_virt_addr+0xde7>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0126454:	83 ec 04             	sub    $0x4,%esp
f0126457:	68 fc bd 13 f0       	push   $0xf013bdfc
f012645c:	68 38 09 00 00       	push   $0x938
f0126461:	68 5a b4 13 f0       	push   $0xf013b45a
f0126466:	e8 9a 9d fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f012646b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012646e:	c1 e8 0c             	shr    $0xc,%eax
f0126471:	25 ff 03 00 00       	and    $0x3ff,%eax
f0126476:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0126479:	e9 ba 00 00 00       	jmp    f0126538 <test_kheap_virt_addr+0xeb4>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f012647e:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0126484:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0126487:	c1 e2 02             	shl    $0x2,%edx
f012648a:	01 d0                	add    %edx,%eax
f012648c:	8b 00                	mov    (%eax),%eax
f012648e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0126493:	89 c1                	mov    %eax,%ecx
f0126495:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012649b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012649e:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01264a1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01264a7:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01264aa:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01264ad:	83 ec 0c             	sub    $0xc,%esp
f01264b0:	50                   	push   %eax
f01264b1:	e8 69 17 fe ff       	call   f0107c1f <kheap_virtual_address>
f01264b6:	83 c4 10             	add    $0x10,%esp
f01264b9:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f01264bf:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01264c5:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01264c8:	74 61                	je     f012652b <test_kheap_virt_addr+0xea7>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f01264ca:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01264d0:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01264d3:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01264d6:	8b 95 24 fd ff ff    	mov    -0x2dc(%ebp),%edx
f01264dc:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f01264df:	c1 e1 02             	shl    $0x2,%ecx
f01264e2:	01 ca                	add    %ecx,%edx
f01264e4:	8b 12                	mov    (%edx),%edx
f01264e6:	89 d1                	mov    %edx,%ecx
f01264e8:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f01264ee:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01264f1:	c1 e2 0c             	shl    $0xc,%edx
f01264f4:	89 d3                	mov    %edx,%ebx
f01264f6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01264f9:	01 da                	add    %ebx,%edx
f01264fb:	83 ec 0c             	sub    $0xc,%esp
f01264fe:	50                   	push   %eax
f01264ff:	51                   	push   %ecx
f0126500:	52                   	push   %edx
f0126501:	ff b5 84 fe ff ff    	pushl  -0x17c(%ebp)
f0126507:	68 f0 be 13 f0       	push   $0xf013bef0
f012650c:	e8 fd a7 fd ff       	call   f0100d0e <cprintf>
f0126511:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f0126514:	83 ec 04             	sub    $0x4,%esp
f0126517:	68 33 bf 13 f0       	push   $0xf013bf33
f012651c:	68 42 09 00 00       	push   $0x942
f0126521:	68 5a b4 13 f0       	push   $0xf013b45a
f0126526:	e8 da 9c fd ff       	call   f0100205 <_panic>
				}
				va+=PAGE_SIZE;
f012652b:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0126532:	ff 45 dc             	incl   -0x24(%ebp)
f0126535:	ff 45 e0             	incl   -0x20(%ebp)
f0126538:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012653b:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0126541:	7d 0d                	jge    f0126550 <test_kheap_virt_addr+0xecc>
f0126543:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f012654a:	0f 8e 2e ff ff ff    	jle    f012647e <test_kheap_virt_addr+0xdfa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0126550:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0126553:	3b 85 90 fe ff ff    	cmp    -0x170(%ebp),%eax
f0126559:	0f 82 d0 fe ff ff    	jb     f012642f <test_kheap_virt_addr+0xdab>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f012655f:	83 ec 0c             	sub    $0xc,%esp
f0126562:	68 50 bf 13 f0       	push   $0xf013bf50
f0126567:	e8 a2 a7 fd ff       	call   f0100d0e <cprintf>
f012656c:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012656f:	e8 e5 6a fe ff       	call   f010d059 <sys_calculate_free_frames>
f0126574:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012657a:	e8 64 d8 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012657f:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[0]);
f0126585:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f012658b:	83 ec 0c             	sub    $0xc,%esp
f012658e:	50                   	push   %eax
f012658f:	e8 85 15 fe ff       	call   f0107b19 <kfree>
f0126594:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126597:	e8 47 d8 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012659c:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f01265a2:	74 17                	je     f01265bb <test_kheap_virt_addr+0xf37>
f01265a4:	83 ec 04             	sub    $0x4,%esp
f01265a7:	68 74 b4 13 f0       	push   $0xf013b474
f01265ac:	68 50 09 00 00       	push   $0x950
f01265b1:	68 5a b4 13 f0       	push   $0xf013b45a
f01265b6:	e8 4a 9c fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01265bb:	e8 99 6a fe ff       	call   f010d059 <sys_calculate_free_frames>
f01265c0:	89 c2                	mov    %eax,%edx
f01265c2:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01265c8:	29 c2                	sub    %eax,%edx
f01265ca:	89 d0                	mov    %edx,%eax
f01265cc:	3d 00 02 00 00       	cmp    $0x200,%eax
f01265d1:	74 17                	je     f01265ea <test_kheap_virt_addr+0xf66>
f01265d3:	83 ec 04             	sub    $0x4,%esp
f01265d6:	68 e4 bb 13 f0       	push   $0xf013bbe4
f01265db:	68 51 09 00 00       	push   $0x951
f01265e0:	68 5a b4 13 f0       	push   $0xf013b45a
f01265e5:	e8 1b 9c fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01265ea:	e8 6a 6a fe ff       	call   f010d059 <sys_calculate_free_frames>
f01265ef:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01265f5:	e8 e9 d7 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01265fa:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[1]);
f0126600:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0126606:	83 ec 0c             	sub    $0xc,%esp
f0126609:	50                   	push   %eax
f012660a:	e8 0a 15 fe ff       	call   f0107b19 <kfree>
f012660f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126612:	e8 cc d7 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0126617:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f012661d:	74 17                	je     f0126636 <test_kheap_virt_addr+0xfb2>
f012661f:	83 ec 04             	sub    $0x4,%esp
f0126622:	68 74 b4 13 f0       	push   $0xf013b474
f0126627:	68 57 09 00 00       	push   $0x957
f012662c:	68 5a b4 13 f0       	push   $0xf013b45a
f0126631:	e8 cf 9b fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0126636:	e8 1e 6a fe ff       	call   f010d059 <sys_calculate_free_frames>
f012663b:	89 c2                	mov    %eax,%edx
f012663d:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0126643:	29 c2                	sub    %eax,%edx
f0126645:	89 d0                	mov    %edx,%eax
f0126647:	3d 00 02 00 00       	cmp    $0x200,%eax
f012664c:	74 17                	je     f0126665 <test_kheap_virt_addr+0xfe1>
f012664e:	83 ec 04             	sub    $0x4,%esp
f0126651:	68 e4 bb 13 f0       	push   $0xf013bbe4
f0126656:	68 58 09 00 00       	push   $0x958
f012665b:	68 5a b4 13 f0       	push   $0xf013b45a
f0126660:	e8 a0 9b fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0126665:	e8 ef 69 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012666a:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126670:	e8 6e d7 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0126675:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[6]);
f012667b:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0126681:	83 ec 0c             	sub    $0xc,%esp
f0126684:	50                   	push   %eax
f0126685:	e8 8f 14 fe ff       	call   f0107b19 <kfree>
f012668a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012668d:	e8 51 d7 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0126692:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0126698:	74 17                	je     f01266b1 <test_kheap_virt_addr+0x102d>
f012669a:	83 ec 04             	sub    $0x4,%esp
f012669d:	68 74 b4 13 f0       	push   $0xf013b474
f01266a2:	68 5e 09 00 00       	push   $0x95e
f01266a7:	68 5a b4 13 f0       	push   $0xf013b45a
f01266ac:	e8 54 9b fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01266b1:	e8 a3 69 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01266b6:	89 c2                	mov    %eax,%edx
f01266b8:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01266be:	29 c2                	sub    %eax,%edx
f01266c0:	89 d0                	mov    %edx,%eax
f01266c2:	3d 00 06 00 00       	cmp    $0x600,%eax
f01266c7:	74 17                	je     f01266e0 <test_kheap_virt_addr+0x105c>
f01266c9:	83 ec 04             	sub    $0x4,%esp
f01266cc:	68 e4 bb 13 f0       	push   $0xf013bbe4
f01266d1:	68 5f 09 00 00       	push   $0x95f
f01266d6:	68 5a b4 13 f0       	push   $0xf013b45a
f01266db:	e8 25 9b fd ff       	call   f0100205 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01266e0:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f01266e7:	10 00 00 
f01266ea:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01266f0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01266f5:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f01266fb:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126701:	ba 00 00 00 00       	mov    $0x0,%edx
f0126706:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012670c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0126712:	29 d0                	sub    %edx,%eax
f0126714:	89 c1                	mov    %eax,%ecx
f0126716:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012671d:	10 00 00 
f0126720:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0126725:	0f b6 d0             	movzbl %al,%edx
f0126728:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012672e:	01 d0                	add    %edx,%eax
f0126730:	48                   	dec    %eax
f0126731:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0126737:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012673d:	ba 00 00 00 00       	mov    $0x0,%edx
f0126742:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0126748:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012674e:	29 d0                	sub    %edx,%eax
f0126750:	01 c1                	add    %eax,%ecx
f0126752:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0126759:	10 00 00 
f012675c:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0126761:	0f b6 c0             	movzbl %al,%eax
f0126764:	c1 e0 04             	shl    $0x4,%eax
f0126767:	89 c2                	mov    %eax,%edx
f0126769:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012676f:	01 d0                	add    %edx,%eax
f0126771:	48                   	dec    %eax
f0126772:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0126778:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012677e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126783:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0126789:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012678f:	29 d0                	sub    %edx,%eax
f0126791:	01 c8                	add    %ecx,%eax
f0126793:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0126798:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		int i = 0;
f012679e:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f01267a5:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f01267ac:	10 00 00 
f01267af:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01267b5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01267ba:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f01267c0:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01267c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01267cb:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f01267d1:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01267d7:	29 d0                	sub    %edx,%eax
f01267d9:	89 c1                	mov    %eax,%ecx
f01267db:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f01267e2:	10 00 00 
f01267e5:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01267ea:	0f b6 d0             	movzbl %al,%edx
f01267ed:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01267f3:	01 d0                	add    %edx,%eax
f01267f5:	48                   	dec    %eax
f01267f6:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f01267fc:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0126802:	ba 00 00 00 00       	mov    $0x0,%edx
f0126807:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f012680d:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0126813:	29 d0                	sub    %edx,%eax
f0126815:	01 c1                	add    %eax,%ecx
f0126817:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f012681e:	10 00 00 
f0126821:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0126826:	0f b6 c0             	movzbl %al,%eax
f0126829:	c1 e0 04             	shl    $0x4,%eax
f012682c:	89 c2                	mov    %eax,%edx
f012682e:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0126834:	01 d0                	add    %edx,%eax
f0126836:	48                   	dec    %eax
f0126837:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f012683d:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0126843:	ba 00 00 00 00       	mov    $0x0,%edx
f0126848:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f012684e:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0126854:	29 d0                	sub    %edx,%eax
f0126856:	01 c1                	add    %eax,%ecx
f0126858:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f012685f:	10 00 00 
f0126862:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0126868:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012686d:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0126873:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0126879:	ba 00 00 00 00       	mov    $0x0,%edx
f012687e:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0126884:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012688a:	29 d0                	sub    %edx,%eax
f012688c:	29 c1                	sub    %eax,%ecx
f012688e:	89 c8                	mov    %ecx,%eax
f0126890:	05 00 40 00 00       	add    $0x4000,%eax
f0126895:	c1 e8 0c             	shr    $0xc,%eax
f0126898:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f012689e:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01268a4:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01268a7:	eb 41                	jmp    f01268ea <test_kheap_virt_addr+0x1266>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01268a9:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01268af:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01268b2:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01268b5:	83 ec 0c             	sub    $0xc,%esp
f01268b8:	50                   	push   %eax
f01268b9:	e8 61 13 fe ff       	call   f0107c1f <kheap_virtual_address>
f01268be:	83 c4 10             	add    $0x10,%esp
f01268c1:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if (retrievedVA != 0)
f01268c7:	83 bd 38 fe ff ff 00 	cmpl   $0x0,-0x1c8(%ebp)
f01268ce:	74 17                	je     f01268e7 <test_kheap_virt_addr+0x1263>
			{
				panic("Wrong kheap_virtual_address");
f01268d0:	83 ec 04             	sub    $0x4,%esp
f01268d3:	68 33 bf 13 f0       	push   $0xf013bf33
f01268d8:	68 70 09 00 00       	push   $0x970
f01268dd:	68 5a b4 13 f0       	push   $0xf013b45a
f01268e2:	e8 1e 99 fd ff       	call   f0100205 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f01268e7:	ff 45 d8             	incl   -0x28(%ebp)
f01268ea:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01268f0:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f01268f6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01268f9:	39 c2                	cmp    %eax,%edx
f01268fb:	77 ac                	ja     f01268a9 <test_kheap_virt_addr+0x1225>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01268fd:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126903:	05 00 04 00 00       	add    $0x400,%eax
f0126908:	89 45 d8             	mov    %eax,-0x28(%ebp)
f012690b:	e9 83 00 00 00       	jmp    f0126993 <test_kheap_virt_addr+0x130f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0126910:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126916:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0126919:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012691c:	83 ec 0c             	sub    $0xc,%esp
f012691f:	50                   	push   %eax
f0126920:	e8 fa 12 fe ff       	call   f0107c1f <kheap_virtual_address>
f0126925:	83 c4 10             	add    $0x10,%esp
f0126928:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f012692e:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0126935:	10 00 00 
f0126938:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012693e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126943:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f0126949:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012694f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126954:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f012695a:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0126960:	29 d0                	sub    %edx,%eax
f0126962:	89 c2                	mov    %eax,%edx
f0126964:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126967:	c1 e0 0c             	shl    $0xc,%eax
f012696a:	01 d0                	add    %edx,%eax
f012696c:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0126971:	3b 85 34 fe ff ff    	cmp    -0x1cc(%ebp),%eax
f0126977:	74 17                	je     f0126990 <test_kheap_virt_addr+0x130c>
			{
				panic("Wrong kheap_virtual_address");
f0126979:	83 ec 04             	sub    $0x4,%esp
f012697c:	68 33 bf 13 f0       	push   $0xf013bf33
f0126981:	68 7a 09 00 00       	push   $0x97a
f0126986:	68 5a b4 13 f0       	push   $0xf013b45a
f012698b:	e8 75 98 fd ff       	call   f0100205 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0126990:	ff 45 d8             	incl   -0x28(%ebp)
f0126993:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126999:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f012699f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01269a2:	39 c2                	cmp    %eax,%edx
f01269a4:	0f 87 66 ff ff ff    	ja     f0126910 <test_kheap_virt_addr+0x128c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01269aa:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01269b0:	05 04 07 00 00       	add    $0x704,%eax
f01269b5:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01269b8:	eb 41                	jmp    f01269fb <test_kheap_virt_addr+0x1377>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01269ba:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01269c0:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01269c3:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01269c6:	83 ec 0c             	sub    $0xc,%esp
f01269c9:	50                   	push   %eax
f01269ca:	e8 50 12 fe ff       	call   f0107c1f <kheap_virtual_address>
f01269cf:	83 c4 10             	add    $0x10,%esp
f01269d2:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
			if (retrievedVA != 0)
f01269d8:	83 bd 28 fe ff ff 00 	cmpl   $0x0,-0x1d8(%ebp)
f01269df:	74 17                	je     f01269f8 <test_kheap_virt_addr+0x1374>
			{
				panic("Wrong kheap_virtual_address");
f01269e1:	83 ec 04             	sub    $0x4,%esp
f01269e4:	68 33 bf 13 f0       	push   $0xf013bf33
f01269e9:	68 83 09 00 00       	push   $0x983
f01269ee:	68 5a b4 13 f0       	push   $0xf013b45a
f01269f3:	e8 0d 98 fd ff       	call   f0100205 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01269f8:	ff 45 d8             	incl   -0x28(%ebp)
f01269fb:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126a01:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f0126a07:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126a0a:	39 c2                	cmp    %eax,%edx
f0126a0c:	77 ac                	ja     f01269ba <test_kheap_virt_addr+0x1336>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0126a0e:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126a14:	05 04 0d 00 00       	add    $0xd04,%eax
f0126a19:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0126a1c:	e9 83 00 00 00       	jmp    f0126aa4 <test_kheap_virt_addr+0x1420>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0126a21:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126a27:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0126a2a:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126a2d:	83 ec 0c             	sub    $0xc,%esp
f0126a30:	50                   	push   %eax
f0126a31:	e8 e9 11 fe ff       	call   f0107c1f <kheap_virtual_address>
f0126a36:	83 c4 10             	add    $0x10,%esp
f0126a39:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0126a3f:	c7 85 20 fe ff ff 00 	movl   $0x1000,-0x1e0(%ebp)
f0126a46:	10 00 00 
f0126a49:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0126a4f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126a54:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
f0126a5a:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0126a60:	ba 00 00 00 00       	mov    $0x0,%edx
f0126a65:	f7 b5 20 fe ff ff    	divl   -0x1e0(%ebp)
f0126a6b:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0126a71:	29 d0                	sub    %edx,%eax
f0126a73:	89 c2                	mov    %eax,%edx
f0126a75:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126a78:	c1 e0 0c             	shl    $0xc,%eax
f0126a7b:	01 d0                	add    %edx,%eax
f0126a7d:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0126a82:	3b 85 24 fe ff ff    	cmp    -0x1dc(%ebp),%eax
f0126a88:	74 17                	je     f0126aa1 <test_kheap_virt_addr+0x141d>
			{
				panic("Wrong kheap_virtual_address");
f0126a8a:	83 ec 04             	sub    $0x4,%esp
f0126a8d:	68 33 bf 13 f0       	push   $0xf013bf33
f0126a92:	68 8c 09 00 00       	push   $0x98c
f0126a97:	68 5a b4 13 f0       	push   $0xf013b45a
f0126a9c:	e8 64 97 fd ff       	call   f0100205 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0126aa1:	ff 45 d8             	incl   -0x28(%ebp)
f0126aa4:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126aaa:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f0126ab0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126ab3:	39 c2                	cmp    %eax,%edx
f0126ab5:	0f 87 66 ff ff ff    	ja     f0126a21 <test_kheap_virt_addr+0x139d>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f0126abb:	83 ec 0c             	sub    $0xc,%esp
f0126abe:	68 e5 b5 13 f0       	push   $0xf013b5e5
f0126ac3:	e8 46 a2 fd ff       	call   f0100d0e <cprintf>
f0126ac8:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0126acb:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f0126ad2:	eb 54                	jmp    f0126b28 <test_kheap_virt_addr+0x14a4>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f0126ad4:	83 ec 0c             	sub    $0xc,%esp
f0126ad7:	ff 75 d4             	pushl  -0x2c(%ebp)
f0126ada:	e8 40 11 fe ff       	call   f0107c1f <kheap_virtual_address>
f0126adf:	83 c4 10             	add    $0x10,%esp
f0126ae2:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			if (retrievedVA != 0)
f0126ae8:	83 bd 18 fe ff ff 00 	cmpl   $0x0,-0x1e8(%ebp)
f0126aef:	74 30                	je     f0126b21 <test_kheap_virt_addr+0x149d>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f0126af1:	83 ec 04             	sub    $0x4,%esp
f0126af4:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0126afa:	ff 75 d4             	pushl  -0x2c(%ebp)
f0126afd:	68 81 bf 13 f0       	push   $0xf013bf81
f0126b02:	e8 07 a2 fd ff       	call   f0100d0e <cprintf>
f0126b07:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f0126b0a:	83 ec 04             	sub    $0x4,%esp
f0126b0d:	68 33 bf 13 f0       	push   $0xf013bf33
f0126b12:	68 9c 09 00 00       	push   $0x99c
f0126b17:	68 5a b4 13 f0       	push   $0xf013b45a
f0126b1c:	e8 e4 96 fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0126b21:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0126b28:	b8 40 ba 85 00       	mov    $0x85ba40,%eax
f0126b2d:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f0126b30:	72 a2                	jb     f0126ad4 <test_kheap_virt_addr+0x1450>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0126b32:	83 ec 0c             	sub    $0xc,%esp
f0126b35:	68 3e b6 13 f0       	push   $0xf013b63e
f0126b3a:	e8 cf a1 fd ff       	call   f0100d0e <cprintf>
f0126b3f:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f0126b42:	83 ec 0c             	sub    $0xc,%esp
f0126b45:	68 a0 bf 13 f0       	push   $0xf013bfa0
f0126b4a:	e8 bf a1 fd ff       	call   f0100d0e <cprintf>
f0126b4f:	83 c4 10             	add    $0x10,%esp

	return 1;
f0126b52:	b8 01 00 00 00       	mov    $0x1,%eax
f0126b57:	89 f4                	mov    %esi,%esp

}
f0126b59:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0126b5c:	5b                   	pop    %ebx
f0126b5d:	5e                   	pop    %esi
f0126b5e:	5f                   	pop    %edi
f0126b5f:	5d                   	pop    %ebp
f0126b60:	c3                   	ret    

f0126b61 <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f0126b61:	55                   	push   %ebp
f0126b62:	89 e5                	mov    %esp,%ebp
f0126b64:	57                   	push   %edi
f0126b65:	56                   	push   %esi
f0126b66:	53                   	push   %ebx
f0126b67:	81 ec ac 00 00 00    	sub    $0xac,%esp
	if (firstCall)
f0126b6d:	a0 23 3d 19 f0       	mov    0xf0193d23,%al
f0126b72:	84 c0                	test   %al,%al
f0126b74:	74 56                	je     f0126bcc <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f0126b76:	c6 05 23 3d 19 f0 00 	movb   $0x0,0xf0193d23
		initFreeFrames = sys_calculate_free_frames() ;
f0126b7d:	e8 d7 64 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0126b82:	a3 38 ba 85 f0       	mov    %eax,0xf085ba38
		initFreeDiskFrames = pf_calculate_free_frames() ;
f0126b87:	e8 57 d2 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0126b8c:	a3 34 ba 85 f0       	mov    %eax,0xf085ba34
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f0126b91:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0126b97:	bb fd c0 13 f0       	mov    $0xf013c0fd,%ebx
f0126b9c:	ba 11 00 00 00       	mov    $0x11,%edx
f0126ba1:	89 c7                	mov    %eax,%edi
f0126ba3:	89 de                	mov    %ebx,%esi
f0126ba5:	89 d1                	mov    %edx,%ecx
f0126ba7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0126ba9:	8d 95 65 ff ff ff    	lea    -0x9b(%ebp),%edx
f0126baf:	b9 53 00 00 00       	mov    $0x53,%ecx
f0126bb4:	b0 00                	mov    $0x0,%al
f0126bb6:	89 d7                	mov    %edx,%edi
f0126bb8:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f0126bba:	83 ec 0c             	sub    $0xc,%esp
f0126bbd:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0126bc3:	50                   	push   %eax
f0126bc4:	e8 a7 a1 fd ff       	call   f0100d70 <execute_command>
f0126bc9:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0126bcc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f0126bd3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0126bda:	a1 70 b8 85 f0       	mov    0xf085b870,%eax
f0126bdf:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0126be2:	eb 2d                	jmp    f0126c11 <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f0126be4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126be7:	05 5c 05 00 00       	add    $0x55c,%eax
f0126bec:	83 ec 08             	sub    $0x8,%esp
f0126bef:	68 e7 bf 13 f0       	push   $0xf013bfe7
f0126bf4:	50                   	push   %eax
f0126bf5:	e8 79 af 00 00       	call   f0131b73 <strcmp>
f0126bfa:	83 c4 10             	add    $0x10,%esp
f0126bfd:	85 c0                	test   %eax,%eax
f0126bff:	75 08                	jne    f0126c09 <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f0126c01:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126c04:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f0126c07:	eb 2f                	jmp    f0126c38 <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0126c09:	a1 78 b8 85 f0       	mov    0xf085b878,%eax
f0126c0e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0126c11:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0126c15:	74 08                	je     f0126c1f <test_three_creation_functions+0xbe>
f0126c17:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126c1a:	8b 40 44             	mov    0x44(%eax),%eax
f0126c1d:	eb 05                	jmp    f0126c24 <test_three_creation_functions+0xc3>
f0126c1f:	b8 00 00 00 00       	mov    $0x0,%eax
f0126c24:	a3 78 b8 85 f0       	mov    %eax,0xf085b878
f0126c29:	a1 78 b8 85 f0       	mov    0xf085b878,%eax
f0126c2e:	85 c0                	test   %eax,%eax
f0126c30:	75 b2                	jne    f0126be4 <test_three_creation_functions+0x83>
f0126c32:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0126c36:	75 ac                	jne    f0126be4 <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f0126c38:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0126c3b:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f0126c41:	85 c0                	test   %eax,%eax
f0126c43:	74 17                	je     f0126c5c <test_three_creation_functions+0xfb>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f0126c45:	83 ec 04             	sub    $0x4,%esp
f0126c48:	68 f0 bf 13 f0       	push   $0xf013bff0
f0126c4d:	68 c6 09 00 00       	push   $0x9c6
f0126c52:	68 5a b4 13 f0       	push   $0xf013b45a
f0126c57:	e8 a9 95 fd ff       	call   f0100205 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f0126c5c:	83 ec 0c             	sub    $0xc,%esp
f0126c5f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0126c62:	e8 5d 13 fe ff       	call   f0107fc4 <env_page_ws_get_size>
f0126c67:	83 c4 10             	add    $0x10,%esp
f0126c6a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f0126c6d:	e8 e7 63 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0126c72:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f0126c75:	e8 69 d1 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0126c7a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126c7d:	a1 34 ba 85 f0       	mov    0xf085ba34,%eax
f0126c82:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f0126c85:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0126c88:	74 17                	je     f0126ca1 <test_three_creation_functions+0x140>
f0126c8a:	83 ec 04             	sub    $0x4,%esp
f0126c8d:	68 74 b4 13 f0       	push   $0xf013b474
f0126c92:	68 cc 09 00 00       	push   $0x9cc
f0126c97:	68 5a b4 13 f0       	push   $0xf013b45a
f0126c9c:	e8 64 95 fd ff       	call   f0100205 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126ca1:	a1 38 ba 85 f0       	mov    0xf085ba38,%eax
f0126ca6:	2b 45 d8             	sub    -0x28(%ebp),%eax
f0126ca9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0126cac:	83 c2 15             	add    $0x15,%edx
f0126caf:	39 d0                	cmp    %edx,%eax
f0126cb1:	74 17                	je     f0126cca <test_three_creation_functions+0x169>
f0126cb3:	83 ec 04             	sub    $0x4,%esp
f0126cb6:	68 dc b4 13 f0       	push   $0xf013b4dc
f0126cbb:	68 ce 09 00 00       	push   $0x9ce
f0126cc0:	68 5a b4 13 f0       	push   $0xf013b45a
f0126cc5:	e8 3b 95 fd ff       	call   f0100205 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f0126cca:	83 ec 0c             	sub    $0xc,%esp
f0126ccd:	68 00 10 00 00       	push   $0x1000
f0126cd2:	e8 59 0d fe ff       	call   f0107a30 <kmalloc>
f0126cd7:	83 c4 10             	add    $0x10,%esp
f0126cda:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f0126cdd:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0126ce4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0126ce7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126cec:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0126cef:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126cf2:	ba 00 00 00 00       	mov    $0x0,%edx
f0126cf7:	f7 75 cc             	divl   -0x34(%ebp)
f0126cfa:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126cfd:	29 d0                	sub    %edx,%eax
f0126cff:	89 c1                	mov    %eax,%ecx
f0126d01:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0126d08:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0126d0d:	0f b6 d0             	movzbl %al,%edx
f0126d10:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126d13:	01 d0                	add    %edx,%eax
f0126d15:	48                   	dec    %eax
f0126d16:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0126d19:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126d1c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d21:	f7 75 c4             	divl   -0x3c(%ebp)
f0126d24:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126d27:	29 d0                	sub    %edx,%eax
f0126d29:	01 c1                	add    %eax,%ecx
f0126d2b:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0126d32:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0126d37:	0f b6 c0             	movzbl %al,%eax
f0126d3a:	c1 e0 04             	shl    $0x4,%eax
f0126d3d:	89 c2                	mov    %eax,%edx
f0126d3f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126d42:	01 d0                	add    %edx,%eax
f0126d44:	48                   	dec    %eax
f0126d45:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0126d48:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126d4b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d50:	f7 75 bc             	divl   -0x44(%ebp)
f0126d53:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126d56:	29 d0                	sub    %edx,%eax
f0126d58:	01 c8                	add    %ecx,%eax
f0126d5a:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f0126d60:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126d63:	39 c2                	cmp    %eax,%edx
f0126d65:	74 17                	je     f0126d7e <test_three_creation_functions+0x21d>
f0126d67:	83 ec 04             	sub    $0x4,%esp
f0126d6a:	68 40 c0 13 f0       	push   $0xf013c040
f0126d6f:	68 d2 09 00 00       	push   $0x9d2
f0126d74:	68 5a b4 13 f0       	push   $0xf013b45a
f0126d79:	e8 87 94 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f0126d7e:	83 ec 0c             	sub    $0xc,%esp
f0126d81:	68 b0 c0 13 f0       	push   $0xf013c0b0
f0126d86:	e8 83 9f fd ff       	call   f0100d0e <cprintf>
f0126d8b:	83 c4 10             	add    $0x10,%esp

	return 1;
f0126d8e:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0126d93:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0126d96:	5b                   	pop    %ebx
f0126d97:	5e                   	pop    %esi
f0126d98:	5f                   	pop    %edi
f0126d99:	5d                   	pop    %ebp
f0126d9a:	c3                   	ret    

f0126d9b <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f0126d9b:	55                   	push   %ebp
f0126d9c:	89 e5                	mov    %esp,%ebp
f0126d9e:	57                   	push   %edi
f0126d9f:	53                   	push   %ebx
f0126da0:	81 ec 40 02 00 00    	sub    $0x240,%esp
	char minByte = 1<<7;
f0126da6:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0126daa:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0126dae:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0126db4:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0126dba:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0126dc1:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0126dc8:	e8 8c 62 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0126dcd:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0126dd0:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0126dd6:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126ddb:	b8 00 00 00 00       	mov    $0x0,%eax
f0126de0:	89 d7                	mov    %edx,%edi
f0126de2:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0126de4:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0126dea:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126def:	b8 00 00 00 00       	mov    $0x0,%eax
f0126df4:	89 d7                	mov    %edx,%edi
f0126df6:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0126df8:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0126dfe:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126e03:	b8 00 00 00 00       	mov    $0x0,%eax
f0126e08:	89 d7                	mov    %edx,%edi
f0126e0a:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126e0c:	e8 48 62 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0126e11:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126e14:	e8 ca cf fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0126e19:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0126e1c:	83 ec 0c             	sub    $0xc,%esp
f0126e1f:	68 00 fc 1f 00       	push   $0x1ffc00
f0126e24:	e8 07 0c fe ff       	call   f0107a30 <kmalloc>
f0126e29:	83 c4 10             	add    $0x10,%esp
f0126e2c:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126e32:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0126e38:	89 c1                	mov    %eax,%ecx
f0126e3a:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0126e41:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126e44:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126e49:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0126e4c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126e4f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e54:	f7 75 c8             	divl   -0x38(%ebp)
f0126e57:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126e5a:	29 d0                	sub    %edx,%eax
f0126e5c:	89 c3                	mov    %eax,%ebx
f0126e5e:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0126e65:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0126e6a:	0f b6 d0             	movzbl %al,%edx
f0126e6d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126e70:	01 d0                	add    %edx,%eax
f0126e72:	48                   	dec    %eax
f0126e73:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0126e76:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126e79:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e7e:	f7 75 c0             	divl   -0x40(%ebp)
f0126e81:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126e84:	29 d0                	sub    %edx,%eax
f0126e86:	01 c3                	add    %eax,%ebx
f0126e88:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0126e8f:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0126e94:	0f b6 c0             	movzbl %al,%eax
f0126e97:	c1 e0 04             	shl    $0x4,%eax
f0126e9a:	89 c2                	mov    %eax,%edx
f0126e9c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126e9f:	01 d0                	add    %edx,%eax
f0126ea1:	48                   	dec    %eax
f0126ea2:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0126ea5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0126ea8:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ead:	f7 75 b8             	divl   -0x48(%ebp)
f0126eb0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0126eb3:	29 d0                	sub    %edx,%eax
f0126eb5:	01 d8                	add    %ebx,%eax
f0126eb7:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0126ebc:	39 c1                	cmp    %eax,%ecx
f0126ebe:	74 17                	je     f0126ed7 <test_kfreeall+0x13c>
f0126ec0:	83 ec 04             	sub    $0x4,%esp
f0126ec3:	68 40 b5 13 f0       	push   $0xf013b540
f0126ec8:	68 f9 09 00 00       	push   $0x9f9
f0126ecd:	68 5a b4 13 f0       	push   $0xf013b45a
f0126ed2:	e8 2e 93 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126ed7:	e8 07 cf fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0126edc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126edf:	74 17                	je     f0126ef8 <test_kfreeall+0x15d>
f0126ee1:	83 ec 04             	sub    $0x4,%esp
f0126ee4:	68 74 b4 13 f0       	push   $0xf013b474
f0126ee9:	68 fa 09 00 00       	push   $0x9fa
f0126eee:	68 5a b4 13 f0       	push   $0xf013b45a
f0126ef3:	e8 0d 93 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126ef8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126efb:	e8 59 61 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0126f00:	29 c3                	sub    %eax,%ebx
f0126f02:	89 d8                	mov    %ebx,%eax
f0126f04:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126f09:	74 17                	je     f0126f22 <test_kfreeall+0x187>
f0126f0b:	83 ec 04             	sub    $0x4,%esp
f0126f0e:	68 dc b4 13 f0       	push   $0xf013b4dc
f0126f13:	68 fb 09 00 00       	push   $0x9fb
f0126f18:	68 5a b4 13 f0       	push   $0xf013b45a
f0126f1d:	e8 e3 92 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0126f22:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0126f29:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126f2c:	e8 28 61 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0126f31:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126f34:	e8 aa ce fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0126f39:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0126f3c:	83 ec 0c             	sub    $0xc,%esp
f0126f3f:	68 00 fc 1f 00       	push   $0x1ffc00
f0126f44:	e8 e7 0a fe ff       	call   f0107a30 <kmalloc>
f0126f49:	83 c4 10             	add    $0x10,%esp
f0126f4c:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126f52:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0126f58:	89 c1                	mov    %eax,%ecx
f0126f5a:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0126f61:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126f64:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126f69:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0126f6c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126f6f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f74:	f7 75 b0             	divl   -0x50(%ebp)
f0126f77:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126f7a:	29 d0                	sub    %edx,%eax
f0126f7c:	89 c3                	mov    %eax,%ebx
f0126f7e:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0126f85:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0126f8a:	0f b6 d0             	movzbl %al,%edx
f0126f8d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126f90:	01 d0                	add    %edx,%eax
f0126f92:	48                   	dec    %eax
f0126f93:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0126f96:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126f99:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f9e:	f7 75 a8             	divl   -0x58(%ebp)
f0126fa1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126fa4:	29 d0                	sub    %edx,%eax
f0126fa6:	01 c3                	add    %eax,%ebx
f0126fa8:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0126faf:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0126fb4:	0f b6 c0             	movzbl %al,%eax
f0126fb7:	c1 e0 04             	shl    $0x4,%eax
f0126fba:	89 c2                	mov    %eax,%edx
f0126fbc:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0126fbf:	01 d0                	add    %edx,%eax
f0126fc1:	48                   	dec    %eax
f0126fc2:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0126fc5:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126fc8:	ba 00 00 00 00       	mov    $0x0,%edx
f0126fcd:	f7 75 a0             	divl   -0x60(%ebp)
f0126fd0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126fd3:	29 d0                	sub    %edx,%eax
f0126fd5:	01 d8                	add    %ebx,%eax
f0126fd7:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0126fdc:	39 c1                	cmp    %eax,%ecx
f0126fde:	74 17                	je     f0126ff7 <test_kfreeall+0x25c>
f0126fe0:	83 ec 04             	sub    $0x4,%esp
f0126fe3:	68 40 b5 13 f0       	push   $0xf013b540
f0126fe8:	68 02 0a 00 00       	push   $0xa02
f0126fed:	68 5a b4 13 f0       	push   $0xf013b45a
f0126ff2:	e8 0e 92 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126ff7:	e8 e7 cd fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0126ffc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126fff:	74 17                	je     f0127018 <test_kfreeall+0x27d>
f0127001:	83 ec 04             	sub    $0x4,%esp
f0127004:	68 74 b4 13 f0       	push   $0xf013b474
f0127009:	68 03 0a 00 00       	push   $0xa03
f012700e:	68 5a b4 13 f0       	push   $0xf013b45a
f0127013:	e8 ed 91 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127018:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012701b:	e8 39 60 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0127020:	29 c3                	sub    %eax,%ebx
f0127022:	89 d8                	mov    %ebx,%eax
f0127024:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127029:	74 17                	je     f0127042 <test_kfreeall+0x2a7>
f012702b:	83 ec 04             	sub    $0x4,%esp
f012702e:	68 dc b4 13 f0       	push   $0xf013b4dc
f0127033:	68 04 0a 00 00       	push   $0xa04
f0127038:	68 5a b4 13 f0       	push   $0xf013b45a
f012703d:	e8 c3 91 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0127042:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0127049:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012704c:	e8 08 60 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0127051:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127054:	e8 8a cd fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0127059:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012705c:	83 ec 0c             	sub    $0xc,%esp
f012705f:	68 00 08 00 00       	push   $0x800
f0127064:	e8 c7 09 fe ff       	call   f0107a30 <kmalloc>
f0127069:	83 c4 10             	add    $0x10,%esp
f012706c:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127072:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0127078:	89 c1                	mov    %eax,%ecx
f012707a:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0127081:	8b 45 98             	mov    -0x68(%ebp),%eax
f0127084:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127089:	89 45 94             	mov    %eax,-0x6c(%ebp)
f012708c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012708f:	ba 00 00 00 00       	mov    $0x0,%edx
f0127094:	f7 75 98             	divl   -0x68(%ebp)
f0127097:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012709a:	29 d0                	sub    %edx,%eax
f012709c:	89 c3                	mov    %eax,%ebx
f012709e:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01270a5:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01270aa:	0f b6 d0             	movzbl %al,%edx
f01270ad:	8b 45 90             	mov    -0x70(%ebp),%eax
f01270b0:	01 d0                	add    %edx,%eax
f01270b2:	48                   	dec    %eax
f01270b3:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01270b6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01270b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01270be:	f7 75 90             	divl   -0x70(%ebp)
f01270c1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01270c4:	29 d0                	sub    %edx,%eax
f01270c6:	01 c3                	add    %eax,%ebx
f01270c8:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01270cf:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01270d4:	0f b6 c0             	movzbl %al,%eax
f01270d7:	c1 e0 04             	shl    $0x4,%eax
f01270da:	89 c2                	mov    %eax,%edx
f01270dc:	8b 45 88             	mov    -0x78(%ebp),%eax
f01270df:	01 d0                	add    %edx,%eax
f01270e1:	48                   	dec    %eax
f01270e2:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01270e5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01270e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01270ed:	f7 75 88             	divl   -0x78(%ebp)
f01270f0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01270f3:	29 d0                	sub    %edx,%eax
f01270f5:	01 d8                	add    %ebx,%eax
f01270f7:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01270fc:	39 c1                	cmp    %eax,%ecx
f01270fe:	74 17                	je     f0127117 <test_kfreeall+0x37c>
f0127100:	83 ec 04             	sub    $0x4,%esp
f0127103:	68 40 b5 13 f0       	push   $0xf013b540
f0127108:	68 0b 0a 00 00       	push   $0xa0b
f012710d:	68 5a b4 13 f0       	push   $0xf013b45a
f0127112:	e8 ee 90 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127117:	e8 c7 cc fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012711c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012711f:	74 17                	je     f0127138 <test_kfreeall+0x39d>
f0127121:	83 ec 04             	sub    $0x4,%esp
f0127124:	68 74 b4 13 f0       	push   $0xf013b474
f0127129:	68 0c 0a 00 00       	push   $0xa0c
f012712e:	68 5a b4 13 f0       	push   $0xf013b45a
f0127133:	e8 cd 90 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127138:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012713b:	e8 19 5f fe ff       	call   f010d059 <sys_calculate_free_frames>
f0127140:	29 c3                	sub    %eax,%ebx
f0127142:	89 d8                	mov    %ebx,%eax
f0127144:	83 f8 01             	cmp    $0x1,%eax
f0127147:	74 17                	je     f0127160 <test_kfreeall+0x3c5>
f0127149:	83 ec 04             	sub    $0x4,%esp
f012714c:	68 dc b4 13 f0       	push   $0xf013b4dc
f0127151:	68 0d 0a 00 00       	push   $0xa0d
f0127156:	68 5a b4 13 f0       	push   $0xf013b45a
f012715b:	e8 a5 90 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0127160:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0127167:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012716a:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0127170:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0127173:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012717a:	eb 0e                	jmp    f012718a <test_kfreeall+0x3ef>
		{
			ptr[i] = 2 ;
f012717c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012717f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127182:	01 d0                	add    %edx,%eax
f0127184:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0127187:	ff 45 f4             	incl   -0xc(%ebp)
f012718a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0127190:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127193:	7f e7                	jg     f012717c <test_kfreeall+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127195:	e8 bf 5e fe ff       	call   f010d059 <sys_calculate_free_frames>
f012719a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012719d:	e8 41 cc fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01271a2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01271a5:	83 ec 0c             	sub    $0xc,%esp
f01271a8:	68 00 08 00 00       	push   $0x800
f01271ad:	e8 7e 08 fe ff       	call   f0107a30 <kmalloc>
f01271b2:	83 c4 10             	add    $0x10,%esp
f01271b5:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01271bb:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01271c1:	89 c1                	mov    %eax,%ecx
f01271c3:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01271ca:	10 00 00 
f01271cd:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01271d3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01271d8:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01271de:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01271e4:	ba 00 00 00 00       	mov    $0x0,%edx
f01271e9:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01271ef:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01271f5:	29 d0                	sub    %edx,%eax
f01271f7:	89 c3                	mov    %eax,%ebx
f01271f9:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0127200:	10 00 00 
f0127203:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0127208:	0f b6 d0             	movzbl %al,%edx
f012720b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127211:	01 d0                	add    %edx,%eax
f0127213:	48                   	dec    %eax
f0127214:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012721a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0127220:	ba 00 00 00 00       	mov    $0x0,%edx
f0127225:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012722b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0127231:	29 d0                	sub    %edx,%eax
f0127233:	01 c3                	add    %eax,%ebx
f0127235:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012723c:	10 00 00 
f012723f:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0127244:	0f b6 c0             	movzbl %al,%eax
f0127247:	c1 e0 04             	shl    $0x4,%eax
f012724a:	89 c2                	mov    %eax,%edx
f012724c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127252:	01 d0                	add    %edx,%eax
f0127254:	48                   	dec    %eax
f0127255:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012725b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0127261:	ba 00 00 00 00       	mov    $0x0,%edx
f0127266:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012726c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0127272:	29 d0                	sub    %edx,%eax
f0127274:	01 d8                	add    %ebx,%eax
f0127276:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012727b:	39 c1                	cmp    %eax,%ecx
f012727d:	74 17                	je     f0127296 <test_kfreeall+0x4fb>
f012727f:	83 ec 04             	sub    $0x4,%esp
f0127282:	68 40 b5 13 f0       	push   $0xf013b540
f0127287:	68 19 0a 00 00       	push   $0xa19
f012728c:	68 5a b4 13 f0       	push   $0xf013b45a
f0127291:	e8 6f 8f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127296:	e8 48 cb fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012729b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012729e:	74 17                	je     f01272b7 <test_kfreeall+0x51c>
f01272a0:	83 ec 04             	sub    $0x4,%esp
f01272a3:	68 74 b4 13 f0       	push   $0xf013b474
f01272a8:	68 1a 0a 00 00       	push   $0xa1a
f01272ad:	68 5a b4 13 f0       	push   $0xf013b45a
f01272b2:	e8 4e 8f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01272b7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01272ba:	e8 9a 5d fe ff       	call   f010d059 <sys_calculate_free_frames>
f01272bf:	29 c3                	sub    %eax,%ebx
f01272c1:	89 d8                	mov    %ebx,%eax
f01272c3:	83 f8 01             	cmp    $0x1,%eax
f01272c6:	74 17                	je     f01272df <test_kfreeall+0x544>
f01272c8:	83 ec 04             	sub    $0x4,%esp
f01272cb:	68 dc b4 13 f0       	push   $0xf013b4dc
f01272d0:	68 1b 0a 00 00       	push   $0xa1b
f01272d5:	68 5a b4 13 f0       	push   $0xf013b45a
f01272da:	e8 26 8f fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01272df:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f01272e6:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01272e9:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01272ef:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01272f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01272f9:	eb 0e                	jmp    f0127309 <test_kfreeall+0x56e>
		{
			ptr[i] = 3 ;
f01272fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01272fe:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127301:	01 d0                	add    %edx,%eax
f0127303:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127306:	ff 45 f4             	incl   -0xc(%ebp)
f0127309:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012730f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127312:	7f e7                	jg     f01272fb <test_kfreeall+0x560>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0127314:	e8 40 5d fe ff       	call   f010d059 <sys_calculate_free_frames>
f0127319:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012731c:	e8 c2 ca fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0127321:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0127324:	83 ec 0c             	sub    $0xc,%esp
f0127327:	68 00 1c 00 00       	push   $0x1c00
f012732c:	e8 ff 06 fe ff       	call   f0107a30 <kmalloc>
f0127331:	83 c4 10             	add    $0x10,%esp
f0127334:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012733a:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0127340:	89 c1                	mov    %eax,%ecx
f0127342:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0127349:	10 00 00 
f012734c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0127352:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127357:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012735d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0127363:	ba 00 00 00 00       	mov    $0x0,%edx
f0127368:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012736e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0127374:	29 d0                	sub    %edx,%eax
f0127376:	89 c3                	mov    %eax,%ebx
f0127378:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012737f:	10 00 00 
f0127382:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0127387:	0f b6 d0             	movzbl %al,%edx
f012738a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0127390:	01 d0                	add    %edx,%eax
f0127392:	48                   	dec    %eax
f0127393:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0127399:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012739f:	ba 00 00 00 00       	mov    $0x0,%edx
f01273a4:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01273aa:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01273b0:	29 d0                	sub    %edx,%eax
f01273b2:	01 c3                	add    %eax,%ebx
f01273b4:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01273bb:	10 00 00 
f01273be:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01273c3:	0f b6 c0             	movzbl %al,%eax
f01273c6:	c1 e0 04             	shl    $0x4,%eax
f01273c9:	89 c2                	mov    %eax,%edx
f01273cb:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01273d1:	01 d0                	add    %edx,%eax
f01273d3:	48                   	dec    %eax
f01273d4:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01273da:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01273e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01273e5:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f01273eb:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01273f1:	29 d0                	sub    %edx,%eax
f01273f3:	01 d8                	add    %ebx,%eax
f01273f5:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01273fa:	39 c1                	cmp    %eax,%ecx
f01273fc:	74 17                	je     f0127415 <test_kfreeall+0x67a>
f01273fe:	83 ec 04             	sub    $0x4,%esp
f0127401:	68 40 b5 13 f0       	push   $0xf013b540
f0127406:	68 27 0a 00 00       	push   $0xa27
f012740b:	68 5a b4 13 f0       	push   $0xf013b45a
f0127410:	e8 f0 8d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127415:	e8 c9 c9 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012741a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012741d:	74 17                	je     f0127436 <test_kfreeall+0x69b>
f012741f:	83 ec 04             	sub    $0x4,%esp
f0127422:	68 74 b4 13 f0       	push   $0xf013b474
f0127427:	68 28 0a 00 00       	push   $0xa28
f012742c:	68 5a b4 13 f0       	push   $0xf013b45a
f0127431:	e8 cf 8d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127436:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127439:	e8 1b 5c fe ff       	call   f010d059 <sys_calculate_free_frames>
f012743e:	29 c3                	sub    %eax,%ebx
f0127440:	89 d8                	mov    %ebx,%eax
f0127442:	83 f8 02             	cmp    $0x2,%eax
f0127445:	74 17                	je     f012745e <test_kfreeall+0x6c3>
f0127447:	83 ec 04             	sub    $0x4,%esp
f012744a:	68 dc b4 13 f0       	push   $0xf013b4dc
f012744f:	68 29 0a 00 00       	push   $0xa29
f0127454:	68 5a b4 13 f0       	push   $0xf013b45a
f0127459:	e8 a7 8d fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012745e:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0127465:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0127468:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f012746e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0127471:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127478:	eb 0e                	jmp    f0127488 <test_kfreeall+0x6ed>
		{
			ptr[i] = 4 ;
f012747a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012747d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127480:	01 d0                	add    %edx,%eax
f0127482:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0127485:	ff 45 f4             	incl   -0xc(%ebp)
f0127488:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012748e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127491:	7f e7                	jg     f012747a <test_kfreeall+0x6df>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0127493:	e8 c1 5b fe ff       	call   f010d059 <sys_calculate_free_frames>
f0127498:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012749b:	e8 43 c9 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01274a0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01274a3:	83 ec 0c             	sub    $0xc,%esp
f01274a6:	68 00 fc 2f 00       	push   $0x2ffc00
f01274ab:	e8 80 05 fe ff       	call   f0107a30 <kmalloc>
f01274b0:	83 c4 10             	add    $0x10,%esp
f01274b3:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01274b9:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01274bf:	89 c1                	mov    %eax,%ecx
f01274c1:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01274c8:	10 00 00 
f01274cb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01274d1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01274d6:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01274dc:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01274e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01274e7:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01274ed:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01274f3:	29 d0                	sub    %edx,%eax
f01274f5:	89 c3                	mov    %eax,%ebx
f01274f7:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f01274fe:	10 00 00 
f0127501:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0127506:	0f b6 d0             	movzbl %al,%edx
f0127509:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012750f:	01 d0                	add    %edx,%eax
f0127511:	48                   	dec    %eax
f0127512:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0127518:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012751e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127523:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0127529:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012752f:	29 d0                	sub    %edx,%eax
f0127531:	01 c3                	add    %eax,%ebx
f0127533:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012753a:	10 00 00 
f012753d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0127542:	0f b6 c0             	movzbl %al,%eax
f0127545:	c1 e0 04             	shl    $0x4,%eax
f0127548:	89 c2                	mov    %eax,%edx
f012754a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127550:	01 d0                	add    %edx,%eax
f0127552:	48                   	dec    %eax
f0127553:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0127559:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012755f:	ba 00 00 00 00       	mov    $0x0,%edx
f0127564:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012756a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0127570:	29 d0                	sub    %edx,%eax
f0127572:	01 d8                	add    %ebx,%eax
f0127574:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0127579:	39 c1                	cmp    %eax,%ecx
f012757b:	74 17                	je     f0127594 <test_kfreeall+0x7f9>
f012757d:	83 ec 04             	sub    $0x4,%esp
f0127580:	68 40 b5 13 f0       	push   $0xf013b540
f0127585:	68 35 0a 00 00       	push   $0xa35
f012758a:	68 5a b4 13 f0       	push   $0xf013b45a
f012758f:	e8 71 8c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127594:	e8 4a c8 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0127599:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012759c:	74 17                	je     f01275b5 <test_kfreeall+0x81a>
f012759e:	83 ec 04             	sub    $0x4,%esp
f01275a1:	68 74 b4 13 f0       	push   $0xf013b474
f01275a6:	68 36 0a 00 00       	push   $0xa36
f01275ab:	68 5a b4 13 f0       	push   $0xf013b45a
f01275b0:	e8 50 8c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01275b5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01275b8:	e8 9c 5a fe ff       	call   f010d059 <sys_calculate_free_frames>
f01275bd:	29 c3                	sub    %eax,%ebx
f01275bf:	89 d8                	mov    %ebx,%eax
f01275c1:	3d 00 03 00 00       	cmp    $0x300,%eax
f01275c6:	74 17                	je     f01275df <test_kfreeall+0x844>
f01275c8:	83 ec 04             	sub    $0x4,%esp
f01275cb:	68 dc b4 13 f0       	push   $0xf013b4dc
f01275d0:	68 37 0a 00 00       	push   $0xa37
f01275d5:	68 5a b4 13 f0       	push   $0xf013b45a
f01275da:	e8 26 8c fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01275df:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f01275e6:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01275e9:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01275ef:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01275f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01275f9:	eb 0e                	jmp    f0127609 <test_kfreeall+0x86e>
		{
			ptr[i] = 5 ;
f01275fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01275fe:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127601:	01 d0                	add    %edx,%eax
f0127603:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0127606:	ff 45 f4             	incl   -0xc(%ebp)
f0127609:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012760f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127612:	7f e7                	jg     f01275fb <test_kfreeall+0x860>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0127614:	e8 40 5a fe ff       	call   f010d059 <sys_calculate_free_frames>
f0127619:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012761c:	e8 c2 c7 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0127621:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0127624:	83 ec 0c             	sub    $0xc,%esp
f0127627:	68 00 fc 5f 00       	push   $0x5ffc00
f012762c:	e8 ff 03 fe ff       	call   f0107a30 <kmalloc>
f0127631:	83 c4 10             	add    $0x10,%esp
f0127634:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012763a:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0127640:	89 c1                	mov    %eax,%ecx
f0127642:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0127649:	10 00 00 
f012764c:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0127652:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127657:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012765d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0127663:	ba 00 00 00 00       	mov    $0x0,%edx
f0127668:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012766e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0127674:	29 d0                	sub    %edx,%eax
f0127676:	89 c3                	mov    %eax,%ebx
f0127678:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012767f:	10 00 00 
f0127682:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0127687:	0f b6 d0             	movzbl %al,%edx
f012768a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0127690:	01 d0                	add    %edx,%eax
f0127692:	48                   	dec    %eax
f0127693:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0127699:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012769f:	ba 00 00 00 00       	mov    $0x0,%edx
f01276a4:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01276aa:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01276b0:	29 d0                	sub    %edx,%eax
f01276b2:	01 c3                	add    %eax,%ebx
f01276b4:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01276bb:	10 00 00 
f01276be:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01276c3:	0f b6 c0             	movzbl %al,%eax
f01276c6:	c1 e0 04             	shl    $0x4,%eax
f01276c9:	89 c2                	mov    %eax,%edx
f01276cb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01276d1:	01 d0                	add    %edx,%eax
f01276d3:	48                   	dec    %eax
f01276d4:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01276da:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01276e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01276e5:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01276eb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01276f1:	29 d0                	sub    %edx,%eax
f01276f3:	01 d8                	add    %ebx,%eax
f01276f5:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01276fa:	39 c1                	cmp    %eax,%ecx
f01276fc:	74 17                	je     f0127715 <test_kfreeall+0x97a>
f01276fe:	83 ec 04             	sub    $0x4,%esp
f0127701:	68 40 b5 13 f0       	push   $0xf013b540
f0127706:	68 43 0a 00 00       	push   $0xa43
f012770b:	68 5a b4 13 f0       	push   $0xf013b45a
f0127710:	e8 f0 8a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127715:	e8 c9 c6 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012771a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012771d:	74 17                	je     f0127736 <test_kfreeall+0x99b>
f012771f:	83 ec 04             	sub    $0x4,%esp
f0127722:	68 74 b4 13 f0       	push   $0xf013b474
f0127727:	68 44 0a 00 00       	push   $0xa44
f012772c:	68 5a b4 13 f0       	push   $0xf013b45a
f0127731:	e8 cf 8a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127736:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127739:	e8 1b 59 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012773e:	29 c3                	sub    %eax,%ebx
f0127740:	89 d8                	mov    %ebx,%eax
f0127742:	3d 00 06 00 00       	cmp    $0x600,%eax
f0127747:	74 17                	je     f0127760 <test_kfreeall+0x9c5>
f0127749:	83 ec 04             	sub    $0x4,%esp
f012774c:	68 dc b4 13 f0       	push   $0xf013b4dc
f0127751:	68 45 0a 00 00       	push   $0xa45
f0127756:	68 5a b4 13 f0       	push   $0xf013b45a
f012775b:	e8 a5 8a fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0127760:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f0127767:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012776a:	e8 ea 58 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012776f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127772:	e8 6c c6 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0127777:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012777a:	83 ec 0c             	sub    $0xc,%esp
f012777d:	68 00 38 00 00       	push   $0x3800
f0127782:	e8 a9 02 fe ff       	call   f0107a30 <kmalloc>
f0127787:	83 c4 10             	add    $0x10,%esp
f012778a:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127790:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0127796:	89 c1                	mov    %eax,%ecx
f0127798:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012779f:	10 00 00 
f01277a2:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01277a8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01277ad:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01277b3:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01277b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01277be:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01277c4:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01277ca:	29 d0                	sub    %edx,%eax
f01277cc:	89 c3                	mov    %eax,%ebx
f01277ce:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01277d5:	10 00 00 
f01277d8:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01277dd:	0f b6 d0             	movzbl %al,%edx
f01277e0:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01277e6:	01 d0                	add    %edx,%eax
f01277e8:	48                   	dec    %eax
f01277e9:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01277ef:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01277f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01277fa:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0127800:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0127806:	29 d0                	sub    %edx,%eax
f0127808:	01 c3                	add    %eax,%ebx
f012780a:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0127811:	10 00 00 
f0127814:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0127819:	0f b6 c0             	movzbl %al,%eax
f012781c:	c1 e0 04             	shl    $0x4,%eax
f012781f:	89 c2                	mov    %eax,%edx
f0127821:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0127827:	01 d0                	add    %edx,%eax
f0127829:	48                   	dec    %eax
f012782a:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0127830:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0127836:	ba 00 00 00 00       	mov    $0x0,%edx
f012783b:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0127841:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0127847:	29 d0                	sub    %edx,%eax
f0127849:	01 d8                	add    %ebx,%eax
f012784b:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0127850:	39 c1                	cmp    %eax,%ecx
f0127852:	74 17                	je     f012786b <test_kfreeall+0xad0>
f0127854:	83 ec 04             	sub    $0x4,%esp
f0127857:	68 40 b5 13 f0       	push   $0xf013b540
f012785c:	68 4c 0a 00 00       	push   $0xa4c
f0127861:	68 5a b4 13 f0       	push   $0xf013b45a
f0127866:	e8 9a 89 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012786b:	e8 73 c5 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0127870:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127873:	74 17                	je     f012788c <test_kfreeall+0xaf1>
f0127875:	83 ec 04             	sub    $0x4,%esp
f0127878:	68 74 b4 13 f0       	push   $0xf013b474
f012787d:	68 4d 0a 00 00       	push   $0xa4d
f0127882:	68 5a b4 13 f0       	push   $0xf013b45a
f0127887:	e8 79 89 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012788c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012788f:	e8 c5 57 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0127894:	29 c3                	sub    %eax,%ebx
f0127896:	89 d8                	mov    %ebx,%eax
f0127898:	83 f8 04             	cmp    $0x4,%eax
f012789b:	74 17                	je     f01278b4 <test_kfreeall+0xb19>
f012789d:	83 ec 04             	sub    $0x4,%esp
f01278a0:	68 dc b4 13 f0       	push   $0xf013b4dc
f01278a5:	68 4e 0a 00 00       	push   $0xa4e
f01278aa:	68 5a b4 13 f0       	push   $0xf013b45a
f01278af:	e8 51 89 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01278b4:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f01278bb:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f01278be:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01278c4:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01278c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01278ce:	eb 0e                	jmp    f01278de <test_kfreeall+0xb43>
		{
			ptr[i] = 7 ;
f01278d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01278d3:	8b 45 80             	mov    -0x80(%ebp),%eax
f01278d6:	01 d0                	add    %edx,%eax
f01278d8:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01278db:	ff 45 f4             	incl   -0xc(%ebp)
f01278de:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01278e4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01278e7:	7f e7                	jg     f01278d0 <test_kfreeall+0xb35>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01278e9:	e8 6b 57 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01278ee:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01278f4:	e8 ea c4 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01278f9:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f01278ff:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0127905:	83 ec 0c             	sub    $0xc,%esp
f0127908:	50                   	push   %eax
f0127909:	e8 0b 02 fe ff       	call   f0107b19 <kfree>
f012790e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127911:	e8 cd c4 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0127916:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012791c:	74 17                	je     f0127935 <test_kfreeall+0xb9a>
f012791e:	83 ec 04             	sub    $0x4,%esp
f0127921:	68 74 b4 13 f0       	push   $0xf013b474
f0127926:	68 5d 0a 00 00       	push   $0xa5d
f012792b:	68 5a b4 13 f0       	push   $0xf013b45a
f0127930:	e8 d0 88 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0127935:	e8 1f 57 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012793a:	89 c2                	mov    %eax,%edx
f012793c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0127942:	29 c2                	sub    %eax,%edx
f0127944:	89 d0                	mov    %edx,%eax
f0127946:	3d 00 02 00 00       	cmp    $0x200,%eax
f012794b:	74 17                	je     f0127964 <test_kfreeall+0xbc9>
f012794d:	83 ec 04             	sub    $0x4,%esp
f0127950:	68 e4 bb 13 f0       	push   $0xf013bbe4
f0127955:	68 5e 0a 00 00       	push   $0xa5e
f012795a:	68 5a b4 13 f0       	push   $0xf013b45a
f012795f:	e8 a1 88 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127964:	e8 f0 56 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0127969:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012796f:	e8 6f c4 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0127974:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f012797a:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0127980:	83 ec 0c             	sub    $0xc,%esp
f0127983:	50                   	push   %eax
f0127984:	e8 90 01 fe ff       	call   f0107b19 <kfree>
f0127989:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012798c:	e8 52 c4 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0127991:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0127997:	74 17                	je     f01279b0 <test_kfreeall+0xc15>
f0127999:	83 ec 04             	sub    $0x4,%esp
f012799c:	68 74 b4 13 f0       	push   $0xf013b474
f01279a1:	68 64 0a 00 00       	push   $0xa64
f01279a6:	68 5a b4 13 f0       	push   $0xf013b45a
f01279ab:	e8 55 88 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01279b0:	e8 a4 56 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01279b5:	89 c2                	mov    %eax,%edx
f01279b7:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01279bd:	29 c2                	sub    %eax,%edx
f01279bf:	89 d0                	mov    %edx,%eax
f01279c1:	3d 00 02 00 00       	cmp    $0x200,%eax
f01279c6:	74 17                	je     f01279df <test_kfreeall+0xc44>
f01279c8:	83 ec 04             	sub    $0x4,%esp
f01279cb:	68 e4 bb 13 f0       	push   $0xf013bbe4
f01279d0:	68 65 0a 00 00       	push   $0xa65
f01279d5:	68 5a b4 13 f0       	push   $0xf013b45a
f01279da:	e8 26 88 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01279df:	e8 75 56 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01279e4:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01279ea:	e8 f4 c3 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01279ef:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f01279f5:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f01279fb:	83 ec 0c             	sub    $0xc,%esp
f01279fe:	50                   	push   %eax
f01279ff:	e8 15 01 fe ff       	call   f0107b19 <kfree>
f0127a04:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127a07:	e8 d7 c3 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0127a0c:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0127a12:	74 17                	je     f0127a2b <test_kfreeall+0xc90>
f0127a14:	83 ec 04             	sub    $0x4,%esp
f0127a17:	68 74 b4 13 f0       	push   $0xf013b474
f0127a1c:	68 6b 0a 00 00       	push   $0xa6b
f0127a21:	68 5a b4 13 f0       	push   $0xf013b45a
f0127a26:	e8 da 87 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0127a2b:	e8 29 56 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0127a30:	89 c2                	mov    %eax,%edx
f0127a32:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0127a38:	29 c2                	sub    %eax,%edx
f0127a3a:	89 d0                	mov    %edx,%eax
f0127a3c:	3d 00 06 00 00       	cmp    $0x600,%eax
f0127a41:	74 17                	je     f0127a5a <test_kfreeall+0xcbf>
f0127a43:	83 ec 04             	sub    $0x4,%esp
f0127a46:	68 e4 bb 13 f0       	push   $0xf013bbe4
f0127a4b:	68 6c 0a 00 00       	push   $0xa6c
f0127a50:	68 5a b4 13 f0       	push   $0xf013b45a
f0127a55:	e8 ab 87 fd ff       	call   f0100205 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0127a5a:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0127a60:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0127a63:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127a6a:	eb 1e                	jmp    f0127a8a <test_kfreeall+0xcef>
		{
			sums[2] += ptr[i] ;
f0127a6c:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0127a72:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127a75:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127a78:	01 c8                	add    %ecx,%eax
f0127a7a:	8a 00                	mov    (%eax),%al
f0127a7c:	0f be c0             	movsbl %al,%eax
f0127a7f:	01 d0                	add    %edx,%eax
f0127a81:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0127a87:	ff 45 f4             	incl   -0xc(%ebp)
f0127a8a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0127a90:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127a93:	7f d7                	jg     f0127a6c <test_kfreeall+0xcd1>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0127a95:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0127a9b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0127aa1:	01 c0                	add    %eax,%eax
f0127aa3:	39 c2                	cmp    %eax,%edx
f0127aa5:	74 17                	je     f0127abe <test_kfreeall+0xd23>
f0127aa7:	83 ec 04             	sub    $0x4,%esp
f0127aaa:	68 40 bc 13 f0       	push   $0xf013bc40
f0127aaf:	68 78 0a 00 00       	push   $0xa78
f0127ab4:	68 5a b4 13 f0       	push   $0xf013b45a
f0127ab9:	e8 47 87 fd ff       	call   f0100205 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0127abe:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0127ac4:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0127ac7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127ace:	eb 1e                	jmp    f0127aee <test_kfreeall+0xd53>
		{
			sums[3] += ptr[i] ;
f0127ad0:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0127ad6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127ad9:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127adc:	01 c8                	add    %ecx,%eax
f0127ade:	8a 00                	mov    (%eax),%al
f0127ae0:	0f be c0             	movsbl %al,%eax
f0127ae3:	01 d0                	add    %edx,%eax
f0127ae5:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127aeb:	ff 45 f4             	incl   -0xc(%ebp)
f0127aee:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127af4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127af7:	7f d7                	jg     f0127ad0 <test_kfreeall+0xd35>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0127af9:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0127aff:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127b05:	89 c1                	mov    %eax,%ecx
f0127b07:	01 c9                	add    %ecx,%ecx
f0127b09:	01 c8                	add    %ecx,%eax
f0127b0b:	39 c2                	cmp    %eax,%edx
f0127b0d:	74 17                	je     f0127b26 <test_kfreeall+0xd8b>
f0127b0f:	83 ec 04             	sub    $0x4,%esp
f0127b12:	68 40 bc 13 f0       	push   $0xf013bc40
f0127b17:	68 80 0a 00 00       	push   $0xa80
f0127b1c:	68 5a b4 13 f0       	push   $0xf013b45a
f0127b21:	e8 df 86 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0127b26:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0127b2c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0127b2f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127b36:	eb 1e                	jmp    f0127b56 <test_kfreeall+0xdbb>
		{
			sums[4] += ptr[i] ;
f0127b38:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0127b3e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127b41:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127b44:	01 c8                	add    %ecx,%eax
f0127b46:	8a 00                	mov    (%eax),%al
f0127b48:	0f be c0             	movsbl %al,%eax
f0127b4b:	01 d0                	add    %edx,%eax
f0127b4d:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0127b53:	ff 45 f4             	incl   -0xc(%ebp)
f0127b56:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0127b5c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127b5f:	7f d7                	jg     f0127b38 <test_kfreeall+0xd9d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0127b61:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0127b67:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0127b6d:	c1 e2 02             	shl    $0x2,%edx
f0127b70:	39 d0                	cmp    %edx,%eax
f0127b72:	74 17                	je     f0127b8b <test_kfreeall+0xdf0>
f0127b74:	83 ec 04             	sub    $0x4,%esp
f0127b77:	68 40 bc 13 f0       	push   $0xf013bc40
f0127b7c:	68 88 0a 00 00       	push   $0xa88
f0127b81:	68 5a b4 13 f0       	push   $0xf013b45a
f0127b86:	e8 7a 86 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0127b8b:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0127b91:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0127b94:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127b9b:	eb 1e                	jmp    f0127bbb <test_kfreeall+0xe20>
		{
			sums[5] += ptr[i] ;
f0127b9d:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0127ba3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127ba6:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127ba9:	01 c8                	add    %ecx,%eax
f0127bab:	8a 00                	mov    (%eax),%al
f0127bad:	0f be c0             	movsbl %al,%eax
f0127bb0:	01 d0                	add    %edx,%eax
f0127bb2:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0127bb8:	ff 45 f4             	incl   -0xc(%ebp)
f0127bbb:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127bc1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127bc4:	7f d7                	jg     f0127b9d <test_kfreeall+0xe02>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0127bc6:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0127bcc:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0127bd2:	89 d0                	mov    %edx,%eax
f0127bd4:	c1 e0 02             	shl    $0x2,%eax
f0127bd7:	01 d0                	add    %edx,%eax
f0127bd9:	39 c1                	cmp    %eax,%ecx
f0127bdb:	74 17                	je     f0127bf4 <test_kfreeall+0xe59>
f0127bdd:	83 ec 04             	sub    $0x4,%esp
f0127be0:	68 40 bc 13 f0       	push   $0xf013bc40
f0127be5:	68 90 0a 00 00       	push   $0xa90
f0127bea:	68 5a b4 13 f0       	push   $0xf013b45a
f0127bef:	e8 11 86 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0127bf4:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0127bfa:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0127bfd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127c04:	eb 1e                	jmp    f0127c24 <test_kfreeall+0xe89>
		{
			sums[7] += ptr[i] ;
f0127c06:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0127c0c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127c0f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127c12:	01 c8                	add    %ecx,%eax
f0127c14:	8a 00                	mov    (%eax),%al
f0127c16:	0f be c0             	movsbl %al,%eax
f0127c19:	01 d0                	add    %edx,%eax
f0127c1b:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0127c21:	ff 45 f4             	incl   -0xc(%ebp)
f0127c24:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127c2a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127c2d:	7f d7                	jg     f0127c06 <test_kfreeall+0xe6b>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0127c2f:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0127c35:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0127c3b:	89 d0                	mov    %edx,%eax
f0127c3d:	01 c0                	add    %eax,%eax
f0127c3f:	01 d0                	add    %edx,%eax
f0127c41:	01 c0                	add    %eax,%eax
f0127c43:	01 d0                	add    %edx,%eax
f0127c45:	39 c1                	cmp    %eax,%ecx
f0127c47:	74 17                	je     f0127c60 <test_kfreeall+0xec5>
f0127c49:	83 ec 04             	sub    $0x4,%esp
f0127c4c:	68 40 bc 13 f0       	push   $0xf013bc40
f0127c51:	68 98 0a 00 00       	push   $0xa98
f0127c56:	68 5a b4 13 f0       	push   $0xf013b45a
f0127c5b:	e8 a5 85 fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0127c60:	e8 f4 53 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0127c65:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127c68:	e8 76 c1 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0127c6d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0127c70:	83 ec 0c             	sub    $0xc,%esp
f0127c73:	68 00 50 00 00       	push   $0x5000
f0127c78:	e8 b3 fd fd ff       	call   f0107a30 <kmalloc>
f0127c7d:	83 c4 10             	add    $0x10,%esp
f0127c80:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127c86:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127c8c:	89 c1                	mov    %eax,%ecx
f0127c8e:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0127c95:	10 00 00 
f0127c98:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0127c9e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127ca3:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0127ca9:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0127caf:	ba 00 00 00 00       	mov    $0x0,%edx
f0127cb4:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0127cba:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0127cc0:	29 d0                	sub    %edx,%eax
f0127cc2:	89 c3                	mov    %eax,%ebx
f0127cc4:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0127ccb:	10 00 00 
f0127cce:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0127cd3:	0f b6 d0             	movzbl %al,%edx
f0127cd6:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0127cdc:	01 d0                	add    %edx,%eax
f0127cde:	48                   	dec    %eax
f0127cdf:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0127ce5:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0127ceb:	ba 00 00 00 00       	mov    $0x0,%edx
f0127cf0:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0127cf6:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0127cfc:	29 d0                	sub    %edx,%eax
f0127cfe:	01 c3                	add    %eax,%ebx
f0127d00:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0127d07:	10 00 00 
f0127d0a:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0127d0f:	0f b6 c0             	movzbl %al,%eax
f0127d12:	c1 e0 04             	shl    $0x4,%eax
f0127d15:	89 c2                	mov    %eax,%edx
f0127d17:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0127d1d:	01 d0                	add    %edx,%eax
f0127d1f:	48                   	dec    %eax
f0127d20:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0127d26:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0127d2c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127d31:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0127d37:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0127d3d:	29 d0                	sub    %edx,%eax
f0127d3f:	01 d8                	add    %ebx,%eax
f0127d41:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0127d46:	39 c1                	cmp    %eax,%ecx
f0127d48:	74 17                	je     f0127d61 <test_kfreeall+0xfc6>
f0127d4a:	83 ec 04             	sub    $0x4,%esp
f0127d4d:	68 40 b5 13 f0       	push   $0xf013b540
f0127d52:	68 a1 0a 00 00       	push   $0xaa1
f0127d57:	68 5a b4 13 f0       	push   $0xf013b45a
f0127d5c:	e8 a4 84 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127d61:	e8 7d c0 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0127d66:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127d69:	74 17                	je     f0127d82 <test_kfreeall+0xfe7>
f0127d6b:	83 ec 04             	sub    $0x4,%esp
f0127d6e:	68 74 b4 13 f0       	push   $0xf013b474
f0127d73:	68 a2 0a 00 00       	push   $0xaa2
f0127d78:	68 5a b4 13 f0       	push   $0xf013b45a
f0127d7d:	e8 83 84 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127d82:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127d85:	e8 cf 52 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0127d8a:	29 c3                	sub    %eax,%ebx
f0127d8c:	89 d8                	mov    %ebx,%eax
f0127d8e:	83 f8 05             	cmp    $0x5,%eax
f0127d91:	74 17                	je     f0127daa <test_kfreeall+0x100f>
f0127d93:	83 ec 04             	sub    $0x4,%esp
f0127d96:	68 dc b4 13 f0       	push   $0xf013b4dc
f0127d9b:	68 a3 0a 00 00       	push   $0xaa3
f0127da0:	68 5a b4 13 f0       	push   $0xf013b45a
f0127da5:	e8 5b 84 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0127daa:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f0127db1:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0127db4:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127dba:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0127dbd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127dc4:	eb 0e                	jmp    f0127dd4 <test_kfreeall+0x1039>
		{
			ptr[i] = 8 ;
f0127dc6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127dc9:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127dcc:	01 d0                	add    %edx,%eax
f0127dce:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0127dd1:	ff 45 f4             	incl   -0xc(%ebp)
f0127dd4:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0127dda:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127ddd:	7f e7                	jg     f0127dc6 <test_kfreeall+0x102b>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0127ddf:	e8 75 52 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0127de4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127de7:	e8 f7 bf fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0127dec:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0127def:	83 ec 0c             	sub    $0xc,%esp
f0127df2:	68 00 00 10 00       	push   $0x100000
f0127df7:	e8 34 fc fd ff       	call   f0107a30 <kmalloc>
f0127dfc:	83 c4 10             	add    $0x10,%esp
f0127dff:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127e05:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127e0b:	89 c1                	mov    %eax,%ecx
f0127e0d:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0127e14:	10 00 00 
f0127e17:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0127e1d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127e22:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0127e28:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127e2e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e33:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0127e39:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127e3f:	29 d0                	sub    %edx,%eax
f0127e41:	89 c3                	mov    %eax,%ebx
f0127e43:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0127e4a:	10 00 00 
f0127e4d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0127e52:	0f b6 d0             	movzbl %al,%edx
f0127e55:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0127e5b:	01 d0                	add    %edx,%eax
f0127e5d:	48                   	dec    %eax
f0127e5e:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0127e64:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0127e6a:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e6f:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0127e75:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0127e7b:	29 d0                	sub    %edx,%eax
f0127e7d:	01 c3                	add    %eax,%ebx
f0127e7f:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0127e86:	10 00 00 
f0127e89:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0127e8e:	0f b6 c0             	movzbl %al,%eax
f0127e91:	c1 e0 04             	shl    $0x4,%eax
f0127e94:	89 c2                	mov    %eax,%edx
f0127e96:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0127e9c:	01 d0                	add    %edx,%eax
f0127e9e:	48                   	dec    %eax
f0127e9f:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0127ea5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127eab:	ba 00 00 00 00       	mov    $0x0,%edx
f0127eb0:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0127eb6:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127ebc:	29 d0                	sub    %edx,%eax
f0127ebe:	01 d8                	add    %ebx,%eax
f0127ec0:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0127ec5:	39 c1                	cmp    %eax,%ecx
f0127ec7:	74 17                	je     f0127ee0 <test_kfreeall+0x1145>
f0127ec9:	83 ec 04             	sub    $0x4,%esp
f0127ecc:	68 40 b5 13 f0       	push   $0xf013b540
f0127ed1:	68 af 0a 00 00       	push   $0xaaf
f0127ed6:	68 5a b4 13 f0       	push   $0xf013b45a
f0127edb:	e8 25 83 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127ee0:	e8 fe be fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0127ee5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127ee8:	74 17                	je     f0127f01 <test_kfreeall+0x1166>
f0127eea:	83 ec 04             	sub    $0x4,%esp
f0127eed:	68 74 b4 13 f0       	push   $0xf013b474
f0127ef2:	68 b0 0a 00 00       	push   $0xab0
f0127ef7:	68 5a b4 13 f0       	push   $0xf013b45a
f0127efc:	e8 04 83 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127f01:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127f04:	e8 50 51 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0127f09:	29 c3                	sub    %eax,%ebx
f0127f0b:	89 d8                	mov    %ebx,%eax
f0127f0d:	3d 00 01 00 00       	cmp    $0x100,%eax
f0127f12:	74 17                	je     f0127f2b <test_kfreeall+0x1190>
f0127f14:	83 ec 04             	sub    $0x4,%esp
f0127f17:	68 dc b4 13 f0       	push   $0xf013b4dc
f0127f1c:	68 b1 0a 00 00       	push   $0xab1
f0127f21:	68 5a b4 13 f0       	push   $0xf013b45a
f0127f26:	e8 da 82 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0127f2b:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f0127f32:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0127f35:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127f3b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0127f3e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127f45:	eb 0e                	jmp    f0127f55 <test_kfreeall+0x11ba>
		{
			ptr[i] = 9 ;
f0127f47:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127f4a:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127f4d:	01 d0                	add    %edx,%eax
f0127f4f:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0127f52:	ff 45 f4             	incl   -0xc(%ebp)
f0127f55:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0127f5b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127f5e:	7f e7                	jg     f0127f47 <test_kfreeall+0x11ac>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f0127f60:	e8 f4 50 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0127f65:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127f68:	e8 76 be fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0127f6d:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f0127f70:	e8 f8 fc fd ff       	call   f0107c6d <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127f75:	e8 69 be fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0127f7a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127f7d:	74 17                	je     f0127f96 <test_kfreeall+0x11fb>
f0127f7f:	83 ec 04             	sub    $0x4,%esp
f0127f82:	68 74 b4 13 f0       	push   $0xf013b474
f0127f87:	68 c1 0a 00 00       	push   $0xac1
f0127f8c:	68 5a b4 13 f0       	push   $0xf013b45a
f0127f91:	e8 6f 82 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0127f96:	e8 be 50 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0127f9b:	89 c2                	mov    %eax,%edx
f0127f9d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127fa0:	89 d1                	mov    %edx,%ecx
f0127fa2:	29 c1                	sub    %eax,%ecx
f0127fa4:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0127fab:	10 00 00 
f0127fae:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0127fb4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127fb9:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0127fbf:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127fc5:	ba 00 00 00 00       	mov    $0x0,%edx
f0127fca:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0127fd0:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127fd6:	29 d0                	sub    %edx,%eax
f0127fd8:	89 c3                	mov    %eax,%ebx
f0127fda:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0127fe1:	10 00 00 
f0127fe4:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0127fe9:	0f b6 d0             	movzbl %al,%edx
f0127fec:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0127ff2:	01 d0                	add    %edx,%eax
f0127ff4:	48                   	dec    %eax
f0127ff5:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0127ffb:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0128001:	ba 00 00 00 00       	mov    $0x0,%edx
f0128006:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012800c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0128012:	29 d0                	sub    %edx,%eax
f0128014:	01 c3                	add    %eax,%ebx
f0128016:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012801d:	10 00 00 
f0128020:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0128025:	0f b6 c0             	movzbl %al,%eax
f0128028:	c1 e0 04             	shl    $0x4,%eax
f012802b:	89 c2                	mov    %eax,%edx
f012802d:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0128033:	01 d0                	add    %edx,%eax
f0128035:	48                   	dec    %eax
f0128036:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012803c:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0128042:	ba 00 00 00 00       	mov    $0x0,%edx
f0128047:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012804d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0128053:	29 d0                	sub    %edx,%eax
f0128055:	01 d8                	add    %ebx,%eax
f0128057:	05 00 40 00 00       	add    $0x4000,%eax
f012805c:	c1 e8 0c             	shr    $0xc,%eax
f012805f:	05 0d 04 00 00       	add    $0x40d,%eax
f0128064:	39 c1                	cmp    %eax,%ecx
f0128066:	74 17                	je     f012807f <test_kfreeall+0x12e4>
f0128068:	83 ec 04             	sub    $0x4,%esp
f012806b:	68 e4 bb 13 f0       	push   $0xf013bbe4
f0128070:	68 c2 0a 00 00       	push   $0xac2
f0128075:	68 5a b4 13 f0       	push   $0xf013b45a
f012807a:	e8 86 81 fd ff       	call   f0100205 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012807f:	83 ec 0c             	sub    $0xc,%esp
f0128082:	6a 03                	push   $0x3
f0128084:	e8 70 54 fe ff       	call   f010d4f9 <sys_bypassPageFault>
f0128089:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f012808c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128093:	e9 82 00 00 00       	jmp    f012811a <test_kfreeall+0x137f>
		{
			ptr = (char *) ptr_allocations[i];
f0128098:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012809b:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f01280a2:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f01280a5:	8b 45 80             	mov    -0x80(%ebp),%eax
f01280a8:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01280ab:	e8 37 54 fe ff       	call   f010d4e7 <sys_rcr2>
f01280b0:	89 c2                	mov    %eax,%edx
f01280b2:	8b 45 80             	mov    -0x80(%ebp),%eax
f01280b5:	39 c2                	cmp    %eax,%edx
f01280b7:	74 17                	je     f01280d0 <test_kfreeall+0x1335>
f01280b9:	83 ec 04             	sub    $0x4,%esp
f01280bc:	68 c0 bc 13 f0       	push   $0xf013bcc0
f01280c1:	68 d0 0a 00 00       	push   $0xad0
f01280c6:	68 5a b4 13 f0       	push   $0xf013b45a
f01280cb:	e8 35 81 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f01280d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01280d3:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f01280da:	89 c2                	mov    %eax,%edx
f01280dc:	8b 45 80             	mov    -0x80(%ebp),%eax
f01280df:	01 d0                	add    %edx,%eax
f01280e1:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01280e4:	e8 fe 53 fe ff       	call   f010d4e7 <sys_rcr2>
f01280e9:	89 c2                	mov    %eax,%edx
f01280eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01280ee:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f01280f5:	89 c1                	mov    %eax,%ecx
f01280f7:	8b 45 80             	mov    -0x80(%ebp),%eax
f01280fa:	01 c8                	add    %ecx,%eax
f01280fc:	39 c2                	cmp    %eax,%edx
f01280fe:	74 17                	je     f0128117 <test_kfreeall+0x137c>
f0128100:	83 ec 04             	sub    $0x4,%esp
f0128103:	68 c0 bc 13 f0       	push   $0xf013bcc0
f0128108:	68 d2 0a 00 00       	push   $0xad2
f012810d:	68 5a b4 13 f0       	push   $0xf013b45a
f0128112:	e8 ee 80 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0128117:	ff 45 f4             	incl   -0xc(%ebp)
f012811a:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f012811e:	0f 8e 74 ff ff ff    	jle    f0128098 <test_kfreeall+0x12fd>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0128124:	83 ec 0c             	sub    $0xc,%esp
f0128127:	6a 00                	push   $0x0
f0128129:	e8 cb 53 fe ff       	call   f010d4f9 <sys_bypassPageFault>
f012812e:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0128131:	e8 23 4f fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128136:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128139:	e8 a5 bc fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012813e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f0128141:	83 ec 0c             	sub    $0xc,%esp
f0128144:	68 00 00 40 00       	push   $0x400000
f0128149:	e8 e2 f8 fd ff       	call   f0107a30 <kmalloc>
f012814e:	83 c4 10             	add    $0x10,%esp
f0128151:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0128157:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012815d:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f0128162:	74 17                	je     f012817b <test_kfreeall+0x13e0>
f0128164:	83 ec 04             	sub    $0x4,%esp
f0128167:	68 64 c1 13 f0       	push   $0xf013c164
f012816c:	68 de 0a 00 00       	push   $0xade
f0128171:	68 5a b4 13 f0       	push   $0xf013b45a
f0128176:	e8 8a 80 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012817b:	e8 63 bc fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0128180:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0128183:	74 17                	je     f012819c <test_kfreeall+0x1401>
f0128185:	83 ec 04             	sub    $0x4,%esp
f0128188:	68 74 b4 13 f0       	push   $0xf013b474
f012818d:	68 df 0a 00 00       	push   $0xadf
f0128192:	68 5a b4 13 f0       	push   $0xf013b45a
f0128197:	e8 69 80 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f012819c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012819f:	e8 b5 4e fe ff       	call   f010d059 <sys_calculate_free_frames>
f01281a4:	29 c3                	sub    %eax,%ebx
f01281a6:	89 d8                	mov    %ebx,%eax
f01281a8:	3d 00 04 00 00       	cmp    $0x400,%eax
f01281ad:	74 17                	je     f01281c6 <test_kfreeall+0x142b>
f01281af:	83 ec 04             	sub    $0x4,%esp
f01281b2:	68 dc b4 13 f0       	push   $0xf013b4dc
f01281b7:	68 e0 0a 00 00       	push   $0xae0
f01281bc:	68 5a b4 13 f0       	push   $0xf013b45a
f01281c1:	e8 3f 80 fd ff       	call   f0100205 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f01281c6:	e8 8e 4e fe ff       	call   f010d059 <sys_calculate_free_frames>
f01281cb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01281ce:	e8 10 bc fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01281d3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f01281d6:	83 ec 0c             	sub    $0xc,%esp
f01281d9:	68 00 30 00 00       	push   $0x3000
f01281de:	e8 4d f8 fd ff       	call   f0107a30 <kmalloc>
f01281e3:	83 c4 10             	add    $0x10,%esp
f01281e6:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f01281ec:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01281f2:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f01281f7:	74 17                	je     f0128210 <test_kfreeall+0x1475>
f01281f9:	83 ec 04             	sub    $0x4,%esp
f01281fc:	68 64 c1 13 f0       	push   $0xf013c164
f0128201:	68 e6 0a 00 00       	push   $0xae6
f0128206:	68 5a b4 13 f0       	push   $0xf013b45a
f012820b:	e8 f5 7f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128210:	e8 ce bb fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0128215:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0128218:	74 17                	je     f0128231 <test_kfreeall+0x1496>
f012821a:	83 ec 04             	sub    $0x4,%esp
f012821d:	68 74 b4 13 f0       	push   $0xf013b474
f0128222:	68 e7 0a 00 00       	push   $0xae7
f0128227:	68 5a b4 13 f0       	push   $0xf013b45a
f012822c:	e8 d4 7f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128231:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0128234:	e8 20 4e fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128239:	29 c3                	sub    %eax,%ebx
f012823b:	89 d8                	mov    %ebx,%eax
f012823d:	83 f8 03             	cmp    $0x3,%eax
f0128240:	74 17                	je     f0128259 <test_kfreeall+0x14be>
f0128242:	83 ec 04             	sub    $0x4,%esp
f0128245:	68 dc b4 13 f0       	push   $0xf013b4dc
f012824a:	68 e8 0a 00 00       	push   $0xae8
f012824f:	68 5a b4 13 f0       	push   $0xf013b45a
f0128254:	e8 ac 7f fd ff       	call   f0100205 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f0128259:	e8 fb 4d fe ff       	call   f010d059 <sys_calculate_free_frames>
f012825e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128261:	e8 7d bb fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0128266:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f0128269:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012826f:	83 ec 0c             	sub    $0xc,%esp
f0128272:	50                   	push   %eax
f0128273:	e8 a1 f8 fd ff       	call   f0107b19 <kfree>
f0128278:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012827b:	e8 63 bb fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0128280:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0128283:	74 17                	je     f012829c <test_kfreeall+0x1501>
f0128285:	83 ec 04             	sub    $0x4,%esp
f0128288:	68 74 b4 13 f0       	push   $0xf013b474
f012828d:	68 f2 0a 00 00       	push   $0xaf2
f0128292:	68 5a b4 13 f0       	push   $0xf013b45a
f0128297:	e8 69 7f fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012829c:	e8 b8 4d fe ff       	call   f010d059 <sys_calculate_free_frames>
f01282a1:	89 c2                	mov    %eax,%edx
f01282a3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01282a6:	29 c2                	sub    %eax,%edx
f01282a8:	89 d0                	mov    %edx,%eax
f01282aa:	83 f8 03             	cmp    $0x3,%eax
f01282ad:	74 17                	je     f01282c6 <test_kfreeall+0x152b>
f01282af:	83 ec 04             	sub    $0x4,%esp
f01282b2:	68 0c bd 13 f0       	push   $0xf013bd0c
f01282b7:	68 f3 0a 00 00       	push   $0xaf3
f01282bc:	68 5a b4 13 f0       	push   $0xf013b45a
f01282c1:	e8 3f 7f fd ff       	call   f0100205 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01282c6:	e8 8e 4d fe ff       	call   f010d059 <sys_calculate_free_frames>
f01282cb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01282ce:	e8 10 bb fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01282d3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f01282d6:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01282dc:	83 ec 0c             	sub    $0xc,%esp
f01282df:	50                   	push   %eax
f01282e0:	e8 34 f8 fd ff       	call   f0107b19 <kfree>
f01282e5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01282e8:	e8 f6 ba fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01282ed:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01282f0:	74 17                	je     f0128309 <test_kfreeall+0x156e>
f01282f2:	83 ec 04             	sub    $0x4,%esp
f01282f5:	68 74 b4 13 f0       	push   $0xf013b474
f01282fa:	68 fc 0a 00 00       	push   $0xafc
f01282ff:	68 5a b4 13 f0       	push   $0xf013b45a
f0128304:	e8 fc 7e fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0128309:	e8 4b 4d fe ff       	call   f010d059 <sys_calculate_free_frames>
f012830e:	89 c2                	mov    %eax,%edx
f0128310:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128313:	39 c2                	cmp    %eax,%edx
f0128315:	74 17                	je     f012832e <test_kfreeall+0x1593>
f0128317:	83 ec 04             	sub    $0x4,%esp
f012831a:	68 0c bd 13 f0       	push   $0xf013bd0c
f012831f:	68 fd 0a 00 00       	push   $0xafd
f0128324:	68 5a b4 13 f0       	push   $0xf013b45a
f0128329:	e8 d7 7e fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012832e:	e8 26 4d fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128333:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128336:	e8 a8 ba fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012833b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f012833e:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0128344:	83 ec 0c             	sub    $0xc,%esp
f0128347:	50                   	push   %eax
f0128348:	e8 cc f7 fd ff       	call   f0107b19 <kfree>
f012834d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128350:	e8 8e ba fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0128355:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0128358:	74 17                	je     f0128371 <test_kfreeall+0x15d6>
f012835a:	83 ec 04             	sub    $0x4,%esp
f012835d:	68 74 b4 13 f0       	push   $0xf013b474
f0128362:	68 03 0b 00 00       	push   $0xb03
f0128367:	68 5a b4 13 f0       	push   $0xf013b45a
f012836c:	e8 94 7e fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0128371:	e8 e3 4c fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128376:	89 c2                	mov    %eax,%edx
f0128378:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012837b:	39 c2                	cmp    %eax,%edx
f012837d:	74 17                	je     f0128396 <test_kfreeall+0x15fb>
f012837f:	83 ec 04             	sub    $0x4,%esp
f0128382:	68 0c bd 13 f0       	push   $0xf013bd0c
f0128387:	68 04 0b 00 00       	push   $0xb04
f012838c:	68 5a b4 13 f0       	push   $0xf013b45a
f0128391:	e8 6f 7e fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0128396:	e8 be 4c fe ff       	call   f010d059 <sys_calculate_free_frames>
f012839b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012839e:	e8 40 ba fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01283a3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01283a6:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01283ac:	83 ec 0c             	sub    $0xc,%esp
f01283af:	50                   	push   %eax
f01283b0:	e8 64 f7 fd ff       	call   f0107b19 <kfree>
f01283b5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01283b8:	e8 26 ba fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01283bd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01283c0:	74 17                	je     f01283d9 <test_kfreeall+0x163e>
f01283c2:	83 ec 04             	sub    $0x4,%esp
f01283c5:	68 74 b4 13 f0       	push   $0xf013b474
f01283ca:	68 0a 0b 00 00       	push   $0xb0a
f01283cf:	68 5a b4 13 f0       	push   $0xf013b45a
f01283d4:	e8 2c 7e fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01283d9:	e8 7b 4c fe ff       	call   f010d059 <sys_calculate_free_frames>
f01283de:	89 c2                	mov    %eax,%edx
f01283e0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01283e3:	39 c2                	cmp    %eax,%edx
f01283e5:	74 17                	je     f01283fe <test_kfreeall+0x1663>
f01283e7:	83 ec 04             	sub    $0x4,%esp
f01283ea:	68 0c bd 13 f0       	push   $0xf013bd0c
f01283ef:	68 0b 0b 00 00       	push   $0xb0b
f01283f4:	68 5a b4 13 f0       	push   $0xf013b45a
f01283f9:	e8 07 7e fd ff       	call   f0100205 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01283fe:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0128405:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012840c:	eb 48                	jmp    f0128456 <test_kfreeall+0x16bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f012840e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0128411:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0128416:	83 ec 04             	sub    $0x4,%esp
f0128419:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f012841f:	51                   	push   %ecx
f0128420:	52                   	push   %edx
f0128421:	50                   	push   %eax
f0128422:	e8 a5 e6 fd ff       	call   f0106acc <get_page_table>
f0128427:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012842a:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0128430:	85 c0                	test   %eax,%eax
f0128432:	75 17                	jne    f012844b <test_kfreeall+0x16b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0128434:	83 ec 04             	sub    $0x4,%esp
f0128437:	68 5c bd 13 f0       	push   $0xf013bd5c
f012843c:	68 18 0b 00 00       	push   $0xb18
f0128441:	68 5a b4 13 f0       	push   $0xf013b45a
f0128446:	e8 ba 7d fd ff       	call   f0100205 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012844b:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0128452:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0128456:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012845a:	78 b2                	js     f012840e <test_kfreeall+0x1673>
f012845c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0128460:	7f 09                	jg     f012846b <test_kfreeall+0x16d0>
f0128462:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0128469:	76 a3                	jbe    f012840e <test_kfreeall+0x1673>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f012846b:	83 ec 0c             	sub    $0xc,%esp
f012846e:	68 b8 c1 13 f0       	push   $0xf013c1b8
f0128473:	e8 96 88 fd ff       	call   f0100d0e <cprintf>
f0128478:	83 c4 10             	add    $0x10,%esp

	return 1;
f012847b:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0128480:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0128483:	5b                   	pop    %ebx
f0128484:	5f                   	pop    %edi
f0128485:	5d                   	pop    %ebp
f0128486:	c3                   	ret    

f0128487 <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f0128487:	55                   	push   %ebp
f0128488:	89 e5                	mov    %esp,%ebp
f012848a:	57                   	push   %edi
f012848b:	53                   	push   %ebx
f012848c:	81 ec 90 01 00 00    	sub    $0x190,%esp
	char minByte = 1<<7;
f0128492:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0128496:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f012849a:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f01284a0:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f01284a6:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f01284ad:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01284b4:	e8 a0 4b fe ff       	call   f010d059 <sys_calculate_free_frames>
f01284b9:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01284bc:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f01284c2:	b9 14 00 00 00       	mov    $0x14,%ecx
f01284c7:	b8 00 00 00 00       	mov    $0x0,%eax
f01284cc:	89 d7                	mov    %edx,%edi
f01284ce:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f01284d0:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f01284d6:	b9 14 00 00 00       	mov    $0x14,%ecx
f01284db:	b8 00 00 00 00       	mov    $0x0,%eax
f01284e0:	89 d7                	mov    %edx,%edi
f01284e2:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01284e4:	e8 70 4b fe ff       	call   f010d059 <sys_calculate_free_frames>
f01284e9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01284ec:	e8 f2 b8 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01284f1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01284f4:	83 ec 0c             	sub    $0xc,%esp
f01284f7:	68 00 fc 1f 00       	push   $0x1ffc00
f01284fc:	e8 2f f5 fd ff       	call   f0107a30 <kmalloc>
f0128501:	83 c4 10             	add    $0x10,%esp
f0128504:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012850a:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128510:	89 c1                	mov    %eax,%ecx
f0128512:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0128519:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012851c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128521:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0128524:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128527:	ba 00 00 00 00       	mov    $0x0,%edx
f012852c:	f7 75 d4             	divl   -0x2c(%ebp)
f012852f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128532:	29 d0                	sub    %edx,%eax
f0128534:	89 c3                	mov    %eax,%ebx
f0128536:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f012853d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0128542:	0f b6 d0             	movzbl %al,%edx
f0128545:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0128548:	01 d0                	add    %edx,%eax
f012854a:	48                   	dec    %eax
f012854b:	89 45 c8             	mov    %eax,-0x38(%ebp)
f012854e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128551:	ba 00 00 00 00       	mov    $0x0,%edx
f0128556:	f7 75 cc             	divl   -0x34(%ebp)
f0128559:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012855c:	29 d0                	sub    %edx,%eax
f012855e:	01 c3                	add    %eax,%ebx
f0128560:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0128567:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012856c:	0f b6 c0             	movzbl %al,%eax
f012856f:	c1 e0 04             	shl    $0x4,%eax
f0128572:	89 c2                	mov    %eax,%edx
f0128574:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0128577:	01 d0                	add    %edx,%eax
f0128579:	48                   	dec    %eax
f012857a:	89 45 c0             	mov    %eax,-0x40(%ebp)
f012857d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128580:	ba 00 00 00 00       	mov    $0x0,%edx
f0128585:	f7 75 c4             	divl   -0x3c(%ebp)
f0128588:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012858b:	29 d0                	sub    %edx,%eax
f012858d:	01 d8                	add    %ebx,%eax
f012858f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0128594:	39 c1                	cmp    %eax,%ecx
f0128596:	74 17                	je     f01285af <test_kexpand+0x128>
f0128598:	83 ec 04             	sub    $0x4,%esp
f012859b:	68 40 b5 13 f0       	push   $0xf013b540
f01285a0:	68 43 0b 00 00       	push   $0xb43
f01285a5:	68 5a b4 13 f0       	push   $0xf013b45a
f01285aa:	e8 56 7c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01285af:	e8 2f b8 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01285b4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01285b7:	74 17                	je     f01285d0 <test_kexpand+0x149>
f01285b9:	83 ec 04             	sub    $0x4,%esp
f01285bc:	68 74 b4 13 f0       	push   $0xf013b474
f01285c1:	68 44 0b 00 00       	push   $0xb44
f01285c6:	68 5a b4 13 f0       	push   $0xf013b45a
f01285cb:	e8 35 7c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01285d0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01285d3:	e8 81 4a fe ff       	call   f010d059 <sys_calculate_free_frames>
f01285d8:	29 c3                	sub    %eax,%ebx
f01285da:	89 d8                	mov    %ebx,%eax
f01285dc:	3d 00 02 00 00       	cmp    $0x200,%eax
f01285e1:	74 17                	je     f01285fa <test_kexpand+0x173>
f01285e3:	83 ec 04             	sub    $0x4,%esp
f01285e6:	68 dc b4 13 f0       	push   $0xf013b4dc
f01285eb:	68 45 0b 00 00       	push   $0xb45
f01285f0:	68 5a b4 13 f0       	push   $0xf013b45a
f01285f5:	e8 0b 7c fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01285fa:	c7 85 bc fe ff ff ff 	movl   $0x1ffbff,-0x144(%ebp)
f0128601:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128604:	e8 50 4a fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128609:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012860c:	e8 d2 b7 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0128611:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0128614:	83 ec 0c             	sub    $0xc,%esp
f0128617:	68 00 fc 1f 00       	push   $0x1ffc00
f012861c:	e8 0f f4 fd ff       	call   f0107a30 <kmalloc>
f0128621:	83 c4 10             	add    $0x10,%esp
f0128624:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012862a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0128630:	89 c1                	mov    %eax,%ecx
f0128632:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0128639:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012863c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128641:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0128644:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128647:	ba 00 00 00 00       	mov    $0x0,%edx
f012864c:	f7 75 bc             	divl   -0x44(%ebp)
f012864f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128652:	29 d0                	sub    %edx,%eax
f0128654:	89 c3                	mov    %eax,%ebx
f0128656:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012865d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0128662:	0f b6 d0             	movzbl %al,%edx
f0128665:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0128668:	01 d0                	add    %edx,%eax
f012866a:	48                   	dec    %eax
f012866b:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012866e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128671:	ba 00 00 00 00       	mov    $0x0,%edx
f0128676:	f7 75 b4             	divl   -0x4c(%ebp)
f0128679:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012867c:	29 d0                	sub    %edx,%eax
f012867e:	01 c3                	add    %eax,%ebx
f0128680:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0128687:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012868c:	0f b6 c0             	movzbl %al,%eax
f012868f:	c1 e0 04             	shl    $0x4,%eax
f0128692:	89 c2                	mov    %eax,%edx
f0128694:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0128697:	01 d0                	add    %edx,%eax
f0128699:	48                   	dec    %eax
f012869a:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012869d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01286a0:	ba 00 00 00 00       	mov    $0x0,%edx
f01286a5:	f7 75 ac             	divl   -0x54(%ebp)
f01286a8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01286ab:	29 d0                	sub    %edx,%eax
f01286ad:	01 d8                	add    %ebx,%eax
f01286af:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01286b4:	39 c1                	cmp    %eax,%ecx
f01286b6:	74 17                	je     f01286cf <test_kexpand+0x248>
f01286b8:	83 ec 04             	sub    $0x4,%esp
f01286bb:	68 40 b5 13 f0       	push   $0xf013b540
f01286c0:	68 4c 0b 00 00       	push   $0xb4c
f01286c5:	68 5a b4 13 f0       	push   $0xf013b45a
f01286ca:	e8 36 7b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01286cf:	e8 0f b7 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01286d4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01286d7:	74 17                	je     f01286f0 <test_kexpand+0x269>
f01286d9:	83 ec 04             	sub    $0x4,%esp
f01286dc:	68 74 b4 13 f0       	push   $0xf013b474
f01286e1:	68 4d 0b 00 00       	push   $0xb4d
f01286e6:	68 5a b4 13 f0       	push   $0xf013b45a
f01286eb:	e8 15 7b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01286f0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01286f3:	e8 61 49 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01286f8:	29 c3                	sub    %eax,%ebx
f01286fa:	89 d8                	mov    %ebx,%eax
f01286fc:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128701:	74 17                	je     f012871a <test_kexpand+0x293>
f0128703:	83 ec 04             	sub    $0x4,%esp
f0128706:	68 dc b4 13 f0       	push   $0xf013b4dc
f012870b:	68 4e 0b 00 00       	push   $0xb4e
f0128710:	68 5a b4 13 f0       	push   $0xf013b45a
f0128715:	e8 eb 7a fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012871a:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f0128721:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128724:	e8 30 49 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128729:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012872c:	e8 b2 b6 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0128731:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0128734:	83 ec 0c             	sub    $0xc,%esp
f0128737:	68 00 08 00 00       	push   $0x800
f012873c:	e8 ef f2 fd ff       	call   f0107a30 <kmalloc>
f0128741:	83 c4 10             	add    $0x10,%esp
f0128744:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012874a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0128750:	89 c1                	mov    %eax,%ecx
f0128752:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0128759:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012875c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128761:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0128764:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128767:	ba 00 00 00 00       	mov    $0x0,%edx
f012876c:	f7 75 a4             	divl   -0x5c(%ebp)
f012876f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128772:	29 d0                	sub    %edx,%eax
f0128774:	89 c3                	mov    %eax,%ebx
f0128776:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012877d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0128782:	0f b6 d0             	movzbl %al,%edx
f0128785:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128788:	01 d0                	add    %edx,%eax
f012878a:	48                   	dec    %eax
f012878b:	89 45 98             	mov    %eax,-0x68(%ebp)
f012878e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128791:	ba 00 00 00 00       	mov    $0x0,%edx
f0128796:	f7 75 9c             	divl   -0x64(%ebp)
f0128799:	8b 45 98             	mov    -0x68(%ebp),%eax
f012879c:	29 d0                	sub    %edx,%eax
f012879e:	01 c3                	add    %eax,%ebx
f01287a0:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01287a7:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01287ac:	0f b6 c0             	movzbl %al,%eax
f01287af:	c1 e0 04             	shl    $0x4,%eax
f01287b2:	89 c2                	mov    %eax,%edx
f01287b4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01287b7:	01 d0                	add    %edx,%eax
f01287b9:	48                   	dec    %eax
f01287ba:	89 45 90             	mov    %eax,-0x70(%ebp)
f01287bd:	8b 45 90             	mov    -0x70(%ebp),%eax
f01287c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01287c5:	f7 75 94             	divl   -0x6c(%ebp)
f01287c8:	8b 45 90             	mov    -0x70(%ebp),%eax
f01287cb:	29 d0                	sub    %edx,%eax
f01287cd:	01 d8                	add    %ebx,%eax
f01287cf:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01287d4:	39 c1                	cmp    %eax,%ecx
f01287d6:	74 17                	je     f01287ef <test_kexpand+0x368>
f01287d8:	83 ec 04             	sub    $0x4,%esp
f01287db:	68 40 b5 13 f0       	push   $0xf013b540
f01287e0:	68 55 0b 00 00       	push   $0xb55
f01287e5:	68 5a b4 13 f0       	push   $0xf013b45a
f01287ea:	e8 16 7a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01287ef:	e8 ef b5 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01287f4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01287f7:	74 17                	je     f0128810 <test_kexpand+0x389>
f01287f9:	83 ec 04             	sub    $0x4,%esp
f01287fc:	68 74 b4 13 f0       	push   $0xf013b474
f0128801:	68 56 0b 00 00       	push   $0xb56
f0128806:	68 5a b4 13 f0       	push   $0xf013b45a
f012880b:	e8 f5 79 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128810:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128813:	e8 41 48 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128818:	29 c3                	sub    %eax,%ebx
f012881a:	89 d8                	mov    %ebx,%eax
f012881c:	83 f8 01             	cmp    $0x1,%eax
f012881f:	74 17                	je     f0128838 <test_kexpand+0x3b1>
f0128821:	83 ec 04             	sub    $0x4,%esp
f0128824:	68 dc b4 13 f0       	push   $0xf013b4dc
f0128829:	68 57 0b 00 00       	push   $0xb57
f012882e:	68 5a b4 13 f0       	push   $0xf013b45a
f0128833:	e8 cd 79 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0128838:	c7 85 c4 fe ff ff ff 	movl   $0x7ff,-0x13c(%ebp)
f012883f:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0128842:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0128848:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012884b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128852:	eb 0e                	jmp    f0128862 <test_kexpand+0x3db>
		{
			ptr[i] = 2 ;
f0128854:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128857:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012885a:	01 d0                	add    %edx,%eax
f012885c:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012885f:	ff 45 f4             	incl   -0xc(%ebp)
f0128862:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0128868:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012886b:	7f e7                	jg     f0128854 <test_kexpand+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012886d:	e8 e7 47 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128872:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128875:	e8 69 b5 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012887a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012887d:	83 ec 0c             	sub    $0xc,%esp
f0128880:	68 00 08 00 00       	push   $0x800
f0128885:	e8 a6 f1 fd ff       	call   f0107a30 <kmalloc>
f012888a:	83 c4 10             	add    $0x10,%esp
f012888d:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128893:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0128899:	89 c1                	mov    %eax,%ecx
f012889b:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01288a2:	8b 45 88             	mov    -0x78(%ebp),%eax
f01288a5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01288aa:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01288ad:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01288b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01288b5:	f7 75 88             	divl   -0x78(%ebp)
f01288b8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01288bb:	29 d0                	sub    %edx,%eax
f01288bd:	89 c3                	mov    %eax,%ebx
f01288bf:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01288c6:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01288cb:	0f b6 d0             	movzbl %al,%edx
f01288ce:	8b 45 80             	mov    -0x80(%ebp),%eax
f01288d1:	01 d0                	add    %edx,%eax
f01288d3:	48                   	dec    %eax
f01288d4:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01288da:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01288e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01288e5:	f7 75 80             	divl   -0x80(%ebp)
f01288e8:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01288ee:	29 d0                	sub    %edx,%eax
f01288f0:	01 c3                	add    %eax,%ebx
f01288f2:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01288f9:	10 00 00 
f01288fc:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0128901:	0f b6 c0             	movzbl %al,%eax
f0128904:	c1 e0 04             	shl    $0x4,%eax
f0128907:	89 c2                	mov    %eax,%edx
f0128909:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012890f:	01 d0                	add    %edx,%eax
f0128911:	48                   	dec    %eax
f0128912:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0128918:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012891e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128923:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0128929:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012892f:	29 d0                	sub    %edx,%eax
f0128931:	01 d8                	add    %ebx,%eax
f0128933:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0128938:	39 c1                	cmp    %eax,%ecx
f012893a:	74 17                	je     f0128953 <test_kexpand+0x4cc>
f012893c:	83 ec 04             	sub    $0x4,%esp
f012893f:	68 40 b5 13 f0       	push   $0xf013b540
f0128944:	68 63 0b 00 00       	push   $0xb63
f0128949:	68 5a b4 13 f0       	push   $0xf013b45a
f012894e:	e8 b2 78 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128953:	e8 8b b4 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0128958:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012895b:	74 17                	je     f0128974 <test_kexpand+0x4ed>
f012895d:	83 ec 04             	sub    $0x4,%esp
f0128960:	68 74 b4 13 f0       	push   $0xf013b474
f0128965:	68 64 0b 00 00       	push   $0xb64
f012896a:	68 5a b4 13 f0       	push   $0xf013b45a
f012896f:	e8 91 78 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128974:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128977:	e8 dd 46 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012897c:	29 c3                	sub    %eax,%ebx
f012897e:	89 d8                	mov    %ebx,%eax
f0128980:	83 f8 01             	cmp    $0x1,%eax
f0128983:	74 17                	je     f012899c <test_kexpand+0x515>
f0128985:	83 ec 04             	sub    $0x4,%esp
f0128988:	68 dc b4 13 f0       	push   $0xf013b4dc
f012898d:	68 65 0b 00 00       	push   $0xb65
f0128992:	68 5a b4 13 f0       	push   $0xf013b45a
f0128997:	e8 69 78 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012899c:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f01289a3:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01289a6:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01289ac:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01289af:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01289b6:	eb 0e                	jmp    f01289c6 <test_kexpand+0x53f>
		{
			ptr[i] = 3 ;
f01289b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01289bb:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01289be:	01 d0                	add    %edx,%eax
f01289c0:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01289c3:	ff 45 f4             	incl   -0xc(%ebp)
f01289c6:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01289cc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01289cf:	7f e7                	jg     f01289b8 <test_kexpand+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01289d1:	e8 83 46 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01289d6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01289d9:	e8 05 b4 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01289de:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01289e1:	83 ec 0c             	sub    $0xc,%esp
f01289e4:	68 00 1c 00 00       	push   $0x1c00
f01289e9:	e8 42 f0 fd ff       	call   f0107a30 <kmalloc>
f01289ee:	83 c4 10             	add    $0x10,%esp
f01289f1:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01289f7:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01289fd:	89 c1                	mov    %eax,%ecx
f01289ff:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0128a06:	10 00 00 
f0128a09:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0128a0f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128a14:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0128a1a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128a20:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a25:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0128a2b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128a31:	29 d0                	sub    %edx,%eax
f0128a33:	89 c3                	mov    %eax,%ebx
f0128a35:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0128a3c:	10 00 00 
f0128a3f:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0128a44:	0f b6 d0             	movzbl %al,%edx
f0128a47:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0128a4d:	01 d0                	add    %edx,%eax
f0128a4f:	48                   	dec    %eax
f0128a50:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0128a56:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128a5c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a61:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0128a67:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128a6d:	29 d0                	sub    %edx,%eax
f0128a6f:	01 c3                	add    %eax,%ebx
f0128a71:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0128a78:	10 00 00 
f0128a7b:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0128a80:	0f b6 c0             	movzbl %al,%eax
f0128a83:	c1 e0 04             	shl    $0x4,%eax
f0128a86:	89 c2                	mov    %eax,%edx
f0128a88:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0128a8e:	01 d0                	add    %edx,%eax
f0128a90:	48                   	dec    %eax
f0128a91:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0128a97:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128a9d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128aa2:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0128aa8:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128aae:	29 d0                	sub    %edx,%eax
f0128ab0:	01 d8                	add    %ebx,%eax
f0128ab2:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0128ab7:	39 c1                	cmp    %eax,%ecx
f0128ab9:	74 17                	je     f0128ad2 <test_kexpand+0x64b>
f0128abb:	83 ec 04             	sub    $0x4,%esp
f0128abe:	68 40 b5 13 f0       	push   $0xf013b540
f0128ac3:	68 71 0b 00 00       	push   $0xb71
f0128ac8:	68 5a b4 13 f0       	push   $0xf013b45a
f0128acd:	e8 33 77 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128ad2:	e8 0c b3 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0128ad7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128ada:	74 17                	je     f0128af3 <test_kexpand+0x66c>
f0128adc:	83 ec 04             	sub    $0x4,%esp
f0128adf:	68 74 b4 13 f0       	push   $0xf013b474
f0128ae4:	68 72 0b 00 00       	push   $0xb72
f0128ae9:	68 5a b4 13 f0       	push   $0xf013b45a
f0128aee:	e8 12 77 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128af3:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128af6:	e8 5e 45 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128afb:	29 c3                	sub    %eax,%ebx
f0128afd:	89 d8                	mov    %ebx,%eax
f0128aff:	83 f8 02             	cmp    $0x2,%eax
f0128b02:	74 17                	je     f0128b1b <test_kexpand+0x694>
f0128b04:	83 ec 04             	sub    $0x4,%esp
f0128b07:	68 dc b4 13 f0       	push   $0xf013b4dc
f0128b0c:	68 73 0b 00 00       	push   $0xb73
f0128b11:	68 5a b4 13 f0       	push   $0xf013b45a
f0128b16:	e8 ea 76 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0128b1b:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0128b22:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0128b25:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0128b2b:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0128b2e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128b35:	eb 0e                	jmp    f0128b45 <test_kexpand+0x6be>
		{
			ptr[i] = 4 ;
f0128b37:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128b3a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128b3d:	01 d0                	add    %edx,%eax
f0128b3f:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0128b42:	ff 45 f4             	incl   -0xc(%ebp)
f0128b45:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0128b4b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128b4e:	7f e7                	jg     f0128b37 <test_kexpand+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0128b50:	e8 04 45 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128b55:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128b58:	e8 86 b2 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0128b5d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0128b60:	83 ec 0c             	sub    $0xc,%esp
f0128b63:	68 00 fc 2f 00       	push   $0x2ffc00
f0128b68:	e8 c3 ee fd ff       	call   f0107a30 <kmalloc>
f0128b6d:	83 c4 10             	add    $0x10,%esp
f0128b70:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128b76:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0128b7c:	89 c1                	mov    %eax,%ecx
f0128b7e:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0128b85:	10 00 00 
f0128b88:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0128b8e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128b93:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0128b99:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128b9f:	ba 00 00 00 00       	mov    $0x0,%edx
f0128ba4:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0128baa:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128bb0:	29 d0                	sub    %edx,%eax
f0128bb2:	89 c3                	mov    %eax,%ebx
f0128bb4:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0128bbb:	10 00 00 
f0128bbe:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0128bc3:	0f b6 d0             	movzbl %al,%edx
f0128bc6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0128bcc:	01 d0                	add    %edx,%eax
f0128bce:	48                   	dec    %eax
f0128bcf:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0128bd5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128bdb:	ba 00 00 00 00       	mov    $0x0,%edx
f0128be0:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0128be6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128bec:	29 d0                	sub    %edx,%eax
f0128bee:	01 c3                	add    %eax,%ebx
f0128bf0:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0128bf7:	10 00 00 
f0128bfa:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0128bff:	0f b6 c0             	movzbl %al,%eax
f0128c02:	c1 e0 04             	shl    $0x4,%eax
f0128c05:	89 c2                	mov    %eax,%edx
f0128c07:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128c0d:	01 d0                	add    %edx,%eax
f0128c0f:	48                   	dec    %eax
f0128c10:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0128c16:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128c1c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c21:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0128c27:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128c2d:	29 d0                	sub    %edx,%eax
f0128c2f:	01 d8                	add    %ebx,%eax
f0128c31:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0128c36:	39 c1                	cmp    %eax,%ecx
f0128c38:	74 17                	je     f0128c51 <test_kexpand+0x7ca>
f0128c3a:	83 ec 04             	sub    $0x4,%esp
f0128c3d:	68 40 b5 13 f0       	push   $0xf013b540
f0128c42:	68 7f 0b 00 00       	push   $0xb7f
f0128c47:	68 5a b4 13 f0       	push   $0xf013b45a
f0128c4c:	e8 b4 75 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128c51:	e8 8d b1 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0128c56:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128c59:	74 17                	je     f0128c72 <test_kexpand+0x7eb>
f0128c5b:	83 ec 04             	sub    $0x4,%esp
f0128c5e:	68 74 b4 13 f0       	push   $0xf013b474
f0128c63:	68 80 0b 00 00       	push   $0xb80
f0128c68:	68 5a b4 13 f0       	push   $0xf013b45a
f0128c6d:	e8 93 75 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128c72:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128c75:	e8 df 43 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128c7a:	29 c3                	sub    %eax,%ebx
f0128c7c:	89 d8                	mov    %ebx,%eax
f0128c7e:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128c83:	74 17                	je     f0128c9c <test_kexpand+0x815>
f0128c85:	83 ec 04             	sub    $0x4,%esp
f0128c88:	68 dc b4 13 f0       	push   $0xf013b4dc
f0128c8d:	68 81 0b 00 00       	push   $0xb81
f0128c92:	68 5a b4 13 f0       	push   $0xf013b45a
f0128c97:	e8 69 75 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0128c9c:	c7 85 d0 fe ff ff ff 	movl   $0x2ffbff,-0x130(%ebp)
f0128ca3:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0128ca6:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0128cac:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0128caf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128cb6:	eb 0e                	jmp    f0128cc6 <test_kexpand+0x83f>
		{
			ptr[i] = 5 ;
f0128cb8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128cbb:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128cbe:	01 d0                	add    %edx,%eax
f0128cc0:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0128cc3:	ff 45 f4             	incl   -0xc(%ebp)
f0128cc6:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0128ccc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128ccf:	7f e7                	jg     f0128cb8 <test_kexpand+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0128cd1:	e8 83 43 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128cd6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128cd9:	e8 05 b1 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0128cde:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0128ce1:	83 ec 0c             	sub    $0xc,%esp
f0128ce4:	68 00 00 60 00       	push   $0x600000
f0128ce9:	e8 42 ed fd ff       	call   f0107a30 <kmalloc>
f0128cee:	83 c4 10             	add    $0x10,%esp
f0128cf1:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128cf7:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128cfd:	89 c1                	mov    %eax,%ecx
f0128cff:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0128d06:	10 00 00 
f0128d09:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0128d0f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128d14:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0128d1a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128d20:	ba 00 00 00 00       	mov    $0x0,%edx
f0128d25:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0128d2b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128d31:	29 d0                	sub    %edx,%eax
f0128d33:	89 c3                	mov    %eax,%ebx
f0128d35:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0128d3c:	10 00 00 
f0128d3f:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0128d44:	0f b6 d0             	movzbl %al,%edx
f0128d47:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0128d4d:	01 d0                	add    %edx,%eax
f0128d4f:	48                   	dec    %eax
f0128d50:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0128d56:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128d5c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128d61:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0128d67:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128d6d:	29 d0                	sub    %edx,%eax
f0128d6f:	01 c3                	add    %eax,%ebx
f0128d71:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0128d78:	10 00 00 
f0128d7b:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0128d80:	0f b6 c0             	movzbl %al,%eax
f0128d83:	c1 e0 04             	shl    $0x4,%eax
f0128d86:	89 c2                	mov    %eax,%edx
f0128d88:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0128d8e:	01 d0                	add    %edx,%eax
f0128d90:	48                   	dec    %eax
f0128d91:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0128d97:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128d9d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128da2:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0128da8:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128dae:	29 d0                	sub    %edx,%eax
f0128db0:	01 d8                	add    %ebx,%eax
f0128db2:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0128db7:	39 c1                	cmp    %eax,%ecx
f0128db9:	74 17                	je     f0128dd2 <test_kexpand+0x94b>
f0128dbb:	83 ec 04             	sub    $0x4,%esp
f0128dbe:	68 40 b5 13 f0       	push   $0xf013b540
f0128dc3:	68 8d 0b 00 00       	push   $0xb8d
f0128dc8:	68 5a b4 13 f0       	push   $0xf013b45a
f0128dcd:	e8 33 74 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128dd2:	e8 0c b0 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0128dd7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128dda:	74 17                	je     f0128df3 <test_kexpand+0x96c>
f0128ddc:	83 ec 04             	sub    $0x4,%esp
f0128ddf:	68 74 b4 13 f0       	push   $0xf013b474
f0128de4:	68 8e 0b 00 00       	push   $0xb8e
f0128de9:	68 5a b4 13 f0       	push   $0xf013b45a
f0128dee:	e8 12 74 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128df3:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128df6:	e8 5e 42 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128dfb:	29 c3                	sub    %eax,%ebx
f0128dfd:	89 d8                	mov    %ebx,%eax
f0128dff:	3d 00 06 00 00       	cmp    $0x600,%eax
f0128e04:	74 17                	je     f0128e1d <test_kexpand+0x996>
f0128e06:	83 ec 04             	sub    $0x4,%esp
f0128e09:	68 dc b4 13 f0       	push   $0xf013b4dc
f0128e0e:	68 8f 0b 00 00       	push   $0xb8f
f0128e13:	68 5a b4 13 f0       	push   $0xf013b45a
f0128e18:	e8 e8 73 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0128e1d:	c7 85 d4 fe ff ff ff 	movl   $0x17ffff,-0x12c(%ebp)
f0128e24:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0128e27:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128e2d:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0128e33:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128e3a:	eb 1a                	jmp    f0128e56 <test_kexpand+0x9cf>
		{
			arr[i] = i ;
f0128e3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128e3f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128e46:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128e4c:	01 c2                	add    %eax,%edx
f0128e4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128e51:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0128e53:	ff 45 f4             	incl   -0xc(%ebp)
f0128e56:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0128e5c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128e5f:	7d db                	jge    f0128e3c <test_kexpand+0x9b5>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f0128e61:	c7 85 24 ff ff ff ff 	movl   $0x1bffff,-0xdc(%ebp)
f0128e68:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f0128e6b:	e8 e9 41 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128e70:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128e73:	e8 6b af fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0128e78:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f0128e7b:	83 ec 0c             	sub    $0xc,%esp
f0128e7e:	68 00 00 70 00       	push   $0x700000
f0128e83:	e8 1f ee fd ff       	call   f0107ca7 <kexpand>
f0128e88:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128e8b:	e8 53 af fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0128e90:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128e93:	74 19                	je     f0128eae <test_kexpand+0xa27>
f0128e95:	68 f4 c1 13 f0       	push   $0xf013c1f4
f0128e9a:	68 25 c2 13 f0       	push   $0xf013c225
f0128e9f:	68 a0 0b 00 00       	push   $0xba0
f0128ea4:	68 5a b4 13 f0       	push   $0xf013b45a
f0128ea9:	e8 57 73 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f0128eae:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128eb1:	e8 a3 41 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128eb6:	29 c3                	sub    %eax,%ebx
f0128eb8:	89 d8                	mov    %ebx,%eax
f0128eba:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128ebf:	74 19                	je     f0128eda <test_kexpand+0xa53>
f0128ec1:	68 3c c2 13 f0       	push   $0xf013c23c
f0128ec6:	68 25 c2 13 f0       	push   $0xf013c225
f0128ecb:	68 a1 0b 00 00       	push   $0xba1
f0128ed0:	68 5a b4 13 f0       	push   $0xf013b45a
f0128ed5:	e8 2b 73 fd ff       	call   f0100205 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0128eda:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0128ee0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0128ee3:	eb 1a                	jmp    f0128eff <test_kexpand+0xa78>
		{
			arr[i] = i ;
f0128ee5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128ee8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128eef:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128ef5:	01 c2                	add    %eax,%edx
f0128ef7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128efa:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0128efc:	ff 45 f4             	incl   -0xc(%ebp)
f0128eff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128f02:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128f08:	7c db                	jl     f0128ee5 <test_kexpand+0xa5e>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0128f0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128f11:	eb 37                	jmp    f0128f4a <test_kexpand+0xac3>
		{
			assert(arr[i] ==i);
f0128f13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128f16:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128f1d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128f23:	01 d0                	add    %edx,%eax
f0128f25:	8b 10                	mov    (%eax),%edx
f0128f27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128f2a:	39 c2                	cmp    %eax,%edx
f0128f2c:	74 19                	je     f0128f47 <test_kexpand+0xac0>
f0128f2e:	68 6c c2 13 f0       	push   $0xf013c26c
f0128f33:	68 25 c2 13 f0       	push   $0xf013c225
f0128f38:	68 ad 0b 00 00       	push   $0xbad
f0128f3d:	68 5a b4 13 f0       	push   $0xf013b45a
f0128f42:	e8 be 72 fd ff       	call   f0100205 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0128f47:	ff 45 f4             	incl   -0xc(%ebp)
f0128f4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128f4d:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128f53:	7c be                	jl     f0128f13 <test_kexpand+0xa8c>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128f55:	e8 ff 40 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128f5a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128f5d:	e8 81 ae fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0128f62:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f0128f65:	83 ec 0c             	sub    $0xc,%esp
f0128f68:	68 00 00 a0 00       	push   $0xa00000
f0128f6d:	e8 35 ed fd ff       	call   f0107ca7 <kexpand>
f0128f72:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128f75:	e8 69 ae fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0128f7a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128f7d:	74 19                	je     f0128f98 <test_kexpand+0xb11>
f0128f7f:	68 f4 c1 13 f0       	push   $0xf013c1f4
f0128f84:	68 25 c2 13 f0       	push   $0xf013c225
f0128f89:	68 b8 0b 00 00       	push   $0xbb8
f0128f8e:	68 5a b4 13 f0       	push   $0xf013b45a
f0128f93:	e8 6d 72 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f0128f98:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128f9b:	e8 b9 40 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128fa0:	29 c3                	sub    %eax,%ebx
f0128fa2:	89 d8                	mov    %ebx,%eax
f0128fa4:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128fa9:	74 19                	je     f0128fc4 <test_kexpand+0xb3d>
f0128fab:	68 78 c2 13 f0       	push   $0xf013c278
f0128fb0:	68 25 c2 13 f0       	push   $0xf013c225
f0128fb5:	68 b9 0b 00 00       	push   $0xbb9
f0128fba:	68 5a b4 13 f0       	push   $0xf013b45a
f0128fbf:	e8 41 72 fd ff       	call   f0100205 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0128fc4:	e8 90 40 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0128fc9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128fcc:	e8 12 ae fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0128fd1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0128fd4:	83 ec 0c             	sub    $0xc,%esp
f0128fd7:	68 00 00 40 00       	push   $0x400000
f0128fdc:	e8 4f ea fd ff       	call   f0107a30 <kmalloc>
f0128fe1:	83 c4 10             	add    $0x10,%esp
f0128fe4:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f0128fea:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0128ff0:	89 c1                	mov    %eax,%ecx
f0128ff2:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0128ff9:	10 00 00 
f0128ffc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0129002:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129007:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012900d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129013:	ba 00 00 00 00       	mov    $0x0,%edx
f0129018:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f012901e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129024:	29 d0                	sub    %edx,%eax
f0129026:	89 c3                	mov    %eax,%ebx
f0129028:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012902f:	10 00 00 
f0129032:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0129037:	0f b6 d0             	movzbl %al,%edx
f012903a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0129040:	01 d0                	add    %edx,%eax
f0129042:	48                   	dec    %eax
f0129043:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0129049:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012904f:	ba 00 00 00 00       	mov    $0x0,%edx
f0129054:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012905a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129060:	29 d0                	sub    %edx,%eax
f0129062:	01 c3                	add    %eax,%ebx
f0129064:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f012906b:	10 00 00 
f012906e:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0129073:	0f b6 c0             	movzbl %al,%eax
f0129076:	c1 e0 04             	shl    $0x4,%eax
f0129079:	89 c2                	mov    %eax,%edx
f012907b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0129081:	01 d0                	add    %edx,%eax
f0129083:	48                   	dec    %eax
f0129084:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f012908a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129090:	ba 00 00 00 00       	mov    $0x0,%edx
f0129095:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f012909b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01290a1:	29 d0                	sub    %edx,%eax
f01290a3:	01 d8                	add    %ebx,%eax
f01290a5:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f01290aa:	39 c1                	cmp    %eax,%ecx
f01290ac:	74 17                	je     f01290c5 <test_kexpand+0xc3e>
f01290ae:	83 ec 04             	sub    $0x4,%esp
f01290b1:	68 a8 c2 13 f0       	push   $0xf013c2a8
f01290b6:	68 c4 0b 00 00       	push   $0xbc4
f01290bb:	68 5a b4 13 f0       	push   $0xf013b45a
f01290c0:	e8 40 71 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01290c5:	e8 19 ad fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01290ca:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01290cd:	74 17                	je     f01290e6 <test_kexpand+0xc5f>
f01290cf:	83 ec 04             	sub    $0x4,%esp
f01290d2:	68 74 b4 13 f0       	push   $0xf013b474
f01290d7:	68 c5 0b 00 00       	push   $0xbc5
f01290dc:	68 5a b4 13 f0       	push   $0xf013b45a
f01290e1:	e8 1f 71 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f01290e6:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01290e9:	e8 6b 3f fe ff       	call   f010d059 <sys_calculate_free_frames>
f01290ee:	29 c3                	sub    %eax,%ebx
f01290f0:	89 d8                	mov    %ebx,%eax
f01290f2:	3d 00 04 00 00       	cmp    $0x400,%eax
f01290f7:	74 17                	je     f0129110 <test_kexpand+0xc89>
f01290f9:	83 ec 04             	sub    $0x4,%esp
f01290fc:	68 dc b4 13 f0       	push   $0xf013b4dc
f0129101:	68 c6 0b 00 00       	push   $0xbc6
f0129106:	68 5a b4 13 f0       	push   $0xf013b45a
f012910b:	e8 f5 70 fd ff       	call   f0100205 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f0129110:	e8 44 3f fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129115:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129118:	e8 c6 ac fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012911d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0129120:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0129126:	83 ec 0c             	sub    $0xc,%esp
f0129129:	50                   	push   %eax
f012912a:	e8 ea e9 fd ff       	call   f0107b19 <kfree>
f012912f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129132:	e8 ac ac fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0129137:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012913a:	74 17                	je     f0129153 <test_kexpand+0xccc>
f012913c:	83 ec 04             	sub    $0x4,%esp
f012913f:	68 74 b4 13 f0       	push   $0xf013b474
f0129144:	68 cf 0b 00 00       	push   $0xbcf
f0129149:	68 5a b4 13 f0       	push   $0xf013b45a
f012914e:	e8 b2 70 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0129153:	e8 01 3f fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129158:	89 c2                	mov    %eax,%edx
f012915a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012915d:	29 c2                	sub    %eax,%edx
f012915f:	89 d0                	mov    %edx,%eax
f0129161:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0129166:	74 17                	je     f012917f <test_kexpand+0xcf8>
f0129168:	83 ec 04             	sub    $0x4,%esp
f012916b:	68 0c bd 13 f0       	push   $0xf013bd0c
f0129170:	68 d0 0b 00 00       	push   $0xbd0
f0129175:	68 5a b4 13 f0       	push   $0xf013b45a
f012917a:	e8 86 70 fd ff       	call   f0100205 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f012917f:	e8 d5 3e fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129184:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129187:	e8 57 ac fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012918c:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f012918f:	83 ec 0c             	sub    $0xc,%esp
f0129192:	68 00 50 40 00       	push   $0x405000
f0129197:	e8 0b eb fd ff       	call   f0107ca7 <kexpand>
f012919c:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f012919f:	e8 3f ac fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01291a4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01291a7:	74 19                	je     f01291c2 <test_kexpand+0xd3b>
f01291a9:	68 f4 c1 13 f0       	push   $0xf013c1f4
f01291ae:	68 25 c2 13 f0       	push   $0xf013c225
f01291b3:	68 da 0b 00 00       	push   $0xbda
f01291b8:	68 5a b4 13 f0       	push   $0xf013b45a
f01291bd:	e8 43 70 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f01291c2:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01291c5:	e8 8f 3e fe ff       	call   f010d059 <sys_calculate_free_frames>
f01291ca:	29 c3                	sub    %eax,%ebx
f01291cc:	89 d8                	mov    %ebx,%eax
f01291ce:	83 f8 05             	cmp    $0x5,%eax
f01291d1:	74 19                	je     f01291ec <test_kexpand+0xd65>
f01291d3:	68 d0 c2 13 f0       	push   $0xf013c2d0
f01291d8:	68 25 c2 13 f0       	push   $0xf013c225
f01291dd:	68 db 0b 00 00       	push   $0xbdb
f01291e2:	68 5a b4 13 f0       	push   $0xf013b45a
f01291e7:	e8 19 70 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f01291ec:	83 ec 0c             	sub    $0xc,%esp
f01291ef:	68 b8 c1 13 f0       	push   $0xf013c1b8
f01291f4:	e8 15 7b fd ff       	call   f0100d0e <cprintf>
f01291f9:	83 c4 10             	add    $0x10,%esp

	return 1;
f01291fc:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0129201:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0129204:	5b                   	pop    %ebx
f0129205:	5f                   	pop    %edi
f0129206:	5d                   	pop    %ebp
f0129207:	c3                   	ret    

f0129208 <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f0129208:	55                   	push   %ebp
f0129209:	89 e5                	mov    %esp,%ebp
f012920b:	57                   	push   %edi
f012920c:	53                   	push   %ebx
f012920d:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	char minByte = 1<<7;
f0129213:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0129217:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f012921b:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0129221:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0129227:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f012922e:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0129235:	e8 1f 3e fe ff       	call   f010d059 <sys_calculate_free_frames>
f012923a:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012923d:	8d 95 a4 fe ff ff    	lea    -0x15c(%ebp),%edx
f0129243:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129248:	b8 00 00 00 00       	mov    $0x0,%eax
f012924d:	89 d7                	mov    %edx,%edi
f012924f:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0129251:	8d 95 54 fe ff ff    	lea    -0x1ac(%ebp),%edx
f0129257:	b9 14 00 00 00       	mov    $0x14,%ecx
f012925c:	b8 00 00 00 00       	mov    $0x0,%eax
f0129261:	89 d7                	mov    %edx,%edi
f0129263:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129265:	e8 ef 3d fe ff       	call   f010d059 <sys_calculate_free_frames>
f012926a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012926d:	e8 71 ab fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0129272:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0129275:	83 ec 0c             	sub    $0xc,%esp
f0129278:	68 00 fc 1f 00       	push   $0x1ffc00
f012927d:	e8 ae e7 fd ff       	call   f0107a30 <kmalloc>
f0129282:	83 c4 10             	add    $0x10,%esp
f0129285:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012928b:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0129291:	89 c1                	mov    %eax,%ecx
f0129293:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f012929a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012929d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01292a2:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01292a5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01292a8:	ba 00 00 00 00       	mov    $0x0,%edx
f01292ad:	f7 75 d4             	divl   -0x2c(%ebp)
f01292b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01292b3:	29 d0                	sub    %edx,%eax
f01292b5:	89 c3                	mov    %eax,%ebx
f01292b7:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01292be:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01292c3:	0f b6 d0             	movzbl %al,%edx
f01292c6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01292c9:	01 d0                	add    %edx,%eax
f01292cb:	48                   	dec    %eax
f01292cc:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01292cf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01292d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01292d7:	f7 75 cc             	divl   -0x34(%ebp)
f01292da:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01292dd:	29 d0                	sub    %edx,%eax
f01292df:	01 c3                	add    %eax,%ebx
f01292e1:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01292e8:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01292ed:	0f b6 c0             	movzbl %al,%eax
f01292f0:	c1 e0 04             	shl    $0x4,%eax
f01292f3:	89 c2                	mov    %eax,%edx
f01292f5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01292f8:	01 d0                	add    %edx,%eax
f01292fa:	48                   	dec    %eax
f01292fb:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01292fe:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0129301:	ba 00 00 00 00       	mov    $0x0,%edx
f0129306:	f7 75 c4             	divl   -0x3c(%ebp)
f0129309:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012930c:	29 d0                	sub    %edx,%eax
f012930e:	01 d8                	add    %ebx,%eax
f0129310:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0129315:	39 c1                	cmp    %eax,%ecx
f0129317:	74 17                	je     f0129330 <test_kshrink+0x128>
f0129319:	83 ec 04             	sub    $0x4,%esp
f012931c:	68 40 b5 13 f0       	push   $0xf013b540
f0129321:	68 01 0c 00 00       	push   $0xc01
f0129326:	68 5a b4 13 f0       	push   $0xf013b45a
f012932b:	e8 d5 6e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129330:	e8 ae aa fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0129335:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129338:	74 17                	je     f0129351 <test_kshrink+0x149>
f012933a:	83 ec 04             	sub    $0x4,%esp
f012933d:	68 74 b4 13 f0       	push   $0xf013b474
f0129342:	68 02 0c 00 00       	push   $0xc02
f0129347:	68 5a b4 13 f0       	push   $0xf013b45a
f012934c:	e8 b4 6e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129351:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129354:	e8 00 3d fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129359:	29 c3                	sub    %eax,%ebx
f012935b:	89 d8                	mov    %ebx,%eax
f012935d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129362:	74 17                	je     f012937b <test_kshrink+0x173>
f0129364:	83 ec 04             	sub    $0x4,%esp
f0129367:	68 dc b4 13 f0       	push   $0xf013b4dc
f012936c:	68 03 0c 00 00       	push   $0xc03
f0129371:	68 5a b4 13 f0       	push   $0xf013b45a
f0129376:	e8 8a 6e fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012937b:	c7 85 a4 fe ff ff ff 	movl   $0x1ffbff,-0x15c(%ebp)
f0129382:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129385:	e8 cf 3c fe ff       	call   f010d059 <sys_calculate_free_frames>
f012938a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012938d:	e8 51 aa fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0129392:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0129395:	83 ec 0c             	sub    $0xc,%esp
f0129398:	68 00 fc 1f 00       	push   $0x1ffc00
f012939d:	e8 8e e6 fd ff       	call   f0107a30 <kmalloc>
f01293a2:	83 c4 10             	add    $0x10,%esp
f01293a5:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01293ab:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01293b1:	89 c1                	mov    %eax,%ecx
f01293b3:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01293ba:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01293bd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01293c2:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01293c5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01293c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01293cd:	f7 75 bc             	divl   -0x44(%ebp)
f01293d0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01293d3:	29 d0                	sub    %edx,%eax
f01293d5:	89 c3                	mov    %eax,%ebx
f01293d7:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01293de:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01293e3:	0f b6 d0             	movzbl %al,%edx
f01293e6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01293e9:	01 d0                	add    %edx,%eax
f01293eb:	48                   	dec    %eax
f01293ec:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01293ef:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01293f2:	ba 00 00 00 00       	mov    $0x0,%edx
f01293f7:	f7 75 b4             	divl   -0x4c(%ebp)
f01293fa:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01293fd:	29 d0                	sub    %edx,%eax
f01293ff:	01 c3                	add    %eax,%ebx
f0129401:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0129408:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012940d:	0f b6 c0             	movzbl %al,%eax
f0129410:	c1 e0 04             	shl    $0x4,%eax
f0129413:	89 c2                	mov    %eax,%edx
f0129415:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0129418:	01 d0                	add    %edx,%eax
f012941a:	48                   	dec    %eax
f012941b:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012941e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129421:	ba 00 00 00 00       	mov    $0x0,%edx
f0129426:	f7 75 ac             	divl   -0x54(%ebp)
f0129429:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012942c:	29 d0                	sub    %edx,%eax
f012942e:	01 d8                	add    %ebx,%eax
f0129430:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0129435:	39 c1                	cmp    %eax,%ecx
f0129437:	74 17                	je     f0129450 <test_kshrink+0x248>
f0129439:	83 ec 04             	sub    $0x4,%esp
f012943c:	68 40 b5 13 f0       	push   $0xf013b540
f0129441:	68 0a 0c 00 00       	push   $0xc0a
f0129446:	68 5a b4 13 f0       	push   $0xf013b45a
f012944b:	e8 b5 6d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129450:	e8 8e a9 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0129455:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129458:	74 17                	je     f0129471 <test_kshrink+0x269>
f012945a:	83 ec 04             	sub    $0x4,%esp
f012945d:	68 74 b4 13 f0       	push   $0xf013b474
f0129462:	68 0b 0c 00 00       	push   $0xc0b
f0129467:	68 5a b4 13 f0       	push   $0xf013b45a
f012946c:	e8 94 6d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129471:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129474:	e8 e0 3b fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129479:	29 c3                	sub    %eax,%ebx
f012947b:	89 d8                	mov    %ebx,%eax
f012947d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129482:	74 17                	je     f012949b <test_kshrink+0x293>
f0129484:	83 ec 04             	sub    $0x4,%esp
f0129487:	68 dc b4 13 f0       	push   $0xf013b4dc
f012948c:	68 0c 0c 00 00       	push   $0xc0c
f0129491:	68 5a b4 13 f0       	push   $0xf013b45a
f0129496:	e8 6a 6d fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012949b:	c7 85 a8 fe ff ff ff 	movl   $0x1ffbff,-0x158(%ebp)
f01294a2:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01294a5:	e8 af 3b fe ff       	call   f010d059 <sys_calculate_free_frames>
f01294aa:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01294ad:	e8 31 a9 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01294b2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01294b5:	83 ec 0c             	sub    $0xc,%esp
f01294b8:	68 00 08 00 00       	push   $0x800
f01294bd:	e8 6e e5 fd ff       	call   f0107a30 <kmalloc>
f01294c2:	83 c4 10             	add    $0x10,%esp
f01294c5:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01294cb:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01294d1:	89 c1                	mov    %eax,%ecx
f01294d3:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01294da:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01294dd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01294e2:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01294e5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01294e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01294ed:	f7 75 a4             	divl   -0x5c(%ebp)
f01294f0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01294f3:	29 d0                	sub    %edx,%eax
f01294f5:	89 c3                	mov    %eax,%ebx
f01294f7:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01294fe:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0129503:	0f b6 d0             	movzbl %al,%edx
f0129506:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129509:	01 d0                	add    %edx,%eax
f012950b:	48                   	dec    %eax
f012950c:	89 45 98             	mov    %eax,-0x68(%ebp)
f012950f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0129512:	ba 00 00 00 00       	mov    $0x0,%edx
f0129517:	f7 75 9c             	divl   -0x64(%ebp)
f012951a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012951d:	29 d0                	sub    %edx,%eax
f012951f:	01 c3                	add    %eax,%ebx
f0129521:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0129528:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012952d:	0f b6 c0             	movzbl %al,%eax
f0129530:	c1 e0 04             	shl    $0x4,%eax
f0129533:	89 c2                	mov    %eax,%edx
f0129535:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0129538:	01 d0                	add    %edx,%eax
f012953a:	48                   	dec    %eax
f012953b:	89 45 90             	mov    %eax,-0x70(%ebp)
f012953e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129541:	ba 00 00 00 00       	mov    $0x0,%edx
f0129546:	f7 75 94             	divl   -0x6c(%ebp)
f0129549:	8b 45 90             	mov    -0x70(%ebp),%eax
f012954c:	29 d0                	sub    %edx,%eax
f012954e:	01 d8                	add    %ebx,%eax
f0129550:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0129555:	39 c1                	cmp    %eax,%ecx
f0129557:	74 17                	je     f0129570 <test_kshrink+0x368>
f0129559:	83 ec 04             	sub    $0x4,%esp
f012955c:	68 40 b5 13 f0       	push   $0xf013b540
f0129561:	68 13 0c 00 00       	push   $0xc13
f0129566:	68 5a b4 13 f0       	push   $0xf013b45a
f012956b:	e8 95 6c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129570:	e8 6e a8 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0129575:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129578:	74 17                	je     f0129591 <test_kshrink+0x389>
f012957a:	83 ec 04             	sub    $0x4,%esp
f012957d:	68 74 b4 13 f0       	push   $0xf013b474
f0129582:	68 14 0c 00 00       	push   $0xc14
f0129587:	68 5a b4 13 f0       	push   $0xf013b45a
f012958c:	e8 74 6c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129591:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129594:	e8 c0 3a fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129599:	29 c3                	sub    %eax,%ebx
f012959b:	89 d8                	mov    %ebx,%eax
f012959d:	83 f8 01             	cmp    $0x1,%eax
f01295a0:	74 17                	je     f01295b9 <test_kshrink+0x3b1>
f01295a2:	83 ec 04             	sub    $0x4,%esp
f01295a5:	68 dc b4 13 f0       	push   $0xf013b4dc
f01295aa:	68 15 0c 00 00       	push   $0xc15
f01295af:	68 5a b4 13 f0       	push   $0xf013b45a
f01295b4:	e8 4c 6c fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01295b9:	c7 85 ac fe ff ff ff 	movl   $0x7ff,-0x154(%ebp)
f01295c0:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01295c3:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01295c9:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01295cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01295d3:	eb 0e                	jmp    f01295e3 <test_kshrink+0x3db>
		{
			ptr[i] = 2 ;
f01295d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01295d8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01295db:	01 d0                	add    %edx,%eax
f01295dd:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01295e0:	ff 45 f4             	incl   -0xc(%ebp)
f01295e3:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01295e9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01295ec:	7f e7                	jg     f01295d5 <test_kshrink+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01295ee:	e8 66 3a fe ff       	call   f010d059 <sys_calculate_free_frames>
f01295f3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01295f6:	e8 e8 a7 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01295fb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01295fe:	83 ec 0c             	sub    $0xc,%esp
f0129601:	68 00 08 00 00       	push   $0x800
f0129606:	e8 25 e4 fd ff       	call   f0107a30 <kmalloc>
f012960b:	83 c4 10             	add    $0x10,%esp
f012960e:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129614:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012961a:	89 c1                	mov    %eax,%ecx
f012961c:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0129623:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129626:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012962b:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012962e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129631:	ba 00 00 00 00       	mov    $0x0,%edx
f0129636:	f7 75 88             	divl   -0x78(%ebp)
f0129639:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012963c:	29 d0                	sub    %edx,%eax
f012963e:	89 c3                	mov    %eax,%ebx
f0129640:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0129647:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012964c:	0f b6 d0             	movzbl %al,%edx
f012964f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0129652:	01 d0                	add    %edx,%eax
f0129654:	48                   	dec    %eax
f0129655:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f012965b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0129661:	ba 00 00 00 00       	mov    $0x0,%edx
f0129666:	f7 75 80             	divl   -0x80(%ebp)
f0129669:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012966f:	29 d0                	sub    %edx,%eax
f0129671:	01 c3                	add    %eax,%ebx
f0129673:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f012967a:	10 00 00 
f012967d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0129682:	0f b6 c0             	movzbl %al,%eax
f0129685:	c1 e0 04             	shl    $0x4,%eax
f0129688:	89 c2                	mov    %eax,%edx
f012968a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0129690:	01 d0                	add    %edx,%eax
f0129692:	48                   	dec    %eax
f0129693:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0129699:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012969f:	ba 00 00 00 00       	mov    $0x0,%edx
f01296a4:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01296aa:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01296b0:	29 d0                	sub    %edx,%eax
f01296b2:	01 d8                	add    %ebx,%eax
f01296b4:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01296b9:	39 c1                	cmp    %eax,%ecx
f01296bb:	74 17                	je     f01296d4 <test_kshrink+0x4cc>
f01296bd:	83 ec 04             	sub    $0x4,%esp
f01296c0:	68 40 b5 13 f0       	push   $0xf013b540
f01296c5:	68 21 0c 00 00       	push   $0xc21
f01296ca:	68 5a b4 13 f0       	push   $0xf013b45a
f01296cf:	e8 31 6b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01296d4:	e8 0a a7 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01296d9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01296dc:	74 17                	je     f01296f5 <test_kshrink+0x4ed>
f01296de:	83 ec 04             	sub    $0x4,%esp
f01296e1:	68 74 b4 13 f0       	push   $0xf013b474
f01296e6:	68 22 0c 00 00       	push   $0xc22
f01296eb:	68 5a b4 13 f0       	push   $0xf013b45a
f01296f0:	e8 10 6b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01296f5:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01296f8:	e8 5c 39 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01296fd:	29 c3                	sub    %eax,%ebx
f01296ff:	89 d8                	mov    %ebx,%eax
f0129701:	83 f8 01             	cmp    $0x1,%eax
f0129704:	74 17                	je     f012971d <test_kshrink+0x515>
f0129706:	83 ec 04             	sub    $0x4,%esp
f0129709:	68 dc b4 13 f0       	push   $0xf013b4dc
f012970e:	68 23 0c 00 00       	push   $0xc23
f0129713:	68 5a b4 13 f0       	push   $0xf013b45a
f0129718:	e8 e8 6a fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012971d:	c7 85 b0 fe ff ff ff 	movl   $0x7ff,-0x150(%ebp)
f0129724:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0129727:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012972d:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0129730:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129737:	eb 0e                	jmp    f0129747 <test_kshrink+0x53f>
		{
			ptr[i] = 3 ;
f0129739:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012973c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012973f:	01 d0                	add    %edx,%eax
f0129741:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0129744:	ff 45 f4             	incl   -0xc(%ebp)
f0129747:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012974d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129750:	7f e7                	jg     f0129739 <test_kshrink+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0129752:	e8 02 39 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129757:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012975a:	e8 84 a6 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012975f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0129762:	83 ec 0c             	sub    $0xc,%esp
f0129765:	68 00 1c 00 00       	push   $0x1c00
f012976a:	e8 c1 e2 fd ff       	call   f0107a30 <kmalloc>
f012976f:	83 c4 10             	add    $0x10,%esp
f0129772:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129778:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012977e:	89 c1                	mov    %eax,%ecx
f0129780:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0129787:	10 00 00 
f012978a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0129790:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129795:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012979b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01297a1:	ba 00 00 00 00       	mov    $0x0,%edx
f01297a6:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01297ac:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01297b2:	29 d0                	sub    %edx,%eax
f01297b4:	89 c3                	mov    %eax,%ebx
f01297b6:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01297bd:	10 00 00 
f01297c0:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f01297c5:	0f b6 d0             	movzbl %al,%edx
f01297c8:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01297ce:	01 d0                	add    %edx,%eax
f01297d0:	48                   	dec    %eax
f01297d1:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01297d7:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01297dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01297e2:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01297e8:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01297ee:	29 d0                	sub    %edx,%eax
f01297f0:	01 c3                	add    %eax,%ebx
f01297f2:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01297f9:	10 00 00 
f01297fc:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0129801:	0f b6 c0             	movzbl %al,%eax
f0129804:	c1 e0 04             	shl    $0x4,%eax
f0129807:	89 c2                	mov    %eax,%edx
f0129809:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012980f:	01 d0                	add    %edx,%eax
f0129811:	48                   	dec    %eax
f0129812:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0129818:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012981e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129823:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0129829:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012982f:	29 d0                	sub    %edx,%eax
f0129831:	01 d8                	add    %ebx,%eax
f0129833:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0129838:	39 c1                	cmp    %eax,%ecx
f012983a:	74 17                	je     f0129853 <test_kshrink+0x64b>
f012983c:	83 ec 04             	sub    $0x4,%esp
f012983f:	68 40 b5 13 f0       	push   $0xf013b540
f0129844:	68 2f 0c 00 00       	push   $0xc2f
f0129849:	68 5a b4 13 f0       	push   $0xf013b45a
f012984e:	e8 b2 69 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129853:	e8 8b a5 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0129858:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012985b:	74 17                	je     f0129874 <test_kshrink+0x66c>
f012985d:	83 ec 04             	sub    $0x4,%esp
f0129860:	68 74 b4 13 f0       	push   $0xf013b474
f0129865:	68 30 0c 00 00       	push   $0xc30
f012986a:	68 5a b4 13 f0       	push   $0xf013b45a
f012986f:	e8 91 69 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129874:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129877:	e8 dd 37 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012987c:	29 c3                	sub    %eax,%ebx
f012987e:	89 d8                	mov    %ebx,%eax
f0129880:	83 f8 02             	cmp    $0x2,%eax
f0129883:	74 17                	je     f012989c <test_kshrink+0x694>
f0129885:	83 ec 04             	sub    $0x4,%esp
f0129888:	68 dc b4 13 f0       	push   $0xf013b4dc
f012988d:	68 31 0c 00 00       	push   $0xc31
f0129892:	68 5a b4 13 f0       	push   $0xf013b45a
f0129897:	e8 69 69 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012989c:	c7 85 b4 fe ff ff ff 	movl   $0x1bff,-0x14c(%ebp)
f01298a3:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01298a6:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01298ac:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01298af:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01298b6:	eb 0e                	jmp    f01298c6 <test_kshrink+0x6be>
		{
			ptr[i] = 4 ;
f01298b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01298bb:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01298be:	01 d0                	add    %edx,%eax
f01298c0:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01298c3:	ff 45 f4             	incl   -0xc(%ebp)
f01298c6:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01298cc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01298cf:	7f e7                	jg     f01298b8 <test_kshrink+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01298d1:	e8 83 37 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01298d6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01298d9:	e8 05 a5 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01298de:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01298e1:	83 ec 0c             	sub    $0xc,%esp
f01298e4:	68 00 fc 2f 00       	push   $0x2ffc00
f01298e9:	e8 42 e1 fd ff       	call   f0107a30 <kmalloc>
f01298ee:	83 c4 10             	add    $0x10,%esp
f01298f1:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01298f7:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01298fd:	89 c1                	mov    %eax,%ecx
f01298ff:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0129906:	10 00 00 
f0129909:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012990f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129914:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f012991a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0129920:	ba 00 00 00 00       	mov    $0x0,%edx
f0129925:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012992b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0129931:	29 d0                	sub    %edx,%eax
f0129933:	89 c3                	mov    %eax,%ebx
f0129935:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f012993c:	10 00 00 
f012993f:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0129944:	0f b6 d0             	movzbl %al,%edx
f0129947:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012994d:	01 d0                	add    %edx,%eax
f012994f:	48                   	dec    %eax
f0129950:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0129956:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012995c:	ba 00 00 00 00       	mov    $0x0,%edx
f0129961:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0129967:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012996d:	29 d0                	sub    %edx,%eax
f012996f:	01 c3                	add    %eax,%ebx
f0129971:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0129978:	10 00 00 
f012997b:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0129980:	0f b6 c0             	movzbl %al,%eax
f0129983:	c1 e0 04             	shl    $0x4,%eax
f0129986:	89 c2                	mov    %eax,%edx
f0129988:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012998e:	01 d0                	add    %edx,%eax
f0129990:	48                   	dec    %eax
f0129991:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0129997:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012999d:	ba 00 00 00 00       	mov    $0x0,%edx
f01299a2:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01299a8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01299ae:	29 d0                	sub    %edx,%eax
f01299b0:	01 d8                	add    %ebx,%eax
f01299b2:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01299b7:	39 c1                	cmp    %eax,%ecx
f01299b9:	74 17                	je     f01299d2 <test_kshrink+0x7ca>
f01299bb:	83 ec 04             	sub    $0x4,%esp
f01299be:	68 40 b5 13 f0       	push   $0xf013b540
f01299c3:	68 3d 0c 00 00       	push   $0xc3d
f01299c8:	68 5a b4 13 f0       	push   $0xf013b45a
f01299cd:	e8 33 68 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01299d2:	e8 0c a4 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01299d7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01299da:	74 17                	je     f01299f3 <test_kshrink+0x7eb>
f01299dc:	83 ec 04             	sub    $0x4,%esp
f01299df:	68 74 b4 13 f0       	push   $0xf013b474
f01299e4:	68 3e 0c 00 00       	push   $0xc3e
f01299e9:	68 5a b4 13 f0       	push   $0xf013b45a
f01299ee:	e8 12 68 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01299f3:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01299f6:	e8 5e 36 fe ff       	call   f010d059 <sys_calculate_free_frames>
f01299fb:	29 c3                	sub    %eax,%ebx
f01299fd:	89 d8                	mov    %ebx,%eax
f01299ff:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129a04:	74 17                	je     f0129a1d <test_kshrink+0x815>
f0129a06:	83 ec 04             	sub    $0x4,%esp
f0129a09:	68 dc b4 13 f0       	push   $0xf013b4dc
f0129a0e:	68 3f 0c 00 00       	push   $0xc3f
f0129a13:	68 5a b4 13 f0       	push   $0xf013b45a
f0129a18:	e8 e8 67 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0129a1d:	c7 85 b8 fe ff ff ff 	movl   $0x2ffbff,-0x148(%ebp)
f0129a24:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0129a27:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0129a2d:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0129a30:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129a37:	eb 0e                	jmp    f0129a47 <test_kshrink+0x83f>
		{
			ptr[i] = 5 ;
f0129a39:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129a3c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129a3f:	01 d0                	add    %edx,%eax
f0129a41:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0129a44:	ff 45 f4             	incl   -0xc(%ebp)
f0129a47:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0129a4d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129a50:	7f e7                	jg     f0129a39 <test_kshrink+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0129a52:	e8 02 36 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129a57:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129a5a:	e8 84 a3 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0129a5f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0129a62:	83 ec 0c             	sub    $0xc,%esp
f0129a65:	68 00 00 60 00       	push   $0x600000
f0129a6a:	e8 c1 df fd ff       	call   f0107a30 <kmalloc>
f0129a6f:	83 c4 10             	add    $0x10,%esp
f0129a72:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129a78:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129a7e:	89 c1                	mov    %eax,%ecx
f0129a80:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0129a87:	10 00 00 
f0129a8a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0129a90:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129a95:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0129a9b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0129aa1:	ba 00 00 00 00       	mov    $0x0,%edx
f0129aa6:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0129aac:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0129ab2:	29 d0                	sub    %edx,%eax
f0129ab4:	89 c3                	mov    %eax,%ebx
f0129ab6:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0129abd:	10 00 00 
f0129ac0:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0129ac5:	0f b6 d0             	movzbl %al,%edx
f0129ac8:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0129ace:	01 d0                	add    %edx,%eax
f0129ad0:	48                   	dec    %eax
f0129ad1:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0129ad7:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129add:	ba 00 00 00 00       	mov    $0x0,%edx
f0129ae2:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0129ae8:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129aee:	29 d0                	sub    %edx,%eax
f0129af0:	01 c3                	add    %eax,%ebx
f0129af2:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0129af9:	10 00 00 
f0129afc:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0129b01:	0f b6 c0             	movzbl %al,%eax
f0129b04:	c1 e0 04             	shl    $0x4,%eax
f0129b07:	89 c2                	mov    %eax,%edx
f0129b09:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0129b0f:	01 d0                	add    %edx,%eax
f0129b11:	48                   	dec    %eax
f0129b12:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0129b18:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129b1e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129b23:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0129b29:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129b2f:	29 d0                	sub    %edx,%eax
f0129b31:	01 d8                	add    %ebx,%eax
f0129b33:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0129b38:	39 c1                	cmp    %eax,%ecx
f0129b3a:	74 17                	je     f0129b53 <test_kshrink+0x94b>
f0129b3c:	83 ec 04             	sub    $0x4,%esp
f0129b3f:	68 40 b5 13 f0       	push   $0xf013b540
f0129b44:	68 4b 0c 00 00       	push   $0xc4b
f0129b49:	68 5a b4 13 f0       	push   $0xf013b45a
f0129b4e:	e8 b2 66 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129b53:	e8 8b a2 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0129b58:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129b5b:	74 17                	je     f0129b74 <test_kshrink+0x96c>
f0129b5d:	83 ec 04             	sub    $0x4,%esp
f0129b60:	68 74 b4 13 f0       	push   $0xf013b474
f0129b65:	68 4c 0c 00 00       	push   $0xc4c
f0129b6a:	68 5a b4 13 f0       	push   $0xf013b45a
f0129b6f:	e8 91 66 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129b74:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129b77:	e8 dd 34 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129b7c:	29 c3                	sub    %eax,%ebx
f0129b7e:	89 d8                	mov    %ebx,%eax
f0129b80:	3d 00 06 00 00       	cmp    $0x600,%eax
f0129b85:	74 17                	je     f0129b9e <test_kshrink+0x996>
f0129b87:	83 ec 04             	sub    $0x4,%esp
f0129b8a:	68 dc b4 13 f0       	push   $0xf013b4dc
f0129b8f:	68 4d 0c 00 00       	push   $0xc4d
f0129b94:	68 5a b4 13 f0       	push   $0xf013b45a
f0129b99:	e8 67 66 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0129b9e:	c7 85 bc fe ff ff ff 	movl   $0x17ffff,-0x144(%ebp)
f0129ba5:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0129ba8:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129bae:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0129bb4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129bbb:	eb 1a                	jmp    f0129bd7 <test_kshrink+0x9cf>
		{
			arr[i] = i ;
f0129bbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129bc0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0129bc7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0129bcd:	01 c2                	add    %eax,%edx
f0129bcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129bd2:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0129bd4:	ff 45 f4             	incl   -0xc(%ebp)
f0129bd7:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129bdd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129be0:	7d db                	jge    f0129bbd <test_kshrink+0x9b5>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129be2:	e8 72 34 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129be7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129bea:	e8 f4 a1 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0129bef:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f0129bf2:	83 ec 0c             	sub    $0xc,%esp
f0129bf5:	68 00 00 50 00       	push   $0x500000
f0129bfa:	e8 8b e0 fd ff       	call   f0107c8a <kshrink>
f0129bff:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0129c02:	e8 dc a1 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0129c07:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129c0a:	74 19                	je     f0129c25 <test_kshrink+0xa1d>
f0129c0c:	68 f4 c1 13 f0       	push   $0xf013c1f4
f0129c11:	68 25 c2 13 f0       	push   $0xf013c225
f0129c16:	68 5d 0c 00 00       	push   $0xc5d
f0129c1b:	68 5a b4 13 f0       	push   $0xf013b45a
f0129c20:	e8 e0 65 fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f0129c25:	e8 2f 34 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129c2a:	89 c2                	mov    %eax,%edx
f0129c2c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129c2f:	29 c2                	sub    %eax,%edx
f0129c31:	89 d0                	mov    %edx,%eax
f0129c33:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129c38:	74 19                	je     f0129c53 <test_kshrink+0xa4b>
f0129c3a:	68 00 c3 13 f0       	push   $0xf013c300
f0129c3f:	68 25 c2 13 f0       	push   $0xf013c225
f0129c44:	68 5e 0c 00 00       	push   $0xc5e
f0129c49:	68 5a b4 13 f0       	push   $0xf013b45a
f0129c4e:	e8 b2 65 fd ff       	call   f0100205 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f0129c53:	c7 85 24 ff ff ff ff 	movl   $0x13ffff,-0xdc(%ebp)
f0129c5a:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0129c5d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129c64:	eb 37                	jmp    f0129c9d <test_kshrink+0xa95>
		{
			assert(arr[i] == i);
f0129c66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129c69:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0129c70:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0129c76:	01 d0                	add    %edx,%eax
f0129c78:	8b 10                	mov    (%eax),%edx
f0129c7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129c7d:	39 c2                	cmp    %eax,%edx
f0129c7f:	74 19                	je     f0129c9a <test_kshrink+0xa92>
f0129c81:	68 30 c3 13 f0       	push   $0xf013c330
f0129c86:	68 25 c2 13 f0       	push   $0xf013c225
f0129c8b:	68 66 0c 00 00       	push   $0xc66
f0129c90:	68 5a b4 13 f0       	push   $0xf013b45a
f0129c95:	e8 6b 65 fd ff       	call   f0100205 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0129c9a:	ff 45 f4             	incl   -0xc(%ebp)
f0129c9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129ca0:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0129ca6:	7e be                	jle    f0129c66 <test_kshrink+0xa5e>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0129ca8:	83 ec 0c             	sub    $0xc,%esp
f0129cab:	6a 03                	push   $0x3
f0129cad:	e8 47 38 fe ff       	call   f010d4f9 <sys_bypassPageFault>
f0129cb2:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f0129cb5:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129cbb:	89 45 8c             	mov    %eax,-0x74(%ebp)
		ptr[5*Mega] = 10;
f0129cbe:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129cc1:	05 00 00 50 00       	add    $0x500000,%eax
f0129cc6:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f0129cc9:	e8 19 38 fe ff       	call   f010d4e7 <sys_rcr2>
f0129cce:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129cd1:	81 c2 00 00 50 00    	add    $0x500000,%edx
f0129cd7:	39 d0                	cmp    %edx,%eax
f0129cd9:	74 19                	je     f0129cf4 <test_kshrink+0xaec>
f0129cdb:	68 3c c3 13 f0       	push   $0xf013c33c
f0129ce0:	68 25 c2 13 f0       	push   $0xf013c225
f0129ce5:	68 6f 0c 00 00       	push   $0xc6f
f0129cea:	68 5a b4 13 f0       	push   $0xf013b45a
f0129cef:	e8 11 65 fd ff       	call   f0100205 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f0129cf4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129cf7:	05 00 10 50 00       	add    $0x501000,%eax
f0129cfc:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f0129cff:	e8 e3 37 fe ff       	call   f010d4e7 <sys_rcr2>
f0129d04:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129d07:	81 c2 00 10 50 00    	add    $0x501000,%edx
f0129d0d:	39 d0                	cmp    %edx,%eax
f0129d0f:	74 19                	je     f0129d2a <test_kshrink+0xb22>
f0129d11:	68 64 c3 13 f0       	push   $0xf013c364
f0129d16:	68 25 c2 13 f0       	push   $0xf013c225
f0129d1b:	68 72 0c 00 00       	push   $0xc72
f0129d20:	68 5a b4 13 f0       	push   $0xf013b45a
f0129d25:	e8 db 64 fd ff       	call   f0100205 <_panic>

		ptr[6*Mega - kilo] = 10;
f0129d2a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129d2d:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f0129d32:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f0129d35:	e8 ad 37 fe ff       	call   f010d4e7 <sys_rcr2>
f0129d3a:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129d3d:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f0129d43:	39 d0                	cmp    %edx,%eax
f0129d45:	74 19                	je     f0129d60 <test_kshrink+0xb58>
f0129d47:	68 90 c3 13 f0       	push   $0xf013c390
f0129d4c:	68 25 c2 13 f0       	push   $0xf013c225
f0129d51:	68 75 0c 00 00       	push   $0xc75
f0129d56:	68 5a b4 13 f0       	push   $0xf013b45a
f0129d5b:	e8 a5 64 fd ff       	call   f0100205 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0129d60:	83 ec 0c             	sub    $0xc,%esp
f0129d63:	6a 00                	push   $0x0
f0129d65:	e8 8f 37 fe ff       	call   f010d4f9 <sys_bypassPageFault>
f0129d6a:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129d6d:	e8 e7 32 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129d72:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129d75:	e8 69 a0 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0129d7a:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f0129d7d:	83 ec 0c             	sub    $0xc,%esp
f0129d80:	68 00 00 20 00       	push   $0x200000
f0129d85:	e8 00 df fd ff       	call   f0107c8a <kshrink>
f0129d8a:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0129d8d:	e8 51 a0 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0129d92:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129d95:	74 19                	je     f0129db0 <test_kshrink+0xba8>
f0129d97:	68 f4 c1 13 f0       	push   $0xf013c1f4
f0129d9c:	68 25 c2 13 f0       	push   $0xf013c225
f0129da1:	68 82 0c 00 00       	push   $0xc82
f0129da6:	68 5a b4 13 f0       	push   $0xf013b45a
f0129dab:	e8 55 64 fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f0129db0:	e8 a4 32 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129db5:	89 c2                	mov    %eax,%edx
f0129db7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129dba:	29 c2                	sub    %eax,%edx
f0129dbc:	89 d0                	mov    %edx,%eax
f0129dbe:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129dc3:	74 19                	je     f0129dde <test_kshrink+0xbd6>
f0129dc5:	68 bc c3 13 f0       	push   $0xf013c3bc
f0129dca:	68 25 c2 13 f0       	push   $0xf013c225
f0129dcf:	68 83 0c 00 00       	push   $0xc83
f0129dd4:	68 5a b4 13 f0       	push   $0xf013b45a
f0129dd9:	e8 27 64 fd ff       	call   f0100205 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0129dde:	e8 76 32 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129de3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129de6:	e8 f8 9f fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0129deb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0129dee:	83 ec 0c             	sub    $0xc,%esp
f0129df1:	68 00 00 40 00       	push   $0x400000
f0129df6:	e8 35 dc fd ff       	call   f0107a30 <kmalloc>
f0129dfb:	83 c4 10             	add    $0x10,%esp
f0129dfe:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f0129e04:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0129e0b:	10 00 00 
f0129e0e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0129e14:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129e19:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0129e1f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129e25:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e2a:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0129e30:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129e36:	29 d0                	sub    %edx,%eax
f0129e38:	89 c1                	mov    %eax,%ecx
f0129e3a:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0129e41:	10 00 00 
f0129e44:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0129e49:	0f b6 d0             	movzbl %al,%edx
f0129e4c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0129e52:	01 d0                	add    %edx,%eax
f0129e54:	48                   	dec    %eax
f0129e55:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0129e5b:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129e61:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e66:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0129e6c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129e72:	29 d0                	sub    %edx,%eax
f0129e74:	01 c1                	add    %eax,%ecx
f0129e76:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0129e7d:	10 00 00 
f0129e80:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0129e85:	0f b6 c0             	movzbl %al,%eax
f0129e88:	c1 e0 04             	shl    $0x4,%eax
f0129e8b:	89 c2                	mov    %eax,%edx
f0129e8d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0129e93:	01 d0                	add    %edx,%eax
f0129e95:	48                   	dec    %eax
f0129e96:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0129e9c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129ea2:	ba 00 00 00 00       	mov    $0x0,%edx
f0129ea7:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0129ead:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129eb3:	29 d0                	sub    %edx,%eax
f0129eb5:	01 c8                	add    %ecx,%eax
f0129eb7:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f0129ebd:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0129ec3:	83 ec 04             	sub    $0x4,%esp
f0129ec6:	52                   	push   %edx
f0129ec7:	50                   	push   %eax
f0129ec8:	68 ec c3 13 f0       	push   $0xf013c3ec
f0129ecd:	e8 3c 6e fd ff       	call   f0100d0e <cprintf>
f0129ed2:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f0129ed5:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0129edb:	89 c1                	mov    %eax,%ecx
f0129edd:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0129ee4:	10 00 00 
f0129ee7:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129eed:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129ef2:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0129ef8:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129efe:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f03:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0129f09:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129f0f:	29 d0                	sub    %edx,%eax
f0129f11:	89 c3                	mov    %eax,%ebx
f0129f13:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0129f1a:	10 00 00 
f0129f1d:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0129f22:	0f b6 d0             	movzbl %al,%edx
f0129f25:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0129f2b:	01 d0                	add    %edx,%eax
f0129f2d:	48                   	dec    %eax
f0129f2e:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0129f34:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129f3a:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f3f:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0129f45:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129f4b:	29 d0                	sub    %edx,%eax
f0129f4d:	01 c3                	add    %eax,%ebx
f0129f4f:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0129f56:	10 00 00 
f0129f59:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0129f5e:	0f b6 c0             	movzbl %al,%eax
f0129f61:	c1 e0 04             	shl    $0x4,%eax
f0129f64:	89 c2                	mov    %eax,%edx
f0129f66:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0129f6c:	01 d0                	add    %edx,%eax
f0129f6e:	48                   	dec    %eax
f0129f6f:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0129f75:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129f7b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f80:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0129f86:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129f8c:	29 d0                	sub    %edx,%eax
f0129f8e:	01 d8                	add    %ebx,%eax
f0129f90:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f0129f95:	39 c1                	cmp    %eax,%ecx
f0129f97:	74 17                	je     f0129fb0 <test_kshrink+0xda8>
f0129f99:	83 ec 04             	sub    $0x4,%esp
f0129f9c:	68 08 c4 13 f0       	push   $0xf013c408
f0129fa1:	68 8e 0c 00 00       	push   $0xc8e
f0129fa6:	68 5a b4 13 f0       	push   $0xf013b45a
f0129fab:	e8 55 62 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129fb0:	e8 2e 9e fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0129fb5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129fb8:	74 17                	je     f0129fd1 <test_kshrink+0xdc9>
f0129fba:	83 ec 04             	sub    $0x4,%esp
f0129fbd:	68 74 b4 13 f0       	push   $0xf013b474
f0129fc2:	68 8f 0c 00 00       	push   $0xc8f
f0129fc7:	68 5a b4 13 f0       	push   $0xf013b45a
f0129fcc:	e8 34 62 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129fd1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129fd4:	e8 80 30 fe ff       	call   f010d059 <sys_calculate_free_frames>
f0129fd9:	29 c3                	sub    %eax,%ebx
f0129fdb:	89 d8                	mov    %ebx,%eax
f0129fdd:	3d 00 04 00 00       	cmp    $0x400,%eax
f0129fe2:	74 17                	je     f0129ffb <test_kshrink+0xdf3>
f0129fe4:	83 ec 04             	sub    $0x4,%esp
f0129fe7:	68 dc b4 13 f0       	push   $0xf013b4dc
f0129fec:	68 90 0c 00 00       	push   $0xc90
f0129ff1:	68 5a b4 13 f0       	push   $0xf013b45a
f0129ff6:	e8 0a 62 fd ff       	call   f0100205 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f0129ffb:	e8 59 30 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a000:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a003:	e8 db 9d fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012a008:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f012a00b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012a011:	83 ec 0c             	sub    $0xc,%esp
f012a014:	50                   	push   %eax
f012a015:	e8 ff da fd ff       	call   f0107b19 <kfree>
f012a01a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a01d:	e8 c1 9d fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012a022:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012a025:	74 17                	je     f012a03e <test_kshrink+0xe36>
f012a027:	83 ec 04             	sub    $0x4,%esp
f012a02a:	68 74 b4 13 f0       	push   $0xf013b474
f012a02f:	68 9a 0c 00 00       	push   $0xc9a
f012a034:	68 5a b4 13 f0       	push   $0xf013b45a
f012a039:	e8 c7 61 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012a03e:	e8 16 30 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a043:	89 c2                	mov    %eax,%edx
f012a045:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012a048:	29 c2                	sub    %eax,%edx
f012a04a:	89 d0                	mov    %edx,%eax
f012a04c:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a051:	74 17                	je     f012a06a <test_kshrink+0xe62>
f012a053:	83 ec 04             	sub    $0x4,%esp
f012a056:	68 0c bd 13 f0       	push   $0xf013bd0c
f012a05b:	68 9b 0c 00 00       	push   $0xc9b
f012a060:	68 5a b4 13 f0       	push   $0xf013b45a
f012a065:	e8 9b 61 fd ff       	call   f0100205 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f012a06a:	e8 ea 2f fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a06f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a072:	e8 6c 9d fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012a077:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f012a07a:	83 ec 0c             	sub    $0xc,%esp
f012a07d:	68 00 b0 3f 00       	push   $0x3fb000
f012a082:	e8 03 dc fd ff       	call   f0107c8a <kshrink>
f012a087:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f012a08a:	e8 54 9d fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012a08f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012a092:	74 19                	je     f012a0ad <test_kshrink+0xea5>
f012a094:	68 f4 c1 13 f0       	push   $0xf013c1f4
f012a099:	68 25 c2 13 f0       	push   $0xf013c225
f012a09e:	68 a5 0c 00 00       	push   $0xca5
f012a0a3:	68 5a b4 13 f0       	push   $0xf013b45a
f012a0a8:	e8 58 61 fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f012a0ad:	e8 a7 2f fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a0b2:	89 c2                	mov    %eax,%edx
f012a0b4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012a0b7:	29 c2                	sub    %eax,%edx
f012a0b9:	89 d0                	mov    %edx,%eax
f012a0bb:	83 f8 05             	cmp    $0x5,%eax
f012a0be:	74 19                	je     f012a0d9 <test_kshrink+0xed1>
f012a0c0:	68 5c c4 13 f0       	push   $0xf013c45c
f012a0c5:	68 25 c2 13 f0       	push   $0xf013c225
f012a0ca:	68 a6 0c 00 00       	push   $0xca6
f012a0cf:	68 5a b4 13 f0       	push   $0xf013b45a
f012a0d4:	e8 2c 61 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f012a0d9:	83 ec 0c             	sub    $0xc,%esp
f012a0dc:	68 b8 c1 13 f0       	push   $0xf013c1b8
f012a0e1:	e8 28 6c fd ff       	call   f0100d0e <cprintf>
f012a0e6:	83 c4 10             	add    $0x10,%esp

	return 1;
f012a0e9:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012a0ee:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012a0f1:	5b                   	pop    %ebx
f012a0f2:	5f                   	pop    %edi
f012a0f3:	5d                   	pop    %ebp
f012a0f4:	c3                   	ret    

f012a0f5 <test_kfreelast>:


int test_kfreelast()
{
f012a0f5:	55                   	push   %ebp
f012a0f6:	89 e5                	mov    %esp,%ebp
f012a0f8:	57                   	push   %edi
f012a0f9:	53                   	push   %ebx
f012a0fa:	81 ec 90 02 00 00    	sub    $0x290,%esp
	char minByte = 1<<7;
f012a100:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f012a104:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f012a108:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f012a10e:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f012a114:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f012a11b:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012a122:	e8 32 2f fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a127:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012a12a:	8d 95 0c fe ff ff    	lea    -0x1f4(%ebp),%edx
f012a130:	b9 14 00 00 00       	mov    $0x14,%ecx
f012a135:	b8 00 00 00 00       	mov    $0x0,%eax
f012a13a:	89 d7                	mov    %edx,%edi
f012a13c:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012a13e:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f012a144:	b9 14 00 00 00       	mov    $0x14,%ecx
f012a149:	b8 00 00 00 00       	mov    $0x0,%eax
f012a14e:	89 d7                	mov    %edx,%edi
f012a150:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012a152:	8d 95 6c fd ff ff    	lea    -0x294(%ebp),%edx
f012a158:	b9 14 00 00 00       	mov    $0x14,%ecx
f012a15d:	b8 00 00 00 00       	mov    $0x0,%eax
f012a162:	89 d7                	mov    %edx,%edi
f012a164:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012a166:	e8 ee 2e fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a16b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a16e:	e8 70 9c fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012a173:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012a176:	83 ec 0c             	sub    $0xc,%esp
f012a179:	68 00 fc 1f 00       	push   $0x1ffc00
f012a17e:	e8 ad d8 fd ff       	call   f0107a30 <kmalloc>
f012a183:	83 c4 10             	add    $0x10,%esp
f012a186:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a18c:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012a192:	89 c1                	mov    %eax,%ecx
f012a194:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f012a19b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012a19e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a1a3:	89 45 c8             	mov    %eax,-0x38(%ebp)
f012a1a6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012a1a9:	ba 00 00 00 00       	mov    $0x0,%edx
f012a1ae:	f7 75 cc             	divl   -0x34(%ebp)
f012a1b1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012a1b4:	29 d0                	sub    %edx,%eax
f012a1b6:	89 c3                	mov    %eax,%ebx
f012a1b8:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f012a1bf:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012a1c4:	0f b6 d0             	movzbl %al,%edx
f012a1c7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012a1ca:	01 d0                	add    %edx,%eax
f012a1cc:	48                   	dec    %eax
f012a1cd:	89 45 c0             	mov    %eax,-0x40(%ebp)
f012a1d0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012a1d3:	ba 00 00 00 00       	mov    $0x0,%edx
f012a1d8:	f7 75 c4             	divl   -0x3c(%ebp)
f012a1db:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012a1de:	29 d0                	sub    %edx,%eax
f012a1e0:	01 c3                	add    %eax,%ebx
f012a1e2:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012a1e9:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012a1ee:	0f b6 c0             	movzbl %al,%eax
f012a1f1:	c1 e0 04             	shl    $0x4,%eax
f012a1f4:	89 c2                	mov    %eax,%edx
f012a1f6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012a1f9:	01 d0                	add    %edx,%eax
f012a1fb:	48                   	dec    %eax
f012a1fc:	89 45 b8             	mov    %eax,-0x48(%ebp)
f012a1ff:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012a202:	ba 00 00 00 00       	mov    $0x0,%edx
f012a207:	f7 75 bc             	divl   -0x44(%ebp)
f012a20a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012a20d:	29 d0                	sub    %edx,%eax
f012a20f:	01 d8                	add    %ebx,%eax
f012a211:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012a216:	39 c1                	cmp    %eax,%ecx
f012a218:	74 17                	je     f012a231 <test_kfreelast+0x13c>
f012a21a:	83 ec 04             	sub    $0x4,%esp
f012a21d:	68 40 b5 13 f0       	push   $0xf013b540
f012a222:	68 ca 0c 00 00       	push   $0xcca
f012a227:	68 5a b4 13 f0       	push   $0xf013b45a
f012a22c:	e8 d4 5f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a231:	e8 ad 9b fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012a236:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a239:	74 17                	je     f012a252 <test_kfreelast+0x15d>
f012a23b:	83 ec 04             	sub    $0x4,%esp
f012a23e:	68 74 b4 13 f0       	push   $0xf013b474
f012a243:	68 cb 0c 00 00       	push   $0xccb
f012a248:	68 5a b4 13 f0       	push   $0xf013b45a
f012a24d:	e8 b3 5f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a252:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a255:	e8 ff 2d fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a25a:	29 c3                	sub    %eax,%ebx
f012a25c:	89 d8                	mov    %ebx,%eax
f012a25e:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a263:	74 17                	je     f012a27c <test_kfreelast+0x187>
f012a265:	83 ec 04             	sub    $0x4,%esp
f012a268:	68 dc b4 13 f0       	push   $0xf013b4dc
f012a26d:	68 cc 0c 00 00       	push   $0xccc
f012a272:	68 5a b4 13 f0       	push   $0xf013b45a
f012a277:	e8 89 5f fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012a27c:	c7 85 0c fe ff ff ff 	movl   $0x1ffbff,-0x1f4(%ebp)
f012a283:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012a286:	e8 ce 2d fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a28b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a28e:	e8 50 9b fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012a293:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012a296:	83 ec 0c             	sub    $0xc,%esp
f012a299:	68 00 fc 1f 00       	push   $0x1ffc00
f012a29e:	e8 8d d7 fd ff       	call   f0107a30 <kmalloc>
f012a2a3:	83 c4 10             	add    $0x10,%esp
f012a2a6:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a2ac:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012a2b2:	89 c1                	mov    %eax,%ecx
f012a2b4:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012a2bb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012a2be:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a2c3:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012a2c6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012a2c9:	ba 00 00 00 00       	mov    $0x0,%edx
f012a2ce:	f7 75 b4             	divl   -0x4c(%ebp)
f012a2d1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012a2d4:	29 d0                	sub    %edx,%eax
f012a2d6:	89 c3                	mov    %eax,%ebx
f012a2d8:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012a2df:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012a2e4:	0f b6 d0             	movzbl %al,%edx
f012a2e7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012a2ea:	01 d0                	add    %edx,%eax
f012a2ec:	48                   	dec    %eax
f012a2ed:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012a2f0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012a2f3:	ba 00 00 00 00       	mov    $0x0,%edx
f012a2f8:	f7 75 ac             	divl   -0x54(%ebp)
f012a2fb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012a2fe:	29 d0                	sub    %edx,%eax
f012a300:	01 c3                	add    %eax,%ebx
f012a302:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012a309:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012a30e:	0f b6 c0             	movzbl %al,%eax
f012a311:	c1 e0 04             	shl    $0x4,%eax
f012a314:	89 c2                	mov    %eax,%edx
f012a316:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012a319:	01 d0                	add    %edx,%eax
f012a31b:	48                   	dec    %eax
f012a31c:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012a31f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012a322:	ba 00 00 00 00       	mov    $0x0,%edx
f012a327:	f7 75 a4             	divl   -0x5c(%ebp)
f012a32a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012a32d:	29 d0                	sub    %edx,%eax
f012a32f:	01 d8                	add    %ebx,%eax
f012a331:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012a336:	39 c1                	cmp    %eax,%ecx
f012a338:	74 17                	je     f012a351 <test_kfreelast+0x25c>
f012a33a:	83 ec 04             	sub    $0x4,%esp
f012a33d:	68 40 b5 13 f0       	push   $0xf013b540
f012a342:	68 d3 0c 00 00       	push   $0xcd3
f012a347:	68 5a b4 13 f0       	push   $0xf013b45a
f012a34c:	e8 b4 5e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a351:	e8 8d 9a fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012a356:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a359:	74 17                	je     f012a372 <test_kfreelast+0x27d>
f012a35b:	83 ec 04             	sub    $0x4,%esp
f012a35e:	68 74 b4 13 f0       	push   $0xf013b474
f012a363:	68 d4 0c 00 00       	push   $0xcd4
f012a368:	68 5a b4 13 f0       	push   $0xf013b45a
f012a36d:	e8 93 5e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a372:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a375:	e8 df 2c fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a37a:	29 c3                	sub    %eax,%ebx
f012a37c:	89 d8                	mov    %ebx,%eax
f012a37e:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a383:	74 17                	je     f012a39c <test_kfreelast+0x2a7>
f012a385:	83 ec 04             	sub    $0x4,%esp
f012a388:	68 dc b4 13 f0       	push   $0xf013b4dc
f012a38d:	68 d5 0c 00 00       	push   $0xcd5
f012a392:	68 5a b4 13 f0       	push   $0xf013b45a
f012a397:	e8 69 5e fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012a39c:	c7 85 10 fe ff ff ff 	movl   $0x1ffbff,-0x1f0(%ebp)
f012a3a3:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012a3a6:	e8 ae 2c fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a3ab:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a3ae:	e8 30 9a fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012a3b3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012a3b6:	83 ec 0c             	sub    $0xc,%esp
f012a3b9:	68 00 08 00 00       	push   $0x800
f012a3be:	e8 6d d6 fd ff       	call   f0107a30 <kmalloc>
f012a3c3:	83 c4 10             	add    $0x10,%esp
f012a3c6:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a3cc:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012a3d2:	89 c1                	mov    %eax,%ecx
f012a3d4:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012a3db:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012a3de:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a3e3:	89 45 98             	mov    %eax,-0x68(%ebp)
f012a3e6:	8b 45 98             	mov    -0x68(%ebp),%eax
f012a3e9:	ba 00 00 00 00       	mov    $0x0,%edx
f012a3ee:	f7 75 9c             	divl   -0x64(%ebp)
f012a3f1:	8b 45 98             	mov    -0x68(%ebp),%eax
f012a3f4:	29 d0                	sub    %edx,%eax
f012a3f6:	89 c3                	mov    %eax,%ebx
f012a3f8:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012a3ff:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012a404:	0f b6 d0             	movzbl %al,%edx
f012a407:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012a40a:	01 d0                	add    %edx,%eax
f012a40c:	48                   	dec    %eax
f012a40d:	89 45 90             	mov    %eax,-0x70(%ebp)
f012a410:	8b 45 90             	mov    -0x70(%ebp),%eax
f012a413:	ba 00 00 00 00       	mov    $0x0,%edx
f012a418:	f7 75 94             	divl   -0x6c(%ebp)
f012a41b:	8b 45 90             	mov    -0x70(%ebp),%eax
f012a41e:	29 d0                	sub    %edx,%eax
f012a420:	01 c3                	add    %eax,%ebx
f012a422:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012a429:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012a42e:	0f b6 c0             	movzbl %al,%eax
f012a431:	c1 e0 04             	shl    $0x4,%eax
f012a434:	89 c2                	mov    %eax,%edx
f012a436:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012a439:	01 d0                	add    %edx,%eax
f012a43b:	48                   	dec    %eax
f012a43c:	89 45 88             	mov    %eax,-0x78(%ebp)
f012a43f:	8b 45 88             	mov    -0x78(%ebp),%eax
f012a442:	ba 00 00 00 00       	mov    $0x0,%edx
f012a447:	f7 75 8c             	divl   -0x74(%ebp)
f012a44a:	8b 45 88             	mov    -0x78(%ebp),%eax
f012a44d:	29 d0                	sub    %edx,%eax
f012a44f:	01 d8                	add    %ebx,%eax
f012a451:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012a456:	39 c1                	cmp    %eax,%ecx
f012a458:	74 17                	je     f012a471 <test_kfreelast+0x37c>
f012a45a:	83 ec 04             	sub    $0x4,%esp
f012a45d:	68 40 b5 13 f0       	push   $0xf013b540
f012a462:	68 dc 0c 00 00       	push   $0xcdc
f012a467:	68 5a b4 13 f0       	push   $0xf013b45a
f012a46c:	e8 94 5d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a471:	e8 6d 99 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012a476:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a479:	74 17                	je     f012a492 <test_kfreelast+0x39d>
f012a47b:	83 ec 04             	sub    $0x4,%esp
f012a47e:	68 74 b4 13 f0       	push   $0xf013b474
f012a483:	68 dd 0c 00 00       	push   $0xcdd
f012a488:	68 5a b4 13 f0       	push   $0xf013b45a
f012a48d:	e8 73 5d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a492:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a495:	e8 bf 2b fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a49a:	29 c3                	sub    %eax,%ebx
f012a49c:	89 d8                	mov    %ebx,%eax
f012a49e:	83 f8 01             	cmp    $0x1,%eax
f012a4a1:	74 17                	je     f012a4ba <test_kfreelast+0x3c5>
f012a4a3:	83 ec 04             	sub    $0x4,%esp
f012a4a6:	68 dc b4 13 f0       	push   $0xf013b4dc
f012a4ab:	68 de 0c 00 00       	push   $0xcde
f012a4b0:	68 5a b4 13 f0       	push   $0xf013b45a
f012a4b5:	e8 4b 5d fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012a4ba:	c7 85 14 fe ff ff ff 	movl   $0x7ff,-0x1ec(%ebp)
f012a4c1:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012a4c4:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012a4ca:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012a4cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a4d4:	eb 0e                	jmp    f012a4e4 <test_kfreelast+0x3ef>
		{
			ptr[i] = 2 ;
f012a4d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a4d9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a4dc:	01 d0                	add    %edx,%eax
f012a4de:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012a4e1:	ff 45 f4             	incl   -0xc(%ebp)
f012a4e4:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a4ea:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a4ed:	7f e7                	jg     f012a4d6 <test_kfreelast+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012a4ef:	e8 65 2b fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a4f4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a4f7:	e8 e7 98 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012a4fc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012a4ff:	83 ec 0c             	sub    $0xc,%esp
f012a502:	68 00 08 00 00       	push   $0x800
f012a507:	e8 24 d5 fd ff       	call   f0107a30 <kmalloc>
f012a50c:	83 c4 10             	add    $0x10,%esp
f012a50f:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a515:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a51b:	89 c1                	mov    %eax,%ecx
f012a51d:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012a524:	8b 45 80             	mov    -0x80(%ebp),%eax
f012a527:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a52c:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f012a532:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012a538:	ba 00 00 00 00       	mov    $0x0,%edx
f012a53d:	f7 75 80             	divl   -0x80(%ebp)
f012a540:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012a546:	29 d0                	sub    %edx,%eax
f012a548:	89 c3                	mov    %eax,%ebx
f012a54a:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f012a551:	10 00 00 
f012a554:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012a559:	0f b6 d0             	movzbl %al,%edx
f012a55c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012a562:	01 d0                	add    %edx,%eax
f012a564:	48                   	dec    %eax
f012a565:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012a56b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012a571:	ba 00 00 00 00       	mov    $0x0,%edx
f012a576:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012a57c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012a582:	29 d0                	sub    %edx,%eax
f012a584:	01 c3                	add    %eax,%ebx
f012a586:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f012a58d:	10 00 00 
f012a590:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012a595:	0f b6 c0             	movzbl %al,%eax
f012a598:	c1 e0 04             	shl    $0x4,%eax
f012a59b:	89 c2                	mov    %eax,%edx
f012a59d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012a5a3:	01 d0                	add    %edx,%eax
f012a5a5:	48                   	dec    %eax
f012a5a6:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012a5ac:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012a5b2:	ba 00 00 00 00       	mov    $0x0,%edx
f012a5b7:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012a5bd:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012a5c3:	29 d0                	sub    %edx,%eax
f012a5c5:	01 d8                	add    %ebx,%eax
f012a5c7:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012a5cc:	39 c1                	cmp    %eax,%ecx
f012a5ce:	74 17                	je     f012a5e7 <test_kfreelast+0x4f2>
f012a5d0:	83 ec 04             	sub    $0x4,%esp
f012a5d3:	68 40 b5 13 f0       	push   $0xf013b540
f012a5d8:	68 ea 0c 00 00       	push   $0xcea
f012a5dd:	68 5a b4 13 f0       	push   $0xf013b45a
f012a5e2:	e8 1e 5c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a5e7:	e8 f7 97 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012a5ec:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a5ef:	74 17                	je     f012a608 <test_kfreelast+0x513>
f012a5f1:	83 ec 04             	sub    $0x4,%esp
f012a5f4:	68 74 b4 13 f0       	push   $0xf013b474
f012a5f9:	68 eb 0c 00 00       	push   $0xceb
f012a5fe:	68 5a b4 13 f0       	push   $0xf013b45a
f012a603:	e8 fd 5b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a608:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a60b:	e8 49 2a fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a610:	29 c3                	sub    %eax,%ebx
f012a612:	89 d8                	mov    %ebx,%eax
f012a614:	83 f8 01             	cmp    $0x1,%eax
f012a617:	74 17                	je     f012a630 <test_kfreelast+0x53b>
f012a619:	83 ec 04             	sub    $0x4,%esp
f012a61c:	68 dc b4 13 f0       	push   $0xf013b4dc
f012a621:	68 ec 0c 00 00       	push   $0xcec
f012a626:	68 5a b4 13 f0       	push   $0xf013b45a
f012a62b:	e8 d5 5b fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012a630:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f012a637:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012a63a:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a640:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012a643:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a64a:	eb 0e                	jmp    f012a65a <test_kfreelast+0x565>
		{
			ptr[i] = 3 ;
f012a64c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a64f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a652:	01 d0                	add    %edx,%eax
f012a654:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012a657:	ff 45 f4             	incl   -0xc(%ebp)
f012a65a:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a660:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a663:	7f e7                	jg     f012a64c <test_kfreelast+0x557>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012a665:	e8 ef 29 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a66a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a66d:	e8 71 97 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012a672:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012a675:	83 ec 0c             	sub    $0xc,%esp
f012a678:	68 00 1c 00 00       	push   $0x1c00
f012a67d:	e8 ae d3 fd ff       	call   f0107a30 <kmalloc>
f012a682:	83 c4 10             	add    $0x10,%esp
f012a685:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a68b:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a691:	89 c1                	mov    %eax,%ecx
f012a693:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012a69a:	10 00 00 
f012a69d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012a6a3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a6a8:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012a6ae:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012a6b4:	ba 00 00 00 00       	mov    $0x0,%edx
f012a6b9:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012a6bf:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012a6c5:	29 d0                	sub    %edx,%eax
f012a6c7:	89 c3                	mov    %eax,%ebx
f012a6c9:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f012a6d0:	10 00 00 
f012a6d3:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012a6d8:	0f b6 d0             	movzbl %al,%edx
f012a6db:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012a6e1:	01 d0                	add    %edx,%eax
f012a6e3:	48                   	dec    %eax
f012a6e4:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f012a6ea:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012a6f0:	ba 00 00 00 00       	mov    $0x0,%edx
f012a6f5:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012a6fb:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012a701:	29 d0                	sub    %edx,%eax
f012a703:	01 c3                	add    %eax,%ebx
f012a705:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012a70c:	10 00 00 
f012a70f:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012a714:	0f b6 c0             	movzbl %al,%eax
f012a717:	c1 e0 04             	shl    $0x4,%eax
f012a71a:	89 c2                	mov    %eax,%edx
f012a71c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012a722:	01 d0                	add    %edx,%eax
f012a724:	48                   	dec    %eax
f012a725:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f012a72b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012a731:	ba 00 00 00 00       	mov    $0x0,%edx
f012a736:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012a73c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012a742:	29 d0                	sub    %edx,%eax
f012a744:	01 d8                	add    %ebx,%eax
f012a746:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012a74b:	39 c1                	cmp    %eax,%ecx
f012a74d:	74 17                	je     f012a766 <test_kfreelast+0x671>
f012a74f:	83 ec 04             	sub    $0x4,%esp
f012a752:	68 40 b5 13 f0       	push   $0xf013b540
f012a757:	68 f8 0c 00 00       	push   $0xcf8
f012a75c:	68 5a b4 13 f0       	push   $0xf013b45a
f012a761:	e8 9f 5a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a766:	e8 78 96 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012a76b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a76e:	74 17                	je     f012a787 <test_kfreelast+0x692>
f012a770:	83 ec 04             	sub    $0x4,%esp
f012a773:	68 74 b4 13 f0       	push   $0xf013b474
f012a778:	68 f9 0c 00 00       	push   $0xcf9
f012a77d:	68 5a b4 13 f0       	push   $0xf013b45a
f012a782:	e8 7e 5a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a787:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a78a:	e8 ca 28 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a78f:	29 c3                	sub    %eax,%ebx
f012a791:	89 d8                	mov    %ebx,%eax
f012a793:	83 f8 02             	cmp    $0x2,%eax
f012a796:	74 17                	je     f012a7af <test_kfreelast+0x6ba>
f012a798:	83 ec 04             	sub    $0x4,%esp
f012a79b:	68 dc b4 13 f0       	push   $0xf013b4dc
f012a7a0:	68 fa 0c 00 00       	push   $0xcfa
f012a7a5:	68 5a b4 13 f0       	push   $0xf013b45a
f012a7aa:	e8 56 5a fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012a7af:	c7 85 1c fe ff ff ff 	movl   $0x1bff,-0x1e4(%ebp)
f012a7b6:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012a7b9:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a7bf:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012a7c2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a7c9:	eb 0e                	jmp    f012a7d9 <test_kfreelast+0x6e4>
		{
			ptr[i] = 4 ;
f012a7cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a7ce:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a7d1:	01 d0                	add    %edx,%eax
f012a7d3:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012a7d6:	ff 45 f4             	incl   -0xc(%ebp)
f012a7d9:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012a7df:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a7e2:	7f e7                	jg     f012a7cb <test_kfreelast+0x6d6>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012a7e4:	e8 70 28 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a7e9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a7ec:	e8 f2 95 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012a7f1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012a7f4:	83 ec 0c             	sub    $0xc,%esp
f012a7f7:	68 00 fc 2f 00       	push   $0x2ffc00
f012a7fc:	e8 2f d2 fd ff       	call   f0107a30 <kmalloc>
f012a801:	83 c4 10             	add    $0x10,%esp
f012a804:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a80a:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a810:	89 c1                	mov    %eax,%ecx
f012a812:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f012a819:	10 00 00 
f012a81c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012a822:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a827:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012a82d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a833:	ba 00 00 00 00       	mov    $0x0,%edx
f012a838:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012a83e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a844:	29 d0                	sub    %edx,%eax
f012a846:	89 c3                	mov    %eax,%ebx
f012a848:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012a84f:	10 00 00 
f012a852:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012a857:	0f b6 d0             	movzbl %al,%edx
f012a85a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012a860:	01 d0                	add    %edx,%eax
f012a862:	48                   	dec    %eax
f012a863:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f012a869:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a86f:	ba 00 00 00 00       	mov    $0x0,%edx
f012a874:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012a87a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a880:	29 d0                	sub    %edx,%eax
f012a882:	01 c3                	add    %eax,%ebx
f012a884:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f012a88b:	10 00 00 
f012a88e:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012a893:	0f b6 c0             	movzbl %al,%eax
f012a896:	c1 e0 04             	shl    $0x4,%eax
f012a899:	89 c2                	mov    %eax,%edx
f012a89b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012a8a1:	01 d0                	add    %edx,%eax
f012a8a3:	48                   	dec    %eax
f012a8a4:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012a8aa:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a8b0:	ba 00 00 00 00       	mov    $0x0,%edx
f012a8b5:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f012a8bb:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a8c1:	29 d0                	sub    %edx,%eax
f012a8c3:	01 d8                	add    %ebx,%eax
f012a8c5:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012a8ca:	39 c1                	cmp    %eax,%ecx
f012a8cc:	74 17                	je     f012a8e5 <test_kfreelast+0x7f0>
f012a8ce:	83 ec 04             	sub    $0x4,%esp
f012a8d1:	68 40 b5 13 f0       	push   $0xf013b540
f012a8d6:	68 06 0d 00 00       	push   $0xd06
f012a8db:	68 5a b4 13 f0       	push   $0xf013b45a
f012a8e0:	e8 20 59 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a8e5:	e8 f9 94 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012a8ea:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a8ed:	74 17                	je     f012a906 <test_kfreelast+0x811>
f012a8ef:	83 ec 04             	sub    $0x4,%esp
f012a8f2:	68 74 b4 13 f0       	push   $0xf013b474
f012a8f7:	68 07 0d 00 00       	push   $0xd07
f012a8fc:	68 5a b4 13 f0       	push   $0xf013b45a
f012a901:	e8 ff 58 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a906:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a909:	e8 4b 27 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a90e:	29 c3                	sub    %eax,%ebx
f012a910:	89 d8                	mov    %ebx,%eax
f012a912:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a917:	74 17                	je     f012a930 <test_kfreelast+0x83b>
f012a919:	83 ec 04             	sub    $0x4,%esp
f012a91c:	68 dc b4 13 f0       	push   $0xf013b4dc
f012a921:	68 08 0d 00 00       	push   $0xd08
f012a926:	68 5a b4 13 f0       	push   $0xf013b45a
f012a92b:	e8 d5 58 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012a930:	c7 85 20 fe ff ff ff 	movl   $0x2ffbff,-0x1e0(%ebp)
f012a937:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012a93a:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a940:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012a943:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a94a:	eb 0e                	jmp    f012a95a <test_kfreelast+0x865>
		{
			ptr[i] = 5 ;
f012a94c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a94f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a952:	01 d0                	add    %edx,%eax
f012a954:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012a957:	ff 45 f4             	incl   -0xc(%ebp)
f012a95a:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012a960:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a963:	7f e7                	jg     f012a94c <test_kfreelast+0x857>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012a965:	e8 ef 26 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012a96a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a96d:	e8 71 94 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012a972:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012a975:	83 ec 0c             	sub    $0xc,%esp
f012a978:	68 00 fc 5f 00       	push   $0x5ffc00
f012a97d:	e8 ae d0 fd ff       	call   f0107a30 <kmalloc>
f012a982:	83 c4 10             	add    $0x10,%esp
f012a985:	89 85 84 fd ff ff    	mov    %eax,-0x27c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a98b:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012a991:	89 c1                	mov    %eax,%ecx
f012a993:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012a99a:	10 00 00 
f012a99d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a9a3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a9a8:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f012a9ae:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012a9b4:	ba 00 00 00 00       	mov    $0x0,%edx
f012a9b9:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f012a9bf:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012a9c5:	29 d0                	sub    %edx,%eax
f012a9c7:	89 c3                	mov    %eax,%ebx
f012a9c9:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f012a9d0:	10 00 00 
f012a9d3:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012a9d8:	0f b6 d0             	movzbl %al,%edx
f012a9db:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a9e1:	01 d0                	add    %edx,%eax
f012a9e3:	48                   	dec    %eax
f012a9e4:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f012a9ea:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a9f0:	ba 00 00 00 00       	mov    $0x0,%edx
f012a9f5:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012a9fb:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012aa01:	29 d0                	sub    %edx,%eax
f012aa03:	01 c3                	add    %eax,%ebx
f012aa05:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f012aa0c:	10 00 00 
f012aa0f:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012aa14:	0f b6 c0             	movzbl %al,%eax
f012aa17:	c1 e0 04             	shl    $0x4,%eax
f012aa1a:	89 c2                	mov    %eax,%edx
f012aa1c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012aa22:	01 d0                	add    %edx,%eax
f012aa24:	48                   	dec    %eax
f012aa25:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f012aa2b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012aa31:	ba 00 00 00 00       	mov    $0x0,%edx
f012aa36:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f012aa3c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012aa42:	29 d0                	sub    %edx,%eax
f012aa44:	01 d8                	add    %ebx,%eax
f012aa46:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012aa4b:	39 c1                	cmp    %eax,%ecx
f012aa4d:	74 17                	je     f012aa66 <test_kfreelast+0x971>
f012aa4f:	83 ec 04             	sub    $0x4,%esp
f012aa52:	68 40 b5 13 f0       	push   $0xf013b540
f012aa57:	68 14 0d 00 00       	push   $0xd14
f012aa5c:	68 5a b4 13 f0       	push   $0xf013b45a
f012aa61:	e8 9f 57 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012aa66:	e8 78 93 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012aa6b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012aa6e:	74 17                	je     f012aa87 <test_kfreelast+0x992>
f012aa70:	83 ec 04             	sub    $0x4,%esp
f012aa73:	68 74 b4 13 f0       	push   $0xf013b474
f012aa78:	68 15 0d 00 00       	push   $0xd15
f012aa7d:	68 5a b4 13 f0       	push   $0xf013b45a
f012aa82:	e8 7e 57 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012aa87:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012aa8a:	e8 ca 25 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012aa8f:	29 c3                	sub    %eax,%ebx
f012aa91:	89 d8                	mov    %ebx,%eax
f012aa93:	3d 00 06 00 00       	cmp    $0x600,%eax
f012aa98:	74 17                	je     f012aab1 <test_kfreelast+0x9bc>
f012aa9a:	83 ec 04             	sub    $0x4,%esp
f012aa9d:	68 dc b4 13 f0       	push   $0xf013b4dc
f012aaa2:	68 16 0d 00 00       	push   $0xd16
f012aaa7:	68 5a b4 13 f0       	push   $0xf013b45a
f012aaac:	e8 54 57 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f012aab1:	c7 85 24 fe ff ff ff 	movl   $0x5ffbff,-0x1dc(%ebp)
f012aab8:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012aabb:	e8 99 25 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012aac0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012aac3:	e8 1b 93 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012aac8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012aacb:	83 ec 0c             	sub    $0xc,%esp
f012aace:	68 00 38 00 00       	push   $0x3800
f012aad3:	e8 58 cf fd ff       	call   f0107a30 <kmalloc>
f012aad8:	83 c4 10             	add    $0x10,%esp
f012aadb:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012aae1:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012aae7:	89 c1                	mov    %eax,%ecx
f012aae9:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012aaf0:	10 00 00 
f012aaf3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012aaf9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012aafe:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012ab04:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012ab0a:	ba 00 00 00 00       	mov    $0x0,%edx
f012ab0f:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f012ab15:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012ab1b:	29 d0                	sub    %edx,%eax
f012ab1d:	89 c3                	mov    %eax,%ebx
f012ab1f:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012ab26:	10 00 00 
f012ab29:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012ab2e:	0f b6 d0             	movzbl %al,%edx
f012ab31:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012ab37:	01 d0                	add    %edx,%eax
f012ab39:	48                   	dec    %eax
f012ab3a:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f012ab40:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012ab46:	ba 00 00 00 00       	mov    $0x0,%edx
f012ab4b:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012ab51:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012ab57:	29 d0                	sub    %edx,%eax
f012ab59:	01 c3                	add    %eax,%ebx
f012ab5b:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f012ab62:	10 00 00 
f012ab65:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012ab6a:	0f b6 c0             	movzbl %al,%eax
f012ab6d:	c1 e0 04             	shl    $0x4,%eax
f012ab70:	89 c2                	mov    %eax,%edx
f012ab72:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012ab78:	01 d0                	add    %edx,%eax
f012ab7a:	48                   	dec    %eax
f012ab7b:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f012ab81:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012ab87:	ba 00 00 00 00       	mov    $0x0,%edx
f012ab8c:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f012ab92:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012ab98:	29 d0                	sub    %edx,%eax
f012ab9a:	01 d8                	add    %ebx,%eax
f012ab9c:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012aba1:	39 c1                	cmp    %eax,%ecx
f012aba3:	74 17                	je     f012abbc <test_kfreelast+0xac7>
f012aba5:	83 ec 04             	sub    $0x4,%esp
f012aba8:	68 40 b5 13 f0       	push   $0xf013b540
f012abad:	68 1d 0d 00 00       	push   $0xd1d
f012abb2:	68 5a b4 13 f0       	push   $0xf013b45a
f012abb7:	e8 49 56 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012abbc:	e8 22 92 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012abc1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012abc4:	74 17                	je     f012abdd <test_kfreelast+0xae8>
f012abc6:	83 ec 04             	sub    $0x4,%esp
f012abc9:	68 74 b4 13 f0       	push   $0xf013b474
f012abce:	68 1e 0d 00 00       	push   $0xd1e
f012abd3:	68 5a b4 13 f0       	push   $0xf013b45a
f012abd8:	e8 28 56 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012abdd:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012abe0:	e8 74 24 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012abe5:	29 c3                	sub    %eax,%ebx
f012abe7:	89 d8                	mov    %ebx,%eax
f012abe9:	83 f8 04             	cmp    $0x4,%eax
f012abec:	74 17                	je     f012ac05 <test_kfreelast+0xb10>
f012abee:	83 ec 04             	sub    $0x4,%esp
f012abf1:	68 dc b4 13 f0       	push   $0xf013b4dc
f012abf6:	68 1f 0d 00 00       	push   $0xd1f
f012abfb:	68 5a b4 13 f0       	push   $0xf013b45a
f012ac00:	e8 00 56 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012ac05:	c7 85 28 fe ff ff ff 	movl   $0x37ff,-0x1d8(%ebp)
f012ac0c:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012ac0f:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012ac15:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012ac18:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ac1f:	eb 0e                	jmp    f012ac2f <test_kfreelast+0xb3a>
		{
			ptr[i] = 7 ;
f012ac21:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ac24:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ac27:	01 d0                	add    %edx,%eax
f012ac29:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012ac2c:	ff 45 f4             	incl   -0xc(%ebp)
f012ac2f:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012ac35:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ac38:	7f e7                	jg     f012ac21 <test_kfreelast+0xb2c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012ac3a:	e8 1a 24 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012ac3f:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012ac45:	e8 99 91 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012ac4a:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[0]);
f012ac50:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012ac56:	83 ec 0c             	sub    $0xc,%esp
f012ac59:	50                   	push   %eax
f012ac5a:	e8 ba ce fd ff       	call   f0107b19 <kfree>
f012ac5f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012ac62:	e8 7c 91 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012ac67:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012ac6d:	74 17                	je     f012ac86 <test_kfreelast+0xb91>
f012ac6f:	83 ec 04             	sub    $0x4,%esp
f012ac72:	68 74 b4 13 f0       	push   $0xf013b474
f012ac77:	68 2e 0d 00 00       	push   $0xd2e
f012ac7c:	68 5a b4 13 f0       	push   $0xf013b45a
f012ac81:	e8 7f 55 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012ac86:	e8 ce 23 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012ac8b:	89 c2                	mov    %eax,%edx
f012ac8d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ac93:	29 c2                	sub    %eax,%edx
f012ac95:	89 d0                	mov    %edx,%eax
f012ac97:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ac9c:	74 17                	je     f012acb5 <test_kfreelast+0xbc0>
f012ac9e:	83 ec 04             	sub    $0x4,%esp
f012aca1:	68 e4 bb 13 f0       	push   $0xf013bbe4
f012aca6:	68 2f 0d 00 00       	push   $0xd2f
f012acab:	68 5a b4 13 f0       	push   $0xf013b45a
f012acb0:	e8 50 55 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012acb5:	e8 9f 23 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012acba:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012acc0:	e8 1e 91 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012acc5:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[1]);
f012accb:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012acd1:	83 ec 0c             	sub    $0xc,%esp
f012acd4:	50                   	push   %eax
f012acd5:	e8 3f ce fd ff       	call   f0107b19 <kfree>
f012acda:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012acdd:	e8 01 91 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012ace2:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012ace8:	74 17                	je     f012ad01 <test_kfreelast+0xc0c>
f012acea:	83 ec 04             	sub    $0x4,%esp
f012aced:	68 74 b4 13 f0       	push   $0xf013b474
f012acf2:	68 35 0d 00 00       	push   $0xd35
f012acf7:	68 5a b4 13 f0       	push   $0xf013b45a
f012acfc:	e8 04 55 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012ad01:	e8 53 23 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012ad06:	89 c2                	mov    %eax,%edx
f012ad08:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ad0e:	29 c2                	sub    %eax,%edx
f012ad10:	89 d0                	mov    %edx,%eax
f012ad12:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ad17:	74 17                	je     f012ad30 <test_kfreelast+0xc3b>
f012ad19:	83 ec 04             	sub    $0x4,%esp
f012ad1c:	68 e4 bb 13 f0       	push   $0xf013bbe4
f012ad21:	68 36 0d 00 00       	push   $0xd36
f012ad26:	68 5a b4 13 f0       	push   $0xf013b45a
f012ad2b:	e8 d5 54 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012ad30:	e8 24 23 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012ad35:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ad3b:	e8 a3 90 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012ad40:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[6]);
f012ad46:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012ad4c:	83 ec 0c             	sub    $0xc,%esp
f012ad4f:	50                   	push   %eax
f012ad50:	e8 c4 cd fd ff       	call   f0107b19 <kfree>
f012ad55:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012ad58:	e8 86 90 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012ad5d:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012ad63:	74 17                	je     f012ad7c <test_kfreelast+0xc87>
f012ad65:	83 ec 04             	sub    $0x4,%esp
f012ad68:	68 74 b4 13 f0       	push   $0xf013b474
f012ad6d:	68 3c 0d 00 00       	push   $0xd3c
f012ad72:	68 5a b4 13 f0       	push   $0xf013b45a
f012ad77:	e8 89 54 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012ad7c:	e8 d8 22 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012ad81:	89 c2                	mov    %eax,%edx
f012ad83:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ad89:	29 c2                	sub    %eax,%edx
f012ad8b:	89 d0                	mov    %edx,%eax
f012ad8d:	3d 00 06 00 00       	cmp    $0x600,%eax
f012ad92:	74 17                	je     f012adab <test_kfreelast+0xcb6>
f012ad94:	83 ec 04             	sub    $0x4,%esp
f012ad97:	68 e4 bb 13 f0       	push   $0xf013bbe4
f012ad9c:	68 3d 0d 00 00       	push   $0xd3d
f012ada1:	68 5a b4 13 f0       	push   $0xf013b45a
f012ada6:	e8 5a 54 fd ff       	call   f0100205 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f012adab:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012adb1:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012adb4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012adbb:	eb 1e                	jmp    f012addb <test_kfreelast+0xce6>
		{
			sums[2] += ptr[i] ;
f012adbd:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012adc3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012adc6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012adc9:	01 c8                	add    %ecx,%eax
f012adcb:	8a 00                	mov    (%eax),%al
f012adcd:	0f be c0             	movsbl %al,%eax
f012add0:	01 d0                	add    %edx,%eax
f012add2:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012add8:	ff 45 f4             	incl   -0xc(%ebp)
f012addb:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012ade1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ade4:	7f d7                	jg     f012adbd <test_kfreelast+0xcc8>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f012ade6:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012adec:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012adf2:	01 c0                	add    %eax,%eax
f012adf4:	39 c2                	cmp    %eax,%edx
f012adf6:	74 17                	je     f012ae0f <test_kfreelast+0xd1a>
f012adf8:	83 ec 04             	sub    $0x4,%esp
f012adfb:	68 40 bc 13 f0       	push   $0xf013bc40
f012ae00:	68 48 0d 00 00       	push   $0xd48
f012ae05:	68 5a b4 13 f0       	push   $0xf013b45a
f012ae0a:	e8 f6 53 fd ff       	call   f0100205 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f012ae0f:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012ae15:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012ae18:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ae1f:	eb 1e                	jmp    f012ae3f <test_kfreelast+0xd4a>
		{
			sums[3] += ptr[i] ;
f012ae21:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012ae27:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ae2a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ae2d:	01 c8                	add    %ecx,%eax
f012ae2f:	8a 00                	mov    (%eax),%al
f012ae31:	0f be c0             	movsbl %al,%eax
f012ae34:	01 d0                	add    %edx,%eax
f012ae36:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012ae3c:	ff 45 f4             	incl   -0xc(%ebp)
f012ae3f:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012ae45:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ae48:	7f d7                	jg     f012ae21 <test_kfreelast+0xd2c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012ae4a:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012ae50:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012ae56:	89 c1                	mov    %eax,%ecx
f012ae58:	01 c9                	add    %ecx,%ecx
f012ae5a:	01 c8                	add    %ecx,%eax
f012ae5c:	39 c2                	cmp    %eax,%edx
f012ae5e:	74 17                	je     f012ae77 <test_kfreelast+0xd82>
f012ae60:	83 ec 04             	sub    $0x4,%esp
f012ae63:	68 40 bc 13 f0       	push   $0xf013bc40
f012ae68:	68 50 0d 00 00       	push   $0xd50
f012ae6d:	68 5a b4 13 f0       	push   $0xf013b45a
f012ae72:	e8 8e 53 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012ae77:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012ae7d:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012ae80:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ae87:	eb 1e                	jmp    f012aea7 <test_kfreelast+0xdb2>
		{
			sums[4] += ptr[i] ;
f012ae89:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012ae8f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ae92:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ae95:	01 c8                	add    %ecx,%eax
f012ae97:	8a 00                	mov    (%eax),%al
f012ae99:	0f be c0             	movsbl %al,%eax
f012ae9c:	01 d0                	add    %edx,%eax
f012ae9e:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012aea4:	ff 45 f4             	incl   -0xc(%ebp)
f012aea7:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012aead:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aeb0:	7f d7                	jg     f012ae89 <test_kfreelast+0xd94>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012aeb2:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012aeb8:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f012aebe:	c1 e2 02             	shl    $0x2,%edx
f012aec1:	39 d0                	cmp    %edx,%eax
f012aec3:	74 17                	je     f012aedc <test_kfreelast+0xde7>
f012aec5:	83 ec 04             	sub    $0x4,%esp
f012aec8:	68 40 bc 13 f0       	push   $0xf013bc40
f012aecd:	68 58 0d 00 00       	push   $0xd58
f012aed2:	68 5a b4 13 f0       	push   $0xf013b45a
f012aed7:	e8 29 53 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012aedc:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012aee2:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012aee5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aeec:	eb 1e                	jmp    f012af0c <test_kfreelast+0xe17>
		{
			sums[5] += ptr[i] ;
f012aeee:	8b 95 d0 fd ff ff    	mov    -0x230(%ebp),%edx
f012aef4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012aef7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aefa:	01 c8                	add    %ecx,%eax
f012aefc:	8a 00                	mov    (%eax),%al
f012aefe:	0f be c0             	movsbl %al,%eax
f012af01:	01 d0                	add    %edx,%eax
f012af03:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012af09:	ff 45 f4             	incl   -0xc(%ebp)
f012af0c:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012af12:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012af15:	7f d7                	jg     f012aeee <test_kfreelast+0xdf9>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012af17:	8b 8d d0 fd ff ff    	mov    -0x230(%ebp),%ecx
f012af1d:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f012af23:	89 d0                	mov    %edx,%eax
f012af25:	c1 e0 02             	shl    $0x2,%eax
f012af28:	01 d0                	add    %edx,%eax
f012af2a:	39 c1                	cmp    %eax,%ecx
f012af2c:	74 17                	je     f012af45 <test_kfreelast+0xe50>
f012af2e:	83 ec 04             	sub    $0x4,%esp
f012af31:	68 40 bc 13 f0       	push   $0xf013bc40
f012af36:	68 60 0d 00 00       	push   $0xd60
f012af3b:	68 5a b4 13 f0       	push   $0xf013b45a
f012af40:	e8 c0 52 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012af45:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012af4b:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012af4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012af55:	eb 1e                	jmp    f012af75 <test_kfreelast+0xe80>
		{
			sums[7] += ptr[i] ;
f012af57:	8b 95 d8 fd ff ff    	mov    -0x228(%ebp),%edx
f012af5d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012af60:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012af63:	01 c8                	add    %ecx,%eax
f012af65:	8a 00                	mov    (%eax),%al
f012af67:	0f be c0             	movsbl %al,%eax
f012af6a:	01 d0                	add    %edx,%eax
f012af6c:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012af72:	ff 45 f4             	incl   -0xc(%ebp)
f012af75:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012af7b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012af7e:	7f d7                	jg     f012af57 <test_kfreelast+0xe62>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012af80:	8b 8d d8 fd ff ff    	mov    -0x228(%ebp),%ecx
f012af86:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f012af8c:	89 d0                	mov    %edx,%eax
f012af8e:	01 c0                	add    %eax,%eax
f012af90:	01 d0                	add    %edx,%eax
f012af92:	01 c0                	add    %eax,%eax
f012af94:	01 d0                	add    %edx,%eax
f012af96:	39 c1                	cmp    %eax,%ecx
f012af98:	74 17                	je     f012afb1 <test_kfreelast+0xebc>
f012af9a:	83 ec 04             	sub    $0x4,%esp
f012af9d:	68 40 bc 13 f0       	push   $0xf013bc40
f012afa2:	68 68 0d 00 00       	push   $0xd68
f012afa7:	68 5a b4 13 f0       	push   $0xf013b45a
f012afac:	e8 54 52 fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f012afb1:	e8 a3 20 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012afb6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012afb9:	e8 25 8e fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012afbe:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f012afc1:	83 ec 0c             	sub    $0xc,%esp
f012afc4:	68 00 50 00 00       	push   $0x5000
f012afc9:	e8 62 ca fd ff       	call   f0107a30 <kmalloc>
f012afce:	83 c4 10             	add    $0x10,%esp
f012afd1:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012afd7:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012afdd:	89 c1                	mov    %eax,%ecx
f012afdf:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f012afe6:	10 00 00 
f012afe9:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012afef:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012aff4:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f012affa:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012b000:	ba 00 00 00 00       	mov    $0x0,%edx
f012b005:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f012b00b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012b011:	29 d0                	sub    %edx,%eax
f012b013:	89 c3                	mov    %eax,%ebx
f012b015:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012b01c:	10 00 00 
f012b01f:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012b024:	0f b6 d0             	movzbl %al,%edx
f012b027:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012b02d:	01 d0                	add    %edx,%eax
f012b02f:	48                   	dec    %eax
f012b030:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f012b036:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012b03c:	ba 00 00 00 00       	mov    $0x0,%edx
f012b041:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f012b047:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012b04d:	29 d0                	sub    %edx,%eax
f012b04f:	01 c3                	add    %eax,%ebx
f012b051:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f012b058:	10 00 00 
f012b05b:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012b060:	0f b6 c0             	movzbl %al,%eax
f012b063:	c1 e0 04             	shl    $0x4,%eax
f012b066:	89 c2                	mov    %eax,%edx
f012b068:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012b06e:	01 d0                	add    %edx,%eax
f012b070:	48                   	dec    %eax
f012b071:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f012b077:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012b07d:	ba 00 00 00 00       	mov    $0x0,%edx
f012b082:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f012b088:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012b08e:	29 d0                	sub    %edx,%eax
f012b090:	01 d8                	add    %ebx,%eax
f012b092:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012b097:	39 c1                	cmp    %eax,%ecx
f012b099:	74 17                	je     f012b0b2 <test_kfreelast+0xfbd>
f012b09b:	83 ec 04             	sub    $0x4,%esp
f012b09e:	68 40 b5 13 f0       	push   $0xf013b540
f012b0a3:	68 71 0d 00 00       	push   $0xd71
f012b0a8:	68 5a b4 13 f0       	push   $0xf013b45a
f012b0ad:	e8 53 51 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b0b2:	e8 2c 8d fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012b0b7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b0ba:	74 17                	je     f012b0d3 <test_kfreelast+0xfde>
f012b0bc:	83 ec 04             	sub    $0x4,%esp
f012b0bf:	68 74 b4 13 f0       	push   $0xf013b474
f012b0c4:	68 72 0d 00 00       	push   $0xd72
f012b0c9:	68 5a b4 13 f0       	push   $0xf013b45a
f012b0ce:	e8 32 51 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f012b0d3:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b0d6:	e8 7e 1f fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b0db:	29 c3                	sub    %eax,%ebx
f012b0dd:	89 d8                	mov    %ebx,%eax
f012b0df:	83 f8 05             	cmp    $0x5,%eax
f012b0e2:	74 17                	je     f012b0fb <test_kfreelast+0x1006>
f012b0e4:	83 ec 04             	sub    $0x4,%esp
f012b0e7:	68 dc b4 13 f0       	push   $0xf013b4dc
f012b0ec:	68 73 0d 00 00       	push   $0xd73
f012b0f1:	68 5a b4 13 f0       	push   $0xf013b45a
f012b0f6:	e8 0a 51 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f012b0fb:	c7 85 2c fe ff ff ff 	movl   $0x4fff,-0x1d4(%ebp)
f012b102:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f012b105:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012b10b:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012b10e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b115:	eb 0e                	jmp    f012b125 <test_kfreelast+0x1030>
		{
			ptr[i] = 8 ;
f012b117:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b11a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b11d:	01 d0                	add    %edx,%eax
f012b11f:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012b122:	ff 45 f4             	incl   -0xc(%ebp)
f012b125:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012b12b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b12e:	7f e7                	jg     f012b117 <test_kfreelast+0x1022>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b130:	e8 24 1f fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b135:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b138:	e8 a6 8c fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012b13d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012b140:	83 ec 0c             	sub    $0xc,%esp
f012b143:	68 00 00 10 00       	push   $0x100000
f012b148:	e8 e3 c8 fd ff       	call   f0107a30 <kmalloc>
f012b14d:	83 c4 10             	add    $0x10,%esp
f012b150:	89 85 90 fd ff ff    	mov    %eax,-0x270(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012b156:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012b15c:	89 c1                	mov    %eax,%ecx
f012b15e:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f012b165:	10 00 00 
f012b168:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012b16e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b173:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012b179:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012b17f:	ba 00 00 00 00       	mov    $0x0,%edx
f012b184:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012b18a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012b190:	29 d0                	sub    %edx,%eax
f012b192:	89 c3                	mov    %eax,%ebx
f012b194:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012b19b:	10 00 00 
f012b19e:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012b1a3:	0f b6 d0             	movzbl %al,%edx
f012b1a6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012b1ac:	01 d0                	add    %edx,%eax
f012b1ae:	48                   	dec    %eax
f012b1af:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012b1b5:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012b1bb:	ba 00 00 00 00       	mov    $0x0,%edx
f012b1c0:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012b1c6:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012b1cc:	29 d0                	sub    %edx,%eax
f012b1ce:	01 c3                	add    %eax,%ebx
f012b1d0:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f012b1d7:	10 00 00 
f012b1da:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012b1df:	0f b6 c0             	movzbl %al,%eax
f012b1e2:	c1 e0 04             	shl    $0x4,%eax
f012b1e5:	89 c2                	mov    %eax,%edx
f012b1e7:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012b1ed:	01 d0                	add    %edx,%eax
f012b1ef:	48                   	dec    %eax
f012b1f0:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f012b1f6:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012b1fc:	ba 00 00 00 00       	mov    $0x0,%edx
f012b201:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f012b207:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012b20d:	29 d0                	sub    %edx,%eax
f012b20f:	01 d8                	add    %ebx,%eax
f012b211:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012b216:	39 c1                	cmp    %eax,%ecx
f012b218:	74 17                	je     f012b231 <test_kfreelast+0x113c>
f012b21a:	83 ec 04             	sub    $0x4,%esp
f012b21d:	68 40 b5 13 f0       	push   $0xf013b540
f012b222:	68 7f 0d 00 00       	push   $0xd7f
f012b227:	68 5a b4 13 f0       	push   $0xf013b45a
f012b22c:	e8 d4 4f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b231:	e8 ad 8b fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012b236:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b239:	74 17                	je     f012b252 <test_kfreelast+0x115d>
f012b23b:	83 ec 04             	sub    $0x4,%esp
f012b23e:	68 74 b4 13 f0       	push   $0xf013b474
f012b243:	68 80 0d 00 00       	push   $0xd80
f012b248:	68 5a b4 13 f0       	push   $0xf013b45a
f012b24d:	e8 b3 4f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012b252:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b255:	e8 ff 1d fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b25a:	29 c3                	sub    %eax,%ebx
f012b25c:	89 d8                	mov    %ebx,%eax
f012b25e:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b263:	74 17                	je     f012b27c <test_kfreelast+0x1187>
f012b265:	83 ec 04             	sub    $0x4,%esp
f012b268:	68 dc b4 13 f0       	push   $0xf013b4dc
f012b26d:	68 81 0d 00 00       	push   $0xd81
f012b272:	68 5a b4 13 f0       	push   $0xf013b45a
f012b277:	e8 89 4f fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f012b27c:	c7 85 30 fe ff ff ff 	movl   $0xfffff,-0x1d0(%ebp)
f012b283:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012b286:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012b28c:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012b28f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b296:	eb 0e                	jmp    f012b2a6 <test_kfreelast+0x11b1>
		{
			ptr[i] = 9 ;
f012b298:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b29b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b29e:	01 d0                	add    %edx,%eax
f012b2a0:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012b2a3:	ff 45 f4             	incl   -0xc(%ebp)
f012b2a6:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012b2ac:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b2af:	7f e7                	jg     f012b298 <test_kfreelast+0x11a3>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f012b2b1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b2b8:	e8 9c 1d fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b2bd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b2c0:	e8 1e 8b fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012b2c5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012b2c8:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012b2ce:	83 ec 0c             	sub    $0xc,%esp
f012b2d1:	50                   	push   %eax
f012b2d2:	e8 42 c8 fd ff       	call   f0107b19 <kfree>
f012b2d7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b2da:	e8 04 8b fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012b2df:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b2e2:	74 17                	je     f012b2fb <test_kfreelast+0x1206>
f012b2e4:	83 ec 04             	sub    $0x4,%esp
f012b2e7:	68 74 b4 13 f0       	push   $0xf013b474
f012b2ec:	68 91 0d 00 00       	push   $0xd91
f012b2f1:	68 5a b4 13 f0       	push   $0xf013b45a
f012b2f6:	e8 0a 4f fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f012b2fb:	e8 59 1d fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b300:	89 c2                	mov    %eax,%edx
f012b302:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b305:	29 c2                	sub    %eax,%edx
f012b307:	89 d0                	mov    %edx,%eax
f012b309:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b30e:	74 17                	je     f012b327 <test_kfreelast+0x1232>
f012b310:	83 ec 04             	sub    $0x4,%esp
f012b313:	68 e4 bb 13 f0       	push   $0xf013bbe4
f012b318:	68 92 0d 00 00       	push   $0xd92
f012b31d:	68 5a b4 13 f0       	push   $0xf013b45a
f012b322:	e8 de 4e fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f012b327:	e8 2d 1d fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b32c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b32f:	e8 af 8a fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012b334:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f012b337:	83 ec 0c             	sub    $0xc,%esp
f012b33a:	68 00 78 00 00       	push   $0x7800
f012b33f:	e8 ec c6 fd ff       	call   f0107a30 <kmalloc>
f012b344:	83 c4 10             	add    $0x10,%esp
f012b347:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012b34d:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012b353:	89 c1                	mov    %eax,%ecx
f012b355:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f012b35c:	10 00 00 
f012b35f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012b365:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b36a:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f012b370:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012b376:	ba 00 00 00 00       	mov    $0x0,%edx
f012b37b:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f012b381:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012b387:	29 d0                	sub    %edx,%eax
f012b389:	89 c3                	mov    %eax,%ebx
f012b38b:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f012b392:	10 00 00 
f012b395:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012b39a:	0f b6 d0             	movzbl %al,%edx
f012b39d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012b3a3:	01 d0                	add    %edx,%eax
f012b3a5:	48                   	dec    %eax
f012b3a6:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f012b3ac:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012b3b2:	ba 00 00 00 00       	mov    $0x0,%edx
f012b3b7:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f012b3bd:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012b3c3:	29 d0                	sub    %edx,%eax
f012b3c5:	01 c3                	add    %eax,%ebx
f012b3c7:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f012b3ce:	10 00 00 
f012b3d1:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012b3d6:	0f b6 c0             	movzbl %al,%eax
f012b3d9:	c1 e0 04             	shl    $0x4,%eax
f012b3dc:	89 c2                	mov    %eax,%edx
f012b3de:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b3e4:	01 d0                	add    %edx,%eax
f012b3e6:	48                   	dec    %eax
f012b3e7:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f012b3ed:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012b3f3:	ba 00 00 00 00       	mov    $0x0,%edx
f012b3f8:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f012b3fe:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012b404:	29 d0                	sub    %edx,%eax
f012b406:	01 d8                	add    %ebx,%eax
f012b408:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012b40d:	39 c1                	cmp    %eax,%ecx
f012b40f:	74 17                	je     f012b428 <test_kfreelast+0x1333>
f012b411:	83 ec 04             	sub    $0x4,%esp
f012b414:	68 40 b5 13 f0       	push   $0xf013b540
f012b419:	68 9b 0d 00 00       	push   $0xd9b
f012b41e:	68 5a b4 13 f0       	push   $0xf013b45a
f012b423:	e8 dd 4d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b428:	e8 b6 89 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012b42d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b430:	74 17                	je     f012b449 <test_kfreelast+0x1354>
f012b432:	83 ec 04             	sub    $0x4,%esp
f012b435:	68 74 b4 13 f0       	push   $0xf013b474
f012b43a:	68 9c 0d 00 00       	push   $0xd9c
f012b43f:	68 5a b4 13 f0       	push   $0xf013b45a
f012b444:	e8 bc 4d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f012b449:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b44c:	e8 08 1c fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b451:	29 c3                	sub    %eax,%ebx
f012b453:	89 d8                	mov    %ebx,%eax
f012b455:	83 f8 08             	cmp    $0x8,%eax
f012b458:	74 17                	je     f012b471 <test_kfreelast+0x137c>
f012b45a:	83 ec 04             	sub    $0x4,%esp
f012b45d:	68 dc b4 13 f0       	push   $0xf013b4dc
f012b462:	68 9d 0d 00 00       	push   $0xd9d
f012b467:	68 5a b4 13 f0       	push   $0xf013b45a
f012b46c:	e8 94 4d fd ff       	call   f0100205 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f012b471:	c7 85 34 fe ff ff ff 	movl   $0x77ff,-0x1cc(%ebp)
f012b478:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f012b47b:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012b481:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f012b484:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b48b:	eb 0e                	jmp    f012b49b <test_kfreelast+0x13a6>
		{
			ptr[i] = 10 ;
f012b48d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b490:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b493:	01 d0                	add    %edx,%eax
f012b495:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f012b498:	ff 45 f4             	incl   -0xc(%ebp)
f012b49b:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012b4a1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b4a4:	7f e7                	jg     f012b48d <test_kfreelast+0x1398>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b4a6:	e8 ae 1b fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b4ab:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b4ae:	e8 30 89 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012b4b3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f012b4b6:	83 ec 0c             	sub    $0xc,%esp
f012b4b9:	68 00 00 10 00       	push   $0x100000
f012b4be:	e8 6d c5 fd ff       	call   f0107a30 <kmalloc>
f012b4c3:	83 c4 10             	add    $0x10,%esp
f012b4c6:	89 85 98 fd ff ff    	mov    %eax,-0x268(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012b4cc:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b4d2:	89 c1                	mov    %eax,%ecx
f012b4d4:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f012b4db:	10 00 00 
f012b4de:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b4e4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b4e9:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f012b4ef:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b4f5:	ba 00 00 00 00       	mov    $0x0,%edx
f012b4fa:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f012b500:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b506:	29 d0                	sub    %edx,%eax
f012b508:	89 c3                	mov    %eax,%ebx
f012b50a:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f012b511:	10 00 00 
f012b514:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012b519:	0f b6 d0             	movzbl %al,%edx
f012b51c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012b522:	01 d0                	add    %edx,%eax
f012b524:	48                   	dec    %eax
f012b525:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f012b52b:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b531:	ba 00 00 00 00       	mov    $0x0,%edx
f012b536:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f012b53c:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b542:	29 d0                	sub    %edx,%eax
f012b544:	01 c3                	add    %eax,%ebx
f012b546:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f012b54d:	10 00 00 
f012b550:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012b555:	0f b6 c0             	movzbl %al,%eax
f012b558:	c1 e0 04             	shl    $0x4,%eax
f012b55b:	89 c2                	mov    %eax,%edx
f012b55d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012b563:	01 d0                	add    %edx,%eax
f012b565:	48                   	dec    %eax
f012b566:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012b56c:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012b572:	ba 00 00 00 00       	mov    $0x0,%edx
f012b577:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f012b57d:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012b583:	29 d0                	sub    %edx,%eax
f012b585:	01 d8                	add    %ebx,%eax
f012b587:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f012b58c:	39 c1                	cmp    %eax,%ecx
f012b58e:	74 17                	je     f012b5a7 <test_kfreelast+0x14b2>
f012b590:	83 ec 04             	sub    $0x4,%esp
f012b593:	68 40 b5 13 f0       	push   $0xf013b540
f012b598:	68 a9 0d 00 00       	push   $0xda9
f012b59d:	68 5a b4 13 f0       	push   $0xf013b45a
f012b5a2:	e8 5e 4c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b5a7:	e8 37 88 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012b5ac:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b5af:	74 17                	je     f012b5c8 <test_kfreelast+0x14d3>
f012b5b1:	83 ec 04             	sub    $0x4,%esp
f012b5b4:	68 74 b4 13 f0       	push   $0xf013b474
f012b5b9:	68 aa 0d 00 00       	push   $0xdaa
f012b5be:	68 5a b4 13 f0       	push   $0xf013b45a
f012b5c3:	e8 3d 4c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012b5c8:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b5cb:	e8 89 1a fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b5d0:	29 c3                	sub    %eax,%ebx
f012b5d2:	89 d8                	mov    %ebx,%eax
f012b5d4:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b5d9:	74 17                	je     f012b5f2 <test_kfreelast+0x14fd>
f012b5db:	83 ec 04             	sub    $0x4,%esp
f012b5de:	68 dc b4 13 f0       	push   $0xf013b4dc
f012b5e3:	68 ab 0d 00 00       	push   $0xdab
f012b5e8:	68 5a b4 13 f0       	push   $0xf013b45a
f012b5ed:	e8 13 4c fd ff       	call   f0100205 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f012b5f2:	c7 85 38 fe ff ff ff 	movl   $0xfffff,-0x1c8(%ebp)
f012b5f9:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f012b5fc:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b602:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f012b605:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b60c:	eb 0e                	jmp    f012b61c <test_kfreelast+0x1527>
		{
			ptr[i] = 11 ;
f012b60e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b611:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b614:	01 d0                	add    %edx,%eax
f012b616:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f012b619:	ff 45 f4             	incl   -0xc(%ebp)
f012b61c:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012b622:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b625:	7f e7                	jg     f012b60e <test_kfreelast+0x1519>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f012b627:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f012b62b:	83 ec 08             	sub    $0x8,%esp
f012b62e:	ff 75 f0             	pushl  -0x10(%ebp)
f012b631:	68 8c c4 13 f0       	push   $0xf013c48c
f012b636:	e8 d3 56 fd ff       	call   f0100d0e <cprintf>
f012b63b:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f012b63e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b645:	e8 0f 1a fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b64a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b64d:	e8 91 87 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012b652:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f012b655:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b65b:	83 ec 0c             	sub    $0xc,%esp
f012b65e:	50                   	push   %eax
f012b65f:	e8 b5 c4 fd ff       	call   f0107b19 <kfree>
f012b664:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b667:	e8 77 87 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012b66c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b66f:	74 1d                	je     f012b68e <test_kfreelast+0x1599>
f012b671:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b675:	75 17                	jne    f012b68e <test_kfreelast+0x1599>
f012b677:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b67e:	83 ec 0c             	sub    $0xc,%esp
f012b681:	68 b4 c4 13 f0       	push   $0xf013c4b4
f012b686:	e8 83 56 fd ff       	call   f0100d0e <cprintf>
f012b68b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b68e:	e8 c6 19 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b693:	89 c2                	mov    %eax,%edx
f012b695:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b698:	29 c2                	sub    %eax,%edx
f012b69a:	89 d0                	mov    %edx,%eax
f012b69c:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b6a1:	74 1d                	je     f012b6c0 <test_kfreelast+0x15cb>
f012b6a3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b6a7:	75 17                	jne    f012b6c0 <test_kfreelast+0x15cb>
f012b6a9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b6b0:	83 ec 0c             	sub    $0xc,%esp
f012b6b3:	68 20 c5 13 f0       	push   $0xf013c520
f012b6b8:	e8 51 56 fd ff       	call   f0100d0e <cprintf>
f012b6bd:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f012b6c0:	e8 94 19 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b6c5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b6c8:	e8 16 87 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012b6cd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f012b6d0:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012b6d6:	83 ec 0c             	sub    $0xc,%esp
f012b6d9:	50                   	push   %eax
f012b6da:	e8 3a c4 fd ff       	call   f0107b19 <kfree>
f012b6df:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b6e2:	e8 fc 86 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012b6e7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b6ea:	74 1d                	je     f012b709 <test_kfreelast+0x1614>
f012b6ec:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b6f0:	75 17                	jne    f012b709 <test_kfreelast+0x1614>
f012b6f2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b6f9:	83 ec 0c             	sub    $0xc,%esp
f012b6fc:	68 b4 c4 13 f0       	push   $0xf013c4b4
f012b701:	e8 08 56 fd ff       	call   f0100d0e <cprintf>
f012b706:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b709:	e8 4b 19 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b70e:	89 c2                	mov    %eax,%edx
f012b710:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b713:	29 c2                	sub    %eax,%edx
f012b715:	89 d0                	mov    %edx,%eax
f012b717:	83 f8 08             	cmp    $0x8,%eax
f012b71a:	74 1d                	je     f012b739 <test_kfreelast+0x1644>
f012b71c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b720:	75 17                	jne    f012b739 <test_kfreelast+0x1644>
f012b722:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b729:	83 ec 0c             	sub    $0xc,%esp
f012b72c:	68 20 c5 13 f0       	push   $0xf013c520
f012b731:	e8 d8 55 fd ff       	call   f0100d0e <cprintf>
f012b736:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f012b739:	e8 1b 19 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b73e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b741:	e8 9d 86 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012b746:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f012b749:	83 ec 0c             	sub    $0xc,%esp
f012b74c:	68 00 28 00 00       	push   $0x2800
f012b751:	e8 da c2 fd ff       	call   f0107a30 <kmalloc>
f012b756:	83 c4 10             	add    $0x10,%esp
f012b759:	89 85 9c fd ff ff    	mov    %eax,-0x264(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012b75f:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b765:	89 c1                	mov    %eax,%ecx
f012b767:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f012b76e:	10 00 00 
f012b771:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012b777:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b77c:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f012b782:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012b788:	ba 00 00 00 00       	mov    $0x0,%edx
f012b78d:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012b793:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012b799:	29 d0                	sub    %edx,%eax
f012b79b:	89 c3                	mov    %eax,%ebx
f012b79d:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012b7a4:	10 00 00 
f012b7a7:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012b7ac:	0f b6 d0             	movzbl %al,%edx
f012b7af:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012b7b5:	01 d0                	add    %edx,%eax
f012b7b7:	48                   	dec    %eax
f012b7b8:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012b7be:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012b7c4:	ba 00 00 00 00       	mov    $0x0,%edx
f012b7c9:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012b7cf:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012b7d5:	29 d0                	sub    %edx,%eax
f012b7d7:	01 c3                	add    %eax,%ebx
f012b7d9:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f012b7e0:	10 00 00 
f012b7e3:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012b7e8:	0f b6 c0             	movzbl %al,%eax
f012b7eb:	c1 e0 04             	shl    $0x4,%eax
f012b7ee:	89 c2                	mov    %eax,%edx
f012b7f0:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012b7f6:	01 d0                	add    %edx,%eax
f012b7f8:	48                   	dec    %eax
f012b7f9:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f012b7ff:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012b805:	ba 00 00 00 00       	mov    $0x0,%edx
f012b80a:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f012b810:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012b816:	29 d0                	sub    %edx,%eax
f012b818:	01 d8                	add    %ebx,%eax
f012b81a:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012b81f:	39 c1                	cmp    %eax,%ecx
f012b821:	74 1d                	je     f012b840 <test_kfreelast+0x174b>
f012b823:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b827:	75 17                	jne    f012b840 <test_kfreelast+0x174b>
f012b829:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b830:	83 ec 0c             	sub    $0xc,%esp
f012b833:	68 58 c5 13 f0       	push   $0xf013c558
f012b838:	e8 d1 54 fd ff       	call   f0100d0e <cprintf>
f012b83d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b840:	e8 9e 85 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012b845:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b848:	74 1d                	je     f012b867 <test_kfreelast+0x1772>
f012b84a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b84e:	75 17                	jne    f012b867 <test_kfreelast+0x1772>
f012b850:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b857:	83 ec 0c             	sub    $0xc,%esp
f012b85a:	68 b4 c4 13 f0       	push   $0xf013c4b4
f012b85f:	e8 aa 54 fd ff       	call   f0100d0e <cprintf>
f012b864:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b867:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b86a:	e8 ea 17 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b86f:	29 c3                	sub    %eax,%ebx
f012b871:	89 d8                	mov    %ebx,%eax
f012b873:	83 f8 03             	cmp    $0x3,%eax
f012b876:	74 1d                	je     f012b895 <test_kfreelast+0x17a0>
f012b878:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b87c:	75 17                	jne    f012b895 <test_kfreelast+0x17a0>
f012b87e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b885:	83 ec 0c             	sub    $0xc,%esp
f012b888:	68 c0 c5 13 f0       	push   $0xf013c5c0
f012b88d:	e8 7c 54 fd ff       	call   f0100d0e <cprintf>
f012b892:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f012b895:	c7 85 3c fe ff ff ff 	movl   $0x27ff,-0x1c4(%ebp)
f012b89c:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f012b89f:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b8a5:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012b8a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b8af:	eb 0e                	jmp    f012b8bf <test_kfreelast+0x17ca>
		{
			ptr[i] = 12 ;
f012b8b1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b8b4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b8b7:	01 d0                	add    %edx,%eax
f012b8b9:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012b8bc:	ff 45 f4             	incl   -0xc(%ebp)
f012b8bf:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012b8c5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b8c8:	7f e7                	jg     f012b8b1 <test_kfreelast+0x17bc>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b8ca:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b8ce:	75 17                	jne    f012b8e7 <test_kfreelast+0x17f2>
f012b8d0:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012b8d4:	83 ec 08             	sub    $0x8,%esp
f012b8d7:	ff 75 f0             	pushl  -0x10(%ebp)
f012b8da:	68 8c c4 13 f0       	push   $0xf013c48c
f012b8df:	e8 2a 54 fd ff       	call   f0100d0e <cprintf>
f012b8e4:	83 c4 10             	add    $0x10,%esp
f012b8e7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f012b8ee:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b8f4:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012b8f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b8fe:	eb 1e                	jmp    f012b91e <test_kfreelast+0x1829>
		{
			sums[12] += ptr[i] ;
f012b900:	8b 95 ec fd ff ff    	mov    -0x214(%ebp),%edx
f012b906:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b909:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b90c:	01 c8                	add    %ecx,%eax
f012b90e:	8a 00                	mov    (%eax),%al
f012b910:	0f be c0             	movsbl %al,%eax
f012b913:	01 d0                	add    %edx,%eax
f012b915:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012b91b:	ff 45 f4             	incl   -0xc(%ebp)
f012b91e:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012b924:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b927:	7f d7                	jg     f012b900 <test_kfreelast+0x180b>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012b929:	8b 8d ec fd ff ff    	mov    -0x214(%ebp),%ecx
f012b92f:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f012b935:	89 d0                	mov    %edx,%eax
f012b937:	01 c0                	add    %eax,%eax
f012b939:	01 d0                	add    %edx,%eax
f012b93b:	c1 e0 02             	shl    $0x2,%eax
f012b93e:	39 c1                	cmp    %eax,%ecx
f012b940:	74 1d                	je     f012b95f <test_kfreelast+0x186a>
f012b942:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b946:	75 17                	jne    f012b95f <test_kfreelast+0x186a>
f012b948:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b94f:	83 ec 0c             	sub    $0xc,%esp
f012b952:	68 04 c6 13 f0       	push   $0xf013c604
f012b957:	e8 b2 53 fd ff       	call   f0100d0e <cprintf>
f012b95c:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b95f:	83 ec 0c             	sub    $0xc,%esp
f012b962:	6a 03                	push   $0x3
f012b964:	e8 90 1b fe ff       	call   f010d4f9 <sys_bypassPageFault>
f012b969:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f012b96c:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b972:	05 00 30 00 00       	add    $0x3000,%eax
f012b977:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f012b97a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b981:	eb 3c                	jmp    f012b9bf <test_kfreelast+0x18ca>
		{
			ptr[i] = 10;
f012b983:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b986:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b989:	01 d0                	add    %edx,%eax
f012b98b:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b98e:	e8 54 1b fe ff       	call   f010d4e7 <sys_rcr2>
f012b993:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b996:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012b999:	01 ca                	add    %ecx,%edx
f012b99b:	39 d0                	cmp    %edx,%eax
f012b99d:	74 1d                	je     f012b9bc <test_kfreelast+0x18c7>
f012b99f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b9a3:	75 17                	jne    f012b9bc <test_kfreelast+0x18c7>
f012b9a5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b9ac:	83 ec 0c             	sub    $0xc,%esp
f012b9af:	68 38 c6 13 f0       	push   $0xf013c638
f012b9b4:	e8 55 53 fd ff       	call   f0100d0e <cprintf>
f012b9b9:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f012b9bc:	ff 45 f4             	incl   -0xc(%ebp)
f012b9bf:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f012b9c6:	7e bb                	jle    f012b983 <test_kfreelast+0x188e>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b9c8:	83 ec 0c             	sub    $0xc,%esp
f012b9cb:	6a 00                	push   $0x0
f012b9cd:	e8 27 1b fe ff       	call   f010d4f9 <sys_bypassPageFault>
f012b9d2:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b9d5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b9d9:	75 17                	jne    f012b9f2 <test_kfreelast+0x18fd>
f012b9db:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012b9df:	83 ec 08             	sub    $0x8,%esp
f012b9e2:	ff 75 f0             	pushl  -0x10(%ebp)
f012b9e5:	68 8c c4 13 f0       	push   $0xf013c48c
f012b9ea:	e8 1f 53 fd ff       	call   f0100d0e <cprintf>
f012b9ef:	83 c4 10             	add    $0x10,%esp
f012b9f2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f012b9f9:	e8 5b 16 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012b9fe:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ba01:	e8 dd 83 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012ba06:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f012ba09:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012ba0f:	83 ec 0c             	sub    $0xc,%esp
f012ba12:	50                   	push   %eax
f012ba13:	e8 01 c1 fd ff       	call   f0107b19 <kfree>
f012ba18:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ba1b:	e8 c3 83 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012ba20:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ba23:	74 1d                	je     f012ba42 <test_kfreelast+0x194d>
f012ba25:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ba29:	75 17                	jne    f012ba42 <test_kfreelast+0x194d>
f012ba2b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba32:	83 ec 0c             	sub    $0xc,%esp
f012ba35:	68 b4 c4 13 f0       	push   $0xf013c4b4
f012ba3a:	e8 cf 52 fd ff       	call   f0100d0e <cprintf>
f012ba3f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012ba42:	e8 12 16 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012ba47:	89 c2                	mov    %eax,%edx
f012ba49:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ba4c:	29 c2                	sub    %eax,%edx
f012ba4e:	89 d0                	mov    %edx,%eax
f012ba50:	83 f8 03             	cmp    $0x3,%eax
f012ba53:	74 1d                	je     f012ba72 <test_kfreelast+0x197d>
f012ba55:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ba59:	75 17                	jne    f012ba72 <test_kfreelast+0x197d>
f012ba5b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba62:	83 ec 0c             	sub    $0xc,%esp
f012ba65:	68 20 c5 13 f0       	push   $0xf013c520
f012ba6a:	e8 9f 52 fd ff       	call   f0100d0e <cprintf>
f012ba6f:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012ba72:	e8 e2 15 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012ba77:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ba7a:	e8 64 83 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012ba7f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f012ba82:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012ba88:	83 ec 0c             	sub    $0xc,%esp
f012ba8b:	50                   	push   %eax
f012ba8c:	e8 88 c0 fd ff       	call   f0107b19 <kfree>
f012ba91:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ba94:	e8 4a 83 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012ba99:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ba9c:	74 1d                	je     f012babb <test_kfreelast+0x19c6>
f012ba9e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012baa2:	75 17                	jne    f012babb <test_kfreelast+0x19c6>
f012baa4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012baab:	83 ec 0c             	sub    $0xc,%esp
f012baae:	68 b4 c4 13 f0       	push   $0xf013c4b4
f012bab3:	e8 56 52 fd ff       	call   f0100d0e <cprintf>
f012bab8:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012babb:	e8 99 15 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012bac0:	89 c2                	mov    %eax,%edx
f012bac2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bac5:	29 c2                	sub    %eax,%edx
f012bac7:	89 d0                	mov    %edx,%eax
f012bac9:	83 f8 04             	cmp    $0x4,%eax
f012bacc:	74 1d                	je     f012baeb <test_kfreelast+0x19f6>
f012bace:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bad2:	75 17                	jne    f012baeb <test_kfreelast+0x19f6>
f012bad4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012badb:	83 ec 0c             	sub    $0xc,%esp
f012bade:	68 20 c5 13 f0       	push   $0xf013c520
f012bae3:	e8 26 52 fd ff       	call   f0100d0e <cprintf>
f012bae8:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012baeb:	e8 69 15 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012baf0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012baf3:	e8 eb 82 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012baf8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012bafb:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012bb01:	83 ec 0c             	sub    $0xc,%esp
f012bb04:	50                   	push   %eax
f012bb05:	e8 0f c0 fd ff       	call   f0107b19 <kfree>
f012bb0a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bb0d:	e8 d1 82 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012bb12:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bb15:	74 1d                	je     f012bb34 <test_kfreelast+0x1a3f>
f012bb17:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bb1b:	75 17                	jne    f012bb34 <test_kfreelast+0x1a3f>
f012bb1d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bb24:	83 ec 0c             	sub    $0xc,%esp
f012bb27:	68 b4 c4 13 f0       	push   $0xf013c4b4
f012bb2c:	e8 dd 51 fd ff       	call   f0100d0e <cprintf>
f012bb31:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bb34:	e8 20 15 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012bb39:	89 c2                	mov    %eax,%edx
f012bb3b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012bb3e:	29 c2                	sub    %eax,%edx
f012bb40:	89 d0                	mov    %edx,%eax
f012bb42:	83 f8 05             	cmp    $0x5,%eax
f012bb45:	74 1d                	je     f012bb64 <test_kfreelast+0x1a6f>
f012bb47:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bb4b:	75 17                	jne    f012bb64 <test_kfreelast+0x1a6f>
f012bb4d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bb54:	83 ec 0c             	sub    $0xc,%esp
f012bb57:	68 20 c5 13 f0       	push   $0xf013c520
f012bb5c:	e8 ad 51 fd ff       	call   f0100d0e <cprintf>
f012bb61:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f012bb64:	e8 f0 14 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012bb69:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bb6c:	e8 72 82 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012bb71:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f012bb74:	83 ec 0c             	sub    $0xc,%esp
f012bb77:	68 00 c8 00 00       	push   $0xc800
f012bb7c:	e8 af be fd ff       	call   f0107a30 <kmalloc>
f012bb81:	83 c4 10             	add    $0x10,%esp
f012bb84:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012bb8a:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012bb90:	89 c1                	mov    %eax,%ecx
f012bb92:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f012bb99:	10 00 00 
f012bb9c:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012bba2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bba7:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012bbad:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012bbb3:	ba 00 00 00 00       	mov    $0x0,%edx
f012bbb8:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012bbbe:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012bbc4:	29 d0                	sub    %edx,%eax
f012bbc6:	89 c3                	mov    %eax,%ebx
f012bbc8:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012bbcf:	10 00 00 
f012bbd2:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012bbd7:	0f b6 d0             	movzbl %al,%edx
f012bbda:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012bbe0:	01 d0                	add    %edx,%eax
f012bbe2:	48                   	dec    %eax
f012bbe3:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f012bbe9:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012bbef:	ba 00 00 00 00       	mov    $0x0,%edx
f012bbf4:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012bbfa:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012bc00:	29 d0                	sub    %edx,%eax
f012bc02:	01 c3                	add    %eax,%ebx
f012bc04:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012bc0b:	10 00 00 
f012bc0e:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012bc13:	0f b6 c0             	movzbl %al,%eax
f012bc16:	c1 e0 04             	shl    $0x4,%eax
f012bc19:	89 c2                	mov    %eax,%edx
f012bc1b:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012bc21:	01 d0                	add    %edx,%eax
f012bc23:	48                   	dec    %eax
f012bc24:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012bc2a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012bc30:	ba 00 00 00 00       	mov    $0x0,%edx
f012bc35:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012bc3b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012bc41:	29 d0                	sub    %edx,%eax
f012bc43:	01 d8                	add    %ebx,%eax
f012bc45:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012bc4a:	39 c1                	cmp    %eax,%ecx
f012bc4c:	74 1d                	je     f012bc6b <test_kfreelast+0x1b76>
f012bc4e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bc52:	75 17                	jne    f012bc6b <test_kfreelast+0x1b76>
f012bc54:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bc5b:	83 ec 0c             	sub    $0xc,%esp
f012bc5e:	68 58 c5 13 f0       	push   $0xf013c558
f012bc63:	e8 a6 50 fd ff       	call   f0100d0e <cprintf>
f012bc68:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bc6b:	e8 73 81 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012bc70:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bc73:	74 1d                	je     f012bc92 <test_kfreelast+0x1b9d>
f012bc75:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bc79:	75 17                	jne    f012bc92 <test_kfreelast+0x1b9d>
f012bc7b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bc82:	83 ec 0c             	sub    $0xc,%esp
f012bc85:	68 b4 c4 13 f0       	push   $0xf013c4b4
f012bc8a:	e8 7f 50 fd ff       	call   f0100d0e <cprintf>
f012bc8f:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012bc92:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012bc95:	e8 bf 13 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012bc9a:	29 c3                	sub    %eax,%ebx
f012bc9c:	89 d8                	mov    %ebx,%eax
f012bc9e:	83 f8 0d             	cmp    $0xd,%eax
f012bca1:	74 1d                	je     f012bcc0 <test_kfreelast+0x1bcb>
f012bca3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bca7:	75 17                	jne    f012bcc0 <test_kfreelast+0x1bcb>
f012bca9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bcb0:	83 ec 0c             	sub    $0xc,%esp
f012bcb3:	68 c0 c5 13 f0       	push   $0xf013c5c0
f012bcb8:	e8 51 50 fd ff       	call   f0100d0e <cprintf>
f012bcbd:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f012bcc0:	c7 85 40 fe ff ff ff 	movl   $0xc7ff,-0x1c0(%ebp)
f012bcc7:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f012bcca:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012bcd0:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f012bcd3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012bcda:	eb 0e                	jmp    f012bcea <test_kfreelast+0x1bf5>
		{
			ptr[i] = 13 ;
f012bcdc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012bcdf:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bce2:	01 d0                	add    %edx,%eax
f012bce4:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012bce7:	ff 45 f4             	incl   -0xc(%ebp)
f012bcea:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012bcf0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012bcf3:	7f e7                	jg     f012bcdc <test_kfreelast+0x1be7>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012bcf5:	e8 5f 13 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012bcfa:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bcfd:	e8 e1 80 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012bd02:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f012bd05:	83 ec 0c             	sub    $0xc,%esp
f012bd08:	68 00 fc 2f 00       	push   $0x2ffc00
f012bd0d:	e8 1e bd fd ff       	call   f0107a30 <kmalloc>
f012bd12:	83 c4 10             	add    $0x10,%esp
f012bd15:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012bd1b:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012bd21:	89 c1                	mov    %eax,%ecx
f012bd23:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012bd2a:	10 00 00 
f012bd2d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bd33:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bd38:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012bd3e:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012bd44:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd49:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012bd4f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012bd55:	29 d0                	sub    %edx,%eax
f012bd57:	89 c3                	mov    %eax,%ebx
f012bd59:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012bd60:	10 00 00 
f012bd63:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012bd68:	0f b6 d0             	movzbl %al,%edx
f012bd6b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012bd71:	01 d0                	add    %edx,%eax
f012bd73:	48                   	dec    %eax
f012bd74:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012bd7a:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012bd80:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd85:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012bd8b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012bd91:	29 d0                	sub    %edx,%eax
f012bd93:	01 c3                	add    %eax,%ebx
f012bd95:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012bd9c:	10 00 00 
f012bd9f:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012bda4:	0f b6 c0             	movzbl %al,%eax
f012bda7:	c1 e0 04             	shl    $0x4,%eax
f012bdaa:	89 c2                	mov    %eax,%edx
f012bdac:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012bdb2:	01 d0                	add    %edx,%eax
f012bdb4:	48                   	dec    %eax
f012bdb5:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f012bdbb:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012bdc1:	ba 00 00 00 00       	mov    $0x0,%edx
f012bdc6:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f012bdcc:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012bdd2:	29 d0                	sub    %edx,%eax
f012bdd4:	01 d8                	add    %ebx,%eax
f012bdd6:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f012bddb:	39 c1                	cmp    %eax,%ecx
f012bddd:	74 1d                	je     f012bdfc <test_kfreelast+0x1d07>
f012bddf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bde3:	75 17                	jne    f012bdfc <test_kfreelast+0x1d07>
f012bde5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bdec:	83 ec 0c             	sub    $0xc,%esp
f012bdef:	68 58 c5 13 f0       	push   $0xf013c558
f012bdf4:	e8 15 4f fd ff       	call   f0100d0e <cprintf>
f012bdf9:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bdfc:	e8 e2 7f fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012be01:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012be04:	74 1d                	je     f012be23 <test_kfreelast+0x1d2e>
f012be06:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012be0a:	75 17                	jne    f012be23 <test_kfreelast+0x1d2e>
f012be0c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012be13:	83 ec 0c             	sub    $0xc,%esp
f012be16:	68 b4 c4 13 f0       	push   $0xf013c4b4
f012be1b:	e8 ee 4e fd ff       	call   f0100d0e <cprintf>
f012be20:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012be23:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012be26:	e8 2e 12 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012be2b:	29 c3                	sub    %eax,%ebx
f012be2d:	89 d8                	mov    %ebx,%eax
f012be2f:	3d 00 03 00 00       	cmp    $0x300,%eax
f012be34:	74 1d                	je     f012be53 <test_kfreelast+0x1d5e>
f012be36:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012be3a:	75 17                	jne    f012be53 <test_kfreelast+0x1d5e>
f012be3c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012be43:	83 ec 0c             	sub    $0xc,%esp
f012be46:	68 c0 c5 13 f0       	push   $0xf013c5c0
f012be4b:	e8 be 4e fd ff       	call   f0100d0e <cprintf>
f012be50:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f012be53:	c7 85 44 fe ff ff ff 	movl   $0x2ffbff,-0x1bc(%ebp)
f012be5a:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012be5d:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012be63:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012be66:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012be6d:	eb 0e                	jmp    f012be7d <test_kfreelast+0x1d88>
		{
			ptr[i] = 14 ;
f012be6f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012be72:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012be75:	01 d0                	add    %edx,%eax
f012be77:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012be7a:	ff 45 f4             	incl   -0xc(%ebp)
f012be7d:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012be83:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012be86:	7f e7                	jg     f012be6f <test_kfreelast+0x1d7a>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012be88:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012be8c:	75 17                	jne    f012bea5 <test_kfreelast+0x1db0>
f012be8e:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f012be92:	83 ec 08             	sub    $0x8,%esp
f012be95:	ff 75 f0             	pushl  -0x10(%ebp)
f012be98:	68 8c c4 13 f0       	push   $0xf013c48c
f012be9d:	e8 6c 4e fd ff       	call   f0100d0e <cprintf>
f012bea2:	83 c4 10             	add    $0x10,%esp
f012bea5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f012beac:	e8 a8 11 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012beb1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012beb4:	e8 2a 7f fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012beb9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f012bebc:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012bec2:	83 ec 0c             	sub    $0xc,%esp
f012bec5:	50                   	push   %eax
f012bec6:	e8 4e bc fd ff       	call   f0107b19 <kfree>
f012becb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bece:	e8 10 7f fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012bed3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bed6:	74 1d                	je     f012bef5 <test_kfreelast+0x1e00>
f012bed8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bedc:	75 17                	jne    f012bef5 <test_kfreelast+0x1e00>
f012bede:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bee5:	83 ec 0c             	sub    $0xc,%esp
f012bee8:	68 b4 c4 13 f0       	push   $0xf013c4b4
f012beed:	e8 1c 4e fd ff       	call   f0100d0e <cprintf>
f012bef2:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bef5:	e8 5f 11 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012befa:	89 c2                	mov    %eax,%edx
f012befc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012beff:	29 c2                	sub    %eax,%edx
f012bf01:	89 d0                	mov    %edx,%eax
f012bf03:	83 f8 0d             	cmp    $0xd,%eax
f012bf06:	74 1d                	je     f012bf25 <test_kfreelast+0x1e30>
f012bf08:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bf0c:	75 17                	jne    f012bf25 <test_kfreelast+0x1e30>
f012bf0e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bf15:	83 ec 0c             	sub    $0xc,%esp
f012bf18:	68 20 c5 13 f0       	push   $0xf013c520
f012bf1d:	e8 ec 4d fd ff       	call   f0100d0e <cprintf>
f012bf22:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012bf25:	83 ec 0c             	sub    $0xc,%esp
f012bf28:	6a 03                	push   $0x3
f012bf2a:	e8 ca 15 fe ff       	call   f010d4f9 <sys_bypassPageFault>
f012bf2f:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f012bf32:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012bf38:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f012bf3b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012bf42:	eb 3c                	jmp    f012bf80 <test_kfreelast+0x1e8b>
		{
			ptr[i] = 10;
f012bf44:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012bf47:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bf4a:	01 d0                	add    %edx,%eax
f012bf4c:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012bf4f:	e8 93 15 fe ff       	call   f010d4e7 <sys_rcr2>
f012bf54:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012bf57:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012bf5a:	01 ca                	add    %ecx,%edx
f012bf5c:	39 d0                	cmp    %edx,%eax
f012bf5e:	74 1d                	je     f012bf7d <test_kfreelast+0x1e88>
f012bf60:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bf64:	75 17                	jne    f012bf7d <test_kfreelast+0x1e88>
f012bf66:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bf6d:	83 ec 0c             	sub    $0xc,%esp
f012bf70:	68 38 c6 13 f0       	push   $0xf013c638
f012bf75:	e8 94 4d fd ff       	call   f0100d0e <cprintf>
f012bf7a:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f012bf7d:	ff 45 f4             	incl   -0xc(%ebp)
f012bf80:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f012bf87:	7e bb                	jle    f012bf44 <test_kfreelast+0x1e4f>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012bf89:	83 ec 0c             	sub    $0xc,%esp
f012bf8c:	6a 00                	push   $0x0
f012bf8e:	e8 66 15 fe ff       	call   f010d4f9 <sys_bypassPageFault>
f012bf93:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f012bf96:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012bf9c:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012bf9f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012bfa6:	eb 1e                	jmp    f012bfc6 <test_kfreelast+0x1ed1>
		{
			sums[14] += ptr[i] ;
f012bfa8:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012bfae:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012bfb1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bfb4:	01 c8                	add    %ecx,%eax
f012bfb6:	8a 00                	mov    (%eax),%al
f012bfb8:	0f be c0             	movsbl %al,%eax
f012bfbb:	01 d0                	add    %edx,%eax
f012bfbd:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012bfc3:	ff 45 f4             	incl   -0xc(%ebp)
f012bfc6:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012bfcc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012bfcf:	7f d7                	jg     f012bfa8 <test_kfreelast+0x1eb3>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012bfd1:	8b 8d f4 fd ff ff    	mov    -0x20c(%ebp),%ecx
f012bfd7:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f012bfdd:	89 d0                	mov    %edx,%eax
f012bfdf:	01 c0                	add    %eax,%eax
f012bfe1:	01 d0                	add    %edx,%eax
f012bfe3:	01 c0                	add    %eax,%eax
f012bfe5:	01 d0                	add    %edx,%eax
f012bfe7:	01 c0                	add    %eax,%eax
f012bfe9:	39 c1                	cmp    %eax,%ecx
f012bfeb:	74 1d                	je     f012c00a <test_kfreelast+0x1f15>
f012bfed:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bff1:	75 17                	jne    f012c00a <test_kfreelast+0x1f15>
f012bff3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bffa:	83 ec 0c             	sub    $0xc,%esp
f012bffd:	68 04 c6 13 f0       	push   $0xf013c604
f012c002:	e8 07 4d fd ff       	call   f0100d0e <cprintf>
f012c007:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012c00a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c00e:	75 17                	jne    f012c027 <test_kfreelast+0x1f32>
f012c010:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012c014:	83 ec 08             	sub    $0x8,%esp
f012c017:	ff 75 f0             	pushl  -0x10(%ebp)
f012c01a:	68 8c c4 13 f0       	push   $0xf013c48c
f012c01f:	e8 ea 4c fd ff       	call   f0100d0e <cprintf>
f012c024:	83 c4 10             	add    $0x10,%esp
f012c027:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012c02e:	e8 26 10 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c033:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c036:	e8 a8 7d fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012c03b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f012c03e:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012c044:	83 ec 0c             	sub    $0xc,%esp
f012c047:	50                   	push   %eax
f012c048:	e8 cc ba fd ff       	call   f0107b19 <kfree>
f012c04d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c050:	e8 8e 7d fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012c055:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c058:	74 1d                	je     f012c077 <test_kfreelast+0x1f82>
f012c05a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c05e:	75 17                	jne    f012c077 <test_kfreelast+0x1f82>
f012c060:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c067:	83 ec 0c             	sub    $0xc,%esp
f012c06a:	68 b4 c4 13 f0       	push   $0xf013c4b4
f012c06f:	e8 9a 4c fd ff       	call   f0100d0e <cprintf>
f012c074:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012c077:	e8 dd 0f fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c07c:	89 c2                	mov    %eax,%edx
f012c07e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c081:	29 c2                	sub    %eax,%edx
f012c083:	89 d0                	mov    %edx,%eax
f012c085:	83 f8 02             	cmp    $0x2,%eax
f012c088:	74 1d                	je     f012c0a7 <test_kfreelast+0x1fb2>
f012c08a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c08e:	75 17                	jne    f012c0a7 <test_kfreelast+0x1fb2>
f012c090:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c097:	83 ec 0c             	sub    $0xc,%esp
f012c09a:	68 20 c5 13 f0       	push   $0xf013c520
f012c09f:	e8 6a 4c fd ff       	call   f0100d0e <cprintf>
f012c0a4:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012c0a7:	e8 ad 0f fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c0ac:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c0af:	e8 2f 7d fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012c0b4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f012c0b7:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012c0bd:	83 ec 0c             	sub    $0xc,%esp
f012c0c0:	50                   	push   %eax
f012c0c1:	e8 53 ba fd ff       	call   f0107b19 <kfree>
f012c0c6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c0c9:	e8 15 7d fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012c0ce:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c0d1:	74 1d                	je     f012c0f0 <test_kfreelast+0x1ffb>
f012c0d3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c0d7:	75 17                	jne    f012c0f0 <test_kfreelast+0x1ffb>
f012c0d9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c0e0:	83 ec 0c             	sub    $0xc,%esp
f012c0e3:	68 b4 c4 13 f0       	push   $0xf013c4b4
f012c0e8:	e8 21 4c fd ff       	call   f0100d0e <cprintf>
f012c0ed:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012c0f0:	e8 64 0f fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c0f5:	89 c2                	mov    %eax,%edx
f012c0f7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c0fa:	29 c2                	sub    %eax,%edx
f012c0fc:	89 d0                	mov    %edx,%eax
f012c0fe:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c103:	74 1d                	je     f012c122 <test_kfreelast+0x202d>
f012c105:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c109:	75 17                	jne    f012c122 <test_kfreelast+0x202d>
f012c10b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c112:	83 ec 0c             	sub    $0xc,%esp
f012c115:	68 20 c5 13 f0       	push   $0xf013c520
f012c11a:	e8 ef 4b fd ff       	call   f0100d0e <cprintf>
f012c11f:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012c122:	e8 32 0f fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c127:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c12a:	e8 b4 7c fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012c12f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f012c132:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012c138:	83 ec 0c             	sub    $0xc,%esp
f012c13b:	50                   	push   %eax
f012c13c:	e8 d8 b9 fd ff       	call   f0107b19 <kfree>
f012c141:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c144:	e8 9a 7c fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012c149:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c14c:	74 1d                	je     f012c16b <test_kfreelast+0x2076>
f012c14e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c152:	75 17                	jne    f012c16b <test_kfreelast+0x2076>
f012c154:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c15b:	83 ec 0c             	sub    $0xc,%esp
f012c15e:	68 b4 c4 13 f0       	push   $0xf013c4b4
f012c163:	e8 a6 4b fd ff       	call   f0100d0e <cprintf>
f012c168:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012c16b:	e8 e9 0e fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c170:	89 c2                	mov    %eax,%edx
f012c172:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c175:	29 c2                	sub    %eax,%edx
f012c177:	89 d0                	mov    %edx,%eax
f012c179:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c17e:	74 1d                	je     f012c19d <test_kfreelast+0x20a8>
f012c180:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c184:	75 17                	jne    f012c19d <test_kfreelast+0x20a8>
f012c186:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c18d:	83 ec 0c             	sub    $0xc,%esp
f012c190:	68 20 c5 13 f0       	push   $0xf013c520
f012c195:	e8 74 4b fd ff       	call   f0100d0e <cprintf>
f012c19a:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012c19d:	e8 b7 0e fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c1a2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c1a5:	e8 39 7c fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012c1aa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012c1ad:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012c1b3:	83 ec 0c             	sub    $0xc,%esp
f012c1b6:	50                   	push   %eax
f012c1b7:	e8 5d b9 fd ff       	call   f0107b19 <kfree>
f012c1bc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c1bf:	e8 1f 7c fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012c1c4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c1c7:	74 1d                	je     f012c1e6 <test_kfreelast+0x20f1>
f012c1c9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c1cd:	75 17                	jne    f012c1e6 <test_kfreelast+0x20f1>
f012c1cf:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c1d6:	83 ec 0c             	sub    $0xc,%esp
f012c1d9:	68 b4 c4 13 f0       	push   $0xf013c4b4
f012c1de:	e8 2b 4b fd ff       	call   f0100d0e <cprintf>
f012c1e3:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012c1e6:	e8 6e 0e fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c1eb:	89 c2                	mov    %eax,%edx
f012c1ed:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c1f0:	29 c2                	sub    %eax,%edx
f012c1f2:	89 d0                	mov    %edx,%eax
f012c1f4:	83 f8 01             	cmp    $0x1,%eax
f012c1f7:	74 1d                	je     f012c216 <test_kfreelast+0x2121>
f012c1f9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c1fd:	75 17                	jne    f012c216 <test_kfreelast+0x2121>
f012c1ff:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c206:	83 ec 0c             	sub    $0xc,%esp
f012c209:	68 20 c5 13 f0       	push   $0xf013c520
f012c20e:	e8 fb 4a fd ff       	call   f0100d0e <cprintf>
f012c213:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012c216:	e8 3e 0e fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c21b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c21e:	e8 c0 7b fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012c223:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f012c226:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012c22c:	83 ec 0c             	sub    $0xc,%esp
f012c22f:	50                   	push   %eax
f012c230:	e8 e4 b8 fd ff       	call   f0107b19 <kfree>
f012c235:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c238:	e8 a6 7b fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012c23d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c240:	74 1d                	je     f012c25f <test_kfreelast+0x216a>
f012c242:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c246:	75 17                	jne    f012c25f <test_kfreelast+0x216a>
f012c248:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c24f:	83 ec 0c             	sub    $0xc,%esp
f012c252:	68 b4 c4 13 f0       	push   $0xf013c4b4
f012c257:	e8 b2 4a fd ff       	call   f0100d0e <cprintf>
f012c25c:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012c25f:	e8 f5 0d fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c264:	89 c2                	mov    %eax,%edx
f012c266:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c269:	29 c2                	sub    %eax,%edx
f012c26b:	89 d0                	mov    %edx,%eax
f012c26d:	83 f8 01             	cmp    $0x1,%eax
f012c270:	74 1d                	je     f012c28f <test_kfreelast+0x219a>
f012c272:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c276:	75 17                	jne    f012c28f <test_kfreelast+0x219a>
f012c278:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c27f:	83 ec 0c             	sub    $0xc,%esp
f012c282:	68 20 c5 13 f0       	push   $0xf013c520
f012c287:	e8 82 4a fd ff       	call   f0100d0e <cprintf>
f012c28c:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f012c28f:	e8 c5 0d fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c294:	89 c2                	mov    %eax,%edx
f012c296:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012c299:	39 c2                	cmp    %eax,%edx
f012c29b:	74 1d                	je     f012c2ba <test_kfreelast+0x21c5>
f012c29d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c2a1:	75 17                	jne    f012c2ba <test_kfreelast+0x21c5>
f012c2a3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c2aa:	83 ec 0c             	sub    $0xc,%esp
f012c2ad:	68 80 c6 13 f0       	push   $0xf013c680
f012c2b2:	e8 57 4a fd ff       	call   f0100d0e <cprintf>
f012c2b7:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012c2ba:	83 ec 0c             	sub    $0xc,%esp
f012c2bd:	6a 03                	push   $0x3
f012c2bf:	e8 35 12 fe ff       	call   f010d4f9 <sys_bypassPageFault>
f012c2c4:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f012c2c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012c2ce:	e9 8e 00 00 00       	jmp    f012c361 <test_kfreelast+0x226c>
		{
			ptr = (char *) ptr_allocations[i];
f012c2d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012c2d6:	8b 84 85 6c fd ff ff 	mov    -0x294(%ebp,%eax,4),%eax
f012c2dd:	89 45 84             	mov    %eax,-0x7c(%ebp)
			ptr[0] = 10;
f012c2e0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c2e3:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012c2e6:	e8 fc 11 fe ff       	call   f010d4e7 <sys_rcr2>
f012c2eb:	89 c2                	mov    %eax,%edx
f012c2ed:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c2f0:	39 c2                	cmp    %eax,%edx
f012c2f2:	74 1d                	je     f012c311 <test_kfreelast+0x221c>
f012c2f4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c2f8:	75 17                	jne    f012c311 <test_kfreelast+0x221c>
f012c2fa:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c301:	83 ec 0c             	sub    $0xc,%esp
f012c304:	68 38 c6 13 f0       	push   $0xf013c638
f012c309:	e8 00 4a fd ff       	call   f0100d0e <cprintf>
f012c30e:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f012c311:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012c314:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012c31b:	89 c2                	mov    %eax,%edx
f012c31d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c320:	01 d0                	add    %edx,%eax
f012c322:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012c325:	e8 bd 11 fe ff       	call   f010d4e7 <sys_rcr2>
f012c32a:	89 c2                	mov    %eax,%edx
f012c32c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012c32f:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012c336:	89 c1                	mov    %eax,%ecx
f012c338:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c33b:	01 c8                	add    %ecx,%eax
f012c33d:	39 c2                	cmp    %eax,%edx
f012c33f:	74 1d                	je     f012c35e <test_kfreelast+0x2269>
f012c341:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c345:	75 17                	jne    f012c35e <test_kfreelast+0x2269>
f012c347:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c34e:	83 ec 0c             	sub    $0xc,%esp
f012c351:	68 38 c6 13 f0       	push   $0xf013c638
f012c356:	e8 b3 49 fd ff       	call   f0100d0e <cprintf>
f012c35b:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f012c35e:	ff 45 f4             	incl   -0xc(%ebp)
f012c361:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f012c365:	0f 8e 68 ff ff ff    	jle    f012c2d3 <test_kfreelast+0x21de>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012c36b:	83 ec 0c             	sub    $0xc,%esp
f012c36e:	6a 00                	push   $0x0
f012c370:	e8 84 11 fe ff       	call   f010d4f9 <sys_bypassPageFault>
f012c375:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012c378:	e8 dc 0c fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c37d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c380:	e8 5e 7a fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012c385:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f012c388:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012c38e:	83 ec 0c             	sub    $0xc,%esp
f012c391:	50                   	push   %eax
f012c392:	e8 82 b7 fd ff       	call   f0107b19 <kfree>
f012c397:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c39a:	e8 44 7a fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012c39f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c3a2:	74 1d                	je     f012c3c1 <test_kfreelast+0x22cc>
f012c3a4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c3a8:	75 17                	jne    f012c3c1 <test_kfreelast+0x22cc>
f012c3aa:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c3b1:	83 ec 0c             	sub    $0xc,%esp
f012c3b4:	68 b4 c4 13 f0       	push   $0xf013c4b4
f012c3b9:	e8 50 49 fd ff       	call   f0100d0e <cprintf>
f012c3be:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012c3c1:	e8 93 0c fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c3c6:	89 c2                	mov    %eax,%edx
f012c3c8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c3cb:	39 c2                	cmp    %eax,%edx
f012c3cd:	74 1d                	je     f012c3ec <test_kfreelast+0x22f7>
f012c3cf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c3d3:	75 17                	jne    f012c3ec <test_kfreelast+0x22f7>
f012c3d5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c3dc:	83 ec 0c             	sub    $0xc,%esp
f012c3df:	68 b8 c6 13 f0       	push   $0xf013c6b8
f012c3e4:	e8 25 49 fd ff       	call   f0100d0e <cprintf>
f012c3e9:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012c3ec:	e8 68 0c fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c3f1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c3f4:	e8 ea 79 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012c3f9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012c3fc:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012c402:	83 ec 0c             	sub    $0xc,%esp
f012c405:	50                   	push   %eax
f012c406:	e8 0e b7 fd ff       	call   f0107b19 <kfree>
f012c40b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c40e:	e8 d0 79 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012c413:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c416:	74 1d                	je     f012c435 <test_kfreelast+0x2340>
f012c418:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c41c:	75 17                	jne    f012c435 <test_kfreelast+0x2340>
f012c41e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c425:	83 ec 0c             	sub    $0xc,%esp
f012c428:	68 b4 c4 13 f0       	push   $0xf013c4b4
f012c42d:	e8 dc 48 fd ff       	call   f0100d0e <cprintf>
f012c432:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012c435:	e8 1f 0c fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c43a:	89 c2                	mov    %eax,%edx
f012c43c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c43f:	39 c2                	cmp    %eax,%edx
f012c441:	74 1d                	je     f012c460 <test_kfreelast+0x236b>
f012c443:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c447:	75 17                	jne    f012c460 <test_kfreelast+0x236b>
f012c449:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c450:	83 ec 0c             	sub    $0xc,%esp
f012c453:	68 b8 c6 13 f0       	push   $0xf013c6b8
f012c458:	e8 b1 48 fd ff       	call   f0100d0e <cprintf>
f012c45d:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012c460:	e8 f4 0b fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c465:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c468:	e8 76 79 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012c46d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012c470:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012c476:	83 ec 0c             	sub    $0xc,%esp
f012c479:	50                   	push   %eax
f012c47a:	e8 9a b6 fd ff       	call   f0107b19 <kfree>
f012c47f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c482:	e8 5c 79 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012c487:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c48a:	74 1d                	je     f012c4a9 <test_kfreelast+0x23b4>
f012c48c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c490:	75 17                	jne    f012c4a9 <test_kfreelast+0x23b4>
f012c492:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c499:	83 ec 0c             	sub    $0xc,%esp
f012c49c:	68 b4 c4 13 f0       	push   $0xf013c4b4
f012c4a1:	e8 68 48 fd ff       	call   f0100d0e <cprintf>
f012c4a6:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012c4a9:	e8 ab 0b fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c4ae:	89 c2                	mov    %eax,%edx
f012c4b0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c4b3:	39 c2                	cmp    %eax,%edx
f012c4b5:	74 1d                	je     f012c4d4 <test_kfreelast+0x23df>
f012c4b7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c4bb:	75 17                	jne    f012c4d4 <test_kfreelast+0x23df>
f012c4bd:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c4c4:	83 ec 0c             	sub    $0xc,%esp
f012c4c7:	68 b8 c6 13 f0       	push   $0xf013c6b8
f012c4cc:	e8 3d 48 fd ff       	call   f0100d0e <cprintf>
f012c4d1:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012c4d4:	e8 80 0b fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c4d9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c4dc:	e8 02 79 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012c4e1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012c4e4:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012c4ea:	83 ec 0c             	sub    $0xc,%esp
f012c4ed:	50                   	push   %eax
f012c4ee:	e8 26 b6 fd ff       	call   f0107b19 <kfree>
f012c4f3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c4f6:	e8 e8 78 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012c4fb:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c4fe:	74 1d                	je     f012c51d <test_kfreelast+0x2428>
f012c500:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c504:	75 17                	jne    f012c51d <test_kfreelast+0x2428>
f012c506:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c50d:	83 ec 0c             	sub    $0xc,%esp
f012c510:	68 b4 c4 13 f0       	push   $0xf013c4b4
f012c515:	e8 f4 47 fd ff       	call   f0100d0e <cprintf>
f012c51a:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012c51d:	e8 37 0b fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c522:	89 c2                	mov    %eax,%edx
f012c524:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c527:	39 c2                	cmp    %eax,%edx
f012c529:	74 1d                	je     f012c548 <test_kfreelast+0x2453>
f012c52b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c52f:	75 17                	jne    f012c548 <test_kfreelast+0x2453>
f012c531:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c538:	83 ec 0c             	sub    $0xc,%esp
f012c53b:	68 b8 c6 13 f0       	push   $0xf013c6b8
f012c540:	e8 c9 47 fd ff       	call   f0100d0e <cprintf>
f012c545:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012c548:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c54c:	75 17                	jne    f012c565 <test_kfreelast+0x2470>
f012c54e:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012c552:	83 ec 08             	sub    $0x8,%esp
f012c555:	ff 75 f0             	pushl  -0x10(%ebp)
f012c558:	68 8c c4 13 f0       	push   $0xf013c48c
f012c55d:	e8 ac 47 fd ff       	call   f0100d0e <cprintf>
f012c562:	83 c4 10             	add    $0x10,%esp
f012c565:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f012c56c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012c571:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012c574:	5b                   	pop    %ebx
f012c575:	5f                   	pop    %edi
f012c576:	5d                   	pop    %ebp
f012c577:	c3                   	ret    

f012c578 <test_krealloc>:

int test_krealloc() {
f012c578:	55                   	push   %ebp
f012c579:	89 e5                	mov    %esp,%ebp
f012c57b:	57                   	push   %edi
f012c57c:	53                   	push   %ebx
f012c57d:	81 ec 50 02 00 00    	sub    $0x250,%esp
	cprintf("==============================================\n");
f012c583:	83 ec 0c             	sub    $0xc,%esp
f012c586:	68 9c b3 13 f0       	push   $0xf013b39c
f012c58b:	e8 7e 47 fd ff       	call   f0100d0e <cprintf>
f012c590:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012c593:	83 ec 0c             	sub    $0xc,%esp
f012c596:	68 cc b3 13 f0       	push   $0xf013b3cc
f012c59b:	e8 6e 47 fd ff       	call   f0100d0e <cprintf>
f012c5a0:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012c5a3:	83 ec 0c             	sub    $0xc,%esp
f012c5a6:	68 9c b3 13 f0       	push   $0xf013b39c
f012c5ab:	e8 5e 47 fd ff       	call   f0100d0e <cprintf>
f012c5b0:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012c5b3:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012c5b7:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012c5bb:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012c5c1:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012c5c7:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012c5ce:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012c5d5:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f012c5db:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c5e0:	b8 00 00 00 00       	mov    $0x0,%eax
f012c5e5:	89 d7                	mov    %edx,%edi
f012c5e7:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012c5e9:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012c5f0:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f012c5f6:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c5fb:	b8 00 00 00 00       	mov    $0x0,%eax
f012c600:	89 d7                	mov    %edx,%edi
f012c602:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012c604:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
f012c60a:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c60f:	b8 00 00 00 00       	mov    $0x0,%eax
f012c614:	89 d7                	mov    %edx,%edi
f012c616:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c618:	e8 3c 0a fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c61d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012c620:	83 ec 08             	sub    $0x8,%esp
f012c623:	68 00 fc 0f 00       	push   $0xffc00
f012c628:	6a 00                	push   $0x0
f012c62a:	e8 95 b6 fd ff       	call   f0107cc4 <krealloc>
f012c62f:	83 c4 10             	add    $0x10,%esp
f012c632:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012c638:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c63e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c643:	77 17                	ja     f012c65c <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c645:	83 ec 04             	sub    $0x4,%esp
f012c648:	68 00 c7 13 f0       	push   $0xf013c700
f012c64d:	68 e2 0e 00 00       	push   $0xee2
f012c652:	68 5a b4 13 f0       	push   $0xf013b45a
f012c657:	e8 a9 3b fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012c65c:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c662:	89 c1                	mov    %eax,%ecx
f012c664:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012c66b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012c66e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c673:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012c676:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012c679:	ba 00 00 00 00       	mov    $0x0,%edx
f012c67e:	f7 75 b4             	divl   -0x4c(%ebp)
f012c681:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012c684:	29 d0                	sub    %edx,%eax
f012c686:	89 c3                	mov    %eax,%ebx
f012c688:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012c68f:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012c694:	0f b6 d0             	movzbl %al,%edx
f012c697:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012c69a:	01 d0                	add    %edx,%eax
f012c69c:	48                   	dec    %eax
f012c69d:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012c6a0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012c6a3:	ba 00 00 00 00       	mov    $0x0,%edx
f012c6a8:	f7 75 ac             	divl   -0x54(%ebp)
f012c6ab:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012c6ae:	29 d0                	sub    %edx,%eax
f012c6b0:	01 c3                	add    %eax,%ebx
f012c6b2:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012c6b9:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012c6be:	0f b6 c0             	movzbl %al,%eax
f012c6c1:	c1 e0 04             	shl    $0x4,%eax
f012c6c4:	89 c2                	mov    %eax,%edx
f012c6c6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012c6c9:	01 d0                	add    %edx,%eax
f012c6cb:	48                   	dec    %eax
f012c6cc:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012c6cf:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012c6d2:	ba 00 00 00 00       	mov    $0x0,%edx
f012c6d7:	f7 75 a4             	divl   -0x5c(%ebp)
f012c6da:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012c6dd:	29 d0                	sub    %edx,%eax
f012c6df:	01 d8                	add    %ebx,%eax
f012c6e1:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012c6e6:	39 c1                	cmp    %eax,%ecx
f012c6e8:	74 17                	je     f012c701 <test_krealloc+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012c6ea:	83 ec 04             	sub    $0x4,%esp
f012c6ed:	68 3c c7 13 f0       	push   $0xf013c73c
f012c6f2:	68 e4 0e 00 00       	push   $0xee4
f012c6f7:	68 5a b4 13 f0       	push   $0xf013b45a
f012c6fc:	e8 04 3b fd ff       	call   f0100205 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c701:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c704:	e8 50 09 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c709:	29 c3                	sub    %eax,%ebx
f012c70b:	89 d8                	mov    %ebx,%eax
f012c70d:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c712:	74 17                	je     f012c72b <test_krealloc+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012c714:	83 ec 04             	sub    $0x4,%esp
f012c717:	68 6e c7 13 f0       	push   $0xf013c76e
f012c71c:	68 e7 0e 00 00       	push   $0xee7
f012c721:	68 5a b4 13 f0       	push   $0xf013b45a
f012c726:	e8 da 3a fd ff       	call   f0100205 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012c72b:	c7 85 08 fe ff ff ff 	movl   $0xffbff,-0x1f8(%ebp)
f012c732:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c735:	e8 1f 09 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c73a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012c73d:	83 ec 08             	sub    $0x8,%esp
f012c740:	68 00 fc 0f 00       	push   $0xffc00
f012c745:	6a 00                	push   $0x0
f012c747:	e8 78 b5 fd ff       	call   f0107cc4 <krealloc>
f012c74c:	83 c4 10             	add    $0x10,%esp
f012c74f:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012c755:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c75b:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012c760:	77 17                	ja     f012c779 <test_krealloc+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c762:	83 ec 04             	sub    $0x4,%esp
f012c765:	68 00 c7 13 f0       	push   $0xf013c700
f012c76a:	68 ef 0e 00 00       	push   $0xeef
f012c76f:	68 5a b4 13 f0       	push   $0xf013b45a
f012c774:	e8 8c 3a fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012c779:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c77f:	89 c1                	mov    %eax,%ecx
f012c781:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012c788:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012c78b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c790:	89 45 98             	mov    %eax,-0x68(%ebp)
f012c793:	8b 45 98             	mov    -0x68(%ebp),%eax
f012c796:	ba 00 00 00 00       	mov    $0x0,%edx
f012c79b:	f7 75 9c             	divl   -0x64(%ebp)
f012c79e:	8b 45 98             	mov    -0x68(%ebp),%eax
f012c7a1:	29 d0                	sub    %edx,%eax
f012c7a3:	89 c3                	mov    %eax,%ebx
f012c7a5:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012c7ac:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012c7b1:	0f b6 d0             	movzbl %al,%edx
f012c7b4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012c7b7:	01 d0                	add    %edx,%eax
f012c7b9:	48                   	dec    %eax
f012c7ba:	89 45 90             	mov    %eax,-0x70(%ebp)
f012c7bd:	8b 45 90             	mov    -0x70(%ebp),%eax
f012c7c0:	ba 00 00 00 00       	mov    $0x0,%edx
f012c7c5:	f7 75 94             	divl   -0x6c(%ebp)
f012c7c8:	8b 45 90             	mov    -0x70(%ebp),%eax
f012c7cb:	29 d0                	sub    %edx,%eax
f012c7cd:	01 c3                	add    %eax,%ebx
f012c7cf:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012c7d6:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012c7db:	0f b6 c0             	movzbl %al,%eax
f012c7de:	c1 e0 04             	shl    $0x4,%eax
f012c7e1:	89 c2                	mov    %eax,%edx
f012c7e3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012c7e6:	01 d0                	add    %edx,%eax
f012c7e8:	48                   	dec    %eax
f012c7e9:	89 45 88             	mov    %eax,-0x78(%ebp)
f012c7ec:	8b 45 88             	mov    -0x78(%ebp),%eax
f012c7ef:	ba 00 00 00 00       	mov    $0x0,%edx
f012c7f4:	f7 75 8c             	divl   -0x74(%ebp)
f012c7f7:	8b 45 88             	mov    -0x78(%ebp),%eax
f012c7fa:	29 d0                	sub    %edx,%eax
f012c7fc:	01 d8                	add    %ebx,%eax
f012c7fe:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012c803:	39 c1                	cmp    %eax,%ecx
f012c805:	74 17                	je     f012c81e <test_krealloc+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012c807:	83 ec 04             	sub    $0x4,%esp
f012c80a:	68 3c c7 13 f0       	push   $0xf013c73c
f012c80f:	68 f1 0e 00 00       	push   $0xef1
f012c814:	68 5a b4 13 f0       	push   $0xf013b45a
f012c819:	e8 e7 39 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c81e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c821:	e8 33 08 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c826:	29 c3                	sub    %eax,%ebx
f012c828:	89 d8                	mov    %ebx,%eax
f012c82a:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c82f:	74 17                	je     f012c848 <test_krealloc+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012c831:	83 ec 04             	sub    $0x4,%esp
f012c834:	68 6e c7 13 f0       	push   $0xf013c76e
f012c839:	68 f3 0e 00 00       	push   $0xef3
f012c83e:	68 5a b4 13 f0       	push   $0xf013b45a
f012c843:	e8 bd 39 fd ff       	call   f0100205 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012c848:	c7 85 0c fe ff ff ff 	movl   $0xffbff,-0x1f4(%ebp)
f012c84f:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c852:	e8 02 08 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c857:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012c85a:	83 ec 08             	sub    $0x8,%esp
f012c85d:	68 00 fc 0f 00       	push   $0xffc00
f012c862:	6a 00                	push   $0x0
f012c864:	e8 5b b4 fd ff       	call   f0107cc4 <krealloc>
f012c869:	83 c4 10             	add    $0x10,%esp
f012c86c:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012c872:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c878:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012c87d:	77 17                	ja     f012c896 <test_krealloc+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c87f:	83 ec 04             	sub    $0x4,%esp
f012c882:	68 00 c7 13 f0       	push   $0xf013c700
f012c887:	68 fb 0e 00 00       	push   $0xefb
f012c88c:	68 5a b4 13 f0       	push   $0xf013b45a
f012c891:	e8 6f 39 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012c896:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c89c:	89 c1                	mov    %eax,%ecx
f012c89e:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012c8a5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c8a8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c8ad:	89 45 80             	mov    %eax,-0x80(%ebp)
f012c8b0:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c8b3:	ba 00 00 00 00       	mov    $0x0,%edx
f012c8b8:	f7 75 84             	divl   -0x7c(%ebp)
f012c8bb:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c8be:	29 d0                	sub    %edx,%eax
f012c8c0:	89 c3                	mov    %eax,%ebx
f012c8c2:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012c8c9:	10 00 00 
f012c8cc:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012c8d1:	0f b6 d0             	movzbl %al,%edx
f012c8d4:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012c8da:	01 d0                	add    %edx,%eax
f012c8dc:	48                   	dec    %eax
f012c8dd:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012c8e3:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c8e9:	ba 00 00 00 00       	mov    $0x0,%edx
f012c8ee:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012c8f4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c8fa:	29 d0                	sub    %edx,%eax
f012c8fc:	01 c3                	add    %eax,%ebx
f012c8fe:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012c905:	10 00 00 
f012c908:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012c90d:	0f b6 c0             	movzbl %al,%eax
f012c910:	c1 e0 04             	shl    $0x4,%eax
f012c913:	89 c2                	mov    %eax,%edx
f012c915:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012c91b:	01 d0                	add    %edx,%eax
f012c91d:	48                   	dec    %eax
f012c91e:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012c924:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c92a:	ba 00 00 00 00       	mov    $0x0,%edx
f012c92f:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012c935:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c93b:	29 d0                	sub    %edx,%eax
f012c93d:	01 d8                	add    %ebx,%eax
f012c93f:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012c944:	39 c1                	cmp    %eax,%ecx
f012c946:	74 17                	je     f012c95f <test_krealloc+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012c948:	83 ec 04             	sub    $0x4,%esp
f012c94b:	68 3c c7 13 f0       	push   $0xf013c73c
f012c950:	68 fd 0e 00 00       	push   $0xefd
f012c955:	68 5a b4 13 f0       	push   $0xf013b45a
f012c95a:	e8 a6 38 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c95f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c962:	e8 f2 06 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c967:	29 c3                	sub    %eax,%ebx
f012c969:	89 d8                	mov    %ebx,%eax
f012c96b:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c970:	74 17                	je     f012c989 <test_krealloc+0x411>
			panic("krealloc: Wrong allocation: ");
f012c972:	83 ec 04             	sub    $0x4,%esp
f012c975:	68 6e c7 13 f0       	push   $0xf013c76e
f012c97a:	68 ff 0e 00 00       	push   $0xeff
f012c97f:	68 5a b4 13 f0       	push   $0xf013b45a
f012c984:	e8 7c 38 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c989:	c7 85 10 fe ff ff ff 	movl   $0x3feff,-0x1f0(%ebp)
f012c990:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c993:	e8 c1 06 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012c998:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012c99b:	83 ec 08             	sub    $0x8,%esp
f012c99e:	68 00 fc 0f 00       	push   $0xffc00
f012c9a3:	6a 00                	push   $0x0
f012c9a5:	e8 1a b3 fd ff       	call   f0107cc4 <krealloc>
f012c9aa:	83 c4 10             	add    $0x10,%esp
f012c9ad:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012c9b3:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c9b9:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012c9be:	77 17                	ja     f012c9d7 <test_krealloc+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c9c0:	83 ec 04             	sub    $0x4,%esp
f012c9c3:	68 00 c7 13 f0       	push   $0xf013c700
f012c9c8:	68 06 0f 00 00       	push   $0xf06
f012c9cd:	68 5a b4 13 f0       	push   $0xf013b45a
f012c9d2:	e8 2e 38 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012c9d7:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c9dd:	89 c1                	mov    %eax,%ecx
f012c9df:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012c9e6:	10 00 00 
f012c9e9:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012c9ef:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c9f4:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012c9fa:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012ca00:	ba 00 00 00 00       	mov    $0x0,%edx
f012ca05:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012ca0b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012ca11:	29 d0                	sub    %edx,%eax
f012ca13:	89 c3                	mov    %eax,%ebx
f012ca15:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012ca1c:	10 00 00 
f012ca1f:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012ca24:	0f b6 d0             	movzbl %al,%edx
f012ca27:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012ca2d:	01 d0                	add    %edx,%eax
f012ca2f:	48                   	dec    %eax
f012ca30:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012ca36:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012ca3c:	ba 00 00 00 00       	mov    $0x0,%edx
f012ca41:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012ca47:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012ca4d:	29 d0                	sub    %edx,%eax
f012ca4f:	01 c3                	add    %eax,%ebx
f012ca51:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012ca58:	10 00 00 
f012ca5b:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012ca60:	0f b6 c0             	movzbl %al,%eax
f012ca63:	c1 e0 04             	shl    $0x4,%eax
f012ca66:	89 c2                	mov    %eax,%edx
f012ca68:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012ca6e:	01 d0                	add    %edx,%eax
f012ca70:	48                   	dec    %eax
f012ca71:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012ca77:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012ca7d:	ba 00 00 00 00       	mov    $0x0,%edx
f012ca82:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012ca88:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012ca8e:	29 d0                	sub    %edx,%eax
f012ca90:	01 d8                	add    %ebx,%eax
f012ca92:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012ca97:	39 c1                	cmp    %eax,%ecx
f012ca99:	74 17                	je     f012cab2 <test_krealloc+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012ca9b:	83 ec 04             	sub    $0x4,%esp
f012ca9e:	68 3c c7 13 f0       	push   $0xf013c73c
f012caa3:	68 08 0f 00 00       	push   $0xf08
f012caa8:	68 5a b4 13 f0       	push   $0xf013b45a
f012caad:	e8 53 37 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012cab2:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cab5:	e8 9f 05 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012caba:	29 c3                	sub    %eax,%ebx
f012cabc:	89 d8                	mov    %ebx,%eax
f012cabe:	3d 00 01 00 00       	cmp    $0x100,%eax
f012cac3:	74 17                	je     f012cadc <test_krealloc+0x564>
			panic("krealloc: Wrong allocation: ");
f012cac5:	83 ec 04             	sub    $0x4,%esp
f012cac8:	68 6e c7 13 f0       	push   $0xf013c76e
f012cacd:	68 0a 0f 00 00       	push   $0xf0a
f012cad2:	68 5a b4 13 f0       	push   $0xf013b45a
f012cad7:	e8 29 37 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012cadc:	c7 85 14 fe ff ff ff 	movl   $0x3feff,-0x1ec(%ebp)
f012cae3:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012cae6:	e8 6e 05 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012caeb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012caee:	83 ec 08             	sub    $0x8,%esp
f012caf1:	68 00 fc 1f 00       	push   $0x1ffc00
f012caf6:	6a 00                	push   $0x0
f012caf8:	e8 c7 b1 fd ff       	call   f0107cc4 <krealloc>
f012cafd:	83 c4 10             	add    $0x10,%esp
f012cb00:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012cb06:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cb0c:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012cb11:	77 17                	ja     f012cb2a <test_krealloc+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cb13:	83 ec 04             	sub    $0x4,%esp
f012cb16:	68 00 c7 13 f0       	push   $0xf013c700
f012cb1b:	68 11 0f 00 00       	push   $0xf11
f012cb20:	68 5a b4 13 f0       	push   $0xf013b45a
f012cb25:	e8 db 36 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012cb2a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cb30:	89 c1                	mov    %eax,%ecx
f012cb32:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012cb39:	10 00 00 
f012cb3c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012cb42:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012cb47:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012cb4d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012cb53:	ba 00 00 00 00       	mov    $0x0,%edx
f012cb58:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012cb5e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012cb64:	29 d0                	sub    %edx,%eax
f012cb66:	89 c3                	mov    %eax,%ebx
f012cb68:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012cb6f:	10 00 00 
f012cb72:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012cb77:	0f b6 d0             	movzbl %al,%edx
f012cb7a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012cb80:	01 d0                	add    %edx,%eax
f012cb82:	48                   	dec    %eax
f012cb83:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012cb89:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012cb8f:	ba 00 00 00 00       	mov    $0x0,%edx
f012cb94:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012cb9a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012cba0:	29 d0                	sub    %edx,%eax
f012cba2:	01 c3                	add    %eax,%ebx
f012cba4:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012cbab:	10 00 00 
f012cbae:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012cbb3:	0f b6 c0             	movzbl %al,%eax
f012cbb6:	c1 e0 04             	shl    $0x4,%eax
f012cbb9:	89 c2                	mov    %eax,%edx
f012cbbb:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012cbc1:	01 d0                	add    %edx,%eax
f012cbc3:	48                   	dec    %eax
f012cbc4:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012cbca:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012cbd0:	ba 00 00 00 00       	mov    $0x0,%edx
f012cbd5:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012cbdb:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012cbe1:	29 d0                	sub    %edx,%eax
f012cbe3:	01 d8                	add    %ebx,%eax
f012cbe5:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012cbea:	39 c1                	cmp    %eax,%ecx
f012cbec:	74 17                	je     f012cc05 <test_krealloc+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012cbee:	83 ec 04             	sub    $0x4,%esp
f012cbf1:	68 3c c7 13 f0       	push   $0xf013c73c
f012cbf6:	68 13 0f 00 00       	push   $0xf13
f012cbfb:	68 5a b4 13 f0       	push   $0xf013b45a
f012cc00:	e8 00 36 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012cc05:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cc08:	e8 4c 04 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012cc0d:	29 c3                	sub    %eax,%ebx
f012cc0f:	89 d8                	mov    %ebx,%eax
f012cc11:	3d 00 02 00 00       	cmp    $0x200,%eax
f012cc16:	74 17                	je     f012cc2f <test_krealloc+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012cc18:	83 ec 04             	sub    $0x4,%esp
f012cc1b:	68 6e c7 13 f0       	push   $0xf013c76e
f012cc20:	68 15 0f 00 00       	push   $0xf15
f012cc25:	68 5a b4 13 f0       	push   $0xf013b45a
f012cc2a:	e8 d6 35 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012cc2f:	c7 85 18 fe ff ff ff 	movl   $0xffdff,-0x1e8(%ebp)
f012cc36:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012cc39:	e8 1b 04 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012cc3e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012cc41:	83 ec 08             	sub    $0x8,%esp
f012cc44:	68 00 fc 1f 00       	push   $0x1ffc00
f012cc49:	6a 00                	push   $0x0
f012cc4b:	e8 74 b0 fd ff       	call   f0107cc4 <krealloc>
f012cc50:	83 c4 10             	add    $0x10,%esp
f012cc53:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012cc59:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012cc5f:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012cc64:	77 17                	ja     f012cc7d <test_krealloc+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cc66:	83 ec 04             	sub    $0x4,%esp
f012cc69:	68 00 c7 13 f0       	push   $0xf013c700
f012cc6e:	68 1c 0f 00 00       	push   $0xf1c
f012cc73:	68 5a b4 13 f0       	push   $0xf013b45a
f012cc78:	e8 88 35 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012cc7d:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012cc83:	89 c1                	mov    %eax,%ecx
f012cc85:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012cc8c:	10 00 00 
f012cc8f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012cc95:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012cc9a:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012cca0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012cca6:	ba 00 00 00 00       	mov    $0x0,%edx
f012ccab:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012ccb1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012ccb7:	29 d0                	sub    %edx,%eax
f012ccb9:	89 c3                	mov    %eax,%ebx
f012ccbb:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012ccc2:	10 00 00 
f012ccc5:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012ccca:	0f b6 d0             	movzbl %al,%edx
f012cccd:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012ccd3:	01 d0                	add    %edx,%eax
f012ccd5:	48                   	dec    %eax
f012ccd6:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012ccdc:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012cce2:	ba 00 00 00 00       	mov    $0x0,%edx
f012cce7:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012cced:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012ccf3:	29 d0                	sub    %edx,%eax
f012ccf5:	01 c3                	add    %eax,%ebx
f012ccf7:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012ccfe:	10 00 00 
f012cd01:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012cd06:	0f b6 c0             	movzbl %al,%eax
f012cd09:	c1 e0 04             	shl    $0x4,%eax
f012cd0c:	89 c2                	mov    %eax,%edx
f012cd0e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012cd14:	01 d0                	add    %edx,%eax
f012cd16:	48                   	dec    %eax
f012cd17:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012cd1d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012cd23:	ba 00 00 00 00       	mov    $0x0,%edx
f012cd28:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012cd2e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012cd34:	29 d0                	sub    %edx,%eax
f012cd36:	01 d8                	add    %ebx,%eax
f012cd38:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012cd3d:	39 c1                	cmp    %eax,%ecx
f012cd3f:	74 17                	je     f012cd58 <test_krealloc+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012cd41:	83 ec 04             	sub    $0x4,%esp
f012cd44:	68 3c c7 13 f0       	push   $0xf013c73c
f012cd49:	68 1e 0f 00 00       	push   $0xf1e
f012cd4e:	68 5a b4 13 f0       	push   $0xf013b45a
f012cd53:	e8 ad 34 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012cd58:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cd5b:	e8 f9 02 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012cd60:	29 c3                	sub    %eax,%ebx
f012cd62:	89 d8                	mov    %ebx,%eax
f012cd64:	3d 00 02 00 00       	cmp    $0x200,%eax
f012cd69:	74 17                	je     f012cd82 <test_krealloc+0x80a>
			panic("krealloc: Wrong allocation: ");
f012cd6b:	83 ec 04             	sub    $0x4,%esp
f012cd6e:	68 6e c7 13 f0       	push   $0xf013c76e
f012cd73:	68 20 0f 00 00       	push   $0xf20
f012cd78:	68 5a b4 13 f0       	push   $0xf013b45a
f012cd7d:	e8 83 34 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012cd82:	c7 85 1c fe ff ff ff 	movl   $0xffdff,-0x1e4(%ebp)
f012cd89:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012cd8c:	e8 c8 02 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012cd91:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012cd94:	83 ec 08             	sub    $0x8,%esp
f012cd97:	68 00 fc 2f 00       	push   $0x2ffc00
f012cd9c:	6a 00                	push   $0x0
f012cd9e:	e8 21 af fd ff       	call   f0107cc4 <krealloc>
f012cda3:	83 c4 10             	add    $0x10,%esp
f012cda6:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012cdac:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cdb2:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012cdb7:	77 17                	ja     f012cdd0 <test_krealloc+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cdb9:	83 ec 04             	sub    $0x4,%esp
f012cdbc:	68 00 c7 13 f0       	push   $0xf013c700
f012cdc1:	68 27 0f 00 00       	push   $0xf27
f012cdc6:	68 5a b4 13 f0       	push   $0xf013b45a
f012cdcb:	e8 35 34 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012cdd0:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cdd6:	89 c1                	mov    %eax,%ecx
f012cdd8:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012cddf:	10 00 00 
f012cde2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012cde8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012cded:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012cdf3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cdf9:	ba 00 00 00 00       	mov    $0x0,%edx
f012cdfe:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012ce04:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ce0a:	29 d0                	sub    %edx,%eax
f012ce0c:	89 c3                	mov    %eax,%ebx
f012ce0e:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012ce15:	10 00 00 
f012ce18:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012ce1d:	0f b6 d0             	movzbl %al,%edx
f012ce20:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012ce26:	01 d0                	add    %edx,%eax
f012ce28:	48                   	dec    %eax
f012ce29:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012ce2f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012ce35:	ba 00 00 00 00       	mov    $0x0,%edx
f012ce3a:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012ce40:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012ce46:	29 d0                	sub    %edx,%eax
f012ce48:	01 c3                	add    %eax,%ebx
f012ce4a:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012ce51:	10 00 00 
f012ce54:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012ce59:	0f b6 c0             	movzbl %al,%eax
f012ce5c:	c1 e0 04             	shl    $0x4,%eax
f012ce5f:	89 c2                	mov    %eax,%edx
f012ce61:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012ce67:	01 d0                	add    %edx,%eax
f012ce69:	48                   	dec    %eax
f012ce6a:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012ce70:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012ce76:	ba 00 00 00 00       	mov    $0x0,%edx
f012ce7b:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012ce81:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012ce87:	29 d0                	sub    %edx,%eax
f012ce89:	01 d8                	add    %ebx,%eax
f012ce8b:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012ce90:	39 c1                	cmp    %eax,%ecx
f012ce92:	74 17                	je     f012ceab <test_krealloc+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012ce94:	83 ec 04             	sub    $0x4,%esp
f012ce97:	68 3c c7 13 f0       	push   $0xf013c73c
f012ce9c:	68 29 0f 00 00       	push   $0xf29
f012cea1:	68 5a b4 13 f0       	push   $0xf013b45a
f012cea6:	e8 5a 33 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012ceab:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ceae:	e8 a6 01 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012ceb3:	29 c3                	sub    %eax,%ebx
f012ceb5:	89 d8                	mov    %ebx,%eax
f012ceb7:	3d 00 03 00 00       	cmp    $0x300,%eax
f012cebc:	74 17                	je     f012ced5 <test_krealloc+0x95d>
			panic("Wrong allocation: ");
f012cebe:	83 ec 04             	sub    $0x4,%esp
f012cec1:	68 a4 b8 13 f0       	push   $0xf013b8a4
f012cec6:	68 2b 0f 00 00       	push   $0xf2b
f012cecb:	68 5a b4 13 f0       	push   $0xf013b45a
f012ced0:	e8 30 33 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012ced5:	c7 85 20 fe ff ff 7f 	movl   $0x5ff7f,-0x1e0(%ebp)
f012cedc:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012cedf:	e8 75 01 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012cee4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012cee7:	83 ec 08             	sub    $0x8,%esp
f012ceea:	68 00 fc 2f 00       	push   $0x2ffc00
f012ceef:	6a 00                	push   $0x0
f012cef1:	e8 ce ad fd ff       	call   f0107cc4 <krealloc>
f012cef6:	83 c4 10             	add    $0x10,%esp
f012cef9:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012ceff:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012cf05:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012cf0a:	77 17                	ja     f012cf23 <test_krealloc+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cf0c:	83 ec 04             	sub    $0x4,%esp
f012cf0f:	68 00 c7 13 f0       	push   $0xf013c700
f012cf14:	68 32 0f 00 00       	push   $0xf32
f012cf19:	68 5a b4 13 f0       	push   $0xf013b45a
f012cf1e:	e8 e2 32 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012cf23:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012cf29:	89 c1                	mov    %eax,%ecx
f012cf2b:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012cf32:	10 00 00 
f012cf35:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012cf3b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012cf40:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012cf46:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012cf4c:	ba 00 00 00 00       	mov    $0x0,%edx
f012cf51:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012cf57:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012cf5d:	29 d0                	sub    %edx,%eax
f012cf5f:	89 c3                	mov    %eax,%ebx
f012cf61:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012cf68:	10 00 00 
f012cf6b:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012cf70:	0f b6 d0             	movzbl %al,%edx
f012cf73:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012cf79:	01 d0                	add    %edx,%eax
f012cf7b:	48                   	dec    %eax
f012cf7c:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012cf82:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012cf88:	ba 00 00 00 00       	mov    $0x0,%edx
f012cf8d:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012cf93:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012cf99:	29 d0                	sub    %edx,%eax
f012cf9b:	01 c3                	add    %eax,%ebx
f012cf9d:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012cfa4:	10 00 00 
f012cfa7:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012cfac:	0f b6 c0             	movzbl %al,%eax
f012cfaf:	c1 e0 04             	shl    $0x4,%eax
f012cfb2:	89 c2                	mov    %eax,%edx
f012cfb4:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012cfba:	01 d0                	add    %edx,%eax
f012cfbc:	48                   	dec    %eax
f012cfbd:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012cfc3:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012cfc9:	ba 00 00 00 00       	mov    $0x0,%edx
f012cfce:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012cfd4:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012cfda:	29 d0                	sub    %edx,%eax
f012cfdc:	01 d8                	add    %ebx,%eax
f012cfde:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012cfe3:	39 c1                	cmp    %eax,%ecx
f012cfe5:	74 17                	je     f012cffe <test_krealloc+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012cfe7:	83 ec 04             	sub    $0x4,%esp
f012cfea:	68 3c c7 13 f0       	push   $0xf013c73c
f012cfef:	68 34 0f 00 00       	push   $0xf34
f012cff4:	68 5a b4 13 f0       	push   $0xf013b45a
f012cff9:	e8 07 32 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012cffe:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d001:	e8 53 00 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012d006:	29 c3                	sub    %eax,%ebx
f012d008:	89 d8                	mov    %ebx,%eax
f012d00a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012d00f:	74 17                	je     f012d028 <test_krealloc+0xab0>
			panic("krealloc: Wrong allocation: ");
f012d011:	83 ec 04             	sub    $0x4,%esp
f012d014:	68 6e c7 13 f0       	push   $0xf013c76e
f012d019:	68 36 0f 00 00       	push   $0xf36
f012d01e:	68 5a b4 13 f0       	push   $0xf013b45a
f012d023:	e8 dd 31 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012d028:	c7 85 24 fe ff ff 7f 	movl   $0x5ff7f,-0x1dc(%ebp)
f012d02f:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012d032:	e8 22 00 fe ff       	call   f010d059 <sys_calculate_free_frames>
f012d037:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012d03a:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012d041:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012d044:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d04a:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012d050:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d056:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012d059:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012d05b:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012d061:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d067:	01 c2                	add    %eax,%edx
f012d069:	8a 45 ce             	mov    -0x32(%ebp),%al
f012d06c:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012d06e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d074:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012d07a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012d081:	eb 11                	jmp    f012d094 <test_krealloc+0xb1c>
			ptr[i] = 2;
f012d083:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012d086:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d08c:	01 d0                	add    %edx,%eax
f012d08e:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012d091:	ff 45 f4             	incl   -0xc(%ebp)
f012d094:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d09a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012d09d:	7d e4                	jge    f012d083 <test_krealloc+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012d09f:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d0a5:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012d0ab:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d0b1:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012d0b7:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012d0bd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012d0c4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d0ca:	01 d0                	add    %edx,%eax
f012d0cc:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012d0d2:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d0d8:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012d0de:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012d0e5:	eb 1b                	jmp    f012d102 <test_krealloc+0xb8a>
			intArr[i] = 4;
f012d0e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012d0ea:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012d0f1:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d0f7:	01 d0                	add    %edx,%eax
f012d0f9:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012d0ff:	ff 45 f0             	incl   -0x10(%ebp)
f012d102:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012d108:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012d10b:	7d da                	jge    f012d0e7 <test_krealloc+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012d10d:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d113:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012d119:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012d120:	eb 17                	jmp    f012d139 <test_krealloc+0xbc1>
			shortArr[i] = 5;
f012d122:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012d125:	01 c0                	add    %eax,%eax
f012d127:	89 c2                	mov    %eax,%edx
f012d129:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d12f:	01 d0                	add    %edx,%eax
f012d131:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012d136:	ff 45 ec             	incl   -0x14(%ebp)
f012d139:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d13f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012d142:	7d de                	jge    f012d122 <test_krealloc+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012d144:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012d14a:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012d150:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d156:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012d15b:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012d161:	01 c0                	add    %eax,%eax
f012d163:	89 c2                	mov    %eax,%edx
f012d165:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d16b:	01 d0                	add    %edx,%eax
f012d16d:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012d172:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d178:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012d17e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012d185:	eb 49                	jmp    f012d1d0 <test_krealloc+0xc58>
			structArr[i].a = 7;
f012d187:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012d18a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d191:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d197:	01 d0                	add    %edx,%eax
f012d199:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012d19c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012d19f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d1a6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d1ac:	01 d0                	add    %edx,%eax
f012d1ae:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012d1b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012d1b7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d1be:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d1c4:	01 d0                	add    %edx,%eax
f012d1c6:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012d1cd:	ff 45 e8             	incl   -0x18(%ebp)
f012d1d0:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d1d6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012d1d9:	7d ac                	jge    f012d187 <test_krealloc+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012d1db:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012d1e1:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012d1e7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d1ed:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012d1f0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d1f6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012d1fc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d202:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012d209:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d20f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d216:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d21c:	01 d0                	add    %edx,%eax
f012d21e:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012d221:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d227:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d22e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d234:	01 d0                	add    %edx,%eax
f012d236:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012d23c:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d242:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d249:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d24f:	01 d0                	add    %edx,%eax
f012d251:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012d258:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d25e:	8a 00                	mov    (%eax),%al
f012d260:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012d263:	75 17                	jne    f012d27c <test_krealloc+0xd04>
f012d265:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012d26b:	89 c2                	mov    %eax,%edx
f012d26d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d273:	01 d0                	add    %edx,%eax
f012d275:	8a 00                	mov    (%eax),%al
f012d277:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012d27a:	74 17                	je     f012d293 <test_krealloc+0xd1b>
			panic(
f012d27c:	83 ec 04             	sub    $0x4,%esp
f012d27f:	68 8c c7 13 f0       	push   $0xf013c78c
f012d284:	68 79 0f 00 00       	push   $0xf79
f012d289:	68 5a b4 13 f0       	push   $0xf013b45a
f012d28e:	e8 72 2f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012d293:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d299:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012d29f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d2a5:	8a 00                	mov    (%eax),%al
f012d2a7:	3c 02                	cmp    $0x2,%al
f012d2a9:	75 16                	jne    f012d2c1 <test_krealloc+0xd49>
f012d2ab:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d2b1:	89 c2                	mov    %eax,%edx
f012d2b3:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d2b9:	01 d0                	add    %edx,%eax
f012d2bb:	8a 00                	mov    (%eax),%al
f012d2bd:	3c 02                	cmp    $0x2,%al
f012d2bf:	74 20                	je     f012d2e1 <test_krealloc+0xd69>
			panic(
f012d2c1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d2c7:	8a 00                	mov    (%eax),%al
f012d2c9:	0f be c0             	movsbl %al,%eax
f012d2cc:	50                   	push   %eax
f012d2cd:	68 cc c7 13 f0       	push   $0xf013c7cc
f012d2d2:	68 7f 0f 00 00       	push   $0xf7f
f012d2d7:	68 5a b4 13 f0       	push   $0xf013b45a
f012d2dc:	e8 24 2f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012d2e1:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d2e7:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012d2ed:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d2f3:	8b 00                	mov    (%eax),%eax
f012d2f5:	83 f8 03             	cmp    $0x3,%eax
f012d2f8:	75 1c                	jne    f012d316 <test_krealloc+0xd9e>
f012d2fa:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012d300:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012d307:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d30d:	01 d0                	add    %edx,%eax
f012d30f:	8b 00                	mov    (%eax),%eax
f012d311:	83 f8 03             	cmp    $0x3,%eax
f012d314:	74 17                	je     f012d32d <test_krealloc+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012d316:	83 ec 04             	sub    $0x4,%esp
f012d319:	68 18 c8 13 f0       	push   $0xf013c818
f012d31e:	68 83 0f 00 00       	push   $0xf83
f012d323:	68 5a b4 13 f0       	push   $0xf013b45a
f012d328:	e8 d8 2e fd ff       	call   f0100205 <_panic>

		intArr = (int*) ptr_allocations[3];
f012d32d:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d333:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012d339:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d33f:	8b 00                	mov    (%eax),%eax
f012d341:	83 f8 04             	cmp    $0x4,%eax
f012d344:	75 1c                	jne    f012d362 <test_krealloc+0xdea>
f012d346:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012d34c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012d353:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d359:	01 d0                	add    %edx,%eax
f012d35b:	8b 00                	mov    (%eax),%eax
f012d35d:	83 f8 04             	cmp    $0x4,%eax
f012d360:	74 17                	je     f012d379 <test_krealloc+0xe01>
			panic(
f012d362:	83 ec 04             	sub    $0x4,%esp
f012d365:	68 8c c7 13 f0       	push   $0xf013c78c
f012d36a:	68 88 0f 00 00       	push   $0xf88
f012d36f:	68 5a b4 13 f0       	push   $0xf013b45a
f012d374:	e8 8c 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012d379:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d37f:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012d385:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d38b:	66 8b 00             	mov    (%eax),%ax
f012d38e:	66 83 f8 05          	cmp    $0x5,%ax
f012d392:	75 1b                	jne    f012d3af <test_krealloc+0xe37>
f012d394:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d39a:	01 c0                	add    %eax,%eax
f012d39c:	89 c2                	mov    %eax,%edx
f012d39e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d3a4:	01 d0                	add    %edx,%eax
f012d3a6:	66 8b 00             	mov    (%eax),%ax
f012d3a9:	66 83 f8 05          	cmp    $0x5,%ax
f012d3ad:	74 17                	je     f012d3c6 <test_krealloc+0xe4e>
			panic(
f012d3af:	83 ec 04             	sub    $0x4,%esp
f012d3b2:	68 8c c7 13 f0       	push   $0xf013c78c
f012d3b7:	68 8d 0f 00 00       	push   $0xf8d
f012d3bc:	68 5a b4 13 f0       	push   $0xf013b45a
f012d3c1:	e8 3f 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012d3c6:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012d3cc:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012d3d2:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d3d8:	66 8b 00             	mov    (%eax),%ax
f012d3db:	66 83 f8 06          	cmp    $0x6,%ax
f012d3df:	75 1b                	jne    f012d3fc <test_krealloc+0xe84>
f012d3e1:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012d3e7:	01 c0                	add    %eax,%eax
f012d3e9:	89 c2                	mov    %eax,%edx
f012d3eb:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d3f1:	01 d0                	add    %edx,%eax
f012d3f3:	66 8b 00             	mov    (%eax),%ax
f012d3f6:	66 83 f8 06          	cmp    $0x6,%ax
f012d3fa:	74 17                	je     f012d413 <test_krealloc+0xe9b>
			panic(
f012d3fc:	83 ec 04             	sub    $0x4,%esp
f012d3ff:	68 8c c7 13 f0       	push   $0xf013c78c
f012d404:	68 92 0f 00 00       	push   $0xf92
f012d409:	68 5a b4 13 f0       	push   $0xf013b45a
f012d40e:	e8 f2 2d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012d413:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d419:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012d41f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d425:	8a 00                	mov    (%eax),%al
f012d427:	3c 07                	cmp    $0x7,%al
f012d429:	75 1b                	jne    f012d446 <test_krealloc+0xece>
f012d42b:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d431:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d438:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d43e:	01 d0                	add    %edx,%eax
f012d440:	8a 00                	mov    (%eax),%al
f012d442:	3c 07                	cmp    $0x7,%al
f012d444:	74 17                	je     f012d45d <test_krealloc+0xee5>
			panic(
f012d446:	83 ec 04             	sub    $0x4,%esp
f012d449:	68 8c c7 13 f0       	push   $0xf013c78c
f012d44e:	68 97 0f 00 00       	push   $0xf97
f012d453:	68 5a b4 13 f0       	push   $0xf013b45a
f012d458:	e8 a8 2d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012d45d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d463:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d467:	66 83 f8 07          	cmp    $0x7,%ax
f012d46b:	75 1f                	jne    f012d48c <test_krealloc+0xf14>
f012d46d:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d473:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d47a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d480:	01 d0                	add    %edx,%eax
f012d482:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d486:	66 83 f8 07          	cmp    $0x7,%ax
f012d48a:	74 17                	je     f012d4a3 <test_krealloc+0xf2b>
			panic(
f012d48c:	83 ec 04             	sub    $0x4,%esp
f012d48f:	68 8c c7 13 f0       	push   $0xf013c78c
f012d494:	68 9a 0f 00 00       	push   $0xf9a
f012d499:	68 5a b4 13 f0       	push   $0xf013b45a
f012d49e:	e8 62 2d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012d4a3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d4a9:	8b 40 04             	mov    0x4(%eax),%eax
f012d4ac:	83 f8 07             	cmp    $0x7,%eax
f012d4af:	75 1d                	jne    f012d4ce <test_krealloc+0xf56>
f012d4b1:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d4b7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d4be:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d4c4:	01 d0                	add    %edx,%eax
f012d4c6:	8b 40 04             	mov    0x4(%eax),%eax
f012d4c9:	83 f8 07             	cmp    $0x7,%eax
f012d4cc:	74 17                	je     f012d4e5 <test_krealloc+0xf6d>
			panic(
f012d4ce:	83 ec 04             	sub    $0x4,%esp
f012d4d1:	68 8c c7 13 f0       	push   $0xf013c78c
f012d4d6:	68 9d 0f 00 00       	push   $0xf9d
f012d4db:	68 5a b4 13 f0       	push   $0xf013b45a
f012d4e0:	e8 20 2d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012d4e5:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012d4eb:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012d4f1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d4f7:	8a 00                	mov    (%eax),%al
f012d4f9:	3c 08                	cmp    $0x8,%al
f012d4fb:	75 1b                	jne    f012d518 <test_krealloc+0xfa0>
f012d4fd:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d503:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d50a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d510:	01 d0                	add    %edx,%eax
f012d512:	8a 00                	mov    (%eax),%al
f012d514:	3c 08                	cmp    $0x8,%al
f012d516:	74 17                	je     f012d52f <test_krealloc+0xfb7>
			panic(
f012d518:	83 ec 04             	sub    $0x4,%esp
f012d51b:	68 8c c7 13 f0       	push   $0xf013c78c
f012d520:	68 a2 0f 00 00       	push   $0xfa2
f012d525:	68 5a b4 13 f0       	push   $0xf013b45a
f012d52a:	e8 d6 2c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012d52f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d535:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d539:	66 83 f8 08          	cmp    $0x8,%ax
f012d53d:	75 1f                	jne    f012d55e <test_krealloc+0xfe6>
f012d53f:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d545:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d54c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d552:	01 d0                	add    %edx,%eax
f012d554:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d558:	66 83 f8 08          	cmp    $0x8,%ax
f012d55c:	74 17                	je     f012d575 <test_krealloc+0xffd>
			panic(
f012d55e:	83 ec 04             	sub    $0x4,%esp
f012d561:	68 8c c7 13 f0       	push   $0xf013c78c
f012d566:	68 a5 0f 00 00       	push   $0xfa5
f012d56b:	68 5a b4 13 f0       	push   $0xf013b45a
f012d570:	e8 90 2c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012d575:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d57b:	8b 40 04             	mov    0x4(%eax),%eax
f012d57e:	83 f8 08             	cmp    $0x8,%eax
f012d581:	75 1d                	jne    f012d5a0 <test_krealloc+0x1028>
f012d583:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d589:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d590:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d596:	01 d0                	add    %edx,%eax
f012d598:	8b 40 04             	mov    0x4(%eax),%eax
f012d59b:	83 f8 08             	cmp    $0x8,%eax
f012d59e:	74 17                	je     f012d5b7 <test_krealloc+0x103f>
			panic(
f012d5a0:	83 ec 04             	sub    $0x4,%esp
f012d5a3:	68 8c c7 13 f0       	push   $0xf013c78c
f012d5a8:	68 a8 0f 00 00       	push   $0xfa8
f012d5ad:	68 5a b4 13 f0       	push   $0xf013b45a
f012d5b2:	e8 4e 2c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012d5b7:	e8 9d fa fd ff       	call   f010d059 <sys_calculate_free_frames>
f012d5bc:	89 c2                	mov    %eax,%edx
f012d5be:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d5c1:	39 c2                	cmp    %eax,%edx
f012d5c3:	74 17                	je     f012d5dc <test_krealloc+0x1064>
			panic(
f012d5c5:	83 ec 04             	sub    $0x4,%esp
f012d5c8:	68 4c c8 13 f0       	push   $0xf013c84c
f012d5cd:	68 ac 0f 00 00       	push   $0xfac
f012d5d2:	68 5a b4 13 f0       	push   $0xf013b45a
f012d5d7:	e8 29 2c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012d5dc:	83 ec 0c             	sub    $0xc,%esp
f012d5df:	68 98 c8 13 f0       	push   $0xf013c898
f012d5e4:	e8 25 37 fd ff       	call   f0100d0e <cprintf>
f012d5e9:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012d5ec:	e8 68 fa fd ff       	call   f010d059 <sys_calculate_free_frames>
f012d5f1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d5f4:	e8 ea 67 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012d5f9:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012d5ff:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d605:	83 ec 08             	sub    $0x8,%esp
f012d608:	6a 00                	push   $0x0
f012d60a:	50                   	push   %eax
f012d60b:	e8 b4 a6 fd ff       	call   f0107cc4 <krealloc>
f012d610:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d613:	e8 cb 67 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012d618:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d61e:	74 17                	je     f012d637 <test_krealloc+0x10bf>
			panic(
f012d620:	83 ec 04             	sub    $0x4,%esp
f012d623:	68 bc c8 13 f0       	push   $0xf013c8bc
f012d628:	68 b9 0f 00 00       	push   $0xfb9
f012d62d:	68 5a b4 13 f0       	push   $0xf013b45a
f012d632:	e8 ce 2b fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012d637:	e8 1d fa fd ff       	call   f010d059 <sys_calculate_free_frames>
f012d63c:	89 c2                	mov    %eax,%edx
f012d63e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d641:	29 c2                	sub    %eax,%edx
f012d643:	89 d0                	mov    %edx,%eax
f012d645:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d64a:	74 17                	je     f012d663 <test_krealloc+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012d64c:	83 ec 04             	sub    $0x4,%esp
f012d64f:	68 30 c9 13 f0       	push   $0xf013c930
f012d654:	68 bb 0f 00 00       	push   $0xfbb
f012d659:	68 5a b4 13 f0       	push   $0xf013b45a
f012d65e:	e8 a2 2b fd ff       	call   f0100205 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012d663:	e8 f1 f9 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012d668:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d66b:	e8 73 67 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012d670:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012d676:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d67c:	83 ec 08             	sub    $0x8,%esp
f012d67f:	6a 00                	push   $0x0
f012d681:	50                   	push   %eax
f012d682:	e8 3d a6 fd ff       	call   f0107cc4 <krealloc>
f012d687:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d68a:	e8 54 67 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012d68f:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d695:	74 17                	je     f012d6ae <test_krealloc+0x1136>
			panic(
f012d697:	83 ec 04             	sub    $0x4,%esp
f012d69a:	68 bc c8 13 f0       	push   $0xf013c8bc
f012d69f:	68 c4 0f 00 00       	push   $0xfc4
f012d6a4:	68 5a b4 13 f0       	push   $0xf013b45a
f012d6a9:	e8 57 2b fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012d6ae:	e8 a6 f9 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012d6b3:	89 c2                	mov    %eax,%edx
f012d6b5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d6b8:	29 c2                	sub    %eax,%edx
f012d6ba:	89 d0                	mov    %edx,%eax
f012d6bc:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d6c1:	74 17                	je     f012d6da <test_krealloc+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012d6c3:	83 ec 04             	sub    $0x4,%esp
f012d6c6:	68 30 c9 13 f0       	push   $0xf013c930
f012d6cb:	68 c6 0f 00 00       	push   $0xfc6
f012d6d0:	68 5a b4 13 f0       	push   $0xf013b45a
f012d6d5:	e8 2b 2b fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012d6da:	e8 7a f9 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012d6df:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d6e2:	e8 fc 66 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012d6e7:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012d6ed:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012d6f3:	83 ec 08             	sub    $0x8,%esp
f012d6f6:	6a 00                	push   $0x0
f012d6f8:	50                   	push   %eax
f012d6f9:	e8 c6 a5 fd ff       	call   f0107cc4 <krealloc>
f012d6fe:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d701:	e8 dd 66 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012d706:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d70c:	74 17                	je     f012d725 <test_krealloc+0x11ad>
			panic(
f012d70e:	83 ec 04             	sub    $0x4,%esp
f012d711:	68 74 b4 13 f0       	push   $0xf013b474
f012d716:	68 ce 0f 00 00       	push   $0xfce
f012d71b:	68 5a b4 13 f0       	push   $0xf013b45a
f012d720:	e8 e0 2a fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012d725:	e8 2f f9 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012d72a:	89 c2                	mov    %eax,%edx
f012d72c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d72f:	29 c2                	sub    %eax,%edx
f012d731:	89 d0                	mov    %edx,%eax
f012d733:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d738:	74 17                	je     f012d751 <test_krealloc+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012d73a:	83 ec 04             	sub    $0x4,%esp
f012d73d:	68 30 c9 13 f0       	push   $0xf013c930
f012d742:	68 d0 0f 00 00       	push   $0xfd0
f012d747:	68 5a b4 13 f0       	push   $0xf013b45a
f012d74c:	e8 b4 2a fd ff       	call   f0100205 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012d751:	e8 03 f9 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012d756:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d759:	e8 85 66 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012d75e:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012d764:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012d76a:	83 ec 08             	sub    $0x8,%esp
f012d76d:	6a 00                	push   $0x0
f012d76f:	50                   	push   %eax
f012d770:	e8 4f a5 fd ff       	call   f0107cc4 <krealloc>
f012d775:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d778:	e8 66 66 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012d77d:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d783:	74 17                	je     f012d79c <test_krealloc+0x1224>
			panic(
f012d785:	83 ec 04             	sub    $0x4,%esp
f012d788:	68 bc c8 13 f0       	push   $0xf013c8bc
f012d78d:	68 d8 0f 00 00       	push   $0xfd8
f012d792:	68 5a b4 13 f0       	push   $0xf013b45a
f012d797:	e8 69 2a fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012d79c:	e8 b8 f8 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012d7a1:	89 c2                	mov    %eax,%edx
f012d7a3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d7a6:	29 c2                	sub    %eax,%edx
f012d7a8:	89 d0                	mov    %edx,%eax
f012d7aa:	3d 00 03 00 00       	cmp    $0x300,%eax
f012d7af:	74 17                	je     f012d7c8 <test_krealloc+0x1250>
			panic(
f012d7b1:	83 ec 04             	sub    $0x4,%esp
f012d7b4:	68 64 c9 13 f0       	push   $0xf013c964
f012d7b9:	68 db 0f 00 00       	push   $0xfdb
f012d7be:	68 5a b4 13 f0       	push   $0xf013b45a
f012d7c3:	e8 3d 2a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d7c8:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012d7cf:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012d7d6:	eb 48                	jmp    f012d820 <test_krealloc+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012d7d8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012d7db:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f012d7e0:	83 ec 04             	sub    $0x4,%esp
f012d7e3:	8d 8d b4 fd ff ff    	lea    -0x24c(%ebp),%ecx
f012d7e9:	51                   	push   %ecx
f012d7ea:	52                   	push   %edx
f012d7eb:	50                   	push   %eax
f012d7ec:	e8 db 92 fd ff       	call   f0106acc <get_page_table>
f012d7f1:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012d7f4:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f012d7fa:	85 c0                	test   %eax,%eax
f012d7fc:	75 17                	jne    f012d815 <test_krealloc+0x129d>
					panic(
f012d7fe:	83 ec 04             	sub    $0x4,%esp
f012d801:	68 5c bd 13 f0       	push   $0xf013bd5c
f012d806:	68 e7 0f 00 00       	push   $0xfe7
f012d80b:	68 5a b4 13 f0       	push   $0xf013b45a
f012d810:	e8 f0 29 fd ff       	call   f0100205 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d815:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012d81c:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012d820:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012d824:	78 b2                	js     f012d7d8 <test_krealloc+0x1260>
f012d826:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012d82a:	7f 09                	jg     f012d835 <test_krealloc+0x12bd>
f012d82c:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012d833:	76 a3                	jbe    f012d7d8 <test_krealloc+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012d835:	83 ec 0c             	sub    $0xc,%esp
f012d838:	68 a3 c9 13 f0       	push   $0xf013c9a3
f012d83d:	e8 cc 34 fd ff       	call   f0100d0e <cprintf>
f012d842:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012d845:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d84b:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d851:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d858:	eb 21                	jmp    f012d87b <test_krealloc+0x1303>
			sums[0] += ptr[i];
f012d85a:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d860:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012d863:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d869:	01 c8                	add    %ecx,%eax
f012d86b:	8a 00                	mov    (%eax),%al
f012d86d:	0f be c0             	movsbl %al,%eax
f012d870:	01 d0                	add    %edx,%eax
f012d872:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d878:	ff 45 dc             	incl   -0x24(%ebp)
f012d87b:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d881:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d884:	7d d4                	jge    f012d85a <test_krealloc+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d886:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012d88c:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012d892:	42                   	inc    %edx
f012d893:	01 d2                	add    %edx,%edx
f012d895:	39 d0                	cmp    %edx,%eax
f012d897:	74 17                	je     f012d8b0 <test_krealloc+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012d899:	83 ec 04             	sub    $0x4,%esp
f012d89c:	68 ac c9 13 f0       	push   $0xf013c9ac
f012d8a1:	68 f9 0f 00 00       	push   $0xff9
f012d8a6:	68 5a b4 13 f0       	push   $0xf013b45a
f012d8ab:	e8 55 29 fd ff       	call   f0100205 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012d8b0:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d8b6:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012d8bc:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d8c3:	eb 25                	jmp    f012d8ea <test_krealloc+0x1372>
			sums[1] += intArr[i];
f012d8c5:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012d8cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d8ce:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012d8d5:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d8db:	01 c8                	add    %ecx,%eax
f012d8dd:	8b 00                	mov    (%eax),%eax
f012d8df:	01 d0                	add    %edx,%eax
f012d8e1:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012d8e7:	ff 45 dc             	incl   -0x24(%ebp)
f012d8ea:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012d8f0:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d8f3:	7d d0                	jge    f012d8c5 <test_krealloc+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012d8f5:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012d8fb:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012d901:	42                   	inc    %edx
f012d902:	c1 e2 02             	shl    $0x2,%edx
f012d905:	39 d0                	cmp    %edx,%eax
f012d907:	74 17                	je     f012d920 <test_krealloc+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012d909:	83 ec 04             	sub    $0x4,%esp
f012d90c:	68 ac c9 13 f0       	push   $0xf013c9ac
f012d911:	68 03 10 00 00       	push   $0x1003
f012d916:	68 5a b4 13 f0       	push   $0xf013b45a
f012d91b:	e8 e5 28 fd ff       	call   f0100205 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012d920:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d926:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d92c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d933:	eb 24                	jmp    f012d959 <test_krealloc+0x13e1>
			sums[2] += shortArr[i];
f012d935:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d93b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d93e:	01 c0                	add    %eax,%eax
f012d940:	89 c1                	mov    %eax,%ecx
f012d942:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d948:	01 c8                	add    %ecx,%eax
f012d94a:	66 8b 00             	mov    (%eax),%ax
f012d94d:	98                   	cwtl   
f012d94e:	01 d0                	add    %edx,%eax
f012d950:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d956:	ff 45 dc             	incl   -0x24(%ebp)
f012d959:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d95f:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d962:	7d d1                	jge    f012d935 <test_krealloc+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012d964:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d96a:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d970:	8d 48 01             	lea    0x1(%eax),%ecx
f012d973:	89 c8                	mov    %ecx,%eax
f012d975:	c1 e0 02             	shl    $0x2,%eax
f012d978:	01 c8                	add    %ecx,%eax
f012d97a:	39 c2                	cmp    %eax,%edx
f012d97c:	74 17                	je     f012d995 <test_krealloc+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012d97e:	83 ec 04             	sub    $0x4,%esp
f012d981:	68 ac c9 13 f0       	push   $0xf013c9ac
f012d986:	68 0d 10 00 00       	push   $0x100d
f012d98b:	68 5a b4 13 f0       	push   $0xf013b45a
f012d990:	e8 70 28 fd ff       	call   f0100205 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d995:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d99b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d9a1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d9a8:	eb 70                	jmp    f012da1a <test_krealloc+0x14a2>
			sums[3] += structArr[i].a;
f012d9aa:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012d9b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d9b3:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d9ba:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d9c0:	01 c8                	add    %ecx,%eax
f012d9c2:	8a 00                	mov    (%eax),%al
f012d9c4:	0f be c0             	movsbl %al,%eax
f012d9c7:	01 d0                	add    %edx,%eax
f012d9c9:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
			sums[4] += structArr[i].b;
f012d9cf:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012d9d5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d9d8:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d9df:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d9e5:	01 c8                	add    %ecx,%eax
f012d9e7:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d9eb:	98                   	cwtl   
f012d9ec:	01 d0                	add    %edx,%eax
f012d9ee:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
			sums[5] += structArr[i].c;
f012d9f4:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012d9fa:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d9fd:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012da04:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012da0a:	01 c8                	add    %ecx,%eax
f012da0c:	8b 40 04             	mov    0x4(%eax),%eax
f012da0f:	01 d0                	add    %edx,%eax
f012da11:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012da17:	ff 45 dc             	incl   -0x24(%ebp)
f012da1a:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012da20:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012da23:	7d 85                	jge    f012d9aa <test_krealloc+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012da25:	8b 8d c4 fd ff ff    	mov    -0x23c(%ebp),%ecx
f012da2b:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012da31:	8d 50 01             	lea    0x1(%eax),%edx
f012da34:	89 d0                	mov    %edx,%eax
f012da36:	01 c0                	add    %eax,%eax
f012da38:	01 d0                	add    %edx,%eax
f012da3a:	01 c0                	add    %eax,%eax
f012da3c:	01 d0                	add    %edx,%eax
f012da3e:	39 c1                	cmp    %eax,%ecx
f012da40:	75 3a                	jne    f012da7c <test_krealloc+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012da42:	8b 8d c8 fd ff ff    	mov    -0x238(%ebp),%ecx
f012da48:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012da4e:	8d 50 01             	lea    0x1(%eax),%edx
f012da51:	89 d0                	mov    %edx,%eax
f012da53:	01 c0                	add    %eax,%eax
f012da55:	01 d0                	add    %edx,%eax
f012da57:	01 c0                	add    %eax,%eax
f012da59:	01 d0                	add    %edx,%eax
f012da5b:	39 c1                	cmp    %eax,%ecx
f012da5d:	75 1d                	jne    f012da7c <test_krealloc+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012da5f:	8b 8d cc fd ff ff    	mov    -0x234(%ebp),%ecx
f012da65:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012da6b:	8d 50 01             	lea    0x1(%eax),%edx
f012da6e:	89 d0                	mov    %edx,%eax
f012da70:	01 c0                	add    %eax,%eax
f012da72:	01 d0                	add    %edx,%eax
f012da74:	01 c0                	add    %eax,%eax
f012da76:	01 d0                	add    %edx,%eax
f012da78:	39 c1                	cmp    %eax,%ecx
f012da7a:	74 17                	je     f012da93 <test_krealloc+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012da7c:	83 ec 04             	sub    $0x4,%esp
f012da7f:	68 ac c9 13 f0       	push   $0xf013c9ac
f012da84:	68 1b 10 00 00       	push   $0x101b
f012da89:	68 5a b4 13 f0       	push   $0xf013b45a
f012da8e:	e8 72 27 fd ff       	call   f0100205 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012da93:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012da9a:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012da9d:	e8 b7 f5 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012daa2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012daa5:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012daab:	83 ec 08             	sub    $0x8,%esp
f012daae:	68 00 3c 00 00       	push   $0x3c00
f012dab3:	50                   	push   %eax
f012dab4:	e8 0b a2 fd ff       	call   f0107cc4 <krealloc>
f012dab9:	83 c4 10             	add    $0x10,%esp
f012dabc:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dac2:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012dac8:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dacd:	77 17                	ja     f012dae6 <test_krealloc+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dacf:	83 ec 04             	sub    $0x4,%esp
f012dad2:	68 00 c7 13 f0       	push   $0xf013c700
f012dad7:	68 27 10 00 00       	push   $0x1027
f012dadc:	68 5a b4 13 f0       	push   $0xf013b45a
f012dae1:	e8 1f 27 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012dae6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012daec:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012daf2:	74 17                	je     f012db0b <test_krealloc+0x1593>
			panic(
f012daf4:	83 ec 04             	sub    $0x4,%esp
f012daf7:	68 e4 c9 13 f0       	push   $0xf013c9e4
f012dafc:	68 2a 10 00 00       	push   $0x102a
f012db01:	68 5a b4 13 f0       	push   $0xf013b45a
f012db06:	e8 fa 26 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012db0b:	e8 49 f5 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012db10:	89 c2                	mov    %eax,%edx
f012db12:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012db15:	39 c2                	cmp    %eax,%edx
f012db17:	74 17                	je     f012db30 <test_krealloc+0x15b8>
			panic(
f012db19:	83 ec 04             	sub    $0x4,%esp
f012db1c:	68 50 ca 13 f0       	push   $0xf013ca50
f012db21:	68 2d 10 00 00       	push   $0x102d
f012db26:	68 5a b4 13 f0       	push   $0xf013b45a
f012db2b:	e8 d5 26 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012db30:	e8 24 f5 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012db35:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012db38:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012db3e:	83 ec 08             	sub    $0x8,%esp
f012db41:	68 00 fc 0f 00       	push   $0xffc00
f012db46:	50                   	push   %eax
f012db47:	e8 78 a1 fd ff       	call   f0107cc4 <krealloc>
f012db4c:	83 c4 10             	add    $0x10,%esp
f012db4f:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012db55:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012db5b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012db60:	77 17                	ja     f012db79 <test_krealloc+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012db62:	83 ec 04             	sub    $0x4,%esp
f012db65:	68 00 c7 13 f0       	push   $0xf013c700
f012db6a:	68 33 10 00 00       	push   $0x1033
f012db6f:	68 5a b4 13 f0       	push   $0xf013b45a
f012db74:	e8 8c 26 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012db79:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012db7f:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012db85:	74 17                	je     f012db9e <test_krealloc+0x1626>
			panic(
f012db87:	83 ec 04             	sub    $0x4,%esp
f012db8a:	68 e4 c9 13 f0       	push   $0xf013c9e4
f012db8f:	68 36 10 00 00       	push   $0x1036
f012db94:	68 5a b4 13 f0       	push   $0xf013b45a
f012db99:	e8 67 26 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012db9e:	e8 b6 f4 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012dba3:	89 c2                	mov    %eax,%edx
f012dba5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012dba8:	39 c2                	cmp    %eax,%edx
f012dbaa:	74 17                	je     f012dbc3 <test_krealloc+0x164b>
			panic(
f012dbac:	83 ec 04             	sub    $0x4,%esp
f012dbaf:	68 50 ca 13 f0       	push   $0xf013ca50
f012dbb4:	68 39 10 00 00       	push   $0x1039
f012dbb9:	68 5a b4 13 f0       	push   $0xf013b45a
f012dbbe:	e8 42 26 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012dbc3:	e8 91 f4 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012dbc8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012dbcb:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012dbd1:	83 ec 08             	sub    $0x8,%esp
f012dbd4:	68 00 fc 0f 00       	push   $0xffc00
f012dbd9:	50                   	push   %eax
f012dbda:	e8 e5 a0 fd ff       	call   f0107cc4 <krealloc>
f012dbdf:	83 c4 10             	add    $0x10,%esp
f012dbe2:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dbe8:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012dbee:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dbf3:	77 17                	ja     f012dc0c <test_krealloc+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dbf5:	83 ec 04             	sub    $0x4,%esp
f012dbf8:	68 00 c7 13 f0       	push   $0xf013c700
f012dbfd:	68 3f 10 00 00       	push   $0x103f
f012dc02:	68 5a b4 13 f0       	push   $0xf013b45a
f012dc07:	e8 f9 25 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012dc0c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012dc12:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012dc18:	74 17                	je     f012dc31 <test_krealloc+0x16b9>
			panic(
f012dc1a:	83 ec 04             	sub    $0x4,%esp
f012dc1d:	68 e4 c9 13 f0       	push   $0xf013c9e4
f012dc22:	68 42 10 00 00       	push   $0x1042
f012dc27:	68 5a b4 13 f0       	push   $0xf013b45a
f012dc2c:	e8 d4 25 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012dc31:	e8 23 f4 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012dc36:	89 c2                	mov    %eax,%edx
f012dc38:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012dc3b:	39 c2                	cmp    %eax,%edx
f012dc3d:	74 17                	je     f012dc56 <test_krealloc+0x16de>
			panic(
f012dc3f:	83 ec 04             	sub    $0x4,%esp
f012dc42:	68 50 ca 13 f0       	push   $0xf013ca50
f012dc47:	68 45 10 00 00       	push   $0x1045
f012dc4c:	68 5a b4 13 f0       	push   $0xf013b45a
f012dc51:	e8 af 25 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012dc56:	e8 fe f3 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012dc5b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012dc5e:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012dc64:	83 ec 08             	sub    $0x8,%esp
f012dc67:	68 00 fc 0f 00       	push   $0xffc00
f012dc6c:	50                   	push   %eax
f012dc6d:	e8 52 a0 fd ff       	call   f0107cc4 <krealloc>
f012dc72:	83 c4 10             	add    $0x10,%esp
f012dc75:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dc7b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012dc81:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dc86:	77 17                	ja     f012dc9f <test_krealloc+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dc88:	83 ec 04             	sub    $0x4,%esp
f012dc8b:	68 00 c7 13 f0       	push   $0xf013c700
f012dc90:	68 4d 10 00 00       	push   $0x104d
f012dc95:	68 5a b4 13 f0       	push   $0xf013b45a
f012dc9a:	e8 66 25 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[3])
f012dc9f:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012dca5:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012dcab:	74 17                	je     f012dcc4 <test_krealloc+0x174c>
			panic(
f012dcad:	83 ec 04             	sub    $0x4,%esp
f012dcb0:	68 94 ca 13 f0       	push   $0xf013ca94
f012dcb5:	68 50 10 00 00       	push   $0x1050
f012dcba:	68 5a b4 13 f0       	push   $0xf013b45a
f012dcbf:	e8 41 25 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012dcc4:	e8 90 f3 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012dcc9:	89 c2                	mov    %eax,%edx
f012dccb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012dcce:	39 c2                	cmp    %eax,%edx
f012dcd0:	74 17                	je     f012dce9 <test_krealloc+0x1771>
			panic(
f012dcd2:	83 ec 04             	sub    $0x4,%esp
f012dcd5:	68 50 ca 13 f0       	push   $0xf013ca50
f012dcda:	68 53 10 00 00       	push   $0x1053
f012dcdf:	68 5a b4 13 f0       	push   $0xf013b45a
f012dce4:	e8 1c 25 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012dce9:	83 ec 0c             	sub    $0xc,%esp
f012dcec:	68 73 bc 13 f0       	push   $0xf013bc73
f012dcf1:	e8 18 30 fd ff       	call   f0100d0e <cprintf>
f012dcf6:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012dcf9:	e8 5b f3 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012dcfe:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012dd01:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012dd07:	83 ec 08             	sub    $0x8,%esp
f012dd0a:	68 00 18 10 00       	push   $0x101800
f012dd0f:	50                   	push   %eax
f012dd10:	e8 af 9f fd ff       	call   f0107cc4 <krealloc>
f012dd15:	83 c4 10             	add    $0x10,%esp
f012dd18:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dd1b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dd1e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dd23:	77 17                	ja     f012dd3c <test_krealloc+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dd25:	83 ec 04             	sub    $0x4,%esp
f012dd28:	68 00 c7 13 f0       	push   $0xf013c700
f012dd2d:	68 5c 10 00 00       	push   $0x105c
f012dd32:	68 5a b4 13 f0       	push   $0xf013b45a
f012dd37:	e8 c9 24 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012dd3c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012dd42:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012dd45:	74 17                	je     f012dd5e <test_krealloc+0x17e6>
			panic(
f012dd47:	83 ec 04             	sub    $0x4,%esp
f012dd4a:	68 f4 ca 13 f0       	push   $0xf013caf4
f012dd4f:	68 5f 10 00 00       	push   $0x105f
f012dd54:	68 5a b4 13 f0       	push   $0xf013b45a
f012dd59:	e8 a7 24 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012dd5e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dd61:	e8 f3 f2 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012dd66:	29 c3                	sub    %eax,%ebx
f012dd68:	89 d8                	mov    %ebx,%eax
f012dd6a:	83 f8 02             	cmp    $0x2,%eax
f012dd6d:	74 17                	je     f012dd86 <test_krealloc+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012dd6f:	83 ec 04             	sub    $0x4,%esp
f012dd72:	68 70 cb 13 f0       	push   $0xf013cb70
f012dd77:	68 61 10 00 00       	push   $0x1061
f012dd7c:	68 5a b4 13 f0       	push   $0xf013b45a
f012dd81:	e8 7f 24 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012dd86:	e8 ce f2 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012dd8b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012dd8e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012dd94:	83 ec 08             	sub    $0x8,%esp
f012dd97:	68 00 fc 3f 00       	push   $0x3ffc00
f012dd9c:	50                   	push   %eax
f012dd9d:	e8 22 9f fd ff       	call   f0107cc4 <krealloc>
f012dda2:	83 c4 10             	add    $0x10,%esp
f012dda5:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dda8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ddab:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ddb0:	77 17                	ja     f012ddc9 <test_krealloc+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ddb2:	83 ec 04             	sub    $0x4,%esp
f012ddb5:	68 00 c7 13 f0       	push   $0xf013c700
f012ddba:	68 67 10 00 00       	push   $0x1067
f012ddbf:	68 5a b4 13 f0       	push   $0xf013b45a
f012ddc4:	e8 3c 24 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012ddc9:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ddcf:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012ddd2:	74 17                	je     f012ddeb <test_krealloc+0x1873>
			panic(
f012ddd4:	83 ec 04             	sub    $0x4,%esp
f012ddd7:	68 f4 ca 13 f0       	push   $0xf013caf4
f012dddc:	68 6a 10 00 00       	push   $0x106a
f012dde1:	68 5a b4 13 f0       	push   $0xf013b45a
f012dde6:	e8 1a 24 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012ddeb:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ddee:	e8 66 f2 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012ddf3:	29 c3                	sub    %eax,%ebx
f012ddf5:	89 d8                	mov    %ebx,%eax
f012ddf7:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ddfc:	74 17                	je     f012de15 <test_krealloc+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012ddfe:	83 ec 04             	sub    $0x4,%esp
f012de01:	68 70 cb 13 f0       	push   $0xf013cb70
f012de06:	68 6d 10 00 00       	push   $0x106d
f012de0b:	68 5a b4 13 f0       	push   $0xf013b45a
f012de10:	e8 f0 23 fd ff       	call   f0100205 <_panic>


	}
	cprintf("\b\b\b60%");
f012de15:	83 ec 0c             	sub    $0xc,%esp
f012de18:	68 b8 bc 13 f0       	push   $0xf013bcb8
f012de1d:	e8 ec 2e fd ff       	call   f0100d0e <cprintf>
f012de22:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012de25:	e8 2f f2 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012de2a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012de2d:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012de33:	83 ec 08             	sub    $0x8,%esp
f012de36:	68 00 fc 9f 00       	push   $0x9ffc00
f012de3b:	50                   	push   %eax
f012de3c:	e8 83 9e fd ff       	call   f0107cc4 <krealloc>
f012de41:	83 c4 10             	add    $0x10,%esp
f012de44:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012de47:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012de4a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012de4f:	77 17                	ja     f012de68 <test_krealloc+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012de51:	83 ec 04             	sub    $0x4,%esp
f012de54:	68 00 c7 13 f0       	push   $0xf013c700
f012de59:	68 78 10 00 00       	push   $0x1078
f012de5e:	68 5a b4 13 f0       	push   $0xf013b45a
f012de63:	e8 9d 23 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012de68:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012de6f:	10 00 00 
f012de72:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012de78:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012de7d:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012de83:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012de89:	ba 00 00 00 00       	mov    $0x0,%edx
f012de8e:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012de94:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012de9a:	29 d0                	sub    %edx,%eax
f012de9c:	89 c1                	mov    %eax,%ecx
f012de9e:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012dea5:	10 00 00 
f012dea8:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012dead:	0f b6 d0             	movzbl %al,%edx
f012deb0:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012deb6:	01 d0                	add    %edx,%eax
f012deb8:	48                   	dec    %eax
f012deb9:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012debf:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012dec5:	ba 00 00 00 00       	mov    $0x0,%edx
f012deca:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012ded0:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012ded6:	29 d0                	sub    %edx,%eax
f012ded8:	01 c1                	add    %eax,%ecx
f012deda:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012dee1:	10 00 00 
f012dee4:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012dee9:	0f b6 c0             	movzbl %al,%eax
f012deec:	c1 e0 04             	shl    $0x4,%eax
f012deef:	89 c2                	mov    %eax,%edx
f012def1:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012def7:	01 d0                	add    %edx,%eax
f012def9:	48                   	dec    %eax
f012defa:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012df00:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012df06:	ba 00 00 00 00       	mov    $0x0,%edx
f012df0b:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012df11:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012df17:	29 d0                	sub    %edx,%eax
f012df19:	01 c8                	add    %ecx,%eax
f012df1b:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012df21:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012df24:	39 c2                	cmp    %eax,%edx
f012df26:	74 18                	je     f012df40 <test_krealloc+0x19c8>
			panic(
f012df28:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012df2b:	50                   	push   %eax
f012df2c:	68 a4 cb 13 f0       	push   $0xf013cba4
f012df31:	68 7c 10 00 00       	push   $0x107c
f012df36:	68 5a b4 13 f0       	push   $0xf013b45a
f012df3b:	e8 c5 22 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012df40:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012df46:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012df49:	75 17                	jne    f012df62 <test_krealloc+0x19ea>
			panic(
f012df4b:	83 ec 04             	sub    $0x4,%esp
f012df4e:	68 e8 cb 13 f0       	push   $0xf013cbe8
f012df53:	68 7f 10 00 00       	push   $0x107f
f012df58:	68 5a b4 13 f0       	push   $0xf013b45a
f012df5d:	e8 a3 22 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012df62:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012df65:	e8 ef f0 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012df6a:	29 c3                	sub    %eax,%ebx
f012df6c:	89 d8                	mov    %ebx,%eax
f012df6e:	3d 00 06 00 00       	cmp    $0x600,%eax
f012df73:	74 17                	je     f012df8c <test_krealloc+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012df75:	83 ec 04             	sub    $0x4,%esp
f012df78:	68 70 cb 13 f0       	push   $0xf013cb70
f012df7d:	68 82 10 00 00       	push   $0x1082
f012df82:	68 5a b4 13 f0       	push   $0xf013b45a
f012df87:	e8 79 22 fd ff       	call   f0100205 <_panic>

		ptr_allocations[4] = newAddress;
f012df8c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012df8f:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012df95:	e8 bf f0 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012df9a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012df9d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012dfa3:	83 ec 08             	sub    $0x8,%esp
f012dfa6:	68 00 fc 5f 00       	push   $0x5ffc00
f012dfab:	50                   	push   %eax
f012dfac:	e8 13 9d fd ff       	call   f0107cc4 <krealloc>
f012dfb1:	83 c4 10             	add    $0x10,%esp
f012dfb4:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dfb7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dfba:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dfbf:	77 17                	ja     f012dfd8 <test_krealloc+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dfc1:	83 ec 04             	sub    $0x4,%esp
f012dfc4:	68 00 c7 13 f0       	push   $0xf013c700
f012dfc9:	68 8b 10 00 00       	push   $0x108b
f012dfce:	68 5a b4 13 f0       	push   $0xf013b45a
f012dfd3:	e8 2d 22 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[6])
f012dfd8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012dfde:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012dfe1:	74 17                	je     f012dffa <test_krealloc+0x1a82>
			panic(
f012dfe3:	83 ec 04             	sub    $0x4,%esp
f012dfe6:	68 f4 ca 13 f0       	push   $0xf013caf4
f012dfeb:	68 8e 10 00 00       	push   $0x108e
f012dff0:	68 5a b4 13 f0       	push   $0xf013b45a
f012dff5:	e8 0b 22 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012dffa:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dffd:	e8 57 f0 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012e002:	29 c3                	sub    %eax,%ebx
f012e004:	89 d8                	mov    %ebx,%eax
f012e006:	3d 00 03 00 00       	cmp    $0x300,%eax
f012e00b:	74 17                	je     f012e024 <test_krealloc+0x1aac>
			panic("krealloc: pages in memory are not loaded correctly");
f012e00d:	83 ec 04             	sub    $0x4,%esp
f012e010:	68 70 cb 13 f0       	push   $0xf013cb70
f012e015:	68 91 10 00 00       	push   $0x1091
f012e01a:	68 5a b4 13 f0       	push   $0xf013b45a
f012e01f:	e8 e1 21 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012e024:	e8 30 f0 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012e029:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012e02c:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012e032:	83 ec 08             	sub    $0x8,%esp
f012e035:	68 00 fc 3f 01       	push   $0x13ffc00
f012e03a:	50                   	push   %eax
f012e03b:	e8 84 9c fd ff       	call   f0107cc4 <krealloc>
f012e040:	83 c4 10             	add    $0x10,%esp
f012e043:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e046:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e049:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e04e:	77 17                	ja     f012e067 <test_krealloc+0x1aef>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e050:	83 ec 04             	sub    $0x4,%esp
f012e053:	68 00 c7 13 f0       	push   $0xf013c700
f012e058:	68 98 10 00 00       	push   $0x1098
f012e05d:	68 5a b4 13 f0       	push   $0xf013b45a
f012e062:	e8 9e 21 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012e067:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012e06d:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012e070:	75 17                	jne    f012e089 <test_krealloc+0x1b11>
			panic(
f012e072:	83 ec 04             	sub    $0x4,%esp
f012e075:	68 e8 cb 13 f0       	push   $0xf013cbe8
f012e07a:	68 9b 10 00 00       	push   $0x109b
f012e07f:	68 5a b4 13 f0       	push   $0xf013b45a
f012e084:	e8 7c 21 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012e089:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012e090:	10 00 00 
f012e093:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012e099:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e09e:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012e0a4:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012e0aa:	ba 00 00 00 00       	mov    $0x0,%edx
f012e0af:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012e0b5:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012e0bb:	29 d0                	sub    %edx,%eax
f012e0bd:	89 c1                	mov    %eax,%ecx
f012e0bf:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012e0c6:	10 00 00 
f012e0c9:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012e0ce:	0f b6 d0             	movzbl %al,%edx
f012e0d1:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012e0d7:	01 d0                	add    %edx,%eax
f012e0d9:	48                   	dec    %eax
f012e0da:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012e0e0:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012e0e6:	ba 00 00 00 00       	mov    $0x0,%edx
f012e0eb:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012e0f1:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012e0f7:	29 d0                	sub    %edx,%eax
f012e0f9:	01 c1                	add    %eax,%ecx
f012e0fb:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012e102:	10 00 00 
f012e105:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012e10a:	0f b6 c0             	movzbl %al,%eax
f012e10d:	c1 e0 04             	shl    $0x4,%eax
f012e110:	89 c2                	mov    %eax,%edx
f012e112:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012e118:	01 d0                	add    %edx,%eax
f012e11a:	48                   	dec    %eax
f012e11b:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012e121:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012e127:	ba 00 00 00 00       	mov    $0x0,%edx
f012e12c:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012e132:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012e138:	29 d0                	sub    %edx,%eax
f012e13a:	01 c8                	add    %ecx,%eax
f012e13c:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012e142:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e145:	39 c2                	cmp    %eax,%edx
f012e147:	74 17                	je     f012e160 <test_krealloc+0x1be8>
			panic("krealloc: Wrong start address for reallocated space");
f012e149:	83 ec 04             	sub    $0x4,%esp
f012e14c:	68 6c cc 13 f0       	push   $0xf013cc6c
f012e151:	68 9d 10 00 00       	push   $0x109d
f012e156:	68 5a b4 13 f0       	push   $0xf013b45a
f012e15b:	e8 a5 20 fd ff       	call   f0100205 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012e160:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e163:	e8 f1 ee fd ff       	call   f010d059 <sys_calculate_free_frames>
f012e168:	29 c3                	sub    %eax,%ebx
f012e16a:	89 d8                	mov    %ebx,%eax
f012e16c:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012e171:	74 17                	je     f012e18a <test_krealloc+0x1c12>
			panic("krealloc: pages in memory are not loaded correctly");
f012e173:	83 ec 04             	sub    $0x4,%esp
f012e176:	68 70 cb 13 f0       	push   $0xf013cb70
f012e17b:	68 a0 10 00 00       	push   $0x10a0
f012e180:	68 5a b4 13 f0       	push   $0xf013b45a
f012e185:	e8 7b 20 fd ff       	call   f0100205 <_panic>

		ptr_allocations[6] = newAddress;
f012e18a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e18d:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012e193:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e199:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012e19f:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012e1a6:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012e1a9:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012e1b0:	eb 21                	jmp    f012e1d3 <test_krealloc+0x1c5b>
			sums[0] += ptr[i];
f012e1b2:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012e1b8:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012e1bb:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e1c1:	01 c8                	add    %ecx,%eax
f012e1c3:	8a 00                	mov    (%eax),%al
f012e1c5:	0f be c0             	movsbl %al,%eax
f012e1c8:	01 d0                	add    %edx,%eax
f012e1ca:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012e1d0:	ff 45 d8             	incl   -0x28(%ebp)
f012e1d3:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e1d9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012e1dc:	7d d4                	jge    f012e1b2 <test_krealloc+0x1c3a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012e1de:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012e1e4:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012e1ea:	42                   	inc    %edx
f012e1eb:	01 d2                	add    %edx,%edx
f012e1ed:	39 d0                	cmp    %edx,%eax
f012e1ef:	74 17                	je     f012e208 <test_krealloc+0x1c90>
			panic("krealloc: invalid read after re-allocations");
f012e1f1:	83 ec 04             	sub    $0x4,%esp
f012e1f4:	68 a0 cc 13 f0       	push   $0xf013cca0
f012e1f9:	68 ae 10 00 00       	push   $0x10ae
f012e1fe:	68 5a b4 13 f0       	push   $0xf013b45a
f012e203:	e8 fd 1f fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012e208:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012e20e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012e214:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012e21b:	00 00 00 
		sums[1] = 0;
f012e21e:	c7 85 bc fd ff ff 00 	movl   $0x0,-0x244(%ebp)
f012e225:	00 00 00 
		sums[2] = 0;
f012e228:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%ebp)
f012e22f:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012e232:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012e239:	eb 70                	jmp    f012e2ab <test_krealloc+0x1d33>
			sums[0] += structArr[i].a;
f012e23b:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012e241:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012e244:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e24b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e251:	01 c8                	add    %ecx,%eax
f012e253:	8a 00                	mov    (%eax),%al
f012e255:	0f be c0             	movsbl %al,%eax
f012e258:	01 d0                	add    %edx,%eax
f012e25a:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
			sums[1] += structArr[i].b;
f012e260:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012e266:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012e269:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e270:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e276:	01 c8                	add    %ecx,%eax
f012e278:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e27c:	98                   	cwtl   
f012e27d:	01 d0                	add    %edx,%eax
f012e27f:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
			sums[2] += structArr[i].c;
f012e285:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012e28b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012e28e:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e295:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e29b:	01 c8                	add    %ecx,%eax
f012e29d:	8b 40 04             	mov    0x4(%eax),%eax
f012e2a0:	01 d0                	add    %edx,%eax
f012e2a2:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012e2a8:	ff 45 d8             	incl   -0x28(%ebp)
f012e2ab:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012e2b1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012e2b4:	7d 85                	jge    f012e23b <test_krealloc+0x1cc3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012e2b6:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
f012e2bc:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012e2c2:	8d 50 01             	lea    0x1(%eax),%edx
f012e2c5:	89 d0                	mov    %edx,%eax
f012e2c7:	01 c0                	add    %eax,%eax
f012e2c9:	01 d0                	add    %edx,%eax
f012e2cb:	01 c0                	add    %eax,%eax
f012e2cd:	01 d0                	add    %edx,%eax
f012e2cf:	39 c1                	cmp    %eax,%ecx
f012e2d1:	75 3a                	jne    f012e30d <test_krealloc+0x1d95>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012e2d3:	8b 8d bc fd ff ff    	mov    -0x244(%ebp),%ecx
f012e2d9:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012e2df:	8d 50 01             	lea    0x1(%eax),%edx
f012e2e2:	89 d0                	mov    %edx,%eax
f012e2e4:	01 c0                	add    %eax,%eax
f012e2e6:	01 d0                	add    %edx,%eax
f012e2e8:	01 c0                	add    %eax,%eax
f012e2ea:	01 d0                	add    %edx,%eax
f012e2ec:	39 c1                	cmp    %eax,%ecx
f012e2ee:	75 1d                	jne    f012e30d <test_krealloc+0x1d95>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012e2f0:	8b 8d c0 fd ff ff    	mov    -0x240(%ebp),%ecx
f012e2f6:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012e2fc:	8d 50 01             	lea    0x1(%eax),%edx
f012e2ff:	89 d0                	mov    %edx,%eax
f012e301:	01 c0                	add    %eax,%eax
f012e303:	01 d0                	add    %edx,%eax
f012e305:	01 c0                	add    %eax,%eax
f012e307:	01 d0                	add    %edx,%eax
f012e309:	39 c1                	cmp    %eax,%ecx
f012e30b:	74 17                	je     f012e324 <test_krealloc+0x1dac>
			panic("krealloc: invalid read after re-allocations");
f012e30d:	83 ec 04             	sub    $0x4,%esp
f012e310:	68 a0 cc 13 f0       	push   $0xf013cca0
f012e315:	68 c0 10 00 00       	push   $0x10c0
f012e31a:	68 5a b4 13 f0       	push   $0xf013b45a
f012e31f:	e8 e1 1e fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012e324:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012e32a:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012e330:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012e337:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012e33a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012e341:	eb 24                	jmp    f012e367 <test_krealloc+0x1def>
			sums[0] += shortArr[i];
f012e343:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012e349:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012e34c:	01 c0                	add    %eax,%eax
f012e34e:	89 c1                	mov    %eax,%ecx
f012e350:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e356:	01 c8                	add    %ecx,%eax
f012e358:	66 8b 00             	mov    (%eax),%ax
f012e35b:	98                   	cwtl   
f012e35c:	01 d0                	add    %edx,%eax
f012e35e:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012e364:	ff 45 d8             	incl   -0x28(%ebp)
f012e367:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012e36d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012e370:	7d d1                	jge    f012e343 <test_krealloc+0x1dcb>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012e372:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012e378:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012e37e:	8d 48 01             	lea    0x1(%eax),%ecx
f012e381:	89 c8                	mov    %ecx,%eax
f012e383:	c1 e0 02             	shl    $0x2,%eax
f012e386:	01 c8                	add    %ecx,%eax
f012e388:	39 c2                	cmp    %eax,%edx
f012e38a:	74 17                	je     f012e3a3 <test_krealloc+0x1e2b>
			panic("krealloc: invalid read after re-allocations");
f012e38c:	83 ec 04             	sub    $0x4,%esp
f012e38f:	68 a0 cc 13 f0       	push   $0xf013cca0
f012e394:	68 ca 10 00 00       	push   $0x10ca
f012e399:	68 5a b4 13 f0       	push   $0xf013b45a
f012e39e:	e8 62 1e fd ff       	call   f0100205 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012e3a3:	e8 b1 ec fd ff       	call   f010d059 <sys_calculate_free_frames>
f012e3a8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e3ab:	e8 33 5a fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012e3b0:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012e3b6:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012e3bc:	83 ec 08             	sub    $0x8,%esp
f012e3bf:	6a 00                	push   $0x0
f012e3c1:	50                   	push   %eax
f012e3c2:	e8 fd 98 fd ff       	call   f0107cc4 <krealloc>
f012e3c7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e3ca:	e8 14 5a fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012e3cf:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e3d5:	74 17                	je     f012e3ee <test_krealloc+0x1e76>
			panic(
f012e3d7:	83 ec 04             	sub    $0x4,%esp
f012e3da:	68 74 b4 13 f0       	push   $0xf013b474
f012e3df:	68 d2 10 00 00       	push   $0x10d2
f012e3e4:	68 5a b4 13 f0       	push   $0xf013b45a
f012e3e9:	e8 17 1e fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012e3ee:	e8 66 ec fd ff       	call   f010d059 <sys_calculate_free_frames>
f012e3f3:	89 c2                	mov    %eax,%edx
f012e3f5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e3f8:	29 c2                	sub    %eax,%edx
f012e3fa:	89 d0                	mov    %edx,%eax
f012e3fc:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012e401:	74 17                	je     f012e41a <test_krealloc+0x1ea2>
			panic("krealloc: pages in memory are not freed correctly");
f012e403:	83 ec 04             	sub    $0x4,%esp
f012e406:	68 30 c9 13 f0       	push   $0xf013c930
f012e40b:	68 d4 10 00 00       	push   $0x10d4
f012e410:	68 5a b4 13 f0       	push   $0xf013b45a
f012e415:	e8 eb 1d fd ff       	call   f0100205 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012e41a:	e8 3a ec fd ff       	call   f010d059 <sys_calculate_free_frames>
f012e41f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e422:	e8 bc 59 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012e427:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012e42d:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012e433:	83 ec 0c             	sub    $0xc,%esp
f012e436:	50                   	push   %eax
f012e437:	e8 dd 96 fd ff       	call   f0107b19 <kfree>
f012e43c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e43f:	e8 9f 59 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012e444:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e44a:	74 17                	je     f012e463 <test_krealloc+0x1eeb>
			panic(
f012e44c:	83 ec 04             	sub    $0x4,%esp
f012e44f:	68 74 b4 13 f0       	push   $0xf013b474
f012e454:	68 dc 10 00 00       	push   $0x10dc
f012e459:	68 5a b4 13 f0       	push   $0xf013b45a
f012e45e:	e8 a2 1d fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012e463:	e8 f1 eb fd ff       	call   f010d059 <sys_calculate_free_frames>
f012e468:	89 c2                	mov    %eax,%edx
f012e46a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e46d:	29 c2                	sub    %eax,%edx
f012e46f:	89 d0                	mov    %edx,%eax
f012e471:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012e476:	74 17                	je     f012e48f <test_krealloc+0x1f17>
			panic("krealloc: pages in memory are not freed correctly");
f012e478:	83 ec 04             	sub    $0x4,%esp
f012e47b:	68 30 c9 13 f0       	push   $0xf013c930
f012e480:	68 de 10 00 00       	push   $0x10de
f012e485:	68 5a b4 13 f0       	push   $0xf013b45a
f012e48a:	e8 76 1d fd ff       	call   f0100205 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e48f:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012e496:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012e49d:	eb 48                	jmp    f012e4e7 <test_krealloc+0x1f6f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012e49f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012e4a2:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f012e4a7:	83 ec 04             	sub    $0x4,%esp
f012e4aa:	8d 8d b0 fd ff ff    	lea    -0x250(%ebp),%ecx
f012e4b0:	51                   	push   %ecx
f012e4b1:	52                   	push   %edx
f012e4b2:	50                   	push   %eax
f012e4b3:	e8 14 86 fd ff       	call   f0106acc <get_page_table>
f012e4b8:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012e4bb:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012e4c1:	85 c0                	test   %eax,%eax
f012e4c3:	75 17                	jne    f012e4dc <test_krealloc+0x1f64>
					panic(
f012e4c5:	83 ec 04             	sub    $0x4,%esp
f012e4c8:	68 5c bd 13 f0       	push   $0xf013bd5c
f012e4cd:	68 eb 10 00 00       	push   $0x10eb
f012e4d2:	68 5a b4 13 f0       	push   $0xf013b45a
f012e4d7:	e8 29 1d fd ff       	call   f0100205 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e4dc:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012e4e3:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012e4e7:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012e4eb:	78 b2                	js     f012e49f <test_krealloc+0x1f27>
f012e4ed:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012e4f1:	7f 09                	jg     f012e4fc <test_krealloc+0x1f84>
f012e4f3:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012e4fa:	76 a3                	jbe    f012e49f <test_krealloc+0x1f27>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012e4fc:	83 ec 0c             	sub    $0xc,%esp
f012e4ff:	68 3e b6 13 f0       	push   $0xf013b63e
f012e504:	e8 05 28 fd ff       	call   f0100d0e <cprintf>
f012e509:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012e50c:	83 ec 0c             	sub    $0xc,%esp
f012e50f:	68 cc cc 13 f0       	push   $0xf013cccc
f012e514:	e8 f5 27 fd ff       	call   f0100d0e <cprintf>
f012e519:	83 c4 10             	add    $0x10,%esp
	return 0;
f012e51c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012e521:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012e524:	5b                   	pop    %ebx
f012e525:	5f                   	pop    %edi
f012e526:	5d                   	pop    %ebp
f012e527:	c3                   	ret    

f012e528 <test_krealloc_BF>:


int test_krealloc_BF() {
f012e528:	55                   	push   %ebp
f012e529:	89 e5                	mov    %esp,%ebp
f012e52b:	57                   	push   %edi
f012e52c:	53                   	push   %ebx
f012e52d:	81 ec 60 02 00 00    	sub    $0x260,%esp
	cprintf("==============================================\n");
f012e533:	83 ec 0c             	sub    $0xc,%esp
f012e536:	68 9c b3 13 f0       	push   $0xf013b39c
f012e53b:	e8 ce 27 fd ff       	call   f0100d0e <cprintf>
f012e540:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012e543:	83 ec 0c             	sub    $0xc,%esp
f012e546:	68 cc b3 13 f0       	push   $0xf013b3cc
f012e54b:	e8 be 27 fd ff       	call   f0100d0e <cprintf>
f012e550:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012e553:	83 ec 0c             	sub    $0xc,%esp
f012e556:	68 9c b3 13 f0       	push   $0xf013b39c
f012e55b:	e8 ae 27 fd ff       	call   f0100d0e <cprintf>
f012e560:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012e563:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012e567:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012e56b:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012e571:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012e577:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012e57e:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012e585:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f012e58b:	b9 14 00 00 00       	mov    $0x14,%ecx
f012e590:	b8 00 00 00 00       	mov    $0x0,%eax
f012e595:	89 d7                	mov    %edx,%edi
f012e597:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012e599:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012e5a0:	8d 95 f0 fd ff ff    	lea    -0x210(%ebp),%edx
f012e5a6:	b9 14 00 00 00       	mov    $0x14,%ecx
f012e5ab:	b8 00 00 00 00       	mov    $0x0,%eax
f012e5b0:	89 d7                	mov    %edx,%edi
f012e5b2:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012e5b4:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f012e5ba:	b9 14 00 00 00       	mov    $0x14,%ecx
f012e5bf:	b8 00 00 00 00       	mov    $0x0,%eax
f012e5c4:	89 d7                	mov    %edx,%edi
f012e5c6:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e5c8:	e8 8c ea fd ff       	call   f010d059 <sys_calculate_free_frames>
f012e5cd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012e5d0:	83 ec 08             	sub    $0x8,%esp
f012e5d3:	68 00 fc 0f 00       	push   $0xffc00
f012e5d8:	6a 00                	push   $0x0
f012e5da:	e8 e5 96 fd ff       	call   f0107cc4 <krealloc>
f012e5df:	83 c4 10             	add    $0x10,%esp
f012e5e2:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012e5e8:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e5ee:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e5f3:	77 17                	ja     f012e60c <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e5f5:	83 ec 04             	sub    $0x4,%esp
f012e5f8:	68 00 c7 13 f0       	push   $0xf013c700
f012e5fd:	68 1a 11 00 00       	push   $0x111a
f012e602:	68 5a b4 13 f0       	push   $0xf013b45a
f012e607:	e8 f9 1b fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012e60c:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e612:	89 c1                	mov    %eax,%ecx
f012e614:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012e61b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012e61e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e623:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012e626:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012e629:	ba 00 00 00 00       	mov    $0x0,%edx
f012e62e:	f7 75 b4             	divl   -0x4c(%ebp)
f012e631:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012e634:	29 d0                	sub    %edx,%eax
f012e636:	89 c3                	mov    %eax,%ebx
f012e638:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012e63f:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012e644:	0f b6 d0             	movzbl %al,%edx
f012e647:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012e64a:	01 d0                	add    %edx,%eax
f012e64c:	48                   	dec    %eax
f012e64d:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012e650:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012e653:	ba 00 00 00 00       	mov    $0x0,%edx
f012e658:	f7 75 ac             	divl   -0x54(%ebp)
f012e65b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012e65e:	29 d0                	sub    %edx,%eax
f012e660:	01 c3                	add    %eax,%ebx
f012e662:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012e669:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012e66e:	0f b6 c0             	movzbl %al,%eax
f012e671:	c1 e0 04             	shl    $0x4,%eax
f012e674:	89 c2                	mov    %eax,%edx
f012e676:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012e679:	01 d0                	add    %edx,%eax
f012e67b:	48                   	dec    %eax
f012e67c:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012e67f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012e682:	ba 00 00 00 00       	mov    $0x0,%edx
f012e687:	f7 75 a4             	divl   -0x5c(%ebp)
f012e68a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012e68d:	29 d0                	sub    %edx,%eax
f012e68f:	01 d8                	add    %ebx,%eax
f012e691:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012e696:	39 c1                	cmp    %eax,%ecx
f012e698:	74 17                	je     f012e6b1 <test_krealloc_BF+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012e69a:	83 ec 04             	sub    $0x4,%esp
f012e69d:	68 3c c7 13 f0       	push   $0xf013c73c
f012e6a2:	68 1c 11 00 00       	push   $0x111c
f012e6a7:	68 5a b4 13 f0       	push   $0xf013b45a
f012e6ac:	e8 54 1b fd ff       	call   f0100205 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e6b1:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e6b4:	e8 a0 e9 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012e6b9:	29 c3                	sub    %eax,%ebx
f012e6bb:	89 d8                	mov    %ebx,%eax
f012e6bd:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e6c2:	74 17                	je     f012e6db <test_krealloc_BF+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012e6c4:	83 ec 04             	sub    $0x4,%esp
f012e6c7:	68 6e c7 13 f0       	push   $0xf013c76e
f012e6cc:	68 1f 11 00 00       	push   $0x111f
f012e6d1:	68 5a b4 13 f0       	push   $0xf013b45a
f012e6d6:	e8 2a 1b fd ff       	call   f0100205 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012e6db:	c7 85 f0 fd ff ff ff 	movl   $0xffbff,-0x210(%ebp)
f012e6e2:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e6e5:	e8 6f e9 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012e6ea:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012e6ed:	83 ec 08             	sub    $0x8,%esp
f012e6f0:	68 00 fc 0f 00       	push   $0xffc00
f012e6f5:	6a 00                	push   $0x0
f012e6f7:	e8 c8 95 fd ff       	call   f0107cc4 <krealloc>
f012e6fc:	83 c4 10             	add    $0x10,%esp
f012e6ff:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012e705:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e70b:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012e710:	77 17                	ja     f012e729 <test_krealloc_BF+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e712:	83 ec 04             	sub    $0x4,%esp
f012e715:	68 00 c7 13 f0       	push   $0xf013c700
f012e71a:	68 27 11 00 00       	push   $0x1127
f012e71f:	68 5a b4 13 f0       	push   $0xf013b45a
f012e724:	e8 dc 1a fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012e729:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e72f:	89 c1                	mov    %eax,%ecx
f012e731:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012e738:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012e73b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e740:	89 45 98             	mov    %eax,-0x68(%ebp)
f012e743:	8b 45 98             	mov    -0x68(%ebp),%eax
f012e746:	ba 00 00 00 00       	mov    $0x0,%edx
f012e74b:	f7 75 9c             	divl   -0x64(%ebp)
f012e74e:	8b 45 98             	mov    -0x68(%ebp),%eax
f012e751:	29 d0                	sub    %edx,%eax
f012e753:	89 c3                	mov    %eax,%ebx
f012e755:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012e75c:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012e761:	0f b6 d0             	movzbl %al,%edx
f012e764:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012e767:	01 d0                	add    %edx,%eax
f012e769:	48                   	dec    %eax
f012e76a:	89 45 90             	mov    %eax,-0x70(%ebp)
f012e76d:	8b 45 90             	mov    -0x70(%ebp),%eax
f012e770:	ba 00 00 00 00       	mov    $0x0,%edx
f012e775:	f7 75 94             	divl   -0x6c(%ebp)
f012e778:	8b 45 90             	mov    -0x70(%ebp),%eax
f012e77b:	29 d0                	sub    %edx,%eax
f012e77d:	01 c3                	add    %eax,%ebx
f012e77f:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012e786:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012e78b:	0f b6 c0             	movzbl %al,%eax
f012e78e:	c1 e0 04             	shl    $0x4,%eax
f012e791:	89 c2                	mov    %eax,%edx
f012e793:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012e796:	01 d0                	add    %edx,%eax
f012e798:	48                   	dec    %eax
f012e799:	89 45 88             	mov    %eax,-0x78(%ebp)
f012e79c:	8b 45 88             	mov    -0x78(%ebp),%eax
f012e79f:	ba 00 00 00 00       	mov    $0x0,%edx
f012e7a4:	f7 75 8c             	divl   -0x74(%ebp)
f012e7a7:	8b 45 88             	mov    -0x78(%ebp),%eax
f012e7aa:	29 d0                	sub    %edx,%eax
f012e7ac:	01 d8                	add    %ebx,%eax
f012e7ae:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012e7b3:	39 c1                	cmp    %eax,%ecx
f012e7b5:	74 17                	je     f012e7ce <test_krealloc_BF+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012e7b7:	83 ec 04             	sub    $0x4,%esp
f012e7ba:	68 3c c7 13 f0       	push   $0xf013c73c
f012e7bf:	68 29 11 00 00       	push   $0x1129
f012e7c4:	68 5a b4 13 f0       	push   $0xf013b45a
f012e7c9:	e8 37 1a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e7ce:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e7d1:	e8 83 e8 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012e7d6:	29 c3                	sub    %eax,%ebx
f012e7d8:	89 d8                	mov    %ebx,%eax
f012e7da:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e7df:	74 17                	je     f012e7f8 <test_krealloc_BF+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012e7e1:	83 ec 04             	sub    $0x4,%esp
f012e7e4:	68 6e c7 13 f0       	push   $0xf013c76e
f012e7e9:	68 2b 11 00 00       	push   $0x112b
f012e7ee:	68 5a b4 13 f0       	push   $0xf013b45a
f012e7f3:	e8 0d 1a fd ff       	call   f0100205 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012e7f8:	c7 85 f4 fd ff ff ff 	movl   $0xffbff,-0x20c(%ebp)
f012e7ff:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e802:	e8 52 e8 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012e807:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012e80a:	83 ec 08             	sub    $0x8,%esp
f012e80d:	68 00 fc 0f 00       	push   $0xffc00
f012e812:	6a 00                	push   $0x0
f012e814:	e8 ab 94 fd ff       	call   f0107cc4 <krealloc>
f012e819:	83 c4 10             	add    $0x10,%esp
f012e81c:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012e822:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e828:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012e82d:	77 17                	ja     f012e846 <test_krealloc_BF+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e82f:	83 ec 04             	sub    $0x4,%esp
f012e832:	68 00 c7 13 f0       	push   $0xf013c700
f012e837:	68 33 11 00 00       	push   $0x1133
f012e83c:	68 5a b4 13 f0       	push   $0xf013b45a
f012e841:	e8 bf 19 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012e846:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e84c:	89 c1                	mov    %eax,%ecx
f012e84e:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012e855:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012e858:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e85d:	89 45 80             	mov    %eax,-0x80(%ebp)
f012e860:	8b 45 80             	mov    -0x80(%ebp),%eax
f012e863:	ba 00 00 00 00       	mov    $0x0,%edx
f012e868:	f7 75 84             	divl   -0x7c(%ebp)
f012e86b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012e86e:	29 d0                	sub    %edx,%eax
f012e870:	89 c3                	mov    %eax,%ebx
f012e872:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012e879:	10 00 00 
f012e87c:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012e881:	0f b6 d0             	movzbl %al,%edx
f012e884:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012e88a:	01 d0                	add    %edx,%eax
f012e88c:	48                   	dec    %eax
f012e88d:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012e893:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012e899:	ba 00 00 00 00       	mov    $0x0,%edx
f012e89e:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012e8a4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012e8aa:	29 d0                	sub    %edx,%eax
f012e8ac:	01 c3                	add    %eax,%ebx
f012e8ae:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012e8b5:	10 00 00 
f012e8b8:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012e8bd:	0f b6 c0             	movzbl %al,%eax
f012e8c0:	c1 e0 04             	shl    $0x4,%eax
f012e8c3:	89 c2                	mov    %eax,%edx
f012e8c5:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012e8cb:	01 d0                	add    %edx,%eax
f012e8cd:	48                   	dec    %eax
f012e8ce:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012e8d4:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012e8da:	ba 00 00 00 00       	mov    $0x0,%edx
f012e8df:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012e8e5:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012e8eb:	29 d0                	sub    %edx,%eax
f012e8ed:	01 d8                	add    %ebx,%eax
f012e8ef:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012e8f4:	39 c1                	cmp    %eax,%ecx
f012e8f6:	74 17                	je     f012e90f <test_krealloc_BF+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012e8f8:	83 ec 04             	sub    $0x4,%esp
f012e8fb:	68 3c c7 13 f0       	push   $0xf013c73c
f012e900:	68 35 11 00 00       	push   $0x1135
f012e905:	68 5a b4 13 f0       	push   $0xf013b45a
f012e90a:	e8 f6 18 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e90f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e912:	e8 42 e7 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012e917:	29 c3                	sub    %eax,%ebx
f012e919:	89 d8                	mov    %ebx,%eax
f012e91b:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e920:	74 17                	je     f012e939 <test_krealloc_BF+0x411>
			panic("krealloc: Wrong allocation: ");
f012e922:	83 ec 04             	sub    $0x4,%esp
f012e925:	68 6e c7 13 f0       	push   $0xf013c76e
f012e92a:	68 37 11 00 00       	push   $0x1137
f012e92f:	68 5a b4 13 f0       	push   $0xf013b45a
f012e934:	e8 cc 18 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012e939:	c7 85 f8 fd ff ff ff 	movl   $0x3feff,-0x208(%ebp)
f012e940:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e943:	e8 11 e7 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012e948:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012e94b:	83 ec 08             	sub    $0x8,%esp
f012e94e:	68 00 fc 0f 00       	push   $0xffc00
f012e953:	6a 00                	push   $0x0
f012e955:	e8 6a 93 fd ff       	call   f0107cc4 <krealloc>
f012e95a:	83 c4 10             	add    $0x10,%esp
f012e95d:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012e963:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e969:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012e96e:	77 17                	ja     f012e987 <test_krealloc_BF+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e970:	83 ec 04             	sub    $0x4,%esp
f012e973:	68 00 c7 13 f0       	push   $0xf013c700
f012e978:	68 3e 11 00 00       	push   $0x113e
f012e97d:	68 5a b4 13 f0       	push   $0xf013b45a
f012e982:	e8 7e 18 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012e987:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e98d:	89 c1                	mov    %eax,%ecx
f012e98f:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012e996:	10 00 00 
f012e999:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012e99f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e9a4:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012e9aa:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012e9b0:	ba 00 00 00 00       	mov    $0x0,%edx
f012e9b5:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012e9bb:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012e9c1:	29 d0                	sub    %edx,%eax
f012e9c3:	89 c3                	mov    %eax,%ebx
f012e9c5:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012e9cc:	10 00 00 
f012e9cf:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012e9d4:	0f b6 d0             	movzbl %al,%edx
f012e9d7:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012e9dd:	01 d0                	add    %edx,%eax
f012e9df:	48                   	dec    %eax
f012e9e0:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012e9e6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012e9ec:	ba 00 00 00 00       	mov    $0x0,%edx
f012e9f1:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012e9f7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012e9fd:	29 d0                	sub    %edx,%eax
f012e9ff:	01 c3                	add    %eax,%ebx
f012ea01:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012ea08:	10 00 00 
f012ea0b:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012ea10:	0f b6 c0             	movzbl %al,%eax
f012ea13:	c1 e0 04             	shl    $0x4,%eax
f012ea16:	89 c2                	mov    %eax,%edx
f012ea18:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012ea1e:	01 d0                	add    %edx,%eax
f012ea20:	48                   	dec    %eax
f012ea21:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012ea27:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012ea2d:	ba 00 00 00 00       	mov    $0x0,%edx
f012ea32:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012ea38:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012ea3e:	29 d0                	sub    %edx,%eax
f012ea40:	01 d8                	add    %ebx,%eax
f012ea42:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012ea47:	39 c1                	cmp    %eax,%ecx
f012ea49:	74 17                	je     f012ea62 <test_krealloc_BF+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012ea4b:	83 ec 04             	sub    $0x4,%esp
f012ea4e:	68 3c c7 13 f0       	push   $0xf013c73c
f012ea53:	68 40 11 00 00       	push   $0x1140
f012ea58:	68 5a b4 13 f0       	push   $0xf013b45a
f012ea5d:	e8 a3 17 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012ea62:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ea65:	e8 ef e5 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012ea6a:	29 c3                	sub    %eax,%ebx
f012ea6c:	89 d8                	mov    %ebx,%eax
f012ea6e:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ea73:	74 17                	je     f012ea8c <test_krealloc_BF+0x564>
			panic("krealloc: Wrong allocation: ");
f012ea75:	83 ec 04             	sub    $0x4,%esp
f012ea78:	68 6e c7 13 f0       	push   $0xf013c76e
f012ea7d:	68 42 11 00 00       	push   $0x1142
f012ea82:	68 5a b4 13 f0       	push   $0xf013b45a
f012ea87:	e8 79 17 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012ea8c:	c7 85 fc fd ff ff ff 	movl   $0x3feff,-0x204(%ebp)
f012ea93:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012ea96:	e8 be e5 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012ea9b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012ea9e:	83 ec 08             	sub    $0x8,%esp
f012eaa1:	68 00 fc 1f 00       	push   $0x1ffc00
f012eaa6:	6a 00                	push   $0x0
f012eaa8:	e8 17 92 fd ff       	call   f0107cc4 <krealloc>
f012eaad:	83 c4 10             	add    $0x10,%esp
f012eab0:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012eab6:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012eabc:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012eac1:	77 17                	ja     f012eada <test_krealloc_BF+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012eac3:	83 ec 04             	sub    $0x4,%esp
f012eac6:	68 00 c7 13 f0       	push   $0xf013c700
f012eacb:	68 49 11 00 00       	push   $0x1149
f012ead0:	68 5a b4 13 f0       	push   $0xf013b45a
f012ead5:	e8 2b 17 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012eada:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012eae0:	89 c1                	mov    %eax,%ecx
f012eae2:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012eae9:	10 00 00 
f012eaec:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012eaf2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012eaf7:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012eafd:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012eb03:	ba 00 00 00 00       	mov    $0x0,%edx
f012eb08:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012eb0e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012eb14:	29 d0                	sub    %edx,%eax
f012eb16:	89 c3                	mov    %eax,%ebx
f012eb18:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012eb1f:	10 00 00 
f012eb22:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012eb27:	0f b6 d0             	movzbl %al,%edx
f012eb2a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012eb30:	01 d0                	add    %edx,%eax
f012eb32:	48                   	dec    %eax
f012eb33:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012eb39:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012eb3f:	ba 00 00 00 00       	mov    $0x0,%edx
f012eb44:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012eb4a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012eb50:	29 d0                	sub    %edx,%eax
f012eb52:	01 c3                	add    %eax,%ebx
f012eb54:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012eb5b:	10 00 00 
f012eb5e:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012eb63:	0f b6 c0             	movzbl %al,%eax
f012eb66:	c1 e0 04             	shl    $0x4,%eax
f012eb69:	89 c2                	mov    %eax,%edx
f012eb6b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012eb71:	01 d0                	add    %edx,%eax
f012eb73:	48                   	dec    %eax
f012eb74:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012eb7a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012eb80:	ba 00 00 00 00       	mov    $0x0,%edx
f012eb85:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012eb8b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012eb91:	29 d0                	sub    %edx,%eax
f012eb93:	01 d8                	add    %ebx,%eax
f012eb95:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012eb9a:	39 c1                	cmp    %eax,%ecx
f012eb9c:	74 17                	je     f012ebb5 <test_krealloc_BF+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012eb9e:	83 ec 04             	sub    $0x4,%esp
f012eba1:	68 3c c7 13 f0       	push   $0xf013c73c
f012eba6:	68 4b 11 00 00       	push   $0x114b
f012ebab:	68 5a b4 13 f0       	push   $0xf013b45a
f012ebb0:	e8 50 16 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012ebb5:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ebb8:	e8 9c e4 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012ebbd:	29 c3                	sub    %eax,%ebx
f012ebbf:	89 d8                	mov    %ebx,%eax
f012ebc1:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ebc6:	74 17                	je     f012ebdf <test_krealloc_BF+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012ebc8:	83 ec 04             	sub    $0x4,%esp
f012ebcb:	68 6e c7 13 f0       	push   $0xf013c76e
f012ebd0:	68 4d 11 00 00       	push   $0x114d
f012ebd5:	68 5a b4 13 f0       	push   $0xf013b45a
f012ebda:	e8 26 16 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012ebdf:	c7 85 00 fe ff ff ff 	movl   $0xffdff,-0x200(%ebp)
f012ebe6:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012ebe9:	e8 6b e4 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012ebee:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012ebf1:	83 ec 08             	sub    $0x8,%esp
f012ebf4:	68 00 fc 1f 00       	push   $0x1ffc00
f012ebf9:	6a 00                	push   $0x0
f012ebfb:	e8 c4 90 fd ff       	call   f0107cc4 <krealloc>
f012ec00:	83 c4 10             	add    $0x10,%esp
f012ec03:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012ec09:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012ec0f:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012ec14:	77 17                	ja     f012ec2d <test_krealloc_BF+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ec16:	83 ec 04             	sub    $0x4,%esp
f012ec19:	68 00 c7 13 f0       	push   $0xf013c700
f012ec1e:	68 54 11 00 00       	push   $0x1154
f012ec23:	68 5a b4 13 f0       	push   $0xf013b45a
f012ec28:	e8 d8 15 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012ec2d:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012ec33:	89 c1                	mov    %eax,%ecx
f012ec35:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012ec3c:	10 00 00 
f012ec3f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012ec45:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ec4a:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012ec50:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012ec56:	ba 00 00 00 00       	mov    $0x0,%edx
f012ec5b:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012ec61:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012ec67:	29 d0                	sub    %edx,%eax
f012ec69:	89 c3                	mov    %eax,%ebx
f012ec6b:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012ec72:	10 00 00 
f012ec75:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012ec7a:	0f b6 d0             	movzbl %al,%edx
f012ec7d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012ec83:	01 d0                	add    %edx,%eax
f012ec85:	48                   	dec    %eax
f012ec86:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012ec8c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012ec92:	ba 00 00 00 00       	mov    $0x0,%edx
f012ec97:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012ec9d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012eca3:	29 d0                	sub    %edx,%eax
f012eca5:	01 c3                	add    %eax,%ebx
f012eca7:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012ecae:	10 00 00 
f012ecb1:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012ecb6:	0f b6 c0             	movzbl %al,%eax
f012ecb9:	c1 e0 04             	shl    $0x4,%eax
f012ecbc:	89 c2                	mov    %eax,%edx
f012ecbe:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012ecc4:	01 d0                	add    %edx,%eax
f012ecc6:	48                   	dec    %eax
f012ecc7:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012eccd:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ecd3:	ba 00 00 00 00       	mov    $0x0,%edx
f012ecd8:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012ecde:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ece4:	29 d0                	sub    %edx,%eax
f012ece6:	01 d8                	add    %ebx,%eax
f012ece8:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012eced:	39 c1                	cmp    %eax,%ecx
f012ecef:	74 17                	je     f012ed08 <test_krealloc_BF+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012ecf1:	83 ec 04             	sub    $0x4,%esp
f012ecf4:	68 3c c7 13 f0       	push   $0xf013c73c
f012ecf9:	68 56 11 00 00       	push   $0x1156
f012ecfe:	68 5a b4 13 f0       	push   $0xf013b45a
f012ed03:	e8 fd 14 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012ed08:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ed0b:	e8 49 e3 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012ed10:	29 c3                	sub    %eax,%ebx
f012ed12:	89 d8                	mov    %ebx,%eax
f012ed14:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ed19:	74 17                	je     f012ed32 <test_krealloc_BF+0x80a>
			panic("krealloc: Wrong allocation: ");
f012ed1b:	83 ec 04             	sub    $0x4,%esp
f012ed1e:	68 6e c7 13 f0       	push   $0xf013c76e
f012ed23:	68 58 11 00 00       	push   $0x1158
f012ed28:	68 5a b4 13 f0       	push   $0xf013b45a
f012ed2d:	e8 d3 14 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012ed32:	c7 85 04 fe ff ff ff 	movl   $0xffdff,-0x1fc(%ebp)
f012ed39:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012ed3c:	e8 18 e3 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012ed41:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012ed44:	83 ec 08             	sub    $0x8,%esp
f012ed47:	68 00 fc 2f 00       	push   $0x2ffc00
f012ed4c:	6a 00                	push   $0x0
f012ed4e:	e8 71 8f fd ff       	call   f0107cc4 <krealloc>
f012ed53:	83 c4 10             	add    $0x10,%esp
f012ed56:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012ed5c:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ed62:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012ed67:	77 17                	ja     f012ed80 <test_krealloc_BF+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ed69:	83 ec 04             	sub    $0x4,%esp
f012ed6c:	68 00 c7 13 f0       	push   $0xf013c700
f012ed71:	68 5f 11 00 00       	push   $0x115f
f012ed76:	68 5a b4 13 f0       	push   $0xf013b45a
f012ed7b:	e8 85 14 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012ed80:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ed86:	89 c1                	mov    %eax,%ecx
f012ed88:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012ed8f:	10 00 00 
f012ed92:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ed98:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ed9d:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012eda3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012eda9:	ba 00 00 00 00       	mov    $0x0,%edx
f012edae:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012edb4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012edba:	29 d0                	sub    %edx,%eax
f012edbc:	89 c3                	mov    %eax,%ebx
f012edbe:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012edc5:	10 00 00 
f012edc8:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012edcd:	0f b6 d0             	movzbl %al,%edx
f012edd0:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012edd6:	01 d0                	add    %edx,%eax
f012edd8:	48                   	dec    %eax
f012edd9:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012eddf:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012ede5:	ba 00 00 00 00       	mov    $0x0,%edx
f012edea:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012edf0:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012edf6:	29 d0                	sub    %edx,%eax
f012edf8:	01 c3                	add    %eax,%ebx
f012edfa:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012ee01:	10 00 00 
f012ee04:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012ee09:	0f b6 c0             	movzbl %al,%eax
f012ee0c:	c1 e0 04             	shl    $0x4,%eax
f012ee0f:	89 c2                	mov    %eax,%edx
f012ee11:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012ee17:	01 d0                	add    %edx,%eax
f012ee19:	48                   	dec    %eax
f012ee1a:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012ee20:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012ee26:	ba 00 00 00 00       	mov    $0x0,%edx
f012ee2b:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012ee31:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012ee37:	29 d0                	sub    %edx,%eax
f012ee39:	01 d8                	add    %ebx,%eax
f012ee3b:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012ee40:	39 c1                	cmp    %eax,%ecx
f012ee42:	74 17                	je     f012ee5b <test_krealloc_BF+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012ee44:	83 ec 04             	sub    $0x4,%esp
f012ee47:	68 3c c7 13 f0       	push   $0xf013c73c
f012ee4c:	68 61 11 00 00       	push   $0x1161
f012ee51:	68 5a b4 13 f0       	push   $0xf013b45a
f012ee56:	e8 aa 13 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012ee5b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ee5e:	e8 f6 e1 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012ee63:	29 c3                	sub    %eax,%ebx
f012ee65:	89 d8                	mov    %ebx,%eax
f012ee67:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ee6c:	74 17                	je     f012ee85 <test_krealloc_BF+0x95d>
			panic("Wrong allocation: ");
f012ee6e:	83 ec 04             	sub    $0x4,%esp
f012ee71:	68 a4 b8 13 f0       	push   $0xf013b8a4
f012ee76:	68 63 11 00 00       	push   $0x1163
f012ee7b:	68 5a b4 13 f0       	push   $0xf013b45a
f012ee80:	e8 80 13 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012ee85:	c7 85 08 fe ff ff 7f 	movl   $0x5ff7f,-0x1f8(%ebp)
f012ee8c:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012ee8f:	e8 c5 e1 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012ee94:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012ee97:	83 ec 08             	sub    $0x8,%esp
f012ee9a:	68 00 fc 2f 00       	push   $0x2ffc00
f012ee9f:	6a 00                	push   $0x0
f012eea1:	e8 1e 8e fd ff       	call   f0107cc4 <krealloc>
f012eea6:	83 c4 10             	add    $0x10,%esp
f012eea9:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012eeaf:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012eeb5:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012eeba:	77 17                	ja     f012eed3 <test_krealloc_BF+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012eebc:	83 ec 04             	sub    $0x4,%esp
f012eebf:	68 00 c7 13 f0       	push   $0xf013c700
f012eec4:	68 6a 11 00 00       	push   $0x116a
f012eec9:	68 5a b4 13 f0       	push   $0xf013b45a
f012eece:	e8 32 13 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012eed3:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012eed9:	89 c1                	mov    %eax,%ecx
f012eedb:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012eee2:	10 00 00 
f012eee5:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012eeeb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012eef0:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012eef6:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012eefc:	ba 00 00 00 00       	mov    $0x0,%edx
f012ef01:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012ef07:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ef0d:	29 d0                	sub    %edx,%eax
f012ef0f:	89 c3                	mov    %eax,%ebx
f012ef11:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012ef18:	10 00 00 
f012ef1b:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012ef20:	0f b6 d0             	movzbl %al,%edx
f012ef23:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012ef29:	01 d0                	add    %edx,%eax
f012ef2b:	48                   	dec    %eax
f012ef2c:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012ef32:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012ef38:	ba 00 00 00 00       	mov    $0x0,%edx
f012ef3d:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012ef43:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012ef49:	29 d0                	sub    %edx,%eax
f012ef4b:	01 c3                	add    %eax,%ebx
f012ef4d:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012ef54:	10 00 00 
f012ef57:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012ef5c:	0f b6 c0             	movzbl %al,%eax
f012ef5f:	c1 e0 04             	shl    $0x4,%eax
f012ef62:	89 c2                	mov    %eax,%edx
f012ef64:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012ef6a:	01 d0                	add    %edx,%eax
f012ef6c:	48                   	dec    %eax
f012ef6d:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012ef73:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012ef79:	ba 00 00 00 00       	mov    $0x0,%edx
f012ef7e:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012ef84:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012ef8a:	29 d0                	sub    %edx,%eax
f012ef8c:	01 d8                	add    %ebx,%eax
f012ef8e:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012ef93:	39 c1                	cmp    %eax,%ecx
f012ef95:	74 17                	je     f012efae <test_krealloc_BF+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012ef97:	83 ec 04             	sub    $0x4,%esp
f012ef9a:	68 3c c7 13 f0       	push   $0xf013c73c
f012ef9f:	68 6c 11 00 00       	push   $0x116c
f012efa4:	68 5a b4 13 f0       	push   $0xf013b45a
f012efa9:	e8 57 12 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012efae:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012efb1:	e8 a3 e0 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012efb6:	29 c3                	sub    %eax,%ebx
f012efb8:	89 d8                	mov    %ebx,%eax
f012efba:	3d 00 03 00 00       	cmp    $0x300,%eax
f012efbf:	74 17                	je     f012efd8 <test_krealloc_BF+0xab0>
			panic("krealloc: Wrong allocation: ");
f012efc1:	83 ec 04             	sub    $0x4,%esp
f012efc4:	68 6e c7 13 f0       	push   $0xf013c76e
f012efc9:	68 6e 11 00 00       	push   $0x116e
f012efce:	68 5a b4 13 f0       	push   $0xf013b45a
f012efd3:	e8 2d 12 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012efd8:	c7 85 0c fe ff ff 7f 	movl   $0x5ff7f,-0x1f4(%ebp)
f012efdf:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012efe2:	e8 72 e0 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012efe7:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012efea:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012eff1:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012eff4:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012effa:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012f000:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012f006:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012f009:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012f00b:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012f011:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012f017:	01 c2                	add    %eax,%edx
f012f019:	8a 45 ce             	mov    -0x32(%ebp),%al
f012f01c:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012f01e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f024:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012f02a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012f031:	eb 11                	jmp    f012f044 <test_krealloc_BF+0xb1c>
			ptr[i] = 2;
f012f033:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f036:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f03c:	01 d0                	add    %edx,%eax
f012f03e:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012f041:	ff 45 f4             	incl   -0xc(%ebp)
f012f044:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012f04a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f04d:	7d e4                	jge    f012f033 <test_krealloc_BF+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012f04f:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012f055:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012f05b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f061:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012f067:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012f06d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f074:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f07a:	01 d0                	add    %edx,%eax
f012f07c:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012f082:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f088:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012f08e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012f095:	eb 1b                	jmp    f012f0b2 <test_krealloc_BF+0xb8a>
			intArr[i] = 4;
f012f097:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f09a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f0a1:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f0a7:	01 d0                	add    %edx,%eax
f012f0a9:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012f0af:	ff 45 f0             	incl   -0x10(%ebp)
f012f0b2:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012f0b8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f0bb:	7d da                	jge    f012f097 <test_krealloc_BF+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012f0bd:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f0c3:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012f0c9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012f0d0:	eb 17                	jmp    f012f0e9 <test_krealloc_BF+0xbc1>
			shortArr[i] = 5;
f012f0d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012f0d5:	01 c0                	add    %eax,%eax
f012f0d7:	89 c2                	mov    %eax,%edx
f012f0d9:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f0df:	01 d0                	add    %edx,%eax
f012f0e1:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012f0e6:	ff 45 ec             	incl   -0x14(%ebp)
f012f0e9:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f0ef:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012f0f2:	7d de                	jge    f012f0d2 <test_krealloc_BF+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012f0f4:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012f0fa:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012f100:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f106:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012f10b:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012f111:	01 c0                	add    %eax,%eax
f012f113:	89 c2                	mov    %eax,%edx
f012f115:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f11b:	01 d0                	add    %edx,%eax
f012f11d:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012f122:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f128:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012f12e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012f135:	eb 49                	jmp    f012f180 <test_krealloc_BF+0xc58>
			structArr[i].a = 7;
f012f137:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f13a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f141:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f147:	01 d0                	add    %edx,%eax
f012f149:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012f14c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f14f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f156:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f15c:	01 d0                	add    %edx,%eax
f012f15e:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012f164:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f167:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f16e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f174:	01 d0                	add    %edx,%eax
f012f176:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012f17d:	ff 45 e8             	incl   -0x18(%ebp)
f012f180:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f186:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012f189:	7d ac                	jge    f012f137 <test_krealloc_BF+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012f18b:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012f191:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012f197:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f19d:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012f1a0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f1a6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012f1ac:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f1b2:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012f1b9:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f1bf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f1c6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f1cc:	01 d0                	add    %edx,%eax
f012f1ce:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012f1d1:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f1d7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f1de:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f1e4:	01 d0                	add    %edx,%eax
f012f1e6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012f1ec:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f1f2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f1f9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f1ff:	01 d0                	add    %edx,%eax
f012f201:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012f208:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012f20e:	8a 00                	mov    (%eax),%al
f012f210:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012f213:	75 17                	jne    f012f22c <test_krealloc_BF+0xd04>
f012f215:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012f21b:	89 c2                	mov    %eax,%edx
f012f21d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012f223:	01 d0                	add    %edx,%eax
f012f225:	8a 00                	mov    (%eax),%al
f012f227:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012f22a:	74 17                	je     f012f243 <test_krealloc_BF+0xd1b>
			panic(
f012f22c:	83 ec 04             	sub    $0x4,%esp
f012f22f:	68 8c c7 13 f0       	push   $0xf013c78c
f012f234:	68 b1 11 00 00       	push   $0x11b1
f012f239:	68 5a b4 13 f0       	push   $0xf013b45a
f012f23e:	e8 c2 0f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012f243:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f249:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012f24f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f255:	8a 00                	mov    (%eax),%al
f012f257:	3c 02                	cmp    $0x2,%al
f012f259:	75 16                	jne    f012f271 <test_krealloc_BF+0xd49>
f012f25b:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012f261:	89 c2                	mov    %eax,%edx
f012f263:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f269:	01 d0                	add    %edx,%eax
f012f26b:	8a 00                	mov    (%eax),%al
f012f26d:	3c 02                	cmp    $0x2,%al
f012f26f:	74 20                	je     f012f291 <test_krealloc_BF+0xd69>
			panic(
f012f271:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f277:	8a 00                	mov    (%eax),%al
f012f279:	0f be c0             	movsbl %al,%eax
f012f27c:	50                   	push   %eax
f012f27d:	68 cc c7 13 f0       	push   $0xf013c7cc
f012f282:	68 b7 11 00 00       	push   $0x11b7
f012f287:	68 5a b4 13 f0       	push   $0xf013b45a
f012f28c:	e8 74 0f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012f291:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012f297:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012f29d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f2a3:	8b 00                	mov    (%eax),%eax
f012f2a5:	83 f8 03             	cmp    $0x3,%eax
f012f2a8:	75 1c                	jne    f012f2c6 <test_krealloc_BF+0xd9e>
f012f2aa:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012f2b0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f2b7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f2bd:	01 d0                	add    %edx,%eax
f012f2bf:	8b 00                	mov    (%eax),%eax
f012f2c1:	83 f8 03             	cmp    $0x3,%eax
f012f2c4:	74 17                	je     f012f2dd <test_krealloc_BF+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012f2c6:	83 ec 04             	sub    $0x4,%esp
f012f2c9:	68 18 c8 13 f0       	push   $0xf013c818
f012f2ce:	68 bb 11 00 00       	push   $0x11bb
f012f2d3:	68 5a b4 13 f0       	push   $0xf013b45a
f012f2d8:	e8 28 0f fd ff       	call   f0100205 <_panic>

		intArr = (int*) ptr_allocations[3];
f012f2dd:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f2e3:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012f2e9:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f2ef:	8b 00                	mov    (%eax),%eax
f012f2f1:	83 f8 04             	cmp    $0x4,%eax
f012f2f4:	75 1c                	jne    f012f312 <test_krealloc_BF+0xdea>
f012f2f6:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012f2fc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f303:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f309:	01 d0                	add    %edx,%eax
f012f30b:	8b 00                	mov    (%eax),%eax
f012f30d:	83 f8 04             	cmp    $0x4,%eax
f012f310:	74 17                	je     f012f329 <test_krealloc_BF+0xe01>
			panic(
f012f312:	83 ec 04             	sub    $0x4,%esp
f012f315:	68 8c c7 13 f0       	push   $0xf013c78c
f012f31a:	68 c0 11 00 00       	push   $0x11c0
f012f31f:	68 5a b4 13 f0       	push   $0xf013b45a
f012f324:	e8 dc 0e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012f329:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f32f:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012f335:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f33b:	66 8b 00             	mov    (%eax),%ax
f012f33e:	66 83 f8 05          	cmp    $0x5,%ax
f012f342:	75 1b                	jne    f012f35f <test_krealloc_BF+0xe37>
f012f344:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f34a:	01 c0                	add    %eax,%eax
f012f34c:	89 c2                	mov    %eax,%edx
f012f34e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f354:	01 d0                	add    %edx,%eax
f012f356:	66 8b 00             	mov    (%eax),%ax
f012f359:	66 83 f8 05          	cmp    $0x5,%ax
f012f35d:	74 17                	je     f012f376 <test_krealloc_BF+0xe4e>
			panic(
f012f35f:	83 ec 04             	sub    $0x4,%esp
f012f362:	68 8c c7 13 f0       	push   $0xf013c78c
f012f367:	68 c5 11 00 00       	push   $0x11c5
f012f36c:	68 5a b4 13 f0       	push   $0xf013b45a
f012f371:	e8 8f 0e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012f376:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012f37c:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012f382:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f388:	66 8b 00             	mov    (%eax),%ax
f012f38b:	66 83 f8 06          	cmp    $0x6,%ax
f012f38f:	75 1b                	jne    f012f3ac <test_krealloc_BF+0xe84>
f012f391:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012f397:	01 c0                	add    %eax,%eax
f012f399:	89 c2                	mov    %eax,%edx
f012f39b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f3a1:	01 d0                	add    %edx,%eax
f012f3a3:	66 8b 00             	mov    (%eax),%ax
f012f3a6:	66 83 f8 06          	cmp    $0x6,%ax
f012f3aa:	74 17                	je     f012f3c3 <test_krealloc_BF+0xe9b>
			panic(
f012f3ac:	83 ec 04             	sub    $0x4,%esp
f012f3af:	68 8c c7 13 f0       	push   $0xf013c78c
f012f3b4:	68 ca 11 00 00       	push   $0x11ca
f012f3b9:	68 5a b4 13 f0       	push   $0xf013b45a
f012f3be:	e8 42 0e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012f3c3:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f3c9:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012f3cf:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f3d5:	8a 00                	mov    (%eax),%al
f012f3d7:	3c 07                	cmp    $0x7,%al
f012f3d9:	75 1b                	jne    f012f3f6 <test_krealloc_BF+0xece>
f012f3db:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f3e1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f3e8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f3ee:	01 d0                	add    %edx,%eax
f012f3f0:	8a 00                	mov    (%eax),%al
f012f3f2:	3c 07                	cmp    $0x7,%al
f012f3f4:	74 17                	je     f012f40d <test_krealloc_BF+0xee5>
			panic(
f012f3f6:	83 ec 04             	sub    $0x4,%esp
f012f3f9:	68 8c c7 13 f0       	push   $0xf013c78c
f012f3fe:	68 cf 11 00 00       	push   $0x11cf
f012f403:	68 5a b4 13 f0       	push   $0xf013b45a
f012f408:	e8 f8 0d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012f40d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f413:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f417:	66 83 f8 07          	cmp    $0x7,%ax
f012f41b:	75 1f                	jne    f012f43c <test_krealloc_BF+0xf14>
f012f41d:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f423:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f42a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f430:	01 d0                	add    %edx,%eax
f012f432:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f436:	66 83 f8 07          	cmp    $0x7,%ax
f012f43a:	74 17                	je     f012f453 <test_krealloc_BF+0xf2b>
			panic(
f012f43c:	83 ec 04             	sub    $0x4,%esp
f012f43f:	68 8c c7 13 f0       	push   $0xf013c78c
f012f444:	68 d2 11 00 00       	push   $0x11d2
f012f449:	68 5a b4 13 f0       	push   $0xf013b45a
f012f44e:	e8 b2 0d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012f453:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f459:	8b 40 04             	mov    0x4(%eax),%eax
f012f45c:	83 f8 07             	cmp    $0x7,%eax
f012f45f:	75 1d                	jne    f012f47e <test_krealloc_BF+0xf56>
f012f461:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f467:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f46e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f474:	01 d0                	add    %edx,%eax
f012f476:	8b 40 04             	mov    0x4(%eax),%eax
f012f479:	83 f8 07             	cmp    $0x7,%eax
f012f47c:	74 17                	je     f012f495 <test_krealloc_BF+0xf6d>
			panic(
f012f47e:	83 ec 04             	sub    $0x4,%esp
f012f481:	68 8c c7 13 f0       	push   $0xf013c78c
f012f486:	68 d5 11 00 00       	push   $0x11d5
f012f48b:	68 5a b4 13 f0       	push   $0xf013b45a
f012f490:	e8 70 0d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012f495:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012f49b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012f4a1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f4a7:	8a 00                	mov    (%eax),%al
f012f4a9:	3c 08                	cmp    $0x8,%al
f012f4ab:	75 1b                	jne    f012f4c8 <test_krealloc_BF+0xfa0>
f012f4ad:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f4b3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f4ba:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f4c0:	01 d0                	add    %edx,%eax
f012f4c2:	8a 00                	mov    (%eax),%al
f012f4c4:	3c 08                	cmp    $0x8,%al
f012f4c6:	74 17                	je     f012f4df <test_krealloc_BF+0xfb7>
			panic(
f012f4c8:	83 ec 04             	sub    $0x4,%esp
f012f4cb:	68 8c c7 13 f0       	push   $0xf013c78c
f012f4d0:	68 da 11 00 00       	push   $0x11da
f012f4d5:	68 5a b4 13 f0       	push   $0xf013b45a
f012f4da:	e8 26 0d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012f4df:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f4e5:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f4e9:	66 83 f8 08          	cmp    $0x8,%ax
f012f4ed:	75 1f                	jne    f012f50e <test_krealloc_BF+0xfe6>
f012f4ef:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f4f5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f4fc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f502:	01 d0                	add    %edx,%eax
f012f504:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f508:	66 83 f8 08          	cmp    $0x8,%ax
f012f50c:	74 17                	je     f012f525 <test_krealloc_BF+0xffd>
			panic(
f012f50e:	83 ec 04             	sub    $0x4,%esp
f012f511:	68 8c c7 13 f0       	push   $0xf013c78c
f012f516:	68 dd 11 00 00       	push   $0x11dd
f012f51b:	68 5a b4 13 f0       	push   $0xf013b45a
f012f520:	e8 e0 0c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012f525:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f52b:	8b 40 04             	mov    0x4(%eax),%eax
f012f52e:	83 f8 08             	cmp    $0x8,%eax
f012f531:	75 1d                	jne    f012f550 <test_krealloc_BF+0x1028>
f012f533:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f539:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f540:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f546:	01 d0                	add    %edx,%eax
f012f548:	8b 40 04             	mov    0x4(%eax),%eax
f012f54b:	83 f8 08             	cmp    $0x8,%eax
f012f54e:	74 17                	je     f012f567 <test_krealloc_BF+0x103f>
			panic(
f012f550:	83 ec 04             	sub    $0x4,%esp
f012f553:	68 8c c7 13 f0       	push   $0xf013c78c
f012f558:	68 e0 11 00 00       	push   $0x11e0
f012f55d:	68 5a b4 13 f0       	push   $0xf013b45a
f012f562:	e8 9e 0c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012f567:	e8 ed da fd ff       	call   f010d059 <sys_calculate_free_frames>
f012f56c:	89 c2                	mov    %eax,%edx
f012f56e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f571:	39 c2                	cmp    %eax,%edx
f012f573:	74 17                	je     f012f58c <test_krealloc_BF+0x1064>
			panic(
f012f575:	83 ec 04             	sub    $0x4,%esp
f012f578:	68 4c c8 13 f0       	push   $0xf013c84c
f012f57d:	68 e4 11 00 00       	push   $0x11e4
f012f582:	68 5a b4 13 f0       	push   $0xf013b45a
f012f587:	e8 79 0c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012f58c:	83 ec 0c             	sub    $0xc,%esp
f012f58f:	68 98 c8 13 f0       	push   $0xf013c898
f012f594:	e8 75 17 fd ff       	call   f0100d0e <cprintf>
f012f599:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012f59c:	e8 b8 da fd ff       	call   f010d059 <sys_calculate_free_frames>
f012f5a1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f5a4:	e8 3a 48 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012f5a9:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012f5af:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012f5b5:	83 ec 08             	sub    $0x8,%esp
f012f5b8:	6a 00                	push   $0x0
f012f5ba:	50                   	push   %eax
f012f5bb:	e8 04 87 fd ff       	call   f0107cc4 <krealloc>
f012f5c0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f5c3:	e8 1b 48 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012f5c8:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f5ce:	74 17                	je     f012f5e7 <test_krealloc_BF+0x10bf>
			panic(
f012f5d0:	83 ec 04             	sub    $0x4,%esp
f012f5d3:	68 bc c8 13 f0       	push   $0xf013c8bc
f012f5d8:	68 f1 11 00 00       	push   $0x11f1
f012f5dd:	68 5a b4 13 f0       	push   $0xf013b45a
f012f5e2:	e8 1e 0c fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012f5e7:	e8 6d da fd ff       	call   f010d059 <sys_calculate_free_frames>
f012f5ec:	89 c2                	mov    %eax,%edx
f012f5ee:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f5f1:	29 c2                	sub    %eax,%edx
f012f5f3:	89 d0                	mov    %edx,%eax
f012f5f5:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f5fa:	74 17                	je     f012f613 <test_krealloc_BF+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012f5fc:	83 ec 04             	sub    $0x4,%esp
f012f5ff:	68 30 c9 13 f0       	push   $0xf013c930
f012f604:	68 f3 11 00 00       	push   $0x11f3
f012f609:	68 5a b4 13 f0       	push   $0xf013b45a
f012f60e:	e8 f2 0b fd ff       	call   f0100205 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012f613:	e8 41 da fd ff       	call   f010d059 <sys_calculate_free_frames>
f012f618:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f61b:	e8 c3 47 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012f620:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012f626:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012f62c:	83 ec 08             	sub    $0x8,%esp
f012f62f:	6a 00                	push   $0x0
f012f631:	50                   	push   %eax
f012f632:	e8 8d 86 fd ff       	call   f0107cc4 <krealloc>
f012f637:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f63a:	e8 a4 47 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012f63f:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f645:	74 17                	je     f012f65e <test_krealloc_BF+0x1136>
			panic(
f012f647:	83 ec 04             	sub    $0x4,%esp
f012f64a:	68 bc c8 13 f0       	push   $0xf013c8bc
f012f64f:	68 fc 11 00 00       	push   $0x11fc
f012f654:	68 5a b4 13 f0       	push   $0xf013b45a
f012f659:	e8 a7 0b fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012f65e:	e8 f6 d9 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012f663:	89 c2                	mov    %eax,%edx
f012f665:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f668:	29 c2                	sub    %eax,%edx
f012f66a:	89 d0                	mov    %edx,%eax
f012f66c:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f671:	74 17                	je     f012f68a <test_krealloc_BF+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012f673:	83 ec 04             	sub    $0x4,%esp
f012f676:	68 30 c9 13 f0       	push   $0xf013c930
f012f67b:	68 fe 11 00 00       	push   $0x11fe
f012f680:	68 5a b4 13 f0       	push   $0xf013b45a
f012f685:	e8 7b 0b fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012f68a:	e8 ca d9 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012f68f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f692:	e8 4c 47 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012f697:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012f69d:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012f6a3:	83 ec 08             	sub    $0x8,%esp
f012f6a6:	6a 00                	push   $0x0
f012f6a8:	50                   	push   %eax
f012f6a9:	e8 16 86 fd ff       	call   f0107cc4 <krealloc>
f012f6ae:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f6b1:	e8 2d 47 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012f6b6:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f6bc:	74 17                	je     f012f6d5 <test_krealloc_BF+0x11ad>
			panic(
f012f6be:	83 ec 04             	sub    $0x4,%esp
f012f6c1:	68 74 b4 13 f0       	push   $0xf013b474
f012f6c6:	68 06 12 00 00       	push   $0x1206
f012f6cb:	68 5a b4 13 f0       	push   $0xf013b45a
f012f6d0:	e8 30 0b fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012f6d5:	e8 7f d9 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012f6da:	89 c2                	mov    %eax,%edx
f012f6dc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f6df:	29 c2                	sub    %eax,%edx
f012f6e1:	89 d0                	mov    %edx,%eax
f012f6e3:	3d 00 02 00 00       	cmp    $0x200,%eax
f012f6e8:	74 17                	je     f012f701 <test_krealloc_BF+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012f6ea:	83 ec 04             	sub    $0x4,%esp
f012f6ed:	68 30 c9 13 f0       	push   $0xf013c930
f012f6f2:	68 08 12 00 00       	push   $0x1208
f012f6f7:	68 5a b4 13 f0       	push   $0xf013b45a
f012f6fc:	e8 04 0b fd ff       	call   f0100205 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012f701:	e8 53 d9 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012f706:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f709:	e8 d5 46 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012f70e:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012f714:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012f71a:	83 ec 08             	sub    $0x8,%esp
f012f71d:	6a 00                	push   $0x0
f012f71f:	50                   	push   %eax
f012f720:	e8 9f 85 fd ff       	call   f0107cc4 <krealloc>
f012f725:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f728:	e8 b6 46 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f012f72d:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f733:	74 17                	je     f012f74c <test_krealloc_BF+0x1224>
			panic(
f012f735:	83 ec 04             	sub    $0x4,%esp
f012f738:	68 bc c8 13 f0       	push   $0xf013c8bc
f012f73d:	68 10 12 00 00       	push   $0x1210
f012f742:	68 5a b4 13 f0       	push   $0xf013b45a
f012f747:	e8 b9 0a fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012f74c:	e8 08 d9 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012f751:	89 c2                	mov    %eax,%edx
f012f753:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f756:	29 c2                	sub    %eax,%edx
f012f758:	89 d0                	mov    %edx,%eax
f012f75a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012f75f:	74 17                	je     f012f778 <test_krealloc_BF+0x1250>
			panic(
f012f761:	83 ec 04             	sub    $0x4,%esp
f012f764:	68 64 c9 13 f0       	push   $0xf013c964
f012f769:	68 13 12 00 00       	push   $0x1213
f012f76e:	68 5a b4 13 f0       	push   $0xf013b45a
f012f773:	e8 8d 0a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f778:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012f77f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012f786:	eb 48                	jmp    f012f7d0 <test_krealloc_BF+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012f788:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012f78b:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f012f790:	83 ec 04             	sub    $0x4,%esp
f012f793:	8d 8d 9c fd ff ff    	lea    -0x264(%ebp),%ecx
f012f799:	51                   	push   %ecx
f012f79a:	52                   	push   %edx
f012f79b:	50                   	push   %eax
f012f79c:	e8 2b 73 fd ff       	call   f0106acc <get_page_table>
f012f7a1:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012f7a4:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012f7aa:	85 c0                	test   %eax,%eax
f012f7ac:	75 17                	jne    f012f7c5 <test_krealloc_BF+0x129d>
					panic(
f012f7ae:	83 ec 04             	sub    $0x4,%esp
f012f7b1:	68 5c bd 13 f0       	push   $0xf013bd5c
f012f7b6:	68 1f 12 00 00       	push   $0x121f
f012f7bb:	68 5a b4 13 f0       	push   $0xf013b45a
f012f7c0:	e8 40 0a fd ff       	call   f0100205 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f7c5:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012f7cc:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012f7d0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f7d4:	78 b2                	js     f012f788 <test_krealloc_BF+0x1260>
f012f7d6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f7da:	7f 09                	jg     f012f7e5 <test_krealloc_BF+0x12bd>
f012f7dc:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012f7e3:	76 a3                	jbe    f012f788 <test_krealloc_BF+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012f7e5:	83 ec 0c             	sub    $0xc,%esp
f012f7e8:	68 a3 c9 13 f0       	push   $0xf013c9a3
f012f7ed:	e8 1c 15 fd ff       	call   f0100d0e <cprintf>
f012f7f2:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012f7f5:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f7fb:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f801:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f808:	eb 21                	jmp    f012f82b <test_krealloc_BF+0x1303>
			sums[0] += ptr[i];
f012f80a:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f810:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012f813:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f819:	01 c8                	add    %ecx,%eax
f012f81b:	8a 00                	mov    (%eax),%al
f012f81d:	0f be c0             	movsbl %al,%eax
f012f820:	01 d0                	add    %edx,%eax
f012f822:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f828:	ff 45 dc             	incl   -0x24(%ebp)
f012f82b:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012f831:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f834:	7d d4                	jge    f012f80a <test_krealloc_BF+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012f836:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012f83c:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012f842:	42                   	inc    %edx
f012f843:	01 d2                	add    %edx,%edx
f012f845:	39 d0                	cmp    %edx,%eax
f012f847:	74 17                	je     f012f860 <test_krealloc_BF+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012f849:	83 ec 04             	sub    $0x4,%esp
f012f84c:	68 ac c9 13 f0       	push   $0xf013c9ac
f012f851:	68 31 12 00 00       	push   $0x1231
f012f856:	68 5a b4 13 f0       	push   $0xf013b45a
f012f85b:	e8 a5 09 fd ff       	call   f0100205 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012f860:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f866:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012f86c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f873:	eb 25                	jmp    f012f89a <test_krealloc_BF+0x1372>
			sums[1] += intArr[i];
f012f875:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012f87b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f87e:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012f885:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f88b:	01 c8                	add    %ecx,%eax
f012f88d:	8b 00                	mov    (%eax),%eax
f012f88f:	01 d0                	add    %edx,%eax
f012f891:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012f897:	ff 45 dc             	incl   -0x24(%ebp)
f012f89a:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012f8a0:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f8a3:	7d d0                	jge    f012f875 <test_krealloc_BF+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012f8a5:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012f8ab:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012f8b1:	42                   	inc    %edx
f012f8b2:	c1 e2 02             	shl    $0x2,%edx
f012f8b5:	39 d0                	cmp    %edx,%eax
f012f8b7:	74 17                	je     f012f8d0 <test_krealloc_BF+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012f8b9:	83 ec 04             	sub    $0x4,%esp
f012f8bc:	68 ac c9 13 f0       	push   $0xf013c9ac
f012f8c1:	68 3b 12 00 00       	push   $0x123b
f012f8c6:	68 5a b4 13 f0       	push   $0xf013b45a
f012f8cb:	e8 35 09 fd ff       	call   f0100205 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012f8d0:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f8d6:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012f8dc:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f8e3:	eb 24                	jmp    f012f909 <test_krealloc_BF+0x13e1>
			sums[2] += shortArr[i];
f012f8e5:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f8eb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f8ee:	01 c0                	add    %eax,%eax
f012f8f0:	89 c1                	mov    %eax,%ecx
f012f8f2:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f8f8:	01 c8                	add    %ecx,%eax
f012f8fa:	66 8b 00             	mov    (%eax),%ax
f012f8fd:	98                   	cwtl   
f012f8fe:	01 d0                	add    %edx,%eax
f012f900:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012f906:	ff 45 dc             	incl   -0x24(%ebp)
f012f909:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f90f:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f912:	7d d1                	jge    f012f8e5 <test_krealloc_BF+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012f914:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f91a:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f920:	8d 48 01             	lea    0x1(%eax),%ecx
f012f923:	89 c8                	mov    %ecx,%eax
f012f925:	c1 e0 02             	shl    $0x2,%eax
f012f928:	01 c8                	add    %ecx,%eax
f012f92a:	39 c2                	cmp    %eax,%edx
f012f92c:	74 17                	je     f012f945 <test_krealloc_BF+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012f92e:	83 ec 04             	sub    $0x4,%esp
f012f931:	68 ac c9 13 f0       	push   $0xf013c9ac
f012f936:	68 45 12 00 00       	push   $0x1245
f012f93b:	68 5a b4 13 f0       	push   $0xf013b45a
f012f940:	e8 c0 08 fd ff       	call   f0100205 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012f945:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f94b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012f951:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f958:	eb 70                	jmp    f012f9ca <test_krealloc_BF+0x14a2>
			sums[3] += structArr[i].a;
f012f95a:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012f960:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f963:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f96a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f970:	01 c8                	add    %ecx,%eax
f012f972:	8a 00                	mov    (%eax),%al
f012f974:	0f be c0             	movsbl %al,%eax
f012f977:	01 d0                	add    %edx,%eax
f012f979:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
			sums[4] += structArr[i].b;
f012f97f:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
f012f985:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f988:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f98f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f995:	01 c8                	add    %ecx,%eax
f012f997:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f99b:	98                   	cwtl   
f012f99c:	01 d0                	add    %edx,%eax
f012f99e:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
			sums[5] += structArr[i].c;
f012f9a4:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012f9aa:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f9ad:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f9b4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f9ba:	01 c8                	add    %ecx,%eax
f012f9bc:	8b 40 04             	mov    0x4(%eax),%eax
f012f9bf:	01 d0                	add    %edx,%eax
f012f9c1:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012f9c7:	ff 45 dc             	incl   -0x24(%ebp)
f012f9ca:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f9d0:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f9d3:	7d 85                	jge    f012f95a <test_krealloc_BF+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012f9d5:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012f9db:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f9e1:	8d 50 01             	lea    0x1(%eax),%edx
f012f9e4:	89 d0                	mov    %edx,%eax
f012f9e6:	01 c0                	add    %eax,%eax
f012f9e8:	01 d0                	add    %edx,%eax
f012f9ea:	01 c0                	add    %eax,%eax
f012f9ec:	01 d0                	add    %edx,%eax
f012f9ee:	39 c1                	cmp    %eax,%ecx
f012f9f0:	75 3a                	jne    f012fa2c <test_krealloc_BF+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012f9f2:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
f012f9f8:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f9fe:	8d 50 01             	lea    0x1(%eax),%edx
f012fa01:	89 d0                	mov    %edx,%eax
f012fa03:	01 c0                	add    %eax,%eax
f012fa05:	01 d0                	add    %edx,%eax
f012fa07:	01 c0                	add    %eax,%eax
f012fa09:	01 d0                	add    %edx,%eax
f012fa0b:	39 c1                	cmp    %eax,%ecx
f012fa0d:	75 1d                	jne    f012fa2c <test_krealloc_BF+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012fa0f:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f012fa15:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012fa1b:	8d 50 01             	lea    0x1(%eax),%edx
f012fa1e:	89 d0                	mov    %edx,%eax
f012fa20:	01 c0                	add    %eax,%eax
f012fa22:	01 d0                	add    %edx,%eax
f012fa24:	01 c0                	add    %eax,%eax
f012fa26:	01 d0                	add    %edx,%eax
f012fa28:	39 c1                	cmp    %eax,%ecx
f012fa2a:	74 17                	je     f012fa43 <test_krealloc_BF+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012fa2c:	83 ec 04             	sub    $0x4,%esp
f012fa2f:	68 ac c9 13 f0       	push   $0xf013c9ac
f012fa34:	68 53 12 00 00       	push   $0x1253
f012fa39:	68 5a b4 13 f0       	push   $0xf013b45a
f012fa3e:	e8 c2 07 fd ff       	call   f0100205 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012fa43:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012fa4a:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012fa4d:	e8 07 d6 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012fa52:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012fa55:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fa5b:	83 ec 08             	sub    $0x8,%esp
f012fa5e:	68 00 3c 00 00       	push   $0x3c00
f012fa63:	50                   	push   %eax
f012fa64:	e8 5b 82 fd ff       	call   f0107cc4 <krealloc>
f012fa69:	83 c4 10             	add    $0x10,%esp
f012fa6c:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fa72:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012fa78:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fa7d:	77 17                	ja     f012fa96 <test_krealloc_BF+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fa7f:	83 ec 04             	sub    $0x4,%esp
f012fa82:	68 00 c7 13 f0       	push   $0xf013c700
f012fa87:	68 5f 12 00 00       	push   $0x125f
f012fa8c:	68 5a b4 13 f0       	push   $0xf013b45a
f012fa91:	e8 6f 07 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012fa96:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fa9c:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012faa2:	74 17                	je     f012fabb <test_krealloc_BF+0x1593>
			panic(
f012faa4:	83 ec 04             	sub    $0x4,%esp
f012faa7:	68 e4 c9 13 f0       	push   $0xf013c9e4
f012faac:	68 62 12 00 00       	push   $0x1262
f012fab1:	68 5a b4 13 f0       	push   $0xf013b45a
f012fab6:	e8 4a 07 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012fabb:	e8 99 d5 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012fac0:	89 c2                	mov    %eax,%edx
f012fac2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012fac5:	39 c2                	cmp    %eax,%edx
f012fac7:	74 17                	je     f012fae0 <test_krealloc_BF+0x15b8>
			panic(
f012fac9:	83 ec 04             	sub    $0x4,%esp
f012facc:	68 50 ca 13 f0       	push   $0xf013ca50
f012fad1:	68 65 12 00 00       	push   $0x1265
f012fad6:	68 5a b4 13 f0       	push   $0xf013b45a
f012fadb:	e8 25 07 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012fae0:	e8 74 d5 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012fae5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012fae8:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012faee:	83 ec 08             	sub    $0x8,%esp
f012faf1:	68 00 fc 0f 00       	push   $0xffc00
f012faf6:	50                   	push   %eax
f012faf7:	e8 c8 81 fd ff       	call   f0107cc4 <krealloc>
f012fafc:	83 c4 10             	add    $0x10,%esp
f012faff:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fb05:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012fb0b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fb10:	77 17                	ja     f012fb29 <test_krealloc_BF+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fb12:	83 ec 04             	sub    $0x4,%esp
f012fb15:	68 00 c7 13 f0       	push   $0xf013c700
f012fb1a:	68 6b 12 00 00       	push   $0x126b
f012fb1f:	68 5a b4 13 f0       	push   $0xf013b45a
f012fb24:	e8 dc 06 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012fb29:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fb2f:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012fb35:	74 17                	je     f012fb4e <test_krealloc_BF+0x1626>
			panic(
f012fb37:	83 ec 04             	sub    $0x4,%esp
f012fb3a:	68 e4 c9 13 f0       	push   $0xf013c9e4
f012fb3f:	68 6e 12 00 00       	push   $0x126e
f012fb44:	68 5a b4 13 f0       	push   $0xf013b45a
f012fb49:	e8 b7 06 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012fb4e:	e8 06 d5 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012fb53:	89 c2                	mov    %eax,%edx
f012fb55:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012fb58:	39 c2                	cmp    %eax,%edx
f012fb5a:	74 17                	je     f012fb73 <test_krealloc_BF+0x164b>
			panic(
f012fb5c:	83 ec 04             	sub    $0x4,%esp
f012fb5f:	68 50 ca 13 f0       	push   $0xf013ca50
f012fb64:	68 71 12 00 00       	push   $0x1271
f012fb69:	68 5a b4 13 f0       	push   $0xf013b45a
f012fb6e:	e8 92 06 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012fb73:	e8 e1 d4 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012fb78:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012fb7b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fb81:	83 ec 08             	sub    $0x8,%esp
f012fb84:	68 00 fc 0f 00       	push   $0xffc00
f012fb89:	50                   	push   %eax
f012fb8a:	e8 35 81 fd ff       	call   f0107cc4 <krealloc>
f012fb8f:	83 c4 10             	add    $0x10,%esp
f012fb92:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fb98:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012fb9e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fba3:	77 17                	ja     f012fbbc <test_krealloc_BF+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fba5:	83 ec 04             	sub    $0x4,%esp
f012fba8:	68 00 c7 13 f0       	push   $0xf013c700
f012fbad:	68 77 12 00 00       	push   $0x1277
f012fbb2:	68 5a b4 13 f0       	push   $0xf013b45a
f012fbb7:	e8 49 06 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012fbbc:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fbc2:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012fbc8:	74 17                	je     f012fbe1 <test_krealloc_BF+0x16b9>
			panic(
f012fbca:	83 ec 04             	sub    $0x4,%esp
f012fbcd:	68 e4 c9 13 f0       	push   $0xf013c9e4
f012fbd2:	68 7a 12 00 00       	push   $0x127a
f012fbd7:	68 5a b4 13 f0       	push   $0xf013b45a
f012fbdc:	e8 24 06 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012fbe1:	e8 73 d4 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012fbe6:	89 c2                	mov    %eax,%edx
f012fbe8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012fbeb:	39 c2                	cmp    %eax,%edx
f012fbed:	74 17                	je     f012fc06 <test_krealloc_BF+0x16de>
			panic(
f012fbef:	83 ec 04             	sub    $0x4,%esp
f012fbf2:	68 50 ca 13 f0       	push   $0xf013ca50
f012fbf7:	68 7d 12 00 00       	push   $0x127d
f012fbfc:	68 5a b4 13 f0       	push   $0xf013b45a
f012fc01:	e8 ff 05 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012fc06:	e8 4e d4 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012fc0b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012fc0e:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012fc14:	83 ec 08             	sub    $0x8,%esp
f012fc17:	68 00 fc 0f 00       	push   $0xffc00
f012fc1c:	50                   	push   %eax
f012fc1d:	e8 a2 80 fd ff       	call   f0107cc4 <krealloc>
f012fc22:	83 c4 10             	add    $0x10,%esp
f012fc25:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fc2b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012fc31:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fc36:	77 17                	ja     f012fc4f <test_krealloc_BF+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fc38:	83 ec 04             	sub    $0x4,%esp
f012fc3b:	68 00 c7 13 f0       	push   $0xf013c700
f012fc40:	68 85 12 00 00       	push   $0x1285
f012fc45:	68 5a b4 13 f0       	push   $0xf013b45a
f012fc4a:	e8 b6 05 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[3])
f012fc4f:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012fc55:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012fc5b:	74 17                	je     f012fc74 <test_krealloc_BF+0x174c>
			panic(
f012fc5d:	83 ec 04             	sub    $0x4,%esp
f012fc60:	68 94 ca 13 f0       	push   $0xf013ca94
f012fc65:	68 88 12 00 00       	push   $0x1288
f012fc6a:	68 5a b4 13 f0       	push   $0xf013b45a
f012fc6f:	e8 91 05 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012fc74:	e8 e0 d3 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012fc79:	89 c2                	mov    %eax,%edx
f012fc7b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012fc7e:	39 c2                	cmp    %eax,%edx
f012fc80:	74 17                	je     f012fc99 <test_krealloc_BF+0x1771>
			panic(
f012fc82:	83 ec 04             	sub    $0x4,%esp
f012fc85:	68 50 ca 13 f0       	push   $0xf013ca50
f012fc8a:	68 8b 12 00 00       	push   $0x128b
f012fc8f:	68 5a b4 13 f0       	push   $0xf013b45a
f012fc94:	e8 6c 05 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012fc99:	83 ec 0c             	sub    $0xc,%esp
f012fc9c:	68 73 bc 13 f0       	push   $0xf013bc73
f012fca1:	e8 68 10 fd ff       	call   f0100d0e <cprintf>
f012fca6:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012fca9:	e8 ab d3 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012fcae:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012fcb1:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fcb7:	83 ec 08             	sub    $0x8,%esp
f012fcba:	68 00 18 10 00       	push   $0x101800
f012fcbf:	50                   	push   %eax
f012fcc0:	e8 ff 7f fd ff       	call   f0107cc4 <krealloc>
f012fcc5:	83 c4 10             	add    $0x10,%esp
f012fcc8:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fccb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fcce:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fcd3:	77 17                	ja     f012fcec <test_krealloc_BF+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fcd5:	83 ec 04             	sub    $0x4,%esp
f012fcd8:	68 00 c7 13 f0       	push   $0xf013c700
f012fcdd:	68 93 12 00 00       	push   $0x1293
f012fce2:	68 5a b4 13 f0       	push   $0xf013b45a
f012fce7:	e8 19 05 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012fcec:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fcf2:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012fcf5:	74 17                	je     f012fd0e <test_krealloc_BF+0x17e6>
			panic(
f012fcf7:	83 ec 04             	sub    $0x4,%esp
f012fcfa:	68 f4 ca 13 f0       	push   $0xf013caf4
f012fcff:	68 96 12 00 00       	push   $0x1296
f012fd04:	68 5a b4 13 f0       	push   $0xf013b45a
f012fd09:	e8 f7 04 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012fd0e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012fd11:	e8 43 d3 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012fd16:	29 c3                	sub    %eax,%ebx
f012fd18:	89 d8                	mov    %ebx,%eax
f012fd1a:	83 f8 02             	cmp    $0x2,%eax
f012fd1d:	74 17                	je     f012fd36 <test_krealloc_BF+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012fd1f:	83 ec 04             	sub    $0x4,%esp
f012fd22:	68 70 cb 13 f0       	push   $0xf013cb70
f012fd27:	68 98 12 00 00       	push   $0x1298
f012fd2c:	68 5a b4 13 f0       	push   $0xf013b45a
f012fd31:	e8 cf 04 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012fd36:	e8 1e d3 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012fd3b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012fd3e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fd44:	83 ec 08             	sub    $0x8,%esp
f012fd47:	68 00 fc 3f 00       	push   $0x3ffc00
f012fd4c:	50                   	push   %eax
f012fd4d:	e8 72 7f fd ff       	call   f0107cc4 <krealloc>
f012fd52:	83 c4 10             	add    $0x10,%esp
f012fd55:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fd58:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fd5b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fd60:	77 17                	ja     f012fd79 <test_krealloc_BF+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fd62:	83 ec 04             	sub    $0x4,%esp
f012fd65:	68 00 c7 13 f0       	push   $0xf013c700
f012fd6a:	68 9e 12 00 00       	push   $0x129e
f012fd6f:	68 5a b4 13 f0       	push   $0xf013b45a
f012fd74:	e8 8c 04 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012fd79:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fd7f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012fd82:	74 17                	je     f012fd9b <test_krealloc_BF+0x1873>
			panic(
f012fd84:	83 ec 04             	sub    $0x4,%esp
f012fd87:	68 f4 ca 13 f0       	push   $0xf013caf4
f012fd8c:	68 a1 12 00 00       	push   $0x12a1
f012fd91:	68 5a b4 13 f0       	push   $0xf013b45a
f012fd96:	e8 6a 04 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012fd9b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012fd9e:	e8 b6 d2 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012fda3:	29 c3                	sub    %eax,%ebx
f012fda5:	89 d8                	mov    %ebx,%eax
f012fda7:	3d 00 02 00 00       	cmp    $0x200,%eax
f012fdac:	74 17                	je     f012fdc5 <test_krealloc_BF+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012fdae:	83 ec 04             	sub    $0x4,%esp
f012fdb1:	68 70 cb 13 f0       	push   $0xf013cb70
f012fdb6:	68 a4 12 00 00       	push   $0x12a4
f012fdbb:	68 5a b4 13 f0       	push   $0xf013b45a
f012fdc0:	e8 40 04 fd ff       	call   f0100205 <_panic>


	}
	cprintf("\b\b\b60%");
f012fdc5:	83 ec 0c             	sub    $0xc,%esp
f012fdc8:	68 b8 bc 13 f0       	push   $0xf013bcb8
f012fdcd:	e8 3c 0f fd ff       	call   f0100d0e <cprintf>
f012fdd2:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012fdd5:	e8 7f d2 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012fdda:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012fddd:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fde3:	83 ec 08             	sub    $0x8,%esp
f012fde6:	68 00 fc 9f 00       	push   $0x9ffc00
f012fdeb:	50                   	push   %eax
f012fdec:	e8 d3 7e fd ff       	call   f0107cc4 <krealloc>
f012fdf1:	83 c4 10             	add    $0x10,%esp
f012fdf4:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fdf7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fdfa:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fdff:	77 17                	ja     f012fe18 <test_krealloc_BF+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fe01:	83 ec 04             	sub    $0x4,%esp
f012fe04:	68 00 c7 13 f0       	push   $0xf013c700
f012fe09:	68 af 12 00 00       	push   $0x12af
f012fe0e:	68 5a b4 13 f0       	push   $0xf013b45a
f012fe13:	e8 ed 03 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012fe18:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012fe1f:	10 00 00 
f012fe22:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012fe28:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012fe2d:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012fe33:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012fe39:	ba 00 00 00 00       	mov    $0x0,%edx
f012fe3e:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012fe44:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012fe4a:	29 d0                	sub    %edx,%eax
f012fe4c:	89 c1                	mov    %eax,%ecx
f012fe4e:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012fe55:	10 00 00 
f012fe58:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012fe5d:	0f b6 d0             	movzbl %al,%edx
f012fe60:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012fe66:	01 d0                	add    %edx,%eax
f012fe68:	48                   	dec    %eax
f012fe69:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012fe6f:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012fe75:	ba 00 00 00 00       	mov    $0x0,%edx
f012fe7a:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012fe80:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012fe86:	29 d0                	sub    %edx,%eax
f012fe88:	01 c1                	add    %eax,%ecx
f012fe8a:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012fe91:	10 00 00 
f012fe94:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012fe99:	0f b6 c0             	movzbl %al,%eax
f012fe9c:	c1 e0 04             	shl    $0x4,%eax
f012fe9f:	89 c2                	mov    %eax,%edx
f012fea1:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012fea7:	01 d0                	add    %edx,%eax
f012fea9:	48                   	dec    %eax
f012feaa:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012feb0:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012feb6:	ba 00 00 00 00       	mov    $0x0,%edx
f012febb:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012fec1:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012fec7:	29 d0                	sub    %edx,%eax
f012fec9:	01 c8                	add    %ecx,%eax
f012fecb:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012fed1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fed4:	39 c2                	cmp    %eax,%edx
f012fed6:	74 18                	je     f012fef0 <test_krealloc_BF+0x19c8>
			panic(
f012fed8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fedb:	50                   	push   %eax
f012fedc:	68 a4 cb 13 f0       	push   $0xf013cba4
f012fee1:	68 b3 12 00 00       	push   $0x12b3
f012fee6:	68 5a b4 13 f0       	push   $0xf013b45a
f012feeb:	e8 15 03 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012fef0:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fef6:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012fef9:	75 17                	jne    f012ff12 <test_krealloc_BF+0x19ea>
			panic(
f012fefb:	83 ec 04             	sub    $0x4,%esp
f012fefe:	68 e8 cb 13 f0       	push   $0xf013cbe8
f012ff03:	68 b6 12 00 00       	push   $0x12b6
f012ff08:	68 5a b4 13 f0       	push   $0xf013b45a
f012ff0d:	e8 f3 02 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012ff12:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ff15:	e8 3f d1 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012ff1a:	29 c3                	sub    %eax,%ebx
f012ff1c:	89 d8                	mov    %ebx,%eax
f012ff1e:	3d 00 06 00 00       	cmp    $0x600,%eax
f012ff23:	74 17                	je     f012ff3c <test_krealloc_BF+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012ff25:	83 ec 04             	sub    $0x4,%esp
f012ff28:	68 70 cb 13 f0       	push   $0xf013cb70
f012ff2d:	68 b9 12 00 00       	push   $0x12b9
f012ff32:	68 5a b4 13 f0       	push   $0xf013b45a
f012ff37:	e8 c9 02 fd ff       	call   f0100205 <_panic>

		ptr_allocations[4] = newAddress;
f012ff3c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ff3f:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012ff45:	e8 0f d1 fd ff       	call   f010d059 <sys_calculate_free_frames>
f012ff4a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012ff4d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ff53:	83 ec 08             	sub    $0x8,%esp
f012ff56:	68 00 fc 3f 00       	push   $0x3ffc00
f012ff5b:	50                   	push   %eax
f012ff5c:	e8 63 7d fd ff       	call   f0107cc4 <krealloc>
f012ff61:	83 c4 10             	add    $0x10,%esp
f012ff64:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ff67:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ff6a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ff6f:	77 17                	ja     f012ff88 <test_krealloc_BF+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ff71:	83 ec 04             	sub    $0x4,%esp
f012ff74:	68 00 c7 13 f0       	push   $0xf013c700
f012ff79:	68 c2 12 00 00       	push   $0x12c2
f012ff7e:	68 5a b4 13 f0       	push   $0xf013b45a
f012ff83:	e8 7d 02 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012ff88:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ff8e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012ff91:	75 17                	jne    f012ffaa <test_krealloc_BF+0x1a82>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012ff93:	83 ec 04             	sub    $0x4,%esp
f012ff96:	68 e8 cb 13 f0       	push   $0xf013cbe8
f012ff9b:	68 c4 12 00 00       	push   $0x12c4
f012ffa0:	68 5a b4 13 f0       	push   $0xf013b45a
f012ffa5:	e8 5b 02 fd ff       	call   f0100205 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012ffaa:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012ffb1:	10 00 00 
f012ffb4:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012ffba:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ffbf:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012ffc5:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012ffcb:	ba 00 00 00 00       	mov    $0x0,%edx
f012ffd0:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012ffd6:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012ffdc:	29 d0                	sub    %edx,%eax
f012ffde:	89 c1                	mov    %eax,%ecx
f012ffe0:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012ffe7:	10 00 00 
f012ffea:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f012ffef:	0f b6 d0             	movzbl %al,%edx
f012fff2:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012fff8:	01 d0                	add    %edx,%eax
f012fffa:	48                   	dec    %eax
f012fffb:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0130001:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0130007:	ba 00 00 00 00       	mov    $0x0,%edx
f013000c:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0130012:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0130018:	29 d0                	sub    %edx,%eax
f013001a:	01 c1                	add    %eax,%ecx
f013001c:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f0130023:	10 00 00 
f0130026:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f013002b:	0f b6 c0             	movzbl %al,%eax
f013002e:	c1 e0 04             	shl    $0x4,%eax
f0130031:	89 c2                	mov    %eax,%edx
f0130033:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0130039:	01 d0                	add    %edx,%eax
f013003b:	48                   	dec    %eax
f013003c:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f0130042:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0130048:	ba 00 00 00 00       	mov    $0x0,%edx
f013004d:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f0130053:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0130059:	29 d0                	sub    %edx,%eax
f013005b:	01 c8                	add    %ecx,%eax
f013005d:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f0130063:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0130066:	39 c2                	cmp    %eax,%edx
f0130068:	74 17                	je     f0130081 <test_krealloc_BF+0x1b59>
f013006a:	83 ec 04             	sub    $0x4,%esp
f013006d:	68 3c c7 13 f0       	push   $0xf013c73c
f0130072:	68 c5 12 00 00       	push   $0x12c5
f0130077:	68 5a b4 13 f0       	push   $0xf013b45a
f013007c:	e8 84 01 fd ff       	call   f0100205 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f0130081:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0130084:	e8 d0 cf fd ff       	call   f010d059 <sys_calculate_free_frames>
f0130089:	29 c3                	sub    %eax,%ebx
f013008b:	89 d8                	mov    %ebx,%eax
f013008d:	3d 00 01 00 00       	cmp    $0x100,%eax
f0130092:	74 17                	je     f01300ab <test_krealloc_BF+0x1b83>
			panic("krealloc: pages in memory are not loaded correctly");
f0130094:	83 ec 04             	sub    $0x4,%esp
f0130097:	68 70 cb 13 f0       	push   $0xf013cb70
f013009c:	68 c9 12 00 00       	push   $0x12c9
f01300a1:	68 5a b4 13 f0       	push   $0xf013b45a
f01300a6:	e8 5a 01 fd ff       	call   f0100205 <_panic>
		ptr_allocations[6] = newAddress;
f01300ab:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01300ae:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f01300b4:	e8 a0 cf fd ff       	call   f010d059 <sys_calculate_free_frames>
f01300b9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f01300bc:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01300c2:	83 ec 08             	sub    $0x8,%esp
f01300c5:	68 00 fc 3f 01       	push   $0x13ffc00
f01300ca:	50                   	push   %eax
f01300cb:	e8 f4 7b fd ff       	call   f0107cc4 <krealloc>
f01300d0:	83 c4 10             	add    $0x10,%esp
f01300d3:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f01300d6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01300d9:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f01300de:	77 17                	ja     f01300f7 <test_krealloc_BF+0x1bcf>
			panic("krealloc: Wrong start address for the allocated space... ");
f01300e0:	83 ec 04             	sub    $0x4,%esp
f01300e3:	68 00 c7 13 f0       	push   $0xf013c700
f01300e8:	68 cf 12 00 00       	push   $0x12cf
f01300ed:	68 5a b4 13 f0       	push   $0xf013b45a
f01300f2:	e8 0e 01 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f01300f7:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01300fd:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0130100:	75 17                	jne    f0130119 <test_krealloc_BF+0x1bf1>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f0130102:	83 ec 04             	sub    $0x4,%esp
f0130105:	68 e8 cb 13 f0       	push   $0xf013cbe8
f013010a:	68 d1 12 00 00       	push   $0x12d1
f013010f:	68 5a b4 13 f0       	push   $0xf013b45a
f0130114:	e8 ec 00 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f0130119:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0130120:	10 00 00 
f0130123:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0130129:	05 ef ff 09 00       	add    $0x9ffef,%eax
f013012e:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0130134:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f013013a:	ba 00 00 00 00       	mov    $0x0,%edx
f013013f:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0130145:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f013014b:	29 d0                	sub    %edx,%eax
f013014d:	89 c1                	mov    %eax,%ecx
f013014f:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f0130156:	10 00 00 
f0130159:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f013015e:	0f b6 d0             	movzbl %al,%edx
f0130161:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0130167:	01 d0                	add    %edx,%eax
f0130169:	48                   	dec    %eax
f013016a:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f0130170:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0130176:	ba 00 00 00 00       	mov    $0x0,%edx
f013017b:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f0130181:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0130187:	29 d0                	sub    %edx,%eax
f0130189:	01 c1                	add    %eax,%ecx
f013018b:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f0130192:	10 00 00 
f0130195:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f013019a:	0f b6 c0             	movzbl %al,%eax
f013019d:	c1 e0 04             	shl    $0x4,%eax
f01301a0:	89 c2                	mov    %eax,%edx
f01301a2:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01301a8:	01 d0                	add    %edx,%eax
f01301aa:	48                   	dec    %eax
f01301ab:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f01301b1:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01301b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01301bc:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f01301c2:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01301c8:	29 d0                	sub    %edx,%eax
f01301ca:	01 c8                	add    %ecx,%eax
f01301cc:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f01301d2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01301d5:	39 c2                	cmp    %eax,%edx
f01301d7:	74 17                	je     f01301f0 <test_krealloc_BF+0x1cc8>
			panic("krealloc: Wrong start address for reallocated space\n");
f01301d9:	83 ec 04             	sub    $0x4,%esp
f01301dc:	68 08 cd 13 f0       	push   $0xf013cd08
f01301e1:	68 d3 12 00 00       	push   $0x12d3
f01301e6:	68 5a b4 13 f0       	push   $0xf013b45a
f01301eb:	e8 15 00 fd ff       	call   f0100205 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f01301f0:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f01301f3:	e8 61 ce fd ff       	call   f010d059 <sys_calculate_free_frames>
f01301f8:	29 c3                	sub    %eax,%ebx
f01301fa:	89 d8                	mov    %ebx,%eax
f01301fc:	3d 00 10 00 00       	cmp    $0x1000,%eax
f0130201:	74 17                	je     f013021a <test_krealloc_BF+0x1cf2>
			panic("krealloc: pages in memory are not loaded correctly");
f0130203:	83 ec 04             	sub    $0x4,%esp
f0130206:	68 70 cb 13 f0       	push   $0xf013cb70
f013020b:	68 d6 12 00 00       	push   $0x12d6
f0130210:	68 5a b4 13 f0       	push   $0xf013b45a
f0130215:	e8 eb ff fc ff       	call   f0100205 <_panic>

		ptr_allocations[6] = newAddress;
f013021a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f013021d:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f0130223:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0130229:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f013022f:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f0130236:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f0130239:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0130240:	eb 21                	jmp    f0130263 <test_krealloc_BF+0x1d3b>
			sums[0] += ptr[i];
f0130242:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f0130248:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f013024b:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0130251:	01 c8                	add    %ecx,%eax
f0130253:	8a 00                	mov    (%eax),%al
f0130255:	0f be c0             	movsbl %al,%eax
f0130258:	01 d0                	add    %edx,%eax
f013025a:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f0130260:	ff 45 d8             	incl   -0x28(%ebp)
f0130263:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0130269:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f013026c:	7d d4                	jge    f0130242 <test_krealloc_BF+0x1d1a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f013026e:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f0130274:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f013027a:	42                   	inc    %edx
f013027b:	01 d2                	add    %edx,%edx
f013027d:	39 d0                	cmp    %edx,%eax
f013027f:	74 17                	je     f0130298 <test_krealloc_BF+0x1d70>
			panic("krealloc: invalid read after re-allocations");
f0130281:	83 ec 04             	sub    $0x4,%esp
f0130284:	68 a0 cc 13 f0       	push   $0xf013cca0
f0130289:	68 e4 12 00 00       	push   $0x12e4
f013028e:	68 5a b4 13 f0       	push   $0xf013b45a
f0130293:	e8 6d ff fc ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f0130298:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f013029e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f01302a4:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f01302ab:	00 00 00 
		sums[1] = 0;
f01302ae:	c7 85 a4 fd ff ff 00 	movl   $0x0,-0x25c(%ebp)
f01302b5:	00 00 00 
		sums[2] = 0;
f01302b8:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%ebp)
f01302bf:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f01302c2:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01302c9:	eb 70                	jmp    f013033b <test_krealloc_BF+0x1e13>
			sums[0] += structArr[i].a;
f01302cb:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f01302d1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01302d4:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f01302db:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01302e1:	01 c8                	add    %ecx,%eax
f01302e3:	8a 00                	mov    (%eax),%al
f01302e5:	0f be c0             	movsbl %al,%eax
f01302e8:	01 d0                	add    %edx,%eax
f01302ea:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
			sums[1] += structArr[i].b;
f01302f0:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f01302f6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01302f9:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0130300:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0130306:	01 c8                	add    %ecx,%eax
f0130308:	66 8b 40 02          	mov    0x2(%eax),%ax
f013030c:	98                   	cwtl   
f013030d:	01 d0                	add    %edx,%eax
f013030f:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
			sums[2] += structArr[i].c;
f0130315:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f013031b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f013031e:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0130325:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f013032b:	01 c8                	add    %ecx,%eax
f013032d:	8b 40 04             	mov    0x4(%eax),%eax
f0130330:	01 d0                	add    %edx,%eax
f0130332:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f0130338:	ff 45 d8             	incl   -0x28(%ebp)
f013033b:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0130341:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0130344:	7d 85                	jge    f01302cb <test_krealloc_BF+0x1da3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f0130346:	8b 8d a0 fd ff ff    	mov    -0x260(%ebp),%ecx
f013034c:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0130352:	8d 50 01             	lea    0x1(%eax),%edx
f0130355:	89 d0                	mov    %edx,%eax
f0130357:	01 c0                	add    %eax,%eax
f0130359:	01 d0                	add    %edx,%eax
f013035b:	01 c0                	add    %eax,%eax
f013035d:	01 d0                	add    %edx,%eax
f013035f:	39 c1                	cmp    %eax,%ecx
f0130361:	75 3a                	jne    f013039d <test_krealloc_BF+0x1e75>
				|| sums[1] != (lastIndices[6] + 1) * 7
f0130363:	8b 8d a4 fd ff ff    	mov    -0x25c(%ebp),%ecx
f0130369:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f013036f:	8d 50 01             	lea    0x1(%eax),%edx
f0130372:	89 d0                	mov    %edx,%eax
f0130374:	01 c0                	add    %eax,%eax
f0130376:	01 d0                	add    %edx,%eax
f0130378:	01 c0                	add    %eax,%eax
f013037a:	01 d0                	add    %edx,%eax
f013037c:	39 c1                	cmp    %eax,%ecx
f013037e:	75 1d                	jne    f013039d <test_krealloc_BF+0x1e75>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f0130380:	8b 8d a8 fd ff ff    	mov    -0x258(%ebp),%ecx
f0130386:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f013038c:	8d 50 01             	lea    0x1(%eax),%edx
f013038f:	89 d0                	mov    %edx,%eax
f0130391:	01 c0                	add    %eax,%eax
f0130393:	01 d0                	add    %edx,%eax
f0130395:	01 c0                	add    %eax,%eax
f0130397:	01 d0                	add    %edx,%eax
f0130399:	39 c1                	cmp    %eax,%ecx
f013039b:	74 17                	je     f01303b4 <test_krealloc_BF+0x1e8c>
			panic("krealloc: invalid read after re-allocations");
f013039d:	83 ec 04             	sub    $0x4,%esp
f01303a0:	68 a0 cc 13 f0       	push   $0xf013cca0
f01303a5:	68 f6 12 00 00       	push   $0x12f6
f01303aa:	68 5a b4 13 f0       	push   $0xf013b45a
f01303af:	e8 51 fe fc ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f01303b4:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01303ba:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f01303c0:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f01303c7:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f01303ca:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01303d1:	eb 24                	jmp    f01303f7 <test_krealloc_BF+0x1ecf>
			sums[0] += shortArr[i];
f01303d3:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f01303d9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01303dc:	01 c0                	add    %eax,%eax
f01303de:	89 c1                	mov    %eax,%ecx
f01303e0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01303e6:	01 c8                	add    %ecx,%eax
f01303e8:	66 8b 00             	mov    (%eax),%ax
f01303eb:	98                   	cwtl   
f01303ec:	01 d0                	add    %edx,%eax
f01303ee:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f01303f4:	ff 45 d8             	incl   -0x28(%ebp)
f01303f7:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f01303fd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0130400:	7d d1                	jge    f01303d3 <test_krealloc_BF+0x1eab>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f0130402:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f0130408:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f013040e:	8d 48 01             	lea    0x1(%eax),%ecx
f0130411:	89 c8                	mov    %ecx,%eax
f0130413:	c1 e0 02             	shl    $0x2,%eax
f0130416:	01 c8                	add    %ecx,%eax
f0130418:	39 c2                	cmp    %eax,%edx
f013041a:	74 17                	je     f0130433 <test_krealloc_BF+0x1f0b>
			panic("krealloc: invalid read after re-allocations");
f013041c:	83 ec 04             	sub    $0x4,%esp
f013041f:	68 a0 cc 13 f0       	push   $0xf013cca0
f0130424:	68 00 13 00 00       	push   $0x1300
f0130429:	68 5a b4 13 f0       	push   $0xf013b45a
f013042e:	e8 d2 fd fc ff       	call   f0100205 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f0130433:	e8 21 cc fd ff       	call   f010d059 <sys_calculate_free_frames>
f0130438:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f013043b:	e8 a3 39 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f0130440:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f0130446:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f013044c:	83 ec 08             	sub    $0x8,%esp
f013044f:	6a 00                	push   $0x0
f0130451:	50                   	push   %eax
f0130452:	e8 6d 78 fd ff       	call   f0107cc4 <krealloc>
f0130457:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f013045a:	e8 84 39 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f013045f:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f0130465:	74 17                	je     f013047e <test_krealloc_BF+0x1f56>
			panic(
f0130467:	83 ec 04             	sub    $0x4,%esp
f013046a:	68 74 b4 13 f0       	push   $0xf013b474
f013046f:	68 08 13 00 00       	push   $0x1308
f0130474:	68 5a b4 13 f0       	push   $0xf013b45a
f0130479:	e8 87 fd fc ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f013047e:	e8 d6 cb fd ff       	call   f010d059 <sys_calculate_free_frames>
f0130483:	89 c2                	mov    %eax,%edx
f0130485:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0130488:	29 c2                	sub    %eax,%edx
f013048a:	89 d0                	mov    %edx,%eax
f013048c:	3d 00 14 00 00       	cmp    $0x1400,%eax
f0130491:	74 17                	je     f01304aa <test_krealloc_BF+0x1f82>
			panic("krealloc: pages in memory are not freed correctly");
f0130493:	83 ec 04             	sub    $0x4,%esp
f0130496:	68 30 c9 13 f0       	push   $0xf013c930
f013049b:	68 0a 13 00 00       	push   $0x130a
f01304a0:	68 5a b4 13 f0       	push   $0xf013b45a
f01304a5:	e8 5b fd fc ff       	call   f0100205 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f01304aa:	e8 aa cb fd ff       	call   f010d059 <sys_calculate_free_frames>
f01304af:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f01304b2:	e8 2c 39 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01304b7:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f01304bd:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01304c3:	83 ec 0c             	sub    $0xc,%esp
f01304c6:	50                   	push   %eax
f01304c7:	e8 4d 76 fd ff       	call   f0107b19 <kfree>
f01304cc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f01304cf:	e8 0f 39 fd ff       	call   f0103de3 <pf_calculate_free_frames>
f01304d4:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f01304da:	74 17                	je     f01304f3 <test_krealloc_BF+0x1fcb>
			panic(
f01304dc:	83 ec 04             	sub    $0x4,%esp
f01304df:	68 74 b4 13 f0       	push   $0xf013b474
f01304e4:	68 12 13 00 00       	push   $0x1312
f01304e9:	68 5a b4 13 f0       	push   $0xf013b45a
f01304ee:	e8 12 fd fc ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f01304f3:	e8 61 cb fd ff       	call   f010d059 <sys_calculate_free_frames>
f01304f8:	89 c2                	mov    %eax,%edx
f01304fa:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01304fd:	29 c2                	sub    %eax,%edx
f01304ff:	89 d0                	mov    %edx,%eax
f0130501:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0130506:	74 17                	je     f013051f <test_krealloc_BF+0x1ff7>
			panic("krealloc: pages in memory are not freed correctly");
f0130508:	83 ec 04             	sub    $0x4,%esp
f013050b:	68 30 c9 13 f0       	push   $0xf013c930
f0130510:	68 14 13 00 00       	push   $0x1314
f0130515:	68 5a b4 13 f0       	push   $0xf013b45a
f013051a:	e8 e6 fc fc ff       	call   f0100205 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f013051f:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f0130526:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f013052d:	eb 48                	jmp    f0130577 <test_krealloc_BF+0x204f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f013052f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0130532:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0130537:	83 ec 04             	sub    $0x4,%esp
f013053a:	8d 8d 98 fd ff ff    	lea    -0x268(%ebp),%ecx
f0130540:	51                   	push   %ecx
f0130541:	52                   	push   %edx
f0130542:	50                   	push   %eax
f0130543:	e8 84 65 fd ff       	call   f0106acc <get_page_table>
f0130548:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f013054b:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f0130551:	85 c0                	test   %eax,%eax
f0130553:	75 17                	jne    f013056c <test_krealloc_BF+0x2044>
					panic(
f0130555:	83 ec 04             	sub    $0x4,%esp
f0130558:	68 5c bd 13 f0       	push   $0xf013bd5c
f013055d:	68 21 13 00 00       	push   $0x1321
f0130562:	68 5a b4 13 f0       	push   $0xf013b45a
f0130567:	e8 99 fc fc ff       	call   f0100205 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f013056c:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f0130573:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f0130577:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f013057b:	78 b2                	js     f013052f <test_krealloc_BF+0x2007>
f013057d:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0130581:	7f 09                	jg     f013058c <test_krealloc_BF+0x2064>
f0130583:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f013058a:	76 a3                	jbe    f013052f <test_krealloc_BF+0x2007>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f013058c:	83 ec 0c             	sub    $0xc,%esp
f013058f:	68 3e b6 13 f0       	push   $0xf013b63e
f0130594:	e8 75 07 fd ff       	call   f0100d0e <cprintf>
f0130599:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f013059c:	83 ec 0c             	sub    $0xc,%esp
f013059f:	68 40 cd 13 f0       	push   $0xf013cd40
f01305a4:	e8 65 07 fd ff       	call   f0100d0e <cprintf>
f01305a9:	83 c4 10             	add    $0x10,%esp
	return 0;
f01305ac:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01305b1:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01305b4:	5b                   	pop    %ebx
f01305b5:	5f                   	pop    %edi
f01305b6:	5d                   	pop    %ebp
f01305b7:	c3                   	ret    

f01305b8 <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f01305b8:	55                   	push   %ebp
f01305b9:	89 e5                	mov    %esp,%ebp
f01305bb:	83 ec 28             	sub    $0x28,%esp
		panic("USE_KHEAP = 0 & it shall be 1. Go to 'inc/memlayout.h' and set USE_KHEAP by 1. Then, repeat the test again.");
	if(STATIC_MEMBLOCK_ALLOC != 0)
		panic("STATIC_MEMBLOCK_ALLOC = 1 & it shall be 0. Go to 'inc/dynamic_allocator.h' and set STATIC_MEMBLOCK_ALLOC by 0. Then, repeat the test again.");

	//Check MAX_MEM_BLOCK_CNT
	if(MAX_MEM_BLOCK_CNT != ((0xFFFFF000-0xF6000000)/4096))
f01305be:	a1 80 b8 85 f0       	mov    0xf085b880,%eax
f01305c3:	3d ff 9f 00 00       	cmp    $0x9fff,%eax
f01305c8:	74 17                	je     f01305e1 <test_initialize_dyn_block_system+0x29>
	{
		panic("Wrong initialize: MAX_MEM_BLOCK_CNT is not set with the correct size of the array");
f01305ca:	83 ec 04             	sub    $0x4,%esp
f01305cd:	68 80 cd 13 f0       	push   $0xf013cd80
f01305d2:	68 39 13 00 00       	push   $0x1339
f01305d7:	68 5a b4 13 f0       	push   $0xf013b45a
f01305dc:	e8 24 fc fc ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != MAX_MEM_BLOCK_CNT-1)
f01305e1:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f01305e6:	8b 15 80 b8 85 f0    	mov    0xf085b880,%edx
f01305ec:	4a                   	dec    %edx
f01305ed:	39 d0                	cmp    %edx,%eax
f01305ef:	74 17                	je     f0130608 <test_initialize_dyn_block_system+0x50>
	{
		panic("Wrong initialize: Wrong size for the AvailableMemBlocksList");
f01305f1:	83 ec 04             	sub    $0x4,%esp
f01305f4:	68 d4 cd 13 f0       	push   $0xf013cdd4
f01305f9:	68 3f 13 00 00       	push   $0x133f
f01305fe:	68 5a b4 13 f0       	push   $0xf013b45a
f0130603:	e8 fd fb fc ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0130608:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f013060d:	85 c0                	test   %eax,%eax
f013060f:	74 17                	je     f0130628 <test_initialize_dyn_block_system+0x70>
	{
		panic("Wrong initialize: Wrong size for the AllocMemBlocksList");
f0130611:	83 ec 04             	sub    $0x4,%esp
f0130614:	68 10 ce 13 f0       	push   $0xf013ce10
f0130619:	68 45 13 00 00       	push   $0x1345
f013061e:	68 5a b4 13 f0       	push   $0xf013b45a
f0130623:	e8 dd fb fc ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in FreeMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 1)
f0130628:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f013062d:	83 f8 01             	cmp    $0x1,%eax
f0130630:	74 17                	je     f0130649 <test_initialize_dyn_block_system+0x91>
	{
		panic("Wrong initialize: Wrong size for the FreeMemBlocksList");
f0130632:	83 ec 04             	sub    $0x4,%esp
f0130635:	68 48 ce 13 f0       	push   $0xf013ce48
f013063a:	68 4b 13 00 00       	push   $0x134b
f013063f:	68 5a b4 13 f0       	push   $0xf013b45a
f0130644:	e8 bc fb fc ff       	call   f0100205 <_panic>
	}

	//Check content of FreeMemBlocksList
	struct MemBlock* block = LIST_FIRST(&FreeMemBlocksList);
f0130649:	a1 e0 b8 85 f0       	mov    0xf085b8e0,%eax
f013064e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(block == NULL || block->size != (KERNEL_HEAP_MAX-0xF6000000-DYNAMIC_ALLOCATOR_DS) || block->sva != 0xF6000000+DYNAMIC_ALLOCATOR_DS)
f0130651:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130655:	74 66                	je     f01306bd <test_initialize_dyn_block_system+0x105>
f0130657:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013065a:	8b 48 0c             	mov    0xc(%eax),%ecx
f013065d:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f0130664:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130667:	05 ef ff 09 00       	add    $0x9ffef,%eax
f013066c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f013066f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130672:	ba 00 00 00 00       	mov    $0x0,%edx
f0130677:	f7 75 ec             	divl   -0x14(%ebp)
f013067a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013067d:	29 d0                	sub    %edx,%eax
f013067f:	ba 00 f0 ff 09       	mov    $0x9fff000,%edx
f0130684:	29 c2                	sub    %eax,%edx
f0130686:	89 d0                	mov    %edx,%eax
f0130688:	39 c1                	cmp    %eax,%ecx
f013068a:	75 31                	jne    f01306bd <test_initialize_dyn_block_system+0x105>
f013068c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013068f:	8b 48 08             	mov    0x8(%eax),%ecx
f0130692:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0130699:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013069c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01306a1:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01306a4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01306a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01306ac:	f7 75 e4             	divl   -0x1c(%ebp)
f01306af:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01306b2:	29 d0                	sub    %edx,%eax
f01306b4:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01306b9:	39 c1                	cmp    %eax,%ecx
f01306bb:	74 17                	je     f01306d4 <test_initialize_dyn_block_system+0x11c>
	{
		panic("Wrong initialize: Wrong content for the FreeMemBlocksList.");
f01306bd:	83 ec 04             	sub    $0x4,%esp
f01306c0:	68 80 ce 13 f0       	push   $0xf013ce80
f01306c5:	68 52 13 00 00       	push   $0x1352
f01306ca:	68 5a b4 13 f0       	push   $0xf013b45a
f01306cf:	e8 31 fb fc ff       	call   f0100205 <_panic>
	}

	//Check number of disk and memory frames
	if ((freeDiskFrames_after - freeDiskFrames_before) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01306d4:	8b 45 14             	mov    0x14(%ebp),%eax
f01306d7:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01306da:	74 17                	je     f01306f3 <test_initialize_dyn_block_system+0x13b>
f01306dc:	83 ec 04             	sub    $0x4,%esp
f01306df:	68 74 b4 13 f0       	push   $0xf013b474
f01306e4:	68 56 13 00 00       	push   $0x1356
f01306e9:	68 5a b4 13 f0       	push   $0xf013b45a
f01306ee:	e8 12 fb fc ff       	call   f0100205 <_panic>
	if ((freeFrames_before - freeFrames_after) != 160) panic("Wrong allocation: pages are not loaded successfully into memory %d", (freeFrames_before - freeFrames_after));
f01306f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01306f6:	2b 45 10             	sub    0x10(%ebp),%eax
f01306f9:	3d a0 00 00 00       	cmp    $0xa0,%eax
f01306fe:	74 1b                	je     f013071b <test_initialize_dyn_block_system+0x163>
f0130700:	8b 45 08             	mov    0x8(%ebp),%eax
f0130703:	2b 45 10             	sub    0x10(%ebp),%eax
f0130706:	50                   	push   %eax
f0130707:	68 bc ce 13 f0       	push   $0xf013cebc
f013070c:	68 57 13 00 00       	push   $0x1357
f0130711:	68 5a b4 13 f0       	push   $0xf013b45a
f0130716:	e8 ea fa fc ff       	call   f0100205 <_panic>

	//Checking permissions on the allocated spaces
	{
		uint32 a = 0xF6000000;
f013071b:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
		while(1)
		{
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
f0130722:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0130727:	83 ec 04             	sub    $0x4,%esp
f013072a:	6a 00                	push   $0x0
f013072c:	ff 75 f4             	pushl  -0xc(%ebp)
f013072f:	50                   	push   %eax
f0130730:	e8 e9 5f fe ff       	call   f011671e <CB>
f0130735:	83 c4 10             	add    $0x10,%esp
f0130738:	83 f8 01             	cmp    $0x1,%eax
f013073b:	75 35                	jne    f0130772 <test_initialize_dyn_block_system+0x1ba>
f013073d:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0130742:	83 ec 04             	sub    $0x4,%esp
f0130745:	6a 01                	push   $0x1
f0130747:	ff 75 f4             	pushl  -0xc(%ebp)
f013074a:	50                   	push   %eax
f013074b:	e8 ce 5f fe ff       	call   f011671e <CB>
f0130750:	83 c4 10             	add    $0x10,%esp
f0130753:	83 f8 01             	cmp    $0x1,%eax
f0130756:	75 1a                	jne    f0130772 <test_initialize_dyn_block_system+0x1ba>
f0130758:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f013075d:	83 ec 04             	sub    $0x4,%esp
f0130760:	6a 02                	push   $0x2
f0130762:	ff 75 f4             	pushl  -0xc(%ebp)
f0130765:	50                   	push   %eax
f0130766:	e8 b3 5f fe ff       	call   f011671e <CB>
f013076b:	83 c4 10             	add    $0x10,%esp
f013076e:	85 c0                	test   %eax,%eax
f0130770:	74 17                	je     f0130789 <test_initialize_dyn_block_system+0x1d1>
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");
f0130772:	83 ec 04             	sub    $0x4,%esp
f0130775:	68 00 cf 13 f0       	push   $0xf013cf00
f013077a:	68 5f 13 00 00       	push   $0x135f
f013077f:	68 5a b4 13 f0       	push   $0xf013b45a
f0130784:	e8 7c fa fc ff       	call   f0100205 <_panic>

			a+=4096;
f0130789:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
f0130790:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0130797:	8b 45 dc             	mov    -0x24(%ebp),%eax
f013079a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f013079f:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01307a2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01307a5:	ba 00 00 00 00       	mov    $0x0,%edx
f01307aa:	f7 75 dc             	divl   -0x24(%ebp)
f01307ad:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01307b0:	29 d0                	sub    %edx,%eax
f01307b2:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01307b7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01307ba:	74 05                	je     f01307c1 <test_initialize_dyn_block_system+0x209>
				break;
		}
f01307bc:	e9 61 ff ff ff       	jmp    f0130722 <test_initialize_dyn_block_system+0x16a>
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");

			a+=4096;
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
				break;
f01307c1:	90                   	nop
		}
	}

	//===============================================//
	cprintf("\nCongratulations!! test initialize_dyn_block_system of KHEAP completed successfully.\n");
f01307c2:	83 ec 0c             	sub    $0xc,%esp
f01307c5:	68 60 cf 13 f0       	push   $0xf013cf60
f01307ca:	e8 3f 05 fd ff       	call   f0100d0e <cprintf>
f01307cf:	83 c4 10             	add    $0x10,%esp
	return 0;
f01307d2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01307d7:	c9                   	leave  
f01307d8:	c3                   	ret    

f01307d9 <nearest_pow2_ceil>:
#include <kern/cpu/sched.h>
#include <kern/disk/pagefile_manager.h>
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f01307d9:	55                   	push   %ebp
f01307da:	89 e5                	mov    %esp,%ebp
f01307dc:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f01307df:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f01307e3:	77 07                	ja     f01307ec <nearest_pow2_ceil+0x13>
f01307e5:	b8 01 00 00 00       	mov    $0x1,%eax
f01307ea:	eb 20                	jmp    f013080c <nearest_pow2_ceil+0x33>
    int power = 2;
f01307ec:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f01307f3:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f01307f6:	eb 08                	jmp    f0130800 <nearest_pow2_ceil+0x27>
    	power <<= 1;
f01307f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01307fb:	01 c0                	add    %eax,%eax
f01307fd:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f0130800:	d1 6d 08             	shrl   0x8(%ebp)
f0130803:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130807:	75 ef                	jne    f01307f8 <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f0130809:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f013080c:	c9                   	leave  
f013080d:	c3                   	ret    

f013080e <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f013080e:	55                   	push   %ebp
f013080f:	89 e5                	mov    %esp,%ebp
f0130811:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f0130814:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0130818:	77 07                	ja     f0130821 <log2_ceil+0x13>
f013081a:	b8 01 00 00 00       	mov    $0x1,%eax
f013081f:	eb 1b                	jmp    f013083c <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f0130821:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f0130828:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f013082b:	eb 03                	jmp    f0130830 <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f013082d:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f0130830:	d1 6d 08             	shrl   0x8(%ebp)
f0130833:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130837:	75 f4                	jne    f013082d <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f0130839:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f013083c:	c9                   	leave  
f013083d:	c3                   	ret    

f013083e <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f013083e:	55                   	push   %ebp
f013083f:	89 e5                	mov    %esp,%ebp
f0130841:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f0130844:	8b 45 08             	mov    0x8(%ebp),%eax
f0130847:	8b 00                	mov    (%eax),%eax
f0130849:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f013084c:	8b 45 08             	mov    0x8(%ebp),%eax
f013084f:	8b 00                	mov    (%eax),%eax
f0130851:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f0130854:	eb 52                	jmp    f01308a8 <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f0130856:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130859:	8b 00                	mov    (%eax),%eax
f013085b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f013085e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130861:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130864:	75 12                	jne    f0130878 <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f0130866:	83 ec 0c             	sub    $0xc,%esp
f0130869:	68 b8 cf 13 f0       	push   $0xf013cfb8
f013086e:	e8 9b 04 fd ff       	call   f0100d0e <cprintf>
f0130873:	83 c4 10             	add    $0x10,%esp
			break;
f0130876:	eb 3f                	jmp    f01308b7 <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f0130878:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013087c:	74 38                	je     f01308b6 <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f013087e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130881:	8b 00                	mov    (%eax),%eax
f0130883:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f0130886:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130889:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f013088c:	75 12                	jne    f01308a0 <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f013088e:	83 ec 0c             	sub    $0xc,%esp
f0130891:	68 d4 cf 13 f0       	push   $0xf013cfd4
f0130896:	e8 73 04 fd ff       	call   f0100d0e <cprintf>
f013089b:	83 c4 10             	add    $0x10,%esp
			break;
f013089e:	eb 17                	jmp    f01308b7 <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f01308a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01308a3:	8b 00                	mov    (%eax),%eax
f01308a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f01308a8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01308ac:	74 09                	je     f01308b7 <detect_loop_in_FrameInfo_list+0x79>
f01308ae:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01308b2:	75 a2                	jne    f0130856 <detect_loop_in_FrameInfo_list+0x18>
f01308b4:	eb 01                	jmp    f01308b7 <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f01308b6:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f01308b7:	83 ec 0c             	sub    $0xc,%esp
f01308ba:	68 eb cf 13 f0       	push   $0xf013cfeb
f01308bf:	e8 4a 04 fd ff       	call   f0100d0e <cprintf>
f01308c4:	83 c4 10             	add    $0x10,%esp
}
f01308c7:	90                   	nop
f01308c8:	c9                   	leave  
f01308c9:	c3                   	ret    

f01308ca <scarce_memory>:

void scarce_memory()
{
f01308ca:	55                   	push   %ebp
f01308cb:	89 e5                	mov    %esp,%ebp
f01308cd:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f01308d0:	a1 6c b8 85 f0       	mov    0xf085b86c,%eax
f01308d5:	ba 64 00 00 00       	mov    $0x64,%edx
f01308da:	29 c2                	sub    %eax,%edx
f01308dc:	a1 8c b8 85 f0       	mov    0xf085b88c,%eax
f01308e1:	0f af c2             	imul   %edx,%eax
f01308e4:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f01308e9:	f7 e2                	mul    %edx
f01308eb:	89 d0                	mov    %edx,%eax
f01308ed:	c1 e8 05             	shr    $0x5,%eax
f01308f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f01308f3:	a1 6c b8 85 f0       	mov    0xf085b86c,%eax
f01308f8:	ba 64 00 00 00       	mov    $0x64,%edx
f01308fd:	29 c2                	sub    %eax,%edx
f01308ff:	a1 8c b8 85 f0       	mov    0xf085b88c,%eax
f0130904:	89 d1                	mov    %edx,%ecx
f0130906:	0f af c8             	imul   %eax,%ecx
f0130909:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f013090e:	f7 e1                	mul    %ecx
f0130910:	c1 ea 05             	shr    $0x5,%edx
f0130913:	89 d0                	mov    %edx,%eax
f0130915:	c1 e0 02             	shl    $0x2,%eax
f0130918:	01 d0                	add    %edx,%eax
f013091a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130921:	01 d0                	add    %edx,%eax
f0130923:	c1 e0 02             	shl    $0x2,%eax
f0130926:	29 c1                	sub    %eax,%ecx
f0130928:	89 ca                	mov    %ecx,%edx
f013092a:	85 d2                	test   %edx,%edx
f013092c:	74 03                	je     f0130931 <scarce_memory+0x67>
		total_size_tobe_allocated++;
f013092e:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f0130931:	8b 15 8c b8 85 f0    	mov    0xf085b88c,%edx
f0130937:	a1 a0 b8 85 f0       	mov    0xf085b8a0,%eax
f013093c:	29 c2                	sub    %eax,%edx
f013093e:	89 d0                	mov    %edx,%eax
f0130940:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f0130943:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130946:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0130949:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f013094c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f0130953:	eb 12                	jmp    f0130967 <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f0130955:	83 ec 0c             	sub    $0xc,%esp
f0130958:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f013095b:	50                   	push   %eax
f013095c:	e8 ac 5f fd ff       	call   f010690d <allocate_frame>
f0130961:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f0130964:	ff 45 f0             	incl   -0x10(%ebp)
f0130967:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013096a:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f013096d:	76 e6                	jbe    f0130955 <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f013096f:	90                   	nop
f0130970:	c9                   	leave  
f0130971:	c3                   	ret    

f0130972 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f0130972:	55                   	push   %ebp
f0130973:	89 e5                	mov    %esp,%ebp
f0130975:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f0130978:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f013097f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f0130986:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f013098d:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0130991:	0f 85 d0 01 00 00    	jne    f0130b67 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f5>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f0130997:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f013099e:	e9 de 00 00 00       	jmp    f0130a81 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x10f>
		{
			struct Env * ptr_ready_env = NULL;
f01309a3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f01309aa:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f01309af:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01309b2:	c1 e2 04             	shl    $0x4,%edx
f01309b5:	01 d0                	add    %edx,%eax
f01309b7:	8b 00                	mov    (%eax),%eax
f01309b9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01309bc:	e9 85 00 00 00       	jmp    f0130a46 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xd4>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f01309c1:	83 ec 0c             	sub    $0xc,%esp
f01309c4:	ff 75 e4             	pushl  -0x1c(%ebp)
f01309c7:	e8 f8 75 fd ff       	call   f0107fc4 <env_page_ws_get_size>
f01309cc:	83 c4 10             	add    $0x10,%esp
f01309cf:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f01309d2:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f01309d7:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f01309dd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01309e0:	0f af c2             	imul   %edx,%eax
f01309e3:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f01309e8:	f7 e2                	mul    %edx
f01309ea:	89 d0                	mov    %edx,%eax
f01309ec:	c1 e8 05             	shr    $0x5,%eax
f01309ef:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f01309f2:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f01309f7:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f01309fd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0130a00:	89 d1                	mov    %edx,%ecx
f0130a02:	0f af c8             	imul   %eax,%ecx
f0130a05:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130a0a:	f7 e1                	mul    %ecx
f0130a0c:	c1 ea 05             	shr    $0x5,%edx
f0130a0f:	89 d0                	mov    %edx,%eax
f0130a11:	c1 e0 02             	shl    $0x2,%eax
f0130a14:	01 d0                	add    %edx,%eax
f0130a16:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130a1d:	01 d0                	add    %edx,%eax
f0130a1f:	c1 e0 02             	shl    $0x2,%eax
f0130a22:	29 c1                	sub    %eax,%ecx
f0130a24:	89 ca                	mov    %ecx,%edx
f0130a26:	85 d2                	test   %edx,%edx
f0130a28:	74 03                	je     f0130a2d <calc_no_pages_tobe_removed_from_ready_exit_queues+0xbb>
					num_of_pages_to_be_removed++;
f0130a2a:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f0130a2d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130a30:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f0130a33:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0130a38:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0130a3b:	c1 e2 04             	shl    $0x4,%edx
f0130a3e:	01 d0                	add    %edx,%eax
f0130a40:	8b 40 08             	mov    0x8(%eax),%eax
f0130a43:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0130a46:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0130a4b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0130a4e:	c1 e2 04             	shl    $0x4,%edx
f0130a51:	01 d0                	add    %edx,%eax
f0130a53:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130a57:	74 08                	je     f0130a61 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xef>
f0130a59:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0130a5c:	8b 52 44             	mov    0x44(%edx),%edx
f0130a5f:	eb 05                	jmp    f0130a66 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xf4>
f0130a61:	ba 00 00 00 00       	mov    $0x0,%edx
f0130a66:	89 50 08             	mov    %edx,0x8(%eax)
f0130a69:	8b 40 08             	mov    0x8(%eax),%eax
f0130a6c:	85 c0                	test   %eax,%eax
f0130a6e:	0f 85 4d ff ff ff    	jne    f01309c1 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
f0130a74:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130a78:	0f 85 43 ff ff ff    	jne    f01309c1 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f0130a7e:	ff 45 e8             	incl   -0x18(%ebp)
f0130a81:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0130a86:	0f b6 c0             	movzbl %al,%eax
f0130a89:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0130a8c:	0f 8f 11 ff ff ff    	jg     f01309a3 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f0130a92:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f0130a99:	a1 70 b8 85 f0       	mov    0xf085b870,%eax
f0130a9e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0130aa1:	eb 19                	jmp    f0130abc <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14a>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f0130aa3:	83 ec 0c             	sub    $0xc,%esp
f0130aa6:	ff 75 dc             	pushl  -0x24(%ebp)
f0130aa9:	e8 16 75 fd ff       	call   f0107fc4 <env_page_ws_get_size>
f0130aae:	83 c4 10             	add    $0x10,%esp
f0130ab1:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f0130ab4:	a1 78 b8 85 f0       	mov    0xf085b878,%eax
f0130ab9:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0130abc:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130ac0:	74 08                	je     f0130aca <calc_no_pages_tobe_removed_from_ready_exit_queues+0x158>
f0130ac2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0130ac5:	8b 40 44             	mov    0x44(%eax),%eax
f0130ac8:	eb 05                	jmp    f0130acf <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15d>
f0130aca:	b8 00 00 00 00       	mov    $0x0,%eax
f0130acf:	a3 78 b8 85 f0       	mov    %eax,0xf085b878
f0130ad4:	a1 78 b8 85 f0       	mov    0xf085b878,%eax
f0130ad9:	85 c0                	test   %eax,%eax
f0130adb:	75 c6                	jne    f0130aa3 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
f0130add:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130ae1:	75 c0                	jne    f0130aa3 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f0130ae3:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f0130ae8:	85 c0                	test   %eax,%eax
f0130aea:	0f 84 ec 00 00 00    	je     f0130bdc <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f0130af0:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f0130af5:	83 ec 0c             	sub    $0xc,%esp
f0130af8:	50                   	push   %eax
f0130af9:	e8 c6 74 fd ff       	call   f0107fc4 <env_page_ws_get_size>
f0130afe:	83 c4 10             	add    $0x10,%esp
f0130b01:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f0130b04:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f0130b09:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130b0f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0130b12:	0f af c2             	imul   %edx,%eax
f0130b15:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130b1a:	f7 e2                	mul    %edx
f0130b1c:	89 d0                	mov    %edx,%eax
f0130b1e:	c1 e8 05             	shr    $0x5,%eax
f0130b21:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f0130b24:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f0130b29:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130b2f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0130b32:	89 d1                	mov    %edx,%ecx
f0130b34:	0f af c8             	imul   %eax,%ecx
f0130b37:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130b3c:	f7 e1                	mul    %ecx
f0130b3e:	c1 ea 05             	shr    $0x5,%edx
f0130b41:	89 d0                	mov    %edx,%eax
f0130b43:	c1 e0 02             	shl    $0x2,%eax
f0130b46:	01 d0                	add    %edx,%eax
f0130b48:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130b4f:	01 d0                	add    %edx,%eax
f0130b51:	c1 e0 02             	shl    $0x2,%eax
f0130b54:	29 c1                	sub    %eax,%ecx
f0130b56:	89 ca                	mov    %ecx,%edx
f0130b58:	85 d2                	test   %edx,%edx
f0130b5a:	74 03                	je     f0130b5f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1ed>
				num_of_pages_to_be_removed++;
f0130b5c:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f0130b5f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0130b62:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0130b65:	eb 75                	jmp    f0130bdc <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f0130b67:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f0130b6c:	83 ec 0c             	sub    $0xc,%esp
f0130b6f:	50                   	push   %eax
f0130b70:	e8 4f 74 fd ff       	call   f0107fc4 <env_page_ws_get_size>
f0130b75:	83 c4 10             	add    $0x10,%esp
f0130b78:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f0130b7b:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f0130b80:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130b86:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0130b89:	0f af c2             	imul   %edx,%eax
f0130b8c:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130b91:	f7 e2                	mul    %edx
f0130b93:	89 d0                	mov    %edx,%eax
f0130b95:	c1 e8 05             	shr    $0x5,%eax
f0130b98:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f0130b9b:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f0130ba0:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130ba6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0130ba9:	89 d1                	mov    %edx,%ecx
f0130bab:	0f af c8             	imul   %eax,%ecx
f0130bae:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130bb3:	f7 e1                	mul    %ecx
f0130bb5:	c1 ea 05             	shr    $0x5,%edx
f0130bb8:	89 d0                	mov    %edx,%eax
f0130bba:	c1 e0 02             	shl    $0x2,%eax
f0130bbd:	01 d0                	add    %edx,%eax
f0130bbf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130bc6:	01 d0                	add    %edx,%eax
f0130bc8:	c1 e0 02             	shl    $0x2,%eax
f0130bcb:	29 c1                	sub    %eax,%ecx
f0130bcd:	89 ca                	mov    %ecx,%edx
f0130bcf:	85 d2                	test   %edx,%edx
f0130bd1:	74 03                	je     f0130bd6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x264>
			num_of_pages_to_be_removed++;
f0130bd3:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f0130bd6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0130bd9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f0130bdc:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130bdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130be2:	01 c2                	add    %eax,%edx
f0130be4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130be7:	01 d0                	add    %edx,%eax
}
f0130be9:	c9                   	leave  
f0130bea:	c3                   	ret    

f0130beb <schenv>:


void schenv()
{
f0130beb:	55                   	push   %ebp
f0130bec:	89 e5                	mov    %esp,%ebp
f0130bee:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f0130bf1:	c6 05 24 b9 85 f0 00 	movb   $0x0,0xf085b924
	__ne = NULL;
f0130bf8:	c7 05 b4 b8 85 f0 00 	movl   $0x0,0xf085b8b4
f0130bff:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f0130c02:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130c09:	eb 3f                	jmp    f0130c4a <schenv+0x5f>
	{
		if (queue_size(&(env_ready_queues[i])))
f0130c0b:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0130c10:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130c13:	c1 e2 04             	shl    $0x4,%edx
f0130c16:	01 d0                	add    %edx,%eax
f0130c18:	83 ec 0c             	sub    $0xc,%esp
f0130c1b:	50                   	push   %eax
f0130c1c:	e8 7f 38 fd ff       	call   f01044a0 <queue_size>
f0130c21:	83 c4 10             	add    $0x10,%esp
f0130c24:	85 c0                	test   %eax,%eax
f0130c26:	74 1f                	je     f0130c47 <schenv+0x5c>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f0130c28:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0130c2d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130c30:	c1 e2 04             	shl    $0x4,%edx
f0130c33:	01 d0                	add    %edx,%eax
f0130c35:	8b 40 04             	mov    0x4(%eax),%eax
f0130c38:	a3 b4 b8 85 f0       	mov    %eax,0xf085b8b4
			__nl = i;
f0130c3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130c40:	a2 24 b9 85 f0       	mov    %al,0xf085b924
			break;
f0130c45:	eb 10                	jmp    f0130c57 <schenv+0x6c>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f0130c47:	ff 45 f4             	incl   -0xc(%ebp)
f0130c4a:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0130c4f:	0f b6 c0             	movzbl %al,%eax
f0130c52:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130c55:	7f b4                	jg     f0130c0b <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f0130c57:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f0130c5c:	85 c0                	test   %eax,%eax
f0130c5e:	0f 84 86 00 00 00    	je     f0130cea <schenv+0xff>
	{
		if (__ne != NULL)
f0130c64:	a1 b4 b8 85 f0       	mov    0xf085b8b4,%eax
f0130c69:	85 c0                	test   %eax,%eax
f0130c6b:	74 4b                	je     f0130cb8 <schenv+0xcd>
		{
			if ((__pl + 1) < __nl)
f0130c6d:	a0 5c b8 85 f0       	mov    0xf085b85c,%al
f0130c72:	0f b6 c0             	movzbl %al,%eax
f0130c75:	8d 50 01             	lea    0x1(%eax),%edx
f0130c78:	a0 24 b9 85 f0       	mov    0xf085b924,%al
f0130c7d:	0f b6 c0             	movzbl %al,%eax
f0130c80:	39 c2                	cmp    %eax,%edx
f0130c82:	7d 66                	jge    f0130cea <schenv+0xff>
			{
				__ne = curenv;
f0130c84:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f0130c89:	a3 b4 b8 85 f0       	mov    %eax,0xf085b8b4
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f0130c8e:	a0 5c b8 85 f0       	mov    0xf085b85c,%al
f0130c93:	0f b6 c0             	movzbl %al,%eax
f0130c96:	8a 15 fc b8 85 f0    	mov    0xf085b8fc,%dl
f0130c9c:	0f b6 d2             	movzbl %dl,%edx
f0130c9f:	4a                   	dec    %edx
f0130ca0:	39 d0                	cmp    %edx,%eax
f0130ca2:	7d 08                	jge    f0130cac <schenv+0xc1>
f0130ca4:	a0 5c b8 85 f0       	mov    0xf085b85c,%al
f0130ca9:	40                   	inc    %eax
f0130caa:	eb 05                	jmp    f0130cb1 <schenv+0xc6>
f0130cac:	a0 5c b8 85 f0       	mov    0xf085b85c,%al
f0130cb1:	a2 24 b9 85 f0       	mov    %al,0xf085b924
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f0130cb6:	eb 32                	jmp    f0130cea <schenv+0xff>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f0130cb8:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f0130cbd:	a3 b4 b8 85 f0       	mov    %eax,0xf085b8b4
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f0130cc2:	a0 5c b8 85 f0       	mov    0xf085b85c,%al
f0130cc7:	0f b6 c0             	movzbl %al,%eax
f0130cca:	8a 15 fc b8 85 f0    	mov    0xf085b8fc,%dl
f0130cd0:	0f b6 d2             	movzbl %dl,%edx
f0130cd3:	4a                   	dec    %edx
f0130cd4:	39 d0                	cmp    %edx,%eax
f0130cd6:	7d 08                	jge    f0130ce0 <schenv+0xf5>
f0130cd8:	a0 5c b8 85 f0       	mov    0xf085b85c,%al
f0130cdd:	40                   	inc    %eax
f0130cde:	eb 05                	jmp    f0130ce5 <schenv+0xfa>
f0130ce0:	a0 5c b8 85 f0       	mov    0xf085b85c,%al
f0130ce5:	a2 24 b9 85 f0       	mov    %al,0xf085b924
		}
	}
}
f0130cea:	90                   	nop
f0130ceb:	c9                   	leave  
f0130cec:	c3                   	ret    

f0130ced <chksch>:

void chksch(uint8 onoff)
{
f0130ced:	55                   	push   %ebp
f0130cee:	89 e5                	mov    %esp,%ebp
f0130cf0:	83 ec 04             	sub    $0x4,%esp
f0130cf3:	8b 45 08             	mov    0x8(%ebp),%eax
f0130cf6:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f0130cf9:	c7 05 10 b9 85 f0 00 	movl   $0x0,0xf085b910
f0130d00:	00 00 00 
	__ne = NULL;
f0130d03:	c7 05 b4 b8 85 f0 00 	movl   $0x0,0xf085b8b4
f0130d0a:	00 00 00 
	__pl = 0 ;
f0130d0d:	c6 05 5c b8 85 f0 00 	movb   $0x0,0xf085b85c
	__nl = 0 ;
f0130d14:	c6 05 24 b9 85 f0 00 	movb   $0x0,0xf085b924
	__chkstatus = onoff;
f0130d1b:	8a 45 fc             	mov    -0x4(%ebp),%al
f0130d1e:	a2 b0 b8 85 f0       	mov    %al,0xf085b8b0
}
f0130d23:	90                   	nop
f0130d24:	c9                   	leave  
f0130d25:	c3                   	ret    

f0130d26 <chk1>:
void chk1()
{
f0130d26:	55                   	push   %ebp
f0130d27:	89 e5                	mov    %esp,%ebp
f0130d29:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f0130d2c:	a0 b0 b8 85 f0       	mov    0xf085b8b0,%al
f0130d31:	84 c0                	test   %al,%al
f0130d33:	74 2b                	je     f0130d60 <chk1+0x3a>
		return ;
	__pe = curenv;
f0130d35:	a1 74 af 85 f0       	mov    0xf085af74,%eax
f0130d3a:	a3 10 b9 85 f0       	mov    %eax,0xf085b910
	__pl = __nl ;
f0130d3f:	a0 24 b9 85 f0       	mov    0xf085b924,%al
f0130d44:	a2 5c b8 85 f0       	mov    %al,0xf085b85c
	if (__pe == NULL)
f0130d49:	a1 10 b9 85 f0       	mov    0xf085b910,%eax
f0130d4e:	85 c0                	test   %eax,%eax
f0130d50:	75 07                	jne    f0130d59 <chk1+0x33>
	{
		__pl = 0;
f0130d52:	c6 05 5c b8 85 f0 00 	movb   $0x0,0xf085b85c
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f0130d59:	e8 8d fe ff ff       	call   f0130beb <schenv>
f0130d5e:	eb 01                	jmp    f0130d61 <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f0130d60:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f0130d61:	c9                   	leave  
f0130d62:	c3                   	ret    

f0130d63 <chk2>:
void chk2(struct Env* __se)
{
f0130d63:	55                   	push   %ebp
f0130d64:	89 e5                	mov    %esp,%ebp
f0130d66:	53                   	push   %ebx
f0130d67:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f0130d6a:	a0 b0 b8 85 f0       	mov    0xf085b8b0,%al
f0130d6f:	84 c0                	test   %al,%al
f0130d71:	0f 84 43 02 00 00    	je     f0130fba <chk2+0x257>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f0130d77:	a1 b4 b8 85 f0       	mov    0xf085b8b4,%eax
f0130d7c:	39 45 08             	cmp    %eax,0x8(%ebp)
f0130d7f:	74 19                	je     f0130d9a <chk2+0x37>
f0130d81:	68 05 d0 13 f0       	push   $0xf013d005
f0130d86:	68 12 d0 13 f0       	push   $0xf013d012
f0130d8b:	68 c0 00 00 00       	push   $0xc0
f0130d90:	68 27 d0 13 f0       	push   $0xf013d027
f0130d95:	e8 21 f5 fc ff       	call   f01002bb <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f0130d9a:	a1 b4 b8 85 f0       	mov    0xf085b8b4,%eax
f0130d9f:	85 c0                	test   %eax,%eax
f0130da1:	0f 84 25 01 00 00    	je     f0130ecc <chk2+0x169>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f0130da7:	8b 15 a8 b8 85 f0    	mov    0xf085b8a8,%edx
f0130dad:	a0 24 b9 85 f0       	mov    0xf085b924,%al
f0130db2:	0f b6 c0             	movzbl %al,%eax
f0130db5:	01 d0                	add    %edx,%eax
f0130db7:	8a 00                	mov    (%eax),%al
f0130db9:	0f b6 d8             	movzbl %al,%ebx
f0130dbc:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0130dc1:	99                   	cltd   
f0130dc2:	f7 fb                	idiv   %ebx
f0130dc4:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0130dca:	8b 15 a8 b8 85 f0    	mov    0xf085b8a8,%edx
f0130dd0:	a0 24 b9 85 f0       	mov    0xf085b924,%al
f0130dd5:	0f b6 c0             	movzbl %al,%eax
f0130dd8:	01 d0                	add    %edx,%eax
f0130dda:	8a 00                	mov    (%eax),%al
f0130ddc:	0f b6 d8             	movzbl %al,%ebx
f0130ddf:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0130de4:	99                   	cltd   
f0130de5:	f7 fb                	idiv   %ebx
f0130de7:	89 c3                	mov    %eax,%ebx
f0130de9:	89 c8                	mov    %ecx,%eax
f0130deb:	99                   	cltd   
f0130dec:	f7 fb                	idiv   %ebx
f0130dee:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f0130df2:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130df6:	83 e0 01             	and    $0x1,%eax
f0130df9:	66 85 c0             	test   %ax,%ax
f0130dfc:	74 07                	je     f0130e05 <chk2+0xa2>
f0130dfe:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130e02:	40                   	inc    %eax
f0130e03:	eb 04                	jmp    f0130e09 <chk2+0xa6>
f0130e05:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130e09:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f0130e0d:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f0130e11:	89 d0                	mov    %edx,%eax
f0130e13:	c1 e0 02             	shl    $0x2,%eax
f0130e16:	01 d0                	add    %edx,%eax
f0130e18:	01 c0                	add    %eax,%eax
f0130e1a:	01 d0                	add    %edx,%eax
f0130e1c:	c1 e0 02             	shl    $0x2,%eax
f0130e1f:	01 d0                	add    %edx,%eax
f0130e21:	01 c0                	add    %eax,%eax
f0130e23:	89 c1                	mov    %eax,%ecx
f0130e25:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130e2a:	f7 e9                	imul   %ecx
f0130e2c:	c1 fa 05             	sar    $0x5,%edx
f0130e2f:	89 c8                	mov    %ecx,%eax
f0130e31:	c1 f8 1f             	sar    $0x1f,%eax
f0130e34:	29 c2                	sub    %eax,%edx
f0130e36:	89 d0                	mov    %edx,%eax
f0130e38:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f0130e3c:	e8 30 35 fd ff       	call   f0104371 <kclock_read_cnt0>
f0130e41:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f0130e45:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f0130e49:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f0130e4d:	76 0a                	jbe    f0130e59 <chk2+0xf6>
f0130e4f:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f0130e53:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0130e57:	76 19                	jbe    f0130e72 <chk2+0x10f>
f0130e59:	68 40 d0 13 f0       	push   $0xf013d040
f0130e5e:	68 12 d0 13 f0       	push   $0xf013d012
f0130e63:	68 ca 00 00 00       	push   $0xca
f0130e68:	68 27 d0 13 f0       	push   $0xf013d027
f0130e6d:	e8 49 f4 fc ff       	call   f01002bb <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f0130e72:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130e79:	eb 44                	jmp    f0130ebf <chk2+0x15c>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f0130e7b:	a1 b4 b8 85 f0       	mov    0xf085b8b4,%eax
f0130e80:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130e83:	89 c2                	mov    %eax,%edx
f0130e85:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0130e8a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0130e8d:	c1 e1 04             	shl    $0x4,%ecx
f0130e90:	01 c8                	add    %ecx,%eax
f0130e92:	83 ec 08             	sub    $0x8,%esp
f0130e95:	52                   	push   %edx
f0130e96:	50                   	push   %eax
f0130e97:	e8 1e 38 fd ff       	call   f01046ba <find_env_in_queue>
f0130e9c:	83 c4 10             	add    $0x10,%esp
f0130e9f:	85 c0                	test   %eax,%eax
f0130ea1:	74 19                	je     f0130ebc <chk2+0x159>
f0130ea3:	68 64 d0 13 f0       	push   $0xf013d064
f0130ea8:	68 12 d0 13 f0       	push   $0xf013d012
f0130ead:	68 ce 00 00 00       	push   $0xce
f0130eb2:	68 27 d0 13 f0       	push   $0xf013d027
f0130eb7:	e8 ff f3 fc ff       	call   f01002bb <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f0130ebc:	ff 45 f4             	incl   -0xc(%ebp)
f0130ebf:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0130ec4:	0f b6 c0             	movzbl %al,%eax
f0130ec7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130eca:	7f af                	jg     f0130e7b <chk2+0x118>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f0130ecc:	a1 10 b9 85 f0       	mov    0xf085b910,%eax
f0130ed1:	85 c0                	test   %eax,%eax
f0130ed3:	0f 84 e2 00 00 00    	je     f0130fbb <chk2+0x258>
f0130ed9:	8b 15 10 b9 85 f0    	mov    0xf085b910,%edx
f0130edf:	a1 b4 b8 85 f0       	mov    0xf085b8b4,%eax
f0130ee4:	39 c2                	cmp    %eax,%edx
f0130ee6:	0f 84 cf 00 00 00    	je     f0130fbb <chk2+0x258>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f0130eec:	a0 5c b8 85 f0       	mov    0xf085b85c,%al
f0130ef1:	0f b6 c0             	movzbl %al,%eax
f0130ef4:	8a 15 fc b8 85 f0    	mov    0xf085b8fc,%dl
f0130efa:	0f b6 d2             	movzbl %dl,%edx
f0130efd:	4a                   	dec    %edx
f0130efe:	39 d0                	cmp    %edx,%eax
f0130f00:	74 08                	je     f0130f0a <chk2+0x1a7>
f0130f02:	a0 5c b8 85 f0       	mov    0xf085b85c,%al
f0130f07:	40                   	inc    %eax
f0130f08:	eb 05                	jmp    f0130f0f <chk2+0x1ac>
f0130f0a:	a0 5c b8 85 f0       	mov    0xf085b85c,%al
f0130f0f:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f0130f12:	a1 10 b9 85 f0       	mov    0xf085b910,%eax
f0130f17:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130f1a:	89 c2                	mov    %eax,%edx
f0130f1c:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0130f21:	0f b6 4d e9          	movzbl -0x17(%ebp),%ecx
f0130f25:	c1 e1 04             	shl    $0x4,%ecx
f0130f28:	01 c8                	add    %ecx,%eax
f0130f2a:	83 ec 08             	sub    $0x8,%esp
f0130f2d:	52                   	push   %edx
f0130f2e:	50                   	push   %eax
f0130f2f:	e8 86 37 fd ff       	call   f01046ba <find_env_in_queue>
f0130f34:	83 c4 10             	add    $0x10,%esp
f0130f37:	85 c0                	test   %eax,%eax
f0130f39:	75 19                	jne    f0130f54 <chk2+0x1f1>
f0130f3b:	68 a4 d0 13 f0       	push   $0xf013d0a4
f0130f40:	68 12 d0 13 f0       	push   $0xf013d012
f0130f45:	68 d4 00 00 00       	push   $0xd4
f0130f4a:	68 27 d0 13 f0       	push   $0xf013d027
f0130f4f:	e8 67 f3 fc ff       	call   f01002bb <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f0130f54:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0130f5b:	eb 4e                	jmp    f0130fab <chk2+0x248>
		{
			if (i == __tl) continue;
f0130f5d:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f0130f61:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130f64:	74 41                	je     f0130fa7 <chk2+0x244>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f0130f66:	a1 10 b9 85 f0       	mov    0xf085b910,%eax
f0130f6b:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130f6e:	89 c2                	mov    %eax,%edx
f0130f70:	a1 64 b8 85 f0       	mov    0xf085b864,%eax
f0130f75:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0130f78:	c1 e1 04             	shl    $0x4,%ecx
f0130f7b:	01 c8                	add    %ecx,%eax
f0130f7d:	83 ec 08             	sub    $0x8,%esp
f0130f80:	52                   	push   %edx
f0130f81:	50                   	push   %eax
f0130f82:	e8 33 37 fd ff       	call   f01046ba <find_env_in_queue>
f0130f87:	83 c4 10             	add    $0x10,%esp
f0130f8a:	85 c0                	test   %eax,%eax
f0130f8c:	74 1a                	je     f0130fa8 <chk2+0x245>
f0130f8e:	68 e8 d0 13 f0       	push   $0xf013d0e8
f0130f93:	68 12 d0 13 f0       	push   $0xf013d012
f0130f98:	68 d8 00 00 00       	push   $0xd8
f0130f9d:	68 27 d0 13 f0       	push   $0xf013d027
f0130fa2:	e8 14 f3 fc ff       	call   f01002bb <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f0130fa7:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f0130fa8:	ff 45 f0             	incl   -0x10(%ebp)
f0130fab:	a0 fc b8 85 f0       	mov    0xf085b8fc,%al
f0130fb0:	0f b6 c0             	movzbl %al,%eax
f0130fb3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130fb6:	7f a5                	jg     f0130f5d <chk2+0x1fa>
f0130fb8:	eb 01                	jmp    f0130fbb <chk2+0x258>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f0130fba:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f0130fbb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0130fbe:	c9                   	leave  
f0130fbf:	c3                   	ret    

f0130fc0 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f0130fc0:	55                   	push   %ebp
f0130fc1:	89 e5                	mov    %esp,%ebp
f0130fc3:	83 ec 18             	sub    $0x18,%esp

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0130fc6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130fcd:	eb 40                	jmp    f013100f <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f0130fcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130fd2:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0130fd8:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0130fdd:	83 ec 08             	sub    $0x8,%esp
f0130fe0:	52                   	push   %edx
f0130fe1:	50                   	push   %eax
f0130fe2:	e8 9b 01 00 00       	call   f0131182 <check_va2pa>
f0130fe7:	83 c4 10             	add    $0x10,%esp
f0130fea:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130fed:	74 19                	je     f0131008 <check_boot_pgdir+0x48>
f0130fef:	68 28 d1 13 f0       	push   $0xf013d128
f0130ff4:	68 12 d0 13 f0       	push   $0xf013d012
f0130ff9:	68 fa 00 00 00       	push   $0xfa
f0130ffe:	68 27 d0 13 f0       	push   $0xf013d027
f0131003:	e8 fd f1 fc ff       	call   f0100205 <_panic>

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0131008:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f013100f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131012:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0131018:	a1 f4 b8 85 f0       	mov    0xf085b8f4,%eax
f013101d:	39 c2                	cmp    %eax,%edx
f013101f:	72 ae                	jb     f0130fcf <check_boot_pgdir+0xf>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0131021:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0131028:	eb 74                	jmp    f013109e <check_boot_pgdir+0xde>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f013102a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013102d:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f0131033:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0131038:	83 ec 08             	sub    $0x8,%esp
f013103b:	52                   	push   %edx
f013103c:	50                   	push   %eax
f013103d:	e8 40 01 00 00       	call   f0131182 <check_va2pa>
f0131042:	83 c4 10             	add    $0x10,%esp
f0131045:	c7 45 f0 00 b0 18 f0 	movl   $0xf018b000,-0x10(%ebp)
f013104c:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f0131053:	77 17                	ja     f013106c <check_boot_pgdir+0xac>
f0131055:	ff 75 f0             	pushl  -0x10(%ebp)
f0131058:	68 60 d1 13 f0       	push   $0xf013d160
f013105d:	68 04 01 00 00       	push   $0x104
f0131062:	68 27 d0 13 f0       	push   $0xf013d027
f0131067:	e8 99 f1 fc ff       	call   f0100205 <_panic>
f013106c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013106f:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f0131075:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131078:	01 ca                	add    %ecx,%edx
f013107a:	39 d0                	cmp    %edx,%eax
f013107c:	74 19                	je     f0131097 <check_boot_pgdir+0xd7>
f013107e:	68 94 d1 13 f0       	push   $0xf013d194
f0131083:	68 12 d0 13 f0       	push   $0xf013d012
f0131088:	68 04 01 00 00       	push   $0x104
f013108d:	68 27 d0 13 f0       	push   $0xf013d027
f0131092:	e8 6e f1 fc ff       	call   f0100205 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0131097:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f013109e:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f01310a5:	76 83                	jbe    f013102a <check_boot_pgdir+0x6a>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f01310a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01310ae:	e9 af 00 00 00       	jmp    f0131162 <check_boot_pgdir+0x1a2>
		switch (i) {
f01310b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01310b6:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f01310bb:	74 11                	je     f01310ce <check_boot_pgdir+0x10e>
f01310bd:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f01310c2:	72 36                	jb     f01310fa <check_boot_pgdir+0x13a>
f01310c4:	2d bd 03 00 00       	sub    $0x3bd,%eax
f01310c9:	83 f8 02             	cmp    $0x2,%eax
f01310cc:	77 2c                	ja     f01310fa <check_boot_pgdir+0x13a>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f01310ce:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f01310d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01310d6:	c1 e2 02             	shl    $0x2,%edx
f01310d9:	01 d0                	add    %edx,%eax
f01310db:	8b 00                	mov    (%eax),%eax
f01310dd:	85 c0                	test   %eax,%eax
f01310df:	75 7a                	jne    f013115b <check_boot_pgdir+0x19b>
f01310e1:	68 16 d2 13 f0       	push   $0xf013d216
f01310e6:	68 12 d0 13 f0       	push   $0xf013d012
f01310eb:	68 0f 01 00 00       	push   $0x10f
f01310f0:	68 27 d0 13 f0       	push   $0xf013d027
f01310f5:	e8 0b f1 fc ff       	call   f0100205 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f01310fa:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f0131101:	76 2c                	jbe    f013112f <check_boot_pgdir+0x16f>
				assert(ptr_page_directory[i]);
f0131103:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0131108:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013110b:	c1 e2 02             	shl    $0x2,%edx
f013110e:	01 d0                	add    %edx,%eax
f0131110:	8b 00                	mov    (%eax),%eax
f0131112:	85 c0                	test   %eax,%eax
f0131114:	75 48                	jne    f013115e <check_boot_pgdir+0x19e>
f0131116:	68 16 d2 13 f0       	push   $0xf013d216
f013111b:	68 12 d0 13 f0       	push   $0xf013d012
f0131120:	68 13 01 00 00       	push   $0x113
f0131125:	68 27 d0 13 f0       	push   $0xf013d027
f013112a:	e8 d6 f0 fc ff       	call   f0100205 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f013112f:	a1 f8 b8 85 f0       	mov    0xf085b8f8,%eax
f0131134:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131137:	c1 e2 02             	shl    $0x2,%edx
f013113a:	01 d0                	add    %edx,%eax
f013113c:	8b 00                	mov    (%eax),%eax
f013113e:	85 c0                	test   %eax,%eax
f0131140:	74 1c                	je     f013115e <check_boot_pgdir+0x19e>
f0131142:	68 2c d2 13 f0       	push   $0xf013d22c
f0131147:	68 12 d0 13 f0       	push   $0xf013d012
f013114c:	68 15 01 00 00       	push   $0x115
f0131151:	68 27 d0 13 f0       	push   $0xf013d027
f0131156:	e8 aa f0 fc ff       	call   f0100205 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f013115b:	90                   	nop
f013115c:	eb 01                	jmp    f013115f <check_boot_pgdir+0x19f>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f013115e:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f013115f:	ff 45 f4             	incl   -0xc(%ebp)
f0131162:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0131169:	0f 86 44 ff ff ff    	jbe    f01310b3 <check_boot_pgdir+0xf3>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f013116f:	83 ec 0c             	sub    $0xc,%esp
f0131172:	68 48 d2 13 f0       	push   $0xf013d248
f0131177:	e8 92 fb fc ff       	call   f0100d0e <cprintf>
f013117c:	83 c4 10             	add    $0x10,%esp
}
f013117f:	90                   	nop
f0131180:	c9                   	leave  
f0131181:	c3                   	ret    

f0131182 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f0131182:	55                   	push   %ebp
f0131183:	89 e5                	mov    %esp,%ebp
f0131185:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f0131188:	8b 45 0c             	mov    0xc(%ebp),%eax
f013118b:	c1 e8 16             	shr    $0x16,%eax
f013118e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131195:	8b 45 08             	mov    0x8(%ebp),%eax
f0131198:	01 d0                	add    %edx,%eax
f013119a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f013119d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01311a0:	8b 00                	mov    (%eax),%eax
f01311a2:	83 e0 01             	and    $0x1,%eax
f01311a5:	85 c0                	test   %eax,%eax
f01311a7:	75 0a                	jne    f01311b3 <check_va2pa+0x31>
		return ~0;
f01311a9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01311ae:	e9 87 00 00 00       	jmp    f013123a <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f01311b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01311b6:	8b 00                	mov    (%eax),%eax
f01311b8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01311bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01311c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01311c3:	c1 e8 0c             	shr    $0xc,%eax
f01311c6:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01311c9:	a1 8c b8 85 f0       	mov    0xf085b88c,%eax
f01311ce:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01311d1:	72 17                	jb     f01311ea <check_va2pa+0x68>
f01311d3:	ff 75 f0             	pushl  -0x10(%ebp)
f01311d6:	68 68 d2 13 f0       	push   $0xf013d268
f01311db:	68 2b 01 00 00       	push   $0x12b
f01311e0:	68 27 d0 13 f0       	push   $0xf013d027
f01311e5:	e8 1b f0 fc ff       	call   f0100205 <_panic>
f01311ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01311ed:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01311f2:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f01311f5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01311f8:	c1 e8 0c             	shr    $0xc,%eax
f01311fb:	25 ff 03 00 00       	and    $0x3ff,%eax
f0131200:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131207:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013120a:	01 d0                	add    %edx,%eax
f013120c:	8b 00                	mov    (%eax),%eax
f013120e:	83 e0 01             	and    $0x1,%eax
f0131211:	85 c0                	test   %eax,%eax
f0131213:	75 07                	jne    f013121c <check_va2pa+0x9a>
		return ~0;
f0131215:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f013121a:	eb 1e                	jmp    f013123a <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f013121c:	8b 45 0c             	mov    0xc(%ebp),%eax
f013121f:	c1 e8 0c             	shr    $0xc,%eax
f0131222:	25 ff 03 00 00       	and    $0x3ff,%eax
f0131227:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f013122e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131231:	01 d0                	add    %edx,%eax
f0131233:	8b 00                	mov    (%eax),%eax
f0131235:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f013123a:	c9                   	leave  
f013123b:	c3                   	ret    

f013123c <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f013123c:	55                   	push   %ebp
f013123d:	89 e5                	mov    %esp,%ebp
f013123f:	53                   	push   %ebx
f0131240:	83 ec 14             	sub    $0x14,%esp
f0131243:	8b 45 10             	mov    0x10(%ebp),%eax
f0131246:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0131249:	8b 45 14             	mov    0x14(%ebp),%eax
f013124c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f013124f:	8b 45 18             	mov    0x18(%ebp),%eax
f0131252:	ba 00 00 00 00       	mov    $0x0,%edx
f0131257:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f013125a:	77 55                	ja     f01312b1 <printnum+0x75>
f013125c:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f013125f:	72 05                	jb     f0131266 <printnum+0x2a>
f0131261:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131264:	77 4b                	ja     f01312b1 <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f0131266:	8b 45 1c             	mov    0x1c(%ebp),%eax
f0131269:	8d 58 ff             	lea    -0x1(%eax),%ebx
f013126c:	8b 45 18             	mov    0x18(%ebp),%eax
f013126f:	ba 00 00 00 00       	mov    $0x0,%edx
f0131274:	52                   	push   %edx
f0131275:	50                   	push   %eax
f0131276:	ff 75 f4             	pushl  -0xc(%ebp)
f0131279:	ff 75 f0             	pushl  -0x10(%ebp)
f013127c:	e8 cf 21 00 00       	call   f0133450 <__udivdi3>
f0131281:	83 c4 10             	add    $0x10,%esp
f0131284:	83 ec 04             	sub    $0x4,%esp
f0131287:	ff 75 20             	pushl  0x20(%ebp)
f013128a:	53                   	push   %ebx
f013128b:	ff 75 18             	pushl  0x18(%ebp)
f013128e:	52                   	push   %edx
f013128f:	50                   	push   %eax
f0131290:	ff 75 0c             	pushl  0xc(%ebp)
f0131293:	ff 75 08             	pushl  0x8(%ebp)
f0131296:	e8 a1 ff ff ff       	call   f013123c <printnum>
f013129b:	83 c4 20             	add    $0x20,%esp
f013129e:	eb 1a                	jmp    f01312ba <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f01312a0:	83 ec 08             	sub    $0x8,%esp
f01312a3:	ff 75 0c             	pushl  0xc(%ebp)
f01312a6:	ff 75 20             	pushl  0x20(%ebp)
f01312a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01312ac:	ff d0                	call   *%eax
f01312ae:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f01312b1:	ff 4d 1c             	decl   0x1c(%ebp)
f01312b4:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f01312b8:	7f e6                	jg     f01312a0 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f01312ba:	8b 4d 18             	mov    0x18(%ebp),%ecx
f01312bd:	bb 00 00 00 00       	mov    $0x0,%ebx
f01312c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01312c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01312c8:	53                   	push   %ebx
f01312c9:	51                   	push   %ecx
f01312ca:	52                   	push   %edx
f01312cb:	50                   	push   %eax
f01312cc:	e8 8f 22 00 00       	call   f0133560 <__umoddi3>
f01312d1:	83 c4 10             	add    $0x10,%esp
f01312d4:	05 b4 d4 13 f0       	add    $0xf013d4b4,%eax
f01312d9:	8a 00                	mov    (%eax),%al
f01312db:	0f be c0             	movsbl %al,%eax
f01312de:	83 ec 08             	sub    $0x8,%esp
f01312e1:	ff 75 0c             	pushl  0xc(%ebp)
f01312e4:	50                   	push   %eax
f01312e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01312e8:	ff d0                	call   *%eax
f01312ea:	83 c4 10             	add    $0x10,%esp
}
f01312ed:	90                   	nop
f01312ee:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01312f1:	c9                   	leave  
f01312f2:	c3                   	ret    

f01312f3 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f01312f3:	55                   	push   %ebp
f01312f4:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f01312f6:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f01312fa:	7e 1c                	jle    f0131318 <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f01312fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01312ff:	8b 00                	mov    (%eax),%eax
f0131301:	8d 50 08             	lea    0x8(%eax),%edx
f0131304:	8b 45 08             	mov    0x8(%ebp),%eax
f0131307:	89 10                	mov    %edx,(%eax)
f0131309:	8b 45 08             	mov    0x8(%ebp),%eax
f013130c:	8b 00                	mov    (%eax),%eax
f013130e:	83 e8 08             	sub    $0x8,%eax
f0131311:	8b 50 04             	mov    0x4(%eax),%edx
f0131314:	8b 00                	mov    (%eax),%eax
f0131316:	eb 40                	jmp    f0131358 <getuint+0x65>
	else if (lflag)
f0131318:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f013131c:	74 1e                	je     f013133c <getuint+0x49>
		return va_arg(*ap, unsigned long);
f013131e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131321:	8b 00                	mov    (%eax),%eax
f0131323:	8d 50 04             	lea    0x4(%eax),%edx
f0131326:	8b 45 08             	mov    0x8(%ebp),%eax
f0131329:	89 10                	mov    %edx,(%eax)
f013132b:	8b 45 08             	mov    0x8(%ebp),%eax
f013132e:	8b 00                	mov    (%eax),%eax
f0131330:	83 e8 04             	sub    $0x4,%eax
f0131333:	8b 00                	mov    (%eax),%eax
f0131335:	ba 00 00 00 00       	mov    $0x0,%edx
f013133a:	eb 1c                	jmp    f0131358 <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f013133c:	8b 45 08             	mov    0x8(%ebp),%eax
f013133f:	8b 00                	mov    (%eax),%eax
f0131341:	8d 50 04             	lea    0x4(%eax),%edx
f0131344:	8b 45 08             	mov    0x8(%ebp),%eax
f0131347:	89 10                	mov    %edx,(%eax)
f0131349:	8b 45 08             	mov    0x8(%ebp),%eax
f013134c:	8b 00                	mov    (%eax),%eax
f013134e:	83 e8 04             	sub    $0x4,%eax
f0131351:	8b 00                	mov    (%eax),%eax
f0131353:	ba 00 00 00 00       	mov    $0x0,%edx
}
f0131358:	5d                   	pop    %ebp
f0131359:	c3                   	ret    

f013135a <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f013135a:	55                   	push   %ebp
f013135b:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f013135d:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0131361:	7e 1c                	jle    f013137f <getint+0x25>
		return va_arg(*ap, long long);
f0131363:	8b 45 08             	mov    0x8(%ebp),%eax
f0131366:	8b 00                	mov    (%eax),%eax
f0131368:	8d 50 08             	lea    0x8(%eax),%edx
f013136b:	8b 45 08             	mov    0x8(%ebp),%eax
f013136e:	89 10                	mov    %edx,(%eax)
f0131370:	8b 45 08             	mov    0x8(%ebp),%eax
f0131373:	8b 00                	mov    (%eax),%eax
f0131375:	83 e8 08             	sub    $0x8,%eax
f0131378:	8b 50 04             	mov    0x4(%eax),%edx
f013137b:	8b 00                	mov    (%eax),%eax
f013137d:	eb 38                	jmp    f01313b7 <getint+0x5d>
	else if (lflag)
f013137f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131383:	74 1a                	je     f013139f <getint+0x45>
		return va_arg(*ap, long);
f0131385:	8b 45 08             	mov    0x8(%ebp),%eax
f0131388:	8b 00                	mov    (%eax),%eax
f013138a:	8d 50 04             	lea    0x4(%eax),%edx
f013138d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131390:	89 10                	mov    %edx,(%eax)
f0131392:	8b 45 08             	mov    0x8(%ebp),%eax
f0131395:	8b 00                	mov    (%eax),%eax
f0131397:	83 e8 04             	sub    $0x4,%eax
f013139a:	8b 00                	mov    (%eax),%eax
f013139c:	99                   	cltd   
f013139d:	eb 18                	jmp    f01313b7 <getint+0x5d>
	else
		return va_arg(*ap, int);
f013139f:	8b 45 08             	mov    0x8(%ebp),%eax
f01313a2:	8b 00                	mov    (%eax),%eax
f01313a4:	8d 50 04             	lea    0x4(%eax),%edx
f01313a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01313aa:	89 10                	mov    %edx,(%eax)
f01313ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01313af:	8b 00                	mov    (%eax),%eax
f01313b1:	83 e8 04             	sub    $0x4,%eax
f01313b4:	8b 00                	mov    (%eax),%eax
f01313b6:	99                   	cltd   
}
f01313b7:	5d                   	pop    %ebp
f01313b8:	c3                   	ret    

f01313b9 <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f01313b9:	55                   	push   %ebp
f01313ba:	89 e5                	mov    %esp,%ebp
f01313bc:	56                   	push   %esi
f01313bd:	53                   	push   %ebx
f01313be:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f01313c1:	eb 17                	jmp    f01313da <vprintfmt+0x21>
			if (ch == '\0')
f01313c3:	85 db                	test   %ebx,%ebx
f01313c5:	0f 84 af 03 00 00    	je     f013177a <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f01313cb:	83 ec 08             	sub    $0x8,%esp
f01313ce:	ff 75 0c             	pushl  0xc(%ebp)
f01313d1:	53                   	push   %ebx
f01313d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01313d5:	ff d0                	call   *%eax
f01313d7:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f01313da:	8b 45 10             	mov    0x10(%ebp),%eax
f01313dd:	8d 50 01             	lea    0x1(%eax),%edx
f01313e0:	89 55 10             	mov    %edx,0x10(%ebp)
f01313e3:	8a 00                	mov    (%eax),%al
f01313e5:	0f b6 d8             	movzbl %al,%ebx
f01313e8:	83 fb 25             	cmp    $0x25,%ebx
f01313eb:	75 d6                	jne    f01313c3 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f01313ed:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f01313f1:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f01313f8:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f01313ff:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f0131406:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f013140d:	8b 45 10             	mov    0x10(%ebp),%eax
f0131410:	8d 50 01             	lea    0x1(%eax),%edx
f0131413:	89 55 10             	mov    %edx,0x10(%ebp)
f0131416:	8a 00                	mov    (%eax),%al
f0131418:	0f b6 d8             	movzbl %al,%ebx
f013141b:	8d 43 dd             	lea    -0x23(%ebx),%eax
f013141e:	83 f8 55             	cmp    $0x55,%eax
f0131421:	0f 87 2b 03 00 00    	ja     f0131752 <vprintfmt+0x399>
f0131427:	8b 04 85 d8 d4 13 f0 	mov    -0xfec2b28(,%eax,4),%eax
f013142e:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f0131430:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f0131434:	eb d7                	jmp    f013140d <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f0131436:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f013143a:	eb d1                	jmp    f013140d <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f013143c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f0131443:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0131446:	89 d0                	mov    %edx,%eax
f0131448:	c1 e0 02             	shl    $0x2,%eax
f013144b:	01 d0                	add    %edx,%eax
f013144d:	01 c0                	add    %eax,%eax
f013144f:	01 d8                	add    %ebx,%eax
f0131451:	83 e8 30             	sub    $0x30,%eax
f0131454:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f0131457:	8b 45 10             	mov    0x10(%ebp),%eax
f013145a:	8a 00                	mov    (%eax),%al
f013145c:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f013145f:	83 fb 2f             	cmp    $0x2f,%ebx
f0131462:	7e 3e                	jle    f01314a2 <vprintfmt+0xe9>
f0131464:	83 fb 39             	cmp    $0x39,%ebx
f0131467:	7f 39                	jg     f01314a2 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0131469:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f013146c:	eb d5                	jmp    f0131443 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f013146e:	8b 45 14             	mov    0x14(%ebp),%eax
f0131471:	83 c0 04             	add    $0x4,%eax
f0131474:	89 45 14             	mov    %eax,0x14(%ebp)
f0131477:	8b 45 14             	mov    0x14(%ebp),%eax
f013147a:	83 e8 04             	sub    $0x4,%eax
f013147d:	8b 00                	mov    (%eax),%eax
f013147f:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f0131482:	eb 1f                	jmp    f01314a3 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f0131484:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131488:	79 83                	jns    f013140d <vprintfmt+0x54>
				width = 0;
f013148a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f0131491:	e9 77 ff ff ff       	jmp    f013140d <vprintfmt+0x54>

		case '#':
			altflag = 1;
f0131496:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f013149d:	e9 6b ff ff ff       	jmp    f013140d <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f01314a2:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f01314a3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01314a7:	0f 89 60 ff ff ff    	jns    f013140d <vprintfmt+0x54>
				width = precision, precision = -1;
f01314ad:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01314b0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01314b3:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f01314ba:	e9 4e ff ff ff       	jmp    f013140d <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f01314bf:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f01314c2:	e9 46 ff ff ff       	jmp    f013140d <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f01314c7:	8b 45 14             	mov    0x14(%ebp),%eax
f01314ca:	83 c0 04             	add    $0x4,%eax
f01314cd:	89 45 14             	mov    %eax,0x14(%ebp)
f01314d0:	8b 45 14             	mov    0x14(%ebp),%eax
f01314d3:	83 e8 04             	sub    $0x4,%eax
f01314d6:	8b 00                	mov    (%eax),%eax
f01314d8:	83 ec 08             	sub    $0x8,%esp
f01314db:	ff 75 0c             	pushl  0xc(%ebp)
f01314de:	50                   	push   %eax
f01314df:	8b 45 08             	mov    0x8(%ebp),%eax
f01314e2:	ff d0                	call   *%eax
f01314e4:	83 c4 10             	add    $0x10,%esp
			break;
f01314e7:	e9 89 02 00 00       	jmp    f0131775 <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f01314ec:	8b 45 14             	mov    0x14(%ebp),%eax
f01314ef:	83 c0 04             	add    $0x4,%eax
f01314f2:	89 45 14             	mov    %eax,0x14(%ebp)
f01314f5:	8b 45 14             	mov    0x14(%ebp),%eax
f01314f8:	83 e8 04             	sub    $0x4,%eax
f01314fb:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f01314fd:	85 db                	test   %ebx,%ebx
f01314ff:	79 02                	jns    f0131503 <vprintfmt+0x14a>
				err = -err;
f0131501:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f0131503:	83 fb 64             	cmp    $0x64,%ebx
f0131506:	7f 0b                	jg     f0131513 <vprintfmt+0x15a>
f0131508:	8b 34 9d 20 d3 13 f0 	mov    -0xfec2ce0(,%ebx,4),%esi
f013150f:	85 f6                	test   %esi,%esi
f0131511:	75 19                	jne    f013152c <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f0131513:	53                   	push   %ebx
f0131514:	68 c5 d4 13 f0       	push   $0xf013d4c5
f0131519:	ff 75 0c             	pushl  0xc(%ebp)
f013151c:	ff 75 08             	pushl  0x8(%ebp)
f013151f:	e8 5e 02 00 00       	call   f0131782 <printfmt>
f0131524:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f0131527:	e9 49 02 00 00       	jmp    f0131775 <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f013152c:	56                   	push   %esi
f013152d:	68 ce d4 13 f0       	push   $0xf013d4ce
f0131532:	ff 75 0c             	pushl  0xc(%ebp)
f0131535:	ff 75 08             	pushl  0x8(%ebp)
f0131538:	e8 45 02 00 00       	call   f0131782 <printfmt>
f013153d:	83 c4 10             	add    $0x10,%esp
			break;
f0131540:	e9 30 02 00 00       	jmp    f0131775 <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f0131545:	8b 45 14             	mov    0x14(%ebp),%eax
f0131548:	83 c0 04             	add    $0x4,%eax
f013154b:	89 45 14             	mov    %eax,0x14(%ebp)
f013154e:	8b 45 14             	mov    0x14(%ebp),%eax
f0131551:	83 e8 04             	sub    $0x4,%eax
f0131554:	8b 30                	mov    (%eax),%esi
f0131556:	85 f6                	test   %esi,%esi
f0131558:	75 05                	jne    f013155f <vprintfmt+0x1a6>
				p = "(null)";
f013155a:	be d1 d4 13 f0       	mov    $0xf013d4d1,%esi
			if (width > 0 && padc != '-')
f013155f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131563:	7e 6d                	jle    f01315d2 <vprintfmt+0x219>
f0131565:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f0131569:	74 67                	je     f01315d2 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f013156b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013156e:	83 ec 08             	sub    $0x8,%esp
f0131571:	50                   	push   %eax
f0131572:	56                   	push   %esi
f0131573:	e8 12 05 00 00       	call   f0131a8a <strnlen>
f0131578:	83 c4 10             	add    $0x10,%esp
f013157b:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f013157e:	eb 16                	jmp    f0131596 <vprintfmt+0x1dd>
					putch(padc, putdat);
f0131580:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f0131584:	83 ec 08             	sub    $0x8,%esp
f0131587:	ff 75 0c             	pushl  0xc(%ebp)
f013158a:	50                   	push   %eax
f013158b:	8b 45 08             	mov    0x8(%ebp),%eax
f013158e:	ff d0                	call   *%eax
f0131590:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f0131593:	ff 4d e4             	decl   -0x1c(%ebp)
f0131596:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f013159a:	7f e4                	jg     f0131580 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f013159c:	eb 34                	jmp    f01315d2 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f013159e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01315a2:	74 1c                	je     f01315c0 <vprintfmt+0x207>
f01315a4:	83 fb 1f             	cmp    $0x1f,%ebx
f01315a7:	7e 05                	jle    f01315ae <vprintfmt+0x1f5>
f01315a9:	83 fb 7e             	cmp    $0x7e,%ebx
f01315ac:	7e 12                	jle    f01315c0 <vprintfmt+0x207>
					putch('?', putdat);
f01315ae:	83 ec 08             	sub    $0x8,%esp
f01315b1:	ff 75 0c             	pushl  0xc(%ebp)
f01315b4:	6a 3f                	push   $0x3f
f01315b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01315b9:	ff d0                	call   *%eax
f01315bb:	83 c4 10             	add    $0x10,%esp
f01315be:	eb 0f                	jmp    f01315cf <vprintfmt+0x216>
				else
					putch(ch, putdat);
f01315c0:	83 ec 08             	sub    $0x8,%esp
f01315c3:	ff 75 0c             	pushl  0xc(%ebp)
f01315c6:	53                   	push   %ebx
f01315c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01315ca:	ff d0                	call   *%eax
f01315cc:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f01315cf:	ff 4d e4             	decl   -0x1c(%ebp)
f01315d2:	89 f0                	mov    %esi,%eax
f01315d4:	8d 70 01             	lea    0x1(%eax),%esi
f01315d7:	8a 00                	mov    (%eax),%al
f01315d9:	0f be d8             	movsbl %al,%ebx
f01315dc:	85 db                	test   %ebx,%ebx
f01315de:	74 24                	je     f0131604 <vprintfmt+0x24b>
f01315e0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01315e4:	78 b8                	js     f013159e <vprintfmt+0x1e5>
f01315e6:	ff 4d e0             	decl   -0x20(%ebp)
f01315e9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01315ed:	79 af                	jns    f013159e <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f01315ef:	eb 13                	jmp    f0131604 <vprintfmt+0x24b>
				putch(' ', putdat);
f01315f1:	83 ec 08             	sub    $0x8,%esp
f01315f4:	ff 75 0c             	pushl  0xc(%ebp)
f01315f7:	6a 20                	push   $0x20
f01315f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01315fc:	ff d0                	call   *%eax
f01315fe:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0131601:	ff 4d e4             	decl   -0x1c(%ebp)
f0131604:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131608:	7f e7                	jg     f01315f1 <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f013160a:	e9 66 01 00 00       	jmp    f0131775 <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f013160f:	83 ec 08             	sub    $0x8,%esp
f0131612:	ff 75 e8             	pushl  -0x18(%ebp)
f0131615:	8d 45 14             	lea    0x14(%ebp),%eax
f0131618:	50                   	push   %eax
f0131619:	e8 3c fd ff ff       	call   f013135a <getint>
f013161e:	83 c4 10             	add    $0x10,%esp
f0131621:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0131624:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f0131627:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013162a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013162d:	85 d2                	test   %edx,%edx
f013162f:	79 23                	jns    f0131654 <vprintfmt+0x29b>
				putch('-', putdat);
f0131631:	83 ec 08             	sub    $0x8,%esp
f0131634:	ff 75 0c             	pushl  0xc(%ebp)
f0131637:	6a 2d                	push   $0x2d
f0131639:	8b 45 08             	mov    0x8(%ebp),%eax
f013163c:	ff d0                	call   *%eax
f013163e:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f0131641:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131644:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131647:	f7 d8                	neg    %eax
f0131649:	83 d2 00             	adc    $0x0,%edx
f013164c:	f7 da                	neg    %edx
f013164e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0131651:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f0131654:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f013165b:	e9 bc 00 00 00       	jmp    f013171c <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f0131660:	83 ec 08             	sub    $0x8,%esp
f0131663:	ff 75 e8             	pushl  -0x18(%ebp)
f0131666:	8d 45 14             	lea    0x14(%ebp),%eax
f0131669:	50                   	push   %eax
f013166a:	e8 84 fc ff ff       	call   f01312f3 <getuint>
f013166f:	83 c4 10             	add    $0x10,%esp
f0131672:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0131675:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f0131678:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f013167f:	e9 98 00 00 00       	jmp    f013171c <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f0131684:	83 ec 08             	sub    $0x8,%esp
f0131687:	ff 75 0c             	pushl  0xc(%ebp)
f013168a:	6a 58                	push   $0x58
f013168c:	8b 45 08             	mov    0x8(%ebp),%eax
f013168f:	ff d0                	call   *%eax
f0131691:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0131694:	83 ec 08             	sub    $0x8,%esp
f0131697:	ff 75 0c             	pushl  0xc(%ebp)
f013169a:	6a 58                	push   $0x58
f013169c:	8b 45 08             	mov    0x8(%ebp),%eax
f013169f:	ff d0                	call   *%eax
f01316a1:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f01316a4:	83 ec 08             	sub    $0x8,%esp
f01316a7:	ff 75 0c             	pushl  0xc(%ebp)
f01316aa:	6a 58                	push   $0x58
f01316ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01316af:	ff d0                	call   *%eax
f01316b1:	83 c4 10             	add    $0x10,%esp
			break;
f01316b4:	e9 bc 00 00 00       	jmp    f0131775 <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f01316b9:	83 ec 08             	sub    $0x8,%esp
f01316bc:	ff 75 0c             	pushl  0xc(%ebp)
f01316bf:	6a 30                	push   $0x30
f01316c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01316c4:	ff d0                	call   *%eax
f01316c6:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f01316c9:	83 ec 08             	sub    $0x8,%esp
f01316cc:	ff 75 0c             	pushl  0xc(%ebp)
f01316cf:	6a 78                	push   $0x78
f01316d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01316d4:	ff d0                	call   *%eax
f01316d6:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f01316d9:	8b 45 14             	mov    0x14(%ebp),%eax
f01316dc:	83 c0 04             	add    $0x4,%eax
f01316df:	89 45 14             	mov    %eax,0x14(%ebp)
f01316e2:	8b 45 14             	mov    0x14(%ebp),%eax
f01316e5:	83 e8 04             	sub    $0x4,%eax
f01316e8:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f01316ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01316ed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f01316f4:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f01316fb:	eb 1f                	jmp    f013171c <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f01316fd:	83 ec 08             	sub    $0x8,%esp
f0131700:	ff 75 e8             	pushl  -0x18(%ebp)
f0131703:	8d 45 14             	lea    0x14(%ebp),%eax
f0131706:	50                   	push   %eax
f0131707:	e8 e7 fb ff ff       	call   f01312f3 <getuint>
f013170c:	83 c4 10             	add    $0x10,%esp
f013170f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0131712:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f0131715:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f013171c:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f0131720:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131723:	83 ec 04             	sub    $0x4,%esp
f0131726:	52                   	push   %edx
f0131727:	ff 75 e4             	pushl  -0x1c(%ebp)
f013172a:	50                   	push   %eax
f013172b:	ff 75 f4             	pushl  -0xc(%ebp)
f013172e:	ff 75 f0             	pushl  -0x10(%ebp)
f0131731:	ff 75 0c             	pushl  0xc(%ebp)
f0131734:	ff 75 08             	pushl  0x8(%ebp)
f0131737:	e8 00 fb ff ff       	call   f013123c <printnum>
f013173c:	83 c4 20             	add    $0x20,%esp
			break;
f013173f:	eb 34                	jmp    f0131775 <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f0131741:	83 ec 08             	sub    $0x8,%esp
f0131744:	ff 75 0c             	pushl  0xc(%ebp)
f0131747:	53                   	push   %ebx
f0131748:	8b 45 08             	mov    0x8(%ebp),%eax
f013174b:	ff d0                	call   *%eax
f013174d:	83 c4 10             	add    $0x10,%esp
			break;
f0131750:	eb 23                	jmp    f0131775 <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f0131752:	83 ec 08             	sub    $0x8,%esp
f0131755:	ff 75 0c             	pushl  0xc(%ebp)
f0131758:	6a 25                	push   $0x25
f013175a:	8b 45 08             	mov    0x8(%ebp),%eax
f013175d:	ff d0                	call   *%eax
f013175f:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f0131762:	ff 4d 10             	decl   0x10(%ebp)
f0131765:	eb 03                	jmp    f013176a <vprintfmt+0x3b1>
f0131767:	ff 4d 10             	decl   0x10(%ebp)
f013176a:	8b 45 10             	mov    0x10(%ebp),%eax
f013176d:	48                   	dec    %eax
f013176e:	8a 00                	mov    (%eax),%al
f0131770:	3c 25                	cmp    $0x25,%al
f0131772:	75 f3                	jne    f0131767 <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f0131774:	90                   	nop
		}
	}
f0131775:	e9 47 fc ff ff       	jmp    f01313c1 <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f013177a:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f013177b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f013177e:	5b                   	pop    %ebx
f013177f:	5e                   	pop    %esi
f0131780:	5d                   	pop    %ebp
f0131781:	c3                   	ret    

f0131782 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f0131782:	55                   	push   %ebp
f0131783:	89 e5                	mov    %esp,%ebp
f0131785:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0131788:	8d 45 10             	lea    0x10(%ebp),%eax
f013178b:	83 c0 04             	add    $0x4,%eax
f013178e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f0131791:	8b 45 10             	mov    0x10(%ebp),%eax
f0131794:	ff 75 f4             	pushl  -0xc(%ebp)
f0131797:	50                   	push   %eax
f0131798:	ff 75 0c             	pushl  0xc(%ebp)
f013179b:	ff 75 08             	pushl  0x8(%ebp)
f013179e:	e8 16 fc ff ff       	call   f01313b9 <vprintfmt>
f01317a3:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f01317a6:	90                   	nop
f01317a7:	c9                   	leave  
f01317a8:	c3                   	ret    

f01317a9 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f01317a9:	55                   	push   %ebp
f01317aa:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f01317ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f01317af:	8b 40 08             	mov    0x8(%eax),%eax
f01317b2:	8d 50 01             	lea    0x1(%eax),%edx
f01317b5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01317b8:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f01317bb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01317be:	8b 10                	mov    (%eax),%edx
f01317c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01317c3:	8b 40 04             	mov    0x4(%eax),%eax
f01317c6:	39 c2                	cmp    %eax,%edx
f01317c8:	73 12                	jae    f01317dc <sprintputch+0x33>
		*b->buf++ = ch;
f01317ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01317cd:	8b 00                	mov    (%eax),%eax
f01317cf:	8d 48 01             	lea    0x1(%eax),%ecx
f01317d2:	8b 55 0c             	mov    0xc(%ebp),%edx
f01317d5:	89 0a                	mov    %ecx,(%edx)
f01317d7:	8b 55 08             	mov    0x8(%ebp),%edx
f01317da:	88 10                	mov    %dl,(%eax)
}
f01317dc:	90                   	nop
f01317dd:	5d                   	pop    %ebp
f01317de:	c3                   	ret    

f01317df <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f01317df:	55                   	push   %ebp
f01317e0:	89 e5                	mov    %esp,%ebp
f01317e2:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f01317e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01317e8:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01317eb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01317ee:	8d 50 ff             	lea    -0x1(%eax),%edx
f01317f1:	8b 45 08             	mov    0x8(%ebp),%eax
f01317f4:	01 d0                	add    %edx,%eax
f01317f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01317f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f0131800:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131804:	74 06                	je     f013180c <vsnprintf+0x2d>
f0131806:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f013180a:	7f 07                	jg     f0131813 <vsnprintf+0x34>
		return -E_INVAL;
f013180c:	b8 03 00 00 00       	mov    $0x3,%eax
f0131811:	eb 20                	jmp    f0131833 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f0131813:	ff 75 14             	pushl  0x14(%ebp)
f0131816:	ff 75 10             	pushl  0x10(%ebp)
f0131819:	8d 45 ec             	lea    -0x14(%ebp),%eax
f013181c:	50                   	push   %eax
f013181d:	68 a9 17 13 f0       	push   $0xf01317a9
f0131822:	e8 92 fb ff ff       	call   f01313b9 <vprintfmt>
f0131827:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f013182a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013182d:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f0131830:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0131833:	c9                   	leave  
f0131834:	c3                   	ret    

f0131835 <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f0131835:	55                   	push   %ebp
f0131836:	89 e5                	mov    %esp,%ebp
f0131838:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f013183b:	8d 45 10             	lea    0x10(%ebp),%eax
f013183e:	83 c0 04             	add    $0x4,%eax
f0131841:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f0131844:	8b 45 10             	mov    0x10(%ebp),%eax
f0131847:	ff 75 f4             	pushl  -0xc(%ebp)
f013184a:	50                   	push   %eax
f013184b:	ff 75 0c             	pushl  0xc(%ebp)
f013184e:	ff 75 08             	pushl  0x8(%ebp)
f0131851:	e8 89 ff ff ff       	call   f01317df <vsnprintf>
f0131856:	83 c4 10             	add    $0x10,%esp
f0131859:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f013185c:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f013185f:	c9                   	leave  
f0131860:	c3                   	ret    

f0131861 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f0131861:	55                   	push   %ebp
f0131862:	89 e5                	mov    %esp,%ebp
f0131864:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f0131867:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013186b:	74 13                	je     f0131880 <readline+0x1f>
		cprintf("%s", prompt);
f013186d:	83 ec 08             	sub    $0x8,%esp
f0131870:	ff 75 08             	pushl  0x8(%ebp)
f0131873:	68 30 d6 13 f0       	push   $0xf013d630
f0131878:	e8 91 f4 fc ff       	call   f0100d0e <cprintf>
f013187d:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0131880:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0131887:	83 ec 0c             	sub    $0xc,%esp
f013188a:	6a 00                	push   $0x0
f013188c:	e8 2a f4 fc ff       	call   f0100cbb <iscons>
f0131891:	83 c4 10             	add    $0x10,%esp
f0131894:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0131897:	e8 06 f4 fc ff       	call   f0100ca2 <getchar>
f013189c:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f013189f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01318a3:	79 22                	jns    f01318c7 <readline+0x66>
			if (c != -E_EOF)
f01318a5:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f01318a9:	0f 84 ad 00 00 00    	je     f013195c <readline+0xfb>
				cprintf("read error: %e\n", c);
f01318af:	83 ec 08             	sub    $0x8,%esp
f01318b2:	ff 75 ec             	pushl  -0x14(%ebp)
f01318b5:	68 33 d6 13 f0       	push   $0xf013d633
f01318ba:	e8 4f f4 fc ff       	call   f0100d0e <cprintf>
f01318bf:	83 c4 10             	add    $0x10,%esp
			return;
f01318c2:	e9 95 00 00 00       	jmp    f013195c <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f01318c7:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f01318cb:	7e 34                	jle    f0131901 <readline+0xa0>
f01318cd:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f01318d4:	7f 2b                	jg     f0131901 <readline+0xa0>
			if (echoing)
f01318d6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01318da:	74 0e                	je     f01318ea <readline+0x89>
				cputchar(c);
f01318dc:	83 ec 0c             	sub    $0xc,%esp
f01318df:	ff 75 ec             	pushl  -0x14(%ebp)
f01318e2:	e8 a4 f3 fc ff       	call   f0100c8b <cputchar>
f01318e7:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f01318ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318ed:	8d 50 01             	lea    0x1(%eax),%edx
f01318f0:	89 55 f4             	mov    %edx,-0xc(%ebp)
f01318f3:	89 c2                	mov    %eax,%edx
f01318f5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01318f8:	01 d0                	add    %edx,%eax
f01318fa:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01318fd:	88 10                	mov    %dl,(%eax)
f01318ff:	eb 56                	jmp    f0131957 <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f0131901:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0131905:	75 1f                	jne    f0131926 <readline+0xc5>
f0131907:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013190b:	7e 19                	jle    f0131926 <readline+0xc5>
			if (echoing)
f013190d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131911:	74 0e                	je     f0131921 <readline+0xc0>
				cputchar(c);
f0131913:	83 ec 0c             	sub    $0xc,%esp
f0131916:	ff 75 ec             	pushl  -0x14(%ebp)
f0131919:	e8 6d f3 fc ff       	call   f0100c8b <cputchar>
f013191e:	83 c4 10             	add    $0x10,%esp

			i--;
f0131921:	ff 4d f4             	decl   -0xc(%ebp)
f0131924:	eb 31                	jmp    f0131957 <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f0131926:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f013192a:	74 0a                	je     f0131936 <readline+0xd5>
f013192c:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0131930:	0f 85 61 ff ff ff    	jne    f0131897 <readline+0x36>
			if (echoing)
f0131936:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013193a:	74 0e                	je     f013194a <readline+0xe9>
				cputchar(c);
f013193c:	83 ec 0c             	sub    $0xc,%esp
f013193f:	ff 75 ec             	pushl  -0x14(%ebp)
f0131942:	e8 44 f3 fc ff       	call   f0100c8b <cputchar>
f0131947:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f013194a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013194d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131950:	01 d0                	add    %edx,%eax
f0131952:	c6 00 00             	movb   $0x0,(%eax)
			return;
f0131955:	eb 06                	jmp    f013195d <readline+0xfc>
		}
	}
f0131957:	e9 3b ff ff ff       	jmp    f0131897 <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f013195c:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f013195d:	c9                   	leave  
f013195e:	c3                   	ret    

f013195f <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f013195f:	55                   	push   %ebp
f0131960:	89 e5                	mov    %esp,%ebp
f0131962:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f0131965:	e8 70 b8 fd ff       	call   f010d1da <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f013196a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013196e:	74 13                	je     f0131983 <atomic_readline+0x24>
		cprintf("%s", prompt);
f0131970:	83 ec 08             	sub    $0x8,%esp
f0131973:	ff 75 08             	pushl  0x8(%ebp)
f0131976:	68 30 d6 13 f0       	push   $0xf013d630
f013197b:	e8 8e f3 fc ff       	call   f0100d0e <cprintf>
f0131980:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0131983:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f013198a:	83 ec 0c             	sub    $0xc,%esp
f013198d:	6a 00                	push   $0x0
f013198f:	e8 27 f3 fc ff       	call   f0100cbb <iscons>
f0131994:	83 c4 10             	add    $0x10,%esp
f0131997:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f013199a:	e8 03 f3 fc ff       	call   f0100ca2 <getchar>
f013199f:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f01319a2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01319a6:	79 23                	jns    f01319cb <atomic_readline+0x6c>
			if (c != -E_EOF)
f01319a8:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f01319ac:	74 13                	je     f01319c1 <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f01319ae:	83 ec 08             	sub    $0x8,%esp
f01319b1:	ff 75 ec             	pushl  -0x14(%ebp)
f01319b4:	68 33 d6 13 f0       	push   $0xf013d633
f01319b9:	e8 50 f3 fc ff       	call   f0100d0e <cprintf>
f01319be:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f01319c1:	e8 2e b8 fd ff       	call   f010d1f4 <sys_enable_interrupt>
			return;
f01319c6:	e9 9a 00 00 00       	jmp    f0131a65 <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f01319cb:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f01319cf:	7e 34                	jle    f0131a05 <atomic_readline+0xa6>
f01319d1:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f01319d8:	7f 2b                	jg     f0131a05 <atomic_readline+0xa6>
			if (echoing)
f01319da:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01319de:	74 0e                	je     f01319ee <atomic_readline+0x8f>
				cputchar(c);
f01319e0:	83 ec 0c             	sub    $0xc,%esp
f01319e3:	ff 75 ec             	pushl  -0x14(%ebp)
f01319e6:	e8 a0 f2 fc ff       	call   f0100c8b <cputchar>
f01319eb:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f01319ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01319f1:	8d 50 01             	lea    0x1(%eax),%edx
f01319f4:	89 55 f4             	mov    %edx,-0xc(%ebp)
f01319f7:	89 c2                	mov    %eax,%edx
f01319f9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01319fc:	01 d0                	add    %edx,%eax
f01319fe:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131a01:	88 10                	mov    %dl,(%eax)
f0131a03:	eb 5b                	jmp    f0131a60 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f0131a05:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0131a09:	75 1f                	jne    f0131a2a <atomic_readline+0xcb>
f0131a0b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131a0f:	7e 19                	jle    f0131a2a <atomic_readline+0xcb>
			if (echoing)
f0131a11:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131a15:	74 0e                	je     f0131a25 <atomic_readline+0xc6>
				cputchar(c);
f0131a17:	83 ec 0c             	sub    $0xc,%esp
f0131a1a:	ff 75 ec             	pushl  -0x14(%ebp)
f0131a1d:	e8 69 f2 fc ff       	call   f0100c8b <cputchar>
f0131a22:	83 c4 10             	add    $0x10,%esp
			i--;
f0131a25:	ff 4d f4             	decl   -0xc(%ebp)
f0131a28:	eb 36                	jmp    f0131a60 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f0131a2a:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0131a2e:	74 0a                	je     f0131a3a <atomic_readline+0xdb>
f0131a30:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0131a34:	0f 85 60 ff ff ff    	jne    f013199a <atomic_readline+0x3b>
			if (echoing)
f0131a3a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131a3e:	74 0e                	je     f0131a4e <atomic_readline+0xef>
				cputchar(c);
f0131a40:	83 ec 0c             	sub    $0xc,%esp
f0131a43:	ff 75 ec             	pushl  -0x14(%ebp)
f0131a46:	e8 40 f2 fc ff       	call   f0100c8b <cputchar>
f0131a4b:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f0131a4e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131a51:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131a54:	01 d0                	add    %edx,%eax
f0131a56:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f0131a59:	e8 96 b7 fd ff       	call   f010d1f4 <sys_enable_interrupt>
			return;
f0131a5e:	eb 05                	jmp    f0131a65 <atomic_readline+0x106>
		}
	}
f0131a60:	e9 35 ff ff ff       	jmp    f013199a <atomic_readline+0x3b>
}
f0131a65:	c9                   	leave  
f0131a66:	c3                   	ret    

f0131a67 <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f0131a67:	55                   	push   %ebp
f0131a68:	89 e5                	mov    %esp,%ebp
f0131a6a:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f0131a6d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131a74:	eb 06                	jmp    f0131a7c <strlen+0x15>
		n++;
f0131a76:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f0131a79:	ff 45 08             	incl   0x8(%ebp)
f0131a7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a7f:	8a 00                	mov    (%eax),%al
f0131a81:	84 c0                	test   %al,%al
f0131a83:	75 f1                	jne    f0131a76 <strlen+0xf>
		n++;
	return n;
f0131a85:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0131a88:	c9                   	leave  
f0131a89:	c3                   	ret    

f0131a8a <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f0131a8a:	55                   	push   %ebp
f0131a8b:	89 e5                	mov    %esp,%ebp
f0131a8d:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0131a90:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131a97:	eb 09                	jmp    f0131aa2 <strnlen+0x18>
		n++;
f0131a99:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0131a9c:	ff 45 08             	incl   0x8(%ebp)
f0131a9f:	ff 4d 0c             	decl   0xc(%ebp)
f0131aa2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131aa6:	74 09                	je     f0131ab1 <strnlen+0x27>
f0131aa8:	8b 45 08             	mov    0x8(%ebp),%eax
f0131aab:	8a 00                	mov    (%eax),%al
f0131aad:	84 c0                	test   %al,%al
f0131aaf:	75 e8                	jne    f0131a99 <strnlen+0xf>
		n++;
	return n;
f0131ab1:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0131ab4:	c9                   	leave  
f0131ab5:	c3                   	ret    

f0131ab6 <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f0131ab6:	55                   	push   %ebp
f0131ab7:	89 e5                	mov    %esp,%ebp
f0131ab9:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f0131abc:	8b 45 08             	mov    0x8(%ebp),%eax
f0131abf:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f0131ac2:	90                   	nop
f0131ac3:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ac6:	8d 50 01             	lea    0x1(%eax),%edx
f0131ac9:	89 55 08             	mov    %edx,0x8(%ebp)
f0131acc:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131acf:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131ad2:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0131ad5:	8a 12                	mov    (%edx),%dl
f0131ad7:	88 10                	mov    %dl,(%eax)
f0131ad9:	8a 00                	mov    (%eax),%al
f0131adb:	84 c0                	test   %al,%al
f0131add:	75 e4                	jne    f0131ac3 <strcpy+0xd>
		/* do nothing */;
	return ret;
f0131adf:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0131ae2:	c9                   	leave  
f0131ae3:	c3                   	ret    

f0131ae4 <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f0131ae4:	55                   	push   %ebp
f0131ae5:	89 e5                	mov    %esp,%ebp
f0131ae7:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f0131aea:	8b 45 08             	mov    0x8(%ebp),%eax
f0131aed:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f0131af0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131af7:	eb 1f                	jmp    f0131b18 <strncpy+0x34>
		*dst++ = *src;
f0131af9:	8b 45 08             	mov    0x8(%ebp),%eax
f0131afc:	8d 50 01             	lea    0x1(%eax),%edx
f0131aff:	89 55 08             	mov    %edx,0x8(%ebp)
f0131b02:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131b05:	8a 12                	mov    (%edx),%dl
f0131b07:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f0131b09:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b0c:	8a 00                	mov    (%eax),%al
f0131b0e:	84 c0                	test   %al,%al
f0131b10:	74 03                	je     f0131b15 <strncpy+0x31>
			src++;
f0131b12:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f0131b15:	ff 45 fc             	incl   -0x4(%ebp)
f0131b18:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131b1b:	3b 45 10             	cmp    0x10(%ebp),%eax
f0131b1e:	72 d9                	jb     f0131af9 <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f0131b20:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0131b23:	c9                   	leave  
f0131b24:	c3                   	ret    

f0131b25 <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f0131b25:	55                   	push   %ebp
f0131b26:	89 e5                	mov    %esp,%ebp
f0131b28:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f0131b2b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b2e:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f0131b31:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131b35:	74 30                	je     f0131b67 <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f0131b37:	eb 16                	jmp    f0131b4f <strlcpy+0x2a>
			*dst++ = *src++;
f0131b39:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b3c:	8d 50 01             	lea    0x1(%eax),%edx
f0131b3f:	89 55 08             	mov    %edx,0x8(%ebp)
f0131b42:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131b45:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131b48:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0131b4b:	8a 12                	mov    (%edx),%dl
f0131b4d:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f0131b4f:	ff 4d 10             	decl   0x10(%ebp)
f0131b52:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131b56:	74 09                	je     f0131b61 <strlcpy+0x3c>
f0131b58:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b5b:	8a 00                	mov    (%eax),%al
f0131b5d:	84 c0                	test   %al,%al
f0131b5f:	75 d8                	jne    f0131b39 <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f0131b61:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b64:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f0131b67:	8b 55 08             	mov    0x8(%ebp),%edx
f0131b6a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131b6d:	29 c2                	sub    %eax,%edx
f0131b6f:	89 d0                	mov    %edx,%eax
}
f0131b71:	c9                   	leave  
f0131b72:	c3                   	ret    

f0131b73 <strcmp>:

int
strcmp(const char *p, const char *q)
{
f0131b73:	55                   	push   %ebp
f0131b74:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f0131b76:	eb 06                	jmp    f0131b7e <strcmp+0xb>
		p++, q++;
f0131b78:	ff 45 08             	incl   0x8(%ebp)
f0131b7b:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f0131b7e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b81:	8a 00                	mov    (%eax),%al
f0131b83:	84 c0                	test   %al,%al
f0131b85:	74 0e                	je     f0131b95 <strcmp+0x22>
f0131b87:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b8a:	8a 10                	mov    (%eax),%dl
f0131b8c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b8f:	8a 00                	mov    (%eax),%al
f0131b91:	38 c2                	cmp    %al,%dl
f0131b93:	74 e3                	je     f0131b78 <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f0131b95:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b98:	8a 00                	mov    (%eax),%al
f0131b9a:	0f b6 d0             	movzbl %al,%edx
f0131b9d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131ba0:	8a 00                	mov    (%eax),%al
f0131ba2:	0f b6 c0             	movzbl %al,%eax
f0131ba5:	29 c2                	sub    %eax,%edx
f0131ba7:	89 d0                	mov    %edx,%eax
}
f0131ba9:	5d                   	pop    %ebp
f0131baa:	c3                   	ret    

f0131bab <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f0131bab:	55                   	push   %ebp
f0131bac:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f0131bae:	eb 09                	jmp    f0131bb9 <strncmp+0xe>
		n--, p++, q++;
f0131bb0:	ff 4d 10             	decl   0x10(%ebp)
f0131bb3:	ff 45 08             	incl   0x8(%ebp)
f0131bb6:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f0131bb9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131bbd:	74 17                	je     f0131bd6 <strncmp+0x2b>
f0131bbf:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bc2:	8a 00                	mov    (%eax),%al
f0131bc4:	84 c0                	test   %al,%al
f0131bc6:	74 0e                	je     f0131bd6 <strncmp+0x2b>
f0131bc8:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bcb:	8a 10                	mov    (%eax),%dl
f0131bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131bd0:	8a 00                	mov    (%eax),%al
f0131bd2:	38 c2                	cmp    %al,%dl
f0131bd4:	74 da                	je     f0131bb0 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f0131bd6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131bda:	75 07                	jne    f0131be3 <strncmp+0x38>
		return 0;
f0131bdc:	b8 00 00 00 00       	mov    $0x0,%eax
f0131be1:	eb 14                	jmp    f0131bf7 <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f0131be3:	8b 45 08             	mov    0x8(%ebp),%eax
f0131be6:	8a 00                	mov    (%eax),%al
f0131be8:	0f b6 d0             	movzbl %al,%edx
f0131beb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131bee:	8a 00                	mov    (%eax),%al
f0131bf0:	0f b6 c0             	movzbl %al,%eax
f0131bf3:	29 c2                	sub    %eax,%edx
f0131bf5:	89 d0                	mov    %edx,%eax
}
f0131bf7:	5d                   	pop    %ebp
f0131bf8:	c3                   	ret    

f0131bf9 <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f0131bf9:	55                   	push   %ebp
f0131bfa:	89 e5                	mov    %esp,%ebp
f0131bfc:	83 ec 04             	sub    $0x4,%esp
f0131bff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131c02:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0131c05:	eb 12                	jmp    f0131c19 <strchr+0x20>
		if (*s == c)
f0131c07:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c0a:	8a 00                	mov    (%eax),%al
f0131c0c:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0131c0f:	75 05                	jne    f0131c16 <strchr+0x1d>
			return (char *) s;
f0131c11:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c14:	eb 11                	jmp    f0131c27 <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f0131c16:	ff 45 08             	incl   0x8(%ebp)
f0131c19:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c1c:	8a 00                	mov    (%eax),%al
f0131c1e:	84 c0                	test   %al,%al
f0131c20:	75 e5                	jne    f0131c07 <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f0131c22:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131c27:	c9                   	leave  
f0131c28:	c3                   	ret    

f0131c29 <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f0131c29:	55                   	push   %ebp
f0131c2a:	89 e5                	mov    %esp,%ebp
f0131c2c:	83 ec 04             	sub    $0x4,%esp
f0131c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131c32:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0131c35:	eb 0d                	jmp    f0131c44 <strfind+0x1b>
		if (*s == c)
f0131c37:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c3a:	8a 00                	mov    (%eax),%al
f0131c3c:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0131c3f:	74 0e                	je     f0131c4f <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f0131c41:	ff 45 08             	incl   0x8(%ebp)
f0131c44:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c47:	8a 00                	mov    (%eax),%al
f0131c49:	84 c0                	test   %al,%al
f0131c4b:	75 ea                	jne    f0131c37 <strfind+0xe>
f0131c4d:	eb 01                	jmp    f0131c50 <strfind+0x27>
		if (*s == c)
			break;
f0131c4f:	90                   	nop
	return (char *) s;
f0131c50:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131c53:	c9                   	leave  
f0131c54:	c3                   	ret    

f0131c55 <memset>:


void *
memset(void *v, int c, uint32 n)
{
f0131c55:	55                   	push   %ebp
f0131c56:	89 e5                	mov    %esp,%ebp
f0131c58:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f0131c5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c5e:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f0131c61:	8b 45 10             	mov    0x10(%ebp),%eax
f0131c64:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f0131c67:	eb 0e                	jmp    f0131c77 <memset+0x22>
		*p++ = c;
f0131c69:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131c6c:	8d 50 01             	lea    0x1(%eax),%edx
f0131c6f:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0131c72:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131c75:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f0131c77:	ff 4d f8             	decl   -0x8(%ebp)
f0131c7a:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0131c7e:	79 e9                	jns    f0131c69 <memset+0x14>
		*p++ = c;

	return v;
f0131c80:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131c83:	c9                   	leave  
f0131c84:	c3                   	ret    

f0131c85 <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f0131c85:	55                   	push   %ebp
f0131c86:	89 e5                	mov    %esp,%ebp
f0131c88:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0131c8b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131c8e:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0131c91:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c94:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f0131c97:	eb 16                	jmp    f0131caf <memcpy+0x2a>
		*d++ = *s++;
f0131c99:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131c9c:	8d 50 01             	lea    0x1(%eax),%edx
f0131c9f:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131ca2:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131ca5:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131ca8:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0131cab:	8a 12                	mov    (%edx),%dl
f0131cad:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f0131caf:	8b 45 10             	mov    0x10(%ebp),%eax
f0131cb2:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131cb5:	89 55 10             	mov    %edx,0x10(%ebp)
f0131cb8:	85 c0                	test   %eax,%eax
f0131cba:	75 dd                	jne    f0131c99 <memcpy+0x14>
		*d++ = *s++;

	return dst;
f0131cbc:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131cbf:	c9                   	leave  
f0131cc0:	c3                   	ret    

f0131cc1 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f0131cc1:	55                   	push   %ebp
f0131cc2:	89 e5                	mov    %esp,%ebp
f0131cc4:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0131cc7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131cca:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0131ccd:	8b 45 08             	mov    0x8(%ebp),%eax
f0131cd0:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f0131cd3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131cd6:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0131cd9:	73 50                	jae    f0131d2b <memmove+0x6a>
f0131cdb:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131cde:	8b 45 10             	mov    0x10(%ebp),%eax
f0131ce1:	01 d0                	add    %edx,%eax
f0131ce3:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0131ce6:	76 43                	jbe    f0131d2b <memmove+0x6a>
		s += n;
f0131ce8:	8b 45 10             	mov    0x10(%ebp),%eax
f0131ceb:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f0131cee:	8b 45 10             	mov    0x10(%ebp),%eax
f0131cf1:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f0131cf4:	eb 10                	jmp    f0131d06 <memmove+0x45>
			*--d = *--s;
f0131cf6:	ff 4d f8             	decl   -0x8(%ebp)
f0131cf9:	ff 4d fc             	decl   -0x4(%ebp)
f0131cfc:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131cff:	8a 10                	mov    (%eax),%dl
f0131d01:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131d04:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f0131d06:	8b 45 10             	mov    0x10(%ebp),%eax
f0131d09:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131d0c:	89 55 10             	mov    %edx,0x10(%ebp)
f0131d0f:	85 c0                	test   %eax,%eax
f0131d11:	75 e3                	jne    f0131cf6 <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f0131d13:	eb 23                	jmp    f0131d38 <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f0131d15:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131d18:	8d 50 01             	lea    0x1(%eax),%edx
f0131d1b:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131d1e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131d21:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131d24:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0131d27:	8a 12                	mov    (%edx),%dl
f0131d29:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f0131d2b:	8b 45 10             	mov    0x10(%ebp),%eax
f0131d2e:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131d31:	89 55 10             	mov    %edx,0x10(%ebp)
f0131d34:	85 c0                	test   %eax,%eax
f0131d36:	75 dd                	jne    f0131d15 <memmove+0x54>
			*d++ = *s++;

	return dst;
f0131d38:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131d3b:	c9                   	leave  
f0131d3c:	c3                   	ret    

f0131d3d <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f0131d3d:	55                   	push   %ebp
f0131d3e:	89 e5                	mov    %esp,%ebp
f0131d40:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f0131d43:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d46:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f0131d49:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131d4c:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f0131d4f:	eb 2a                	jmp    f0131d7b <memcmp+0x3e>
		if (*s1 != *s2)
f0131d51:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131d54:	8a 10                	mov    (%eax),%dl
f0131d56:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131d59:	8a 00                	mov    (%eax),%al
f0131d5b:	38 c2                	cmp    %al,%dl
f0131d5d:	74 16                	je     f0131d75 <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f0131d5f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131d62:	8a 00                	mov    (%eax),%al
f0131d64:	0f b6 d0             	movzbl %al,%edx
f0131d67:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131d6a:	8a 00                	mov    (%eax),%al
f0131d6c:	0f b6 c0             	movzbl %al,%eax
f0131d6f:	29 c2                	sub    %eax,%edx
f0131d71:	89 d0                	mov    %edx,%eax
f0131d73:	eb 18                	jmp    f0131d8d <memcmp+0x50>
		s1++, s2++;
f0131d75:	ff 45 fc             	incl   -0x4(%ebp)
f0131d78:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f0131d7b:	8b 45 10             	mov    0x10(%ebp),%eax
f0131d7e:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131d81:	89 55 10             	mov    %edx,0x10(%ebp)
f0131d84:	85 c0                	test   %eax,%eax
f0131d86:	75 c9                	jne    f0131d51 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f0131d88:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131d8d:	c9                   	leave  
f0131d8e:	c3                   	ret    

f0131d8f <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f0131d8f:	55                   	push   %ebp
f0131d90:	89 e5                	mov    %esp,%ebp
f0131d92:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f0131d95:	8b 55 08             	mov    0x8(%ebp),%edx
f0131d98:	8b 45 10             	mov    0x10(%ebp),%eax
f0131d9b:	01 d0                	add    %edx,%eax
f0131d9d:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f0131da0:	eb 15                	jmp    f0131db7 <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f0131da2:	8b 45 08             	mov    0x8(%ebp),%eax
f0131da5:	8a 00                	mov    (%eax),%al
f0131da7:	0f b6 d0             	movzbl %al,%edx
f0131daa:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131dad:	0f b6 c0             	movzbl %al,%eax
f0131db0:	39 c2                	cmp    %eax,%edx
f0131db2:	74 0d                	je     f0131dc1 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f0131db4:	ff 45 08             	incl   0x8(%ebp)
f0131db7:	8b 45 08             	mov    0x8(%ebp),%eax
f0131dba:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0131dbd:	72 e3                	jb     f0131da2 <memfind+0x13>
f0131dbf:	eb 01                	jmp    f0131dc2 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f0131dc1:	90                   	nop
	return (void *) s;
f0131dc2:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131dc5:	c9                   	leave  
f0131dc6:	c3                   	ret    

f0131dc7 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f0131dc7:	55                   	push   %ebp
f0131dc8:	89 e5                	mov    %esp,%ebp
f0131dca:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f0131dcd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f0131dd4:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0131ddb:	eb 03                	jmp    f0131de0 <strtol+0x19>
		s++;
f0131ddd:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0131de0:	8b 45 08             	mov    0x8(%ebp),%eax
f0131de3:	8a 00                	mov    (%eax),%al
f0131de5:	3c 20                	cmp    $0x20,%al
f0131de7:	74 f4                	je     f0131ddd <strtol+0x16>
f0131de9:	8b 45 08             	mov    0x8(%ebp),%eax
f0131dec:	8a 00                	mov    (%eax),%al
f0131dee:	3c 09                	cmp    $0x9,%al
f0131df0:	74 eb                	je     f0131ddd <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f0131df2:	8b 45 08             	mov    0x8(%ebp),%eax
f0131df5:	8a 00                	mov    (%eax),%al
f0131df7:	3c 2b                	cmp    $0x2b,%al
f0131df9:	75 05                	jne    f0131e00 <strtol+0x39>
		s++;
f0131dfb:	ff 45 08             	incl   0x8(%ebp)
f0131dfe:	eb 13                	jmp    f0131e13 <strtol+0x4c>
	else if (*s == '-')
f0131e00:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e03:	8a 00                	mov    (%eax),%al
f0131e05:	3c 2d                	cmp    $0x2d,%al
f0131e07:	75 0a                	jne    f0131e13 <strtol+0x4c>
		s++, neg = 1;
f0131e09:	ff 45 08             	incl   0x8(%ebp)
f0131e0c:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f0131e13:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131e17:	74 06                	je     f0131e1f <strtol+0x58>
f0131e19:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f0131e1d:	75 20                	jne    f0131e3f <strtol+0x78>
f0131e1f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e22:	8a 00                	mov    (%eax),%al
f0131e24:	3c 30                	cmp    $0x30,%al
f0131e26:	75 17                	jne    f0131e3f <strtol+0x78>
f0131e28:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e2b:	40                   	inc    %eax
f0131e2c:	8a 00                	mov    (%eax),%al
f0131e2e:	3c 78                	cmp    $0x78,%al
f0131e30:	75 0d                	jne    f0131e3f <strtol+0x78>
		s += 2, base = 16;
f0131e32:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f0131e36:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f0131e3d:	eb 28                	jmp    f0131e67 <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f0131e3f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131e43:	75 15                	jne    f0131e5a <strtol+0x93>
f0131e45:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e48:	8a 00                	mov    (%eax),%al
f0131e4a:	3c 30                	cmp    $0x30,%al
f0131e4c:	75 0c                	jne    f0131e5a <strtol+0x93>
		s++, base = 8;
f0131e4e:	ff 45 08             	incl   0x8(%ebp)
f0131e51:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f0131e58:	eb 0d                	jmp    f0131e67 <strtol+0xa0>
	else if (base == 0)
f0131e5a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131e5e:	75 07                	jne    f0131e67 <strtol+0xa0>
		base = 10;
f0131e60:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f0131e67:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e6a:	8a 00                	mov    (%eax),%al
f0131e6c:	3c 2f                	cmp    $0x2f,%al
f0131e6e:	7e 19                	jle    f0131e89 <strtol+0xc2>
f0131e70:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e73:	8a 00                	mov    (%eax),%al
f0131e75:	3c 39                	cmp    $0x39,%al
f0131e77:	7f 10                	jg     f0131e89 <strtol+0xc2>
			dig = *s - '0';
f0131e79:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e7c:	8a 00                	mov    (%eax),%al
f0131e7e:	0f be c0             	movsbl %al,%eax
f0131e81:	83 e8 30             	sub    $0x30,%eax
f0131e84:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131e87:	eb 42                	jmp    f0131ecb <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f0131e89:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e8c:	8a 00                	mov    (%eax),%al
f0131e8e:	3c 60                	cmp    $0x60,%al
f0131e90:	7e 19                	jle    f0131eab <strtol+0xe4>
f0131e92:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e95:	8a 00                	mov    (%eax),%al
f0131e97:	3c 7a                	cmp    $0x7a,%al
f0131e99:	7f 10                	jg     f0131eab <strtol+0xe4>
			dig = *s - 'a' + 10;
f0131e9b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e9e:	8a 00                	mov    (%eax),%al
f0131ea0:	0f be c0             	movsbl %al,%eax
f0131ea3:	83 e8 57             	sub    $0x57,%eax
f0131ea6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131ea9:	eb 20                	jmp    f0131ecb <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f0131eab:	8b 45 08             	mov    0x8(%ebp),%eax
f0131eae:	8a 00                	mov    (%eax),%al
f0131eb0:	3c 40                	cmp    $0x40,%al
f0131eb2:	7e 39                	jle    f0131eed <strtol+0x126>
f0131eb4:	8b 45 08             	mov    0x8(%ebp),%eax
f0131eb7:	8a 00                	mov    (%eax),%al
f0131eb9:	3c 5a                	cmp    $0x5a,%al
f0131ebb:	7f 30                	jg     f0131eed <strtol+0x126>
			dig = *s - 'A' + 10;
f0131ebd:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ec0:	8a 00                	mov    (%eax),%al
f0131ec2:	0f be c0             	movsbl %al,%eax
f0131ec5:	83 e8 37             	sub    $0x37,%eax
f0131ec8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f0131ecb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ece:	3b 45 10             	cmp    0x10(%ebp),%eax
f0131ed1:	7d 19                	jge    f0131eec <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f0131ed3:	ff 45 08             	incl   0x8(%ebp)
f0131ed6:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131ed9:	0f af 45 10          	imul   0x10(%ebp),%eax
f0131edd:	89 c2                	mov    %eax,%edx
f0131edf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ee2:	01 d0                	add    %edx,%eax
f0131ee4:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f0131ee7:	e9 7b ff ff ff       	jmp    f0131e67 <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f0131eec:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f0131eed:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131ef1:	74 08                	je     f0131efb <strtol+0x134>
		*endptr = (char *) s;
f0131ef3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131ef6:	8b 55 08             	mov    0x8(%ebp),%edx
f0131ef9:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f0131efb:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131eff:	74 07                	je     f0131f08 <strtol+0x141>
f0131f01:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131f04:	f7 d8                	neg    %eax
f0131f06:	eb 03                	jmp    f0131f0b <strtol+0x144>
f0131f08:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0131f0b:	c9                   	leave  
f0131f0c:	c3                   	ret    

f0131f0d <ltostr>:

void
ltostr(long value, char *str)
{
f0131f0d:	55                   	push   %ebp
f0131f0e:	89 e5                	mov    %esp,%ebp
f0131f10:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f0131f13:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f0131f1a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f0131f21:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131f25:	79 13                	jns    f0131f3a <ltostr+0x2d>
	{
		neg = 1;
f0131f27:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f0131f2e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131f31:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f0131f34:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f0131f37:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f0131f3a:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f3d:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0131f42:	99                   	cltd   
f0131f43:	f7 f9                	idiv   %ecx
f0131f45:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f0131f48:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131f4b:	8d 50 01             	lea    0x1(%eax),%edx
f0131f4e:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131f51:	89 c2                	mov    %eax,%edx
f0131f53:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131f56:	01 d0                	add    %edx,%eax
f0131f58:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131f5b:	83 c2 30             	add    $0x30,%edx
f0131f5e:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f0131f60:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0131f63:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0131f68:	f7 e9                	imul   %ecx
f0131f6a:	c1 fa 02             	sar    $0x2,%edx
f0131f6d:	89 c8                	mov    %ecx,%eax
f0131f6f:	c1 f8 1f             	sar    $0x1f,%eax
f0131f72:	29 c2                	sub    %eax,%edx
f0131f74:	89 d0                	mov    %edx,%eax
f0131f76:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f0131f79:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0131f7c:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0131f81:	f7 e9                	imul   %ecx
f0131f83:	c1 fa 02             	sar    $0x2,%edx
f0131f86:	89 c8                	mov    %ecx,%eax
f0131f88:	c1 f8 1f             	sar    $0x1f,%eax
f0131f8b:	29 c2                	sub    %eax,%edx
f0131f8d:	89 d0                	mov    %edx,%eax
f0131f8f:	c1 e0 02             	shl    $0x2,%eax
f0131f92:	01 d0                	add    %edx,%eax
f0131f94:	01 c0                	add    %eax,%eax
f0131f96:	29 c1                	sub    %eax,%ecx
f0131f98:	89 ca                	mov    %ecx,%edx
f0131f9a:	85 d2                	test   %edx,%edx
f0131f9c:	75 9c                	jne    f0131f3a <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f0131f9e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f0131fa5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131fa8:	48                   	dec    %eax
f0131fa9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f0131fac:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131fb0:	74 3d                	je     f0131fef <ltostr+0xe2>
		start = 1 ;
f0131fb2:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f0131fb9:	eb 34                	jmp    f0131fef <ltostr+0xe2>
	{
		char tmp = str[start] ;
f0131fbb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131fbe:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131fc1:	01 d0                	add    %edx,%eax
f0131fc3:	8a 00                	mov    (%eax),%al
f0131fc5:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f0131fc8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131fcb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131fce:	01 c2                	add    %eax,%edx
f0131fd0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0131fd3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131fd6:	01 c8                	add    %ecx,%eax
f0131fd8:	8a 00                	mov    (%eax),%al
f0131fda:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f0131fdc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131fdf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131fe2:	01 c2                	add    %eax,%edx
f0131fe4:	8a 45 eb             	mov    -0x15(%ebp),%al
f0131fe7:	88 02                	mov    %al,(%edx)
		start++ ;
f0131fe9:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f0131fec:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f0131fef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ff2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131ff5:	7c c4                	jl     f0131fbb <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f0131ff7:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0131ffa:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131ffd:	01 d0                	add    %edx,%eax
f0131fff:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f0132002:	90                   	nop
f0132003:	c9                   	leave  
f0132004:	c3                   	ret    

f0132005 <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f0132005:	55                   	push   %ebp
f0132006:	89 e5                	mov    %esp,%ebp
f0132008:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f013200b:	ff 75 08             	pushl  0x8(%ebp)
f013200e:	e8 54 fa ff ff       	call   f0131a67 <strlen>
f0132013:	83 c4 04             	add    $0x4,%esp
f0132016:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f0132019:	ff 75 0c             	pushl  0xc(%ebp)
f013201c:	e8 46 fa ff ff       	call   f0131a67 <strlen>
f0132021:	83 c4 04             	add    $0x4,%esp
f0132024:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f0132027:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f013202e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0132035:	eb 17                	jmp    f013204e <strcconcat+0x49>
		final[s] = str1[s] ;
f0132037:	8b 55 fc             	mov    -0x4(%ebp),%edx
f013203a:	8b 45 10             	mov    0x10(%ebp),%eax
f013203d:	01 c2                	add    %eax,%edx
f013203f:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0132042:	8b 45 08             	mov    0x8(%ebp),%eax
f0132045:	01 c8                	add    %ecx,%eax
f0132047:	8a 00                	mov    (%eax),%al
f0132049:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f013204b:	ff 45 fc             	incl   -0x4(%ebp)
f013204e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0132051:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0132054:	7c e1                	jl     f0132037 <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f0132056:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f013205d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f0132064:	eb 1f                	jmp    f0132085 <strcconcat+0x80>
		final[s++] = str2[i] ;
f0132066:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0132069:	8d 50 01             	lea    0x1(%eax),%edx
f013206c:	89 55 fc             	mov    %edx,-0x4(%ebp)
f013206f:	89 c2                	mov    %eax,%edx
f0132071:	8b 45 10             	mov    0x10(%ebp),%eax
f0132074:	01 c2                	add    %eax,%edx
f0132076:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f0132079:	8b 45 0c             	mov    0xc(%ebp),%eax
f013207c:	01 c8                	add    %ecx,%eax
f013207e:	8a 00                	mov    (%eax),%al
f0132080:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f0132082:	ff 45 f8             	incl   -0x8(%ebp)
f0132085:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0132088:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f013208b:	7c d9                	jl     f0132066 <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f013208d:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0132090:	8b 45 10             	mov    0x10(%ebp),%eax
f0132093:	01 d0                	add    %edx,%eax
f0132095:	c6 00 00             	movb   $0x0,(%eax)
}
f0132098:	90                   	nop
f0132099:	c9                   	leave  
f013209a:	c3                   	ret    

f013209b <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f013209b:	55                   	push   %ebp
f013209c:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f013209e:	8b 45 14             	mov    0x14(%ebp),%eax
f01320a1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f01320a7:	8b 45 14             	mov    0x14(%ebp),%eax
f01320aa:	8b 00                	mov    (%eax),%eax
f01320ac:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01320b3:	8b 45 10             	mov    0x10(%ebp),%eax
f01320b6:	01 d0                	add    %edx,%eax
f01320b8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f01320be:	eb 0c                	jmp    f01320cc <strsplit+0x31>
			*string++ = 0;
f01320c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01320c3:	8d 50 01             	lea    0x1(%eax),%edx
f01320c6:	89 55 08             	mov    %edx,0x8(%ebp)
f01320c9:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f01320cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01320cf:	8a 00                	mov    (%eax),%al
f01320d1:	84 c0                	test   %al,%al
f01320d3:	74 18                	je     f01320ed <strsplit+0x52>
f01320d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01320d8:	8a 00                	mov    (%eax),%al
f01320da:	0f be c0             	movsbl %al,%eax
f01320dd:	50                   	push   %eax
f01320de:	ff 75 0c             	pushl  0xc(%ebp)
f01320e1:	e8 13 fb ff ff       	call   f0131bf9 <strchr>
f01320e6:	83 c4 08             	add    $0x8,%esp
f01320e9:	85 c0                	test   %eax,%eax
f01320eb:	75 d3                	jne    f01320c0 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f01320ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01320f0:	8a 00                	mov    (%eax),%al
f01320f2:	84 c0                	test   %al,%al
f01320f4:	74 5a                	je     f0132150 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f01320f6:	8b 45 14             	mov    0x14(%ebp),%eax
f01320f9:	8b 00                	mov    (%eax),%eax
f01320fb:	83 f8 0f             	cmp    $0xf,%eax
f01320fe:	75 07                	jne    f0132107 <strsplit+0x6c>
		{
			return 0;
f0132100:	b8 00 00 00 00       	mov    $0x0,%eax
f0132105:	eb 66                	jmp    f013216d <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0132107:	8b 45 14             	mov    0x14(%ebp),%eax
f013210a:	8b 00                	mov    (%eax),%eax
f013210c:	8d 48 01             	lea    0x1(%eax),%ecx
f013210f:	8b 55 14             	mov    0x14(%ebp),%edx
f0132112:	89 0a                	mov    %ecx,(%edx)
f0132114:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f013211b:	8b 45 10             	mov    0x10(%ebp),%eax
f013211e:	01 c2                	add    %eax,%edx
f0132120:	8b 45 08             	mov    0x8(%ebp),%eax
f0132123:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f0132125:	eb 03                	jmp    f013212a <strsplit+0x8f>
			string++;
f0132127:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f013212a:	8b 45 08             	mov    0x8(%ebp),%eax
f013212d:	8a 00                	mov    (%eax),%al
f013212f:	84 c0                	test   %al,%al
f0132131:	74 8b                	je     f01320be <strsplit+0x23>
f0132133:	8b 45 08             	mov    0x8(%ebp),%eax
f0132136:	8a 00                	mov    (%eax),%al
f0132138:	0f be c0             	movsbl %al,%eax
f013213b:	50                   	push   %eax
f013213c:	ff 75 0c             	pushl  0xc(%ebp)
f013213f:	e8 b5 fa ff ff       	call   f0131bf9 <strchr>
f0132144:	83 c4 08             	add    $0x8,%esp
f0132147:	85 c0                	test   %eax,%eax
f0132149:	74 dc                	je     f0132127 <strsplit+0x8c>
			string++;
	}
f013214b:	e9 6e ff ff ff       	jmp    f01320be <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f0132150:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f0132151:	8b 45 14             	mov    0x14(%ebp),%eax
f0132154:	8b 00                	mov    (%eax),%eax
f0132156:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f013215d:	8b 45 10             	mov    0x10(%ebp),%eax
f0132160:	01 d0                	add    %edx,%eax
f0132162:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f0132168:	b8 01 00 00 00       	mov    $0x1,%eax
}
f013216d:	c9                   	leave  
f013216e:	c3                   	ret    

f013216f <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f013216f:	55                   	push   %ebp
f0132170:	89 e5                	mov    %esp,%ebp
f0132172:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f0132175:	90                   	nop
f0132176:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f013217d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0132180:	89 c2                	mov    %eax,%edx
f0132182:	ec                   	in     (%dx),%al
f0132183:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0132186:	8a 45 f7             	mov    -0x9(%ebp),%al
f0132189:	0f b6 c0             	movzbl %al,%eax
f013218c:	89 45 fc             	mov    %eax,-0x4(%ebp)
f013218f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0132192:	25 c0 00 00 00       	and    $0xc0,%eax
f0132197:	83 f8 40             	cmp    $0x40,%eax
f013219a:	75 da                	jne    f0132176 <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f013219c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01321a0:	74 11                	je     f01321b3 <ide_wait_ready+0x44>
f01321a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01321a5:	83 e0 21             	and    $0x21,%eax
f01321a8:	85 c0                	test   %eax,%eax
f01321aa:	74 07                	je     f01321b3 <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f01321ac:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01321b1:	eb 05                	jmp    f01321b8 <ide_wait_ready+0x49>
	}
	return 0;
f01321b3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01321b8:	c9                   	leave  
f01321b9:	c3                   	ret    

f01321ba <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f01321ba:	55                   	push   %ebp
f01321bb:	89 e5                	mov    %esp,%ebp
f01321bd:	57                   	push   %edi
f01321be:	53                   	push   %ebx
f01321bf:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f01321c2:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f01321c9:	76 16                	jbe    f01321e1 <ide_read+0x27>
f01321cb:	68 43 d6 13 f0       	push   $0xf013d643
f01321d0:	68 50 d6 13 f0       	push   $0xf013d650
f01321d5:	6a 25                	push   $0x25
f01321d7:	68 65 d6 13 f0       	push   $0xf013d665
f01321dc:	e8 24 e0 fc ff       	call   f0100205 <_panic>

	ide_wait_ready(0);
f01321e1:	83 ec 0c             	sub    $0xc,%esp
f01321e4:	6a 00                	push   $0x0
f01321e6:	e8 84 ff ff ff       	call   f013216f <ide_wait_ready>
f01321eb:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f01321ee:	8b 45 10             	mov    0x10(%ebp),%eax
f01321f1:	0f b6 c0             	movzbl %al,%eax
f01321f4:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f01321fb:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01321fe:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0132201:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132204:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0132205:	8b 45 08             	mov    0x8(%ebp),%eax
f0132208:	0f b6 c0             	movzbl %al,%eax
f013220b:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0132212:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0132215:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0132218:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013221b:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f013221c:	8b 45 08             	mov    0x8(%ebp),%eax
f013221f:	c1 e8 08             	shr    $0x8,%eax
f0132222:	0f b6 c0             	movzbl %al,%eax
f0132225:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f013222c:	88 45 d4             	mov    %al,-0x2c(%ebp)
f013222f:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0132232:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132235:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0132236:	8b 45 08             	mov    0x8(%ebp),%eax
f0132239:	c1 e8 10             	shr    $0x10,%eax
f013223c:	0f b6 c0             	movzbl %al,%eax
f013223f:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0132246:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0132249:	8a 45 d5             	mov    -0x2b(%ebp),%al
f013224c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f013224f:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0132250:	a1 2c b8 85 f0       	mov    0xf085b82c,%eax
f0132255:	83 e0 01             	and    $0x1,%eax
f0132258:	c1 e0 04             	shl    $0x4,%eax
f013225b:	88 c2                	mov    %al,%dl
f013225d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132260:	c1 e8 18             	shr    $0x18,%eax
f0132263:	83 e0 0f             	and    $0xf,%eax
f0132266:	09 d0                	or     %edx,%eax
f0132268:	83 c8 e0             	or     $0xffffffe0,%eax
f013226b:	0f b6 c0             	movzbl %al,%eax
f013226e:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0132275:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0132278:	8a 45 d6             	mov    -0x2a(%ebp),%al
f013227b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f013227e:	ee                   	out    %al,(%dx)
f013227f:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0132286:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f013228a:	8a 45 d7             	mov    -0x29(%ebp),%al
f013228d:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0132290:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0132291:	eb 55                	jmp    f01322e8 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0132293:	83 ec 0c             	sub    $0xc,%esp
f0132296:	6a 01                	push   $0x1
f0132298:	e8 d2 fe ff ff       	call   f013216f <ide_wait_ready>
f013229d:	83 c4 10             	add    $0x10,%esp
f01322a0:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01322a3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01322a7:	79 05                	jns    f01322ae <ide_read+0xf4>
			return r;
f01322a9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01322ac:	eb 45                	jmp    f01322f3 <ide_read+0x139>
f01322ae:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f01322b5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01322b8:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01322bb:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f01322c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01322c5:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f01322c8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01322cb:	89 cb                	mov    %ecx,%ebx
f01322cd:	89 df                	mov    %ebx,%edi
f01322cf:	89 c1                	mov    %eax,%ecx
f01322d1:	fc                   	cld    
f01322d2:	f2 6d                	repnz insl (%dx),%es:(%edi)
f01322d4:	89 c8                	mov    %ecx,%eax
f01322d6:	89 fb                	mov    %edi,%ebx
f01322d8:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f01322db:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f01322de:	ff 4d 10             	decl   0x10(%ebp)
f01322e1:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f01322e8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01322ec:	75 a5                	jne    f0132293 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f01322ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01322f3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01322f6:	5b                   	pop    %ebx
f01322f7:	5f                   	pop    %edi
f01322f8:	5d                   	pop    %ebp
f01322f9:	c3                   	ret    

f01322fa <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f01322fa:	55                   	push   %ebp
f01322fb:	89 e5                	mov    %esp,%ebp
f01322fd:	56                   	push   %esi
f01322fe:	53                   	push   %ebx
f01322ff:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f0132302:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0132309:	76 16                	jbe    f0132321 <ide_write+0x27>
f013230b:	68 43 d6 13 f0       	push   $0xf013d643
f0132310:	68 50 d6 13 f0       	push   $0xf013d650
f0132315:	6a 3e                	push   $0x3e
f0132317:	68 65 d6 13 f0       	push   $0xf013d665
f013231c:	e8 e4 de fc ff       	call   f0100205 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f0132321:	83 ec 0c             	sub    $0xc,%esp
f0132324:	6a 00                	push   $0x0
f0132326:	e8 44 fe ff ff       	call   f013216f <ide_wait_ready>
f013232b:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f013232e:	8b 45 10             	mov    0x10(%ebp),%eax
f0132331:	0f b6 c0             	movzbl %al,%eax
f0132334:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f013233b:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f013233e:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0132341:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132344:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0132345:	8b 45 08             	mov    0x8(%ebp),%eax
f0132348:	0f b6 c0             	movzbl %al,%eax
f013234b:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0132352:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0132355:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0132358:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013235b:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f013235c:	8b 45 08             	mov    0x8(%ebp),%eax
f013235f:	c1 e8 08             	shr    $0x8,%eax
f0132362:	0f b6 c0             	movzbl %al,%eax
f0132365:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f013236c:	88 45 d4             	mov    %al,-0x2c(%ebp)
f013236f:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0132372:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132375:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0132376:	8b 45 08             	mov    0x8(%ebp),%eax
f0132379:	c1 e8 10             	shr    $0x10,%eax
f013237c:	0f b6 c0             	movzbl %al,%eax
f013237f:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0132386:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0132389:	8a 45 d5             	mov    -0x2b(%ebp),%al
f013238c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f013238f:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0132390:	a1 2c b8 85 f0       	mov    0xf085b82c,%eax
f0132395:	83 e0 01             	and    $0x1,%eax
f0132398:	c1 e0 04             	shl    $0x4,%eax
f013239b:	88 c2                	mov    %al,%dl
f013239d:	8b 45 08             	mov    0x8(%ebp),%eax
f01323a0:	c1 e8 18             	shr    $0x18,%eax
f01323a3:	83 e0 0f             	and    $0xf,%eax
f01323a6:	09 d0                	or     %edx,%eax
f01323a8:	83 c8 e0             	or     $0xffffffe0,%eax
f01323ab:	0f b6 c0             	movzbl %al,%eax
f01323ae:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f01323b5:	88 45 d6             	mov    %al,-0x2a(%ebp)
f01323b8:	8a 45 d6             	mov    -0x2a(%ebp),%al
f01323bb:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01323be:	ee                   	out    %al,(%dx)
f01323bf:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f01323c6:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f01323ca:	8a 45 d7             	mov    -0x29(%ebp),%al
f01323cd:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01323d0:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f01323d1:	eb 55                	jmp    f0132428 <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f01323d3:	83 ec 0c             	sub    $0xc,%esp
f01323d6:	6a 01                	push   $0x1
f01323d8:	e8 92 fd ff ff       	call   f013216f <ide_wait_ready>
f01323dd:	83 c4 10             	add    $0x10,%esp
f01323e0:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01323e3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01323e7:	79 05                	jns    f01323ee <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f01323e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01323ec:	eb 45                	jmp    f0132433 <ide_write+0x139>
f01323ee:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f01323f5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01323f8:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01323fb:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f0132402:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132405:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0132408:	8b 45 c8             	mov    -0x38(%ebp),%eax
f013240b:	89 cb                	mov    %ecx,%ebx
f013240d:	89 de                	mov    %ebx,%esi
f013240f:	89 c1                	mov    %eax,%ecx
f0132411:	fc                   	cld    
f0132412:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f0132414:	89 c8                	mov    %ecx,%eax
f0132416:	89 f3                	mov    %esi,%ebx
f0132418:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f013241b:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f013241e:	ff 4d 10             	decl   0x10(%ebp)
f0132421:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0132428:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013242c:	75 a5                	jne    f01323d3 <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f013242e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132433:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0132436:	5b                   	pop    %ebx
f0132437:	5e                   	pop    %esi
f0132438:	5d                   	pop    %ebp
f0132439:	c3                   	ret    

f013243a <print_mem_block_lists>:
//===========================
// PRINT MEM BLOCK LISTS:
//===========================

void print_mem_block_lists()
{
f013243a:	55                   	push   %ebp
f013243b:	89 e5                	mov    %esp,%ebp
f013243d:	83 ec 18             	sub    $0x18,%esp
	cprintf("\n=========================================\n");
f0132440:	83 ec 0c             	sub    $0xc,%esp
f0132443:	68 70 d6 13 f0       	push   $0xf013d670
f0132448:	e8 c1 e8 fc ff       	call   f0100d0e <cprintf>
f013244d:	83 c4 10             	add    $0x10,%esp
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
f0132450:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nFreeMemBlocksList:\n");
f0132457:	83 ec 0c             	sub    $0xc,%esp
f013245a:	68 9c d6 13 f0       	push   $0xf013d69c
f013245f:	e8 aa e8 fc ff       	call   f0100d0e <cprintf>
f0132464:	83 c4 10             	add    $0x10,%esp
	uint8 sorted = 1 ;
f0132467:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &FreeMemBlocksList)
f013246b:	a1 e0 b8 85 f0       	mov    0xf085b8e0,%eax
f0132470:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132473:	eb 56                	jmp    f01324cb <print_mem_block_lists+0x91>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0132475:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132479:	74 1c                	je     f0132497 <print_mem_block_lists+0x5d>
f013247b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013247e:	8b 50 08             	mov    0x8(%eax),%edx
f0132481:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132484:	8b 48 08             	mov    0x8(%eax),%ecx
f0132487:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013248a:	8b 40 0c             	mov    0xc(%eax),%eax
f013248d:	01 c8                	add    %ecx,%eax
f013248f:	39 c2                	cmp    %eax,%edx
f0132491:	73 04                	jae    f0132497 <print_mem_block_lists+0x5d>
			sorted = 0 ;
f0132493:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0132497:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013249a:	8b 50 08             	mov    0x8(%eax),%edx
f013249d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324a0:	8b 40 0c             	mov    0xc(%eax),%eax
f01324a3:	01 c2                	add    %eax,%edx
f01324a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324a8:	8b 40 08             	mov    0x8(%eax),%eax
f01324ab:	83 ec 04             	sub    $0x4,%esp
f01324ae:	52                   	push   %edx
f01324af:	50                   	push   %eax
f01324b0:	68 b1 d6 13 f0       	push   $0xf013d6b1
f01324b5:	e8 54 e8 fc ff       	call   f0100d0e <cprintf>
f01324ba:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f01324bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\n=========================================\n");
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
	cprintf("\nFreeMemBlocksList:\n");
	uint8 sorted = 1 ;
	LIST_FOREACH(blk, &FreeMemBlocksList)
f01324c3:	a1 e8 b8 85 f0       	mov    0xf085b8e8,%eax
f01324c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01324cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01324cf:	74 07                	je     f01324d8 <print_mem_block_lists+0x9e>
f01324d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324d4:	8b 00                	mov    (%eax),%eax
f01324d6:	eb 05                	jmp    f01324dd <print_mem_block_lists+0xa3>
f01324d8:	b8 00 00 00 00       	mov    $0x0,%eax
f01324dd:	a3 e8 b8 85 f0       	mov    %eax,0xf085b8e8
f01324e2:	a1 e8 b8 85 f0       	mov    0xf085b8e8,%eax
f01324e7:	85 c0                	test   %eax,%eax
f01324e9:	75 8a                	jne    f0132475 <print_mem_block_lists+0x3b>
f01324eb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01324ef:	75 84                	jne    f0132475 <print_mem_block_lists+0x3b>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;
f01324f1:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f01324f5:	75 10                	jne    f0132507 <print_mem_block_lists+0xcd>
f01324f7:	83 ec 0c             	sub    $0xc,%esp
f01324fa:	68 c0 d6 13 f0       	push   $0xf013d6c0
f01324ff:	e8 0a e8 fc ff       	call   f0100d0e <cprintf>
f0132504:	83 c4 10             	add    $0x10,%esp

	lastBlk = NULL ;
f0132507:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nAllocMemBlocksList:\n");
f013250e:	83 ec 0c             	sub    $0xc,%esp
f0132511:	68 e4 d6 13 f0       	push   $0xf013d6e4
f0132516:	e8 f3 e7 fc ff       	call   f0100d0e <cprintf>
f013251b:	83 c4 10             	add    $0x10,%esp
	sorted = 1 ;
f013251e:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &AllocMemBlocksList)
f0132522:	a1 44 b8 85 f0       	mov    0xf085b844,%eax
f0132527:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013252a:	eb 56                	jmp    f0132582 <print_mem_block_lists+0x148>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f013252c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132530:	74 1c                	je     f013254e <print_mem_block_lists+0x114>
f0132532:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132535:	8b 50 08             	mov    0x8(%eax),%edx
f0132538:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013253b:	8b 48 08             	mov    0x8(%eax),%ecx
f013253e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132541:	8b 40 0c             	mov    0xc(%eax),%eax
f0132544:	01 c8                	add    %ecx,%eax
f0132546:	39 c2                	cmp    %eax,%edx
f0132548:	73 04                	jae    f013254e <print_mem_block_lists+0x114>
			sorted = 0 ;
f013254a:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f013254e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132551:	8b 50 08             	mov    0x8(%eax),%edx
f0132554:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132557:	8b 40 0c             	mov    0xc(%eax),%eax
f013255a:	01 c2                	add    %eax,%edx
f013255c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013255f:	8b 40 08             	mov    0x8(%eax),%eax
f0132562:	83 ec 04             	sub    $0x4,%esp
f0132565:	52                   	push   %edx
f0132566:	50                   	push   %eax
f0132567:	68 b1 d6 13 f0       	push   $0xf013d6b1
f013256c:	e8 9d e7 fc ff       	call   f0100d0e <cprintf>
f0132571:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0132574:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132577:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;

	lastBlk = NULL ;
	cprintf("\nAllocMemBlocksList:\n");
	sorted = 1 ;
	LIST_FOREACH(blk, &AllocMemBlocksList)
f013257a:	a1 4c b8 85 f0       	mov    0xf085b84c,%eax
f013257f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132582:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132586:	74 07                	je     f013258f <print_mem_block_lists+0x155>
f0132588:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013258b:	8b 00                	mov    (%eax),%eax
f013258d:	eb 05                	jmp    f0132594 <print_mem_block_lists+0x15a>
f013258f:	b8 00 00 00 00       	mov    $0x0,%eax
f0132594:	a3 4c b8 85 f0       	mov    %eax,0xf085b84c
f0132599:	a1 4c b8 85 f0       	mov    0xf085b84c,%eax
f013259e:	85 c0                	test   %eax,%eax
f01325a0:	75 8a                	jne    f013252c <print_mem_block_lists+0xf2>
f01325a2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01325a6:	75 84                	jne    f013252c <print_mem_block_lists+0xf2>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nAllocMemBlocksList is NOT SORTED!!\n") ;
f01325a8:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f01325ac:	75 10                	jne    f01325be <print_mem_block_lists+0x184>
f01325ae:	83 ec 0c             	sub    $0xc,%esp
f01325b1:	68 fc d6 13 f0       	push   $0xf013d6fc
f01325b6:	e8 53 e7 fc ff       	call   f0100d0e <cprintf>
f01325bb:	83 c4 10             	add    $0x10,%esp
	cprintf("\n=========================================\n");
f01325be:	83 ec 0c             	sub    $0xc,%esp
f01325c1:	68 70 d6 13 f0       	push   $0xf013d670
f01325c6:	e8 43 e7 fc ff       	call   f0100d0e <cprintf>
f01325cb:	83 c4 10             	add    $0x10,%esp

}
f01325ce:	90                   	nop
f01325cf:	c9                   	leave  
f01325d0:	c3                   	ret    

f01325d1 <initialize_MemBlocksList>:

//===============================
// [1] INITIALIZE AVAILABLE LIST:
//===============================
void initialize_MemBlocksList(uint32 numOfBlocks)
{
f01325d1:	55                   	push   %ebp
f01325d2:	89 e5                	mov    %esp,%ebp
f01325d4:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	uint32 n = numOfBlocks;
f01325d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01325da:	89 45 f0             	mov    %eax,-0x10(%ebp)

	LIST_INIT(&AvailableMemBlocksList);
f01325dd:	c7 05 14 b9 85 f0 00 	movl   $0x0,0xf085b914
f01325e4:	00 00 00 
f01325e7:	c7 05 18 b9 85 f0 00 	movl   $0x0,0xf085b918
f01325ee:	00 00 00 
f01325f1:	c7 05 20 b9 85 f0 00 	movl   $0x0,0xf085b920
f01325f8:	00 00 00 
	for(int i = 0; i<n;i++)
f01325fb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0132602:	e9 9e 00 00 00       	jmp    f01326a5 <initialize_MemBlocksList+0xd4>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[i]));
f0132607:	a1 54 b8 85 f0       	mov    0xf085b854,%eax
f013260c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013260f:	c1 e2 04             	shl    $0x4,%edx
f0132612:	01 d0                	add    %edx,%eax
f0132614:	85 c0                	test   %eax,%eax
f0132616:	75 14                	jne    f013262c <initialize_MemBlocksList+0x5b>
f0132618:	83 ec 04             	sub    $0x4,%esp
f013261b:	68 24 d7 13 f0       	push   $0xf013d724
f0132620:	6a 47                	push   $0x47
f0132622:	68 47 d7 13 f0       	push   $0xf013d747
f0132627:	e8 d9 db fc ff       	call   f0100205 <_panic>
f013262c:	a1 54 b8 85 f0       	mov    0xf085b854,%eax
f0132631:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132634:	c1 e2 04             	shl    $0x4,%edx
f0132637:	01 d0                	add    %edx,%eax
f0132639:	8b 15 14 b9 85 f0    	mov    0xf085b914,%edx
f013263f:	89 10                	mov    %edx,(%eax)
f0132641:	8b 00                	mov    (%eax),%eax
f0132643:	85 c0                	test   %eax,%eax
f0132645:	74 18                	je     f013265f <initialize_MemBlocksList+0x8e>
f0132647:	a1 14 b9 85 f0       	mov    0xf085b914,%eax
f013264c:	8b 15 54 b8 85 f0    	mov    0xf085b854,%edx
f0132652:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0132655:	c1 e1 04             	shl    $0x4,%ecx
f0132658:	01 ca                	add    %ecx,%edx
f013265a:	89 50 04             	mov    %edx,0x4(%eax)
f013265d:	eb 12                	jmp    f0132671 <initialize_MemBlocksList+0xa0>
f013265f:	a1 54 b8 85 f0       	mov    0xf085b854,%eax
f0132664:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132667:	c1 e2 04             	shl    $0x4,%edx
f013266a:	01 d0                	add    %edx,%eax
f013266c:	a3 18 b9 85 f0       	mov    %eax,0xf085b918
f0132671:	a1 54 b8 85 f0       	mov    0xf085b854,%eax
f0132676:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132679:	c1 e2 04             	shl    $0x4,%edx
f013267c:	01 d0                	add    %edx,%eax
f013267e:	a3 14 b9 85 f0       	mov    %eax,0xf085b914
f0132683:	a1 54 b8 85 f0       	mov    0xf085b854,%eax
f0132688:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013268b:	c1 e2 04             	shl    $0x4,%edx
f013268e:	01 d0                	add    %edx,%eax
f0132690:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132697:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f013269c:	40                   	inc    %eax
f013269d:	a3 20 b9 85 f0       	mov    %eax,0xf085b920
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");
	uint32 n = numOfBlocks;

	LIST_INIT(&AvailableMemBlocksList);
	for(int i = 0; i<n;i++)
f01326a2:	ff 45 f4             	incl   -0xc(%ebp)
f01326a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01326a8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01326ab:	0f 82 56 ff ff ff    	jb     f0132607 <initialize_MemBlocksList+0x36>
	{
		LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[i]));
	}
}
f01326b1:	90                   	nop
f01326b2:	c9                   	leave  
f01326b3:	c3                   	ret    

f01326b4 <find_block>:

//===============================
// [2] FIND BLOCK:
//===============================
struct MemBlock *find_block(struct MemBlock_List *blockList, uint32 va)
{
f01326b4:	55                   	push   %ebp
f01326b5:	89 e5                	mov    %esp,%ebp
f01326b7:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");
	uint32 virAddress = va;
f01326ba:	8b 45 0c             	mov    0xc(%ebp),%eax
f01326bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct MemBlock* blk;
	int found = 0;
f01326c0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(blk, &(AllocMemBlocksList))
f01326c7:	a1 44 b8 85 f0       	mov    0xf085b844,%eax
f01326cc:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01326cf:	eb 23                	jmp    f01326f4 <find_block+0x40>
	{
		if(blk->sva == virAddress)
f01326d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01326d4:	8b 40 08             	mov    0x8(%eax),%eax
f01326d7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01326da:	75 09                	jne    f01326e5 <find_block+0x31>
		{
			found = 1;
f01326dc:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
			break;
f01326e3:	eb 35                	jmp    f013271a <find_block+0x66>
		}
		else
		{
			found = 0;
f01326e5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	//panic("find_block() is not implemented yet...!!");
	uint32 virAddress = va;
	struct MemBlock* blk;
	int found = 0;

	LIST_FOREACH(blk, &(AllocMemBlocksList))
f01326ec:	a1 4c b8 85 f0       	mov    0xf085b84c,%eax
f01326f1:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01326f4:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01326f8:	74 07                	je     f0132701 <find_block+0x4d>
f01326fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01326fd:	8b 00                	mov    (%eax),%eax
f01326ff:	eb 05                	jmp    f0132706 <find_block+0x52>
f0132701:	b8 00 00 00 00       	mov    $0x0,%eax
f0132706:	a3 4c b8 85 f0       	mov    %eax,0xf085b84c
f013270b:	a1 4c b8 85 f0       	mov    0xf085b84c,%eax
f0132710:	85 c0                	test   %eax,%eax
f0132712:	75 bd                	jne    f01326d1 <find_block+0x1d>
f0132714:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0132718:	75 b7                	jne    f01326d1 <find_block+0x1d>
		{
			found = 0;
			continue;
		}
	}
	if(found == 1)
f013271a:	83 7d f8 01          	cmpl   $0x1,-0x8(%ebp)
f013271e:	75 05                	jne    f0132725 <find_block+0x71>
	{
		return blk;
f0132720:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0132723:	eb 05                	jmp    f013272a <find_block+0x76>
	}
	else
	{
		return NULL;
f0132725:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f013272a:	c9                   	leave  
f013272b:	c3                   	ret    

f013272c <insert_sorted_allocList>:

//=========================================
// [3] INSERT BLOCK IN ALLOC LIST [SORTED]:
//=========================================
void insert_sorted_allocList(struct MemBlock *blockToInsert)
{
f013272c:	55                   	push   %ebp
f013272d:	89 e5                	mov    %esp,%ebp
f013272f:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_allocList
	// Write your code here, remove the panic and write your code
	//panic("insert_sorted_allocList() is not implemented yet...!!");
	struct MemBlock* blk;
	struct MemBlock* newblk = blockToInsert;
f0132732:	8b 45 08             	mov    0x8(%ebp),%eax
f0132735:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if((LIST_EMPTY(&AllocMemBlocksList)) || (newblk->sva < LIST_FIRST(&AllocMemBlocksList)->sva))
f0132738:	a1 44 b8 85 f0       	mov    0xf085b844,%eax
f013273d:	85 c0                	test   %eax,%eax
f013273f:	74 12                	je     f0132753 <insert_sorted_allocList+0x27>
f0132741:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132744:	8b 50 08             	mov    0x8(%eax),%edx
f0132747:	a1 44 b8 85 f0       	mov    0xf085b844,%eax
f013274c:	8b 40 08             	mov    0x8(%eax),%eax
f013274f:	39 c2                	cmp    %eax,%edx
f0132751:	73 65                	jae    f01327b8 <insert_sorted_allocList+0x8c>
	{
		LIST_INSERT_HEAD(&(AllocMemBlocksList), newblk);
f0132753:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132757:	75 14                	jne    f013276d <insert_sorted_allocList+0x41>
f0132759:	83 ec 04             	sub    $0x4,%esp
f013275c:	68 24 d7 13 f0       	push   $0xf013d724
f0132761:	6a 7b                	push   $0x7b
f0132763:	68 47 d7 13 f0       	push   $0xf013d747
f0132768:	e8 98 da fc ff       	call   f0100205 <_panic>
f013276d:	8b 15 44 b8 85 f0    	mov    0xf085b844,%edx
f0132773:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132776:	89 10                	mov    %edx,(%eax)
f0132778:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013277b:	8b 00                	mov    (%eax),%eax
f013277d:	85 c0                	test   %eax,%eax
f013277f:	74 0d                	je     f013278e <insert_sorted_allocList+0x62>
f0132781:	a1 44 b8 85 f0       	mov    0xf085b844,%eax
f0132786:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132789:	89 50 04             	mov    %edx,0x4(%eax)
f013278c:	eb 08                	jmp    f0132796 <insert_sorted_allocList+0x6a>
f013278e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132791:	a3 48 b8 85 f0       	mov    %eax,0xf085b848
f0132796:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132799:	a3 44 b8 85 f0       	mov    %eax,0xf085b844
f013279e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01327a1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01327a8:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f01327ad:	40                   	inc    %eax
f01327ae:	a3 50 b8 85 f0       	mov    %eax,0xf085b850
f01327b3:	e9 5f 01 00 00       	jmp    f0132917 <insert_sorted_allocList+0x1eb>
	}
	else if(newblk->sva > LIST_LAST(&AllocMemBlocksList)->sva)
f01327b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01327bb:	8b 50 08             	mov    0x8(%eax),%edx
f01327be:	a1 48 b8 85 f0       	mov    0xf085b848,%eax
f01327c3:	8b 40 08             	mov    0x8(%eax),%eax
f01327c6:	39 c2                	cmp    %eax,%edx
f01327c8:	76 65                	jbe    f013282f <insert_sorted_allocList+0x103>
	{
		LIST_INSERT_TAIL(&AllocMemBlocksList, newblk);
f01327ca:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01327ce:	75 14                	jne    f01327e4 <insert_sorted_allocList+0xb8>
f01327d0:	83 ec 04             	sub    $0x4,%esp
f01327d3:	68 60 d7 13 f0       	push   $0xf013d760
f01327d8:	6a 7f                	push   $0x7f
f01327da:	68 47 d7 13 f0       	push   $0xf013d747
f01327df:	e8 21 da fc ff       	call   f0100205 <_panic>
f01327e4:	8b 15 48 b8 85 f0    	mov    0xf085b848,%edx
f01327ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01327ed:	89 50 04             	mov    %edx,0x4(%eax)
f01327f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01327f3:	8b 40 04             	mov    0x4(%eax),%eax
f01327f6:	85 c0                	test   %eax,%eax
f01327f8:	74 0c                	je     f0132806 <insert_sorted_allocList+0xda>
f01327fa:	a1 48 b8 85 f0       	mov    0xf085b848,%eax
f01327ff:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132802:	89 10                	mov    %edx,(%eax)
f0132804:	eb 08                	jmp    f013280e <insert_sorted_allocList+0xe2>
f0132806:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132809:	a3 44 b8 85 f0       	mov    %eax,0xf085b844
f013280e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132811:	a3 48 b8 85 f0       	mov    %eax,0xf085b848
f0132816:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132819:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013281f:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f0132824:	40                   	inc    %eax
f0132825:	a3 50 b8 85 f0       	mov    %eax,0xf085b850
				LIST_INSERT_AFTER(&AllocMemBlocksList, blk, newblk);
				break;
			}
		}
	}
}
f013282a:	e9 e8 00 00 00       	jmp    f0132917 <insert_sorted_allocList+0x1eb>
	{
		LIST_INSERT_TAIL(&AllocMemBlocksList, newblk);
	}
	else
	{
		LIST_FOREACH(blk, &AllocMemBlocksList)
f013282f:	a1 44 b8 85 f0       	mov    0xf085b844,%eax
f0132834:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132837:	e9 ab 00 00 00       	jmp    f01328e7 <insert_sorted_allocList+0x1bb>
		{
			if(blk->prev_next_info.le_next != NULL && newblk->sva > blk->sva  && newblk->sva < blk->prev_next_info.le_next->sva)
f013283c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013283f:	8b 00                	mov    (%eax),%eax
f0132841:	85 c0                	test   %eax,%eax
f0132843:	0f 84 96 00 00 00    	je     f01328df <insert_sorted_allocList+0x1b3>
f0132849:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013284c:	8b 50 08             	mov    0x8(%eax),%edx
f013284f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132852:	8b 40 08             	mov    0x8(%eax),%eax
f0132855:	39 c2                	cmp    %eax,%edx
f0132857:	0f 86 82 00 00 00    	jbe    f01328df <insert_sorted_allocList+0x1b3>
f013285d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132860:	8b 50 08             	mov    0x8(%eax),%edx
f0132863:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132866:	8b 00                	mov    (%eax),%eax
f0132868:	8b 40 08             	mov    0x8(%eax),%eax
f013286b:	39 c2                	cmp    %eax,%edx
f013286d:	73 70                	jae    f01328df <insert_sorted_allocList+0x1b3>
			{
				LIST_INSERT_AFTER(&AllocMemBlocksList, blk, newblk);
f013286f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132873:	74 06                	je     f013287b <insert_sorted_allocList+0x14f>
f0132875:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132879:	75 17                	jne    f0132892 <insert_sorted_allocList+0x166>
f013287b:	83 ec 04             	sub    $0x4,%esp
f013287e:	68 84 d7 13 f0       	push   $0xf013d784
f0132883:	68 87 00 00 00       	push   $0x87
f0132888:	68 47 d7 13 f0       	push   $0xf013d747
f013288d:	e8 73 d9 fc ff       	call   f0100205 <_panic>
f0132892:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132895:	8b 10                	mov    (%eax),%edx
f0132897:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013289a:	89 10                	mov    %edx,(%eax)
f013289c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013289f:	8b 00                	mov    (%eax),%eax
f01328a1:	85 c0                	test   %eax,%eax
f01328a3:	74 0b                	je     f01328b0 <insert_sorted_allocList+0x184>
f01328a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328a8:	8b 00                	mov    (%eax),%eax
f01328aa:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01328ad:	89 50 04             	mov    %edx,0x4(%eax)
f01328b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328b3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01328b6:	89 10                	mov    %edx,(%eax)
f01328b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01328bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01328be:	89 50 04             	mov    %edx,0x4(%eax)
f01328c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01328c4:	8b 00                	mov    (%eax),%eax
f01328c6:	85 c0                	test   %eax,%eax
f01328c8:	75 08                	jne    f01328d2 <insert_sorted_allocList+0x1a6>
f01328ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01328cd:	a3 48 b8 85 f0       	mov    %eax,0xf085b848
f01328d2:	a1 50 b8 85 f0       	mov    0xf085b850,%eax
f01328d7:	40                   	inc    %eax
f01328d8:	a3 50 b8 85 f0       	mov    %eax,0xf085b850
				break;
f01328dd:	eb 38                	jmp    f0132917 <insert_sorted_allocList+0x1eb>
	{
		LIST_INSERT_TAIL(&AllocMemBlocksList, newblk);
	}
	else
	{
		LIST_FOREACH(blk, &AllocMemBlocksList)
f01328df:	a1 4c b8 85 f0       	mov    0xf085b84c,%eax
f01328e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01328e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01328eb:	74 07                	je     f01328f4 <insert_sorted_allocList+0x1c8>
f01328ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328f0:	8b 00                	mov    (%eax),%eax
f01328f2:	eb 05                	jmp    f01328f9 <insert_sorted_allocList+0x1cd>
f01328f4:	b8 00 00 00 00       	mov    $0x0,%eax
f01328f9:	a3 4c b8 85 f0       	mov    %eax,0xf085b84c
f01328fe:	a1 4c b8 85 f0       	mov    0xf085b84c,%eax
f0132903:	85 c0                	test   %eax,%eax
f0132905:	0f 85 31 ff ff ff    	jne    f013283c <insert_sorted_allocList+0x110>
f013290b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013290f:	0f 85 27 ff ff ff    	jne    f013283c <insert_sorted_allocList+0x110>
				LIST_INSERT_AFTER(&AllocMemBlocksList, blk, newblk);
				break;
			}
		}
	}
}
f0132915:	eb 00                	jmp    f0132917 <insert_sorted_allocList+0x1eb>
f0132917:	90                   	nop
f0132918:	c9                   	leave  
f0132919:	c3                   	ret    

f013291a <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
struct MemBlock *alloc_block_FF(uint32 size)
{
f013291a:	55                   	push   %ebp
f013291b:	89 e5                	mov    %esp,%ebp
f013291d:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_FF
	// Write your code here, remove the panic and write your code
	//panic("alloc_block_FF() is not implemented yet...!!");
	uint32 versize = size;
f0132920:	8b 45 08             	mov    0x8(%ebp),%eax
f0132923:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock* blk;
	struct MemBlock* newblk = LIST_FIRST(&AvailableMemBlocksList);
f0132926:	a1 14 b9 85 f0       	mov    0xf085b914,%eax
f013292b:	89 45 ec             	mov    %eax,-0x14(%ebp)

	LIST_FOREACH(blk,&FreeMemBlocksList)
f013292e:	a1 e0 b8 85 f0       	mov    0xf085b8e0,%eax
f0132933:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132936:	e9 77 01 00 00       	jmp    f0132ab2 <alloc_block_FF+0x198>
	{
		if(blk->size == versize)
f013293b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013293e:	8b 40 0c             	mov    0xc(%eax),%eax
f0132941:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0132944:	0f 85 8a 00 00 00    	jne    f01329d4 <alloc_block_FF+0xba>
		{
			LIST_REMOVE(&FreeMemBlocksList,blk);
f013294a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013294e:	75 17                	jne    f0132967 <alloc_block_FF+0x4d>
f0132950:	83 ec 04             	sub    $0x4,%esp
f0132953:	68 b8 d7 13 f0       	push   $0xf013d7b8
f0132958:	68 9e 00 00 00       	push   $0x9e
f013295d:	68 47 d7 13 f0       	push   $0xf013d747
f0132962:	e8 9e d8 fc ff       	call   f0100205 <_panic>
f0132967:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013296a:	8b 00                	mov    (%eax),%eax
f013296c:	85 c0                	test   %eax,%eax
f013296e:	74 10                	je     f0132980 <alloc_block_FF+0x66>
f0132970:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132973:	8b 00                	mov    (%eax),%eax
f0132975:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132978:	8b 52 04             	mov    0x4(%edx),%edx
f013297b:	89 50 04             	mov    %edx,0x4(%eax)
f013297e:	eb 0b                	jmp    f013298b <alloc_block_FF+0x71>
f0132980:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132983:	8b 40 04             	mov    0x4(%eax),%eax
f0132986:	a3 e4 b8 85 f0       	mov    %eax,0xf085b8e4
f013298b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013298e:	8b 40 04             	mov    0x4(%eax),%eax
f0132991:	85 c0                	test   %eax,%eax
f0132993:	74 0f                	je     f01329a4 <alloc_block_FF+0x8a>
f0132995:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132998:	8b 40 04             	mov    0x4(%eax),%eax
f013299b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013299e:	8b 12                	mov    (%edx),%edx
f01329a0:	89 10                	mov    %edx,(%eax)
f01329a2:	eb 0a                	jmp    f01329ae <alloc_block_FF+0x94>
f01329a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329a7:	8b 00                	mov    (%eax),%eax
f01329a9:	a3 e0 b8 85 f0       	mov    %eax,0xf085b8e0
f01329ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329b1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01329b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329ba:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01329c1:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f01329c6:	48                   	dec    %eax
f01329c7:	a3 ec b8 85 f0       	mov    %eax,0xf085b8ec
			return blk;
f01329cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329cf:	e9 11 01 00 00       	jmp    f0132ae5 <alloc_block_FF+0x1cb>
		}
		else if(blk->size > versize)
f01329d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329d7:	8b 40 0c             	mov    0xc(%eax),%eax
f01329da:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01329dd:	0f 86 c7 00 00 00    	jbe    f0132aaa <alloc_block_FF+0x190>
		{
			LIST_REMOVE(&AvailableMemBlocksList,newblk);
f01329e3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01329e7:	75 17                	jne    f0132a00 <alloc_block_FF+0xe6>
f01329e9:	83 ec 04             	sub    $0x4,%esp
f01329ec:	68 b8 d7 13 f0       	push   $0xf013d7b8
f01329f1:	68 a3 00 00 00       	push   $0xa3
f01329f6:	68 47 d7 13 f0       	push   $0xf013d747
f01329fb:	e8 05 d8 fc ff       	call   f0100205 <_panic>
f0132a00:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a03:	8b 00                	mov    (%eax),%eax
f0132a05:	85 c0                	test   %eax,%eax
f0132a07:	74 10                	je     f0132a19 <alloc_block_FF+0xff>
f0132a09:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a0c:	8b 00                	mov    (%eax),%eax
f0132a0e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132a11:	8b 52 04             	mov    0x4(%edx),%edx
f0132a14:	89 50 04             	mov    %edx,0x4(%eax)
f0132a17:	eb 0b                	jmp    f0132a24 <alloc_block_FF+0x10a>
f0132a19:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a1c:	8b 40 04             	mov    0x4(%eax),%eax
f0132a1f:	a3 18 b9 85 f0       	mov    %eax,0xf085b918
f0132a24:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a27:	8b 40 04             	mov    0x4(%eax),%eax
f0132a2a:	85 c0                	test   %eax,%eax
f0132a2c:	74 0f                	je     f0132a3d <alloc_block_FF+0x123>
f0132a2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a31:	8b 40 04             	mov    0x4(%eax),%eax
f0132a34:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132a37:	8b 12                	mov    (%edx),%edx
f0132a39:	89 10                	mov    %edx,(%eax)
f0132a3b:	eb 0a                	jmp    f0132a47 <alloc_block_FF+0x12d>
f0132a3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a40:	8b 00                	mov    (%eax),%eax
f0132a42:	a3 14 b9 85 f0       	mov    %eax,0xf085b914
f0132a47:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a4a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132a50:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a53:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132a5a:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f0132a5f:	48                   	dec    %eax
f0132a60:	a3 20 b9 85 f0       	mov    %eax,0xf085b920
			newblk->size = versize;
f0132a65:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a68:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132a6b:	89 50 0c             	mov    %edx,0xc(%eax)
			blk->size = blk->size-versize;
f0132a6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a71:	8b 40 0c             	mov    0xc(%eax),%eax
f0132a74:	2b 45 f0             	sub    -0x10(%ebp),%eax
f0132a77:	89 c2                	mov    %eax,%edx
f0132a79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a7c:	89 50 0c             	mov    %edx,0xc(%eax)
			uint32 newveradd = blk->sva;
f0132a7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a82:	8b 40 08             	mov    0x8(%eax),%eax
f0132a85:	89 45 e8             	mov    %eax,-0x18(%ebp)
			blk->sva+=newblk->size;
f0132a88:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a8b:	8b 50 08             	mov    0x8(%eax),%edx
f0132a8e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a91:	8b 40 0c             	mov    0xc(%eax),%eax
f0132a94:	01 c2                	add    %eax,%edx
f0132a96:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132a99:	89 50 08             	mov    %edx,0x8(%eax)
			newblk->sva = newveradd;
f0132a9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a9f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132aa2:	89 50 08             	mov    %edx,0x8(%eax)
			return newblk;
f0132aa5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132aa8:	eb 3b                	jmp    f0132ae5 <alloc_block_FF+0x1cb>
	//panic("alloc_block_FF() is not implemented yet...!!");
	uint32 versize = size;
	struct MemBlock* blk;
	struct MemBlock* newblk = LIST_FIRST(&AvailableMemBlocksList);

	LIST_FOREACH(blk,&FreeMemBlocksList)
f0132aaa:	a1 e8 b8 85 f0       	mov    0xf085b8e8,%eax
f0132aaf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132ab2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132ab6:	74 07                	je     f0132abf <alloc_block_FF+0x1a5>
f0132ab8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132abb:	8b 00                	mov    (%eax),%eax
f0132abd:	eb 05                	jmp    f0132ac4 <alloc_block_FF+0x1aa>
f0132abf:	b8 00 00 00 00       	mov    $0x0,%eax
f0132ac4:	a3 e8 b8 85 f0       	mov    %eax,0xf085b8e8
f0132ac9:	a1 e8 b8 85 f0       	mov    0xf085b8e8,%eax
f0132ace:	85 c0                	test   %eax,%eax
f0132ad0:	0f 85 65 fe ff ff    	jne    f013293b <alloc_block_FF+0x21>
f0132ad6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132ada:	0f 85 5b fe ff ff    	jne    f013293b <alloc_block_FF+0x21>
			blk->sva+=newblk->size;
			newblk->sva = newveradd;
			return newblk;
		}
	}
	return NULL;
f0132ae0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132ae5:	c9                   	leave  
f0132ae6:	c3                   	ret    

f0132ae7 <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
struct MemBlock *alloc_block_BF(uint32 size)
{
f0132ae7:	55                   	push   %ebp
f0132ae8:	89 e5                	mov    %esp,%ebp
f0132aea:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_BF
	// Write your code here, remove the panic and write your code
	//panic("alloc_block_BF() is not implemented yet...!!");
	uint32 versize=size;
f0132aed:	8b 45 08             	mov    0x8(%ebp),%eax
f0132af0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	struct MemBlock* blk;
	struct MemBlock* newblk=LIST_FIRST(&AvailableMemBlocksList);
f0132af3:	a1 14 b9 85 f0       	mov    0xf085b914,%eax
f0132af8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 newveradd;
	uint32 newsize;
	int size_free = LIST_SIZE(&FreeMemBlocksList);
f0132afb:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f0132b00:	89 45 e0             	mov    %eax,-0x20(%ebp)

	LIST_FOREACH(blk, &FreeMemBlocksList)
f0132b03:	a1 e0 b8 85 f0       	mov    0xf085b8e0,%eax
f0132b08:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132b0b:	e9 a1 00 00 00       	jmp    f0132bb1 <alloc_block_BF+0xca>
	{
		if(blk->size == versize)
f0132b10:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b13:	8b 40 0c             	mov    0xc(%eax),%eax
f0132b16:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0132b19:	0f 85 8a 00 00 00    	jne    f0132ba9 <alloc_block_BF+0xc2>
		{
			LIST_REMOVE(&FreeMemBlocksList, blk);
f0132b1f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132b23:	75 17                	jne    f0132b3c <alloc_block_BF+0x55>
f0132b25:	83 ec 04             	sub    $0x4,%esp
f0132b28:	68 b8 d7 13 f0       	push   $0xf013d7b8
f0132b2d:	68 c2 00 00 00       	push   $0xc2
f0132b32:	68 47 d7 13 f0       	push   $0xf013d747
f0132b37:	e8 c9 d6 fc ff       	call   f0100205 <_panic>
f0132b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b3f:	8b 00                	mov    (%eax),%eax
f0132b41:	85 c0                	test   %eax,%eax
f0132b43:	74 10                	je     f0132b55 <alloc_block_BF+0x6e>
f0132b45:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b48:	8b 00                	mov    (%eax),%eax
f0132b4a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132b4d:	8b 52 04             	mov    0x4(%edx),%edx
f0132b50:	89 50 04             	mov    %edx,0x4(%eax)
f0132b53:	eb 0b                	jmp    f0132b60 <alloc_block_BF+0x79>
f0132b55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b58:	8b 40 04             	mov    0x4(%eax),%eax
f0132b5b:	a3 e4 b8 85 f0       	mov    %eax,0xf085b8e4
f0132b60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b63:	8b 40 04             	mov    0x4(%eax),%eax
f0132b66:	85 c0                	test   %eax,%eax
f0132b68:	74 0f                	je     f0132b79 <alloc_block_BF+0x92>
f0132b6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b6d:	8b 40 04             	mov    0x4(%eax),%eax
f0132b70:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132b73:	8b 12                	mov    (%edx),%edx
f0132b75:	89 10                	mov    %edx,(%eax)
f0132b77:	eb 0a                	jmp    f0132b83 <alloc_block_BF+0x9c>
f0132b79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b7c:	8b 00                	mov    (%eax),%eax
f0132b7e:	a3 e0 b8 85 f0       	mov    %eax,0xf085b8e0
f0132b83:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b86:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132b8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b8f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132b96:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f0132b9b:	48                   	dec    %eax
f0132b9c:	a3 ec b8 85 f0       	mov    %eax,0xf085b8ec
			return blk;
f0132ba1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ba4:	e9 11 02 00 00       	jmp    f0132dba <alloc_block_BF+0x2d3>
	struct MemBlock* newblk=LIST_FIRST(&AvailableMemBlocksList);
	uint32 newveradd;
	uint32 newsize;
	int size_free = LIST_SIZE(&FreeMemBlocksList);

	LIST_FOREACH(blk, &FreeMemBlocksList)
f0132ba9:	a1 e8 b8 85 f0       	mov    0xf085b8e8,%eax
f0132bae:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132bb1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132bb5:	74 07                	je     f0132bbe <alloc_block_BF+0xd7>
f0132bb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132bba:	8b 00                	mov    (%eax),%eax
f0132bbc:	eb 05                	jmp    f0132bc3 <alloc_block_BF+0xdc>
f0132bbe:	b8 00 00 00 00       	mov    $0x0,%eax
f0132bc3:	a3 e8 b8 85 f0       	mov    %eax,0xf085b8e8
f0132bc8:	a1 e8 b8 85 f0       	mov    0xf085b8e8,%eax
f0132bcd:	85 c0                	test   %eax,%eax
f0132bcf:	0f 85 3b ff ff ff    	jne    f0132b10 <alloc_block_BF+0x29>
f0132bd5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132bd9:	0f 85 31 ff ff ff    	jne    f0132b10 <alloc_block_BF+0x29>
		{
			LIST_REMOVE(&FreeMemBlocksList, blk);
			return blk;
		}
	}
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0132bdf:	a1 e0 b8 85 f0       	mov    0xf085b8e0,%eax
f0132be4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132be7:	eb 27                	jmp    f0132c10 <alloc_block_BF+0x129>
	{
		if(blk->size > versize)
f0132be9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132bec:	8b 40 0c             	mov    0xc(%eax),%eax
f0132bef:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0132bf2:	76 14                	jbe    f0132c08 <alloc_block_BF+0x121>
		{
			newsize = blk->size;
f0132bf4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132bf7:	8b 40 0c             	mov    0xc(%eax),%eax
f0132bfa:	89 45 ec             	mov    %eax,-0x14(%ebp)
			newveradd = blk->sva;
f0132bfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c00:	8b 40 08             	mov    0x8(%eax),%eax
f0132c03:	89 45 f0             	mov    %eax,-0x10(%ebp)
			break;
f0132c06:	eb 2e                	jmp    f0132c36 <alloc_block_BF+0x14f>
		{
			LIST_REMOVE(&FreeMemBlocksList, blk);
			return blk;
		}
	}
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0132c08:	a1 e8 b8 85 f0       	mov    0xf085b8e8,%eax
f0132c0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132c10:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132c14:	74 07                	je     f0132c1d <alloc_block_BF+0x136>
f0132c16:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c19:	8b 00                	mov    (%eax),%eax
f0132c1b:	eb 05                	jmp    f0132c22 <alloc_block_BF+0x13b>
f0132c1d:	b8 00 00 00 00       	mov    $0x0,%eax
f0132c22:	a3 e8 b8 85 f0       	mov    %eax,0xf085b8e8
f0132c27:	a1 e8 b8 85 f0       	mov    0xf085b8e8,%eax
f0132c2c:	85 c0                	test   %eax,%eax
f0132c2e:	75 b9                	jne    f0132be9 <alloc_block_BF+0x102>
f0132c30:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132c34:	75 b3                	jne    f0132be9 <alloc_block_BF+0x102>
			newsize = blk->size;
			newveradd = blk->sva;
			break;
		}
	}
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0132c36:	a1 e0 b8 85 f0       	mov    0xf085b8e0,%eax
f0132c3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132c3e:	eb 30                	jmp    f0132c70 <alloc_block_BF+0x189>
	{
		if(newsize > blk->size && blk->size > versize)
f0132c40:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c43:	8b 40 0c             	mov    0xc(%eax),%eax
f0132c46:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0132c49:	73 1d                	jae    f0132c68 <alloc_block_BF+0x181>
f0132c4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c4e:	8b 40 0c             	mov    0xc(%eax),%eax
f0132c51:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0132c54:	76 12                	jbe    f0132c68 <alloc_block_BF+0x181>
		{
	       newsize = blk->size;
f0132c56:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c59:	8b 40 0c             	mov    0xc(%eax),%eax
f0132c5c:	89 45 ec             	mov    %eax,-0x14(%ebp)
		   newveradd = blk->sva;
f0132c5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c62:	8b 40 08             	mov    0x8(%eax),%eax
f0132c65:	89 45 f0             	mov    %eax,-0x10(%ebp)
			newsize = blk->size;
			newveradd = blk->sva;
			break;
		}
	}
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0132c68:	a1 e8 b8 85 f0       	mov    0xf085b8e8,%eax
f0132c6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132c70:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132c74:	74 07                	je     f0132c7d <alloc_block_BF+0x196>
f0132c76:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132c79:	8b 00                	mov    (%eax),%eax
f0132c7b:	eb 05                	jmp    f0132c82 <alloc_block_BF+0x19b>
f0132c7d:	b8 00 00 00 00       	mov    $0x0,%eax
f0132c82:	a3 e8 b8 85 f0       	mov    %eax,0xf085b8e8
f0132c87:	a1 e8 b8 85 f0       	mov    0xf085b8e8,%eax
f0132c8c:	85 c0                	test   %eax,%eax
f0132c8e:	75 b0                	jne    f0132c40 <alloc_block_BF+0x159>
f0132c90:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132c94:	75 aa                	jne    f0132c40 <alloc_block_BF+0x159>
		{
	       newsize = blk->size;
		   newveradd = blk->sva;
		}
	}
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0132c96:	a1 e0 b8 85 f0       	mov    0xf085b8e0,%eax
f0132c9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132c9e:	e9 e4 00 00 00       	jmp    f0132d87 <alloc_block_BF+0x2a0>
	{
		if(blk->size == newsize && blk->sva == newveradd)
f0132ca3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ca6:	8b 40 0c             	mov    0xc(%eax),%eax
f0132ca9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0132cac:	0f 85 cd 00 00 00    	jne    f0132d7f <alloc_block_BF+0x298>
f0132cb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132cb5:	8b 40 08             	mov    0x8(%eax),%eax
f0132cb8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0132cbb:	0f 85 be 00 00 00    	jne    f0132d7f <alloc_block_BF+0x298>
		{
			LIST_REMOVE(&AvailableMemBlocksList, newblk);
f0132cc1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0132cc5:	75 17                	jne    f0132cde <alloc_block_BF+0x1f7>
f0132cc7:	83 ec 04             	sub    $0x4,%esp
f0132cca:	68 b8 d7 13 f0       	push   $0xf013d7b8
f0132ccf:	68 db 00 00 00       	push   $0xdb
f0132cd4:	68 47 d7 13 f0       	push   $0xf013d747
f0132cd9:	e8 27 d5 fc ff       	call   f0100205 <_panic>
f0132cde:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132ce1:	8b 00                	mov    (%eax),%eax
f0132ce3:	85 c0                	test   %eax,%eax
f0132ce5:	74 10                	je     f0132cf7 <alloc_block_BF+0x210>
f0132ce7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132cea:	8b 00                	mov    (%eax),%eax
f0132cec:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0132cef:	8b 52 04             	mov    0x4(%edx),%edx
f0132cf2:	89 50 04             	mov    %edx,0x4(%eax)
f0132cf5:	eb 0b                	jmp    f0132d02 <alloc_block_BF+0x21b>
f0132cf7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132cfa:	8b 40 04             	mov    0x4(%eax),%eax
f0132cfd:	a3 18 b9 85 f0       	mov    %eax,0xf085b918
f0132d02:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132d05:	8b 40 04             	mov    0x4(%eax),%eax
f0132d08:	85 c0                	test   %eax,%eax
f0132d0a:	74 0f                	je     f0132d1b <alloc_block_BF+0x234>
f0132d0c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132d0f:	8b 40 04             	mov    0x4(%eax),%eax
f0132d12:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0132d15:	8b 12                	mov    (%edx),%edx
f0132d17:	89 10                	mov    %edx,(%eax)
f0132d19:	eb 0a                	jmp    f0132d25 <alloc_block_BF+0x23e>
f0132d1b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132d1e:	8b 00                	mov    (%eax),%eax
f0132d20:	a3 14 b9 85 f0       	mov    %eax,0xf085b914
f0132d25:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132d28:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132d2e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132d31:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132d38:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f0132d3d:	48                   	dec    %eax
f0132d3e:	a3 20 b9 85 f0       	mov    %eax,0xf085b920
			newblk->size = versize;
f0132d43:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132d46:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132d49:	89 50 0c             	mov    %edx,0xc(%eax)
			newblk->sva = newveradd;
f0132d4c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132d4f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132d52:	89 50 08             	mov    %edx,0x8(%eax)
			blk->size = blk->size - versize;
f0132d55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d58:	8b 40 0c             	mov    0xc(%eax),%eax
f0132d5b:	2b 45 e8             	sub    -0x18(%ebp),%eax
f0132d5e:	89 c2                	mov    %eax,%edx
f0132d60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d63:	89 50 0c             	mov    %edx,0xc(%eax)
			blk->sva+= newblk->size;
f0132d66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d69:	8b 50 08             	mov    0x8(%eax),%edx
f0132d6c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132d6f:	8b 40 0c             	mov    0xc(%eax),%eax
f0132d72:	01 c2                	add    %eax,%edx
f0132d74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d77:	89 50 08             	mov    %edx,0x8(%eax)
			return newblk;
f0132d7a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0132d7d:	eb 3b                	jmp    f0132dba <alloc_block_BF+0x2d3>
		{
	       newsize = blk->size;
		   newveradd = blk->sva;
		}
	}
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0132d7f:	a1 e8 b8 85 f0       	mov    0xf085b8e8,%eax
f0132d84:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132d87:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132d8b:	74 07                	je     f0132d94 <alloc_block_BF+0x2ad>
f0132d8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132d90:	8b 00                	mov    (%eax),%eax
f0132d92:	eb 05                	jmp    f0132d99 <alloc_block_BF+0x2b2>
f0132d94:	b8 00 00 00 00       	mov    $0x0,%eax
f0132d99:	a3 e8 b8 85 f0       	mov    %eax,0xf085b8e8
f0132d9e:	a1 e8 b8 85 f0       	mov    0xf085b8e8,%eax
f0132da3:	85 c0                	test   %eax,%eax
f0132da5:	0f 85 f8 fe ff ff    	jne    f0132ca3 <alloc_block_BF+0x1bc>
f0132dab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132daf:	0f 85 ee fe ff ff    	jne    f0132ca3 <alloc_block_BF+0x1bc>
			blk->size = blk->size - versize;
			blk->sva+= newblk->size;
			return newblk;
		}
	}
	return NULL;
f0132db5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132dba:	c9                   	leave  
f0132dbb:	c3                   	ret    

f0132dbc <alloc_block_NF>:
//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
struct MemBlock *last_allocate;
struct MemBlock *alloc_block_NF(uint32 size)
{
f0132dbc:	55                   	push   %ebp
f0132dbd:	89 e5                	mov    %esp,%ebp
f0132dbf:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your code
	//panic("alloc_block_NF() is not implemented yet...!!");
	uint32 versize = size;
f0132dc2:	8b 45 08             	mov    0x8(%ebp),%eax
f0132dc5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct MemBlock* blk;
	struct MemBlock* newblk = LIST_FIRST(&AvailableMemBlocksList);
f0132dc8:	a1 14 b9 85 f0       	mov    0xf085b914,%eax
f0132dcd:	89 45 ec             	mov    %eax,-0x14(%ebp)

	LIST_FOREACH(blk,&FreeMemBlocksList)
f0132dd0:	a1 e0 b8 85 f0       	mov    0xf085b8e0,%eax
f0132dd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132dd8:	e9 77 01 00 00       	jmp    f0132f54 <alloc_block_NF+0x198>
	{
		if(blk->size == versize)
f0132ddd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132de0:	8b 40 0c             	mov    0xc(%eax),%eax
f0132de3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0132de6:	0f 85 8a 00 00 00    	jne    f0132e76 <alloc_block_NF+0xba>
		{
			LIST_REMOVE(&FreeMemBlocksList,blk);
f0132dec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132df0:	75 17                	jne    f0132e09 <alloc_block_NF+0x4d>
f0132df2:	83 ec 04             	sub    $0x4,%esp
f0132df5:	68 b8 d7 13 f0       	push   $0xf013d7b8
f0132dfa:	68 f7 00 00 00       	push   $0xf7
f0132dff:	68 47 d7 13 f0       	push   $0xf013d747
f0132e04:	e8 fc d3 fc ff       	call   f0100205 <_panic>
f0132e09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e0c:	8b 00                	mov    (%eax),%eax
f0132e0e:	85 c0                	test   %eax,%eax
f0132e10:	74 10                	je     f0132e22 <alloc_block_NF+0x66>
f0132e12:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e15:	8b 00                	mov    (%eax),%eax
f0132e17:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132e1a:	8b 52 04             	mov    0x4(%edx),%edx
f0132e1d:	89 50 04             	mov    %edx,0x4(%eax)
f0132e20:	eb 0b                	jmp    f0132e2d <alloc_block_NF+0x71>
f0132e22:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e25:	8b 40 04             	mov    0x4(%eax),%eax
f0132e28:	a3 e4 b8 85 f0       	mov    %eax,0xf085b8e4
f0132e2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e30:	8b 40 04             	mov    0x4(%eax),%eax
f0132e33:	85 c0                	test   %eax,%eax
f0132e35:	74 0f                	je     f0132e46 <alloc_block_NF+0x8a>
f0132e37:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e3a:	8b 40 04             	mov    0x4(%eax),%eax
f0132e3d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132e40:	8b 12                	mov    (%edx),%edx
f0132e42:	89 10                	mov    %edx,(%eax)
f0132e44:	eb 0a                	jmp    f0132e50 <alloc_block_NF+0x94>
f0132e46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e49:	8b 00                	mov    (%eax),%eax
f0132e4b:	a3 e0 b8 85 f0       	mov    %eax,0xf085b8e0
f0132e50:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e53:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132e59:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e5c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132e63:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f0132e68:	48                   	dec    %eax
f0132e69:	a3 ec b8 85 f0       	mov    %eax,0xf085b8ec
			return blk;
f0132e6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e71:	e9 11 01 00 00       	jmp    f0132f87 <alloc_block_NF+0x1cb>
		}
		else if(blk->size > versize)
f0132e76:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132e79:	8b 40 0c             	mov    0xc(%eax),%eax
f0132e7c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0132e7f:	0f 86 c7 00 00 00    	jbe    f0132f4c <alloc_block_NF+0x190>
		{
			LIST_REMOVE(&AvailableMemBlocksList,newblk);
f0132e85:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0132e89:	75 17                	jne    f0132ea2 <alloc_block_NF+0xe6>
f0132e8b:	83 ec 04             	sub    $0x4,%esp
f0132e8e:	68 b8 d7 13 f0       	push   $0xf013d7b8
f0132e93:	68 fc 00 00 00       	push   $0xfc
f0132e98:	68 47 d7 13 f0       	push   $0xf013d747
f0132e9d:	e8 63 d3 fc ff       	call   f0100205 <_panic>
f0132ea2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132ea5:	8b 00                	mov    (%eax),%eax
f0132ea7:	85 c0                	test   %eax,%eax
f0132ea9:	74 10                	je     f0132ebb <alloc_block_NF+0xff>
f0132eab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132eae:	8b 00                	mov    (%eax),%eax
f0132eb0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132eb3:	8b 52 04             	mov    0x4(%edx),%edx
f0132eb6:	89 50 04             	mov    %edx,0x4(%eax)
f0132eb9:	eb 0b                	jmp    f0132ec6 <alloc_block_NF+0x10a>
f0132ebb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132ebe:	8b 40 04             	mov    0x4(%eax),%eax
f0132ec1:	a3 18 b9 85 f0       	mov    %eax,0xf085b918
f0132ec6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132ec9:	8b 40 04             	mov    0x4(%eax),%eax
f0132ecc:	85 c0                	test   %eax,%eax
f0132ece:	74 0f                	je     f0132edf <alloc_block_NF+0x123>
f0132ed0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132ed3:	8b 40 04             	mov    0x4(%eax),%eax
f0132ed6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132ed9:	8b 12                	mov    (%edx),%edx
f0132edb:	89 10                	mov    %edx,(%eax)
f0132edd:	eb 0a                	jmp    f0132ee9 <alloc_block_NF+0x12d>
f0132edf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132ee2:	8b 00                	mov    (%eax),%eax
f0132ee4:	a3 14 b9 85 f0       	mov    %eax,0xf085b914
f0132ee9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132eec:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132ef2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132ef5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132efc:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f0132f01:	48                   	dec    %eax
f0132f02:	a3 20 b9 85 f0       	mov    %eax,0xf085b920
			newblk->size = versize;
f0132f07:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132f0a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132f0d:	89 50 0c             	mov    %edx,0xc(%eax)
			blk->size = blk->size-versize;
f0132f10:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132f13:	8b 40 0c             	mov    0xc(%eax),%eax
f0132f16:	2b 45 f0             	sub    -0x10(%ebp),%eax
f0132f19:	89 c2                	mov    %eax,%edx
f0132f1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132f1e:	89 50 0c             	mov    %edx,0xc(%eax)
			uint32 newveradd = blk->sva;
f0132f21:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132f24:	8b 40 08             	mov    0x8(%eax),%eax
f0132f27:	89 45 e8             	mov    %eax,-0x18(%ebp)
			blk->sva+=newblk->size;
f0132f2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132f2d:	8b 50 08             	mov    0x8(%eax),%edx
f0132f30:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132f33:	8b 40 0c             	mov    0xc(%eax),%eax
f0132f36:	01 c2                	add    %eax,%edx
f0132f38:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132f3b:	89 50 08             	mov    %edx,0x8(%eax)
			newblk->sva = newveradd;
f0132f3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132f41:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132f44:	89 50 08             	mov    %edx,0x8(%eax)
			return newblk;
f0132f47:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132f4a:	eb 3b                	jmp    f0132f87 <alloc_block_NF+0x1cb>
	//panic("alloc_block_NF() is not implemented yet...!!");
	uint32 versize = size;
	struct MemBlock* blk;
	struct MemBlock* newblk = LIST_FIRST(&AvailableMemBlocksList);

	LIST_FOREACH(blk,&FreeMemBlocksList)
f0132f4c:	a1 e8 b8 85 f0       	mov    0xf085b8e8,%eax
f0132f51:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132f54:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132f58:	74 07                	je     f0132f61 <alloc_block_NF+0x1a5>
f0132f5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132f5d:	8b 00                	mov    (%eax),%eax
f0132f5f:	eb 05                	jmp    f0132f66 <alloc_block_NF+0x1aa>
f0132f61:	b8 00 00 00 00       	mov    $0x0,%eax
f0132f66:	a3 e8 b8 85 f0       	mov    %eax,0xf085b8e8
f0132f6b:	a1 e8 b8 85 f0       	mov    0xf085b8e8,%eax
f0132f70:	85 c0                	test   %eax,%eax
f0132f72:	0f 85 65 fe ff ff    	jne    f0132ddd <alloc_block_NF+0x21>
f0132f78:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132f7c:	0f 85 5b fe ff ff    	jne    f0132ddd <alloc_block_NF+0x21>
			blk->sva+=newblk->size;
			newblk->sva = newveradd;
			return newblk;
		}
	}
	return NULL;
f0132f82:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132f87:	c9                   	leave  
f0132f88:	c3                   	ret    

f0132f89 <addToAvailMemBlocksList>:

//===================================================
// [8] INSERT BLOCK (SORTED WITH MERGE) IN FREE LIST:
//===================================================
void addToAvailMemBlocksList(struct MemBlock *blockToInsert)
{
f0132f89:	55                   	push   %ebp
f0132f8a:	89 e5                	mov    %esp,%ebp
f0132f8c:	83 ec 08             	sub    $0x8,%esp
	blockToInsert->sva = 0;
f0132f8f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f92:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	blockToInsert->size = 0;
f0132f99:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f9c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	//add to avail
	LIST_INSERT_TAIL(&AvailableMemBlocksList, blockToInsert);
f0132fa3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132fa7:	75 17                	jne    f0132fc0 <addToAvailMemBlocksList+0x37>
f0132fa9:	83 ec 04             	sub    $0x4,%esp
f0132fac:	68 60 d7 13 f0       	push   $0xf013d760
f0132fb1:	68 10 01 00 00       	push   $0x110
f0132fb6:	68 47 d7 13 f0       	push   $0xf013d747
f0132fbb:	e8 45 d2 fc ff       	call   f0100205 <_panic>
f0132fc0:	8b 15 18 b9 85 f0    	mov    0xf085b918,%edx
f0132fc6:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fc9:	89 50 04             	mov    %edx,0x4(%eax)
f0132fcc:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fcf:	8b 40 04             	mov    0x4(%eax),%eax
f0132fd2:	85 c0                	test   %eax,%eax
f0132fd4:	74 0c                	je     f0132fe2 <addToAvailMemBlocksList+0x59>
f0132fd6:	a1 18 b9 85 f0       	mov    0xf085b918,%eax
f0132fdb:	8b 55 08             	mov    0x8(%ebp),%edx
f0132fde:	89 10                	mov    %edx,(%eax)
f0132fe0:	eb 08                	jmp    f0132fea <addToAvailMemBlocksList+0x61>
f0132fe2:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fe5:	a3 14 b9 85 f0       	mov    %eax,0xf085b914
f0132fea:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fed:	a3 18 b9 85 f0       	mov    %eax,0xf085b918
f0132ff2:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ff5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132ffb:	a1 20 b9 85 f0       	mov    0xf085b920,%eax
f0133000:	40                   	inc    %eax
f0133001:	a3 20 b9 85 f0       	mov    %eax,0xf085b920
}
f0133006:	90                   	nop
f0133007:	c9                   	leave  
f0133008:	c3                   	ret    

f0133009 <insert_sorted_with_merge_freeList>:
void insert_sorted_with_merge_freeList(struct MemBlock *blockToInsert)
{
f0133009:	55                   	push   %ebp
f013300a:	89 e5                	mov    %esp,%ebp
f013300c:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_with_merge_freeList
	// Write your code here, remove the panic and write your code

	struct MemBlock* last = LIST_LAST(&FreeMemBlocksList);
f013300f:	a1 e4 b8 85 f0       	mov    0xf085b8e4,%eax
f0133014:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//check if list empty
	if (LIST_SIZE(&(FreeMemBlocksList)) == 0)
f0133017:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f013301c:	85 c0                	test   %eax,%eax
f013301e:	75 68                	jne    f0133088 <insert_sorted_with_merge_freeList+0x7f>
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
f0133020:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0133024:	75 17                	jne    f013303d <insert_sorted_with_merge_freeList+0x34>
f0133026:	83 ec 04             	sub    $0x4,%esp
f0133029:	68 24 d7 13 f0       	push   $0xf013d724
f013302e:	68 1a 01 00 00       	push   $0x11a
f0133033:	68 47 d7 13 f0       	push   $0xf013d747
f0133038:	e8 c8 d1 fc ff       	call   f0100205 <_panic>
f013303d:	8b 15 e0 b8 85 f0    	mov    0xf085b8e0,%edx
f0133043:	8b 45 08             	mov    0x8(%ebp),%eax
f0133046:	89 10                	mov    %edx,(%eax)
f0133048:	8b 45 08             	mov    0x8(%ebp),%eax
f013304b:	8b 00                	mov    (%eax),%eax
f013304d:	85 c0                	test   %eax,%eax
f013304f:	74 0d                	je     f013305e <insert_sorted_with_merge_freeList+0x55>
f0133051:	a1 e0 b8 85 f0       	mov    0xf085b8e0,%eax
f0133056:	8b 55 08             	mov    0x8(%ebp),%edx
f0133059:	89 50 04             	mov    %edx,0x4(%eax)
f013305c:	eb 08                	jmp    f0133066 <insert_sorted_with_merge_freeList+0x5d>
f013305e:	8b 45 08             	mov    0x8(%ebp),%eax
f0133061:	a3 e4 b8 85 f0       	mov    %eax,0xf085b8e4
f0133066:	8b 45 08             	mov    0x8(%ebp),%eax
f0133069:	a3 e0 b8 85 f0       	mov    %eax,0xf085b8e0
f013306e:	8b 45 08             	mov    0x8(%ebp),%eax
f0133071:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133078:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f013307d:	40                   	inc    %eax
f013307e:	a3 ec b8 85 f0       	mov    %eax,0xf085b8ec
		}
	}

	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0133083:	e9 c5 03 00 00       	jmp    f013344d <insert_sorted_with_merge_freeList+0x444>
	struct MemBlock* last = LIST_LAST(&FreeMemBlocksList);
	//check if list empty
	if (LIST_SIZE(&(FreeMemBlocksList)) == 0)
		LIST_INSERT_HEAD(&FreeMemBlocksList, blockToInsert);
	//check if it's position is at last
	else if (last->sva < blockToInsert->sva) {
f0133088:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013308b:	8b 50 08             	mov    0x8(%eax),%edx
f013308e:	8b 45 08             	mov    0x8(%ebp),%eax
f0133091:	8b 40 08             	mov    0x8(%eax),%eax
f0133094:	39 c2                	cmp    %eax,%edx
f0133096:	0f 83 b2 00 00 00    	jae    f013314e <insert_sorted_with_merge_freeList+0x145>

		//if i have to merge
		if (last->sva + last->size == blockToInsert->sva) {
f013309c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013309f:	8b 50 08             	mov    0x8(%eax),%edx
f01330a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01330a5:	8b 40 0c             	mov    0xc(%eax),%eax
f01330a8:	01 c2                	add    %eax,%edx
f01330aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01330ad:	8b 40 08             	mov    0x8(%eax),%eax
f01330b0:	39 c2                	cmp    %eax,%edx
f01330b2:	75 27                	jne    f01330db <insert_sorted_with_merge_freeList+0xd2>
			last->size = last->size + blockToInsert->size;
f01330b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01330b7:	8b 50 0c             	mov    0xc(%eax),%edx
f01330ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01330bd:	8b 40 0c             	mov    0xc(%eax),%eax
f01330c0:	01 c2                	add    %eax,%edx
f01330c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01330c5:	89 50 0c             	mov    %edx,0xc(%eax)
			addToAvailMemBlocksList(blockToInsert);
f01330c8:	83 ec 0c             	sub    $0xc,%esp
f01330cb:	ff 75 08             	pushl  0x8(%ebp)
f01330ce:	e8 b6 fe ff ff       	call   f0132f89 <addToAvailMemBlocksList>
f01330d3:	83 c4 10             	add    $0x10,%esp
		}
	}

	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f01330d6:	e9 72 03 00 00       	jmp    f013344d <insert_sorted_with_merge_freeList+0x444>
		if (last->sva + last->size == blockToInsert->sva) {
			last->size = last->size + blockToInsert->size;
			addToAvailMemBlocksList(blockToInsert);

		} else {
			LIST_INSERT_AFTER(&FreeMemBlocksList, last, blockToInsert);
f01330db:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01330df:	74 06                	je     f01330e7 <insert_sorted_with_merge_freeList+0xde>
f01330e1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01330e5:	75 17                	jne    f01330fe <insert_sorted_with_merge_freeList+0xf5>
f01330e7:	83 ec 04             	sub    $0x4,%esp
f01330ea:	68 84 d7 13 f0       	push   $0xf013d784
f01330ef:	68 24 01 00 00       	push   $0x124
f01330f4:	68 47 d7 13 f0       	push   $0xf013d747
f01330f9:	e8 07 d1 fc ff       	call   f0100205 <_panic>
f01330fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0133101:	8b 10                	mov    (%eax),%edx
f0133103:	8b 45 08             	mov    0x8(%ebp),%eax
f0133106:	89 10                	mov    %edx,(%eax)
f0133108:	8b 45 08             	mov    0x8(%ebp),%eax
f013310b:	8b 00                	mov    (%eax),%eax
f013310d:	85 c0                	test   %eax,%eax
f013310f:	74 0b                	je     f013311c <insert_sorted_with_merge_freeList+0x113>
f0133111:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0133114:	8b 00                	mov    (%eax),%eax
f0133116:	8b 55 08             	mov    0x8(%ebp),%edx
f0133119:	89 50 04             	mov    %edx,0x4(%eax)
f013311c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013311f:	8b 55 08             	mov    0x8(%ebp),%edx
f0133122:	89 10                	mov    %edx,(%eax)
f0133124:	8b 45 08             	mov    0x8(%ebp),%eax
f0133127:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013312a:	89 50 04             	mov    %edx,0x4(%eax)
f013312d:	8b 45 08             	mov    0x8(%ebp),%eax
f0133130:	8b 00                	mov    (%eax),%eax
f0133132:	85 c0                	test   %eax,%eax
f0133134:	75 08                	jne    f013313e <insert_sorted_with_merge_freeList+0x135>
f0133136:	8b 45 08             	mov    0x8(%ebp),%eax
f0133139:	a3 e4 b8 85 f0       	mov    %eax,0xf085b8e4
f013313e:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f0133143:	40                   	inc    %eax
f0133144:	a3 ec b8 85 f0       	mov    %eax,0xf085b8ec
		}
	}

	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f0133149:	e9 ff 02 00 00       	jmp    f013344d <insert_sorted_with_merge_freeList+0x444>
		} else {
			LIST_INSERT_AFTER(&FreeMemBlocksList, last, blockToInsert);
		}
	} else {
		struct MemBlock *iterator;
		LIST_FOREACH(iterator, &(FreeMemBlocksList))
f013314e:	a1 e0 b8 85 f0       	mov    0xf085b8e0,%eax
f0133153:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0133156:	e9 c2 02 00 00       	jmp    f013341d <insert_sorted_with_merge_freeList+0x414>
		{

			if (iterator->sva > blockToInsert->sva) {
f013315b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013315e:	8b 50 08             	mov    0x8(%eax),%edx
f0133161:	8b 45 08             	mov    0x8(%ebp),%eax
f0133164:	8b 40 08             	mov    0x8(%eax),%eax
f0133167:	39 c2                	cmp    %eax,%edx
f0133169:	0f 86 a6 02 00 00    	jbe    f0133415 <insert_sorted_with_merge_freeList+0x40c>

				struct MemBlock* prev = LIST_PREV(iterator);
f013316f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133172:	8b 40 04             	mov    0x4(%eax),%eax
f0133175:	89 45 ec             	mov    %eax,-0x14(%ebp)
				if (prev == NULL) {
f0133178:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f013317c:	0f 85 ba 00 00 00    	jne    f013323c <insert_sorted_with_merge_freeList+0x233>
					//check merge
					if (blockToInsert->size + blockToInsert->sva
f0133182:	8b 45 08             	mov    0x8(%ebp),%eax
f0133185:	8b 50 0c             	mov    0xc(%eax),%edx
f0133188:	8b 45 08             	mov    0x8(%ebp),%eax
f013318b:	8b 40 08             	mov    0x8(%eax),%eax
f013318e:	01 c2                	add    %eax,%edx
							== iterator->sva) {
f0133190:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133193:	8b 40 08             	mov    0x8(%eax),%eax
			if (iterator->sva > blockToInsert->sva) {

				struct MemBlock* prev = LIST_PREV(iterator);
				if (prev == NULL) {
					//check merge
					if (blockToInsert->size + blockToInsert->sva
f0133196:	39 c2                	cmp    %eax,%edx
f0133198:	75 33                	jne    f01331cd <insert_sorted_with_merge_freeList+0x1c4>
							== iterator->sva) {
						iterator->sva = blockToInsert->sva;
f013319a:	8b 45 08             	mov    0x8(%ebp),%eax
f013319d:	8b 50 08             	mov    0x8(%eax),%edx
f01331a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01331a3:	89 50 08             	mov    %edx,0x8(%eax)
						iterator->size = iterator->size + blockToInsert->size;
f01331a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01331a9:	8b 50 0c             	mov    0xc(%eax),%edx
f01331ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01331af:	8b 40 0c             	mov    0xc(%eax),%eax
f01331b2:	01 c2                	add    %eax,%edx
f01331b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01331b7:	89 50 0c             	mov    %edx,0xc(%eax)
						addToAvailMemBlocksList(blockToInsert);
f01331ba:	83 ec 0c             	sub    $0xc,%esp
f01331bd:	ff 75 08             	pushl  0x8(%ebp)
f01331c0:	e8 c4 fd ff ff       	call   f0132f89 <addToAvailMemBlocksList>
f01331c5:	83 c4 10             	add    $0x10,%esp

					else {
						LIST_INSERT_BEFORE(&FreeMemBlocksList, iterator,
								blockToInsert);
					}
					break;
f01331c8:	e9 80 02 00 00       	jmp    f013344d <insert_sorted_with_merge_freeList+0x444>
						addToAvailMemBlocksList(blockToInsert);

					}

					else {
						LIST_INSERT_BEFORE(&FreeMemBlocksList, iterator,
f01331cd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01331d1:	74 06                	je     f01331d9 <insert_sorted_with_merge_freeList+0x1d0>
f01331d3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01331d7:	75 17                	jne    f01331f0 <insert_sorted_with_merge_freeList+0x1e7>
f01331d9:	83 ec 04             	sub    $0x4,%esp
f01331dc:	68 d8 d7 13 f0       	push   $0xf013d7d8
f01331e1:	68 3a 01 00 00       	push   $0x13a
f01331e6:	68 47 d7 13 f0       	push   $0xf013d747
f01331eb:	e8 15 d0 fc ff       	call   f0100205 <_panic>
f01331f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01331f3:	8b 50 04             	mov    0x4(%eax),%edx
f01331f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01331f9:	89 50 04             	mov    %edx,0x4(%eax)
f01331fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01331ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0133202:	89 10                	mov    %edx,(%eax)
f0133204:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133207:	8b 40 04             	mov    0x4(%eax),%eax
f013320a:	85 c0                	test   %eax,%eax
f013320c:	74 0d                	je     f013321b <insert_sorted_with_merge_freeList+0x212>
f013320e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133211:	8b 40 04             	mov    0x4(%eax),%eax
f0133214:	8b 55 08             	mov    0x8(%ebp),%edx
f0133217:	89 10                	mov    %edx,(%eax)
f0133219:	eb 08                	jmp    f0133223 <insert_sorted_with_merge_freeList+0x21a>
f013321b:	8b 45 08             	mov    0x8(%ebp),%eax
f013321e:	a3 e0 b8 85 f0       	mov    %eax,0xf085b8e0
f0133223:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133226:	8b 55 08             	mov    0x8(%ebp),%edx
f0133229:	89 50 04             	mov    %edx,0x4(%eax)
f013322c:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f0133231:	40                   	inc    %eax
f0133232:	a3 ec b8 85 f0       	mov    %eax,0xf085b8ec
								blockToInsert);
					}
					break;
f0133237:	e9 11 02 00 00       	jmp    f013344d <insert_sorted_with_merge_freeList+0x444>
				} else {
					//prev and next merge
					if (prev->sva + prev->size + blockToInsert->size
f013323c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013323f:	8b 50 08             	mov    0x8(%eax),%edx
f0133242:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0133245:	8b 40 0c             	mov    0xc(%eax),%eax
f0133248:	01 c2                	add    %eax,%edx
f013324a:	8b 45 08             	mov    0x8(%ebp),%eax
f013324d:	8b 40 0c             	mov    0xc(%eax),%eax
f0133250:	01 c2                	add    %eax,%edx
							== iterator->sva) {
f0133252:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133255:	8b 40 08             	mov    0x8(%eax),%eax
								blockToInsert);
					}
					break;
				} else {
					//prev and next merge
					if (prev->sva + prev->size + blockToInsert->size
f0133258:	39 c2                	cmp    %eax,%edx
f013325a:	0f 85 bf 00 00 00    	jne    f013331f <insert_sorted_with_merge_freeList+0x316>
							== iterator->sva) {
						prev->size = prev->size + blockToInsert->size
f0133260:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0133263:	8b 50 0c             	mov    0xc(%eax),%edx
f0133266:	8b 45 08             	mov    0x8(%ebp),%eax
f0133269:	8b 40 0c             	mov    0xc(%eax),%eax
f013326c:	01 c2                	add    %eax,%edx
								+ iterator->size;
f013326e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133271:	8b 40 0c             	mov    0xc(%eax),%eax
f0133274:	01 c2                	add    %eax,%edx
					break;
				} else {
					//prev and next merge
					if (prev->sva + prev->size + blockToInsert->size
							== iterator->sva) {
						prev->size = prev->size + blockToInsert->size
f0133276:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0133279:	89 50 0c             	mov    %edx,0xc(%eax)
								+ iterator->size;
						LIST_REMOVE(&FreeMemBlocksList, iterator);
f013327c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0133280:	75 17                	jne    f0133299 <insert_sorted_with_merge_freeList+0x290>
f0133282:	83 ec 04             	sub    $0x4,%esp
f0133285:	68 b8 d7 13 f0       	push   $0xf013d7b8
f013328a:	68 43 01 00 00       	push   $0x143
f013328f:	68 47 d7 13 f0       	push   $0xf013d747
f0133294:	e8 6c cf fc ff       	call   f0100205 <_panic>
f0133299:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013329c:	8b 00                	mov    (%eax),%eax
f013329e:	85 c0                	test   %eax,%eax
f01332a0:	74 10                	je     f01332b2 <insert_sorted_with_merge_freeList+0x2a9>
f01332a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01332a5:	8b 00                	mov    (%eax),%eax
f01332a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01332aa:	8b 52 04             	mov    0x4(%edx),%edx
f01332ad:	89 50 04             	mov    %edx,0x4(%eax)
f01332b0:	eb 0b                	jmp    f01332bd <insert_sorted_with_merge_freeList+0x2b4>
f01332b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01332b5:	8b 40 04             	mov    0x4(%eax),%eax
f01332b8:	a3 e4 b8 85 f0       	mov    %eax,0xf085b8e4
f01332bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01332c0:	8b 40 04             	mov    0x4(%eax),%eax
f01332c3:	85 c0                	test   %eax,%eax
f01332c5:	74 0f                	je     f01332d6 <insert_sorted_with_merge_freeList+0x2cd>
f01332c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01332ca:	8b 40 04             	mov    0x4(%eax),%eax
f01332cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01332d0:	8b 12                	mov    (%edx),%edx
f01332d2:	89 10                	mov    %edx,(%eax)
f01332d4:	eb 0a                	jmp    f01332e0 <insert_sorted_with_merge_freeList+0x2d7>
f01332d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01332d9:	8b 00                	mov    (%eax),%eax
f01332db:	a3 e0 b8 85 f0       	mov    %eax,0xf085b8e0
f01332e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01332e3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01332e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01332ec:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01332f3:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f01332f8:	48                   	dec    %eax
f01332f9:	a3 ec b8 85 f0       	mov    %eax,0xf085b8ec
						addToAvailMemBlocksList(blockToInsert);
f01332fe:	83 ec 0c             	sub    $0xc,%esp
f0133301:	ff 75 08             	pushl  0x8(%ebp)
f0133304:	e8 80 fc ff ff       	call   f0132f89 <addToAvailMemBlocksList>
f0133309:	83 c4 10             	add    $0x10,%esp
						addToAvailMemBlocksList(iterator);
f013330c:	83 ec 0c             	sub    $0xc,%esp
f013330f:	ff 75 f4             	pushl  -0xc(%ebp)
f0133312:	e8 72 fc ff ff       	call   f0132f89 <addToAvailMemBlocksList>
f0133317:	83 c4 10             	add    $0x10,%esp
					//Insert
					else {
						LIST_INSERT_BEFORE(&FreeMemBlocksList, iterator,
								blockToInsert);
					}
					break;
f013331a:	e9 2e 01 00 00       	jmp    f013344d <insert_sorted_with_merge_freeList+0x444>
						LIST_REMOVE(&FreeMemBlocksList, iterator);
						addToAvailMemBlocksList(blockToInsert);
						addToAvailMemBlocksList(iterator);
					}
					//previous merge
					else if (prev->sva + prev->size == blockToInsert->sva) {
f013331f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0133322:	8b 50 08             	mov    0x8(%eax),%edx
f0133325:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0133328:	8b 40 0c             	mov    0xc(%eax),%eax
f013332b:	01 c2                	add    %eax,%edx
f013332d:	8b 45 08             	mov    0x8(%ebp),%eax
f0133330:	8b 40 08             	mov    0x8(%eax),%eax
f0133333:	39 c2                	cmp    %eax,%edx
f0133335:	75 27                	jne    f013335e <insert_sorted_with_merge_freeList+0x355>
						prev->size = prev->size + blockToInsert->size;
f0133337:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013333a:	8b 50 0c             	mov    0xc(%eax),%edx
f013333d:	8b 45 08             	mov    0x8(%ebp),%eax
f0133340:	8b 40 0c             	mov    0xc(%eax),%eax
f0133343:	01 c2                	add    %eax,%edx
f0133345:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0133348:	89 50 0c             	mov    %edx,0xc(%eax)
						addToAvailMemBlocksList(blockToInsert);
f013334b:	83 ec 0c             	sub    $0xc,%esp
f013334e:	ff 75 08             	pushl  0x8(%ebp)
f0133351:	e8 33 fc ff ff       	call   f0132f89 <addToAvailMemBlocksList>
f0133356:	83 c4 10             	add    $0x10,%esp
					//Insert
					else {
						LIST_INSERT_BEFORE(&FreeMemBlocksList, iterator,
								blockToInsert);
					}
					break;
f0133359:	e9 ef 00 00 00       	jmp    f013344d <insert_sorted_with_merge_freeList+0x444>
					else if (prev->sva + prev->size == blockToInsert->sva) {
						prev->size = prev->size + blockToInsert->size;
						addToAvailMemBlocksList(blockToInsert);
					}
					//next merge
					else if (blockToInsert->size + blockToInsert->sva
f013335e:	8b 45 08             	mov    0x8(%ebp),%eax
f0133361:	8b 50 0c             	mov    0xc(%eax),%edx
f0133364:	8b 45 08             	mov    0x8(%ebp),%eax
f0133367:	8b 40 08             	mov    0x8(%eax),%eax
f013336a:	01 c2                	add    %eax,%edx
							== iterator->sva) {
f013336c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013336f:	8b 40 08             	mov    0x8(%eax),%eax
					else if (prev->sva + prev->size == blockToInsert->sva) {
						prev->size = prev->size + blockToInsert->size;
						addToAvailMemBlocksList(blockToInsert);
					}
					//next merge
					else if (blockToInsert->size + blockToInsert->sva
f0133372:	39 c2                	cmp    %eax,%edx
f0133374:	75 33                	jne    f01333a9 <insert_sorted_with_merge_freeList+0x3a0>
							== iterator->sva) {
						iterator->sva = blockToInsert->sva;
f0133376:	8b 45 08             	mov    0x8(%ebp),%eax
f0133379:	8b 50 08             	mov    0x8(%eax),%edx
f013337c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013337f:	89 50 08             	mov    %edx,0x8(%eax)
						iterator->size = iterator->size + blockToInsert->size;
f0133382:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133385:	8b 50 0c             	mov    0xc(%eax),%edx
f0133388:	8b 45 08             	mov    0x8(%ebp),%eax
f013338b:	8b 40 0c             	mov    0xc(%eax),%eax
f013338e:	01 c2                	add    %eax,%edx
f0133390:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133393:	89 50 0c             	mov    %edx,0xc(%eax)
						addToAvailMemBlocksList(blockToInsert);
f0133396:	83 ec 0c             	sub    $0xc,%esp
f0133399:	ff 75 08             	pushl  0x8(%ebp)
f013339c:	e8 e8 fb ff ff       	call   f0132f89 <addToAvailMemBlocksList>
f01333a1:	83 c4 10             	add    $0x10,%esp
					//Insert
					else {
						LIST_INSERT_BEFORE(&FreeMemBlocksList, iterator,
								blockToInsert);
					}
					break;
f01333a4:	e9 a4 00 00 00       	jmp    f013344d <insert_sorted_with_merge_freeList+0x444>
						iterator->size = iterator->size + blockToInsert->size;
						addToAvailMemBlocksList(blockToInsert);
					}
					//Insert
					else {
						LIST_INSERT_BEFORE(&FreeMemBlocksList, iterator,
f01333a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01333ad:	74 06                	je     f01333b5 <insert_sorted_with_merge_freeList+0x3ac>
f01333af:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01333b3:	75 17                	jne    f01333cc <insert_sorted_with_merge_freeList+0x3c3>
f01333b5:	83 ec 04             	sub    $0x4,%esp
f01333b8:	68 d8 d7 13 f0       	push   $0xf013d7d8
f01333bd:	68 56 01 00 00       	push   $0x156
f01333c2:	68 47 d7 13 f0       	push   $0xf013d747
f01333c7:	e8 39 ce fc ff       	call   f0100205 <_panic>
f01333cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01333cf:	8b 50 04             	mov    0x4(%eax),%edx
f01333d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01333d5:	89 50 04             	mov    %edx,0x4(%eax)
f01333d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01333db:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01333de:	89 10                	mov    %edx,(%eax)
f01333e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01333e3:	8b 40 04             	mov    0x4(%eax),%eax
f01333e6:	85 c0                	test   %eax,%eax
f01333e8:	74 0d                	je     f01333f7 <insert_sorted_with_merge_freeList+0x3ee>
f01333ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01333ed:	8b 40 04             	mov    0x4(%eax),%eax
f01333f0:	8b 55 08             	mov    0x8(%ebp),%edx
f01333f3:	89 10                	mov    %edx,(%eax)
f01333f5:	eb 08                	jmp    f01333ff <insert_sorted_with_merge_freeList+0x3f6>
f01333f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01333fa:	a3 e0 b8 85 f0       	mov    %eax,0xf085b8e0
f01333ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133402:	8b 55 08             	mov    0x8(%ebp),%edx
f0133405:	89 50 04             	mov    %edx,0x4(%eax)
f0133408:	a1 ec b8 85 f0       	mov    0xf085b8ec,%eax
f013340d:	40                   	inc    %eax
f013340e:	a3 ec b8 85 f0       	mov    %eax,0xf085b8ec
								blockToInsert);
					}
					break;
f0133413:	eb 38                	jmp    f013344d <insert_sorted_with_merge_freeList+0x444>
		} else {
			LIST_INSERT_AFTER(&FreeMemBlocksList, last, blockToInsert);
		}
	} else {
		struct MemBlock *iterator;
		LIST_FOREACH(iterator, &(FreeMemBlocksList))
f0133415:	a1 e8 b8 85 f0       	mov    0xf085b8e8,%eax
f013341a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013341d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0133421:	74 07                	je     f013342a <insert_sorted_with_merge_freeList+0x421>
f0133423:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133426:	8b 00                	mov    (%eax),%eax
f0133428:	eb 05                	jmp    f013342f <insert_sorted_with_merge_freeList+0x426>
f013342a:	b8 00 00 00 00       	mov    $0x0,%eax
f013342f:	a3 e8 b8 85 f0       	mov    %eax,0xf085b8e8
f0133434:	a1 e8 b8 85 f0       	mov    0xf085b8e8,%eax
f0133439:	85 c0                	test   %eax,%eax
f013343b:	0f 85 1a fd ff ff    	jne    f013315b <insert_sorted_with_merge_freeList+0x152>
f0133441:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0133445:	0f 85 10 fd ff ff    	jne    f013315b <insert_sorted_with_merge_freeList+0x152>
		}
	}

	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();
}
f013344b:	eb 00                	jmp    f013344d <insert_sorted_with_merge_freeList+0x444>
f013344d:	90                   	nop
f013344e:	c9                   	leave  
f013344f:	c3                   	ret    

f0133450 <__udivdi3>:
f0133450:	55                   	push   %ebp
f0133451:	57                   	push   %edi
f0133452:	56                   	push   %esi
f0133453:	53                   	push   %ebx
f0133454:	83 ec 1c             	sub    $0x1c,%esp
f0133457:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f013345b:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f013345f:	8b 7c 24 38          	mov    0x38(%esp),%edi
f0133463:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f0133467:	89 ca                	mov    %ecx,%edx
f0133469:	89 f8                	mov    %edi,%eax
f013346b:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f013346f:	85 f6                	test   %esi,%esi
f0133471:	75 2d                	jne    f01334a0 <__udivdi3+0x50>
f0133473:	39 cf                	cmp    %ecx,%edi
f0133475:	77 65                	ja     f01334dc <__udivdi3+0x8c>
f0133477:	89 fd                	mov    %edi,%ebp
f0133479:	85 ff                	test   %edi,%edi
f013347b:	75 0b                	jne    f0133488 <__udivdi3+0x38>
f013347d:	b8 01 00 00 00       	mov    $0x1,%eax
f0133482:	31 d2                	xor    %edx,%edx
f0133484:	f7 f7                	div    %edi
f0133486:	89 c5                	mov    %eax,%ebp
f0133488:	31 d2                	xor    %edx,%edx
f013348a:	89 c8                	mov    %ecx,%eax
f013348c:	f7 f5                	div    %ebp
f013348e:	89 c1                	mov    %eax,%ecx
f0133490:	89 d8                	mov    %ebx,%eax
f0133492:	f7 f5                	div    %ebp
f0133494:	89 cf                	mov    %ecx,%edi
f0133496:	89 fa                	mov    %edi,%edx
f0133498:	83 c4 1c             	add    $0x1c,%esp
f013349b:	5b                   	pop    %ebx
f013349c:	5e                   	pop    %esi
f013349d:	5f                   	pop    %edi
f013349e:	5d                   	pop    %ebp
f013349f:	c3                   	ret    
f01334a0:	39 ce                	cmp    %ecx,%esi
f01334a2:	77 28                	ja     f01334cc <__udivdi3+0x7c>
f01334a4:	0f bd fe             	bsr    %esi,%edi
f01334a7:	83 f7 1f             	xor    $0x1f,%edi
f01334aa:	75 40                	jne    f01334ec <__udivdi3+0x9c>
f01334ac:	39 ce                	cmp    %ecx,%esi
f01334ae:	72 0a                	jb     f01334ba <__udivdi3+0x6a>
f01334b0:	3b 44 24 08          	cmp    0x8(%esp),%eax
f01334b4:	0f 87 9e 00 00 00    	ja     f0133558 <__udivdi3+0x108>
f01334ba:	b8 01 00 00 00       	mov    $0x1,%eax
f01334bf:	89 fa                	mov    %edi,%edx
f01334c1:	83 c4 1c             	add    $0x1c,%esp
f01334c4:	5b                   	pop    %ebx
f01334c5:	5e                   	pop    %esi
f01334c6:	5f                   	pop    %edi
f01334c7:	5d                   	pop    %ebp
f01334c8:	c3                   	ret    
f01334c9:	8d 76 00             	lea    0x0(%esi),%esi
f01334cc:	31 ff                	xor    %edi,%edi
f01334ce:	31 c0                	xor    %eax,%eax
f01334d0:	89 fa                	mov    %edi,%edx
f01334d2:	83 c4 1c             	add    $0x1c,%esp
f01334d5:	5b                   	pop    %ebx
f01334d6:	5e                   	pop    %esi
f01334d7:	5f                   	pop    %edi
f01334d8:	5d                   	pop    %ebp
f01334d9:	c3                   	ret    
f01334da:	66 90                	xchg   %ax,%ax
f01334dc:	89 d8                	mov    %ebx,%eax
f01334de:	f7 f7                	div    %edi
f01334e0:	31 ff                	xor    %edi,%edi
f01334e2:	89 fa                	mov    %edi,%edx
f01334e4:	83 c4 1c             	add    $0x1c,%esp
f01334e7:	5b                   	pop    %ebx
f01334e8:	5e                   	pop    %esi
f01334e9:	5f                   	pop    %edi
f01334ea:	5d                   	pop    %ebp
f01334eb:	c3                   	ret    
f01334ec:	bd 20 00 00 00       	mov    $0x20,%ebp
f01334f1:	89 eb                	mov    %ebp,%ebx
f01334f3:	29 fb                	sub    %edi,%ebx
f01334f5:	89 f9                	mov    %edi,%ecx
f01334f7:	d3 e6                	shl    %cl,%esi
f01334f9:	89 c5                	mov    %eax,%ebp
f01334fb:	88 d9                	mov    %bl,%cl
f01334fd:	d3 ed                	shr    %cl,%ebp
f01334ff:	89 e9                	mov    %ebp,%ecx
f0133501:	09 f1                	or     %esi,%ecx
f0133503:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f0133507:	89 f9                	mov    %edi,%ecx
f0133509:	d3 e0                	shl    %cl,%eax
f013350b:	89 c5                	mov    %eax,%ebp
f013350d:	89 d6                	mov    %edx,%esi
f013350f:	88 d9                	mov    %bl,%cl
f0133511:	d3 ee                	shr    %cl,%esi
f0133513:	89 f9                	mov    %edi,%ecx
f0133515:	d3 e2                	shl    %cl,%edx
f0133517:	8b 44 24 08          	mov    0x8(%esp),%eax
f013351b:	88 d9                	mov    %bl,%cl
f013351d:	d3 e8                	shr    %cl,%eax
f013351f:	09 c2                	or     %eax,%edx
f0133521:	89 d0                	mov    %edx,%eax
f0133523:	89 f2                	mov    %esi,%edx
f0133525:	f7 74 24 0c          	divl   0xc(%esp)
f0133529:	89 d6                	mov    %edx,%esi
f013352b:	89 c3                	mov    %eax,%ebx
f013352d:	f7 e5                	mul    %ebp
f013352f:	39 d6                	cmp    %edx,%esi
f0133531:	72 19                	jb     f013354c <__udivdi3+0xfc>
f0133533:	74 0b                	je     f0133540 <__udivdi3+0xf0>
f0133535:	89 d8                	mov    %ebx,%eax
f0133537:	31 ff                	xor    %edi,%edi
f0133539:	e9 58 ff ff ff       	jmp    f0133496 <__udivdi3+0x46>
f013353e:	66 90                	xchg   %ax,%ax
f0133540:	8b 54 24 08          	mov    0x8(%esp),%edx
f0133544:	89 f9                	mov    %edi,%ecx
f0133546:	d3 e2                	shl    %cl,%edx
f0133548:	39 c2                	cmp    %eax,%edx
f013354a:	73 e9                	jae    f0133535 <__udivdi3+0xe5>
f013354c:	8d 43 ff             	lea    -0x1(%ebx),%eax
f013354f:	31 ff                	xor    %edi,%edi
f0133551:	e9 40 ff ff ff       	jmp    f0133496 <__udivdi3+0x46>
f0133556:	66 90                	xchg   %ax,%ax
f0133558:	31 c0                	xor    %eax,%eax
f013355a:	e9 37 ff ff ff       	jmp    f0133496 <__udivdi3+0x46>
f013355f:	90                   	nop

f0133560 <__umoddi3>:
f0133560:	55                   	push   %ebp
f0133561:	57                   	push   %edi
f0133562:	56                   	push   %esi
f0133563:	53                   	push   %ebx
f0133564:	83 ec 1c             	sub    $0x1c,%esp
f0133567:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f013356b:	8b 74 24 34          	mov    0x34(%esp),%esi
f013356f:	8b 7c 24 38          	mov    0x38(%esp),%edi
f0133573:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f0133577:	89 44 24 0c          	mov    %eax,0xc(%esp)
f013357b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f013357f:	89 f3                	mov    %esi,%ebx
f0133581:	89 fa                	mov    %edi,%edx
f0133583:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0133587:	89 34 24             	mov    %esi,(%esp)
f013358a:	85 c0                	test   %eax,%eax
f013358c:	75 1a                	jne    f01335a8 <__umoddi3+0x48>
f013358e:	39 f7                	cmp    %esi,%edi
f0133590:	0f 86 a2 00 00 00    	jbe    f0133638 <__umoddi3+0xd8>
f0133596:	89 c8                	mov    %ecx,%eax
f0133598:	89 f2                	mov    %esi,%edx
f013359a:	f7 f7                	div    %edi
f013359c:	89 d0                	mov    %edx,%eax
f013359e:	31 d2                	xor    %edx,%edx
f01335a0:	83 c4 1c             	add    $0x1c,%esp
f01335a3:	5b                   	pop    %ebx
f01335a4:	5e                   	pop    %esi
f01335a5:	5f                   	pop    %edi
f01335a6:	5d                   	pop    %ebp
f01335a7:	c3                   	ret    
f01335a8:	39 f0                	cmp    %esi,%eax
f01335aa:	0f 87 ac 00 00 00    	ja     f013365c <__umoddi3+0xfc>
f01335b0:	0f bd e8             	bsr    %eax,%ebp
f01335b3:	83 f5 1f             	xor    $0x1f,%ebp
f01335b6:	0f 84 ac 00 00 00    	je     f0133668 <__umoddi3+0x108>
f01335bc:	bf 20 00 00 00       	mov    $0x20,%edi
f01335c1:	29 ef                	sub    %ebp,%edi
f01335c3:	89 fe                	mov    %edi,%esi
f01335c5:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f01335c9:	89 e9                	mov    %ebp,%ecx
f01335cb:	d3 e0                	shl    %cl,%eax
f01335cd:	89 d7                	mov    %edx,%edi
f01335cf:	89 f1                	mov    %esi,%ecx
f01335d1:	d3 ef                	shr    %cl,%edi
f01335d3:	09 c7                	or     %eax,%edi
f01335d5:	89 e9                	mov    %ebp,%ecx
f01335d7:	d3 e2                	shl    %cl,%edx
f01335d9:	89 14 24             	mov    %edx,(%esp)
f01335dc:	89 d8                	mov    %ebx,%eax
f01335de:	d3 e0                	shl    %cl,%eax
f01335e0:	89 c2                	mov    %eax,%edx
f01335e2:	8b 44 24 08          	mov    0x8(%esp),%eax
f01335e6:	d3 e0                	shl    %cl,%eax
f01335e8:	89 44 24 04          	mov    %eax,0x4(%esp)
f01335ec:	8b 44 24 08          	mov    0x8(%esp),%eax
f01335f0:	89 f1                	mov    %esi,%ecx
f01335f2:	d3 e8                	shr    %cl,%eax
f01335f4:	09 d0                	or     %edx,%eax
f01335f6:	d3 eb                	shr    %cl,%ebx
f01335f8:	89 da                	mov    %ebx,%edx
f01335fa:	f7 f7                	div    %edi
f01335fc:	89 d3                	mov    %edx,%ebx
f01335fe:	f7 24 24             	mull   (%esp)
f0133601:	89 c6                	mov    %eax,%esi
f0133603:	89 d1                	mov    %edx,%ecx
f0133605:	39 d3                	cmp    %edx,%ebx
f0133607:	0f 82 87 00 00 00    	jb     f0133694 <__umoddi3+0x134>
f013360d:	0f 84 91 00 00 00    	je     f01336a4 <__umoddi3+0x144>
f0133613:	8b 54 24 04          	mov    0x4(%esp),%edx
f0133617:	29 f2                	sub    %esi,%edx
f0133619:	19 cb                	sbb    %ecx,%ebx
f013361b:	89 d8                	mov    %ebx,%eax
f013361d:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f0133621:	d3 e0                	shl    %cl,%eax
f0133623:	89 e9                	mov    %ebp,%ecx
f0133625:	d3 ea                	shr    %cl,%edx
f0133627:	09 d0                	or     %edx,%eax
f0133629:	89 e9                	mov    %ebp,%ecx
f013362b:	d3 eb                	shr    %cl,%ebx
f013362d:	89 da                	mov    %ebx,%edx
f013362f:	83 c4 1c             	add    $0x1c,%esp
f0133632:	5b                   	pop    %ebx
f0133633:	5e                   	pop    %esi
f0133634:	5f                   	pop    %edi
f0133635:	5d                   	pop    %ebp
f0133636:	c3                   	ret    
f0133637:	90                   	nop
f0133638:	89 fd                	mov    %edi,%ebp
f013363a:	85 ff                	test   %edi,%edi
f013363c:	75 0b                	jne    f0133649 <__umoddi3+0xe9>
f013363e:	b8 01 00 00 00       	mov    $0x1,%eax
f0133643:	31 d2                	xor    %edx,%edx
f0133645:	f7 f7                	div    %edi
f0133647:	89 c5                	mov    %eax,%ebp
f0133649:	89 f0                	mov    %esi,%eax
f013364b:	31 d2                	xor    %edx,%edx
f013364d:	f7 f5                	div    %ebp
f013364f:	89 c8                	mov    %ecx,%eax
f0133651:	f7 f5                	div    %ebp
f0133653:	89 d0                	mov    %edx,%eax
f0133655:	e9 44 ff ff ff       	jmp    f013359e <__umoddi3+0x3e>
f013365a:	66 90                	xchg   %ax,%ax
f013365c:	89 c8                	mov    %ecx,%eax
f013365e:	89 f2                	mov    %esi,%edx
f0133660:	83 c4 1c             	add    $0x1c,%esp
f0133663:	5b                   	pop    %ebx
f0133664:	5e                   	pop    %esi
f0133665:	5f                   	pop    %edi
f0133666:	5d                   	pop    %ebp
f0133667:	c3                   	ret    
f0133668:	3b 04 24             	cmp    (%esp),%eax
f013366b:	72 06                	jb     f0133673 <__umoddi3+0x113>
f013366d:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f0133671:	77 0f                	ja     f0133682 <__umoddi3+0x122>
f0133673:	89 f2                	mov    %esi,%edx
f0133675:	29 f9                	sub    %edi,%ecx
f0133677:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f013367b:	89 14 24             	mov    %edx,(%esp)
f013367e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0133682:	8b 44 24 04          	mov    0x4(%esp),%eax
f0133686:	8b 14 24             	mov    (%esp),%edx
f0133689:	83 c4 1c             	add    $0x1c,%esp
f013368c:	5b                   	pop    %ebx
f013368d:	5e                   	pop    %esi
f013368e:	5f                   	pop    %edi
f013368f:	5d                   	pop    %ebp
f0133690:	c3                   	ret    
f0133691:	8d 76 00             	lea    0x0(%esi),%esi
f0133694:	2b 04 24             	sub    (%esp),%eax
f0133697:	19 fa                	sbb    %edi,%edx
f0133699:	89 d1                	mov    %edx,%ecx
f013369b:	89 c6                	mov    %eax,%esi
f013369d:	e9 71 ff ff ff       	jmp    f0133613 <__umoddi3+0xb3>
f01336a2:	66 90                	xchg   %ax,%ax
f01336a4:	39 44 24 04          	cmp    %eax,0x4(%esp)
f01336a8:	72 ea                	jb     f0133694 <__umoddi3+0x134>
f01336aa:	89 d9                	mov    %ebx,%ecx
f01336ac:	e9 62 ff ff ff       	jmp    f0133613 <__umoddi3+0xb3>
